/* SAP CVOM 4.0 Â© <2012-2014> SAP SE. All rights reserved. Build Version 5.0.3, Build Context rel-5.0_bychk.33 *//** vim: et:ts=4:sw=4:sts=4
 * @license RequireJS 2.1.5 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/requirejs for details
 */
//Not using strict: uneven strict support in browsers, #392, and causes
//problems with requirejs.exec()/transpiler plugins that may not be strict.
/*jslint regexp: true, nomen: true, sloppy: true */
/*global window, navigator, document, importScripts, setTimeout, opera */

var requirejs, require, define;
(function (global) {
    var req, s, head, baseElement, dataMain, src,
        interactiveScript, currentlyAddingScript, mainScript, subPath,
        version = '2.1.5',
        commentRegExp = /(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/mg,
        cjsRequireRegExp = /[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g,
        jsSuffixRegExp = /\.js$/,
        currDirRegExp = /^\.\//,
        op = Object.prototype,
        ostring = op.toString,
        hasOwn = op.hasOwnProperty,
        ap = Array.prototype,
        apsp = ap.splice,
        isBrowser = !!(typeof window !== 'undefined' && navigator && document),
        isWebWorker = !isBrowser && typeof importScripts !== 'undefined',
        //PS3 indicates loaded and complete, but need to wait for complete
        //specifically. Sequence is 'loading', 'loaded', execution,
        // then 'complete'. The UA check is unfortunate, but not sure how
        //to feature test w/o causing perf issues.
        readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ?
                      /^complete$/ : /^(complete|loaded)$/,
        defContextName = '_',
        //Oh the tragedy, detecting opera. See the usage of isOpera for reason.
        isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',
        contexts = {},
        cfg = {},
        globalDefQueue = [],
        useInteractive = false;

    function isFunction(it) {
        return ostring.call(it) === '[object Function]';
    }

    function isArray(it) {
        return ostring.call(it) === '[object Array]';
    }

    /**
     * Helper function for iterating over an array. If the func returns
     * a true value, it will break out of the loop.
     */
    function each(ary, func) {
        if (ary) {
            var i;
            for (i = 0; i < ary.length; i += 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    /**
     * Helper function for iterating over an array backwards. If the func
     * returns a true value, it will break out of the loop.
     */
    function eachReverse(ary, func) {
        if (ary) {
            var i;
            for (i = ary.length - 1; i > -1; i -= 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    function getOwn(obj, prop) {
        return hasProp(obj, prop) && obj[prop];
    }

    /**
     * Cycles over properties in an object and calls a function for each
     * property value. If the function returns a truthy value, then the
     * iteration is stopped.
     */
    function eachProp(obj, func) {
        var prop;
        for (prop in obj) {
            if (hasProp(obj, prop)) {
                if (func(obj[prop], prop)) {
                    break;
                }
            }
        }
    }

    /**
     * Simple function to mix in properties from source into target,
     * but only if target does not already have a property of the same name.
     */
    function mixin(target, source, force, deepStringMixin) {
        if (source) {
            eachProp(source, function (value, prop) {
                if (force || !hasProp(target, prop)) {
                    if (deepStringMixin && typeof value !== 'string') {
                        if (!target[prop]) {
                            target[prop] = {};
                        }
                        mixin(target[prop], value, force, deepStringMixin);
                    } else {
                        target[prop] = value;
                    }
                }
            });
        }
        return target;
    }

    //Similar to Function.prototype.bind, but the 'this' object is specified
    //first, since it is easier to read/figure out what 'this' will be.
    function bind(obj, fn) {
        return function () {
            return fn.apply(obj, arguments);
        };
    }

    function scripts() {
        return document.getElementsByTagName('script');
    }

    //Allow getting a global that expressed in
    //dot notation, like 'a.b.c'.
    function getGlobal(value) {
        if (!value) {
            return value;
        }
        var g = global;
        each(value.split('.'), function (part) {
            g = g[part];
        });
        return g;
    }

    /**
     * Constructs an error with a pointer to an URL with more information.
     * @param {String} id the error ID that maps to an ID on a web page.
     * @param {String} message human readable error.
     * @param {Error} [err] the original error, if there is one.
     *
     * @returns {Error}
     */
    function makeError(id, msg, err, requireModules) {
        var e = new Error(msg + '\nhttp://requirejs.org/docs/errors.html#' + id);
        e.requireType = id;
        e.requireModules = requireModules;
        if (err) {
            e.originalError = err;
        }
        return e;
    }

    if (typeof define !== 'undefined') {
        //If a define is already in play via another AMD loader,
        //do not overwrite.
        return;
    }

    if (typeof requirejs !== 'undefined') {
        if (isFunction(requirejs)) {
            //Do not overwrite and existing requirejs instance.
            return;
        }
        cfg = requirejs;
        requirejs = undefined;
    }

    //Allow for a require config object
    if (typeof require !== 'undefined' && !isFunction(require)) {
        //assume it is a config object.
        cfg = require;
        require = undefined;
    }

    function newContext(contextName) {
        var inCheckLoaded, Module, context, handlers,
            checkLoadedTimeoutId,
            config = {
                //Defaults. Do not set a default for map
                //config to speed up normalize(), which
                //will run faster if there is no default.
                waitSeconds: 7,
                baseUrl: './',
                paths: {},
                pkgs: {},
                shim: {},
                config: {}
            },
            registry = {},
            //registry of just enabled modules, to speed
            //cycle breaking code when lots of modules
            //are registered, but not activated.
            enabledRegistry = {},
            undefEvents = {},
            defQueue = [],
            defined = {},
            urlFetched = {},
            requireCounter = 1,
            unnormalizedCounter = 1;

        /**
         * Trims the . and .. from an array of path segments.
         * It will keep a leading path segment if a .. will become
         * the first path segment, to help with module name lookups,
         * which act like paths, but can be remapped. But the end result,
         * all paths that use this function should look normalized.
         * NOTE: this method MODIFIES the input array.
         * @param {Array} ary the array of path segments.
         */
        function trimDots(ary) {
            var i, part;
            for (i = 0; ary[i]; i += 1) {
                part = ary[i];
                if (part === '.') {
                    ary.splice(i, 1);
                    i -= 1;
                } else if (part === '..') {
                    if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {
                        //End of the line. Keep at least one non-dot
                        //path segment at the front so it can be mapped
                        //correctly to disk. Otherwise, there is likely
                        //no path mapping for a path starting with '..'.
                        //This can still fail, but catches the most reasonable
                        //uses of ..
                        break;
                    } else if (i > 0) {
                        ary.splice(i - 1, 2);
                        i -= 2;
                    }
                }
            }
        }

        /**
         * Given a relative module name, like ./something, normalize it to
         * a real name that can be mapped to a path.
         * @param {String} name the relative name
         * @param {String} baseName a real name that the name arg is relative
         * to.
         * @param {Boolean} applyMap apply the map config to the value. Should
         * only be done if this normalization is for a dependency ID.
         * @returns {String} normalized name
         */
        function normalize(name, baseName, applyMap) {
            var pkgName, pkgConfig, mapValue, nameParts, i, j, nameSegment,
                foundMap, foundI, foundStarMap, starI,
                baseParts = baseName && baseName.split('/'),
                normalizedBaseParts = baseParts,
                map = config.map,
                starMap = map && map['*'];

            //Adjust any relative paths.
            if (name && name.charAt(0) === '.') {
                //If have a base name, try to normalize against it,
                //otherwise, assume it is a top-level require that will
                //be relative to baseUrl in the end.
                if (baseName) {
                    if (getOwn(config.pkgs, baseName)) {
                        //If the baseName is a package name, then just treat it as one
                        //name to concat the name with.
                        normalizedBaseParts = baseParts = [baseName];
                    } else {
                        //Convert baseName to array, and lop off the last part,
                        //so that . matches that 'directory' and not name of the baseName's
                        //module. For instance, baseName of 'one/two/three', maps to
                        //'one/two/three.js', but we want the directory, 'one/two' for
                        //this normalization.
                        normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                    }

                    name = normalizedBaseParts.concat(name.split('/'));
                    trimDots(name);

                    //Some use of packages may use a . path to reference the
                    //'main' module name, so normalize for that.
                    pkgConfig = getOwn(config.pkgs, (pkgName = name[0]));
                    name = name.join('/');
                    if (pkgConfig && name === pkgName + '/' + pkgConfig.main) {
                        name = pkgName;
                    }
                } else if (name.indexOf('./') === 0) {
                    // No baseName, so this is ID is resolved relative
                    // to baseUrl, pull off the leading dot.
                    name = name.substring(2);
                }
            }

            //Apply map config if available.
            if (applyMap && map && (baseParts || starMap)) {
                nameParts = name.split('/');

                for (i = nameParts.length; i > 0; i -= 1) {
                    nameSegment = nameParts.slice(0, i).join('/');

                    if (baseParts) {
                        //Find the longest baseName segment match in the config.
                        //So, do joins on the biggest to smallest lengths of baseParts.
                        for (j = baseParts.length; j > 0; j -= 1) {
                            mapValue = getOwn(map, baseParts.slice(0, j).join('/'));

                            //baseName segment has config, find if it has one for
                            //this name.
                            if (mapValue) {
                                mapValue = getOwn(mapValue, nameSegment);
                                if (mapValue) {
                                    //Match, update name to the new value.
                                    foundMap = mapValue;
                                    foundI = i;
                                    break;
                                }
                            }
                        }
                    }

                    if (foundMap) {
                        break;
                    }

                    //Check for a star map match, but just hold on to it,
                    //if there is a shorter segment match later in a matching
                    //config, then favor over this star map.
                    if (!foundStarMap && starMap && getOwn(starMap, nameSegment)) {
                        foundStarMap = getOwn(starMap, nameSegment);
                        starI = i;
                    }
                }

                if (!foundMap && foundStarMap) {
                    foundMap = foundStarMap;
                    foundI = starI;
                }

                if (foundMap) {
                    nameParts.splice(0, foundI, foundMap);
                    name = nameParts.join('/');
                }
            }

            return name;
        }

        function removeScript(name) {
            if (isBrowser) {
                each(scripts(), function (scriptNode) {
                    if (scriptNode.getAttribute('data-requiremodule') === name &&
                            scriptNode.getAttribute('data-requirecontext') === context.contextName) {
                        scriptNode.parentNode.removeChild(scriptNode);
                        return true;
                    }
                });
            }
        }

        function hasPathFallback(id) {
            var pathConfig = getOwn(config.paths, id);
            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {
                removeScript(id);
                //Pop off the first array value, since it failed, and
                //retry
                pathConfig.shift();
                context.require.undef(id);
                context.require([id]);
                return true;
            }
        }

        //Turns a plugin!resource to [plugin, resource]
        //with the plugin being undefined if the name
        //did not have a plugin prefix.
        function splitPrefix(name) {
            var prefix,
                index = name ? name.indexOf('!') : -1;
            if (index > -1) {
                prefix = name.substring(0, index);
                name = name.substring(index + 1, name.length);
            }
            return [prefix, name];
        }

        /**
         * Creates a module mapping that includes plugin prefix, module
         * name, and path. If parentModuleMap is provided it will
         * also normalize the name via require.normalize()
         *
         * @param {String} name the module name
         * @param {String} [parentModuleMap] parent module map
         * for the module name, used to resolve relative names.
         * @param {Boolean} isNormalized: is the ID already normalized.
         * This is true if this call is done for a define() module ID.
         * @param {Boolean} applyMap: apply the map config to the ID.
         * Should only be true if this map is for a dependency.
         *
         * @returns {Object}
         */
        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {
            var url, pluginModule, suffix, nameParts,
                prefix = null,
                parentName = parentModuleMap ? parentModuleMap.name : null,
                originalName = name,
                isDefine = true,
                normalizedName = '';

            //If no name, then it means it is a require call, generate an
            //internal name.
            if (!name) {
                isDefine = false;
                name = '_@r' + (requireCounter += 1);
            }

            nameParts = splitPrefix(name);
            prefix = nameParts[0];
            name = nameParts[1];

            if (prefix) {
                prefix = normalize(prefix, parentName, applyMap);
                pluginModule = getOwn(defined, prefix);
            }

            //Account for relative paths if there is a base name.
            if (name) {
                if (prefix) {
                    if (pluginModule && pluginModule.normalize) {
                        //Plugin is loaded, use its normalize method.
                        normalizedName = pluginModule.normalize(name, function (name) {
                            return normalize(name, parentName, applyMap);
                        });
                    } else {
                        normalizedName = normalize(name, parentName, applyMap);
                    }
                } else {
                    //A regular module.
                    normalizedName = normalize(name, parentName, applyMap);

                    //Normalized name may be a plugin ID due to map config
                    //application in normalize. The map config values must
                    //already be normalized, so do not need to redo that part.
                    nameParts = splitPrefix(normalizedName);
                    prefix = nameParts[0];
                    normalizedName = nameParts[1];
                    isNormalized = true;

                    url = context.nameToUrl(normalizedName);
                }
            }

            //If the id is a plugin id that cannot be determined if it needs
            //normalization, stamp it with a unique ID so two matching relative
            //ids that may conflict can be separate.
            suffix = prefix && !pluginModule && !isNormalized ?
                     '_unnormalized' + (unnormalizedCounter += 1) :
                     '';

            return {
                prefix: prefix,
                name: normalizedName,
                parentMap: parentModuleMap,
                unnormalized: !!suffix,
                url: url,
                originalName: originalName,
                isDefine: isDefine,
                id: (prefix ?
                        prefix + '!' + normalizedName :
                        normalizedName) + suffix
            };
        }

        function getModule(depMap) {
            var id = depMap.id,
                mod = getOwn(registry, id);

            if (!mod) {
                mod = registry[id] = new context.Module(depMap);
            }

            return mod;
        }

        function on(depMap, name, fn) {
            var id = depMap.id,
                mod = getOwn(registry, id);

            if (hasProp(defined, id) &&
                    (!mod || mod.defineEmitComplete)) {
                if (name === 'defined') {
                    fn(defined[id]);
                }
            } else {
                getModule(depMap).on(name, fn);
            }
        }

        function onError(err, errback) {
            var ids = err.requireModules,
                notified = false;

            if (errback) {
                errback(err);
            } else {
                each(ids, function (id) {
                    var mod = getOwn(registry, id);
                    if (mod) {
                        //Set error on module, so it skips timeout checks.
                        mod.error = err;
                        if (mod.events.error) {
                            notified = true;
                            mod.emit('error', err);
                        }
                    }
                });

                if (!notified) {
                    req.onError(err);
                }
            }
        }

        /**
         * Internal method to transfer globalQueue items to this context's
         * defQueue.
         */
        function takeGlobalQueue() {
            //Push all the globalDefQueue items into the context's defQueue
            if (globalDefQueue.length) {
                //Array splice in the values since the context code has a
                //local var ref to defQueue, so cannot just reassign the one
                //on context.
                apsp.apply(defQueue,
                           [defQueue.length - 1, 0].concat(globalDefQueue));
                globalDefQueue = [];
            }
        }

        handlers = {
            'require': function (mod) {
                if (mod.require) {
                    return mod.require;
                } else {
                    return (mod.require = context.makeRequire(mod.map));
                }
            },
            'exports': function (mod) {
                mod.usingExports = true;
                if (mod.map.isDefine) {
                    if (mod.exports) {
                        return mod.exports;
                    } else {
                        return (mod.exports = defined[mod.map.id] = {});
                    }
                }
            },
            'module': function (mod) {
                if (mod.module) {
                    return mod.module;
                } else {
                    return (mod.module = {
                        id: mod.map.id,
                        uri: mod.map.url,
                        config: function () {
                            return (config.config && getOwn(config.config, mod.map.id)) || {};
                        },
                        exports: defined[mod.map.id]
                    });
                }
            }
        };

        function cleanRegistry(id) {
            //Clean up machinery used for waiting modules.
            delete registry[id];
            delete enabledRegistry[id];
        }

        function breakCycle(mod, traced, processed) {
            var id = mod.map.id;

            if (mod.error) {
                mod.emit('error', mod.error);
            } else {
                traced[id] = true;
                each(mod.depMaps, function (depMap, i) {
                    var depId = depMap.id,
                        dep = getOwn(registry, depId);

                    //Only force things that have not completed
                    //being defined, so still in the registry,
                    //and only if it has not been matched up
                    //in the module already.
                    if (dep && !mod.depMatched[i] && !processed[depId]) {
                        if (getOwn(traced, depId)) {
                            mod.defineDep(i, defined[depId]);
                            mod.check(); //pass false?
                        } else {
                            breakCycle(dep, traced, processed);
                        }
                    }
                });
                processed[id] = true;
            }
        }

        function checkLoaded() {
            var map, modId, err, usingPathFallback,
                waitInterval = config.waitSeconds * 1000,
                //It is possible to disable the wait interval by using waitSeconds of 0.
                expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(),
                noLoads = [],
                reqCalls = [],
                stillLoading = false,
                needCycleCheck = true;

            //Do not bother if this call was a result of a cycle break.
            if (inCheckLoaded) {
                return;
            }

            inCheckLoaded = true;

            //Figure out the state of all the modules.
            eachProp(enabledRegistry, function (mod) {
                map = mod.map;
                modId = map.id;

                //Skip things that are not enabled or in error state.
                if (!mod.enabled) {
                    return;
                }

                if (!map.isDefine) {
                    reqCalls.push(mod);
                }

                if (!mod.error) {
                    //If the module should be executed, and it has not
                    //been inited and time is up, remember it.
                    if (!mod.inited && expired) {
                        if (hasPathFallback(modId)) {
                            usingPathFallback = true;
                            stillLoading = true;
                        } else {
                            noLoads.push(modId);
                            removeScript(modId);
                        }
                    } else if (!mod.inited && mod.fetched && map.isDefine) {
                        stillLoading = true;
                        if (!map.prefix) {
                            //No reason to keep looking for unfinished
                            //loading. If the only stillLoading is a
                            //plugin resource though, keep going,
                            //because it may be that a plugin resource
                            //is waiting on a non-plugin cycle.
                            return (needCycleCheck = false);
                        }
                    }
                }
            });

            if (expired && noLoads.length) {
                //If wait time expired, throw error of unloaded modules.
                err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);
                err.contextName = context.contextName;
                return onError(err);
            }

            //Not expired, check for a cycle.
            if (needCycleCheck) {
                each(reqCalls, function (mod) {
                    breakCycle(mod, {}, {});
                });
            }

            //If still waiting on loads, and the waiting load is something
            //other than a plugin resource, or there are still outstanding
            //scripts, then just try back later.
            if ((!expired || usingPathFallback) && stillLoading) {
                //Something is still waiting to load. Wait for it, but only
                //if a timeout is not already in effect.
                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {
                    checkLoadedTimeoutId = setTimeout(function () {
                        checkLoadedTimeoutId = 0;
                        checkLoaded();
                    }, 50);
                }
            }

            inCheckLoaded = false;
        }

        Module = function (map) {
            this.events = getOwn(undefEvents, map.id) || {};
            this.map = map;
            this.shim = getOwn(config.shim, map.id);
            this.depExports = [];
            this.depMaps = [];
            this.depMatched = [];
            this.pluginMaps = {};
            this.depCount = 0;

            /* this.exports this.factory
               this.depMaps = [],
               this.enabled, this.fetched
            */
        };

        Module.prototype = {
            init: function (depMaps, factory, errback, options) {
                options = options || {};

                //Do not do more inits if already done. Can happen if there
                //are multiple define calls for the same module. That is not
                //a normal, common case, but it is also not unexpected.
                if (this.inited) {
                    return;
                }

                this.factory = factory;

                if (errback) {
                    //Register for errors on this module.
                    this.on('error', errback);
                } else if (this.events.error) {
                    //If no errback already, but there are error listeners
                    //on this module, set up an errback to pass to the deps.
                    errback = bind(this, function (err) {
                        this.emit('error', err);
                    });
                }

                //Do a copy of the dependency array, so that
                //source inputs are not modified. For example
                //"shim" deps are passed in here directly, and
                //doing a direct modification of the depMaps array
                //would affect that config.
                this.depMaps = depMaps && depMaps.slice(0);

                this.errback = errback;

                //Indicate this module has be initialized
                this.inited = true;

                this.ignore = options.ignore;

                //Could have option to init this module in enabled mode,
                //or could have been previously marked as enabled. However,
                //the dependencies are not known until init is called. So
                //if enabled previously, now trigger dependencies as enabled.
                if (options.enabled || this.enabled) {
                    //Enable this module and dependencies.
                    //Will call this.check()
                    this.enable();
                } else {
                    this.check();
                }
            },

            defineDep: function (i, depExports) {
                //Because of cycles, defined callback for a given
                //export can be called more than once.
                if (!this.depMatched[i]) {
                    this.depMatched[i] = true;
                    this.depCount -= 1;
                    this.depExports[i] = depExports;
                }
            },

            fetch: function () {
                if (this.fetched) {
                    return;
                }
                this.fetched = true;

                context.startTime = (new Date()).getTime();

                var map = this.map;

                //If the manager is for a plugin managed resource,
                //ask the plugin to load it now.
                if (this.shim) {
                    context.makeRequire(this.map, {
                        enableBuildCallback: true
                    })(this.shim.deps || [], bind(this, function () {
                        return map.prefix ? this.callPlugin() : this.load();
                    }));
                } else {
                    //Regular dependency.
                    return map.prefix ? this.callPlugin() : this.load();
                }
            },

            load: function () {
                var url = this.map.url;

                //Regular dependency.
                if (!urlFetched[url]) {
                    urlFetched[url] = true;
                    context.load(this.map.id, url);
                }
            },

            /**
             * Checks if the module is ready to define itself, and if so,
             * define it.
             */
            check: function () {
                if (!this.enabled || this.enabling) {
                    return;
                }

                var err, cjsModule,
                    id = this.map.id,
                    depExports = this.depExports,
                    exports = this.exports,
                    factory = this.factory;

                if (!this.inited) {
                    this.fetch();
                } else if (this.error) {
                    this.emit('error', this.error);
                } else if (!this.defining) {
                    //The factory could trigger another require call
                    //that would result in checking this module to
                    //define itself again. If already in the process
                    //of doing that, skip this work.
                    this.defining = true;

                    if (this.depCount < 1 && !this.defined) {
                        if (isFunction(factory)) {
                            //If there is an error listener, favor passing
                            //to that instead of throwing an error.
                            if (this.events.error) {
                                try {
                                    exports = context.execCb(id, factory, depExports, exports);
                                } catch (e) {
                                    err = e;
                                }
                            } else {
                                exports = context.execCb(id, factory, depExports, exports);
                            }

                            if (this.map.isDefine) {
                                //If setting exports via 'module' is in play,
                                //favor that over return value and exports. After that,
                                //favor a non-undefined return value over exports use.
                                cjsModule = this.module;
                                if (cjsModule &&
                                        cjsModule.exports !== undefined &&
                                        //Make sure it is not already the exports value
                                        cjsModule.exports !== this.exports) {
                                    exports = cjsModule.exports;
                                } else if (exports === undefined && this.usingExports) {
                                    //exports already set the defined value.
                                    exports = this.exports;
                                }
                            }

                            if (err) {
                                err.requireMap = this.map;
                                err.requireModules = [this.map.id];
                                err.requireType = 'define';
                                return onError((this.error = err));
                            }

                        } else {
                            //Just a literal value
                            exports = factory;
                        }

                        this.exports = exports;

                        if (this.map.isDefine && !this.ignore) {
                            defined[id] = exports;

                            if (req.onResourceLoad) {
                                req.onResourceLoad(context, this.map, this.depMaps);
                            }
                        }

                        //Clean up
                        cleanRegistry(id);

                        this.defined = true;
                    }

                    //Finished the define stage. Allow calling check again
                    //to allow define notifications below in the case of a
                    //cycle.
                    this.defining = false;

                    if (this.defined && !this.defineEmitted) {
                        this.defineEmitted = true;
                        this.emit('defined', this.exports);
                        this.defineEmitComplete = true;
                    }

                }
            },

            callPlugin: function () {
                var map = this.map,
                    id = map.id,
                    //Map already normalized the prefix.
                    pluginMap = makeModuleMap(map.prefix);

                //Mark this as a dependency for this plugin, so it
                //can be traced for cycles.
                this.depMaps.push(pluginMap);

                on(pluginMap, 'defined', bind(this, function (plugin) {
                    var load, normalizedMap, normalizedMod,
                        name = this.map.name,
                        parentName = this.map.parentMap ? this.map.parentMap.name : null,
                        localRequire = context.makeRequire(map.parentMap, {
                            enableBuildCallback: true
                        });

                    //If current map is not normalized, wait for that
                    //normalized name to load instead of continuing.
                    if (this.map.unnormalized) {
                        //Normalize the ID if the plugin allows it.
                        if (plugin.normalize) {
                            name = plugin.normalize(name, function (name) {
                                return normalize(name, parentName, true);
                            }) || '';
                        }

                        //prefix and name should already be normalized, no need
                        //for applying map config again either.
                        normalizedMap = makeModuleMap(map.prefix + '!' + name,
                                                      this.map.parentMap);
                        on(normalizedMap,
                            'defined', bind(this, function (value) {
                                this.init([], function () { return value; }, null, {
                                    enabled: true,
                                    ignore: true
                                });
                            }));

                        normalizedMod = getOwn(registry, normalizedMap.id);
                        if (normalizedMod) {
                            //Mark this as a dependency for this plugin, so it
                            //can be traced for cycles.
                            this.depMaps.push(normalizedMap);

                            if (this.events.error) {
                                normalizedMod.on('error', bind(this, function (err) {
                                    this.emit('error', err);
                                }));
                            }
                            normalizedMod.enable();
                        }

                        return;
                    }

                    load = bind(this, function (value) {
                        this.init([], function () { return value; }, null, {
                            enabled: true
                        });
                    });

                    load.error = bind(this, function (err) {
                        this.inited = true;
                        this.error = err;
                        err.requireModules = [id];

                        //Remove temp unnormalized modules for this module,
                        //since they will never be resolved otherwise now.
                        eachProp(registry, function (mod) {
                            if (mod.map.id.indexOf(id + '_unnormalized') === 0) {
                                cleanRegistry(mod.map.id);
                            }
                        });

                        onError(err);
                    });

                    //Allow plugins to load other code without having to know the
                    //context or how to 'complete' the load.
                    load.fromText = bind(this, function (text, textAlt) {
                        /*jslint evil: true */
                        var moduleName = map.name,
                            moduleMap = makeModuleMap(moduleName),
                            hasInteractive = useInteractive;

                        //As of 2.1.0, support just passing the text, to reinforce
                        //fromText only being called once per resource. Still
                        //support old style of passing moduleName but discard
                        //that moduleName in favor of the internal ref.
                        if (textAlt) {
                            text = textAlt;
                        }

                        //Turn off interactive script matching for IE for any define
                        //calls in the text, then turn it back on at the end.
                        if (hasInteractive) {
                            useInteractive = false;
                        }

                        //Prime the system by creating a module instance for
                        //it.
                        getModule(moduleMap);

                        //Transfer any config to this other module.
                        if (hasProp(config.config, id)) {
                            config.config[moduleName] = config.config[id];
                        }

                        try {
                            req.exec(text);
                        } catch (e) {
                            return onError(makeError('fromtexteval',
                                             'fromText eval for ' + id +
                                            ' failed: ' + e,
                                             e,
                                             [id]));
                        }

                        if (hasInteractive) {
                            useInteractive = true;
                        }

                        //Mark this as a dependency for the plugin
                        //resource
                        this.depMaps.push(moduleMap);

                        //Support anonymous modules.
                        context.completeLoad(moduleName);

                        //Bind the value of that module to the value for this
                        //resource ID.
                        localRequire([moduleName], load);
                    });

                    //Use parentName here since the plugin's name is not reliable,
                    //could be some weird string with no path that actually wants to
                    //reference the parentName's path.
                    plugin.load(map.name, localRequire, load, config);
                }));

                context.enable(pluginMap, this);
                this.pluginMaps[pluginMap.id] = pluginMap;
            },

            enable: function () {
                enabledRegistry[this.map.id] = this;
                this.enabled = true;

                //Set flag mentioning that the module is enabling,
                //so that immediate calls to the defined callbacks
                //for dependencies do not trigger inadvertent load
                //with the depCount still being zero.
                this.enabling = true;

                //Enable each dependency
                each(this.depMaps, bind(this, function (depMap, i) {
                    var id, mod, handler;

                    if (typeof depMap === 'string') {
                        //Dependency needs to be converted to a depMap
                        //and wired up to this module.
                        depMap = makeModuleMap(depMap,
                                               (this.map.isDefine ? this.map : this.map.parentMap),
                                               false,
                                               !this.skipMap);
                        this.depMaps[i] = depMap;

                        handler = getOwn(handlers, depMap.id);

                        if (handler) {
                            this.depExports[i] = handler(this);
                            return;
                        }

                        this.depCount += 1;

                        on(depMap, 'defined', bind(this, function (depExports) {
                            this.defineDep(i, depExports);
                            this.check();
                        }));

                        if (this.errback) {
                            on(depMap, 'error', this.errback);
                        }
                    }

                    id = depMap.id;
                    mod = registry[id];

                    //Skip special modules like 'require', 'exports', 'module'
                    //Also, don't call enable if it is already enabled,
                    //important in circular dependency cases.
                    if (!hasProp(handlers, id) && mod && !mod.enabled) {
                        context.enable(depMap, this);
                    }
                }));

                //Enable each plugin that is used in
                //a dependency
                eachProp(this.pluginMaps, bind(this, function (pluginMap) {
                    var mod = getOwn(registry, pluginMap.id);
                    if (mod && !mod.enabled) {
                        context.enable(pluginMap, this);
                    }
                }));

                this.enabling = false;

                this.check();
            },

            on: function (name, cb) {
                var cbs = this.events[name];
                if (!cbs) {
                    cbs = this.events[name] = [];
                }
                cbs.push(cb);
            },

            emit: function (name, evt) {
                each(this.events[name], function (cb) {
                    cb(evt);
                });
                if (name === 'error') {
                    //Now that the error handler was triggered, remove
                    //the listeners, since this broken Module instance
                    //can stay around for a while in the registry.
                    delete this.events[name];
                }
            }
        };

        function callGetModule(args) {
            //Skip modules already defined.
            if (!hasProp(defined, args[0])) {
                getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);
            }
        }

        function removeListener(node, func, name, ieName) {
            //Favor detachEvent because of IE9
            //issue, see attachEvent/addEventListener comment elsewhere
            //in this file.
            if (node.detachEvent && !isOpera) {
                //Probably IE. If not it will throw an error, which will be
                //useful to know.
                if (ieName) {
                    node.detachEvent(ieName, func);
                }
            } else {
                node.removeEventListener(name, func, false);
            }
        }

        /**
         * Given an event from a script node, get the requirejs info from it,
         * and then removes the event listeners on the node.
         * @param {Event} evt
         * @returns {Object}
         */
        function getScriptData(evt) {
            //Using currentTarget instead of target for Firefox 2.0's sake. Not
            //all old browsers will be supported, but this one was easy enough
            //to support and still makes sense.
            var node = evt.currentTarget || evt.srcElement;

            //Remove the listeners once here.
            removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');
            removeListener(node, context.onScriptError, 'error');

            return {
                node: node,
                id: node && node.getAttribute('data-requiremodule')
            };
        }

        function intakeDefines() {
            var args;

            //Any defined modules in the global queue, intake them now.
            takeGlobalQueue();

            //Make sure any remaining defQueue items get properly processed.
            while (defQueue.length) {
                args = defQueue.shift();
                if (args[0] === null) {
                    return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' + args[args.length - 1]));
                } else {
                    //args are id, deps, factory. Should be normalized by the
                    //define() function.
                    callGetModule(args);
                }
            }
        }

        context = {
            config: config,
            contextName: contextName,
            registry: registry,
            defined: defined,
            urlFetched: urlFetched,
            defQueue: defQueue,
            Module: Module,
            makeModuleMap: makeModuleMap,
            nextTick: req.nextTick,
            onError: onError,

            /**
             * Set a configuration for the context.
             * @param {Object} cfg config object to integrate.
             */
            configure: function (cfg) {
                //Make sure the baseUrl ends in a slash.
                if (cfg.baseUrl) {
                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {
                        cfg.baseUrl += '/';
                    }
                }

                //Save off the paths and packages since they require special processing,
                //they are additive.
                var pkgs = config.pkgs,
                    shim = config.shim,
                    objs = {
                        paths: true,
                        config: true,
                        map: true
                    };

                eachProp(cfg, function (value, prop) {
                    if (objs[prop]) {
                        if (prop === 'map') {
                            if (!config.map) {
                                config.map = {};
                            }
                            mixin(config[prop], value, true, true);
                        } else {
                            mixin(config[prop], value, true);
                        }
                    } else {
                        config[prop] = value;
                    }
                });

                //Merge shim
                if (cfg.shim) {
                    eachProp(cfg.shim, function (value, id) {
                        //Normalize the structure
                        if (isArray(value)) {
                            value = {
                                deps: value
                            };
                        }
                        if ((value.exports || value.init) && !value.exportsFn) {
                            value.exportsFn = context.makeShimExports(value);
                        }
                        shim[id] = value;
                    });
                    config.shim = shim;
                }

                //Adjust packages if necessary.
                if (cfg.packages) {
                    each(cfg.packages, function (pkgObj) {
                        var location;

                        pkgObj = typeof pkgObj === 'string' ? { name: pkgObj } : pkgObj;
                        location = pkgObj.location;

                        //Create a brand new object on pkgs, since currentPackages can
                        //be passed in again, and config.pkgs is the internal transformed
                        //state for all package configs.
                        pkgs[pkgObj.name] = {
                            name: pkgObj.name,
                            location: location || pkgObj.name,
                            //Remove leading dot in main, so main paths are normalized,
                            //and remove any trailing .js, since different package
                            //envs have different conventions: some use a module name,
                            //some use a file name.
                            main: (pkgObj.main || 'main')
                                  .replace(currDirRegExp, '')
                                  .replace(jsSuffixRegExp, '')
                        };
                    });

                    //Done with modifications, assing packages back to context config
                    config.pkgs = pkgs;
                }

                //If there are any "waiting to execute" modules in the registry,
                //update the maps for them, since their info, like URLs to load,
                //may have changed.
                eachProp(registry, function (mod, id) {
                    //If module already has init called, since it is too
                    //late to modify them, and ignore unnormalized ones
                    //since they are transient.
                    if (!mod.inited && !mod.map.unnormalized) {
                        mod.map = makeModuleMap(id);
                    }
                });

                //If a deps array or a config callback is specified, then call
                //require with those args. This is useful when require is defined as a
                //config object before require.js is loaded.
                if (cfg.deps || cfg.callback) {
                    context.require(cfg.deps || [], cfg.callback);
                }
            },

            makeShimExports: function (value) {
                function fn() {
                    var ret;
                    if (value.init) {
                        ret = value.init.apply(global, arguments);
                    }
                    return ret || (value.exports && getGlobal(value.exports));
                }
                return fn;
            },

            makeRequire: function (relMap, options) {
                options = options || {};

                function localRequire(deps, callback, errback) {
                    var id, map, requireMod;

                    if (options.enableBuildCallback && callback && isFunction(callback)) {
                        callback.__requireJsBuild = true;
                    }

                    if (typeof deps === 'string') {
                        if (isFunction(callback)) {
                            //Invalid call
                            return onError(makeError('requireargs', 'Invalid require call'), errback);
                        }

                        //If require|exports|module are requested, get the
                        //value for them from the special handlers. Caveat:
                        //this only works while module is being defined.
                        if (relMap && hasProp(handlers, deps)) {
                            return handlers[deps](registry[relMap.id]);
                        }

                        //Synchronous access to one module. If require.get is
                        //available (as in the Node adapter), prefer that.
                        if (req.get) {
                            return req.get(context, deps, relMap, localRequire);
                        }

                        //Normalize module name, if it contains . or ..
                        map = makeModuleMap(deps, relMap, false, true);
                        id = map.id;

                        if (!hasProp(defined, id)) {
                            return onError(makeError('notloaded', 'Module name "' +
                                        id +
                                        '" has not been loaded yet for context: ' +
                                        contextName +
                                        (relMap ? '' : '. Use require([])')));
                        }
                        return defined[id];
                    }

                    //Grab defines waiting in the global queue.
                    intakeDefines();

                    //Mark all the dependencies as needing to be loaded.
                    context.nextTick(function () {
                        //Some defines could have been added since the
                        //require call, collect them.
                        intakeDefines();

                        requireMod = getModule(makeModuleMap(null, relMap));

                        //Store if map config should be applied to this require
                        //call for dependencies.
                        requireMod.skipMap = options.skipMap;

                        requireMod.init(deps, callback, errback, {
                            enabled: true
                        });

                        checkLoaded();
                    });

                    return localRequire;
                }

                mixin(localRequire, {
                    isBrowser: isBrowser,

                    /**
                     * Converts a module name + .extension into an URL path.
                     * *Requires* the use of a module name. It does not support using
                     * plain URLs like nameToUrl.
                     */
                    toUrl: function (moduleNamePlusExt) {
                        var ext,
                            index = moduleNamePlusExt.lastIndexOf('.'),
                            segment = moduleNamePlusExt.split('/')[0],
                            isRelative = segment === '.' || segment === '..';

                        //Have a file extension alias, and it is not the
                        //dots from a relative path.
                        if (index !== -1 && (!isRelative || index > 1)) {
                            ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);
                            moduleNamePlusExt = moduleNamePlusExt.substring(0, index);
                        }

                        return context.nameToUrl(normalize(moduleNamePlusExt,
                                                relMap && relMap.id, true), ext,  true);
                    },

                    defined: function (id) {
                        return hasProp(defined, makeModuleMap(id, relMap, false, true).id);
                    },

                    specified: function (id) {
                        id = makeModuleMap(id, relMap, false, true).id;
                        return hasProp(defined, id) || hasProp(registry, id);
                    }
                });

                //Only allow undef on top level require calls
                if (!relMap) {
                    localRequire.undef = function (id) {
                        //Bind any waiting define() calls to this context,
                        //fix for #408
                        takeGlobalQueue();

                        var map = makeModuleMap(id, relMap, true),
                            mod = getOwn(registry, id);

                        delete defined[id];
                        delete urlFetched[map.url];
                        delete undefEvents[id];

                        if (mod) {
                            //Hold on to listeners in case the
                            //module will be attempted to be reloaded
                            //using a different config.
                            if (mod.events.defined) {
                                undefEvents[id] = mod.events;
                            }

                            cleanRegistry(id);
                        }
                    };
                }

                return localRequire;
            },

            /**
             * Called to enable a module if it is still in the registry
             * awaiting enablement. A second arg, parent, the parent module,
             * is passed in for context, when this method is overriden by
             * the optimizer. Not shown here to keep code compact.
             */
            enable: function (depMap) {
                var mod = getOwn(registry, depMap.id);
                if (mod) {
                    getModule(depMap).enable();
                }
            },

            /**
             * Internal method used by environment adapters to complete a load event.
             * A load event could be a script load or just a load pass from a synchronous
             * load call.
             * @param {String} moduleName the name of the module to potentially complete.
             */
            completeLoad: function (moduleName) {
                var found, args, mod,
                    shim = getOwn(config.shim, moduleName) || {},
                    shExports = shim.exports;

                takeGlobalQueue();

                while (defQueue.length) {
                    args = defQueue.shift();
                    if (args[0] === null) {
                        args[0] = moduleName;
                        //If already found an anonymous module and bound it
                        //to this name, then this is some other anon module
                        //waiting for its completeLoad to fire.
                        if (found) {
                            break;
                        }
                        found = true;
                    } else if (args[0] === moduleName) {
                        //Found matching define call for this script!
                        found = true;
                    }

                    callGetModule(args);
                }

                //Do this after the cycle of callGetModule in case the result
                //of those calls/init calls changes the registry.
                mod = getOwn(registry, moduleName);

                if (!found && !hasProp(defined, moduleName) && mod && !mod.inited) {
                    if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {
                        if (hasPathFallback(moduleName)) {
                            return;
                        } else {
                            return onError(makeError('nodefine',
                                             'No define call for ' + moduleName,
                                             null,
                                             [moduleName]));
                        }
                    } else {
                        //A script that does not call define(), so just simulate
                        //the call for it.
                        callGetModule([moduleName, (shim.deps || []), shim.exportsFn]);
                    }
                }

                checkLoaded();
            },

            /**
             * Converts a module name to a file path. Supports cases where
             * moduleName may actually be just an URL.
             * Note that it **does not** call normalize on the moduleName,
             * it is assumed to have already been normalized. This is an
             * internal API, not a public one. Use toUrl for the public API.
             */
            nameToUrl: function (moduleName, ext, skipExt) {
                var paths, pkgs, pkg, pkgPath, syms, i, parentModule, url,
                    parentPath;

                //If a colon is in the URL, it indicates a protocol is used and it is just
                //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)
                //or ends with .js, then assume the user meant to use an url and not a module id.
                //The slash is important for protocol-less URLs as well as full paths.
                if (req.jsExtRegExp.test(moduleName)) {
                    //Just a plain path, not module name lookup, so just return it.
                    //Add extension if it is included. This is a bit wonky, only non-.js things pass
                    //an extension, this method probably needs to be reworked.
                    url = moduleName + (ext || '');
                } else {
                    //A module that needs to be converted to a path.
                    paths = config.paths;
                    pkgs = config.pkgs;

                    syms = moduleName.split('/');
                    //For each module name segment, see if there is a path
                    //registered for it. Start with most specific name
                    //and work up from it.
                    for (i = syms.length; i > 0; i -= 1) {
                        parentModule = syms.slice(0, i).join('/');
                        pkg = getOwn(pkgs, parentModule);
                        parentPath = getOwn(paths, parentModule);
                        if (parentPath) {
                            //If an array, it means there are a few choices,
                            //Choose the one that is desired
                            if (isArray(parentPath)) {
                                parentPath = parentPath[0];
                            }
                            syms.splice(0, i, parentPath);
                            break;
                        } else if (pkg) {
                            //If module name is just the package name, then looking
                            //for the main module.
                            if (moduleName === pkg.name) {
                                pkgPath = pkg.location + '/' + pkg.main;
                            } else {
                                pkgPath = pkg.location;
                            }
                            syms.splice(0, i, pkgPath);
                            break;
                        }
                    }

                    //Join the path parts together, then figure out if baseUrl is needed.
                    url = syms.join('/');
                    url += (ext || (/\?/.test(url) || skipExt ? '' : '.js'));
                    url = (url.charAt(0) === '/' || url.match(/^[\w\+\.\-]+:/) ? '' : config.baseUrl) + url;
                }

                return config.urlArgs ? url +
                                        ((url.indexOf('?') === -1 ? '?' : '&') +
                                         config.urlArgs) : url;
            },

            //Delegates to req.load. Broken out as a separate function to
            //allow overriding in the optimizer.
            load: function (id, url) {
                req.load(context, id, url);
            },

            /**
             * Executes a module callack function. Broken out as a separate function
             * solely to allow the build system to sequence the files in the built
             * layer in the right sequence.
             *
             * @private
             */
            execCb: function (name, callback, args, exports) {
                return callback.apply(exports, args);
            },

            /**
             * callback for script loads, used to check status of loading.
             *
             * @param {Event} evt the event from the browser for the script
             * that was loaded.
             */
            onScriptLoad: function (evt) {
                //Using currentTarget instead of target for Firefox 2.0's sake. Not
                //all old browsers will be supported, but this one was easy enough
                //to support and still makes sense.
                if (evt.type === 'load' ||
                        (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {
                    //Reset interactive script so a script node is not held onto for
                    //to long.
                    interactiveScript = null;

                    //Pull out the name of the module and the context.
                    var data = getScriptData(evt);
                    context.completeLoad(data.id);
                }
            },

            /**
             * Callback for script errors.
             */
            onScriptError: function (evt) {
                var data = getScriptData(evt);
                if (!hasPathFallback(data.id)) {
                    return onError(makeError('scripterror', 'Script error', evt, [data.id]));
                }
            }
        };

        context.require = context.makeRequire();
        return context;
    }

    /**
     * Main entry point.
     *
     * If the only argument to require is a string, then the module that
     * is represented by that string is fetched for the appropriate context.
     *
     * If the first argument is an array, then it will be treated as an array
     * of dependency string names to fetch. An optional function callback can
     * be specified to execute when all of those dependencies are available.
     *
     * Make a local req variable to help Caja compliance (it assumes things
     * on a require that are not standardized), and to give a short
     * name for minification/local scope use.
     */
    req = requirejs = function (deps, callback, errback, optional) {

        //Find the right context, use default
        var context, config,
            contextName = defContextName;

        // Determine if have config object in the call.
        if (!isArray(deps) && typeof deps !== 'string') {
            // deps is a config object
            config = deps;
            if (isArray(callback)) {
                // Adjust args if there are dependencies
                deps = callback;
                callback = errback;
                errback = optional;
            } else {
                deps = [];
            }
        }

        if (config && config.context) {
            contextName = config.context;
        }

        context = getOwn(contexts, contextName);
        if (!context) {
            context = contexts[contextName] = req.s.newContext(contextName);
        }

        if (config) {
            context.configure(config);
        }

        return context.require(deps, callback, errback);
    };

    /**
     * Support require.config() to make it easier to cooperate with other
     * AMD loaders on globally agreed names.
     */
    req.config = function (config) {
        return req(config);
    };

    /**
     * Execute something after the current tick
     * of the event loop. Override for other envs
     * that have a better solution than setTimeout.
     * @param  {Function} fn function to execute later.
     */
    req.nextTick = typeof setTimeout !== 'undefined' ? function (fn) {
        setTimeout(fn, 4);
    } : function (fn) { fn(); };

    /**
     * Export require as a global, but only if it does not already exist.
     */
    if (!require) {
        require = req;
    }

    req.version = version;

    //Used to filter out dependencies that are already paths.
    req.jsExtRegExp = /^\/|:|\?|\.js$/;
    req.isBrowser = isBrowser;
    s = req.s = {
        contexts: contexts,
        newContext: newContext
    };

    //Create default context.
    req({});

    //Exports some context-sensitive methods on global require.
    each([
        'toUrl',
        'undef',
        'defined',
        'specified'
    ], function (prop) {
        //Reference from contexts instead of early binding to default context,
        //so that during builds, the latest instance of the default context
        //with its config gets used.
        req[prop] = function () {
            var ctx = contexts[defContextName];
            return ctx.require[prop].apply(ctx, arguments);
        };
    });

    if (isBrowser) {
        head = s.head = document.getElementsByTagName('head')[0];
        //If BASE tag is in play, using appendChild is a problem for IE6.
        //When that browser dies, this can be removed. Details in this jQuery bug:
        //http://dev.jquery.com/ticket/2709
        baseElement = document.getElementsByTagName('base')[0];
        if (baseElement) {
            head = s.head = baseElement.parentNode;
        }
    }

    /**
     * Any errors that require explicitly generates will be passed to this
     * function. Intercept/override it if you want custom error handling.
     * @param {Error} err the error object.
     */
    req.onError = function (err) {
        throw err;
    };

    /**
     * Does the request to load a module for the browser case.
     * Make this a separate function to allow other environments
     * to override it.
     *
     * @param {Object} context the require context to find state.
     * @param {String} moduleName the name of the module.
     * @param {Object} url the URL to the module.
     */
    req.load = function (context, moduleName, url) {
        var config = (context && context.config) || {},
            node;
        if (isBrowser) {
            //In the browser so use a script tag
            node = config.xhtml ?
                    document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') :
                    document.createElement('script');
            node.type = config.scriptType || 'text/javascript';
            node.charset = 'utf-8';
            node.async = true;

            node.setAttribute('data-requirecontext', context.contextName);
            node.setAttribute('data-requiremodule', moduleName);

            //Set up load listener. Test attachEvent first because IE9 has
            //a subtle issue in its addEventListener and script onload firings
            //that do not match the behavior of all other browsers with
            //addEventListener support, which fire the onload event for a
            //script right after the script execution. See:
            //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution
            //UNFORTUNATELY Opera implements attachEvent but does not follow the script
            //script execution mode.
            if (node.attachEvent &&
                    //Check if node.attachEvent is artificially added by custom script or
                    //natively supported by browser
                    //read https://github.com/jrburke/requirejs/issues/187
                    //if we can NOT find [native code] then it must NOT natively supported.
                    //in IE8, node.attachEvent does not have toString()
                    //Note the test for "[native code" with no closing brace, see:
                    //https://github.com/jrburke/requirejs/issues/273
                    !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) &&
                    !isOpera) {
                //Probably IE. IE (at least 6-8) do not fire
                //script onload right after executing the script, so
                //we cannot tie the anonymous define call to a name.
                //However, IE reports the script as being in 'interactive'
                //readyState at the time of the define call.
                useInteractive = true;

                node.attachEvent('onreadystatechange', context.onScriptLoad);
                //It would be great to add an error handler here to catch
                //404s in IE9+. However, onreadystatechange will fire before
                //the error handler, so that does not help. If addEventListener
                //is used, then IE will fire error before load, but we cannot
                //use that pathway given the connect.microsoft.com issue
                //mentioned above about not doing the 'script execute,
                //then fire the script load event listener before execute
                //next script' that other browsers do.
                //Best hope: IE10 fixes the issues,
                //and then destroys all installs of IE 6-9.
                //node.attachEvent('onerror', context.onScriptError);
            } else {
                node.addEventListener('load', context.onScriptLoad, false);
                node.addEventListener('error', context.onScriptError, false);
            }
            node.src = url;

            //For some cache cases in IE 6-8, the script executes before the end
            //of the appendChild execution, so to tie an anonymous define
            //call to the module name (which is stored on the node), hold on
            //to a reference to this node, but clear after the DOM insertion.
            currentlyAddingScript = node;
            if (baseElement) {
                head.insertBefore(node, baseElement);
            } else {
                head.appendChild(node);
            }
            currentlyAddingScript = null;

            return node;
        } else if (isWebWorker) {
            try {
                //In a web worker, use importScripts. This is not a very
                //efficient use of importScripts, importScripts will block until
                //its script is downloaded and evaluated. However, if web workers
                //are in play, the expectation that a build has been done so that
                //only one script needs to be loaded anyway. This may need to be
                //reevaluated if other use cases become common.
                importScripts(url);

                //Account for anonymous modules
                context.completeLoad(moduleName);
            } catch (e) {
                context.onError(makeError('importscripts',
                                'importScripts failed for ' +
                                    moduleName + ' at ' + url,
                                e,
                                [moduleName]));
            }
        }
    };

    function getInteractiveScript() {
        if (interactiveScript && interactiveScript.readyState === 'interactive') {
            return interactiveScript;
        }

        eachReverse(scripts(), function (script) {
            if (script.readyState === 'interactive') {
                return (interactiveScript = script);
            }
        });
        return interactiveScript;
    }

    //Look for a data-main script attribute, which could also adjust the baseUrl.
    if (isBrowser) {
        //Figure out baseUrl. Get it from the script tag with require.js in it.
        eachReverse(scripts(), function (script) {
            //Set the 'head' where we can append children by
            //using the script's parent.
            if (!head) {
                head = script.parentNode;
            }

            //Look for a data-main attribute to set main script for the page
            //to load. If it is there, the path to data main becomes the
            //baseUrl, if it is not already set.
            dataMain = script.getAttribute('data-main');
            if (dataMain) {
                //Set final baseUrl if there is not already an explicit one.
                if (!cfg.baseUrl) {
                    //Pull off the directory of data-main for use as the
                    //baseUrl.
                    src = dataMain.split('/');
                    mainScript = src.pop();
                    subPath = src.length ? src.join('/')  + '/' : './';

                    cfg.baseUrl = subPath;
                    dataMain = mainScript;
                }

                //Strip off any trailing .js since dataMain is now
                //like a module name.
                dataMain = dataMain.replace(jsSuffixRegExp, '');

                //Put the data-main script in the files to load.
                cfg.deps = cfg.deps ? cfg.deps.concat(dataMain) : [dataMain];

                return true;
            }
        });
    }

    /**
     * The function that handles definitions of modules. Differs from
     * require() in that a string for the module should be the first argument,
     * and the function to execute after dependencies are loaded should
     * return a value to define the module corresponding to the first argument's
     * name.
     */
    define = function (name, deps, callback) {
        var node, context;

        //Allow for anonymous modules
        if (typeof name !== 'string') {
            //Adjust args appropriately
            callback = deps;
            deps = name;
            name = null;
        }

        //This module may not have dependencies
        if (!isArray(deps)) {
            callback = deps;
            deps = [];
        }

        //If no name, and callback is a function, then figure out if it a
        //CommonJS thing with dependencies.
        if (!deps.length && isFunction(callback)) {
            //Remove comments from the callback string,
            //look for require calls, and pull them into the dependencies,
            //but only if there are function args.
            if (callback.length) {
                callback
                    .toString()
                    .replace(commentRegExp, '')
                    .replace(cjsRequireRegExp, function (match, dep) {
                        deps.push(dep);
                    });

                //May be a CommonJS thing even without require calls, but still
                //could use exports, and module. Avoid doing exports and module
                //work though if it just needs require.
                //REQUIRES the function to expect the CommonJS variables in the
                //order listed below.
                deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);
            }
        }

        //If in IE 6-8 and hit an anonymous define() call, do the interactive
        //work.
        if (useInteractive) {
            node = currentlyAddingScript || getInteractiveScript();
            if (node) {
                if (!name) {
                    name = node.getAttribute('data-requiremodule');
                }
                context = contexts[node.getAttribute('data-requirecontext')];
            }
        }

        //Always save off evaluating the def call until the script onload handler.
        //This allows multiple modules to be in a file without prematurely
        //tracing dependencies, and allows for anonymous module support,
        //where the module name is not known until the script onload event
        //occurs. If no context, use the global queue, and get it processed
        //in the onscript load callback.
        (context ? context.defQueue : globalDefQueue).push([name, deps, callback]);
    };

    define.amd = {
        jQuery: true
    };


    /**
     * Executes the text. Normally just uses eval, but can be modified
     * to use a better, environment-specific call. Only used for transpiling
     * loader plugins, not for plain JS modules.
     * @param {String} text the text to execute/evaluate.
     */
    req.exec = function (text) {
        /*jslint evil: true */
        return eval(text);
    };

    //Set up with config info.
    req(cfg);
}(this));
if (requirejs && requirejs.s && requirejs.s.contexts && requirejs.s.contexts._) {
    window.__sap_viz_internal_requirejs_nextTick__ = requirejs.s.contexts._.nextTick;
    requirejs.s.contexts._.definedTmp = {};
    for (var i in requirejs.s.contexts._.defined) {
            if (requirejs.s.contexts._.defined.hasOwnProperty(i)) {
                requirejs.s.contexts._.definedTmp[i] = requirejs.s.contexts._.defined[i];
                delete requirejs.s.contexts._.defined[i];
            }
        }
    requirejs.s.contexts._.nextTick = function(fn) {fn();};
}
/*
 * 1. Make every AMD module exports itself.
 * 2. Every module stays anonymous until they are required.
 * 3. "Exporting" includes global namespace setup and auto loading.
 * 4. The trick must work for any valid AMD loader.
 */
(function(global){
    var ostring = Object.prototype.toString;
    function isFunction(it) {
        return ostring.call(it) === '[object Function]';
    }

    function isArray(it) {
        return ostring.call(it) === '[object Array]';
    }

    function mixin(target, src) {
        for(var prop in src){
            if(src.hasOwnProperty(prop)){
                target[prop] = src[prop];
            }
        }
        if(isFunction(target) && isFunction(src)){
            target = src;
        }
        return target;
    }

    function exportNamespace(id, mod){
        for(var i = 0,
                nameParts = id.split("/"),
                p = global,
                c;
            c = nameParts[i]; ++i){

            if(i < nameParts.length - 1){
                p[c] = p[c] || {};
            }else{
                p[c] = p[c] ? mixin(p[c], mod) : mod;
            }
            p = p[c];
        }
    }

    if(define && define.amd && !define.__exportNS){
        var originalDefine = define;
        define = function(name, deps, callback){
            if(typeof name !== 'string'){
                callback = deps;
                deps = name;
                name = null;
            }
            if(!isArray(deps)){
                callback = deps;
                deps = [];
            }

            var needExport = deps.indexOf('exports') >= 0;
            var needRequire = needExport || deps.indexOf('require') >= 0;
            if(needExport){
                deps.push('module');

                var originalCallback = callback;
                callback = function(){
                    var last = arguments.length - 1;
                    var mod = arguments[last];
                    var result = originalCallback;
                    if(isFunction(originalCallback)){
                        var args = [].slice.apply(arguments, [0, last]);
                        result = originalCallback.apply(this, args);
                    }
                    exportNamespace(mod.id, result);
                    return result;
                };
            }
            if(name && needRequire){
                define.__autoLoad.push(name);
            }

            return name ? originalDefine(name, deps, callback) : originalDefine(deps, callback);
        };
        for(var prop in originalDefine){
            define[prop] = originalDefine[prop];
        }
        define.__exportNS = originalDefine;
        define.__autoLoad = [];
    }
})(this);
(function(){var a;if(window){sap=window.sap||{}}else{sap=sap||{}}if(sap){sap.common=sap.common||{}}if(sap.common){sap.common.globalization=sap.common.globalization||{}}sap.common.globalization.VERSION=function(){return"1.0.0"};sap.common.globalization.declare=function(c){if(!c){throw new Error("name required")}if(typeof(c)!="string"){throw new Error("name has to be a string")}if(c.charAt(0)=="."||c.charAt(c.length-1)=="."||c.indexOf("..")!=-1){throw new Error("illegal name: "+c)}c=c.split(".");var d=window;for(var b=0;b<c.length;b++){d[c[b]]=d[c[b]]||{};d=d[c[b]]}return d};sap.common.globalization.require=function(b){};sap.common.globalization.extend=function(f,b){var c=f.prototype;f.superclass=b.prototype;var d=function(){};d.prototype=b.prototype;f.prototype=new d();for(var e in c){if(c.hasOwnProperty(e)){f.prototype[e]=c[e]}}f.prototype.constructor=f;if(b.prototype.constructor==Object.prototype.constructor){b.prototype.constructor=b}return f}})();(function(){sap.common.globalization.declare("sap.common.globalization.NumericFormatManager");sap.common.globalization.require("sap.common.globalization.utils.NumberUtil");sap.common.globalization.require("sap.common.globalization.utils.BooleanUtil");sap.common.globalization.require("sap.common.globalization.utils.DataFormatUtils");sap.common.globalization.require("sap.common.globalization.utils.StringUtil");sap.common.globalization.require("sap.common.globalization.numericFormat.FTUtil");sap.common.globalization.require("sap.common.globalization.numericFormat.FT");sap.common.globalization.require("sap.common.globalization.defaultFormat.CustomNumericFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultShortDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultDateTimeFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultTimeFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultNumericFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultCurrencyFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.CustomDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");sap.common.globalization.require("sap.common.globalization.GlobalizationNumericConstant");sap.common.globalization.require("sap.common.globalization.GlobalizationPreference");var a=sap.common.globalization.NumericFormatManager;a.DEFAULT_FORMAT_DATE_TIME="SAP_FORMAT_DEFAULT_DATE_TIME";a.DEFAULT_FORMAT_TIME="SAP_FORMAT_DEFAULT_TIME";a.DEFAULT_FORMAT_SHORT_DATE="SAP_FORMAT_DEFAULT_SHORT_DATE";a.DEFAULT_FORMAT_LONG_DATE="SAP_FORMAT_DEFAULT_LONG_DATE";a.DEFAULT_FORMAT_NUMBER="SAP_DEFAULT_NUMBER_FORMAT";a.DEFAULT_FORMAT_BOOLEAN="SAP_DEFAULT_BOOLEAN_FORMAT";a._formatsCache={};a.resetFormatsCache=function(){a._formatsCache={}};a.setPVL=function(e,d){var b=sap.common.globalization.GlobalizationPreference.getInstance().pvl();sap.common.globalization.GlobalizationPreference.getInstance().setPvl(e);var c=sap.common.globalization.GlobalizationPreference.getInstance().pvl();if(!b||c!=b){a._formatsCache={};if(!d){a.setCustomizedLocaleInfo(null)}}};a.getPVL=function(){return sap.common.globalization.GlobalizationPreference.getInstance().pvl()};a.setCustomizedLocaleInfo=function(c,b){if(b){delete c.dayStrings;delete c.shortDayStrings;delete c.monthStrings;delete c.shortMonthStrings;delete c.amPms}sap.common.globalization.numericFormat.FLocalization.getInstance().setCustomizedLocaleInfo(c)};a.getThousandSeparator=function(){return sap.common.globalization.GlobalizationNumericConstant.getDisplayThousandSeparator()};a.getDecimalSeparator=function(){return sap.common.globalization.GlobalizationNumericConstant.getDisplayDecimalSeparator()};a.formatToText=function(e,b,d,c){return this._format(e,b,false,d,c)};a.formatToTextWithColor=function(e,b,d,c){return this._format(e,b,true,d,c)};a.getFormattedColor=function(c){var b=undefined;if(c&&c.hasOwnProperty("color")){b=c.color}return b};a.getFormattedText=function(b){var c=b;if(b&&b.hasOwnProperty("text")){c=b.text}return c};a.getFormat=function(f){if((f==null)||(f=="")){return null}if(!a._formatsCache){a._formatsCache=new Object()}var k=a._formatsCache[f];var b=sap.common.globalization.defaultFormat;if(k==null){if(f==a.DEFAULT_FORMAT_SHORT_DATE||f==a.DEFAULT_FORMAT_LONG_DATE||f==a.DEFAULT_FORMAT_DATE_TIME||f==a.DEFAULT_FORMAT_TIME){var f;var m=b.CustomNumericFormatLocaleFactory.getInstance();switch(f){case a.DEFAULT_FORMAT_SHORT_DATE:var j=new b.DefaultShortDateFormatLocaleFactory();k=new sap.common.globalization.numericFormat.FT(j,m);f=j.getDefaultDateFormat();break;case a.DEFAULT_FORMAT_LONG_DATE:var c=new b.DefaultDateFormatLocaleFactory();k=new sap.common.globalization.numericFormat.FT(c,m);f=c.getDefaultDateFormat();break;case a.DEFAULT_FORMAT_DATE_TIME:var e=new b.DefaultDateTimeFormatLocaleFactory();k=new sap.common.globalization.numericFormat.FT(e,m);f=e.getDefaultDateFormat();break;case a.DEFAULT_FORMAT_TIME:default:var i=new b.DefaultTimeFormatLocaleFactory();k=new sap.common.globalization.numericFormat.FT(i,m);f=i.getDefaultDateFormat()}k.parse(f)}else{if(f==a.DEFAULT_FORMAT_NUMBER){var g=new b.DefaultNumericFormatLocaleFactory();var g;var l=g.getDefaultNumericFormat();k=new sap.common.globalization.numericFormat.FT(b.CustomDateFormatLocaleFactory.getInstance(),g);k.parse(l)}else{if(b.DefaultCurrencyFormatLocaleFactory.isDefaultCurrencyFormat(f)){var h=new b.DefaultCurrencyFormatLocaleFactory(f);var d=h.getDefaultCurrencyFormat();k=new sap.common.globalization.numericFormat.FT(b.CustomDateFormatLocaleFactory.getInstance(),h);k.parse(d)}else{if(f==a.DEFAULT_FORMAT_BOOLEAN){k=new sap.common.globalization.numericFormat.FTBoolean();k.parse(f)}else{k=new sap.common.globalization.numericFormat.FT();k.parse(f)}}}}a._formatsCache[f]=k}return k};a._format=function(i,f,h,j,m){var k=i==null?"":i;var g=a.getFormat(f);var d=false;var e=NaN;var j=j==undefined?true:j;var l;var b=String(k);if(g){if(g.isParsedSuccess()==false&&m==true){b=i}else{g.color=undefined;var c=false;if(j){if(sap.common.globalization.utils.NumberUtil.isNumericValue(k)){c=true}}else{if(sap.common.globalization.utils.BaseUtils.isNumber(k)){c=true}}if(c){b=g.display(Number(k));e=Number(g.color)}else{if(sap.common.globalization.utils.BooleanUtil.isBooleanValue(k)&&sap.common.globalization.numericFormat.FTUtil.isBooleanFT(g)){b=g.display(k)}else{if(k instanceof Date){b=g.display(k)}}}}}if(h&&!isNaN(e)){if(!l){l={}}l.color=e;l.text=b}else{l=b}return l};a.format=function(c,b){var d=a.getFormat(b);if(d==null){return c}return d.display(c)};a.SAP_PARAMETERS={};a.resetParameters=function(){a.SAP_PARAMETERS={}};a.setBooleanDisplayString=function(b,c){sap.common.globalization.GlobalizationBooleanConstant.BOOLEAN_STRING_TRUE=b;sap.common.globalization.GlobalizationBooleanConstant.BOOLEAN_STRING_FALSE=c}})();(function(){sap.common.globalization.declare("sap.common.globalization.GlobalizationPreference");sap.common.globalization.require("sap.common.globalization.NumericFormatManager");sap.common.globalization.GlobalizationPreference=function(){this.__className="sap.common.globalization.GlobalizationPreference";this._preferredViewingLocale=null};var a=sap.common.globalization.GlobalizationPreference;a._instance=null;a.DOCUMENT_LOCALE="en";a.getInstance=function(){if(!a._instance){a._instance=new sap.common.globalization.GlobalizationPreference()}return a._instance};a.resetInstance=function(){a._instance=new sap.common.globalization.GlobalizationPreference()};a.prototype.pvl=function(){return this._preferredViewingLocale};a.prototype.setPvl=function(b){if(b!=this._preferredViewingLocale){this._preferredViewingLocale=b}};a.prototype.pvlIsoLanguageCode=function(){return this._getIsoLanguageCode(this.pvl())};a.prototype.documentLocale=function(){return a.DOCUMENT_LOCALE};a.prototype.documentIsoLanguageCode=function(){return this._getIsoLanguageCode(a.DOCUMENT_LOCALE)};a.prototype._getIsoLanguageCode=function(b){if(b){return String(b).split("_")[0]}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.GlobalizationBooleanConstant");var a=sap.common.globalization.GlobalizationBooleanConstant;a.BOOLEAN_STRING_TRUE="TRUE";a.BOOLEAN_STRING_FALSE="FALSE";a.getBooleanStrings=function(){return[a.BOOLEAN_STRING_TRUE,a.BOOLEAN_STRING_FALSE]}})();(function(){sap.common.globalization.declare("sap.common.globalization.GlobalizationNumericConstant");sap.common.globalization.require("sap.common.globalization.GlobalizationPreference");sap.common.globalization.GlobalizationNumericConstant=function(){this.__className="sap.common.globalization.GlobalizationNumericConstant"};var a=sap.common.globalization.GlobalizationNumericConstant;a._FORMAT_TYPE_NUMBER="number";a._FORMAT_TYPE_CURRENCY="currency";a._KEY_TYPE_NUMERIC="numeric";a._KEY_TOKEN_DISPLAY_THOUSANDS_SEPARATOR="displayThousandsSeparator";a._KEY_TOKEN_DISPLAY_DECIMAL_SEPARATOR="displayDecimalSeparator";a._DEFAULT_FORMAT_STRING={af:{number:"#,##0.###",currency:"Â¤#,##0.00"},af_ZA:{},ar:{number:"#,##0.###",currency:"Â¤ #,##0.00"},ar_AE:{},ar_BH:{},ar_DZ:{},ar_EG:{},ar_IQ:{},ar_JO:{},ar_KW:{},ar_LB:{},ar_LY:{},ar_MA:{},ar_OM:{},ar_QA:{currency:"Â¤#0.00"},ar_SA:{currency:"Â¤#0.00"},ar_SY:{currency:"Â¤#0.00"},ar_TN:{currency:"Â¤#0.00"},ar_YE:{currency:"Â¤#0.00"},az:{number:"#,##0.###",currency:"Â¤ #,##0.00"},az_AZ:{},be:{number:"#,##0.###",currency:"Â¤#,##0.00"},be_BY:{},bg:{number:"#,##0.###",currency:"#,##0.00 Â¤"},bg_BG:{},bn:{number:"#,##,##0.###",currency:"#,##,##0.00Â¤;(#,##,##0.00Â¤)"},bn_IN:{},br:{number:"#,##0.###",currency:"Â¤#,##0.00"},bs:{number:"#,##0.###",currency:"Â¤ #,##0.00"},bs_BA:{},ca:{number:"#,##0.###",currency:"#,##0.00 Â¤"},ca_ES:{},cs:{number:"#,##0.###",currency:"#,##0.00 Â¤"},cs_CZ:{},cy:{number:"#,##0.###",currency:"Â¤#,##0.00"},cy_GB:{},da:{number:"#,##0.###",currency:"#,##0.00 Â¤"},da_DK:{},de:{number:"#,##0.###",currency:"#,##0.00 Â¤"},de_AT:{currency:"Â¤ #,##0.00"},de_BE:{},de_CH:{currency:"Â¤ #,##0.00;Â¤-#,##0.00"},de_DE:{},de_LI:{currency:"Â¤ #,##0.00"},de_LU:{},el:{number:"#,##0.###",currency:"#,##0.00 Â¤"},el_CY:{currency:"Â¤#,##0.00"},el_GR:{},en:{number:"#,##0.###",currency:"Â¤#,##0.00;(Â¤#,##0.00)"},en_AU:{currency:"Â¤#,##0.00"},en_BZ:{currency:"Â¤#,##0.00"},en_CA:{},en_GB:{currency:"Â¤#,##0.00"},en_HK:{},en_IE:{currency:"Â¤#,##0.00"},en_IN:{number:"#,##,##0.###",currency:"Â¤Â #,##,##0.00"},en_JM:{currency:"Â¤#,##0.00"},en_NZ:{currency:"Â¤#,##0.00"},en_PH:{},en_SG:{},en_TT:{currency:"Â¤#,##0.00"},en_US:{},en_VI:{},en_ZA:{currency:"Â¤#,##0.00"},en_ZW:{currency:"Â¤#,##0.00"},es:{number:"#,##0.###",currency:"Â¤ #,##0.00"},es_AR:{},es_BO:{},es_CL:{currency:"Â¤#,##0.00;Â¤-#,##0.00"},es_CO:{},es_CR:{},es_DO:{},es_EC:{currency:"Â¤#,##0.00;Â¤-#,##0.00"},es_ES:{},es_GT:{},es_HN:{},es_MX:{},es_NI:{},es_PA:{},es_PE:{},es_PR:{},es_PY:{currency:"Â¤ #,##0.00;Â¤ -#,##0.00"},es_SV:{},es_UY:{currency:"Â¤ #,##0.00;(Â¤ #,##0.00)"},es_VE:{currency:"Â¤#,##0.00;Â¤-#,##0.00"},et:{number:"#,##0.###",currency:"#,##0.00 Â¤"},et_EE:{},eu:{number:"#,##0.###",currency:"#,##0.00 Â¤"},eu_ES:{},fa:{number:"#,##0.###;â#,##0.###",currency:"#,##0.00 Â¤;'-#,##0.00' Â¤"},fa_IR:{},fi:{number:"#,##0.###",currency:"#,##0.00 Â¤"},fi_FI:{},fo:{number:"#,##0.###",currency:"Â¤#,##0.00;Â¤-#,##0.00"},fo_FO:{},fr:{number:"#,##0.###",currency:"#,##0.00 Â¤"},fr_BE:{},fr_CA:{currency:"#,##0.00 Â¤;(#,##0.00 Â¤)"},fr_CH:{currency:"Â¤ #,##0.00;Â¤-#,##0.00"},fr_FR:{},fr_LU:{},fr_MC:{},gl:{number:"#,##0.###",currency:"#,##0.00 Â¤"},gl_ES:{},gu:{number:"#,##,##0.###",currency:"Â¤ #,##,##0.00"},gu_IN:{},he:{number:"#,##0.###",currency:"#,##0.00 Â¤"},he_IL:{},hi:{number:"#,##,##0.###",currency:"Â¤ #,##,##0.00"},hi_IN:{},hr:{number:"#,##0.###",currency:"#,##0.00 Â¤"},hr_HR:{},hu:{number:"#,##0.###",currency:"#,##0.00 Â¤"},hu_HU:{},hy:{number:"#0.###",currency:"#0.00 Â¤"},hy_AM:{},id:{number:"#,##0.###",currency:"Â¤#,##0.00"},id_ID:{},is:{number:"#,##0.###",currency:"#,##0.00 Â¤"},is_IS:{},it:{number:"#,##0.###",currency:"Â¤ #,##0.00"},it_CH:{currency:"Â¤ #,##0.00;Â¤-#,##0.00"},it_IT:{},ja:{number:"#,##0.###",currency:"Â¤#,##0.00"},ja_JP:{},ka:{number:"#,##0.###",currency:"Â¤ #,##0.00"},ka_GE:{},kk:{number:"#,##0.###",currency:"#,##0.00 Â¤"},kk_KZ:{},kn:{number:"#,##,##0.###",currency:"Â¤ #,##,##0.00"},kn_IN:{},ko:{number:"#,##0.###",currency:"Â¤#,##0.00"},ko_KR:{},kok:{number:"#,##,##0.###",currency:"Â¤ #,##,##0.00"},kok_IN:{},lt:{number:"#,##0.###;â#,##0.###",currency:"#,##0.00 Â¤"},lt_LT:{},lv:{number:"#,##0.###",currency:"#,##0.00 Â¤"},lv_LV:{},mk:{number:"#,##0.###;(#,##0.###)",currency:"Â¤ #,##0.00"},mk_MK:{},ml:{number:"#,##,##0.###",currency:"#,##,##0.00Â¤"},ml_IN:{},mn:{number:"#,##0.###",currency:"Â¤ #,##0.00"},mn_MN:{},mr:{number:"#,##,##0.###",currency:"Â¤ #,##,##0.00"},mr_IN:{},ms:{number:"#,##0.###",currency:"Â¤#,##0.00;(Â¤#,##0.00)"},ms_BN:{currency:"Â¤ #,##0.00"},ms_MY:{},mt:{number:"#,##0.###",currency:"Â¤#,##0.00"},mt_MT:{},nb:{number:"#,##0.###",currency:"Â¤ #,##0.00"},nb_NO:{},nl:{number:"#,##0.###",currency:"Â¤ #,##0.00;Â¤ #,##0.00-"},nl_BE:{currency:"#,##0.00 Â¤"},nl_NL:{},nn:{number:"#,##0.###;â#,##0.###",currency:"#,##0.00 Â¤"},nn_NO:{},pa:{number:"#,##,##0.###",currency:"Â¤ #,##,##0.00"},pa_IN:{},pl:{number:"#,##0.###",currency:"#,##0.00 Â¤"},pl_PL:{},pt:{number:"#,##0.###",currency:"Â¤#,##0.00;(Â¤#,##0.00)"},pt_BR:{},pt_PT:{currency:"#,##0.00 Â¤"},ro:{number:"#,##0.###",currency:"#,##0.00 Â¤"},ro_RO:{},ru:{number:"#,##0.###",currency:"#,##0.00 Â¤"},ru_RU:{},ru_UA:{},se:{number:"#,##0.###",currency:"Â¤ #,##0.00"},se_NO:{},sk:{number:"#,##0.###",currency:"#,##0.00 Â¤"},sk_SK:{},sl:{number:"#,##0.###",currency:"#,##0.00 Â¤"},sl_SI:{},sq:{number:"#,##0.###",currency:"Â¤#,##0.00"},sq_AL:{},sr:{number:"#,##0.###",currency:"#,##0.00 Â¤"},sr_BA:{},sr_CS:{},sv:{number:"#,##0.###;â#,##0.###",currency:"#,##0.00 Â¤"},sv_FI:{},sv_SE:{},sw:{number:"#,##0.###",currency:"#,##0.00 Â¤"},sw_KE:{currency:"Â¤#,##0.00"},syr:{number:"#,##0.###",currency:"Â¤ #,##0.00"},syr_SY:{},ta:{number:"#,##,##0.###",currency:"Â¤ #,##,##0.00"},ta_IN:{},te:{number:"#,##,##0.###",currency:"Â¤ #,##,##0.00"},te_IN:{},th:{number:"#,##0.###",currency:"Â¤#,##0.00;Â¤-#,##0.00"},th_TH:{},tn:{number:"#,##0.###",currency:"Â¤#,##0.00"},tn_ZA:{},tr:{number:"#,##0.###",currency:"#,##0.00 Â¤"},tr_TR:{},uk:{number:"#,##0.###",currency:"#,##0.00 Â¤"},uk_UA:{},uz:{number:"#,##0.###",currency:"Â¤ #,##0.00"},uz_UZ:{},vi:{number:"#,##0.###",currency:"#,##0.00 Â¤"},vi_VN:{},xh:{number:"#,##0.###",currency:"Â¤#,##0.00"},xh_ZA:{},zh:{number:"#,##0.###",currency:"Â¤#,##0.00"},zh_CN:{},zh_HK:{},zh_MO:{},zh_SG:{},zh_TW:{},zu:{number:"#,##0.###",currency:"Â¤#,##0.00"},zu_ZA:{}};a._RESOURCE_MAP={af:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},af_ZA:{numeric:{}},ar:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},ar_AE:{numeric:{}},ar_BH:{numeric:{}},ar_DZ:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},ar_EG:{numeric:{}},ar_IQ:{numeric:{}},ar_JO:{numeric:{}},ar_KW:{numeric:{}},ar_LB:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},ar_LY:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},ar_MA:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},ar_OM:{numeric:{}},ar_QA:{numeric:{}},ar_SA:{numeric:{}},ar_SY:{numeric:{}},ar_TN:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},ar_YE:{numeric:{}},az:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},az_AZ:{numeric:{}},be:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},be_BY:{numeric:{}},bg:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},bg_BG:{numeric:{}},bn:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},bn_IN:{numeric:{}},br:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},bs:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},bs_BA:{numeric:{}},ca:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},ca_ES:{numeric:{}},cs:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},cs_CZ:{numeric:{}},cy:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},cy_GB:{numeric:{}},da:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},da_DK:{numeric:{}},de:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},de_AT:{numeric:{}},de_BE:{},de_CH:{numeric:{displayThousandsSeparator:"'",displayDecimalSeparator:"."}},de_DE:{numeric:{}},de_LI:{numeric:{displayThousandsSeparator:"'",displayDecimalSeparator:"."}},de_LU:{numeric:{}},el:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},el_CY:{numeric:{}},el_GR:{numeric:{}},en:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},en_AU:{numeric:{}},en_BZ:{numeric:{}},en_CA:{numeric:{}},en_GB:{numeric:{}},en_HK:{numeric:{}},en_IE:{numeric:{}},en_IN:{numeric:{}},en_JM:{numeric:{}},en_NZ:{numeric:{}},en_PH:{numeric:{}},en_SG:{numeric:{}},en_TT:{numeric:{}},en_US:{numeric:{}},en_VI:{numeric:{}},en_ZA:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},en_ZW:{numeric:{}},es:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},es_AR:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},es_BO:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},es_CL:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},es_CO:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},es_CR:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},es_DO:{numeric:{}},es_EC:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},es_ES:{numeric:{}},es_GT:{numeric:{}},es_HN:{numeric:{}},es_MX:{numeric:{}},es_NI:{numeric:{}},es_PA:{numeric:{}},es_PE:{numeric:{}},es_PR:{numeric:{}},es_PY:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},es_SV:{numeric:{}},es_UY:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},es_VE:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},et:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},et_EE:{numeric:{}},eu:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},eu_ES:{numeric:{}},fa:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},fa_IR:{numeric:{}},fi:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},fi_FI:{numeric:{}},fo:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},fo_FO:{numeric:{}},fr:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},fr_BE:{numeric:{displayThousandsSeparator:"."}},fr_CA:{numeric:{}},fr_CH:{numeric:{displayThousandsSeparator:"'",displayDecimalSeparator:"."}},fr_FR:{numeric:{}},fr_LU:{numeric:{displayThousandsSeparator:"."}},fr_MC:{numeric:{}},gl:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},gl_ES:{numeric:{}},gu:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},gu_IN:{numeric:{}},he:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},he_IL:{numeric:{}},hi:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},hi_IN:{numeric:{}},hr:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},hr_HR:{numeric:{}},hu:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},hu_HU:{numeric:{}},hy:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},hy_AM:{numeric:{}},id:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},id_ID:{numeric:{}},is:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},is_IS:{numeric:{}},it:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},it_CH:{numeric:{displayThousandsSeparator:"'",displayDecimalSeparator:"."}},it_IT:{numeric:{}},ja:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},ja_JP:{numeric:{}},ka:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},ka_GE:{numeric:{}},kk:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},kk_KZ:{numeric:{}},kn:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},kn_IN:{numeric:{}},ko:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},ko_KR:{numeric:{}},kok:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},kok_IN:{numeric:{}},lt:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},lt_LT:{numeric:{}},lv:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},lv_LV:{numeric:{}},mk:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},mk_MK:{numeric:{}},ml:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},ml_IN:{numeric:{}},mn:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},mn_MN:{numeric:{}},mr:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},mr_IN:{numeric:{}},ms:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},ms_BN:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},ms_MY:{numeric:{}},mt:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},mt_MT:{numeric:{}},nb:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},nb_NO:{numeric:{}},nl:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},nl_BE:{numeric:{}},nl_NL:{numeric:{}},nn:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},nn_NO:{numeric:{}},pa:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},pa_IN:{numeric:{}},pl:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},pl_PL:{numeric:{}},pt:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},pt_BR:{numeric:{}},pt_PT:{numeric:{displayThousandsSeparator:"Â "}},ro:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},ro_RO:{numeric:{}},ru:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},ru_RU:{numeric:{}},ru_UA:{numeric:{}},se:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},se_NO:{numeric:{}},sk:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},sk_SK:{numeric:{}},sl:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},sl_SI:{numeric:{}},sq:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},sq_AL:{numeric:{}},sr:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},sr_BA:{numeric:{}},sr_CS:{numeric:{}},sv:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},sv_FI:{numeric:{}},sv_SE:{numeric:{}},sw:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},sw_KE:{numeric:{}},syr:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},syr_SY:{numeric:{}},ta:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},ta_IN:{numeric:{}},te:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},te_IN:{numeric:{}},th:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},th_TH:{numeric:{}},tn:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},tn_ZA:{numeric:{}},tr:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},tr_TR:{numeric:{}},uk:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},uk_UA:{numeric:{}},uz:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},uz_UZ:{numeric:{}},vi:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},vi_VN:{numeric:{}},xh:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},xh_ZA:{numeric:{}},zh:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},zh_CN:{numeric:{}},zh_HK:{numeric:{}},zh_MO:{numeric:{}},zh_SG:{numeric:{}},zh_TW:{numeric:{}},zu:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},zu_ZA:{numeric:{}}};a.getParseThousandSeparator=function(b){return","};a.getDisplayThousandSeparator=function(b){var b=b||null;if(b){if(a._resourceExist(b,a._KEY_TYPE_NUMERIC,a._KEY_TOKEN_DISPLAY_THOUSANDS_SEPARATOR)){return a.getNumericResource(b,a._KEY_TYPE_NUMERIC,a._KEY_TOKEN_DISPLAY_THOUSANDS_SEPARATOR)}else{return null}}return a._getAppropriateNumericResource(a._KEY_TYPE_NUMERIC,a._KEY_TOKEN_DISPLAY_THOUSANDS_SEPARATOR)};a.getParseDecimalSeparator=function(b){return"."};a.getDisplayDecimalSeparator=function(b){var b=b||null;if(b){if(a._resourceExist(b,a._KEY_TYPE_NUMERIC,a._KEY_TOKEN_DISPLAY_DECIMAL_SEPARATOR)){return a.getNumericResource(b,a._KEY_TYPE_NUMERIC,a._KEY_TOKEN_DISPLAY_DECIMAL_SEPARATOR)}else{return null}}return a._getAppropriateNumericResource(a._KEY_TYPE_NUMERIC,a._KEY_TOKEN_DISPLAY_DECIMAL_SEPARATOR)};a.getParseCurrencySymbol=function(){return"Â¤"};a.getDefaultNumberFormat=function(b){var b=b||null;if(b){if(a._formatExist(b,a._FORMAT_TYPE_NUMBER)){return a._getNumericFormat(b,a._FORMAT_TYPE_NUMBER)}else{return null}}return a._getAppropriateNumericFormat(a._FORMAT_TYPE_NUMBER)};a.getDefaultCurrencyFormat=function(b){var b=b||null;if(b){if(a._formatExist(b,a._FORMAT_TYPE_CURRENCY)){return a._getNumericFormat(b,a._FORMAT_TYPE_CURRENCY)}else{return null}}return a._getAppropriateNumericFormat(a._FORMAT_TYPE_CURRENCY)};a.getActualLocaleForDefaultCurrencyFormat=function(){return a.getActualLocaleForNumerFormat(a._FORMAT_TYPE_CURRENCY)};a.getActualLocaleForDefaultNumberFormat=function(){return a.getActualLocaleForNumerFormat(a._FORMAT_TYPE_NUMBER)};a.getActualLocaleForNumerFormat=function(d){var e=sap.common.globalization.GlobalizationPreference.getInstance().pvl();if(a._formatExist(e,d)){return e}var c=sap.common.globalization.GlobalizationPreference.getInstance().pvlIsoLanguageCode();if(a._formatExist(c,d)){return c}var f=sap.common.globalization.GlobalizationPreference.getInstance().documentLocale();if(a._formatExist(f,d)){return f}var b=sap.common.globalization.GlobalizationPreference.getInstance().documentIsoLanguageCode();if(a._formatExist(b,d)){return b}return"en"};a._getAppropriateNumericFormat=function(b){return a._getNumericFormat(a.getActualLocaleForNumerFormat(b),b)};a._formatExist=function(b,c){return(b&&c&&a._DEFAULT_FORMAT_STRING[b]&&a._DEFAULT_FORMAT_STRING[b][c])};a._getNumericFormat=function(b,c){return a._DEFAULT_FORMAT_STRING[b][c]};a._getAppropriateNumericResource=function(e,b){var f=sap.common.globalization.GlobalizationPreference.getInstance().pvl();if(a._resourceExist(f,e,b)){return a.getNumericResource(f,e,b)}var d=sap.common.globalization.GlobalizationPreference.getInstance().pvlIsoLanguageCode();if(a._resourceExist(d,e,b)){return a.getNumericResource(d,e,b)}var g=sap.common.globalization.GlobalizationPreference.getInstance().documentLocale();if(a._resourceExist(g,e,b)){return a.getNumericResource(g,e,b)}var c=sap.common.globalization.GlobalizationPreference.getInstance().documentIsoLanguageCode();if(a._resourceExist(c,e,b)){return a.getNumericResource(c,e,b)}return a.getNumericResource("en",e,b)};a._resourceExist=function(b,d,c){return(b&&d&&c&&a._RESOURCE_MAP[b]&&a._RESOURCE_MAP[b][d]&&a._RESOURCE_MAP[b][d][c])};a.getNumericResource=function(b,d,c){return a._RESOURCE_MAP[b][d][c]}})();(function(){sap.common.globalization.declare("sap.common.globalization.GlobalizationDateConstant");sap.common.globalization.require("sap.common.globalization.GlobalizationPreference");sap.common.globalization.GlobalizationDateConstant=function(){this.__className="sap.common.globalization.defaultFormat.GlobalizationDateConstant"};var a=sap.common.globalization.GlobalizationDateConstant;a.FORMAT_TYPE_SHORTDATE="shortDate",a.FORMAT_TYPE_LONGDATE="longDate",a.FORMAT_TYPE_DATE_TIME="dateTime",a.FORMAT_TYPE_TIME="timeFormat",a.KEY_TYPE_DATE="date",a.KEY_TYPE_TIME="time",a.KEY_TOKEN_SHORT_DAY="shortDay",a.KEY_TOKEN_LONG_DAY="longDay",a.KEY_TOKEN_SHORT_MONTH="shortMonth",a.KEY_TOKEN_LONG_MONTH="longMonth",a.KEY_TOKEN_AM_PM="amPm",a.KEY_DATE_SEPARATOR="dateSeparator",a.KEY_TIME_SEPARATOR="timeSeparator",a.KEY_TOKEN_ABBREV_ERA="eraAbbr",a.DEFAULT_FORMAT_STRING={af:{longDate:"dddd dd MMMM yyyy;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},af_ZA:{},ar:{longDate:"ddddØ d MMMMØ yyyy;@",shortDate:"d/M/yyyy;@",dateTime:"dd/MM/yyyy h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},ar_AE:{},ar_BH:{},ar_DZ:{},ar_EG:{},ar_IQ:{},ar_JO:{},ar_KW:{},ar_LB:{},ar_LY:{},ar_MA:{},ar_OM:{},ar_QA:{},ar_SA:{},ar_SY:{},ar_TN:{},ar_YE:{},az:{longDate:"dddd, d, MMMM, yyyy;@",shortDate:"yyyy-MM-dd;@",dateTime:"d MMM, yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},az_AZ:{},be:{longDate:"dddd, d MMMM yyyy;@",shortDate:"d.M.yy;@",dateTime:"d.M.yyyy HH.mm.ss;@",timeFormat:"HH.mm.ss;@"},be_BY:{},bg:{longDate:"dd MMMM yyyy, dddd;@",shortDate:"dd.MM.yy;@",dateTime:"dd.MM.yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},bg_BG:{},bn:{longDate:"dddd, d MMMM, yyyy;@",shortDate:"d/M/yy;@",dateTime:"d MMM, yyyy h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},bn_IN:{},bs:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},bs_BA:{},ca:{longDate:'dddd d "de" MMMM "de" yyyy;@',shortDate:"dd/MM/yy;@",dateTime:"dd/MM/yyyy H:mm:ss;@",timeFormat:"H:mm:ss;@"},ca_ES:{},cs:{longDate:"dddd, d. MMMM yyyy;@",shortDate:"d.M.yy;@",dateTime:"d.M.yyyy H:mm:ss;@",timeFormat:"H:mm:ss;@"},cs_CZ:{},cy:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},cy_GB:{},da:{longDate:'dddd "den" d. MMMM yyyy;@',shortDate:"dd/MM/yy;@",dateTime:"dd/MM/yyyy HH.mm.ss;@",timeFormat:"HH.mm.ss;@"},da_DK:{},de:{longDate:"dddd, d. MMMM yyyy;@",shortDate:"dd.MM.yy;@",dateTime:"dd.MM.yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},de_AT:{longDate:"dddd, dd. MMMM yyyy;@"},de_CH:{},de_DE:{},de_LI:{},de_LU:{},el:{longDate:"dddd, dd MMMM yyyy;@",shortDate:"dd/MM/yyyy;@",dateTime:"dd MMM yyyy h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},el_GR:{},en:{longDate:"dddd, MMMM d, yyyy;@",shortDate:"M/d/yy;@",dateTime:"MMM d, yyyy h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},en_AU:{longDate:"dddd, d MMMM yyyy;@",shortDate:"d/MM/yy;@",dateTime:"dd/MM/yyyy h:mm:ss AM/PM;@"},en_BZ:{dateTime:"dd-MMM-yyyy h:mm:ss AM/PM;@"},en_CA:{shortDate:"yy-MM-dd;@",dateTime:"yyyy-MM-dd h:mm:ss AM/PM;@"},en_GB:{longDate:"dddd, d MMMM yyyy;@",shortDate:"dd/MM/yyyy;@",dateTime:"d MMM yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},en_IE:{longDate:"dddd d MMMM yyyy;@",shortDate:"dd/MM/yyyy;@",dateTime:"d MMM yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},en_JM:{},en_NZ:{longDate:"dddd, d MMMM yyyy;@",shortDate:"d/MM/yy;@",dateTime:"d/MM/yyyy h:mm:ss AM/PM;@"},en_PH:{},en_TT:{},en_US:{},en_VI:{},en_ZA:{longDate:"dddd dd MMMM yyyy;@",shortDate:"yyyy/MM/dd;@",dateTime:"dd MMM yyyy h:mm:ss AM/PM;@"},en_ZW:{longDate:"dddd dd MMMM yyyy;@",shortDate:"d/M/yyyy;@",dateTime:"dd MMM, yyyy h:mm:ss AM/PM;@"},es:{longDate:'dddd d "de" MMMM "de" yyyy;@',shortDate:"dd/MM/yy;@",dateTime:"dd/MM/yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},es_AR:{},es_BO:{},es_CL:{shortDate:"dd-MM-yy;@",dateTime:"dd-MM-yyyy H:mm:ss;@",timeFormat:"H:mm:ss;@"},es_CO:{shortDate:"d/MM/yy;@",dateTime:"d/MM/yyyy H:mm:ss;@",timeFormat:"H:mm:ss;@"},es_CR:{},es_DO:{},es_EC:{dateTime:"dd/MM/yyyy H:mm:ss;@",timeFormat:"H:mm:ss;@"},es_ES:{},es_GT:{shortDate:"d/MM/yy;@",dateTime:"d/MM/yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},es_HN:{longDate:'dddd dd "de" MMMM "de" yyyy;@'},es_MX:{},es_NI:{},es_PA:{shortDate:"MM/dd/yy;@",dateTime:"MM/dd/yyyy HH:mm:ss;@"},es_PE:{shortDate:"d/MM/yy;@"},es_PR:{shortDate:"MM/dd/yy;@",dateTime:"MM/dd/yyyy HH:mm:ss;@"},es_PY:{},es_SV:{},es_UY:{},es_VE:{},et:{longDate:"dddd, d, MMMM yyyy;@",shortDate:"dd.MM.yy;@",dateTime:"dd.MM.yyyy H:mm:ss;@",timeFormat:"H:mm:ss;@"},et_EE:{},eu:{longDate:'dddd, yyyy"eko" MMMM"ren" dd"a";@',shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},eu_ES:{},fa:{longDate:"dddd d MMMM yyyy;@",shortDate:"yy/M/d;@",dateTime:"yyyy/M/dØ H:mm:ss;@",timeFormat:"H:mm:ss;@"},fa_IR:{},fi:{longDate:"dddd d. MMMM yyyy;@",shortDate:"d.M.yyyy;@",dateTime:"d.M.yyyy H.mm.ss;@",timeFormat:"H.mm.ss;@"},fi_FI:{},fo:{longDate:"dddd dd MMMM yyyy;@",shortDate:"dd-MM-yy;@",dateTime:"dd-MM-yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},fo_FO:{},fr:{longDate:"dddd d MMMM yyyy;@",shortDate:"dd/MM/yy;@",dateTime:"d MMM yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},fr_BE:{shortDate:"d/MM/yy;@"},fr_CA:{shortDate:"yy-MM-dd;@",dateTime:"yyyy-MM-dd HH:mm:ss;@"},fr_CH:{longDate:"dddd, d MMMM yyyy;@",shortDate:"dd.MM.yy;@"},fr_FR:{},fr_LU:{},fr_MC:{},gl:{longDate:"dddd dd MMMM yyyy;@",shortDate:"dd/MM/yy;@",dateTime:"d MMM, yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},gl_ES:{},gu:{longDate:"dddd, d MMMM, yyyy;@",shortDate:"d-MM-yy;@",dateTime:"d MMM, yyyy hh:mm:ss AM/PM;@",timeFormat:"hh:mm:ss AM/PM;@"},gu_IN:{},he:{longDate:"dddd, d ×MMMM yyyy;@",shortDate:"dd/MM/yy;@",dateTime:"dd/MM/yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},he_IL:{},hi:{longDate:"dddd, d MMMM yyyy;@",shortDate:"d-M-yy;@",dateTime:"dd-MM-yyyy h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},hi_IN:{},hr:{longDate:"dddd, d. MMMM yyyy.;@",shortDate:"dd.MM.yyyy.;@",dateTime:"d.M.yyyy. HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},hr_HR:{},hu:{longDate:"yyyy. MMMM d., dddd;@",shortDate:"yyyy.MM.dd.;@",dateTime:"yyyy.MM.dd. H:mm:ss;@",timeFormat:"H:mm:ss;@"},hu_HU:{},hy:{longDate:"dddd, MMMM d, yyyy;@",shortDate:"MM/dd/yy;@",dateTime:"MMM d, yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},hy_AM:{},id:{longDate:"dddd, dd MMMM yyyy;@",shortDate:"dd/MM/yy;@",dateTime:"d MMM yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},id_ID:{},is:{longDate:"dddd, d. MMMM yyyy;@",shortDate:"d.M.yyyy;@",dateTime:"d.M.yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},is_IS:{},it:{longDate:"dddd d MMMM yyyy;@",shortDate:"dd/MM/yy;@",dateTime:"dd/MMM/yyyy HH.mm.ss;@",timeFormat:"HH.mm.ss;@"},it_CH:{longDate:"dddd, d MMMM yyyy;@",shortDate:"dd.MM.yy;@",dateTime:"d-MMM-yyyy HH.mm.ss;@"},it_IT:{},ja:{longDate:"yyyyå¹´Mædæ¥dddd;@",shortDate:"yy/MM/dd;@",dateTime:"yyyy/MM/dd H:mm:ss;@",timeFormat:"H:mm:ss;@"},ja_JP:{},ka:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},ka_GE:{},kk:{longDate:'dddd, d MMMM yyyy "Ð¶".;@',shortDate:"dd.MM.yy;@",dateTime:"dd.MM.yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},kk_KZ:{},kn:{longDate:"dddd d MMMM yyyy;@",shortDate:"d-M-yy;@",dateTime:"d MMM yyyy hh:mm:ss AM/PM;@",timeFormat:"hh:mm:ss AM/PM;@"},kn_IN:{},ko:{longDate:"yyyyë Mì dì¼ dddd;@",shortDate:"yy. M. d.;@",dateTime:"yyyy. M. d. AM/PM h:mm:ss;@",timeFormat:"AM/PM h:mm:ss;@"},ko_KR:{},kok:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},kok_IN:{},lt:{longDate:'yyyy "m". MMMM d "d".,dddd;@',shortDate:"yyyy-MM-dd;@",dateTime:"yyyy.MM.dd HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},lt_LT:{},lv:{longDate:'dddd, yyyy. "gada" d. MMMM;@',shortDate:"dd.MM.yy;@",dateTime:'yyyy. "gada" d. MMM HH:mm:ss;@',timeFormat:"HH:mm:ss;@"},lv_LV:{},mk:{longDate:"dddd, dd MMMM yyyy;@",shortDate:"dd.M.yy;@",dateTime:"dd.M.yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},mk_MK:{},ml:{longDate:"yyyy, MMMM d, dddd;@",shortDate:"dd/MM/yy;@",dateTime:"yyyy, MMM d h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},ml_IN:{},mn:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},mn_MN:{},mr:{longDate:"dddd d MMMM yyyy;@",shortDate:"d-M-yy;@",dateTime:"d MMM yyyy h-mm-ss AM/PM;@",timeFormat:"h-mm-ss AM/PM;@"},mr_IN:{},ms:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},ms_BN:{longDate:"dd MMMM yyyy;@",dateTime:"dd/MM/yyyy H:mm:ss;@",timeFormat:"H:mm:ss;@"},ms_MY:{},mt:{longDate:'dddd, d "ta"â MMMM yyyy;@',shortDate:"dd/MM/yyyy;@",dateTime:"dd MMM yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},mt_MT:{},nb:{longDate:"dddd d. MMMM yyyy;@",shortDate:"dd.MM.yy;@",dateTime:"d. MMM yyyy HH.mm.ss;@",timeFormat:"HH.mm.ss;@"},nb_NO:{},nl:{longDate:"dddd d MMMM yyyy;@",shortDate:"dd-MM-yy;@",dateTime:"d MMM yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},nl_BE:{shortDate:"d/MM/yy;@",dateTime:"d-MMM-yyyy HH:mm:ss;@"},nl_NL:{},nn:{longDate:"dddd d. MMMM yyyy;@",shortDate:"dd.MM.yy;@",dateTime:"d. MMM. yyyy HH.mm.ss;@",timeFormat:"HH.mm.ss;@"},nn_NO:{},pa:{longDate:"dddd, dd MMMM yyyy;@",shortDate:"dd/MM/yyyy;@",dateTime:"d MMM yyyy h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},pa_IN:{},pl:{longDate:"dddd, d MMMM yyyy;@",shortDate:"dd-MM-yy;@",dateTime:"dd-MM-yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},pl_PL:{},pt:{longDate:'dddd, d "de" MMMM "de" yyyy;@',shortDate:"dd/MM/yy;@",dateTime:"dd/MM/yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},pt_BR:{},pt_PT:{dateTime:'d "de" MMM "de" yyyy HH:mm:ss;@'},ro:{longDate:"dddd, d MMMM yyyy;@",shortDate:"dd.MM.yyyy;@",dateTime:"dd.MM.yyyy, HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},ro_RO:{},ru:{longDate:'dddd, d MMMM yyyy "Ð³".;@',shortDate:"dd.MM.yy;@",dateTime:"dd.MM.yyyy H:mm:ss;@",timeFormat:"H:mm:ss;@"},ru_RU:{},se:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},se_NO:{},sk:{longDate:"dddd, d. MMMM yyyy;@",shortDate:"d.M.yyyy;@",dateTime:"d.M.yyyy H:mm:ss;@",timeFormat:"H:mm:ss;@"},sk_SK:{},sl:{longDate:"dddd, dd. MMMM yyyy;@",shortDate:"d. MM. yy;@",dateTime:"d. MMM. yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},sl_SI:{},sq:{longDate:"dddd, dd MMMM yyyy;@",shortDate:"yy-MM-dd;@",dateTime:"yyyy-MM-dd h.mm.ss.AM/PM;@",timeFormat:"h.mm.ss.AM/PM;@"},sq_AL:{},sr:{longDate:"dddd, dd. MMMM yyyy.;@",shortDate:"d.M.yy.;@",dateTime:"dd.MM.yyyy. HH.mm.ss;@",timeFormat:"HH.mm.ss;@"},sr_BA:{},sr_CS:{},sv:{longDate:"dddd d MMMM yyyy;@",shortDate:"yyyy-MM-dd;@",dateTime:"d MMM yyyy HH.mm.ss;@",timeFormat:"HH.mm.ss;@"},sv_FI:{},sv_SE:{},sw:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},sw_KE:{},syr:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"y MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},syr_SY:{},ta:{longDate:"dddd, d MMMM, yyyy;@",shortDate:"d-M-yy;@",dateTime:"d MMM, yyyy h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},ta_IN:{},te:{longDate:"dddd d MMMM yyyy;@",shortDate:"dd-MM-yy;@",dateTime:"d MMM yyyy h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},te_IN:{},th:{longDate:"ddddà¸à¸µà¹ d MMMM G yyyy;@",shortDate:"d/M/yyyy;@",dateTime:"d MMM yyyy, H:mm:ss;@",timeFormat:"H:mm:ss;@"},th_TH:{},tn:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},tn_ZA:{},tr:{longDate:"dd MMMM yyyy dddd;@",shortDate:"dd.MM.yyyy;@",dateTime:"dd MMM yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},tr_TR:{},uk:{longDate:'dddd, d MMMM yyyy "Ñ".;@',shortDate:"dd.MM.yy;@",dateTime:"d MMM yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},uk_UA:{},uz:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},uz_UZ:{},vi:{longDate:'dddd, "ngÃ y" dd MMMM "nÄm" yyyy;@',shortDate:"dd/MM/yyyy;@",dateTime:"HH:mm:ss dd-MM-yyyy;@",timeFormat:"HH:mm:ss;@"},vi_VN:{},xh:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},xh_ZA:{},zh:{longDate:"yyyyå¹´Mædæ¥dddd;@",shortDate:"yy-M-d;@",dateTime:"yyyy-M-d AM/PMhh:mm:ss;@",timeFormat:"AM/PMhh:mm:ss;@"},zh_CN:{},zh_HK:{},zh_MO:{},zh_SG:{},zh_TW:{},zu:{longDate:"dddd dd MMMM yyyy;@",shortDate:"yyyy-MM-dd;@",dateTime:"d MMM yyyy h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},zu_ZA:{}},a.RESOURCE_MAP={af:{date:{dateSeparator:"-",era:["voor Christus","na Christus"],eraAbbr:["v.C.","n.C."],shortDay:["So","Ma","Di","Wo","Do","Vr","Sa"],shortMonth:["Jan","Feb","Mar","Apr","Mei","Jun","Jul","Aug","Sep","Okt","Nov","Des"],longDay:["Sondag","Maandag","Dinsdag","Woensdag","Donderdag","Vrydag","Saterdag"],longMonth:["Januarie","Februarie","Maart","April","Mei","Junie","Julie","Augustus","September","Oktober","November","Desember"]},time:{timeSeparator:":",amPm:["vm.","nm."]}},af_ZA:{date:{},time:{}},ar:{date:{dateSeparator:"/",era:["ÙØ¨Ù Ø§ÙÙÙÙØ§Ø¯","ÙÙÙØ§Ø¯Ù"],eraAbbr:["Ù.Ù","Ù"],shortDay:["Ø£Ø­Ø¯","Ø¥Ø«ÙÙÙ","Ø«ÙØ§Ø«Ø§Ø¡","Ø£Ø±Ø¨Ø¹Ø§Ø¡","Ø®ÙÙØ³","Ø¬ÙØ¹Ø©","Ø³Ø¨Øª"],shortMonth:["ÙÙØ§ÙØ±","ÙØ¨Ø±Ø§ÙØ±","ÙØ§Ø±Ø³","Ø£Ø¨Ø±ÙÙ","ÙØ§ÙÙ","ÙÙÙÙÙ","ÙÙÙÙÙ","Ø£ØºØ³Ø·Ø³","Ø³Ø¨ØªÙØ¨Ø±","Ø£ÙØªÙØ¨Ø±","ÙÙÙÙØ¨Ø±","Ø¯ÙØ³ÙØ¨Ø±"],longDay:["Ø§ÙØ£Ø­Ø¯","Ø§ÙØ¥Ø«ÙÙÙ","Ø§ÙØ«ÙØ§Ø«Ø§Ø¡","Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡","Ø§ÙØ®ÙÙØ³","Ø§ÙØ¬ÙØ¹Ø©","Ø§ÙØ³Ø¨Øª"],longMonth:["ÙÙØ§ÙØ±","ÙØ¨Ø±Ø§ÙØ±","ÙØ§Ø±Ø³","Ø£Ø¨Ø±ÙÙ","ÙØ§ÙÙ","ÙÙÙÙÙ","ÙÙÙÙÙ","Ø£ØºØ³Ø·Ø³","Ø³Ø¨ØªÙØ¨Ø±","Ø£ÙØªÙØ¨Ø±","ÙÙÙÙØ¨Ø±","Ø¯ÙØ³ÙØ¨Ø±"]},time:{timeSeparator:":",amPm:["Øµ","Ù"]}},ar_AE:{date:{},time:{}},ar_BH:{date:{},time:{}},ar_DZ:{date:{},time:{}},ar_EG:{date:{},time:{}},ar_IQ:{date:{},time:{}},ar_JO:{date:{shortDay:["Ø§ÙØ£Ø­Ø¯","Ø§ÙØ§Ø«ÙÙÙ","Ø§ÙØ«ÙØ§Ø«Ø§Ø¡","Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡","Ø§ÙØ®ÙÙØ³","Ø§ÙØ¬ÙØ¹Ø©","Ø§ÙØ³Ø¨Øª"],shortMonth:["ÙØ§ÙÙÙ Ø§ÙØ«Ø§ÙÙ","Ø´Ø¨Ø§Ø·","Ø¢Ø°Ø§Ø±","ÙÙØ³Ø§Ù","Ø£ÙØ§Ø±","Ø­Ø²ÙØ±Ø§Ù","ØªÙÙØ²","Ø¢Ø¨","Ø£ÙÙÙÙ","ØªØ´Ø±ÙÙ Ø§ÙØ£ÙÙ","ØªØ´Ø±ÙÙ Ø§ÙØ«Ø§ÙÙ","ÙØ§ÙÙÙ Ø§ÙØ£ÙÙ"],longMonth:["ÙØ§ÙÙÙ Ø§ÙØ«Ø§ÙÙ","Ø´Ø¨Ø§Ø·","Ø¢Ø°Ø§Ø±","ÙÙØ³Ø§Ù","Ø£ÙØ§Ø±","Ø­Ø²ÙØ±Ø§Ù","ØªÙÙØ²","Ø¢Ø¨","Ø£ÙÙÙÙ","ØªØ´Ø±ÙÙ Ø§ÙØ£ÙÙ","ØªØ´Ø±ÙÙ Ø§ÙØ«Ø§ÙÙ","ÙØ§ÙÙÙ Ø§ÙØ£ÙÙ"]},time:{}},ar_KW:{date:{},time:{}},ar_LB:{date:{shortDay:["Ø§ÙØ£Ø­Ø¯","Ø§ÙØ§Ø«ÙÙÙ","Ø§ÙØ«ÙØ§Ø«Ø§Ø¡","Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡","Ø§ÙØ®ÙÙØ³","Ø§ÙØ¬ÙØ¹Ø©","Ø§ÙØ³Ø¨Øª"],shortMonth:["ÙØ§ÙÙÙ Ø§ÙØ«Ø§ÙÙ","Ø´Ø¨Ø§Ø·","Ø¢Ø°Ø§Ø±","ÙÙØ³Ø§Ù","ÙÙØ§Ø±","Ø­Ø²ÙØ±Ø§Ù","ØªÙÙØ²","Ø¢Ø¨","Ø£ÙÙÙÙ","ØªØ´Ø±ÙÙ Ø§ÙØ£ÙÙ","ØªØ´Ø±ÙÙ Ø§ÙØ«Ø§ÙÙ","ÙØ§ÙÙÙ Ø§ÙØ£ÙÙ"],longMonth:["ÙØ§ÙÙÙ Ø§ÙØ«Ø§ÙÙ","Ø´Ø¨Ø§Ø·","Ø¢Ø°Ø§Ø±","ÙÙØ³Ø§Ù","ÙÙØ§Ø±","Ø­Ø²ÙØ±Ø§Ù","ØªÙÙØ²","Ø¢Ø¨","Ø£ÙÙÙÙ","ØªØ´Ø±ÙÙ Ø§ÙØ£ÙÙ","ØªØ´Ø±ÙÙ Ø§ÙØ«Ø§ÙÙ","ÙØ§ÙÙÙ Ø§ÙØ£ÙÙ"]},time:{}},ar_LY:{date:{},time:{}},ar_MA:{date:{},time:{}},ar_OM:{date:{},time:{}},ar_QA:{date:{shortDay:["Ø§ÙØ£Ø­Ø¯","Ø§ÙØ§Ø«ÙÙÙ","Ø§ÙØ«ÙØ§Ø«Ø§Ø¡","Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡","Ø§ÙØ®ÙÙØ³","Ø§ÙØ¬ÙØ¹Ø©","Ø§ÙØ³Ø¨Øª"]},time:{}},ar_SA:{date:{shortDay:["Ø§ÙØ£Ø­Ø¯","Ø§ÙØ§Ø«ÙÙÙ","Ø§ÙØ«ÙØ§Ø«Ø§Ø¡","Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡","Ø§ÙØ®ÙÙØ³","Ø§ÙØ¬ÙØ¹Ø©","Ø§ÙØ³Ø¨Øª"]},time:{}},ar_SY:{date:{shortDay:["Ø§ÙØ£Ø­Ø¯","Ø§ÙØ§Ø«ÙÙÙ","Ø§ÙØ«ÙØ§Ø«Ø§Ø¡","Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡","Ø§ÙØ®ÙÙØ³","Ø§ÙØ¬ÙØ¹Ø©","Ø§ÙØ³Ø¨Øª"],shortMonth:["ÙØ§ÙÙÙ Ø§ÙØ«Ø§ÙÙ","Ø´Ø¨Ø§Ø·","Ø¢Ø°Ø§Ø±","ÙÙØ³Ø§Ù","ÙÙØ§Ø±","Ø­Ø²ÙØ±Ø§Ù","ØªÙÙØ²","Ø¢Ø¨","Ø£ÙÙÙÙ","ØªØ´Ø±ÙÙ Ø§ÙØ£ÙÙ","ØªØ´Ø±ÙÙ Ø§ÙØ«Ø§ÙÙ","ÙØ§ÙÙÙ Ø§ÙØ£ÙÙ"],longMonth:["ÙØ§ÙÙÙ Ø§ÙØ«Ø§ÙÙ","Ø´Ø¨Ø§Ø·","Ø¢Ø°Ø§Ø±","ÙÙØ³Ø§Ù","ÙÙØ§Ø±","Ø­Ø²ÙØ±Ø§Ù","ØªÙÙØ²","Ø¢Ø¨","Ø£ÙÙÙÙ","ØªØ´Ø±ÙÙ Ø§ÙØ£ÙÙ","ØªØ´Ø±ÙÙ Ø§ÙØ«Ø§ÙÙ","ÙØ§ÙÙÙ Ø§ÙØ£ÙÙ"]},time:{}},ar_TN:{date:{shortDay:["Ø§ÙØ£Ø­Ø¯","Ø§ÙØ§Ø«ÙÙÙ","Ø§ÙØ«ÙØ§Ø«Ø§Ø¡","Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡","Ø§ÙØ®ÙÙØ³","Ø§ÙØ¬ÙØ¹Ø©","Ø§ÙØ³Ø¨Øª"]},time:{}},ar_YE:{date:{shortDay:["Ø§ÙØ£Ø­Ø¯","Ø§ÙØ§Ø«ÙÙÙ","Ø§ÙØ«ÙØ§Ø«Ø§Ø¡","Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡","Ø§ÙØ®ÙÙØ³","Ø§ÙØ¬ÙØ¹Ø©","Ø§ÙØ³Ø¨Øª"]},time:{}},az:{date:{dateSeparator:"-",era:["eramÄ±zdan ÉvvÉl","bizim eramÄ±zÄ±n"],eraAbbr:["e.É.","b.e."],shortDay:["B.","B.E.","Ã.A.","Ã.","C.A.","C","Å."],shortMonth:["yan","fev","mar","apr","may","iyn","iyl","avq","sen","okt","noy","dek"],longDay:["bazar","bazar ertÉsi","Ã§ÉrÅÉnbÉ axÅamÄ±","Ã§ÉrÅÉnbÉ","cÃ¼mÉ axÅamÄ±","cÃ¼mÉ","ÅÉnbÉ"],longMonth:["Yanvar","Fevral","Mart","Aprel","May","Ä°yun","Ä°yul","Avqust","Sentyabr","Oktyabr","Noyabr","Dekabr"]},time:{timeSeparator:":",amPm:["AM","PM"]}},az_AZ:{date:{},time:{}},be:{date:{dateSeparator:".",era:["Ð´Ð° Ð½.Ñ.","Ð½.Ñ."],eraAbbr:["Ð´Ð° Ð½.Ðµ.","Ð½.Ðµ."],eraNarrow:["Ð´Ð° Ð½.Ñ.","Ð½.Ñ."],shortDay:["Ð½Ð´","Ð¿Ð½","Ð°Ñ","ÑÑ","ÑÑ","Ð¿Ñ","ÑÐ±"],shortMonth:["ÑÑÑ","Ð»ÑÑ","ÑÐ°Ðº","ÐºÑÐ°","Ð¼Ð°Ð¹","ÑÑÑ","Ð»ÑÐ¿","Ð¶Ð½Ñ","Ð²ÐµÑ","ÐºÐ°Ñ","Ð»ÑÑ","ÑÐ½Ðµ"],longDay:["Ð½ÑÐ´Ð·ÐµÐ»Ñ","Ð¿Ð°Ð½ÑÐ´Ð·ÐµÐ»Ð°Ðº","Ð°ÑÑÐ¾ÑÐ°Ðº","ÑÐµÑÐ°Ð´Ð°","ÑÐ°ÑÐ²ÐµÑ","Ð¿ÑÑÐ½ÑÑÐ°","ÑÑÐ±Ð¾ÑÐ°"],longMonth:["ÑÑÑÐ´Ð·ÐµÐ½Ñ","Ð»ÑÑÑ","ÑÐ°ÐºÐ°Ð²ÑÐº","ÐºÑÐ°ÑÐ°Ð²ÑÐº","Ð¼Ð°Ð¹","ÑÑÑÐ²ÐµÐ½Ñ","Ð»ÑÐ¿ÐµÐ½Ñ","Ð¶Ð½ÑÐ²ÐµÐ½Ñ","Ð²ÐµÑÐ°ÑÐµÐ½Ñ","ÐºÐ°ÑÑÑÑÑÐ½ÑÐº","Ð»ÑÑÑÐ°Ð¿Ð°Ð´","ÑÐ½ÐµÐ¶Ð°Ð½Ñ"]},time:{timeSeparator:".",amPm:["Ð´Ð° Ð¿Ð°Ð»ÑÐ´Ð½Ñ","Ð¿Ð°ÑÐ»Ñ Ð¿Ð°Ð»ÑÐ´Ð½Ñ"]}},be_BY:{date:{},time:{}},bg:{date:{dateSeparator:".",era:["Ð¿Ñ.Ð¥Ñ.","ÑÐ».Ð¥Ñ."],eraAbbr:["Ð¿Ñ. Ð½. Ðµ.","Ð¾Ñ Ð½. Ðµ."],eraNarrow:["ÑÐ».Ð½.Ðµ."],shortDay:["Ð½Ð´","Ð¿Ð½","Ð²Ñ","ÑÑ","ÑÑ","Ð¿Ñ","ÑÐ±"],shortMonth:["ÑÐ½.","ÑÐµÐ²Ñ.","Ð¼Ð°ÑÑ","Ð°Ð¿Ñ.","Ð¼Ð°Ð¹","ÑÐ½Ð¸","ÑÐ»Ð¸","Ð°Ð²Ð³.","ÑÐµÐ¿Ñ.","Ð¾ÐºÑ.","Ð½Ð¾ÐµÐ¼.","Ð´ÐµÐº."],longDay:["Ð½ÐµÐ´ÐµÐ»Ñ","Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»Ð½Ð¸Ðº","Ð²ÑÐ¾ÑÐ½Ð¸Ðº","ÑÑÑÐ´Ð°","ÑÐµÑÐ²ÑÑÑÑÐº","Ð¿ÐµÑÑÐº","ÑÑÐ±Ð¾ÑÐ°"],longMonth:["ÑÐ½ÑÐ°ÑÐ¸","ÑÐµÐ²ÑÑÐ°ÑÐ¸","Ð¼Ð°ÑÑ","Ð°Ð¿ÑÐ¸Ð»","Ð¼Ð°Ð¹","ÑÐ½Ð¸","ÑÐ»Ð¸","Ð°Ð²Ð³ÑÑÑ","ÑÐµÐ¿ÑÐµÐ¼Ð²ÑÐ¸","Ð¾ÐºÑÐ¾Ð¼Ð²ÑÐ¸","Ð½Ð¾ÐµÐ¼Ð²ÑÐ¸","Ð´ÐµÐºÐµÐ¼Ð²ÑÐ¸"]},time:{timeSeparator:":",amPm:["Ð¿Ñ. Ð¾Ð±.","ÑÐ». Ð¾Ð±."]}},bg_BG:{date:{},time:{}},bn:{date:{dateSeparator:"/",eraAbbr:["à¦à§à¦·à§à¦à¦ªà§à¦°à§à¦¬","à¦à§à¦·à§à¦à¦¾à¦¬à§à¦¦"],shortDay:["à¦°à¦¬à¦¿","à¦¸à§à¦®","à¦®à¦à§à¦à¦²","à¦¬à§à¦§","à¦¬à§à¦¹à¦¸à§à¦ªà¦¤à¦¿","à¦¶à§à¦à§à¦°","à¦¶à¦¨à¦¿"],shortMonth:["à¦à¦¾à¦¨à§à¦¯à¦¼à¦¾à¦°à§","à¦«à§à¦¬à§à¦°à§à¦¯à¦¼à¦¾à¦°à§","à¦®à¦¾à¦°à§à¦","à¦à¦ªà§à¦°à¦¿à¦²","à¦®à§","à¦à§à¦¨","à¦à§à¦²à¦¾à¦","à¦à¦à¦¸à§à¦","à¦¸à§à¦ªà§à¦à§à¦®à§à¦¬à¦°","à¦à¦à§à¦à§à¦¬à¦°","à¦¨à¦­à§à¦®à§à¦¬à¦°","à¦¡à¦¿à¦¸à§à¦®à§à¦¬à¦°"],longDay:["à¦°à¦¬à¦¿à¦¬à¦¾à¦°","à¦¸à§à¦®à¦¬à¦¾à¦°","à¦®à¦à§à¦à¦²à¦¬à¦¾à¦°","à¦¬à§à¦§à¦¬à¦¾à¦°","à¦¬à§à¦¹à¦·à§à¦ªà¦¤à¦¿à¦¬à¦¾à¦°","à¦¶à§à¦à§à¦°à¦¬à¦¾à¦°","à¦¶à¦¨à¦¿à¦¬à¦¾à¦°"],longMonth:["à¦à¦¾à¦¨à§à¦¯à¦¼à¦¾à¦°à§","à¦«à§à¦¬à§à¦°à§à¦¯à¦¼à¦¾à¦°à§","à¦®à¦¾à¦°à§à¦","à¦à¦ªà§à¦°à¦¿à¦²","à¦®à§","à¦à§à¦¨","à¦à§à¦²à¦¾à¦","à¦à¦à¦¸à§à¦","à¦¸à§à¦ªà§à¦à§à¦®à§à¦¬à¦°","à¦à¦à§à¦à§à¦¬à¦°","à¦¨à¦­à§à¦®à§à¦¬à¦°","à¦¡à¦¿à¦¸à§à¦®à§à¦¬à¦°"]},time:{timeSeparator:":",amPm:["à¦ªà§à¦°à§à¦¬à¦¾à¦¹à§à¦£","à¦à¦ªà¦°à¦¾à¦¹à§à¦£"]}},bn_IN:{date:{},time:{}},bs:{date:{dateSeparator:"-",eraAbbr:["BCE","CE"],shortDay:["7","1","2","3","4","5","6"],shortMonth:["1","2","3","4","5","6","7","8","9","10","11","12"],longDay:["7","1","2","3","4","5","6"],longMonth:["1","2","3","4","5","6","7","8","9","10","11","12"]},time:{timeSeparator:":",amPm:["AM","PM"]}},bs_BA:{date:{},time:{}},ca:{date:{dateSeparator:"/",eraAbbr:["aC","dC"],shortDay:["dg.","dl.","dt.","dc.","dj.","dv.","ds."],shortMonth:["gen.","febr.","marÃ§","abr.","maig","juny","jul.","ag.","set.","oct.","nov.","des."],longDay:["diumenge","dilluns","dimarts","dimecres","dijous","divendres","dissabte"],longMonth:["gener","febrer","marÃ§","abril","maig","juny","juliol","agost","setembre","octubre","novembre","desembre"]},time:{timeSeparator:":",amPm:["a.m.","p.m."]}},ca_ES:{date:{},time:{}},cs:{date:{dateSeparator:".",eraAbbr:["pÅ.Kr.","po Kr."],shortDay:["ne","po","Ãºt","st","Ät","pÃ¡","so"],shortMonth:["1","2","3","4","5","6","7","8","9","10","11","12",],longDay:["nedÄle","pondÄlÃ­","ÃºterÃ½","stÅeda","Ätvrtek","pÃ¡tek","sobota"],longMonth:["ledna","Ãºnora","bÅezna","dubna","kvÄtna","Äervna","Äervence","srpna","zÃ¡ÅÃ­","ÅÃ­jna","listopadu","prosince"]},time:{timeSeparator:":",amPm:["dop.","odp."]}},cs_CZ:{date:{},time:{}},cy:{date:{dateSeparator:"-",era:["Cyn Crist","Oed Crist"],eraAbbr:["CC","OC"],eraNarrow:["C","O"],shortDay:["Sul","Llun","Maw","Mer","Iau","Gwen","Sad"],shortMonth:["Ion","Chwef","Mawrth","Ebrill","Mai","Meh","Gorff","Awst","Medi","Hyd","Tach","Rhag"],longDay:["Dydd Sul","Dydd Llun","Dydd Mawrth","Dydd Mercher","Dydd Iau","Dydd Gwener","Dydd Sadwrn"],longMonth:["Ionawr","Chwefror","Mawrth","Ebrill","Mai","Mehefin","Gorffenaf","Awst","Medi","Hydref","Tachwedd","Rhagfyr"]},time:{timeSeparator:":",amPm:["AM","PM"]}},cy_GB:{date:{},time:{}},da:{date:{dateSeparator:"/",era:["f.Kr.","e.Kr."],eraAbbr:["f.Kr.","e.Kr."],shortDay:["sÃ¸n","man","tir","ons","tor","fre","lÃ¸r"],shortMonth:["jan.","feb.","mar.","apr.","maj","jun.","jul.","aug.","sep.","okt.","nov.","dec."],longDay:["sÃ¸ndag","mandag","tirsdag","onsdag","torsdag","fredag","lÃ¸rdag"],longMonth:["januar","februar","marts","april","maj","juni","juli","august","september","oktober","november","december"]},time:{timeSeparator:".",amPm:["f.m.","e.m."]}},da_DK:{date:{},time:{}},de:{date:{dateSeparator:".",era:["v. Chr.","n. Chr."],eraAbbr:["v. Chr.","n. Chr."],shortDay:["So.","Mo.","Di.","Mi.","Do.","Fr.","Sa."],shortMonth:["Jan","Feb","MÃ¤r","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],longDay:["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],longMonth:["Januar","Februar","MÃ¤rz","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"]},time:{timeSeparator:":",amPm:["vorm.","nachm."]}},de_AT:{date:{shortMonth:["JÃ¤n","Feb","MÃ¤r","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],longMonth:["JÃ¤nner","Februar","MÃ¤rz","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"]},time:{}},de_CH:{date:{},time:{}},de_DE:{date:{},time:{}},de_LI:{date:{},time:{}},de_LU:{date:{},time:{}},el:{date:{dateSeparator:"/",era:["Ï.Î§.","Î¼.Î§."],eraAbbr:["Ï.Î§.","Î¼.Î§."],shortDay:["ÎÏÏ","ÎÎµÏ","Î¤ÏÎ¹","Î¤ÎµÏ","Î ÎµÎ¼","Î Î±Ï","Î£Î±Î²"],shortMonth:["ÎÎ±Î½","Î¦ÎµÎ²","ÎÎ±Ï","ÎÏÏ","ÎÎ±Ï","ÎÎ¿ÏÎ½","ÎÎ¿ÏÎ»","ÎÏÎ³","Î£ÎµÏ","ÎÎºÏ","ÎÎ¿Îµ","ÎÎµÎº"],longDay:["ÎÏÏÎ¹Î±ÎºÎ®","ÎÎµÏÏÎ­ÏÎ±","Î¤ÏÎ¯ÏÎ·","Î¤ÎµÏÎ¬ÏÏÎ·","Î Î­Î¼ÏÏÎ·","Î Î±ÏÎ±ÏÎºÎµÏÎ®","Î£Î¬Î²Î²Î±ÏÎ¿"],longMonth:["ÎÎ±Î½Î¿ÏÎ±ÏÎ¯Î¿Ï","Î¦ÎµÎ²ÏÎ¿ÏÎ±ÏÎ¯Î¿Ï","ÎÎ±ÏÏÎ¯Î¿Ï","ÎÏÏÎ¹Î»Î¯Î¿Ï","ÎÎ±ÎÎ¿Ï","ÎÎ¿ÏÎ½Î¯Î¿Ï","ÎÎ¿ÏÎ»Î¯Î¿Ï","ÎÏÎ³Î¿ÏÏÏÎ¿Ï","Î£ÎµÏÏÎµÎ¼Î²ÏÎ¯Î¿Ï","ÎÎºÏÏÎ²ÏÎ¯Î¿Ï","ÎÎ¿ÎµÎ¼Î²ÏÎ¯Î¿Ï","ÎÎµÎºÎµÎ¼Î²ÏÎ¯Î¿Ï"]},time:{timeSeparator:":",amPm:["Ï.Î¼.","Î¼.Î¼."]}},el_GR:{date:{},time:{}},en:{date:{dateSeparator:"/",era:["Before Christ","Anno Domini"],eraAbbr:["BC","AD"],eraNarrow:["B","A"],shortDay:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],shortMonth:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],longDay:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],longMonth:["January","February","March","April","May","June","July","August","September","October","November","December"]},time:{timeSeparator:":",amPm:["AM","PM"]}},en_AU:{date:{dateSeparator:"/"},time:{}},en_BZ:{date:{dateSeparator:"/"},time:{timeSeparator:":"}},en_CA:{date:{dateSeparator:"-"},time:{}},en_GB:{date:{dateSeparator:"/"},time:{timeSeparator:":"}},en_IE:{date:{dateSeparator:"/"},time:{timeSeparator:":",amPm:["a.m.","p.m."]}},en_JM:{date:{},time:{}},en_NZ:{date:{dateSeparator:"/"},time:{}},en_PH:{date:{},time:{}},en_TT:{date:{},time:{}},en_US:{date:{},time:{}},en_VI:{date:{},time:{}},en_ZA:{date:{dateSeparator:"/"},time:{}},en_ZW:{date:{dateSeparator:"/"},time:{}},es:{date:{dateSeparator:"/",era:["antes de Cristo","anno DÃ³mini"],eraAbbr:["a.C.","d.C."],shortDay:["dom","lun","mar","miÃ©","jue","vie","sÃ¡b"],shortMonth:["ene","feb","mar","abr","may","jun","jul","ago","sep","oct","nov","dic"],longDay:["domingo","lunes","martes","miÃ©rcoles","jueves","viernes","sÃ¡bado"],longMonth:["enero","febrero","marzo","abril","mayo","junio","julio","agosto","septiembre","octubre","noviembre","diciembre"]},time:{timeSeparator:":",amPm:["a.m.","p.m."]}},es_AR:{date:{},time:{amPm:["a.m.","p.m."]}},es_BO:{date:{},time:{}},es_CL:{date:{dateSeparator:"-"},time:{timeSeparator:":"}},es_CO:{date:{dateSeparator:"/"},time:{timeSeparator:":"}},es_CR:{date:{},time:{}},es_DO:{date:{},time:{}},es_EC:{date:{},time:{timeSeparator:":"}},es_ES:{date:{},time:{}},es_GT:{date:{dateSeparator:"/"},time:{}},es_HN:{date:{},time:{}},es_MX:{date:{},time:{}},es_NI:{date:{},time:{}},es_PA:{date:{dateSeparator:"/"},time:{}},es_PE:{date:{dateSeparator:"/"},time:{}},es_PR:{date:{dateSeparator:"/"},time:{}},es_PY:{date:{},time:{}},es_SV:{date:{},time:{}},es_UY:{date:{},time:{}},es_VE:{date:{},time:{}},et:{date:{dateSeparator:".",era:["enne meie aega","meie aja jÃ¤rgi"],eraAbbr:["e.m.a.","m.a.j."],shortDay:["P","E","T","K","N","R","L"],shortMonth:["jaan","veebr","mÃ¤rts","apr","mai","juuni","juuli","aug","sept","okt","nov","dets"],longDay:["pÃ¼hapÃ¤ev","esmaspÃ¤ev","teisipÃ¤ev","kolmapÃ¤ev","neljapÃ¤ev","reede","laupÃ¤ev"],longMonth:["jaanuar","veebruar","mÃ¤rts","aprill","mai","juuni","juuli","august","september","oktoober","november","detsember"]},time:{timeSeparator:":",amPm:["AM","PM"]}},et_EE:{date:{},time:{}},eu:{date:{dateSeparator:"-",eraAbbr:["BCE","CE"],shortDay:["ig","al","as","az","og","or","lr"],shortMonth:["urt","ots","mar","api","mai","eka","uzt","abu","ira","urr","aza","abe"],longDay:["igandea","astelehena","asteartea","asteazkena","osteguna","ostirala","larunbata"],longMonth:["urtarrila","otsaila","martxoa","apirila","maiatza","ekaina","uztaila","abuztua","iraila","urria","azaroa","abendua"]},time:{timeSeparator:":",amPm:["AM","PM"]}},eu_ES:{date:{},time:{}},fa:{date:{dateSeparator:"/",era:["ÙØ¨Ù Ø§Ø² ÙÛÙØ§Ø¯","ÙÛÙØ§Ø¯Û"],eraAbbr:["Ù.Ù.","Ù."],eraNarrow:["Ù","Ù"],shortDay:["ÛÚ©Ø´ÙØ¨Ù","Ø¯ÙØ´ÙØ¨Ù","Ø³ÙØ´ÙØ¨Ù","ÚÙØ§Ø±Ø´ÙØ¨Ù","Ù¾ÙØ¬Ø´ÙØ¨Ù","Ø¬ÙØ¹Ù","Ø´ÙØ¨Ù"],shortMonth:["ÚØ§ÙÙÛÙÙ","ÙÙØ±ÛÙÙ","ÙØ§Ø±Ø³","Ø¢ÙØ±ÛÙ","ÙÙÙ","ÚÙØ¦Ù","ÚÙØ¦ÛÙÙ","Ø§ÙØª","Ø³Ù¾ØªØ§ÙØ¨Ø±","Ø§Ú©ØªØ¨Ø±","ÙÙØ§ÙØ¨Ø±","Ø¯Ø³Ø§ÙØ¨Ø±"],longDay:["ÛÚ©Ø´ÙØ¨Ù","Ø¯ÙØ´ÙØ¨Ù","Ø³ÙØ´ÙØ¨Ù","ÚÙØ§Ø±Ø´ÙØ¨Ù","Ù¾ÙØ¬Ø´ÙØ¨Ù","Ø¬ÙØ¹Ù","Ø´ÙØ¨Ù"],longMonth:["ÚØ§ÙÙÛÙÙ","ÙÙØ±ÛÙÙ","ÙØ§Ø±Ø³","Ø¢ÙØ±ÛÙ","ÙÙÙ","ÚÙØ¦Ù","ÚÙØ¦ÛÙÙ","Ø§ÙØª","Ø³Ù¾ØªØ§ÙØ¨Ø±","Ø§Ú©ØªØ¨Ø±","ÙÙØ§ÙØ¨Ø±","Ø¯Ø³Ø§ÙØ¨Ø±"]},time:{timeSeparator:":",amPm:["ÙØ¨Ù Ø§Ø² Ø¸ÙØ±","Ø¨Ø¹Ø¯ Ø§Ø² Ø¸ÙØ±"]}},fa_IR:{date:{},time:{}},fi:{date:{dateSeparator:".",era:["ennen Kristuksen syntymÃ¤Ã¤","jÃ¤lkeen Kristuksen syntymÃ¤n"],eraAbbr:["eKr.","jKr."],shortDay:["su","ma","ti","ke","to","pe","la"],shortMonth:["tammikuuta","helmikuuta","maaliskuuta","huhtikuuta","toukokuuta","kesÃ¤kuuta","heinÃ¤kuuta","elokuuta","syyskuuta","lokakuuta","marraskuuta","joulukuuta"],longDay:["sunnuntaina","maanantaina","tiistaina","keskiviikkona","torstaina","perjantaina","lauantaina"],longMonth:["tammikuuta","helmikuuta","maaliskuuta","huhtikuuta","toukokuuta","kesÃ¤kuuta","heinÃ¤kuuta","elokuuta","syyskuuta","lokakuuta","marraskuuta","joulukuuta"]},time:{timeSeparator:".",amPm:["ap.","ip."]}},fi_FI:{date:{},time:{}},fo:{date:{dateSeparator:"-",era:["fyrir Krist","eftir Krist"],eraAbbr:["BCE","CE"],eraNarrow:["f.Kr.","e.Kr."],shortDay:["sun","mÃ¡n","tÃ½s","mik","hÃ³s","frÃ­","ley"],shortMonth:["jan","feb","mar","apr","mai","jun","jul","aug","sep","okt","nov","des"],longDay:["sunnudagur","mÃ¡nadagur","tÃ½sdagur","mikudagur","hÃ³sdagur","frÃ­ggjadagur","leygardagur"],longMonth:["januar","februar","mars","aprÃ­l","mai","juni","juli","august","september","oktober","november","desember"]},time:{timeSeparator:":",amPm:["AM","PM"]}},fo_FO:{date:{},time:{}},fr:{date:{dateSeparator:"/",era:["avant JÃ©sus-Christ","aprÃ¨s JÃ©sus-Christ"],eraAbbr:["av. J.-C.","ap. J.-C."],shortDay:["dim.","lun.","mar.","mer.","jeu.","ven.","sam."],shortMonth:["janv.","fÃ©vr.","mars","avr.","mai","juin","juil.","aoÃ»t","sept.","oct.","nov.","dÃ©c."],longDay:["dimanche","lundi","mardi","mercredi","jeudi","vendredi","samedi"],longMonth:["janvier","fÃ©vrier","mars","avril","mai","juin","juillet","aoÃ»t","septembre","octobre","novembre","dÃ©cembre"]},time:{timeSeparator:":",amPm:["AM","PM"]}},fr_BE:{date:{dateSeparator:"/"},time:{}},fr_CA:{date:{dateSeparator:"-"},time:{}},fr_CH:{date:{dateSeparator:"."},time:{}},fr_FR:{date:{},time:{}},fr_LU:{date:{},time:{}},fr_MC:{date:{},time:{}},gl:{date:{dateSeparator:"/",era:["antes de Cristo","despois de Cristo"],eraAbbr:["a.C.","d.C."],shortDay:["Dom","Lun","Mar","MÃ©r","Xov","Ven","SÃ¡b"],shortMonth:["Xan","Feb","Mar","Abr","Mai","XuÃ±","Xul","Ago","Set","Out","Nov","Dec"],longDay:["Domingo","Luns","Martes","MÃ©rcores","Xoves","Venres","SÃ¡bado"],longMonth:["Xaneiro","Febreiro","Marzo","Abril","Maio","XuÃ±o","Xullo","Agosto","Setembro","Outubro","Novembro","Decembro"]},time:{timeSeparator:":",amPm:["AM","PM"]}},gl_ES:{date:{},time:{}},gu:{date:{dateSeparator:"-",era:["àªàª¸àªµà«àª¸àª¨ àªªà«àª°à«àªµà«","àªàª¸àªµà«àª¸àª¨"],eraAbbr:["BCE","CE"],eraNarrow:["àª àª¸ àªªà«","àªàª¸"],shortDay:["àª°àªµàª¿","àª¸à«àª®","àª®àªàªàª³","àª¬à«àª§","àªà«àª°à«","àª¶à«àªà«àª°","àª¶àª¨àª¿"],shortMonth:["àªàª¾àª¨à«àª¯à«","àª«à«àª¬à«àª°à«","àª®àª¾àª°à«àª","àªàªªà«àª°àª¿àª²","àª®à«","àªà«àª¨","àªà«àª²àª¾àª","àªàªàª¸à«àª","àª¸àªªà«àªà«","àªàªà«àªà«","àª¨àªµà«","àª¡àª¿àª¸à«"],longDay:["àª°àªµàª¿àªµàª¾àª°","àª¸à«àª®àªµàª¾àª°","àª®àªàªàª³àªµàª¾àª°","àª¬à«àª§àªµàª¾àª°","àªà«àª°à«àªµàª¾àª°","àª¶à«àªà«àª°àªµàª¾àª°","àª¶àª¨àª¿àªµàª¾àª°"],longMonth:["àªàª¾àª¨à«àª¯à«àªàª°à«","àª«à«àª¬à«àª°à«àªàª°à«","àª®àª¾àª°à«àª","àªàªªà«àª°àª¿àª²","àª®à«","àªà«àª¨","àªà«àª²àª¾àª","àªàªàª¸à«àª","àª¸àªªà«àªà«àª®à«àª¬àª°","àªàªà«àªà«àª¬àª°","àª¨àªµà«àª®à«àª¬àª°","àª¡àª¿àª¸à«àª®à«àª¬àª°"]},time:{timeSeparator:":",amPm:["am","pm"]}},gu_IN:{date:{},time:{}},he:{date:{dateSeparator:"/",era:["××¤× × ××¡×¤××¨×","××¡×¤××¨×"],eraAbbr:["××¤× ××´×¡","××¡××´× "],shortDay:["××× ×'","××× ×'","××× ×'","××× ×'","××× ×'","××× ×'","×©××ª"],shortMonth:["×× ×","×¤××¨","××¨×¡","××¤×¨","×××","××× ","×××","×××","×¡×¤×","×××§","× ××","××¦×"],longDay:["××× ×¨××©××","××× ×©× ×","××× ×©×××©×","××× ×¨×××¢×","××× ××××©×","××× ×©××©×","××× ×©××ª"],longMonth:["×× ×××¨","×¤××¨×××¨","××¨×¡","××¤×¨××","×××","××× ×","××××","×××××¡×","×¡×¤××××¨","×××§××××¨","× ×××××¨","××¦×××¨"]},time:{timeSeparator:":",amPm:['××¤× ×"×¦','×××"×¦']}},he_IL:{date:{},time:{}},hi:{date:{dateSeparator:"-",eraAbbr:["à¤à¤¸à¤¾à¤ªà¥à¤°à¥à¤µ","à¤¸à¤¨"],shortDay:["à¤°à¤µà¤¿","à¤¸à¥à¤®","à¤®à¤à¤à¤²","à¤¬à¥à¤§","à¤à¥à¤°à¥","à¤¶à¥à¤à¥à¤°","à¤¶à¤¨à¤¿"],shortMonth:["à¤à¤¨à¤µà¤°à¥","à¤«à¤°à¤µà¤°à¥","à¤®à¤¾à¤°à¥à¤","à¤à¤ªà¥à¤°à¥à¤²","à¤®à¤","à¤à¥à¤¨","à¤à¥à¤²à¤¾à¤","à¤à¤à¤¸à¥à¤¤","à¤¸à¤¿à¤¤à¤®à¥à¤¬à¤°","à¤à¤à¥à¤¤à¥à¤¬à¤°","à¤¨à¤µà¤®à¥à¤¬à¤°","à¤¦à¤¿à¤¸à¤®à¥à¤¬à¤°"],longDay:["à¤°à¤µà¤¿à¤µà¤¾à¤°","à¤¸à¥à¤®à¤µà¤¾à¤°","à¤®à¤à¤à¤²à¤µà¤¾à¤°","à¤¬à¥à¤§à¤µà¤¾à¤°","à¤à¥à¤°à¥à¤µà¤¾à¤°","à¤¶à¥à¤à¥à¤°à¤µà¤¾à¤°","à¤¶à¤¨à¤¿à¤µà¤¾à¤°"],longMonth:["à¤à¤¨à¤µà¤°à¥","à¤«à¤°à¤µà¤°à¥","à¤®à¤¾à¤°à¥à¤","à¤à¤ªà¥à¤°à¥à¤²","à¤®à¤","à¤à¥à¤¨","à¤à¥à¤²à¤¾à¤","à¤à¤à¤¸à¥à¤¤","à¤¸à¤¿à¤¤à¤®à¥à¤¬à¤°","à¤à¤à¥à¤¤à¥à¤¬à¤°","à¤¨à¤µà¤®à¥à¤¬à¤°","à¤¦à¤¿à¤¸à¤®à¥à¤¬à¤°"]},time:{timeSeparator:":",amPm:["AM","PM"]}},hi_IN:{date:{},time:{}},hr:{date:{dateSeparator:".",era:["Prije Krista","Poslije Krista"],eraAbbr:["pr.n.e.","AD"],shortDay:["ned","pon","uto","sri","Äet","pet","sub"],shortMonth:["01.","02.","03.","04.","05.","06.","07.","08.","09.","10.","11.","12."],longDay:["nedjelja","ponedjeljak","utorak","srijeda","Äetvrtak","petak","subota"],longMonth:["sijeÄnja","veljaÄe","oÅ¾ujka","travnja","svibnja","lipnja","srpnja","kolovoza","rujna","listopada","studenoga","prosinca"]},time:{timeSeparator:":",amPm:["AM","PM"]}},hr_HR:{date:{},time:{}},hu:{date:{dateSeparator:".",era:["idÅszÃ¡mÃ­tÃ¡sunk elÅtt","idÅszÃ¡mÃ­tÃ¡sunk szerint"],eraAbbr:["i. e.","i. sz."],shortDay:["V","H","K","Sze","Cs","P","Szo"],shortMonth:["jan.","febr.","mÃ¡rc.","Ã¡pr.","mÃ¡j.","jÃºn.","jÃºl.","aug.","szept.","okt.","nov.","dec."],longDay:["vasÃ¡rnap","hÃ©tfÅ","kedd","szerda","csÃ¼tÃ¶rtÃ¶k","pÃ©ntek","szombat"],longMonth:["januÃ¡r","februÃ¡r","mÃ¡rcius","Ã¡prilis","mÃ¡jus","jÃºnius","jÃºlius","augusztus","szeptember","oktÃ³ber","november","december"]},time:{timeSeparator:":",amPm:["de.","du."]}},hu_HU:{date:{},time:{}},hy:{date:{dateSeparator:"/",eraAbbr:["Õâ¤Ô±â¤","Õâ¤Ôµâ¤"],shortDay:["Ô¿Õ«Ö","ÔµÖÕ¯","ÔµÖÖ","ÕÕ¸Ö","ÕÕ¶Õ£","ÕÖÖ","ÕÕ¡Õ¢"],shortMonth:["ÕÕ¶Ö","ÕÕ¿Ö","ÕÖÕ¿","Ô±ÕºÖ","ÕÕµÕ½","ÕÕ¶Õ½","ÕÕ¬Õ½","ÕÕ£Õ½","ÕÕ¥Õº","ÕÕ¸Õ¯","ÕÕ¸Õµ","Ô´Õ¥Õ¯"],longDay:["Ô¿Õ«ÖÕ¡Õ¯Õ«","ÔµÖÕ¯Õ¸ÖÕ·Õ¡Õ¢Õ©Õ«","ÔµÖÕ¥ÖÕ·Õ¡Õ¢Õ©Õ«","ÕÕ¸ÖÕ¥ÖÕ·Õ¡Õ¢Õ©Õ«","ÕÕ«Õ¶Õ£Õ·Õ¡Õ¢Õ©Õ«","ÕÖÖÕ¢Õ¡Õ©","ÕÕ¡Õ¢Õ¡Õ©"],longMonth:["ÕÕ¸ÖÕ¶Õ¸ÖÕ¡Ö","ÕÕ¥Õ¿ÖÕ¸ÖÕ¡Ö","ÕÕ¡ÖÕ¿","Ô±ÕºÖÕ«Õ¬","ÕÕ¡ÕµÕ«Õ½","ÕÕ¸ÖÕ¶Õ«Õ½","ÕÕ¸ÖÕ¬Õ«Õ½","ÕÕ£Õ¸Õ½Õ¿Õ¸Õ½","ÕÕ¥ÕºÕ¿Õ¥Õ´Õ¢Õ¥Ö","ÕÕ¸Õ¯Õ¿Õ¥Õ´Õ¢Õ¥Ö","ÕÕ¸ÕµÕ¥Õ´Õ¢Õ¥Ö","Ô´Õ¥Õ¯Õ¿Õ¥Õ´Õ¢Õ¥Ö"]},time:{timeSeparator:":",amPm:["Ô±Õ¼â¤","ÔµÖâ¤"]}},hy_AM:{date:{},time:{}},id:{date:{dateSeparator:"/",eraAbbr:["BCE","CE"],shortDay:["Min","Sen","Sel","Rab","Kam","Jum","Sab"],shortMonth:["Jan","Feb","Mar","Apr","Mei","Jun","Jul","Agu","Sep","Okt","Nov","Des"],longDay:["Minggu","Senin","Selasa","Rabu","Kamis","Jumat","Sabtu"],longMonth:["Januari","Februari","Maret","April","Mei","Juni","Juli","Agustus","September","Oktober","November","Desember"]},time:{timeSeparator:":",amPm:["AM","PM"]}},id_ID:{date:{},time:{}},is:{date:{dateSeparator:".",eraAbbr:["fyrir Krist","eftir Krist",],eraNarrow:["f.k.","e.k."],shortDay:["sun","mÃ¡n","Ã¾ri","miÃ°","fim","fÃ¶s","lau"],shortMonth:["jan","feb","mar","apr","maÃ­","jÃºn","jÃºl","Ã¡gÃº","sep","okt","nÃ³v","des"],longDay:["sunnudagur","mÃ¡nudagur","Ã¾riÃ°judagur","miÃ°vikudagur","fimmtudagur","fÃ¶studagur","laugardagur"],longMonth:["janÃºar","febrÃºar","mars","aprÃ­l","maÃ­","jÃºnÃ­","jÃºlÃ­","Ã¡gÃºst","september","oktÃ³ber","nÃ³vember","desember"]},time:{timeSeparator:":",amPm:["f.h.","e.h."]}},is_IS:{date:{},time:{}},it:{date:{dateSeparator:"/",era:["a.C.","d.C"],eraAbbr:["aC","dC"],shortDay:["dom","lun","mar","mer","gio","ven","sab"],shortMonth:["gen","feb","mar","apr","mag","giu","lug","ago","set","ott","nov","dic"],longDay:["domenica","lunedÃ¬","martedÃ¬","mercoledÃ¬","giovedÃ¬","venerdÃ¬","sabato"],longMonth:["gennaio","febbraio","marzo","aprile","maggio","giugno","luglio","agosto","settembre","ottobre","novembre","dicembre"]},time:{timeSeparator:".",amPm:["m.","p."]}},it_CH:{date:{dateSeparator:"."},time:{}},it_IT:{date:{},time:{}},ja:{date:{dateSeparator:"/",era:["ç´åå","è¥¿æ¦"],eraAbbr:["ç´åå","è¥¿æ¦"],shortDay:["æ¥","æ","ç«","æ°´","æ¨","é","å"],shortMonth:["1æ","2æ","3æ","4æ","5æ","6æ","7æ","8æ","9æ","10æ","11æ","12æ"],longDay:["æ¥ææ¥","æææ¥","ç«ææ¥","æ°´ææ¥","æ¨ææ¥","éææ¥","åææ¥"],longMonth:["1æ","2æ","3æ","4æ","5æ","6æ","7æ","8æ","9æ","10æ","11æ","12æ"]},time:{timeSeparator:":",amPm:["åå","åå¾"]}},ja_JP:{date:{},time:{}},ka:{date:{dateSeparator:"-",era:["á©áááá¡ á¬ááááá¦á ááªá®ááááá","á©áááá á¬ááááá¦á ááªá®ááá"],eraAbbr:["á©áááá¡ á¬ááááá¦á ááªá®ááááá","á©áááá á¬ááááá¦á ááªá®ááá"],eraNarrow:["á©áááá¡ á¬ááááá¦á ááªá®ááááá","á©áááá á¬ááááá¦á ááªá®ááá"],shortDay:["ááá","áá á¨","á¡áá","ááá®","á®á£á","ááá ","á¨áá"],shortMonth:["ááá","ááá","ááá ","ááá ","ááá","ááá","ááá","ááá","á¡áá¥","áá¥á¢","ááá","ááá"],longDay:["áááá á","áá á¨ááááá","á¡ááá¨ááááá","ááá®á¨ááááá","á®á£áá¨ááááá","ááá áá¡áááá","á¨ááááá"],longMonth:["áááááá á","ááááá áááá","ááá á¢á","ááá ááá","áááá¡á","ááááá¡á","ááááá¡á","ááááá¡á¢á","á¡áá¥á¢ááááá á","áá¥á¢ááááá á","ááááááá á","áááááááá á"]},time:{timeSeparator:":",amPm:["ááááá¡","á¡áá¦áááá¡"]}},ka_GE:{date:{},time:{}},kk:{date:{dateSeparator:".",eraAbbr:["BCE","CE"],shortDay:["Ð¶Ñ.","Ð´Ñ.","ÑÑ.","ÑÑ.","Ð±Ñ.","Ð¶Ð¼.","ÑÒ»."],shortMonth:["ÒÐ°Ò£.","Ð°ÒÐ¿.","Ð½Ð°Ñ.","ÑÓÑ.","Ð¼Ð°Ð¼.","Ð¼Ð°Ñ.","ÑÑÐ».","ÑÐ°Ð¼.","ÒÑÑ.","ÒÐ°Ð·.","ÒÐ°Ñ.","Ð¶ÐµÐ»Ñ."],longDay:["Ð¶ÐµÐºÑÐµÐ½Ñ","Ð´ÑÐ¹ÑÐµÐ½Ð±Ñ","ÑÐµÐ¹ÑÐµÐ½Ð±Ñ","ÑÓÑÐµÐ½Ð±Ñ","Ð±ÐµÐ¹ÑÐµÐ½Ð±Ñ","Ð¶Ò±Ð¼Ð°","ÑÐµÐ½Ð±Ñ"],longMonth:["ÒÐ°Ò£ÑÐ°Ñ","Ð°ÒÐ¿Ð°Ð½","Ð½Ð°ÑÑÑÐ·","ÑÓÑÑÑ","Ð¼Ð°Ð¼ÑÑ","Ð¼Ð°ÑÑÑÐ¼","ÑÑÐ»Ð´Ðµ","ÑÐ°Ð¼ÑÐ·","ÒÑÑÐºÒ¯Ð¹ÐµÐº","ÒÐ°Ð·Ð°Ð½","ÒÐ°ÑÐ°ÑÐ°","Ð¶ÐµÐ»ÑÐ¾ÒÑÐ°Ð½"]},time:{timeSeparator:":",amPm:["AM","PM"]}},kk_KZ:{date:{},time:{}},kn:{date:{dateSeparator:"-",era:["à²à²¸à²ªà³à²µà³¯.","à²à³à²°à²¿à²¸à³à²¤ à²¶à²"],eraAbbr:["BCE","CE"],shortDay:["à²°.","à²¸à³.","à²®à².","à²¬à³.","à²à³.","à²¶à³.","à²¶à²¨à²¿."],shortMonth:["à²à²¨à²µà²°à³","à²«à³à²¬à³à²°à²µà²°à³","à²®à²¾à²°à³à²à³","à²à²ªà³à²°à²¿à²²à³","à²®à³","à²à³à²¨à³","à²à³à²²à³","à²à²à²¸à³à²à³","à²¸à²ªà³à²à³à²à²¬à²°à³","à²à²à³à²à³à²¬à²°à³","à²¨à²µà³à²à²¬à²°à³","à²¡à²¿à²¸à³à²à²¬à²°à³"],longDay:["à²°à²µà²¿à²µà²¾à²°","à²¸à³à²®à²µà²¾à²°","à²®à²à²à²³à²µà²¾à²°","à²¬à³à²§à²µà²¾à²°","à²à³à²°à³à²µà²¾à²°","à²¶à³à²à³à²°à²µà²¾à²°","à²¶à²¨à²¿à²µà²¾à²°"],longMonth:["à²à²¨à²µà²°à³","à²«à³à²¬à³à²°à²µà²°à³","à²®à²¾à²°à³à²à³","à²à²ªà³à²°à²¿à²²à³","à²®à³","à²à³à²¨à³","à²à³à²²à³","à²à²à²¸à³à²à³","à²¸à²ªà³à²à³à²à²¬à²°à³","à²à²à³à²à³à²¬à²°à³","à²¨à²µà³à²à²¬à²°à³","à²¡à²¿à²¸à³à²à²¬à²°à³"]},time:{timeSeparator:":",amPm:["am","pm"]}},kn_IN:{date:{},time:{}},ko:{date:{dateSeparator:". ",era:["ìë ¥ê¸°ìì ","ìë ¥ê¸°ì"],eraAbbr:["ê¸°ìì ","ìê¸°"],shortDay:["ì¼","ì","í","ì","ëª©","ê¸","í "],shortMonth:["1ì","2ì","3ì","4ì","5ì","6ì","7ì","8ì","9ì","10ì","11ì","12ì"],longDay:["ì¼ìì¼","ììì¼","íìì¼","ììì¼","ëª©ìì¼","ê¸ìì¼","í ìì¼"],longMonth:["1ì","2ì","3ì","4ì","5ì","6ì","7ì","8ì","9ì","10ì","11ì","12ì"]},time:{timeSeparator:":",amPm:["ì¤ì ","ì¤í"]}},ko_KR:{date:{},time:{}},kok:{date:{dateSeparator:"-",eraAbbr:["à¤à¥à¤°à¤¿à¤¸à¥à¤¤à¤ªà¥à¤°à¥à¤µ","à¤à¥à¤°à¤¿à¤¸à¥à¤¤à¤¶à¤à¤¾"],shortDay:["à¤°à¤µà¤¿","à¤¸à¥à¤®","à¤®à¤à¤à¤³","à¤¬à¥à¤§","à¤à¥à¤°à¥","à¤¶à¥à¤à¥à¤°","à¤¶à¤¨à¤¿"],shortMonth:["à¤à¤¾à¤¨à¥à¤µà¤¾à¤°à¥","à¤«à¥à¤¬à¥à¤µà¤¾à¤°à¥","à¤®à¤¾à¤°à¥à¤","à¤à¤ªà¥à¤°à¤¿à¤²","à¤®à¥","à¤à¥à¤¨","à¤à¥à¤²à¥","à¤à¤à¤¸à¥à¤","à¤¸à¥à¤ªà¥à¤à¥à¤à¤¬à¤°","à¤à¤à¥à¤à¥à¤¬à¤°","à¤¨à¥à¤µà¥à¤¹à¥à¤à¤¬à¤°","à¤¡à¤¿à¤¸à¥à¤à¤¬à¤°"],longDay:["à¤à¤¦à¤¿à¤¤à¥à¤¯à¤µà¤¾à¤°","à¤¸à¥à¤®à¤µà¤¾à¤°","à¤®à¤à¤à¤³à¤¾à¤°","à¤¬à¥à¤§à¤µà¤¾à¤°","à¤à¥à¤°à¥à¤µà¤¾à¤°","à¤¶à¥à¤à¥à¤°à¤µà¤¾à¤°","à¤¶à¤¨à¤¿à¤µà¤¾à¤°"],longMonth:["à¤à¤¾à¤¨à¥à¤µà¤¾à¤°à¥","à¤«à¥à¤¬à¥à¤°à¥à¤µà¤¾à¤°à¥","à¤®à¤¾à¤°à¥à¤","à¤à¤ªà¥à¤°à¤¿à¤²","à¤®à¥","à¤à¥à¤¨","à¤à¥à¤²à¥","à¤à¤à¤¸à¥à¤","à¤¸à¥à¤ªà¥à¤à¥à¤à¤¬à¤°","à¤à¤à¥à¤à¥à¤¬à¤°","à¤¨à¥à¤µà¥à¤¹à¥à¤à¤¬à¤°","à¤¡à¤¿à¤¸à¥à¤à¤¬à¤°"]},time:{timeSeparator:":",amPm:["à¤®.à¤ªà¥.","à¤®.à¤¨à¤."]}},kok_IN:{date:{},time:{}},lt:{date:{dateSeparator:"-",era:["prieÅ¡ KristÅ³","po Kristaus"],eraAbbr:["pr. Kr.","po Kr."],shortDay:["Sk","Pr","An","Tr","Kt","Pn","Å t"],shortMonth:["Sau","Vas","Kov","Bal","Geg","Bir","Lie","Rgp","Rgs","Spl","Lap","Grd"],longDay:["sekmadienis","pirmadienis","antradienis","treÄiadienis","ketvirtadienis","penktadienis","Å¡eÅ¡tadienis"],longMonth:["sausio","vasario","kovo","balandÅ¾io","geguÅ¾Äs","birÅ¾elio","liepos","rugpjÅ«Äio","rugsÄjo","spalio","lapkriÄio","gruodÅ¾io"]},time:{timeSeparator:":",amPm:["prieÅ¡piet","popiet"]}},lt_LT:{date:{},time:{}},lv:{date:{dateSeparator:".",era:["pirms mÅ«su Äras","mÅ«su ÄrÄ"],eraAbbr:["p.m.Ä.","m.Ä."],eraNarrow:["p.m.Ä.","m.Ä."],shortDay:["Sv","Pr","Ot","Tr","Ce","Pk","Se"],shortMonth:["janv.","febr.","marts","apr.","maijs","jÅ«n.","jÅ«l.","aug.","sept.","okt.","nov.","dec."],longDay:["svÄtdiena","pirmdiena","otrdiena","treÅ¡diena","ceturtdiena","piektdiena","sestdiena"],longMonth:["janvÄris","februÄris","marts","aprÄ«lis","maijs","jÅ«nijs","jÅ«lijs","augusts","septembris","oktobris","novembris","decembris"]},time:{timeSeparator:":",amPm:["AM","PM"]}},lv_LV:{date:{},time:{}},mk:{date:{dateSeparator:".",eraAbbr:["Ð¿Ñ.Ð½.Ðµ.","Ð°Ðµ."],shortDay:["Ð½ÐµÐ´.","Ð¿Ð¾Ð½.","Ð²Ñ.","ÑÑÐµ.","ÑÐµÑ.","Ð¿ÐµÑ.","ÑÐ°Ð±."],shortMonth:["ÑÐ°Ð½.","ÑÐµÐ².","Ð¼Ð°Ñ.","Ð°Ð¿Ñ.","Ð¼Ð°Ñ","ÑÑÐ½.","ÑÑÐ».","Ð°Ð²Ð³.","ÑÐµÐ¿Ñ.","Ð¾ÐºÑ.","Ð½Ð¾ÐµÐ¼.","Ð´ÐµÐºÐµÐ¼."],longDay:["Ð½ÐµÐ´ÐµÐ»Ð°","Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»Ð½Ð¸Ðº","Ð²ÑÐ¾ÑÐ½Ð¸Ðº","ÑÑÐµÐ´Ð°","ÑÐµÑÐ²ÑÑÐ¾Ðº","Ð¿ÐµÑÐ¾Ðº","ÑÐ°Ð±Ð¾ÑÐ°"],longMonth:["ÑÐ°Ð½ÑÐ°ÑÐ¸","ÑÐµÐ²ÑÑÐ°ÑÐ¸","Ð¼Ð°ÑÑ","Ð°Ð¿ÑÐ¸Ð»","Ð¼Ð°Ñ","ÑÑÐ½Ð¸","ÑÑÐ»Ð¸","Ð°Ð²Ð³ÑÑÑ","ÑÐµÐ¿ÑÐµÐ¼Ð²ÑÐ¸","Ð¾ÐºÑÐ¾Ð¼Ð²ÑÐ¸","Ð½Ð¾ÐµÐ¼Ð²ÑÐ¸","Ð´ÐµÐºÐµÐ¼Ð²ÑÐ¸"]},time:{timeSeparator:":",amPm:["Ð¿ÑÐµÑÐ¿Ð»Ð°Ð´Ð½Ðµ","Ð¿Ð¾Ð¿Ð»Ð°Ð´Ð½Ðµ"]}},mk_MK:{date:{},time:{}},ml:{date:{dateSeparator:"/",era:["à´àµà´°à´¿à´¸àµà´¤àµà´µà´¿à´¨àµàµ à´®àµà´®àµà´ªàµ","à´àµà´°à´¿à´¸àµà´¤àµà´µà´¿à´¨àµ à´ªà´¿à´¨àµà´ªàµ"],eraAbbr:["à´àµà´°à´¿.à´®àµ.","à´àµà´°à´¿.à´ªà´¿."],eraNarrow:["à´àµà´°à´¿.à´®àµ.","à´àµà´°à´¿.à´ªà´¿."],shortDay:["à´à´¾à´¯à´°àµ","à´¤à´¿à´àµà´à´³àµ","à´àµà´µàµà´µ","à´¬àµà´§à´¨àµ","à´µàµà´¯à´¾à´´à´","à´µàµà´³àµà´³à´¿","à´¶à´¨à´¿"],shortMonth:["à´à´¨àµ","à´«àµà´¬àµà´°àµ","à´®à´¾à´°àµ","à´à´ªàµà´°à´¿","à´®àµà´¯àµ","à´àµà´£àµ","à´àµà´²àµ","à´à´","à´¸àµà´ªàµà´±àµà´±à´","à´à´àµà´àµ","à´¨à´µà´","à´¡à´¿à´¸à´"],longDay:["à´à´¾à´¯à´±à´¾à´´àµà´","à´¤à´¿à´àµà´à´³à´¾à´´àµà´","à´àµà´µàµà´µà´¾à´´àµà´","à´¬àµà´§à´¨à´¾à´´àµà´","à´µàµà´¯à´¾à´´à´¾à´´àµà´","à´µàµà´³àµà´³à´¿à´¯à´¾à´´àµà´","à´¶à´¨à´¿à´¯à´¾à´´àµà´"],longMonth:["à´à´¨àµà´µà´°à´¿","à´«àµà´¬àµà´°àµà´µà´°à´¿","à´®à´¾à´°àµà´àµà´àµ","à´à´ªàµà´°à´¿à´²àµ","à´®àµà´¯àµ","à´àµà´£àµ","à´àµà´²àµ","à´à´à´¸àµà´±àµà´±àµ","à´¸àµà´ªàµà´±àµà´±à´à´¬à´°àµ","à´à´àµà´àµà´¬à´°àµ","à´¨à´µà´à´¬à´°àµ","à´¡à´¿à´¸à´à´¬à´°àµ"]},time:{timeSeparator:":",amPm:["am","pm"]}},ml_IN:{date:{},time:{}},mn:{date:{dateSeparator:"-",era:["Ð¼Ð°Ð½Ð°Ð¹ ÑÑÐ¸Ð½Ð¸Ð¹ Ó©Ð¼Ð½Ó©Ñ","Ð¼Ð°Ð½Ð°Ð¹ ÑÑÐ¸Ð½Ð¸Ð¹"],eraAbbr:["BCE","CE"],shortDay:["1","2","3","4","5","6","7"],shortMonth:["1","2","3","4","5","6","7","8","9","10","11","12"],longDay:["1","2","3","4","5","6","7"],longMonth:["1","2","3","4","5","6","7","8","9","10","11","12"]},time:{timeSeparator:":",amPm:["AM","PM"]}},mn_MN:{date:{},time:{}},mr:{date:{dateSeparator:"-",era:["à¤à¤¸à¤µà¥à¤¸à¤¨à¤ªà¥à¤°à¥à¤µ","à¤à¤¸à¤µà¥à¤¸à¤¨"],eraAbbr:["à¤.à¤¸.à¤ªà¥.","à¤.à¤¸."],shortDay:["à¤°à¤µà¤¿","à¤¸à¥à¤®","à¤®à¤à¤à¤³","à¤¬à¥à¤§","à¤à¥à¤°à¥","à¤¶à¥à¤à¥à¤°","à¤¶à¤¨à¤¿"],shortMonth:["à¤à¤¾à¤¨à¥à¤µà¤¾à¤°à¥","à¤«à¥à¤¬à¥à¤°à¥à¤µà¤¾à¤°à¥","à¤®à¤¾à¤°à¥à¤","à¤à¤ªà¥à¤°à¤¿à¤²","à¤®à¥","à¤à¥à¤¨","à¤à¥à¤²à¥","à¤à¤à¤¸à¥à¤","à¤¸à¤ªà¥à¤à¥à¤à¤¬à¤°","à¤à¤à¥à¤à¥à¤¬à¤°","à¤¨à¥à¤µà¥à¤¹à¥à¤à¤¬à¤°","à¤¡à¤¿à¤¸à¥à¤à¤¬à¤°"],longDay:["à¤°à¤µà¤¿à¤µà¤¾à¤°","à¤¸à¥à¤®à¤µà¤¾à¤°","à¤®à¤à¤à¤³à¤µà¤¾à¤°","à¤¬à¥à¤§à¤µà¤¾à¤°","à¤à¥à¤°à¥à¤µà¤¾à¤°","à¤¶à¥à¤à¥à¤°à¤µà¤¾à¤°","à¤¶à¤¨à¤¿à¤µà¤¾à¤°"],longMonth:["à¤à¤¾à¤¨à¥à¤µà¤¾à¤°à¥","à¤«à¥à¤¬à¥à¤°à¥à¤µà¤¾à¤°à¥","à¤®à¤¾à¤°à¥à¤","à¤à¤ªà¥à¤°à¤¿à¤²","à¤®à¥","à¤à¥à¤¨","à¤à¥à¤²à¥","à¤à¤à¤¸à¥à¤","à¤¸à¤ªà¥à¤à¥à¤à¤¬à¤°","à¤à¤à¥à¤à¥à¤¬à¤°","à¤¨à¥à¤µà¥à¤¹à¥à¤à¤¬à¤°","à¤¡à¤¿à¤¸à¥à¤à¤¬à¤°"]},time:{timeSeparator:"-",amPm:["am","pm"]}},mr_IN:{date:{},time:{}},ms:{date:{dateSeparator:"-",eraAbbr:["BCE","CE"],shortDay:["Ahd","Isn","Sel","Rab","Kha","Jum","Sab"],shortMonth:["Jan","Feb","Mac","Apr","Mei","Jun","Jul","Ogos","Sep","Okt","Nov","Dis"],longDay:["Ahad","Isnin","Selasa","Rabu","Khamis","Jumaat","Sabtu"],longMonth:["Januari","Februari","Mac","April","Mei","Jun","Julai","Ogos","September","Oktober","November","Disember"]},time:{timeSeparator:":",amPm:["AM","PM"]}},ms_BN:{date:{},time:{timeSeparator:":"}},ms_MY:{date:{},time:{}},mt:{date:{dateSeparator:"/",era:["Qabel Kristu","Wara Kristu"],eraAbbr:["QK","WK"],shortDay:["Ä¦ad","Tne","Tli","Erb","Ä¦am","Ä im","Sib"],shortMonth:["Jan","Fra","Mar","Apr","Mej","Ä un","Lul","Aww","Set","Ott","Nov","DiÄ"],longDay:["Il-Ä¦add","It-Tnejn","It-Tlieta","L-ErbgÄ§a","Il-Ä¦amis","Il-Ä imgÄ§a","Is-Sibt"],longMonth:["Jannar","Frar","Marzu","April","Mejju","Ä unju","Lulju","Awwissu","Settembru","Ottubru","Novembru","DiÄembru"]},time:{timeSeparator:":",amPm:["QN","WN"]}},mt_MT:{date:{},time:{}},nb:{date:{dateSeparator:".",era:["f.Kr.","e.Kr."],eraAbbr:["f.Kr.","e.Kr."],shortDay:["sÃ¸n.","man.","tir.","ons.","tor.","fre.","lÃ¸r."],shortMonth:["jan.","feb.","mars","apr.","mai","juni","juli","aug.","sep.","okt.","nov.","des."],longDay:["sÃ¸ndag","mandag","tirsdag","onsdag","torsdag","fredag","lÃ¸rdag"],longMonth:["januar","februar","mars","april","mai","juni","juli","august","september","oktober","november","desember"]},time:{timeSeparator:".",amPm:["AM","PM"]}},nb_NO:{date:{},time:{}},nl:{date:{dateSeparator:"-",era:["Voor Christus","Anno Domini"],eraAbbr:["v. Chr.","n. Chr."],shortDay:["zo","ma","di","wo","do","vr","za"],shortMonth:["jan.","feb.","mrt.","apr.","mei","jun.","jul.","aug.","sep.","okt.","nov.","dec."],longDay:["zondag","maandag","dinsdag","woensdag","donderdag","vrijdag","zaterdag"],longMonth:["januari","februari","maart","april","mei","juni","juli","augustus","september","oktober","november","december"]},time:{timeSeparator:":",amPm:["AM","PM"]}},nl_BE:{date:{dateSeparator:"/"},time:{}},nl_NL:{date:{},time:{}},nn:{date:{dateSeparator:".",era:["f.Kr.","e.Kr."],eraAbbr:["f.Kr.","e.Kr."],shortDay:["sÃ¸.","mÃ¥.","ty.","on.","to.","fr.","la."],shortMonth:["jan","feb","mar","apr","mai","jun","jul","aug","sep","okt","nov","des"],longDay:["sÃ¸ndag","mÃ¥ndag","tysdag","onsdag","torsdag","fredag","laurdag"],longMonth:["januar","februar","mars","april","mai","juni","juli","august","september","oktober","november","desember"]},time:{timeSeparator:".",amPm:["formiddag","ettermiddag"]}},nn_NO:{date:{},time:{}},pa:{date:{dateSeparator:"/",era:["à¨à¨¸à¨¾à¨ªà©à¨°à¨µ","à¨¸à©°à¨¨"],eraAbbr:["BCE","CE"],shortDay:["à¨à¨¤.","à¨¸à©à¨®.","à¨®à©°à¨à¨².","à¨¬à©à¨§.","à¨µà©à¨°.","à¨¸à¨¼à©à¨à¨°.","à¨¸à¨¼à¨¨à©."],shortMonth:["à¨à¨¨à¨µà¨°à©","à¨«à¨¼à¨°à¨µà¨°à©","à¨®à¨¾à¨°à¨","à¨à¨ªà©à¨°à©à¨²","à¨®à¨","à¨à©à¨¨","à¨à©à¨²à¨¾à¨","à¨à¨à¨¸à¨¤","à¨¸à¨¤à©°à¨¬à¨°","à¨à¨à¨¤à©à¨¬à¨°","à¨¨à¨µà©°à¨¬à¨°","à¨¦à¨¸à©°à¨¬à¨°"],longDay:["à¨à¨¤à¨µà¨¾à¨°","à¨¸à©à¨®à¨µà¨¾à¨°","à¨®à©°à¨à¨²à¨µà¨¾à¨°","à¨¬à©à¨§à¨µà¨¾à¨°","à¨µà©à¨°à¨µà¨¾à¨°","à¨¸à¨¼à©à©±à¨à¨°à¨µà¨¾à¨°","à¨¸à¨¼à¨¨à©à¨à¨°à¨µà¨¾à¨°"],longMonth:["à¨à¨¨à¨µà¨°à©","à¨«à¨¼à¨°à¨µà¨°à©","à¨®à¨¾à¨°à¨","à¨à¨ªà©à¨°à©à¨²","à¨®à¨","à¨à©à¨¨","à¨à©à¨²à¨¾à¨","à¨à¨à¨¸à¨¤","à¨¸à¨¤à©°à¨¬à¨°","à¨à¨à¨¤à©à¨¬à¨°","à¨¨à¨µà©°à¨¬à¨°","à¨¦à¨¸à©°à¨¬à¨°"]},time:{timeSeparator:":",amPm:["à¨¸à¨µà©à¨°à©","à¨¸à¨¼à¨¾à¨®"]}},pa_IN:{date:{},time:{}},pl:{date:{dateSeparator:"-",era:["p.n.e.","n.e."],eraAbbr:["p.n.e.","n.e."],shortDay:["niedz.","pon.","wt.","År.","czw.","pt.","sob."],shortMonth:["sty","lut","mar","kwi","maj","cze","lip","sie","wrz","paÅº","lis","gru"],longDay:["niedziela","poniedziaÅek","wtorek","Åroda","czwartek","piÄtek","sobota"],longMonth:["stycznia","lutego","marca","kwietnia","maja","czerwca","lipca","sierpnia","wrzeÅnia","paÅºdziernika","listopada","grudnia"]},time:{timeSeparator:":",amPm:["AM","PM"]}},pl_PL:{date:{},time:{}},pt:{date:{dateSeparator:"/",era:["Antes de Cristo","Ano do Senhor"],eraAbbr:["a.C.","d.C."],shortDay:["dom","seg","ter","qua","qui","sex","sÃ¡b"],shortMonth:["jan","fev","mar","abr","mai","jun","jul","ago","set","out","nov","dez"],longDay:["domingo","segunda-feira","terÃ§a-feira","quarta-feira","quinta-feira","sexta-feira","sÃ¡bado"],longMonth:["janeiro","fevereiro","marÃ§o","abril","maio","junho","julho","agosto","setembro","outubro","novembro","dezembro"]},time:{timeSeparator:":",amPm:["AM","PM"]}},pt_BR:{date:{},time:{}},pt_PT:{date:{shortMonth:["Jan","Fev","Mar","Abr","Mai","Jun","Jul","Ago","Set","Out","Nov","Dez"],longMonth:["Janeiro","Fevereiro","MarÃ§o","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"]},time:{amPm:["Antes do meio-dia","Depois do meio-dia"]}},ro:{date:{dateSeparator:".",era:["Ã®nainte de Hristos","dupÄ Hristos"],eraAbbr:["Ã®.Hr.","d.Hr."],shortDay:["Du","Lu","Ma","Mi","Jo","Vi","SÃ¢"],shortMonth:["ian.","feb.","mar.","apr.","mai","iun.","iul.","aug.","sept.","oct.","nov.","dec."],longDay:["duminicÄ","luni","marÈi","miercuri","joi","vineri","sÃ¢mbÄtÄ"],longMonth:["ianuarie","februarie","martie","aprilie","mai","iunie","iulie","august","septembrie","octombrie","noiembrie","decembrie"]},time:{timeSeparator:":",amPm:["AM","PM"]}},ro_RO:{date:{},time:{}},ru:{date:{dateSeparator:".",era:["Ð´Ð¾ Ð½.Ñ.","Ð½.Ñ."],eraAbbr:["Ð´Ð¾ Ð½.Ñ.","Ð½.Ñ."],shortDay:["ÐÑ","ÐÐ½","ÐÑ","Ð¡Ñ","Ð§Ñ","ÐÑ","Ð¡Ð±"],shortMonth:["ÑÐ½Ð².","ÑÐµÐ²Ñ.","Ð¼Ð°ÑÑÐ°","Ð°Ð¿Ñ.","Ð¼Ð°Ñ","Ð¸ÑÐ½Ñ","Ð¸ÑÐ»Ñ","Ð°Ð²Ð³.","ÑÐµÐ½Ñ.","Ð¾ÐºÑ.","Ð½Ð¾ÑÐ±.","Ð´ÐµÐº."],longDay:["Ð²Ð¾ÑÐºÑÐµÑÐµÐ½ÑÐµ","Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»ÑÐ½Ð¸Ðº","Ð²ÑÐ¾ÑÐ½Ð¸Ðº","ÑÑÐµÐ´Ð°","ÑÐµÑÐ²ÐµÑÐ³","Ð¿ÑÑÐ½Ð¸ÑÐ°","ÑÑÐ±Ð±Ð¾ÑÐ°"],longMonth:["ÑÐ½Ð²Ð°ÑÑ","ÑÐµÐ²ÑÐ°Ð»Ñ","Ð¼Ð°ÑÑÐ°","Ð°Ð¿ÑÐµÐ»Ñ","Ð¼Ð°Ñ","Ð¸ÑÐ½Ñ","Ð¸ÑÐ»Ñ","Ð°Ð²Ð³ÑÑÑÐ°","ÑÐµÐ½ÑÑÐ±ÑÑ","Ð¾ÐºÑÑÐ±ÑÑ","Ð½Ð¾ÑÐ±ÑÑ","Ð´ÐµÐºÐ°Ð±ÑÑ"]},time:{timeSeparator:":",amPm:["AM","PM"]}},ru_RU:{date:{},time:{}},se:{date:{dateSeparator:"-",era:["ovdal Kristtusa","maÅÅel Kristtusa"],eraAbbr:["BCE","CE"],eraNarrow:["o.Kr.","m.Kr."],shortDay:["1","2","3","4","5","6","7"],shortMonth:["1","2","3","4","5","6","7","8","9","10","11","12"],longDay:["1","2","3","4","5","6","7"],longMonth:["1","2","3","4","5","6","7","8","9","10","11","12"]},time:{timeSeparator:":",amPm:["AM","PM"]}},se_NO:{date:{},time:{}},sk:{date:{dateSeparator:".",eraAbbr:["pred n.l.","n.l."],shortDay:["ne","po","ut","st","Å¡t","pi","so"],shortMonth:["jan","feb","mar","apr","mÃ¡j","jÃºn","jÃºl","aug","sep","okt","nov","dec"],longDay:["nedeÄ¾a","pondelok","utorok","streda","Å¡tvrtok","piatok","sobota"],longMonth:["januÃ¡ra","februÃ¡ra","marca","aprÃ­la","mÃ¡ja","jÃºna","jÃºla","augusta","septembra","oktÃ³bra","novembra","decembra"]},time:{timeSeparator:":",amPm:["dopoludnia","popoludnÃ­"]}},sk_SK:{date:{},time:{}},sl:{date:{dateSeparator:". ",era:["pred naÅ¡im Å¡tetjem","naÅ¡e Å¡tetje"],eraAbbr:["pr. n. Å¡t.","po Kr."],shortDay:["ned","pon","tor","sre","Äet","pet","sob"],shortMonth:["jan","feb","mar","apr","maj","jun","jul","avg","sep","okt","nov","dec"],longDay:["nedelja","ponedeljek","torek","sreda","Äetrtek","petek","sobota"],longMonth:["januar","februar","marec","april","maj","junij","julij","avgust","september","oktober","november","december"]},time:{timeSeparator:":",amPm:["dop.","pop."]}},sl_SI:{date:{},time:{}},sq:{date:{dateSeparator:"-",eraAbbr:["p.e.r.","n.e.r."],shortDay:["Die","HÃ«n","Mar","MÃ«r","Enj","Pre","Sht"],shortMonth:["Jan","Shk","Mar","Pri","Maj","Qer","Kor","Gsh","Sht","Tet","NÃ«n","Dhj"],longDay:["e diel","e hÃ«nÃ«","e martÃ«","e mÃ«rkurÃ«","e enjte","e premte","e shtunÃ«"],longMonth:["janar","shkurt","mars","prill","maj","qershor","korrik","gusht","shtator","tetor","nÃ«ntor","dhjetor"]},time:{timeSeparator:".",amPm:["PD","MD"]}},sq_AL:{date:{},time:{}},sr:{date:{dateSeparator:".",era:["ÐÑÐµ Ð½Ð¾Ð²Ðµ ÐµÑÐµ","ÐÐ¾Ð²Ðµ ÐµÑÐµ"],eraAbbr:["Ð¿. Ð½. Ðµ.","Ð½. Ðµ"],eraNarrow:["Ð¿.Ð½.Ðµ.","Ð½.Ðµ."],shortDay:["Ð½ÐµÐ´","Ð¿Ð¾Ð½","ÑÑÐ¾","ÑÑÐµ","ÑÐµÑ","Ð¿ÐµÑ","ÑÑÐ±"],shortMonth:["ÑÐ°Ð½","ÑÐµÐ±","Ð¼Ð°Ñ","Ð°Ð¿Ñ","Ð¼Ð°Ñ","ÑÑÐ½","ÑÑÐ»","Ð°Ð²Ð³","ÑÐµÐ¿","Ð¾ÐºÑ","Ð½Ð¾Ð²","Ð´ÐµÑ"],longDay:["Ð½ÐµÐ´ÐµÑÐ°","Ð¿Ð¾Ð½ÐµÐ´ÐµÑÐ°Ðº","ÑÑÐ¾ÑÐ°Ðº","ÑÑÐµÐ´Ð°","ÑÐµÑÐ²ÑÑÐ°Ðº","Ð¿ÐµÑÐ°Ðº","ÑÑÐ±Ð¾ÑÐ°"],longMonth:["ÑÐ°Ð½ÑÐ°Ñ","ÑÐµÐ±ÑÑÐ°Ñ","Ð¼Ð°ÑÑ","Ð°Ð¿ÑÐ¸Ð»","Ð¼Ð°Ñ","ÑÑÐ½","ÑÑÐ»","Ð°Ð²Ð³ÑÑÑ","ÑÐµÐ¿ÑÐµÐ¼Ð±Ð°Ñ","Ð¾ÐºÑÐ¾Ð±Ð°Ñ","Ð½Ð¾Ð²ÐµÐ¼Ð±Ð°Ñ","Ð´ÐµÑÐµÐ¼Ð±Ð°Ñ"]},time:{timeSeparator:".",amPm:["Ð¿ÑÐµ Ð¿Ð¾Ð´Ð½Ðµ","Ð¿Ð¾Ð¿Ð¾Ð´Ð½Ðµ"]}},sr_BA:{date:{},time:{}},sr_CS:{date:{},time:{}},sv:{date:{dateSeparator:"-",era:["fÃ¶re Kristus","efter Kristus"],eraAbbr:["f.Kr.","e.Kr."],shortDay:["sÃ¶n","mÃ¥n","tis","ons","tors","fre","lÃ¶r"],shortMonth:["jan","feb","mar","apr","maj","jun","jul","aug","sep","okt","nov","dec"],longDay:["sÃ¶ndag","mÃ¥ndag","tisdag","onsdag","torsdag","fredag","lÃ¶rdag"],longMonth:["januari","februari","mars","april","maj","juni","juli","augusti","september","oktober","november","december"]},time:{timeSeparator:".",amPm:["fm","em"]}},sv_FI:{date:{},time:{}},sv_SE:{date:{},time:{}},sw:{date:{dateSeparator:"-",era:["Kabla ya Kristo","Baada ya Kristo"],eraAbbr:["KK","BK"],shortDay:["Jpi","Jtt","Jnn","Jtn","Alh","Iju","Jmo"],shortMonth:["Jan","Feb","Mac","Apr","Mei","Jun","Jul","Ago","Sep","Okt","Nov","Des"],longDay:["Jumapili","Jumatatu","Jumanne","Jumatano","Alhamisi","Ijumaa","Jumamosi"],longMonth:["Januari","Februari","Machi","Aprili","Mei","Juni","Julai","Agosti","Septemba","Oktoba","Novemba","Desemba"]},time:{timeSeparator:":",amPm:["AM","PM"]}},sw_KE:{date:{},time:{}},syr:{date:{dateSeparator:"-",shortDay:["1","2","3","4","5","6","7"],shortMonth:["ÜÜ¢ Ü","Ü«ÜÜ","ÜÜÜª","Ü¢ÜÜ£Ü¢","ÜÜÜª","ÜÜÜÜªÜ¢","Ü¬Ü¡ÜÜ","ÜÜ","ÜÜÜ ÜÜ ","Ü¬Ü« Ü","Ü¬Ü« Ü","ÜÜ¢ Ü"],longDay:["1","2","3","4","5","6","7"],longMonth:["ÜÜ¢ Ü","Ü«ÜÜ","ÜÜÜª","Ü¢ÜÜ£Ü¢","ÜÜÜª","ÜÜÜÜªÜ¢","Ü¬Ü¡ÜÜ","ÜÜ","ÜÜÜ ÜÜ ","Ü¬Ü« Ü","Ü¬Ü« Ü","ÜÜ¢ Ü"]},time:{timeSeparator:":",amPm:["AM","PM"]}},syr_SY:{date:{},time:{}},ta:{date:{dateSeparator:"-",era:["à®à®¿à®±à®¿à®¸à¯à®¤à¯à®µà¯à®à¯à®à¯ à®®à¯à®©à¯","à®à®©à¯ à®à¯à®®à®¿à®©à®¿"],eraAbbr:["à®à®¿à®®à¯","à®à®¿à®ªà®¿"],shortDay:["à®à®¾","à®¤à®¿","à®à¯","à®ªà¯","à®µà®¿","à®µà¯","à®"],shortMonth:["à®à®©.","à®ªà®¿à®ªà¯.","à®®à®¾à®°à¯.","à®à®ªà¯.","à®®à¯","à®à¯à®©à¯","à®à¯à®²à¯","à®à®.","à®à¯à®ªà¯.","à®à®à¯.","à®¨à®µ.","à®à®¿à®."],longDay:["à®à®¾à®¯à®¿à®±à¯","à®¤à®¿à®à¯à®à®³à¯","à®à¯à®µà¯à®µà®¾à®¯à¯","à®ªà¯à®¤à®©à¯","à®µà®¿à®¯à®¾à®´à®©à¯","à®µà¯à®³à¯à®³à®¿","à®à®©à®¿"],longMonth:["à®à®©à®µà®°à®¿","à®ªà®¿à®ªà¯à®°à®µà®°à®¿","à®®à®¾à®°à¯à®à¯","à®à®ªà¯à®°à®²à¯","à®®à¯","à®à¯à®©à¯","à®à¯à®²à¯","à®à®à®¸à¯à®à¯","à®à¯à®ªà¯à®à®®à¯à®ªà®°à¯","à®à®à¯à®à¯à®ªà®°à¯","à®¨à®µà®®à¯à®ªà®°à¯","à®à®¿à®à®®à¯à®ªà®°à¯"]},time:{timeSeparator:":",amPm:["am","pm"]}},ta_IN:{date:{},time:{}},te:{date:{dateSeparator:"-",era:["à°à°¸à°¾à°ªà±à°°à±à°µ.","à°¸à°¨à±."],eraAbbr:["BCE","CE"],shortDay:["à°à°¦à°¿","à°¸à±à°®","à°®à°à°à°³","à°¬à±à°§","à°à±à°°à±","à°¶à±à°à±à°°","à°¶à°¨à°¿"],shortMonth:["à°à°¨à°µà°°à°¿","à°«à°¿à°¬à±à°°à°µà°°à°¿","à°®à°¾à°°à±à°à°¿","à°à°ªà±à°°à°¿à°²à±","à°®à±","à°à±à°¨à±","à°à±à°²à±","à°à°à°¸à±à°à±","à°¸à±à°ªà±à°à±à°à°¬à°°à±","à°à°à±à°à±à°¬à°°à±","à°¨à°µà°à°¬à°°à±","à°¡à°¿à°¸à±à°à°¬à°°à±"],longDay:["à°à°¦à°¿à°µà°¾à°°à°","à°¸à±à°®à°µà°¾à°°à°","à°®à°à°à°³à°µà°¾à°°à°","à°¬à±à°§à°µà°¾à°°à°","à°à±à°°à±à°µà°¾à°°à°","à°¶à±à°à±à°°à°µà°¾à°°à°","à°¶à°¨à°¿à°µà°¾à°°à°"],longMonth:["à°à°¨à°µà°°à°¿","à°«à°¿à°¬à±à°°à°µà°°à°¿","à°®à°¾à°°à±à°à°¿","à°à°ªà±à°°à°¿à°²à±","à°®à±","à°à±à°¨à±","à°à±à°²à±","à°à°à°¸à±à°à±","à°¸à±à°ªà±à°à±à°à°¬à°°à±","à°à°à±à°à±à°¬à°°à±","à°¨à°µà°à°¬à°°à±","à°¡à°¿à°¸à±à°à°¬à°°à±"]},time:{timeSeparator:":",amPm:["am","pm"]}},te_IN:{date:{},time:{}},th:{date:{dateSeparator:"/",era:["à¸à¸µà¸à¹à¸­à¸à¸à¸£à¸´à¸ªà¸à¹à¸¨à¸±à¸à¸£à¸²à¸","à¸à¸£à¸´à¸ªà¸à¹à¸¨à¸±à¸à¸£à¸²à¸"],eraAbbr:["à¸à¸µà¸à¹à¸­à¸ à¸.à¸¨.","à¸.à¸¨."],eraNarrow:["à¸à¹à¸­à¸ à¸.à¸¨."],shortDay:["à¸­à¸².","à¸.","à¸­.","à¸.","à¸à¸¤.","à¸¨.","à¸ª."],shortMonth:["à¸¡.à¸.","à¸.à¸.","à¸¡à¸µ.à¸.","à¹à¸¡.à¸¢.","à¸.à¸.","à¸¡à¸´.à¸¢.","à¸.à¸.","à¸ª.à¸.","à¸.à¸¢.","à¸.à¸.","à¸.à¸¢.","à¸.à¸."],longDay:["à¸§à¸±à¸à¸­à¸²à¸à¸´à¸à¸¢à¹","à¸§à¸±à¸à¸à¸±à¸à¸à¸£à¹","à¸§à¸±à¸à¸­à¸±à¸à¸à¸²à¸£","à¸§à¸±à¸à¸à¸¸à¸","à¸§à¸±à¸à¸à¸¤à¸«à¸±à¸ªà¸à¸à¸µ","à¸§à¸±à¸à¸¨à¸¸à¸à¸£à¹","à¸§à¸±à¸à¹à¸ªà¸²à¸£à¹"],longMonth:["à¸¡à¸à¸£à¸²à¸à¸¡","à¸à¸¸à¸¡à¸ à¸²à¸à¸±à¸à¸à¹","à¸¡à¸µà¸à¸²à¸à¸¡","à¹à¸¡à¸©à¸²à¸¢à¸","à¸à¸¤à¸©à¸ à¸²à¸à¸¡","à¸¡à¸´à¸à¸¸à¸à¸²à¸¢à¸","à¸à¸£à¸à¸à¸²à¸à¸¡","à¸ªà¸´à¸à¸«à¸²à¸à¸¡","à¸à¸±à¸à¸¢à¸²à¸¢à¸","à¸à¸¸à¸¥à¸²à¸à¸¡","à¸à¸¤à¸¨à¸à¸´à¸à¸²à¸¢à¸","à¸à¸±à¸à¸§à¸²à¸à¸¡"]},time:{timeSeparator:":",amPm:["à¸à¹à¸­à¸à¹à¸à¸µà¹à¸¢à¸","à¸«à¸¥à¸±à¸à¹à¸à¸µà¹à¸¢à¸"]}},th_TH:{date:{},time:{}},tn:{date:{dateSeparator:"-",era:["BC","AD"],eraAbbr:["BCE","CE"],shortDay:["1","2","3","4","5","6","7"],shortMonth:["1","2","3","4","5","6","7","8","9","10","11","12"],longDay:["1","2","3","4","5","6","7"],longMonth:["1","2","3","4","5","6","7","8","9","10","11","12"]},time:{timeSeparator:":",amPm:["AM","PM"]}},tn_ZA:{date:{},time:{}},tr:{date:{dateSeparator:".",era:["Milattan Ãnce","Milattan Sonra"],eraAbbr:["MÃ","MS"],shortDay:["Paz","Pzt","Sal","Ãar","Per","Cum","Cmt"],shortMonth:["Oca","Åub","Mar","Nis","May","Haz","Tem","AÄu","Eyl","Eki","Kas","Ara"],longDay:["Pazar","Pazartesi","SalÄ±","ÃarÅamba","PerÅembe","Cuma","Cumartesi"],longMonth:["Ocak","Åubat","Mart","Nisan","MayÄ±s","Haziran","Temmuz","AÄustos","EylÃ¼l","Ekim","KasÄ±m","AralÄ±k"]},time:{timeSeparator:":",amPm:["AM","PM"]}},tr_TR:{date:{},time:{}},uk:{date:{dateSeparator:".",era:["Ð´Ð¾ Ð½Ð°ÑÐ¾Ñ ÐµÑÐ¸","Ð½Ð°ÑÐ¾Ñ ÐµÑÐ¸"],eraAbbr:["Ð´Ð¾ Ð½.Ðµ.","Ð½.Ðµ."],shortDay:["ÐÐ´","ÐÐ½","ÐÑ","Ð¡Ñ","Ð§Ñ","ÐÑ","Ð¡Ð±"],shortMonth:["ÑÑÑ.","Ð»ÑÑ.","Ð±ÐµÑ.","ÐºÐ²ÑÑ.","ÑÑÐ°Ð².","ÑÐµÑÐ².","Ð»Ð¸Ð¿.","ÑÐµÑÐ¿.","Ð²ÐµÑ.","Ð¶Ð¾Ð²Ñ.","Ð»Ð¸ÑÑ.","Ð³ÑÑÐ´."],longDay:["ÐÐµÐ´ÑÐ»Ñ","ÐÐ¾Ð½ÐµÐ´ÑÐ»Ð¾Ðº","ÐÑÐ²ÑÐ¾ÑÐ¾Ðº","Ð¡ÐµÑÐµÐ´Ð°","Ð§ÐµÑÐ²ÐµÑ","ÐÊ¼ÑÑÐ½Ð¸ÑÑ","Ð¡ÑÐ±Ð¾ÑÐ°"],longMonth:["ÑÑÑÐ½Ñ","Ð»ÑÑÐ¾Ð³Ð¾","Ð±ÐµÑÐµÐ·Ð½Ñ","ÐºÐ²ÑÑÐ½Ñ","ÑÑÐ°Ð²Ð½Ñ","ÑÐµÑÐ²Ð½Ñ","Ð»Ð¸Ð¿Ð½Ñ","ÑÐµÑÐ¿Ð½Ñ","Ð²ÐµÑÐµÑÐ½Ñ","Ð¶Ð¾Ð²ÑÐ½Ñ","Ð»Ð¸ÑÑÐ¾Ð¿Ð°Ð´Ð°","Ð³ÑÑÐ´Ð½Ñ"]},time:{timeSeparator:":",amPm:["Ð´Ð¿","Ð¿Ð¿"]}},uk_UA:{date:{},time:{}},uz:{date:{dateSeparator:"-",eraAbbr:["BCE","CE"],shortDay:["1","2","3","4","5","6","7"],shortMonth:["1","2","3","4","5","6","7","8","9","10","11","12"],longDay:["1","2","3","4","5","6","7"],longMonth:["1","2","3","4","5","6","7","8","9","10","11","12"]},time:{timeSeparator:":",amPm:["AM","PM"]}},uz_UZ:{date:{},time:{}},vi:{date:{dateSeparator:"/",eraAbbr:["tr. CN","sau CN"],shortDay:["CN","Th 2","Th 3","Th 4","Th 5","Th 6","Th 7"],shortMonth:["thg 1","thg 2","thg 3","thg 4","thg 5","thg 6","thg 7","thg 8","thg 9","thg 10","thg 11","thg 12"],longDay:["Chá»§ nháº­t","Thá»© hai","Thá»© ba","Thá»© tÆ°","Thá»© nÄm","Thá»© sÃ¡u","Thá»© báº£y"],longMonth:["thÃ¡ng má»t","thÃ¡ng hai","thÃ¡ng ba","thÃ¡ng tÆ°","thÃ¡ng nÄm","thÃ¡ng sÃ¡u","thÃ¡ng báº£y","thÃ¡ng tÃ¡m","thÃ¡ng chÃ­n","thÃ¡ng mÆ°á»i","thÃ¡ng mÆ°á»i má»t","thÃ¡ng mÆ°á»i hai"]},time:{timeSeparator:":",amPm:["SA","CH"]}},vi_VN:{date:{},time:{}},xh:{date:{dateSeparator:"-",era:["BC","umnyaka wokuzalwa kukaYesu"],eraAbbr:["BCE","CE"],shortDay:["1","2","3","4","5","6","7"],shortMonth:["1","2","3","4","5","6","7","8","9","10","11","12"],longDay:["1","2","3","4","5","6","7"],longMonth:["1","2","3","4","5","6","7","8","9","10","11","12"]},time:{timeSeparator:":",amPm:["AM","PM"]}},xh_ZA:{date:{},time:{}},zh:{date:{dateSeparator:"-",era:["å¬åå","å¬å"],eraAbbr:["å¬åå","å¬å"],shortDay:["å¨æ¥","å¨ä¸","å¨äº","å¨ä¸","å¨å","å¨äº","å¨å­"],shortMonth:["1æ","2æ","3æ","4æ","5æ","6æ","7æ","8æ","9æ","10æ","11æ","12æ"],longDay:["æææ¥","ææä¸","ææäº","ææä¸","ææå","ææäº","ææå­"],longMonth:["1æ","2æ","3æ","4æ","5æ","6æ","7æ","8æ","9æ","10æ","11æ","12æ"]},time:{timeSeparator:":",amPm:["ä¸å","ä¸å"]}},zh_CN:{date:{},time:{}},zh_HK:{date:{},time:{}},zh_MO:{date:{},time:{}},zh_SG:{date:{},time:{}},zh_TW:{date:{},time:{}},zu:{date:{dateSeparator:"-",eraAbbr:["BC","AD"],shortDay:["Son","Mso","Bil","Tha","Sin","Hla","Mgq"],shortMonth:["Jan","Feb","Mas","Apr","Mey","Jun","Jul","Aga","Sep","Okt","Nov","Dis"],longDay:["Sonto","Msombuluko","Lwesibili","Lwesithathu","uLwesine","Lwesihlanu","Mgqibelo"],longMonth:["Januwari","Februwari","Mashi","Apreli","Meyi","Juni","Julayi","Agasti","Septhemba","Okthoba","Novemba","Disemba"]},time:{timeSeparator:":",amPm:["AM","PM"]}},zu_ZA:{date:{},time:{}}};a.formatExist=function(b,c){return(b&&c&&a.DEFAULT_FORMAT_STRING[b]&&a.DEFAULT_FORMAT_STRING[b][c])};a.getDefaultDateFormat=function(b,c){return a.DEFAULT_FORMAT_STRING[b][c]};a.getShortDay=function(b){if(b){if(a.resourceExist(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_SHORT_DAY)){return a.getDateResource(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_SHORT_DAY)}else{return null}}return a.getAppropriateDateResource(a.KEY_TYPE_DATE,a.KEY_TOKEN_SHORT_DAY)};a.getLongDay=function(b){if(b){if(a.resourceExist(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_LONG_DAY)){return a.getDateResource(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_LONG_DAY)}else{return null}}return a.getAppropriateDateResource(a.KEY_TYPE_DATE,a.KEY_TOKEN_LONG_DAY)};a.getShortMonth=function(b){if(b){if(a.resourceExist(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_SHORT_MONTH)){return a.getDateResource(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_SHORT_MONTH)}else{return null}}return a.getAppropriateDateResource(a.KEY_TYPE_DATE,a.KEY_TOKEN_SHORT_MONTH)};a.getLongMonth=function(b){if(b){if(a.resourceExist(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_LONG_MONTH)){return a.getDateResource(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_LONG_MONTH)}else{return null}}return a.getAppropriateDateResource(a.KEY_TYPE_DATE,a.KEY_TOKEN_LONG_MONTH)};a.getDateSeparator=function(b){if(b){if(a.resourceExist(b,a.KEY_TYPE_DATE,a.KEY_DATE_SEPARATOR)){return a.getDateResource(b,a.KEY_TYPE_DATE,a.KEY_DATE_SEPARATOR).toString()}else{return null}}return a.getAppropriateDateResource(a.KEY_TYPE_DATE,a.KEY_DATE_SEPARATOR).toString()};a.getTimeSeparator=function(b){if(b){if(a.resourceExist(b,a.KEY_TYPE_TIME,a.KEY_TIME_SEPARATOR)){return a.getDateResource(b,a.KEY_TYPE_TIME,a.KEY_TIME_SEPARATOR).toString()}else{return null}}return a.getAppropriateDateResource(a.KEY_TYPE_TIME,a.KEY_TIME_SEPARATOR).toString()};a.getAmPmToken=function(b){if(b){if(a.resourceExist(b,a.KEY_TYPE_TIME,a.KEY_TOKEN_AM_PM)){return a.getDateResource(b,a.KEY_TYPE_TIME,a.KEY_TOKEN_AM_PM)}else{return null}}return a.getAppropriateDateResource(a.KEY_TYPE_TIME,a.KEY_TOKEN_AM_PM)};a.getAbbrevEraString=function(b){if(b){if(a.resourceExist(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_ABBREV_ERA)){return a.getDateResource(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_ABBREV_ERA)}else{return null}}return a.getAppropriateDateResource(a.KEY_TYPE_DATE,a.KEY_TOKEN_ABBREV_ERA)};a.getDefaultShorDateFormat=function(b){if(b){if(a.formatExist(b,a.FORMAT_TYPE_SHORTDATE)){return a.getDefaultDateFormat(b,a.FORMAT_TYPE_SHORTDATE).toString()}else{return""}}return a.getAppropriateDateFormat(a.FORMAT_TYPE_SHORTDATE).toString()};a.getDefaultLongDateFormat=function(b){if(b){if(a.formatExist(b,a.FORMAT_TYPE_LONGDATE)){return a.getDefaultDateFormat(b,a.FORMAT_TYPE_LONGDATE).toString()}else{return null}}return a.getAppropriateDateFormat(a.FORMAT_TYPE_LONGDATE)};a.getDefaultDateTimeFormat=function(b){if(b){if(a.formatExist(b,a.FORMAT_TYPE_DATE_TIME)){return a.getDefaultDateFormat(b,a.FORMAT_TYPE_DATE_TIME).toString()}else{return null}}return a.getAppropriateDateFormat(a.FORMAT_TYPE_DATE_TIME).toString()};a.getDefaultTimeFormat=function(b){if(b){if(a.formatExist(b,a.FORMAT_TYPE_TIME)){return a.getDefaultDateFormat(b,a.FORMAT_TYPE_TIME).toString()}else{return null}}return a.getAppropriateDateFormat(a.FORMAT_TYPE_TIME).toString()};a.getAppropriateDateFormat=function(d){var e=sap.common.globalization.GlobalizationPreference.getInstance().pvl();if(a.formatExist(e,d)){return a.getDefaultDateFormat(e,d).toString()}var c=sap.common.globalization.GlobalizationPreference.getInstance().pvlIsoLanguageCode();if(a.formatExist(c,d)){return a.getDefaultDateFormat(c,d).toString()}var f=sap.common.globalization.GlobalizationPreference.getInstance().documentLocale();if(a.formatExist(f,d)){return a.getDefaultDateFormat(f,d).toString()}var b=sap.common.globalization.GlobalizationPreference.getInstance().documentIsoLanguageCode();if(a.formatExist(b,d)){return a.getDefaultDateFormat(b,d).toString()}return a.getDefaultDateFormat("en",d).toString()};a.getAppropriateDateResource=function(e,b){var f=sap.common.globalization.GlobalizationPreference.getInstance().pvl();if(a.resourceExist(f,e,b)){return a.getDateResource(f,e,b)}var d=sap.common.globalization.GlobalizationPreference.getInstance().pvlIsoLanguageCode();if(a.resourceExist(d,e,b)){return a.getDateResource(d,e,b)}var g=sap.common.globalization.GlobalizationPreference.getInstance().documentLocale();if(a.resourceExist(g,e,b)){return a.getDateResource(g,e,b)}var c=sap.common.globalization.GlobalizationPreference.getInstance().documentIsoLanguageCode();if(a.resourceExist(c,e,b)){return a.getDateResource(c,e,b)}return a.getDateResource("en",e,b)};a.resourceExist=function(b,d,c){return(b&&d&&c&&a.RESOURCE_MAP[b]&&a.RESOURCE_MAP[b][d]&&a.RESOURCE_MAP[b][d][c])};a.getDateResource=function(b,d,c){return a.RESOURCE_MAP[b][d][c]}})();(function(){sap.common.globalization.declare("sap.common.globalization.GlobalizationNumericUtil");sap.common.globalization.GlobalizationNumericUtil=function(){this.__className="sap.common.globalization.GlobalizationNumericUtil"};sap.common.globalization.GlobalizationNumericUtil.isTwoDigitGroupingCountry=function(a){switch(a){case"bn":case"bn_IN":case"en_IN":case"gu":case"gu_IN":case"hi":case"hi_IN":case"kn":case"kn_IN":case"kok":case"kok_IN":case"ml":case"ml_IN":case"mr":case"mr_IN":case"pa":case"pa_IN":case"ta":case"ta_IN":case"te":case"te_IN":return true;default:return false}}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FLocalization");sap.common.globalization.require("sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl");sap.common.globalization.require("sap.common.globalization.defaultFormat.DateDisplayLocaleInfoImpl");sap.common.globalization.require("sap.common.globalization.defaultFormat.NumericDisplayLocaleInfoImpl");sap.common.globalization.require("sap.common.globalization.defaultFormat.NumericParseLocaleInfoImpl");sap.common.globalization.require("sap.common.globalization.GlobalizationPreference");sap.common.globalization.require("sap.common.globalization.utils.StringUtil");sap.common.globalization.require("sap.common.globalization.GlobalizationDateConstant");sap.common.globalization.require("sap.common.globalization.GlobalizationNumericConstant");sap.common.globalization.require("sap.common.globalization.NumericFormatManager");sap.common.globalization.numericFormat.FLocalization=function(){this.__className="sap.common.globalization.numericFormat.FLocalization";this._setDisplayLocaleInfo();this._numericParseLocaleInfo=null;this._numericDisplayLocaleInfo=null;this._dateParseLocaleInfo=null;this._dateDisplayLocaleInfo=null};var a=sap.common.globalization.numericFormat.FLocalization;a._defaultLocale="en";a._DayStrings=null;a._shortDayStrings=null;a._MonthStrings=null;a._shortMonthStrings=null;a._DateTimeCodes=null;a._NumericStrings=null;a._DateTimeStrings=null;a._CurrencySymbol=null;a._SAPCurrencySymbol=null;a._SAPDateString=null;a._SAPTimeString=null;a._SAPThousandsSeparator=null;a._SAPDecimalSeparator=null;a._SAPLongDay=null;a._SAPShortDay=null;a._SAPLongMonth=null;a._SAPShortMonth=null;a._AmPms=null;a._singleton=null;sap.common.globalization.numericFormat.FLocalization.prototype.replaceNBSP=function(e){if(e){var f="";var c=160;for(var d=0;d<e.length;++d){if(e.charCodeAt(d)==c){f+=" "}else{f+=e.charAt(d)}}e=f}return e};a.getInstance=function(){if(!a._singleton){a._initStrings();a._initializePvlDateStrings();a._initSAPGlobilizationStrings();a._singleton=new sap.common.globalization.numericFormat.FLocalization();a._singleton.IMSABBREVDAYNAME1=a._shortDayStrings.en[1]}return a._singleton};a.resetInstance=function(){a._resetAllStaticVars();a._initStrings();a._initializePvlDateStrings();a._initSAPGlobilizationStrings();a._singleton=new sap.common.globalization.numericFormat.FLocalization();a._singleton.IMSABBREVDAYNAME1=a._shortDayStrings.en[1]};var b={monthStrings:"_MonthStrings",shortMonthStrings:"_shortMonthStrings",dayStrings:"_DayStrings",shortDayStrings:"_shortDayStrings",dateTimeCodes:"_DateTimeCodes",numericStrings:"_NumericStrings",dateTimeStrings:"_DateTimeStrings",currencySymbol:"_CurrencySymbol",amPms:"_AmPms"};a.prototype._setDisplayLocaleInfo=function(){this.IMDateSeparator=a._DateTimeStrings.en[1];this.IMDayCode=a._DateTimeCodes.en[5];this.IMDecimalSeparator=a._NumericStrings.en[1];this.IMGeneralFormatName="General";this.IMHourCode=a._DateTimeCodes.en[3];this.IMMinuteCode=a._DateTimeCodes.en[1];this.IMMonthCode=a._DateTimeCodes.en[4];this.IMSABBREVDAYNAME1=a._shortDayStrings.en[1];this.IMSABBREVDAYNAME2=a._shortDayStrings.en[2];this.IMSABBREVDAYNAME3=a._shortDayStrings.en[3];this.IMSABBREVDAYNAME4=a._shortDayStrings.en[4];this.IMSABBREVDAYNAME5=a._shortDayStrings.en[5];this.IMSABBREVDAYNAME6=a._shortDayStrings.en[6];this.IMSABBREVDAYNAME7=a._shortDayStrings.en[7];this.IMSABBREVMONTHNAME1=a._shortMonthStrings.en[1];this.IMSABBREVMONTHNAME10=a._shortMonthStrings.en[10];this.IMSABBREVMONTHNAME11=a._shortMonthStrings.en[11];this.IMSABBREVMONTHNAME12=a._shortMonthStrings.en[12];this.IMSABBREVMONTHNAME2=a._shortMonthStrings.en[2];this.IMSABBREVMONTHNAME3=a._shortMonthStrings.en[3];this.IMSABBREVMONTHNAME4=a._shortMonthStrings.en[4];this.IMSABBREVMONTHNAME5=a._shortMonthStrings.en[5];this.IMSABBREVMONTHNAME6=a._shortMonthStrings.en[6];this.IMSABBREVMONTHNAME7=a._shortMonthStrings.en[7];this.IMSABBREVMONTHNAME8=a._shortMonthStrings.en[8];this.IMSABBREVMONTHNAME9=a._shortMonthStrings.en[9];this.IMSDAYNAME1=a._DayStrings.en[1];this.IMSDAYNAME2=a._DayStrings.en[2];this.IMSDAYNAME3=a._DayStrings.en[3];this.IMSDAYNAME4=a._DayStrings.en[4];this.IMSDAYNAME5=a._DayStrings.en[5];this.IMSDAYNAME6=a._DayStrings.en[6];this.IMSDAYNAME7=a._DayStrings.en[7];this.IMSMONTHNAME1=a._MonthStrings.en[1];this.IMSMONTHNAME10=a._MonthStrings.en[10];this.IMSMONTHNAME11=a._MonthStrings.en[11];this.IMSMONTHNAME12=a._MonthStrings.en[12];this.IMSMONTHNAME2=a._MonthStrings.en[2];this.IMSMONTHNAME3=a._MonthStrings.en[3];this.IMSMONTHNAME4=a._MonthStrings.en[4];this.IMSMONTHNAME5=a._MonthStrings.en[5];this.IMSMONTHNAME6=a._MonthStrings.en[6];this.IMSMONTHNAME7=a._MonthStrings.en[7];this.IMSMONTHNAME8=a._MonthStrings.en[8];this.IMSMONTHNAME9=a._MonthStrings.en[9];this.IMSecondCode=a._DateTimeCodes.en[2];this.IMTimeSeparator=a._DateTimeStrings.en[2];this.IMYearCode=a._DateTimeCodes.en[6];this.IMCurrencySymbol=a._CurrencySymbol.en[1];this.SAPDateSeparator=a._SAPDateString;this.SAPTimeSeparator=a._SAPTimeString;this.SAPCurrencySymbol=a._SAPCurrencySymbol;this.SAPDecimalSeparator=a._SAPDecimalSeparator;this.SAPThousandsSeparator=a._SAPThousandsSeparator;this.SAPLongDay=a._SAPLongDay;this.SAPShortDay=a._SAPShortDay;this.SAPLongMonth=a._SAPLongMonth;this.SAPShortMonth=a._SAPShortMonth;this.IMAMTOKEN=a._AmPms.en[1];this.IMPMTOKEN=a._AmPms.en[2];this._IMThousandsSeparator=this.replaceNBSP(a._NumericStrings.en[2])};a.prototype.setCustomizedLocaleInfo=function(e){if(e){var d;for(d in b){if(e.hasOwnProperty(d)){var g=b[d];this._setCustomizedLocaleInfoByType(g,e[d])}}}else{var c=sap.common.globalization.GlobalizationDateConstant;var f=sap.common.globalization.GlobalizationNumericConstant;this._setCustomizedLocaleInfoByType(b.dayStrings,c.getLongDay());this._setCustomizedLocaleInfoByType(b.shortDayStrings,c.getShortDay());this._setCustomizedLocaleInfoByType(b.monthStrings,c.getLongMonth());this._setCustomizedLocaleInfoByType(b.shortMonthStrings,c.getShortMonth());this._setCustomizedLocaleInfoByType(b.amPms,c.getAmPmToken());this._setCustomizedLocaleInfoByType(b.dateTimeStrings,[c.getDateSeparator(),c.getTimeSeparator()]);this._setCustomizedLocaleInfoByType(b.numericStrings,[f.getDisplayDecimalSeparator(),f.getDisplayThousandSeparator()]);this._dateParseLocaleInfo=null;this._dateDisplayLocaleInfo=null;this._numericParseLocaleInfo=null;this._numericDisplayLocaleInfo=null;a._initializePvlDayStrings()}this._setDisplayLocaleInfo()};a.prototype._setCustomizedLocaleInfoByType=function(e,f){if(f&&f.length>0){var c;for(var d=0;d<f.length;d++){c=d+1;a[e]["en"][c]=f[d]}}};a._initStrings=function(){a._DayStrings={en:{1:"Monday",2:"Tuesday",3:"Wednesday",4:"Thursday",5:"Friday",6:"Saturday",7:"Sunday"}};a._shortDayStrings={en:{1:"Mon",2:"Tue",3:"Wed",4:"Thu",5:"Fri",6:"Sat",7:"Sun"}};a._MonthStrings={en:{1:"January",2:"February",3:"March",4:"April",5:"May",6:"June",7:"July",8:"August",9:"September",10:"October",11:"November",12:"December"}};a._shortMonthStrings={en:{1:"Jan",2:"Feb",3:"Mar",4:"Apr",5:"May",6:"Jun",7:"Jul",8:"Aug",9:"Sep",10:"Oct",11:"Nov",12:"Dec"}};a._DateTimeCodes={en:{1:"m",2:"s",3:"h",4:"M",5:"D",6:"Y"}};a._NumericStrings={en:{1:".",2:","}};a._DateTimeStrings={en:{1:"/",2:":"}};a._CurrencySymbol={en:{1:"$",2:"$"}};a._AmPms={en:{1:"AM",2:"PM"}}};a._initSAPGlobilizationStrings=function(){var d=sap.common.globalization.NumericFormatManager;var e=d.SAP_PARAMETERS["BICSWS_DECIMAL"];e=e?e:d.SAP_PARAMETERS["SAP_decimal"];var l=d.SAP_PARAMETERS["BICSWS_THOUSANDSEPARATOR"];l=l?l:d.SAP_PARAMETERS["SAP_thousandSeparator"];var f=d.SAP_PARAMETERS["BICSWS_MONTHSLONG"];f=f?f:d.SAP_PARAMETERS["SAP_monthsLong"];var g=d.SAP_PARAMETERS["BICSWS_MONTHSSHORT"];g=g?g:d.SAP_PARAMETERS["SAP_monthsShort"];var c=d.SAP_PARAMETERS["BICSWS_DAYSLONG"];c=c?c:d.SAP_PARAMETERS["SAP_daysLong"];var m=d.SAP_PARAMETERS["BICSWS_DAYSSHORT"];m=m?m:d.SAP_PARAMETERS["SAP_daysShort"];var k=d.SAP_PARAMETERS["BICSWS_DATESEPARATOR"];k=k?k:d.SAP_PARAMETERS["SAP_dateSeparator"];var j=d.SAP_PARAMETERS["BICSWS_TIMESEPARATOR"];j=j?j:d.SAP_PARAMETERS["SAP_timeSeparator"];var h=d.SAP_PARAMETERS["SAP_s_g_n_FLocalization._CurrencySymbol"];var i;if(c){i=c.split(",");a._SAPLongDay=i;a._DayStrings.en[1]=i[0];a._DayStrings.en[2]=i[1];a._DayStrings.en[3]=i[2];a._DayStrings.en[4]=i[3];a._DayStrings.en[5]=i[4];a._DayStrings.en[6]=i[5];a._DayStrings.en[7]=i[6]}if(m){i=m.split(",");a._SAPShortDay=i;a._shortDayStrings.en[1]=i[0];a._shortDayStrings.en[2]=i[1];a._shortDayStrings.en[3]=i[2];a._shortDayStrings.en[4]=i[3];a._shortDayStrings.en[5]=i[4];a._shortDayStrings.en[6]=i[5];a._shortDayStrings.en[7]=i[6]}if(f){i=f.split(",");a._SAPLongMonth=i;a._MonthStrings.en[1]=i[0];a._MonthStrings.en[2]=i[1];a._MonthStrings.en[3]=i[2];a._MonthStrings.en[4]=i[3];a._MonthStrings.en[5]=i[4];a._MonthStrings.en[6]=i[5];a._MonthStrings.en[7]=i[6];a._MonthStrings.en[8]=i[7];a._MonthStrings.en[9]=i[8];a._MonthStrings.en[10]=i[9];a._MonthStrings.en[11]=i[10];a._MonthStrings.en[12]=i[11]}if(g){i=g.split(",");a._SAPShortMonth=i;a._shortMonthStrings.en[1]=i[0];a._shortMonthStrings.en[2]=i[1];a._shortMonthStrings.en[3]=i[2];a._shortMonthStrings.en[4]=i[3];a._shortMonthStrings.en[5]=i[4];a._shortMonthStrings.en[6]=i[5];a._shortMonthStrings.en[7]=i[6];a._shortMonthStrings.en[8]=i[7];a._shortMonthStrings.en[9]=i[8];a._shortMonthStrings.en[10]=i[9];a._shortMonthStrings.en[11]=i[10];a._shortMonthStrings.en[12]=i[11]}if(e){a._SAPDecimalSeparator=e}if(l){a._SAPThousandsSeparator=l}if(k){a._SAPDateString=k}if(j){a._SAPTimeString=j}if(h){a._SAPCurrencySymbol=h}};a.prototype.IMThousandsSeparator=function(c){if(arguments.length>=1){this._IMThousandsSeparator=this.replaceNBSP(c);return this}else{return this._IMThousandsSeparator}};a.prototype.getDateParseLocaleInfo=function(){if(!this._dateParseLocaleInfo){this._dateParseLocaleInfo=new sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl();this._dateParseLocaleInfo.IMDateSeparator(this.IMDateSeparator);this._dateParseLocaleInfo.IMTimeSeparator(this.IMTimeSeparator)}return this._dateParseLocaleInfo};a.prototype.getDateDisplayLocaleInfo=function(){if(!this._dateDisplayLocaleInfo){this._dateDisplayLocaleInfo=new sap.common.globalization.defaultFormat.DateDisplayLocaleInfoImpl();this._dateDisplayLocaleInfo.IMDateSeparator(this.SAPDateSeparator);this._dateDisplayLocaleInfo.IMSDAYNAME1(this.IMSDAYNAME1);this._dateDisplayLocaleInfo.IMSDAYNAME2(this.IMSDAYNAME2);this._dateDisplayLocaleInfo.IMSDAYNAME3(this.IMSDAYNAME3);this._dateDisplayLocaleInfo.IMSDAYNAME4(this.IMSDAYNAME4);this._dateDisplayLocaleInfo.IMSDAYNAME5(this.IMSDAYNAME5);this._dateDisplayLocaleInfo.IMSDAYNAME6(this.IMSDAYNAME6);this._dateDisplayLocaleInfo.IMSDAYNAME7(this.IMSDAYNAME7);this._dateDisplayLocaleInfo.IMSABBREVDAYNAME1(this.IMSABBREVDAYNAME1);this._dateDisplayLocaleInfo.IMSABBREVDAYNAME2(this.IMSABBREVDAYNAME2);this._dateDisplayLocaleInfo.IMSABBREVDAYNAME3(this.IMSABBREVDAYNAME3);this._dateDisplayLocaleInfo.IMSABBREVDAYNAME4(this.IMSABBREVDAYNAME4);this._dateDisplayLocaleInfo.IMSABBREVDAYNAME5(this.IMSABBREVDAYNAME5);this._dateDisplayLocaleInfo.IMSABBREVDAYNAME6(this.IMSABBREVDAYNAME6);this._dateDisplayLocaleInfo.IMSABBREVDAYNAME7(this.IMSABBREVDAYNAME7);this._dateDisplayLocaleInfo.IMSMONTHNAME1(this.IMSMONTHNAME1);this._dateDisplayLocaleInfo.IMSMONTHNAME2(this.IMSMONTHNAME2);this._dateDisplayLocaleInfo.IMSMONTHNAME3(this.IMSMONTHNAME3);this._dateDisplayLocaleInfo.IMSMONTHNAME4(this.IMSMONTHNAME4);this._dateDisplayLocaleInfo.IMSMONTHNAME5(this.IMSMONTHNAME5);this._dateDisplayLocaleInfo.IMSMONTHNAME6(this.IMSMONTHNAME6);this._dateDisplayLocaleInfo.IMSMONTHNAME7(this.IMSMONTHNAME7);this._dateDisplayLocaleInfo.IMSMONTHNAME8(this.IMSMONTHNAME8);this._dateDisplayLocaleInfo.IMSMONTHNAME9(this.IMSMONTHNAME9);this._dateDisplayLocaleInfo.IMSMONTHNAME10(this.IMSMONTHNAME10);this._dateDisplayLocaleInfo.IMSMONTHNAME11(this.IMSMONTHNAME11);this._dateDisplayLocaleInfo.IMSMONTHNAME12(this.IMSMONTHNAME12);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME1(this.IMSABBREVMONTHNAME1);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME2(this.IMSABBREVMONTHNAME2);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME3(this.IMSABBREVMONTHNAME3);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME4(this.IMSABBREVMONTHNAME4);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME5(this.IMSABBREVMONTHNAME5);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME6(this.IMSABBREVMONTHNAME6);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME7(this.IMSABBREVMONTHNAME7);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME8(this.IMSABBREVMONTHNAME8);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME9(this.IMSABBREVMONTHNAME9);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME10(this.IMSABBREVMONTHNAME10);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME11(this.IMSABBREVMONTHNAME11);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME12(this.IMSABBREVMONTHNAME12);this._dateDisplayLocaleInfo.IMTimeSeparator(this.SAPTimeSeparator);this._dateDisplayLocaleInfo.IMAMTOKEN(this.IMAMTOKEN);this._dateDisplayLocaleInfo.IMPMTOKEN(this.IMPMTOKEN)}return this._dateDisplayLocaleInfo};a.prototype.numericParseLocaleInfo=function(){if(!this._numericParseLocaleInfo){this._numericParseLocaleInfo=new sap.common.globalization.defaultFormat.NumericParseLocaleInfoImpl(this._IMThousandsSeparator,this.IMDecimalSeparator,this.IMCurrencySymbol)}return this._numericParseLocaleInfo};a.prototype.numericDisplayLocaleInfo=function(){if(!this._numericDisplayLocaleInfo){var c=(this.SAPThousandsSeparator?this.SAPThousandsSeparator:this._IMThousandsSeparator);var e=(this.SAPDecimalSeparator?this.SAPDecimalSeparator:this.IMDecimalSeparator);var d=(this.SAPCurrencySymbol?this.SAPCurrencySymbol:this.IMCurrencySymbol);this._numericDisplayLocaleInfo=new sap.common.globalization.defaultFormat.NumericDisplayLocaleInfoImpl(c,e,d)}return this._numericDisplayLocaleInfo};a._initializePvlDayStrings=function(){var d=sap.common.globalization.GlobalizationDateConstant.getLongDay();if(d){a._DayStrings.en[1]=d[1];a._DayStrings.en[2]=d[2];a._DayStrings.en[3]=d[3];a._DayStrings.en[4]=d[4];a._DayStrings.en[5]=d[5];a._DayStrings.en[6]=d[6];a._DayStrings.en[7]=d[0]}var c=sap.common.globalization.GlobalizationDateConstant.getShortDay();if(c){a._shortDayStrings.en[1]=c[1];a._shortDayStrings.en[2]=c[2];a._shortDayStrings.en[3]=c[3];a._shortDayStrings.en[4]=c[4];a._shortDayStrings.en[5]=c[5];a._shortDayStrings.en[6]=c[6];a._shortDayStrings.en[7]=c[0]}};a._initializePvlDateStrings=function(){var e=sap.common.globalization.GlobalizationPreference.getInstance().pvl();if(e&&!sap.common.globalization.utils.StringUtil.isBlankString(e)){a._initializePvlDayStrings();var f=sap.common.globalization.GlobalizationDateConstant.getLongMonth();if(f){a._MonthStrings.en[1]=f[0];a._MonthStrings.en[2]=f[1];a._MonthStrings.en[3]=f[2];a._MonthStrings.en[4]=f[3];a._MonthStrings.en[5]=f[4];a._MonthStrings.en[6]=f[5];a._MonthStrings.en[7]=f[6];a._MonthStrings.en[8]=f[7];a._MonthStrings.en[9]=f[8];a._MonthStrings.en[10]=f[9];a._MonthStrings.en[11]=f[10];a._MonthStrings.en[12]=f[11]}var d=sap.common.globalization.GlobalizationDateConstant.getShortMonth();if(d){a._shortMonthStrings.en[1]=d[0];a._shortMonthStrings.en[2]=d[1];a._shortMonthStrings.en[3]=d[2];a._shortMonthStrings.en[4]=d[3];a._shortMonthStrings.en[5]=d[4];a._shortMonthStrings.en[6]=d[5];a._shortMonthStrings.en[7]=d[6];a._shortMonthStrings.en[8]=d[7];a._shortMonthStrings.en[9]=d[8];a._shortMonthStrings.en[10]=d[9];a._shortMonthStrings.en[11]=d[10];a._shortMonthStrings.en[12]=d[11]}var c=sap.common.globalization.GlobalizationDateConstant.getAmPmToken();if(c){a._AmPms.en[1]=c[0];a._AmPms.en[2]=c[1]}}};a._resetAllStaticVars=function(){a._DayStrings=null;a._shortDayStrings=null;a._MonthStrings=null;a._shortMonthStrings=null;a._DateTimeCodes=null;a._NumericStrings=null;a._DateTimeStrings=null;a._CurrencySymbol=null;a._SAPCurrencySymbol=null;a._SAPDateString=null;a._SAPTimeString=null;a._SAPThousandsSeparator=null;a._SAPDecimalSeparator=null;a._SAPLongDay=null;a._SAPShortDay=null;a._SAPLongMonth=null;a._SAPShortMonth=null;a._AmPms=null}})();(function(){sap.common.globalization.declare("sap.common.globalization.utils.BaseUtils");var b=sap.common.globalization.utils.BaseUtils;var a=0;sap.common.globalization.utils.BaseUtils.genUID=function(){if(!a){a=0}return"xgen_"+(a++)};var c={"[object Boolean]":"boolean","[object Number]":"number","[object String]":"string","[object Function]":"function","[object Array]":"array","[object Date]":"date","[object RegExp]":"regexp","[object Object]":"object"};sap.common.globalization.utils.BaseUtils.applyProperties=function(g,f){if(f!=null){var d=f.length;for(var e=0;e<d;e++){var h=f[e];if(h&&h!=null){this.applyObjectProperty(g,h.name,h.value)}}}};sap.common.globalization.utils.BaseUtils.applyObjectProperty=function(g,f,d){try{if(b.isFunction(g[f])){g[f](d)}else{if(g.hasOwnProperty(f)){g[f]=d}}}catch(h){if(console){console.log(h)}}};sap.common.globalization.utils.BaseUtils.getObjectProperty=function(f,d){try{if(b.isFunction(f[d])){return f[d]()}else{if(f.hasOwnProperty(d)){return f[d]}}}catch(g){if(console){console.log(g)}}};sap.common.globalization.utils.BaseUtils.type=function(d){return d==null?String(d):c[Object.prototype.toString.call(d)]||"object"};sap.common.globalization.utils.BaseUtils.isFunction=function(d){return b.type(d)==="function"};sap.common.globalization.utils.BaseUtils.isBoolean=function(d){return b.type(d)==="boolean"};sap.common.globalization.utils.BaseUtils.isString=function(d){return b.type(d)==="string"};sap.common.globalization.utils.BaseUtils.isArray=function(d){return b.type(d)==="array"};sap.common.globalization.utils.BaseUtils.isNumber=function(d){return b.type(d)==="number"};sap.common.globalization.utils.BaseUtils.isRegExp=function(d){return b.type(d)==="regexp"};sap.common.globalization.utils.BaseUtils.sortArrayOn=function(d,f,e){if(b.isArray(d)&&b.isString(f)){d.sort(function(h,g){return e?(h[f]<g[f])-(h[f]>g[f]):(h[f]>g[f])-(h[f]<g[f])})}}})();(function(){sap.common.globalization.declare("sap.common.globalization.utils.UnitAbbreviations");sap.common.globalization.require("sap.common.globalization.utils.BaseUtils");sap.common.globalization.utils.UnitAbbreviations=function(){this.__className="sap.common.globalization.utils.UnitAbbreviations";this.thousands="K";this.millions="M";this.billions="B";this.trillions="T"};sap.common.globalization.utils.UnitAbbreviations.prototype.toObject=function(){return{thousands:this.thousands,millions:this.millions,billions:this.billions,trillions:this.trillions}};sap.common.globalization.utils.UnitAbbreviations.prototype.copyFromObject=function(a){if(!a){a={thousands:"K",millions:"M",billions:"B",trillions:"T"}}var b=false;for(attr in ["thousands","millions","billions","trillions"]){if(sap.common.globalization.utils.BaseUtils.isString(a[attr])&&a[attr]!=this[attr]){this[attr]=a[attr];b=true}}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.utils.BooleanUtil");sap.common.globalization.require("sap.common.globalization.utils.BaseUtils");sap.common.globalization.utils.BooleanUtil.isBooleanValue=function(a){if(sap.common.globalization.utils.BaseUtils.isBoolean(a)){return true}else{if(sap.common.globalization.utils.BaseUtils.isString(a)){return String(a).toLowerCase()=="true"||String(a).toLowerCase()=="false"}else{return false}}}})();(function(){sap.common.globalization.declare("sap.common.globalization.utils.ColorUtil");sap.common.globalization.require("sap.common.globalization.utils.BaseUtils");sap.common.globalization.utils.ColorUtil.convertToHexString=function(c){if(c==null||!sap.common.globalization.utils.BaseUtils.isNumber(c)||isNaN(c)){return null}var h="#",b=["r","g","b"],d=sap.common.globalization.utils.ColorUtil.convertToRGBObject(c);for(var f=0,a=b.length;f<a;f++){var g=b[f],e=d[g].toString(16);if(e.length==1){h+="0"}h+=e}return h};sap.common.globalization.utils.ColorUtil.convertToRGBObject=function(a){if(a==null||!sap.common.globalization.utils.BaseUtils.isNumber(a)||isNaN(a)){return null}return{r:(a&16711680)>>16,g:(a&65280)>>8,b:a&255}}})();(function(){sap.common.globalization.declare("sap.common.globalization.utils.DataFormatUtils");sap.common.globalization.require("sap.common.globalization.utils.ColorUtil");sap.common.globalization.utils.DataFormatUtils.decorateColorHTML=function(b,a){if(!isNaN(a)){return'<FONT COLOR="'+sap.common.globalization.utils.ColorUtil.convertToHexString(a)+'"/>'+b+"</FONT>"}return b};sap.common.globalization.utils.DataFormatUtils.DataFormatUtils=function(){throw new Error("Should not initialize DataFormatUtils.")}})();(function(){sap.common.globalization.declare("sap.common.globalization.utils.NumberUtil");sap.common.globalization.require("sap.common.globalization.utils.BaseUtils");sap.common.globalization.require("sap.common.globalization.utils.UnitAbbreviations");sap.common.globalization.require("sap.common.globalization.utils.StringUtil");sap.common.globalization.utils.NumberUtil.checkEquality=function(d,c,a){a=a||-5;if(d==c){return true}var b=Math.pow(10,a-1);var e=d-c;return e<b&&e>-b};sap.common.globalization.utils.NumberUtil.lessThanEqual=function(b,c,a){a=a||-5;return((b<c)||sap.common.globalization.utils.NumberUtil.checkEquality(b,c,a))};sap.common.globalization.utils.NumberUtil.greaterThanEqual=function(b,c,a){a=a||-5;return((b>c)||sap.common.globalization.utils.NumberUtil.checkEquality(b,c,a))};sap.common.globalization.utils.NumberUtil.getPrecision=function(d){var c=String(d);var e=c.length;var b=c.indexOf(".");var a=e-(b+1);return a};sap.common.globalization.utils.NumberUtil.roundToPrecision=function(e,c){var f=e.toString(10);var d=f.split(".");var a=(d&&d.length>1?d[1].length:0);if(a<=c){return e}var b=Math.pow(10,c);return Math.round(e*b)/b};sap.common.globalization.utils.NumberUtil.roundToNearest=function(b,a,c){a=a||1;c=c||0;return Math.round((b+c)/a)*a-c};sap.common.globalization.utils.NumberUtil.abbreviate=function(f,g,c){var h=1000;var d=1000000;var b=1000000000;var a=1000000000000;g=g||null;c=c||1;if(!g){g=new sap.common.globalization.utils.UnitAbbreviations()}var i="";var e=Math.abs(f);if(e>=a){f/=a;i=g.trillions}else{if(e>=b){f/=b;i=g.billions}else{if(e>=d){f/=d;i=g.millions}else{if(e>=h){f/=h;i=g.thousands}}}}f=sap.common.globalization.utils.NumberUtil.roundToPrecision(f,c);return String(f)+i};sap.common.globalization.utils.NumberUtil.parseNumber=function(c,b){var a=b;if(c!=null){var d=Number(c);if(isNaN(d)==false){a=d}}return a};sap.common.globalization.utils.NumberUtil.isNumericValue=function(a){if(sap.common.globalization.utils.BaseUtils.isNumber(a)&&!isNaN(a)){return true}else{if(sap.common.globalization.utils.BaseUtils.isString(a)){return sap.common.globalization.utils.StringUtil.isNumber(String(a))}else{return false}}}})();(function(){sap.common.globalization.declare("sap.common.globalization.utils.StringUtil");sap.common.globalization.require("sap.common.globalization.utils.BaseUtils");sap.common.globalization.utils.StringUtil.escapeEntities=function(a){if(a){a=a.split("&").join("&amp;");a=a.split("<").join("&lt;");a=a.split(">").join("&gt;");a=a.split('"').join("&quot;");a=a.split("'").join("&apos;")}return a};sap.common.globalization.utils.StringUtil.trim=function(a){return a.replace(/^\s*/,"").replace(/\s*$/,"")};sap.common.globalization.utils.StringUtil.isBlankString=function(a){if(a==null||!(sap.common.globalization.utils.BaseUtils.isString(a))){return false}return sap.common.globalization.utils.StringUtil.trim(a)===""};sap.common.globalization.utils.StringUtil.isNumber=function(a){if(isNaN(Number(a))){return false}else{if(sap.common.globalization.utils.StringUtil.isBlankString(a)){return false}else{return true}}}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.DefaultDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.numericFormat.FDate");sap.common.globalization.require("sap.common.globalization.GlobalizationDateConstant");sap.common.globalization.require("sap.common.globalization.GlobalizationPreference");sap.common.globalization.require("sap.common.globalization.numericFormat.FDate");sap.common.globalization.require("sap.common.globalization.numericFormat.FDefaultDate");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");sap.common.globalization.require("sap.common.globalization.numericFormat.");sap.common.globalization.defaultFormat.DefaultDateFormatLocaleFactory=function(){this.__className="sap.common.globalization.defaultFormat.DefaultDateFormatLocaleFactory";this._parseLocaleInfo=null;this._displayLocaleInfo=null};var a=sap.common.globalization.defaultFormat.DefaultDateFormatLocaleFactory;a.prototype.getDateParseLocaleInfo=function(){if(!this._parseLocaleInfo){this._parseLocaleInfo=this.getPredefinedDateParseLocaleString()}return this._parseLocaleInfo};a.prototype.getDateDisplayLocaleInfo=function(){if(!this._displayLocaleInfo){this._displayLocaleInfo=this.getPredefinedDateDisplayLocaleString();this.applySAPDateTokensAndSeparators(this._displayLocaleInfo)}return this._displayLocaleInfo};a.prototype.getDefaultDateFormat=function(){return sap.common.globalization.GlobalizationDateConstant.getDefaultLongDateFormat()};a.prototype.createFDate=function(){return new sap.common.globalization.numericFormat.FDefaultDate(this.getDateParseLocaleInfo(),this.getDateDisplayLocaleInfo())};a.prototype.getPredefinedDateParseLocaleString=function(){return new sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl()};a.prototype.getPredefinedDateDisplayLocaleString=function(){var e=new sap.common.globalization.defaultFormat.DateDisplayLocaleInfoImpl();var f=sap.common.globalization.GlobalizationDateConstant.getLongDay();if(f){e.IMSDAYNAME1(f[1]);e.IMSDAYNAME2(f[2]);e.IMSDAYNAME3(f[3]);e.IMSDAYNAME4(f[4]);e.IMSDAYNAME5(f[5]);e.IMSDAYNAME6(f[6]);e.IMSDAYNAME7(f[0])}var c=sap.common.globalization.GlobalizationDateConstant.getShortDay();if(c){e.IMSABBREVDAYNAME1(c[1]);e.IMSABBREVDAYNAME2(c[2]);e.IMSABBREVDAYNAME3(c[3]);e.IMSABBREVDAYNAME4(c[4]);e.IMSABBREVDAYNAME5(c[5]);e.IMSABBREVDAYNAME6(c[6]);e.IMSABBREVDAYNAME7(c[0])}var g=sap.common.globalization.GlobalizationDateConstant.getLongMonth();if(g){e.IMSMONTHNAME1(g[0]);e.IMSMONTHNAME2(g[1]);e.IMSMONTHNAME3(g[2]);e.IMSMONTHNAME4(g[3]);e.IMSMONTHNAME5(g[4]);e.IMSMONTHNAME6(g[5]);e.IMSMONTHNAME7(g[6]);e.IMSMONTHNAME8(g[7]);e.IMSMONTHNAME9(g[8]);e.IMSMONTHNAME10(g[9]);e.IMSMONTHNAME11(g[10]);e.IMSMONTHNAME12(g[11])}var d=sap.common.globalization.GlobalizationDateConstant.getShortMonth();if(d){e.IMSABBREVMONTHNAME1(d[0]);e.IMSABBREVMONTHNAME2(d[1]);e.IMSABBREVMONTHNAME3(d[2]);e.IMSABBREVMONTHNAME4(d[3]);e.IMSABBREVMONTHNAME5(d[4]);e.IMSABBREVMONTHNAME6(d[5]);e.IMSABBREVMONTHNAME7(d[6]);e.IMSABBREVMONTHNAME8(d[7]);e.IMSABBREVMONTHNAME9(d[8]);e.IMSABBREVMONTHNAME10(d[9]);e.IMSABBREVMONTHNAME11(d[10]);e.IMSABBREVMONTHNAME12(d[11])}var b=sap.common.globalization.GlobalizationDateConstant.getAbbrevEraString();if(b&&b[1]){e.IMEraToken(b[1])}return e};a.prototype.applySAPDateTokensAndSeparators=function(c){var b=sap.common.globalization.numericFormat.FLocalization.getInstance();if(b.SAPShortDay){c.IMSABBREVDAYNAME1(b.SAPShortDay[0]);c.IMSABBREVDAYNAME2(b.SAPShortDay[1]);c.IMSABBREVDAYNAME3(b.SAPShortDay[2]);c.IMSABBREVDAYNAME4(b.SAPShortDay[3]);c.IMSABBREVDAYNAME5(b.SAPShortDay[4]);c.IMSABBREVDAYNAME6(b.SAPShortDay[5]);c.IMSABBREVDAYNAME7(b.SAPShortDay[6])}if(b.SAPLongDay){c.IMSDAYNAME1(b.SAPLongDay[0]);c.IMSDAYNAME2(b.SAPLongDay[1]);c.IMSDAYNAME3(b.SAPLongDay[2]);c.IMSDAYNAME4(b.SAPLongDay[3]);c.IMSDAYNAME5(b.SAPLongDay[4]);c.IMSDAYNAME6(b.SAPLongDay[5]);c.IMSDAYNAME7(b.SAPLongDay[6])}if(b.SAPShortMonth){c.IMSABBREVMONTHNAME1(b.SAPShortMonth[0]);c.IMSABBREVMONTHNAME2(b.SAPShortMonth[1]);c.IMSABBREVMONTHNAME3(b.SAPShortMonth[2]);c.IMSABBREVMONTHNAME4(b.SAPShortMonth[3]);c.IMSABBREVMONTHNAME5(b.SAPShortMonth[4]);c.IMSABBREVMONTHNAME6(b.SAPShortMonth[5]);c.IMSABBREVMONTHNAME7(b.SAPShortMonth[6]);c.IMSABBREVMONTHNAME8(b.SAPShortMonth[7]);c.IMSABBREVMONTHNAME9(b.SAPShortMonth[8]);c.IMSABBREVMONTHNAME10(b.SAPShortMonth[9]);c.IMSABBREVMONTHNAME11(b.SAPShortMonth[10]);c.IMSABBREVMONTHNAME12(b.SAPShortMonth[11])}if(b.SAPLongMonth){c.IMSMONTHNAME1(b.SAPLongMonth[0]);c.IMSMONTHNAME2(b.SAPLongMonth[1]);c.IMSMONTHNAME3(b.SAPLongMonth[2]);c.IMSMONTHNAME4(b.SAPLongMonth[3]);c.IMSMONTHNAME5(b.SAPLongMonth[4]);c.IMSMONTHNAME6(b.SAPLongMonth[5]);c.IMSMONTHNAME7(b.SAPLongMonth[6]);c.IMSMONTHNAME8(b.SAPLongMonth[7]);c.IMSMONTHNAME9(b.SAPLongMonth[8]);c.IMSMONTHNAME10(b.SAPLongMonth[9]);c.IMSMONTHNAME11(b.SAPLongMonth[10]);c.IMSMONTHNAME12(b.SAPLongMonth[11])}}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.DefaultDateTimeFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.GlobalizationDateConstant");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");var a=sap.common.globalization.defaultFormat;a.DefaultDateTimeFormatLocaleFactory=function(){a.DefaultDateTimeFormatLocaleFactory.superclass.constructor.apply(this);this.__className="sap.common.globalization.defaultFormat.DefaultDateTimeFormatLocaleFactory"};a.DefaultDateTimeFormatLocaleFactory=sap.common.globalization.extend(a.DefaultDateTimeFormatLocaleFactory,a.DefaultDateFormatLocaleFactory);a.DefaultDateTimeFormatLocaleFactory.prototype.getDefaultDateFormat=function(){return sap.common.globalization.GlobalizationDateConstant.getDefaultDateTimeFormat()};a.DefaultDateTimeFormatLocaleFactory.prototype.applySAPDateTokensAndSeparators=function(c){a.DefaultDateTimeFormatLocaleFactory.superclass.applySAPDateTokensAndSeparators(c);var b=sap.common.globalization.numericFormat.FLocalization.getInstance();if(c&&b&&b.SAPTimeSeparator){c.IMTimeSeparator(b.SAPTimeSeparator)}};a.DefaultDateTimeFormatLocaleFactory.prototype.getPredefinedDateParseLocaleString=function(){var c=a.DefaultDateTimeFormatLocaleFactory.superclass.getPredefinedDateParseLocaleString();var b=sap.common.globalization.GlobalizationDateConstant.getTimeSeparator();if(b&&c){c.IMTimeSeparator(b)}return c};a.DefaultDateTimeFormatLocaleFactory.prototype.getPredefinedDateDisplayLocaleString=function(){var d=a.DefaultDateTimeFormatLocaleFactory.superclass.getPredefinedDateDisplayLocaleString();var b=sap.common.globalization.GlobalizationDateConstant.getTimeSeparator();if(b&&d){d.IMTimeSeparator(b)}var c=sap.common.globalization.GlobalizationDateConstant.getAmPmToken();if(c&&d){d.IMAMTOKEN(c[0]);d.IMPMTOKEN(c[1])}return d}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.DefaultShortDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.GlobalizationDateConstant");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");var a=sap.common.globalization.defaultFormat;a.DefaultShortDateFormatLocaleFactory=function(){a.DefaultShortDateFormatLocaleFactory.superclass.constructor.apply(this);this.__className="sap.common.globalization.defaultFormat.DefaultShortDateFormatLocaleFactory"};a.DefaultShortDateFormatLocaleFactory=sap.common.globalization.extend(a.DefaultShortDateFormatLocaleFactory,a.DefaultDateFormatLocaleFactory);a.DefaultShortDateFormatLocaleFactory.prototype.getDefaultDateFormat=function(){return sap.common.globalization.GlobalizationDateConstant.getDefaultShorDateFormat()};a.DefaultShortDateFormatLocaleFactory.prototype.applySAPDateTokensAndSeparators=function(c){a.DefaultShortDateFormatLocaleFactory.superclass.applySAPDateTokensAndSeparators(c);var b=sap.common.globalization.numericFormat.FLocalization.getInstance();if(c&&b&&b.SAPDateSeparator){c.IMDateSeparator(b.SAPDateSeparator)}};a.DefaultShortDateFormatLocaleFactory.prototype.getPredefinedDateParseLocaleString=function(){var b=a.DefaultShortDateFormatLocaleFactory.superclass.getPredefinedDateParseLocaleString();var c=sap.common.globalization.GlobalizationDateConstant.getDateSeparator();if(c&&b){b.IMDateSeparator(c)}return b};a.DefaultShortDateFormatLocaleFactory.prototype.getPredefinedDateDisplayLocaleString=function(){var b=a.DefaultShortDateFormatLocaleFactory.superclass.getPredefinedDateDisplayLocaleString();var c=sap.common.globalization.GlobalizationDateConstant.getDateSeparator();if(c&&b){b.IMDateSeparator(c)}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.BooleanDisplayLocaleInfo");sap.common.globalization.defaultFormat.BooleanDisplayLocaleInfo=function(){this.__className="sap.common.globalization.defaultFormat.BooleanDisplayLocaleInfo";this._trueString="";this._falseString=""};sap.common.globalization.defaultFormat.BooleanDisplayLocaleInfo.prototype.trueString=function(a){if(arguments.length>=1){this._trueString=a;return this}else{return this._trueString}};sap.common.globalization.defaultFormat.BooleanDisplayLocaleInfo.prototype.falseString=function(a){if(arguments.length>=1){this._falseString=a;return this}else{return this._falseString}}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.CustomDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.GlobalizationPreference");sap.common.globalization.require("sap.common.globalization.GlobalizationDateConstant");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateForPVL");sap.common.globalization.require("sap.common.globalization.numericFormat.FDate");sap.common.globalization.require("sap.common.globalization.utils.StringUtil");var a=sap.common.globalization.defaultFormat;a.CustomDateFormatLocaleFactory=function(){this.__className="sap.common.globalization.defaultFormat.CustomDateFormatLocaleFactory";this._dateParseLocaleInfo=null;this._dateDisplayLocaleInfo=null};a.CustomDateFormatLocaleFactory._instance=null;a.CustomDateFormatLocaleFactory.getInstance=function(){if(!a.CustomDateFormatLocaleFactory._instance){a.CustomDateFormatLocaleFactory._instance=new a.CustomDateFormatLocaleFactory()}return a.CustomDateFormatLocaleFactory._instance};a.CustomDateFormatLocaleFactory.prototype.getDateParseLocaleInfo=function(){return sap.common.globalization.numericFormat.FLocalization.getInstance().getDateParseLocaleInfo()};a.CustomDateFormatLocaleFactory.prototype.getDateDisplayLocaleInfo=function(){return sap.common.globalization.numericFormat.FLocalization.getInstance().getDateDisplayLocaleInfo()};a.CustomDateFormatLocaleFactory.prototype.createFDate=function(){var b=sap.common.globalization.GlobalizationPreference.getInstance().pvl()&&!sap.common.globalization.utils.StringUtil.isBlankString(sap.common.globalization.GlobalizationPreference.getInstance().pvl());if(b){return new sap.common.globalization.numericFormat.FDateForPVL(this.getDateParseLocaleInfo(),this.getDateDisplayLocaleInfo())}else{return new sap.common.globalization.numericFormat.FDate(null,this.getDateDisplayLocaleInfo())}}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.CustomNumericFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");sap.common.globalization.require("sap.common.globalization.numericFormat.FNumber");sap.common.globalization.defaultFormat.CustomNumericFormatLocaleFactory=function(){this.__className="sap.common.globalization.defaultFormat.CustomNumericFormatLocaleFactory"};var a=sap.common.globalization.defaultFormat.CustomNumericFormatLocaleFactory;a._instance=null;a.getInstance=function(){if(!a._instance){a._instance=new sap.common.globalization.defaultFormat.CustomNumericFormatLocaleFactory()}return a._instance};a.prototype.getNumericParseLocaleInfo=function(){return sap.common.globalization.numericFormat.FLocalization.getInstance().numericParseLocaleInfo()};a.prototype.getNumericDisplayLocaleInfo=function(){return sap.common.globalization.numericFormat.FLocalization.getInstance().numericDisplayLocaleInfo()};a.prototype.createFNumber=function(){return new sap.common.globalization.numericFormat.FNumber(this.getNumericParseLocaleInfo(),this.getNumericDisplayLocaleInfo())}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.DateDisplayLocaleInfoImpl");sap.common.globalization.defaultFormat.DateDisplayLocaleInfoImpl=function(){this.__className="sap.common.globalization.defaultFormat.DateDisplayLocaleInfoImpl";this._IMDateSeparator=null;this._IMSMONTHNAME1=null;this._IMSMONTHNAME2=null;this._IMSMONTHNAME3=null;this._IMSMONTHNAME4=null;this._IMSMONTHNAME5=null;this._IMSMONTHNAME6=null;this._IMSMONTHNAME7=null;this._IMSMONTHNAME8=null;this._IMSMONTHNAME9=null;this._IMSMONTHNAME10=null;this._IMSMONTHNAME11=null;this._IMSMONTHNAME12=null;this._IMSABBREVMONTHNAME1=null;this._IMSABBREVMONTHNAME2=null;this._IMSABBREVMONTHNAME3=null;this._IMSABBREVMONTHNAME4=null;this._IMSABBREVMONTHNAME5=null;this._IMSABBREVMONTHNAME6=null;this._IMSABBREVMONTHNAME7=null;this._IMSABBREVMONTHNAME8=null;this._IMSABBREVMONTHNAME9=null;this._IMSABBREVMONTHNAME10=null;this._IMSABBREVMONTHNAME11=null;this._IMSABBREVMONTHNAME12=null;this._IMSDAYNAME1=null;this._IMSDAYNAME2=null;this._IMSDAYNAME3=null;this._IMSDAYNAME4=null;this._IMSDAYNAME5=null;this._IMSDAYNAME6=null;this._IMSDAYNAME7=null;this._IMSABBREVDAYNAME1=null;this._IMSABBREVDAYNAME2=null;this._IMSABBREVDAYNAME3=null;this._IMSABBREVDAYNAME4=null;this._IMSABBREVDAYNAME5=null;this._IMSABBREVDAYNAME6=null;this._IMSABBREVDAYNAME7=null;this._IMTimeSeparator=null;this._IMAMToken=null;this._IMPMToken=null;this._IMEraToken=null};var a=sap.common.globalization.defaultFormat.DateDisplayLocaleInfoImpl;a.prototype.IMDateSeparator=function(b){if(arguments.length>=1){this._IMDateSeparator=b}else{return this._IMDateSeparator}};a.prototype.IMSMONTHNAME1=function(b){if(arguments.length>=1){this._IMSMONTHNAME1=b}else{return this._IMSMONTHNAME1}};a.prototype.IMSMONTHNAME2=function(b){if(arguments.length>=1){this._IMSMONTHNAME2=b}else{return this._IMSMONTHNAME2}};a.prototype.IMSMONTHNAME3=function(b){if(arguments.length>=1){this._IMSMONTHNAME3=b}else{return this._IMSMONTHNAME3}};a.prototype.IMSMONTHNAME4=function(b){if(arguments.length>=1){this._IMSMONTHNAME4=b}else{return this._IMSMONTHNAME4}};a.prototype.IMSMONTHNAME5=function(b){if(arguments.length>=1){this._IMSMONTHNAME5=b}else{return this._IMSMONTHNAME5}};a.prototype.IMSMONTHNAME6=function(b){if(arguments.length>=1){this._IMSMONTHNAME6=b}else{return this._IMSMONTHNAME6}};a.prototype.IMSMONTHNAME7=function(b){if(arguments.length>=1){this._IMSMONTHNAME7=b}else{return this._IMSMONTHNAME7}};a.prototype.IMSMONTHNAME8=function(b){if(arguments.length>=1){this._IMSMONTHNAME8=b}else{return this._IMSMONTHNAME8}};a.prototype.IMSMONTHNAME9=function(b){if(arguments.length>=1){this._IMSMONTHNAME9=b}else{return this._IMSMONTHNAME9}};a.prototype.IMSMONTHNAME10=function(b){if(arguments.length>=1){this._IMSMONTHNAME10=b}else{return this._IMSMONTHNAME10}};a.prototype.IMSMONTHNAME11=function(b){if(arguments.length>=1){this._IMSMONTHNAME11=b}else{return this._IMSMONTHNAME11}};a.prototype.IMSMONTHNAME12=function(b){if(arguments.length>=1){this._IMSMONTHNAME12=b}else{return this._IMSMONTHNAME12}};a.prototype.IMSABBREVMONTHNAME1=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME1=b}else{return this._IMSABBREVMONTHNAME1}};a.prototype.IMSABBREVMONTHNAME2=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME2=b}else{return this._IMSABBREVMONTHNAME2}};a.prototype.IMSABBREVMONTHNAME3=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME3=b}else{return this._IMSABBREVMONTHNAME3}};a.prototype.IMSABBREVMONTHNAME4=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME4=b}else{return this._IMSABBREVMONTHNAME4}};a.prototype.IMSABBREVMONTHNAME5=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME5=b}else{return this._IMSABBREVMONTHNAME5}};a.prototype.IMSABBREVMONTHNAME6=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME6=b}else{return this._IMSABBREVMONTHNAME6}};a.prototype.IMSABBREVMONTHNAME7=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME7=b}else{return this._IMSABBREVMONTHNAME7}};a.prototype.IMSABBREVMONTHNAME8=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME8=b}else{return this._IMSABBREVMONTHNAME8}};a.prototype.IMSABBREVMONTHNAME9=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME9=b}else{return this._IMSABBREVMONTHNAME9}};a.prototype.IMSABBREVMONTHNAME10=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME10=b}else{return this._IMSABBREVMONTHNAME10}};a.prototype.IMSABBREVMONTHNAME11=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME11=b}else{return this._IMSABBREVMONTHNAME11}};a.prototype.IMSABBREVMONTHNAME12=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME12=b}else{return this._IMSABBREVMONTHNAME12}};a.prototype.IMSDAYNAME1=function(b){if(arguments.length>=1){this._IMSDAYNAME1=b}else{return this._IMSDAYNAME1}};a.prototype.IMSDAYNAME2=function(b){if(arguments.length>=1){this._IMSDAYNAME2=b}else{return this._IMSDAYNAME2}};a.prototype.IMSDAYNAME3=function(b){if(arguments.length>=1){this._IMSDAYNAME3=b}else{return this._IMSDAYNAME3}};a.prototype.IMSDAYNAME4=function(b){if(arguments.length>=1){this._IMSDAYNAME4=b}else{return this._IMSDAYNAME4}};a.prototype.IMSDAYNAME5=function(b){if(arguments.length>=1){this._IMSDAYNAME5=b}else{return this._IMSDAYNAME5}};a.prototype.IMSDAYNAME6=function(b){if(arguments.length>=1){this._IMSDAYNAME6=b}else{return this._IMSDAYNAME6}};a.prototype.IMSDAYNAME7=function(b){if(arguments.length>=1){this._IMSDAYNAME7=b}else{return this._IMSDAYNAME7}};a.prototype.IMSABBREVDAYNAME1=function(b){if(arguments.length>=1){this._IMSABBREVDAYNAME1=b}else{return this._IMSABBREVDAYNAME1}};a.prototype.IMSABBREVDAYNAME2=function(b){if(arguments.length>=1){this._IMSABBREVDAYNAME2=b}else{return this._IMSABBREVDAYNAME2}};a.prototype.IMSABBREVDAYNAME3=function(b){if(arguments.length>=1){this._IMSABBREVDAYNAME3=b}else{return this._IMSABBREVDAYNAME3}};a.prototype.IMSABBREVDAYNAME4=function(b){if(arguments.length>=1){this._IMSABBREVDAYNAME4=b}else{return this._IMSABBREVDAYNAME4}};a.prototype.IMSABBREVDAYNAME5=function(b){if(arguments.length>=1){this._IMSABBREVDAYNAME5=b}else{return this._IMSABBREVDAYNAME5}};a.prototype.IMSABBREVDAYNAME6=function(b){if(arguments.length>=1){this._IMSABBREVDAYNAME6=b}else{return this._IMSABBREVDAYNAME6}};a.prototype.IMSABBREVDAYNAME7=function(b){if(arguments.length>=1){this._IMSABBREVDAYNAME7=b}else{return this._IMSABBREVDAYNAME7}};a.prototype.IMTimeSeparator=function(b){if(arguments.length>=1){this._IMTimeSeparator=b}else{return this._IMTimeSeparator}};a.prototype.IMAMTOKEN=function(b){if(arguments.length>=1){this._IMAMToken=b}else{return this._IMAMToken}};a.prototype.IMPMTOKEN=function(b){if(arguments.length>=1){this._IMPMToken=b}else{return this._IMPMToken}};a.prototype.IMEraToken=function(b){if(arguments.length>=1){this._IMEraToken=b}else{return this._IMEraToken}}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl");sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl=function(){this.__className="sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl";this._IMDateSeparator=null;this._IMTimeSeparator=null};sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl.prototype.IMDateSeparator=function(a){if(arguments.length>=1){this._IMDateSeparator=a}else{return this._IMDateSeparator}};sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl.prototype.IMTimeSeparator=function(a){if(arguments.length>=1){this._IMTimeSeparator=a}else{return this._IMTimeSeparator}}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.DefaultBooleanFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.BooleanDisplayLocaleInfo");sap.common.globalization.require("sap.common.globalization.GlobalizationBooleanConstant");sap.common.globalization.require("sap.common.globalization.defaultFormat.BooleanDisplayLocaleInfo");sap.common.globalization.defaultFormat.DefaultBooleanFormatLocaleFactory=function(){this.className="sap.common.globalization.defaultFormat.DefaultBooleanFormatLocaleFactory";this._displayLocale=null};var a=sap.common.globalization.defaultFormat.DefaultBooleanFormatLocaleFactory;a._instance=null;a.getInstance=function(){if(!a._instance){a._instance=new sap.common.globalization.defaultFormat.DefaultBooleanFormatLocaleFactory()}return a._instance};a.prototype.getBooleanDisplayLocaleInfo=function(){if(!this._displayLocale){this._displayLocale=new sap.common.globalization.defaultFormat.BooleanDisplayLocaleInfo();var b=sap.common.globalization.GlobalizationBooleanConstant.getBooleanStrings();if(b){this._displayLocale.trueString(b[0]);this._displayLocale.falseString(b[1])}}return this._displayLocale}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.DefaultNumericFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.NumericParseLocaleInfoImpl");sap.common.globalization.require("sap.common.globalization.GlobalizationNumericConstant");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");sap.common.globalization.require("sap.common.globalization.defaultFormat.NumericDisplayLocaleInfoImpl");sap.common.globalization.require("sap.common.globalization.numericFormat.FDefaultNumber");sap.common.globalization.require("sap.common.globalization.GlobalizationNumericUtil");sap.common.globalization.require("sap.common.globalization.GlobalizationNumericConstant");sap.common.globalization.require("sap.common.globalization.numericFormat.TwoDigitGroupingStrategy");sap.common.globalization.defaultFormat.DefaultNumericFormatLocaleFactory=function(){this.__className="sap.common.globalization.defaultFormat.DefaultNumericFormatLocaleFactory.DefaultNumericFormatLocaleFactory";this._numericParseLocaleInfo=null;this._numericDisplayLocaleInfo=null};var a=sap.common.globalization.defaultFormat.DefaultNumericFormatLocaleFactory;a.prototype.getNumericParseLocaleInfo=function(){var b=sap.common.globalization;if(!this._numericParseLocaleInfo){this._numericParseLocaleInfo=new b.defaultFormat.NumericParseLocaleInfoImpl(b.GlobalizationNumericConstant.getParseThousandSeparator(),b.GlobalizationNumericConstant.getParseDecimalSeparator(),b.GlobalizationNumericConstant.getParseCurrencySymbol())}return this._numericParseLocaleInfo};a.prototype.getNumericDisplayLocaleInfo=function(){if(!this._numericDisplayLocaleInfo){var e=",";var d=".";var b=sap.common.globalization;if(b.numericFormat.FLocalization.getInstance().SAPThousandsSeparator){e=b.numericFormat.FLocalization.getInstance().SAPThousandsSeparator}else{if(b.GlobalizationNumericConstant.getDisplayThousandSeparator()){e=b.GlobalizationNumericConstant.getDisplayThousandSeparator()}}if(b.numericFormat.FLocalization.getInstance().SAPDecimalSeparator){d=b.numericFormat.FLocalization.getInstance().SAPDecimalSeparator}else{if(b.GlobalizationNumericConstant.getDisplayDecimalSeparator()){d=b.GlobalizationNumericConstant.getDisplayDecimalSeparator()}}var c=(b.numericFormat.FLocalization.getInstance().SAPCurrencySymbol?b.numericFormat.FLocalization.getInstance().SAPCurrencySymbol:this.displayCurrencySymbol());this._numericDisplayLocaleInfo=new b.defaultFormat.NumericDisplayLocaleInfoImpl(e,d,c)}return this._numericDisplayLocaleInfo};a.prototype.createFNumber=function(){var b=new sap.common.globalization.numericFormat.FDefaultNumber(this.getNumericParseLocaleInfo(),this.getNumericDisplayLocaleInfo());if(sap.common.globalization.GlobalizationNumericUtil.isTwoDigitGroupingCountry(sap.common.globalization.GlobalizationNumericConstant.getActualLocaleForDefaultNumberFormat())){b.groupingStrategy(sap.common.globalization.numericFormat.TwoDigitGroupingStrategy.instance())}return b};a.prototype.getDefaultNumericFormat=function(){if(sap.common.globalization.GlobalizationNumericConstant.getDefaultNumberFormat()){return sap.common.globalization.GlobalizationNumericConstant.getDefaultNumberFormat()}return"#,##0.###"};a.prototype.displayCurrencySymbol=function(){return""}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.DefaultTimeFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.GlobalizationDateConstant");sap.common.globalization.require("sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl");sap.common.globalization.require("sap.common.globalization.defaultFormat.DateDisplayLocaleInfoImpl");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");var a=sap.common.globalization.defaultFormat;a.DefaultTimeFormatLocaleFactory=function(){a.DefaultTimeFormatLocaleFactory.superclass.constructor.apply(this);this.__className="sap.common.globalization.defaultFormat.DefaultTimeFormatLocaleFactory"};a.DefaultTimeFormatLocaleFactory=sap.common.globalization.extend(a.DefaultTimeFormatLocaleFactory,a.DefaultDateFormatLocaleFactory);a.DefaultTimeFormatLocaleFactory.prototype.getDefaultDateFormat=function(){return sap.common.globalization.GlobalizationDateConstant.getDefaultTimeFormat()};a.DefaultTimeFormatLocaleFactory.prototype.applySAPDateTokensAndSeparators=function(c){var b=sap.common.globalization.numericFormat.FLocalization.getInstance();if(c&&b&&b.SAPTimeSeparator){c.IMTimeSeparator(b.SAPTimeSeparator)}};a.DefaultTimeFormatLocaleFactory.prototype.getPredefinedDateParseLocaleString=function(){var c=new sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl();var b=sap.common.globalization.GlobalizationDateConstant.getTimeSeparator();if(b&&c){c.IMTimeSeparator(b)}return c};a.DefaultTimeFormatLocaleFactory.prototype.getPredefinedDateDisplayLocaleString=function(){var d=new sap.common.globalization.defaultFormat.DateDisplayLocaleInfoImpl();var b=sap.common.globalization.GlobalizationDateConstant.getTimeSeparator();if(b&&d){d.IMTimeSeparator(b)}var c=sap.common.globalization.GlobalizationDateConstant.getAmPmToken();if(c&&d){d.IMAMTOKEN(c[0]);d.IMPMTOKEN(c[1])}return d}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.NumericDisplayLocaleInfoImpl");sap.common.globalization.defaultFormat.NumericDisplayLocaleInfoImpl=function(a,b,c){if(a){this._thousandsSeparator=a}else{this._thousandsSeparator=","}if(b){this._decimalSeparator=b}else{this._decimalSeparator="."}if(c){this._currencySymbol=c}else{this._currencySymbol=""}};sap.common.globalization.defaultFormat.NumericDisplayLocaleInfoImpl.prototype.thousandsSeparator=function(){return this._thousandsSeparator};sap.common.globalization.defaultFormat.NumericDisplayLocaleInfoImpl.prototype.decimalSeparator=function(){return this._decimalSeparator};sap.common.globalization.defaultFormat.NumericDisplayLocaleInfoImpl.prototype.currencySymbol=function(){return this._currencySymbol}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.NumericParseLocaleInfoImpl");sap.common.globalization.defaultFormat.NumericParseLocaleInfoImpl=function(a,b,c){if(a){this._thousandsSeparator=a}else{this._thousandsSeparator=","}if(b){this._decimalSeparator=b}else{this._decimalSeparator="."}if(c){this._currencySymbol=c}else{this._currencySymbol=""}};sap.common.globalization.defaultFormat.NumericParseLocaleInfoImpl.prototype.thousandsSeparator=function(){return this._thousandsSeparator};sap.common.globalization.defaultFormat.NumericParseLocaleInfoImpl.prototype.decimalSeparator=function(){return this._decimalSeparator};sap.common.globalization.defaultFormat.NumericParseLocaleInfoImpl.prototype.currencySymbol=function(){return this._currencySymbol}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDateA");var a=sap.common.globalization.numericFormat;a.FDateA=function(b){this.__className="sap.common.globalization.numericFormat.FDateA";this._full=true;this._displayLocale=b};a.FDateA.prototype.parse=function(e,d){var c=0;var b=d.toLowerCase();if(b.substr(0,5)=="am/pm"){e.miltime=false;c=5}if(b.substr(0,3)=="a/p"){e.miltime=false;this._full=false;c=3}return c};a.FDateA.prototype.display=function(c){var b="";if(c.getHrs()>=12){if(this._full){b=this._displayLocale.IMPMTOKEN()?this._displayLocale.IMPMTOKEN():"PM"}else{b=this._displayLocale.IMPMTOKEN()?this._displayLocale.IMPMTOKEN():"P"}}else{if(this._full){b=this._displayLocale.IMAMTOKEN()?this._displayLocale.IMAMTOKEN():"AM"}else{b=this._displayLocale.IMAMTOKEN()?this._displayLocale.IMAMTOKEN():"A"}}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDateB");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateM");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateH");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateS");var a=sap.common.globalization.numericFormat;a.FDateB=function(b){this.__className="sap.common.globalization.numericFormat.FDateB";this._displayLocaleInfo=b;this.mask=undefined;this.c="";this._tok={};this.initializeTokenMap()};a.FDateB.prototype.parse=function(f,e){var c=2;this.c=e.charAt(1);var d=this.createTokenFormatter(this._tok[this.c]);if(this.c=="M"||this.c=="m"){d.bminute=true}var b=d.parse(f,e.substring(1));if(b>0){this.mask=d;c+=b}return c};a.FDateB.prototype.display=function(c){var b;if(this.c=="S"||this.c=="s"){b=86400*c.serial}else{if(this.c=="M"||this.c=="m"){b=1440*c.serial}else{if(this.c=="H"||this.c=="h"){b=24*c.serial}}}this.mask.value=Math.floor(b);return this.mask.display(c)};a.FDateB.prototype.createTokenFormatter=function(b){var c=null;switch(b){case a.FDateM:c=new a.FDateM(this._displayLocaleInfo);break;case a.FDateH:c=new a.FDateH();break;case a.FDateS:c=new a.FDateS();break;default:}return c};a.FDateB.prototype.initializeTokenMap=function(){this._tok.M=a.FDateM;this._tok.H=a.FDateH;this._tok.S=a.FDateS;this._tok.m=a.FDateM;this._tok.h=a.FDateH;this._tok.s=a.FDateS}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDateD");var a=sap.common.globalization.numericFormat;a.FDateD=function(b){this.__className="sap.common.globalization.numericFormat.FDateD";this._placeholders=0;this._displayLocaleInfo=b};a.FDateD.prototype.getPlaceholders=function(){return this._placeholders};a.FDateD.prototype.parse=function(d,c){var b=0;while(c.charAt(b)=="D"||c.charAt(b)=="d"){b++}if(b<=2){this._placeholders=b}else{if(b==3){this._placeholders=-1}else{if(b>=4){this._placeholders=-2}}}return b};a.FDateD.prototype.display=function(d){var c="";if(this._placeholders>=0){c+=d.getDate();while(c.length<this._placeholders){c="0"+c}}else{var b=d.getDay();if(this._placeholders==-1){c+=this.getShortDay(b)}else{c+=this.getDay(b)}}return c};a.FDateD.prototype.getDay=function(b){if(b==0){return this._displayLocaleInfo.IMSDAYNAME7()}if(b==1){return this._displayLocaleInfo.IMSDAYNAME1()}if(b==2){return this._displayLocaleInfo.IMSDAYNAME2()}if(b==3){return this._displayLocaleInfo.IMSDAYNAME3()}if(b==4){return this._displayLocaleInfo.IMSDAYNAME4()}if(b==5){return this._displayLocaleInfo.IMSDAYNAME5()}if(b==6||b==-1){return this._displayLocaleInfo.IMSDAYNAME6()}return this._displayLocaleInfo.IMSDAYNAME6()};a.FDateD.prototype.getShortDay=function(b){if(b==0){return this._displayLocaleInfo.IMSABBREVDAYNAME7().split(".")[0]}if(b==1){return this._displayLocaleInfo.IMSABBREVDAYNAME1().split(".")[0]}if(b==2){return this._displayLocaleInfo.IMSABBREVDAYNAME2().split(".")[0]}if(b==3){return this._displayLocaleInfo.IMSABBREVDAYNAME3().split(".")[0]}if(b==4){return this._displayLocaleInfo.IMSABBREVDAYNAME4().split(".")[0]}if(b==5){return this._displayLocaleInfo.IMSABBREVDAYNAME5().split(".")[0]}if(b==6||b==-1){return this._displayLocaleInfo.IMSABBREVDAYNAME6().split(".")[0]}return this._displayLocaleInfo.IMSABBREVDAYNAME6().split(".")[0]}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDateH");var a=sap.common.globalization.numericFormat;a.FDateH=function(){this.__className="sap.common.globalization.numericFormat.FDateH";this.placeholders=1;this.number=0;this.value=NaN};sap.common.globalization.numericFormat.FDateH.prototype.parse=function(d,c){var b=0;this.number=d.HNum+1;d.HBool=true;d.HNum=this.number;while(c.charAt(b)=="H"||c.charAt(b)=="h"){b++}if(b>1){this.placeholders=2}return b};a.FDateH.prototype.display=function(d){var b;if(isNaN(this.value)){b=d.getHrs()}else{b=this.value}if(!d.miltime){if(this.number==d.HNum){if(b>11){b=b-12}if(b==0){b=12}}}var c=""+b;while(this.placeholders>c.length){c="0"+c}return c}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDateM");var a=sap.common.globalization.numericFormat;a.FDateM=function(b){this.__className="sap.common.globalization.numericFormat.FDateM";this.bminute=false;this.placeholders=0;this.value=undefined;this._displayLocaleInfo=b};a.FDateM.prototype.parse=function(d,c){var b=0;while(c.charAt(b)=="M"||c.charAt(b)=="m"){b++}if(b<=2){if(d.HBool){this.bminute=true}d.HBool=false;this.placeholders=b}else{if(b==3){this.placeholders=-1}else{if(b==4){this.placeholders=-2}else{if(b==5){this.placeholders=-3}}}}return b};a.FDateM.prototype.display=function(g){var f="";if(this.placeholders>=0&&this.bminute){if(this.value==undefined){f+=g.getMin()}else{f+=this.value}while(f.length<this.placeholders){f="0"+f}}else{var d=g.getMonth();if(this.placeholders>=0){d++;f+=d;while(f.length<this.placeholders){f="0"+f}}else{var e=new Array(this._displayLocaleInfo.IMSMONTHNAME1(),this._displayLocaleInfo.IMSMONTHNAME2(),this._displayLocaleInfo.IMSMONTHNAME3(),this._displayLocaleInfo.IMSMONTHNAME4(),this._displayLocaleInfo.IMSMONTHNAME5(),this._displayLocaleInfo.IMSMONTHNAME6(),this._displayLocaleInfo.IMSMONTHNAME7(),this._displayLocaleInfo.IMSMONTHNAME8(),this._displayLocaleInfo.IMSMONTHNAME9(),this._displayLocaleInfo.IMSMONTHNAME10(),this._displayLocaleInfo.IMSMONTHNAME11(),this._displayLocaleInfo.IMSMONTHNAME12());var c=new Array(this._displayLocaleInfo.IMSABBREVMONTHNAME1(),this._displayLocaleInfo.IMSABBREVMONTHNAME2(),this._displayLocaleInfo.IMSABBREVMONTHNAME3(),this._displayLocaleInfo.IMSABBREVMONTHNAME4(),this._displayLocaleInfo.IMSABBREVMONTHNAME5(),this._displayLocaleInfo.IMSABBREVMONTHNAME6(),this._displayLocaleInfo.IMSABBREVMONTHNAME7(),this._displayLocaleInfo.IMSABBREVMONTHNAME8(),this._displayLocaleInfo.IMSABBREVMONTHNAME9(),this._displayLocaleInfo.IMSABBREVMONTHNAME10(),this._displayLocaleInfo.IMSABBREVMONTHNAME11(),this._displayLocaleInfo.IMSABBREVMONTHNAME12());if(this.placeholders==-1){f+=c[d]}else{if(this.placeholders==-3){f+=e[d].substring(0,1)}else{f+=e[d]}}}}return f}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDateS");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");sap.common.globalization.numericFormat.FDateS=function(){this.__className="sap.common.globalization.numericFormat.FDateS";this.splaceholders=1;this.msplaceholders=0;this.value=undefined;this.IMDecimalSeparator=sap.common.globalization.numericFormat.FLocalization.getInstance().IMDecimalSeparator;this.ms=NaN};sap.common.globalization.numericFormat.FDateS.prototype.parse=function(g,f){var e=0;var c=g.mask;var b=c.length;for(var d=b-1;d>=0;d--){if(c[d].__className=="sap.common.globalization.numericFormat.FDateM"){c[d].bminute=true;break}}while(f.charAt(e)=="S"||f.charAt(e)=="s"){e++}if(e>1){this.splaceholders=2}if(f.charAt(e)==this.IMDecimalSeparator.charAt(0)&&f.charAt(e+1)=="0"){e++;while(f.charAt(e)=="0"){e++;this.msplaceholders++}if(this.msplaceholders>g.ms){g.ms=this.msplaceholders}}return e};sap.common.globalization.numericFormat.FDateS.prototype.display=function(d){var c;if(this.value==undefined){c=""+d.getSec()}else{c=""+this.value}while(this.splaceholders>c.length){c="0"+c}if(this.msplaceholders>0){var a=d.getMS()/Math.pow(10,(3-this.msplaceholders));if(this.msplaceholders<this.ms){a=Math.floor(a)}else{a=Math.round(a)}var b=""+a;while(b.length<this.msplaceholders){b="0"+b}c+=this.IMDecimalSeparator+b}return c}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDateSep");sap.common.globalization.numericFormat.FDateSep=function(a,b){this.__className="sap.common.globalization.numericFormat.FDateSep";this._parseLocalInfo=a;this._displayLocaleInfo=b};sap.common.globalization.numericFormat.FDateSep.prototype.parse=function(c,b){var a=b.charAt(0);if(this._displayLocaleInfo.IMDateSeparator()!=null&&(a=="."||a=="/"||a=="-")){return 1}else{return 0}};sap.common.globalization.numericFormat.FDateSep.prototype.display=function(b){var a=this._displayLocaleInfo.IMDateSeparator();return a}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDateY");sap.common.globalization.numericFormat.FDateY=function(){this.__className="sap.common.globalization.numericFormat.FDateY";this.placeholders=2};sap.common.globalization.numericFormat.FDateY.prototype.parse=function(c,b){var a=0;while(b.charAt(a)=="Y"||b.charAt(a)=="y"){a++}if(a>2){this.placeholders=4}return a};sap.common.globalization.numericFormat.FDateY.prototype.display=function(b){var a=""+b.getYear();if(this.placeholders<4){a=a.substring(2)}return a}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FText");sap.common.globalization.numericFormat.FText=function(){this.__className="sap.common.globalization.numericFormat.FText";this.color=NaN;this.format="";this.condnum=0;this.cond={};this.numAts=0;this.mask=new Array()};sap.common.globalization.numericFormat.FText.tokens="@";sap.common.globalization.numericFormat.FText.prototype.parse=function(b){var a=0;while(b.charAt(a)=="@"){a++}this.numAts=a;return a};sap.common.globalization.numericFormat.FText.prototype.display=function(a){var c="";for(var b=0;b<this.numAts;b++){c+=a.toString()}return c}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDate");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateM");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateD");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateY");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateH");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateS");sap.common.globalization.require("sap.common.globalization.numericFormat.FTimeSep");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateA");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateB");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateSep");var a=sap.common.globalization.numericFormat;a.FDate=function(c,b){this.__className="sap.common.globalization.numericFormat.FDate";this.date;this.color;this.condnum;this.cond;this.tok={};this.HBool=false;this.serial=37500;this.format="";this.HNum=0;this.miltime=true;this.ms=0;this.mask=new Array();this._parseLocaleInfo=c;this._displayLocaleInfo=b;this._inputIsDateType=false;this.initializeTokenMap()};a.FDate.tokens="MDYHSAmdyhsa";a.FDate.prototype.parse=function(f){var g=f.charAt(0);if(g=="."){g=f.substring(0,2)}var e=this.tok[g];if(e==undefined){return 0}var d=this.createTokenFormatter(e);var b=d.parse(this,f);if(b>0){this.mask.push(d)}else{b=0}return b};a.FDate.prototype.display=function(d){this.setNumber(d);var c=this.mask;var b=c.length;var f="";for(var e=0;e<b;e++){if((typeof c[e])=="object"){f+=c[e].display(this)}else{f+=c[e]}}return f};a.FDate.prototype.getMaskClone=function(){if(this.mask){return this.mask.slice()}return[]};a.FDate.prototype.getYear=function(){if(this._inputIsDateType){return this.date.getFullYear()}if(this.serial>=0&&this.serial<1){return 1900}return this.date.getUTCFullYear()};a.FDate.prototype.getMonth=function(){if(this._inputIsDateType){return this.date.getMonth()}if(this.serial>=0&&this.serial<1){return 0}return this.date.getUTCMonth()};a.FDate.prototype.getDate=function(){if(this._inputIsDateType){return this.date.getDate()}if(this.serial>=0&&this.serial<1){return 0}if(this.serial==60){return 29}return this.date.getUTCDate()};a.FDate.prototype.getDay=function(){var b=this.date.getUTCDay();if(this.serial<60){b--}if(this._inputIsDateType){b=this.date.getDay()}return b};a.FDate.prototype.getHrs=function(){if(this._inputIsDateType){return this.date.getHours()}return this.date.getUTCHours()};a.FDate.prototype.getMin=function(){if(this._inputIsDateType){return this.date.getMinutes()}return this.date.getUTCMinutes()};a.FDate.prototype.getSec=function(){if(this._inputIsDateType){return this.date.getSeconds()}return this.date.getUTCSeconds()};a.FDate.prototype.getMS=function(){if(this._inputIsDateType){return this.date.getMilliseconds()}return this.date.getUTCMilliseconds()};a.FDate.prototype.setNumber=function(b){if(b instanceof Date){var e=new Date();e.setTime(b.getTime());this.date=e;this._inputIsDateType=true;this.serial=37500;return}this._inputIsDateType=false;this.serial=b;if(b<60){b++}var d=b*86400*1000;var c=d-(2209161600*1000);this.date=new Date(c);if(this.date.getUTCMilliseconds()>=500){this.date.setUTCMilliseconds(this.date.getUTCMilliseconds()+500)}};a.FDate.prototype.createTokenFormatter=function(b){var c=null;switch(b){case a.FDateM:c=new a.FDateM(this._displayLocaleInfo);break;case a.FDateD:c=new a.FDateD(this._displayLocaleInfo);break;case a.FDateY:c=new a.FDateY();break;case a.FDateH:c=new a.FDateH();break;case a.FDateS:c=new a.FDateS();break;case a.FDateSep:c=new a.FDateSep(this._parseLocaleInfo,this._displayLocaleInfo);break;case a.FTimeSep:c=new a.FTimeSep(this._parseLocaleInfo,this._displayLocaleInfo);break;case a.FDateA:c=new a.FDateA(this._displayLocaleInfo);break;case a.FDateB:c=new a.FDateB(this._displayLocaleInfo);break;default:}return c};a.FDate.prototype.initializeTokenMap=function(){this.tok.M=a.FDateM;this.tok.D=a.FDateD;this.tok.Y=a.FDateY;this.tok.H=a.FDateH;this.tok.S=a.FDateS;this.tok.A=a.FDateA;this.tok.m=a.FDateM;this.tok.d=a.FDateD;this.tok.y=a.FDateY;this.tok.h=a.FDateH;this.tok.s=a.FDateS;this.tok.a=a.FDateA;this.tok["["]=a.FDateB;this.tok["/"]=a.FDateSep;this.tok[".M"]=a.FDateSep;this.tok[".D"]=a.FDateSep;this.tok[".Y"]=a.FDateSep;this.tok["-"]=a.FDateSep;this.tok[".m"]=a.FTimeSep;this.tok[".h"]=a.FTimeSep;this.tok[".s"]=a.FTimeSep;this.tok[":"]=a.FTimeSep};a.FDate.prototype.toString=function(){var b="[FDate]\n";for(var c in this){b=b+c+" = "+this[c]+"\n"}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDateForPVL");sap.common.globalization.require("sap.common.globalization.numericFormat.FDefaultDateD");sap.common.globalization.require("sap.common.globalization.numericFormat.FDate");sap.common.globalization.numericFormat.FDateForPVL=function(c,b){sap.common.globalization.numericFormat.FDateForPVL.superclass.constructor.apply(this,[c,b]);this.__className="sap.common.globalization.numericFormat.FDateForPVL"};sap.common.globalization.numericFormat.FDateForPVL=sap.common.globalization.extend(sap.common.globalization.numericFormat.FDateForPVL,sap.common.globalization.numericFormat.FDate);var a=sap.common.globalization.numericFormat.FDateForPVL;a.prototype.createTokenFormatter=function(b){var c=null;if(b==sap.common.globalization.numericFormat.FDefaultDateD){c=new sap.common.globalization.numericFormat.FDefaultDateD(this._displayLocaleInfo)}else{c=a.superclass.createTokenFormatter.call(this,b)}return c};a.prototype.initializeTokenMap=function(){a.superclass.initializeTokenMap.apply(this);this.tok.d=sap.common.globalization.numericFormat.FDefaultDateD;this.tok.D=sap.common.globalization.numericFormat.FDefaultDateD}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDefaultDateSep");sap.common.globalization.numericFormat.FDefaultDateSep=function(b,a){sap.common.globalization.numericFormat.FDefaultDateSep.superclass.constructor.call(this,b,a);this.__className="sap.common.globalization.numericFormat.FDefaultDateSep"};sap.common.globalization.numericFormat.FDefaultDateSep=sap.common.globalization.extend(sap.common.globalization.numericFormat.FDefaultDateSep,sap.common.globalization.numericFormat.FDateSep);sap.common.globalization.numericFormat.FDefaultDateSep.prototype.parse=function(e,d){var a=this._parseLocalInfo.IMDateSeparator();if(a){var c=a.length;var b=d.substr(0,c);if(b==a){return c}else{return 0}}return 0}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDefaultDateH");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateH");sap.common.globalization.numericFormat.FDefaultDateH=function(){sap.common.globalization.numericFormat.FDefaultDateH.superclass.constructor.apply(this);this.__className="sap.common.globalization.numericFormat.FDefaultDateH";this._is12HourStyle=false};sap.common.globalization.numericFormat.FDefaultDateH=sap.common.globalization.extend(sap.common.globalization.numericFormat.FDefaultDateH,sap.common.globalization.numericFormat.FDateH);sap.common.globalization.numericFormat.FDefaultDateH.prototype.parse=function(c,b){var a=0;this.number=c.HNum+1;c.HBool=true;c.HNum=this.number;this._is12HourStyle=true;while(b.charAt(a)=="H"||b.charAt(a)=="h"){if(b.charAt(a)=="H"){this._is12HourStyle=false}a++}if(a>1){this.placeholders=2}return a};sap.common.globalization.numericFormat.FDefaultDateH.prototype.display=function(c){var a;if(isNaN(this.value)){a=c.getHrs()}else{a=this.value}if(this._is12HourStyle){if(this.number==c.HNum){if(a>11){a=a-12}if(a==0){a=12}}}var b=""+a;while(this.placeholders>b.length){b="0"+b}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDefaultDateG");sap.common.globalization.require("sap.common.globalization.utils.StringUtil");sap.common.globalization.numericFormat.FDefaultDateG=function(a){this.__className="sap.common.globalization.numericFormat.FDefaultDateG";this._displayLocInfo=a;this._count=0};sap.common.globalization.numericFormat.FDefaultDateG.prototype.parse=function(c,b){if(b&&!sap.common.globalization.utils.StringUtil.isBlankString(b)){if(this._displayLocInfo&&this._displayLocInfo.IMEraToken()){this._count=0;var a=b.charAt(this._count);while(a=="G"){this._count++;a=b.charAt(this._count)}return this._count}}return 0};sap.common.globalization.numericFormat.FDefaultDateG.prototype.display=function(b){var a="";if(this._displayLocInfo&&this._displayLocInfo.IMEraToken()){switch(this._count){case 4:case 5:case 1:case 2:case 3:default:a=this._displayLocInfo.IMEraToken()}}return a}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDefaultDateD");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateD");var a=sap.common.globalization.numericFormat;sap.common.globalization.numericFormat.FDefaultDateD=function(b){sap.common.globalization.numericFormat.FDefaultDateD.superclass.constructor.call(this,b);this.__className="sap.common.globalization.numericFormat.FDefaultDateD"};sap.common.globalization.numericFormat.FDefaultDateD=sap.common.globalization.extend(sap.common.globalization.numericFormat.FDefaultDateD,sap.common.globalization.numericFormat.FDateD);a.FDefaultDateD.prototype.getShortDay=function(b){if(b==0){return this._displayLocaleInfo.IMSABBREVDAYNAME7()}if(b==1){return this._displayLocaleInfo.IMSABBREVDAYNAME1()}if(b==2){return this._displayLocaleInfo.IMSABBREVDAYNAME2()}if(b==3){return this._displayLocaleInfo.IMSABBREVDAYNAME3()}if(b==4){return this._displayLocaleInfo.IMSABBREVDAYNAME4()}if(b==5){return this._displayLocaleInfo.IMSABBREVDAYNAME5()}if(b==6||b==-1){return this._displayLocaleInfo.IMSABBREVDAYNAME6()}return this._displayLocaleInfo.IMSABBREVDAYNAME6()}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDefaultDate");sap.common.globalization.require("sap.common.globalization.numericFormat.FDefaultDateD");sap.common.globalization.require("sap.common.globalization.numericFormat.FDefaultDateG");sap.common.globalization.require("sap.common.globalization.numericFormat.FDefaultDateH");sap.common.globalization.require("sap.common.globalization.numericFormat.FTimeSep");sap.common.globalization.require("sap.common.globalization.numericFormat.FDefaultDateSep");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateM");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateD");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateY");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateH");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateS");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateA");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateB");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateSep");sap.common.globalization.require("sap.common.globalization.numericFormat.FDefaultDateSep");sap.common.globalization.numericFormat.FDefaultDate=function(b,a){sap.common.globalization.numericFormat.FDefaultDate.superclass.constructor.apply(this,[b,a]);this.__className="sap.common.globalization.numericFormat.FDefaultDate"};sap.common.globalization.numericFormat.FDefaultDate=sap.common.globalization.extend(sap.common.globalization.numericFormat.FDefaultDate,sap.common.globalization.numericFormat.FDate);sap.common.globalization.numericFormat.FDefaultDate.prototype.createTokenFormatter=function(a){var c=sap.common.globalization.numericFormat;var b=null;switch(a){case c.FDateM:b=new c.FDateM(this._displayLocaleInfo);break;case c.FDefaultDateD:b=new c.FDefaultDateD(this._displayLocaleInfo);break;case c.FDateY:b=new c.FDateY();break;case c.FDefaultDateH:b=new c.FDefaultDateH();break;case c.FDateS:b=new c.FDateS();break;case c.FDefaultDateSep:b=new c.FDefaultDateSep(this._parseLocaleInfo,this._displayLocaleInfo);break;case c.FTimeSep:b=new c.FTimeSep(this._parseLocaleInfo,this._displayLocaleInfo);break;case c.FDateA:b=new c.FDateA(this._displayLocaleInfo);break;case c.FDateB:b=new c.FDateB(this._displayLocaleInfo);break;case c.FDefaultDateG:b=new c.FDefaultDateG(this._displayLocaleInfo);break;default:}return b};sap.common.globalization.numericFormat.FDefaultDate.prototype.initializeTokenMap=function(){var a=sap.common.globalization.numericFormat;this.tok.M=a.FDateM;this.tok.Y=a.FDateY;this.tok.S=a.FDateS;this.tok.A=a.FDateA;this.tok.m=a.FDateM;this.tok.y=a.FDateY;this.tok.s=a.FDateS;this.tok.a=a.FDateA;this.tok["["]=a.FDateB;this.tok.D=a.FDefaultDateD;this.tok.d=a.FDefaultDateD;this.tok.H=a.FDefaultDateH;this.tok.h=a.FDefaultDateH;if(this._parseLocaleInfo&&this._parseLocaleInfo.IMDateSeparator){if(this._parseLocaleInfo.IMDateSeparator()=="."){this.tok[".M"]=a.FDefaultDateSep;this.tok[".D"]=a.FDefaultDateSep;this.tok[".d"]=a.FDefaultDateSep;this.tok[".Y"]=a.FDefaultDateSep;this.tok[".y"]=a.FDefaultDateSep}else{this.tok[this._parseLocaleInfo.IMDateSeparator()]=a.FDefaultDateSep}}if(this._parseLocaleInfo&&this._parseLocaleInfo.IMTimeSeparator()){if(this._parseLocaleInfo.IMDateSeparator=="."){this.tok[".m"]=a.FTimeSep;this.tok[".h"]=a.FTimeSep;this.tok[".H"]=a.FTimeSep;this.tok[".s"]=a.FTimeSep;this.tok[".S"]=a.FTimeSep}else{this.tok[this._parseLocaleInfo.IMTimeSeparator()]=a.FTimeSep}}this.tok.G=a.FDefaultDateG}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.DefaultGroupingStrategy");sap.common.globalization.numericFormat.DefaultGroupingStrategy=function(){this.__className="sap.common.globalization.numericFormat.DefaultGroupingStrategy"};var a=sap.common.globalization.numericFormat.DefaultGroupingStrategy;a._instance=new sap.common.globalization.numericFormat.DefaultGroupingStrategy();a.prototype.nextGroupDigits=function(){return 2};a.instance=function(){return a._instance}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.Helper");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");sap.common.globalization.numericFormat.Helper.isThousandsSeparator=function(d,b,e){var e=e||null;var a=(e?e:sap.common.globalization.numericFormat.FLocalization.getInstance().IMThousandsSeparator());if(a.charAt(0)==" "){for(var c=b;c<d.length;++c){if(d.charAt(c)!=" "){break}}if(d.charAt(c)=="â¬"||d.charAt(c)=="Ð³"||d.charAt(c)=="k"||d.charAt(c)=="S"||d.charAt(c)=="L"||d.charAt(c)=="m"||d.charAt(c)=="K"){return false}}return(d.charAt(b)==a.charAt(0))}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FCurr");sap.common.globalization.numericFormat.FCurr=function(b,a){this.__className="sap.common.globalization.numericFormat.FCurr";this.display="";this._parseLocaleInfo=b;this._displayLocaleInfo=a};sap.common.globalization.numericFormat.FCurr.prototype.parse=function(c,b){var a=this._parseLocaleInfo.currencySymbol();var d=this._displayLocaleInfo.currencySymbol();if(d!=null&&a!=null&&a!=d){c.currencyIndex=c.mask.length;this.display=d;return a.length}else{return 0}}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FNum0");sap.common.globalization.require("sap.common.globalization.numericFormat.Helper");sap.common.globalization.numericFormat.FNum0=function(a){this.__className="sap.common.globalization.numericFormat.FNum0";this._parseLocaleInfo=a;this.display="0"};sap.common.globalization.numericFormat.FNum0.prototype.parse=function(e,d){var b=1;if(sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,1,this._parseLocaleInfo.thousandsSeparator())){var f=d.charAt(2);if(f!="#"&&f!="?"&&f!="0"){if(!sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,2,this._parseLocaleInfo.thousandsSeparator())){e.scale=e.scale/1000}else{e.scale=e.scale/1000000}}else{e.bcomma=true}var a=1;while(sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,a++,this._parseLocaleInfo.thousandsSeparator())){b++}}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FNumP");sap.common.globalization.numericFormat.FNumP=function(){this.__className="sap.common.globalization.numericFormat.FNumP";this.display="%"};sap.common.globalization.numericFormat.FNumP.prototype.parse=function(b,a){b.scale=b.scale*100;return -1}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FNumQ");sap.common.globalization.require("sap.common.globalization.numericFormat.Helper");sap.common.globalization.numericFormat.FNumQ=function(a){this.__className="sap.common.globalization.numericFormat.FNumQ";this._parseLocaleInfo=a;this.display=" "};sap.common.globalization.numericFormat.FNumQ.prototype.parse=function(e,d){var b=1;if(sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,1,this._parseLocaleInfo.thousandsSeparator())){var f=d.charAt(2);if(f!="#"&&f!="?"&&f!="0"&&!sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,2,this._parseLocaleInfo.thousandsSeparator())){e.scale=e.scale/1000}else{e.bcomma=true}var a=1;while(sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,a++,this._parseLocaleInfo.thousandsSeparator())){b++}}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FNumS");sap.common.globalization.require("sap.common.globalization.numericFormat.Helper");sap.common.globalization.numericFormat.FNumS=function(a){this.__className="sap.common.globalization.numericFormat.FNumS";this._parseLocaleInfo=a;this.display=""};sap.common.globalization.numericFormat.FNumS.prototype.parse=function(e,d){var b=1;if(sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,1,this._parseLocaleInfo.thousandsSeparator())){var f=d.charAt(2);if(f!="#"&&f!="?"&&f!="0"){if(!sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,2,this._parseLocaleInfo.thousandsSeparator())){e.scale=e.scale/1000}else{e.scale=e.scale/1000000}}else{e.bcomma=true}var a=1;while(sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,a++,this._parseLocaleInfo.thousandsSeparator())){b++}}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FPeriod");sap.common.globalization.require("sap.common.globalization.numericFormat.Helper");sap.common.globalization.numericFormat.FPeriod=function(b,a){this.__className="sap.common.globalization.numericFormat.FPeriod";this._parseLocaleInfo=b;this.display=a.decimalSeparator()};sap.common.globalization.numericFormat.FPeriod.prototype.parse=function(e,d){var b=-1;if(sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,1,this._parseLocaleInfo.thousandsSeparator())){var f=d.charAt(2);if(f!="#"&&f!="?"&&f!="0"&&!sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,2,this._parseLocaleInfo.thousandsSeparator())){e.scale=e.scale/1000}var a=1;while(sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,a++,this._parseLocaleInfo.thousandsSeparator())){b++}}if(e.period==-1){e.period=e.mask.length}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FNumber");sap.common.globalization.numericFormat.FNumber=function(d,c){this.__className="sap.common.globalization.numericFormat.FNumber";this.scale=1;this.bcomma=false;this.bsign=true;this.period=-1;this.numfore=undefined;this.numaft=undefined;this.sign="";this.mask=new Array();this.mfore=new Array();this.maft=new Array();this.format=undefined;this.currencyIndex=-1;this._tok={};this._tok["#"]=sap.common.globalization.numericFormat.FNumS;this._tok["?"]=sap.common.globalization.numericFormat.FNumQ;this._tok["%"]=sap.common.globalization.numericFormat.FNumP;this._tok["0"]=sap.common.globalization.numericFormat.FNum0;this.condnum=0;this.cond={};var a=d.decimalSeparator();this._tok[a]=sap.common.globalization.numericFormat.FPeriod;this.IMDecimalSeparator=a;this.parseLocaleInfo=d;this.displayLocaleInfo=c;this.IMThousandsSeparator=c.thousandsSeparator();var b=this.parseLocaleInfo.currencySymbol();if(b){this._tok[b]=sap.common.globalization.numericFormat.FCurr}};sap.common.globalization.numericFormat.FNumber.tokens="#?%0";sap.common.globalization.numericFormat.FNumber.prototype.parse=function(f){if(this.format==null){this.format=f}var g=f.charAt(0);if(this._tok[g]==undefined||(g==this.IMDecimalSeparator&&(f.length>1&&f.charAt(1)!="#"&&f.charAt(1)!="0"))){return 0}var e=this.createTokenFormatter(this._tok[g]);var d=e.parse(this,f);if(this.period>1){var a=true}if(d>0){var b=this.mask.length;this.mask.push(e);if(this.currencyIndex!=b){if(this.period==-1){this.mfore.push(b)}else{this.maft.push(b)}}}else{if(d<0){this.mask.push(e);d=Math.abs(d)}else{d=0}}return d};sap.common.globalization.numericFormat.FNumber.prototype.display=function(k){if(typeof(k)!="number"){return k}if(isNaN(k)||!isFinite(k)){return k}if(this.mfore.length==0&&this.maft.length==0){return this.format}this.setNumber(k);var q=new Array();var e=this.mfore.length;var c=3;var m=this.period;var f=(m==-1)?(this.mask.length):m;var g;var o;var p;for(var h=e-1;h>=0;h--){m=this.mfore[h];for(var g=f-1;g>m;g--){p=this.mask[g];if((typeof p)=="object"){q.unshift(p.display)}else{q.unshift(p)}}if(this.numfore.length>0){if(this.bcomma){if(c--==0){q.unshift(this.IMThousandsSeparator);c=2}}o=this.numfore.length-1;q.unshift(this.numfore.charAt(o));this.numfore=this.numfore.substring(0,o)}else{var n=this.mask[m].display;if(n.length!=0){if(this.bcomma&&c--==0){q.unshift(this.IMThousandsSeparator);c=2}q.unshift(this.mask[m].display)}}f=m}if(this.numfore.length>0){if(this.bcomma){while(this.numfore.length>0){if(c--==0){q.unshift(this.IMThousandsSeparator);c=2}o=this.numfore.length-1;q.unshift(this.numfore.charAt(o));this.numfore=this.numfore.substring(0,o)}}else{q.unshift(this.numfore)}}p=this.mask;if(this.currencyIndex!=-1){h=0}for(g=f-1;g>=0;g--){if((typeof p[h])=="object"){q.unshift(this.mask[g].display)}else{q.unshift(this.mask[g])}}e=this.mask.length;h=(this.period==-1)?(e):(this.period);m=0;for(;h<e;h++){if((typeof p[h])=="object"){if(this.maft[m]==h){m++;if(this.numaft.length>0){q.push(this.numaft.charAt(0));this.numaft=this.numaft.substring(1)}else{q.push(p[h].display)}}else{q.push(p[h].display)}}else{q.push(p[h])}}var b;if(this.bsign){b=this.sign+q.join("")}else{b=q.join("")}return b};sap.common.globalization.numericFormat.FNumber.prototype.setNumber=function(c){var a=this.maft.length;if(this.format.charAt(this.format.length-1)=="%"){var d=Math.pow(10,a+1+2);c=c*d;c=c/(d/this.scale)}else{c=c*this.scale}c=this.excel_round(c,a);var b=c.toString().split(".");this.numfore=b[0];if(this.numfore.charAt(0)=="-"){this.sign="-";this.numfore=this.numfore.substring(1)}else{this.sign=""}if(this.numfore.charAt(0)=="0"){this.numfore=this.numfore.substring(1)}this.numaft=undefined;if(b.length<2){this.numaft=""}else{this.numaft=b[1]}};sap.common.globalization.numericFormat.FNumber.prototype.createTokenFormatter=function(a){var b=null;var c=sap.common.globalization.numericFormat;switch(a){case c.FNumS:b=new sap.common.globalization.numericFormat.FNumS(this.parseLocaleInfo);break;case c.FNumQ:b=new sap.common.globalization.numericFormat.FNumQ(this.parseLocaleInfo);break;case c.FNumP:b=new sap.common.globalization.numericFormat.FNumP();break;case c.FNum0:b=new sap.common.globalization.numericFormat.FNum0(this.parseLocaleInfo);break;case c.FPeriod:b=new sap.common.globalization.numericFormat.FPeriod(this.parseLocaleInfo,this.displayLocaleInfo);break;case c.FCurr:b=new sap.common.globalization.numericFormat.FCurr(this.parseLocaleInfo,this.displayLocaleInfo);break;default:}return b};sap.common.globalization.numericFormat.FNumber.prototype.excel_round=function(a,f){var d=false;if(a<0){d=true;a=-a}var e,c;var b=0;var g=Math.pow(10,f);e=Math.floor(a*g);b=(e+0.5)/g;c=(e+1)/g;e/=g;a=(a<b)?e:c;if(d){a=-a}return a}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDefaultNumber");sap.common.globalization.require("sap.common.globalization.numericFormat.FNumber");sap.common.globalization.require("sap.common.globalization.numericFormat.DefaultGroupingStrategy");sap.common.globalization.require("sap.common.globalization.numericFormat.FPeriod");sap.common.globalization.numericFormat.FDefaultNumber=function(b,a){sap.common.globalization.numericFormat.FDefaultNumber.superclass.constructor.apply(this,[b,a]);this.__className="sap.common.globalization.numericFormat.FDefaultDateNumber";this._groupingStrategy=sap.common.globalization.numericFormat.DefaultGroupingStrategy.instance()};sap.common.globalization.numericFormat.FDefaultNumber=sap.common.globalization.extend(sap.common.globalization.numericFormat.FDefaultNumber,sap.common.globalization.numericFormat.FNumber);sap.common.globalization.numericFormat.FDefaultNumber.prototype.display=function(m){if(typeof(m)!="number"){return m}if(isNaN(m)||!isFinite(m)){return m}if(this.mfore.length==0&&this.maft.length==0){return this.format}this.setNumber(m);var r=new Array();var e=this.mfore.length;var c=3;var n=this.period;var g=(n==-1)?(this.mask.length):n;var h;var p;var q;for(var k=e-1;k>=0;k--){n=this.mfore[k];for(h=g-1;h>n;h--){q=this.mask[h];if((typeof q)=="object"){r.unshift(q.display)}else{r.unshift(q)}}if(this.numfore.length>0){if(this.bcomma){if(c--==0){r.unshift(this.IMThousandsSeparator);c=this._groupingStrategy.nextGroupDigits()}}p=this.numfore.length-1;r.unshift(this.numfore.charAt(p));this.numfore=this.numfore.substring(0,p)}else{var o=this.mask[n].display;if(o.length!=0){if(this.bcomma&&c--==0){r.unshift(this.IMThousandsSeparator);c=this._groupingStrategy.nextGroupDigits()}r.unshift(this.mask[n].display)}}g=n}if(this.numfore.length>0){if(this.bcomma){while(this.numfore.length>0){if(c--==0){r.unshift(this.IMThousandsSeparator);c=this._groupingStrategy.nextGroupDigits()}p=this.numfore.length-1;r.unshift(this.numfore.charAt(p));this.numfore=this.numfore.substring(0,p)}}else{r.unshift(this.numfore)}}q=this.mask;if(this.currencyIndex!=-1){k=0}for(h=g-1;h>=0;h--){if((typeof q[k])=="object"){r.unshift(this.mask[h].display)}else{r.unshift(this.mask[h])}}e=this.mask.length;k=(this.period==-1)?(e):(this.period);n=0;var f=false;for(;k<e;k++){if((typeof q[k])=="object"){if(q[k].__className=="sap.common.globalization.numericFormat.FPeriod"&&!this.numaft){f=true;continue}if(this.maft[n]==k){n++;if(this.numaft.length>0){if(!f){r.push(this.numaft.charAt(0))}this.numaft=this.numaft.substring(1)}else{r.push(q[k].display)}}else{r.push(q[k].display)}}else{r.push(q[k])}}var b;if(this.bsign){b=this.sign+r.join("")}else{b=r.join("")}return b};sap.common.globalization.numericFormat.FDefaultNumber.prototype.groupingStrategy=function(a){if(this._groupingStrategy!=a){this._groupingStrategy=a}}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FT");sap.common.globalization.require("sap.common.globalization.utils.BaseUtils");sap.common.globalization.require("sap.common.globalization.numericFormat.FDate");sap.common.globalization.require("sap.common.globalization.numericFormat.FText");sap.common.globalization.require("sap.common.globalization.numericFormat.FNumber");sap.common.globalization.require("sap.common.globalization.defaultFormat.CustomDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.CustomNumericFormatLocaleFactory");sap.common.globalization.numericFormat.FT=function(c,b){this.__className="sap.common.globalization.numericFormat.FT";this._hasCustomCondition=false;this.color=undefined;this.o=new Array();this._dateLocaleFactory=c?c:sap.common.globalization.defaultFormat.CustomDateFormatLocaleFactory.getInstance();this._numericLocaleFactory=b?b:sap.common.globalization.defaultFormat.CustomNumericFormatLocaleFactory.getInstance();this._isParsedSuccess=false};var a=sap.common.globalization.numericFormat.FT;a.ftarr=new Array();a._CONDITION_TOKENS="=<>";a._equals=function(d,c){return(d==c)};a._neq=function(d,c){return(d!=c)};a._gthan=function(d,c){return(d>c)};a._gte=function(d,c){return(d>=c)};a._lthan=function(d,c){return(d<c)};a._lte=function(d,c){return(d<=c)};a._CONDITIONS={"=":sap.common.globalization.numericFormat.FT._equals,"<>":sap.common.globalization.numericFormat.FT._neq,"<":sap.common.globalization.numericFormat.FT._lthan,"<=":sap.common.globalization.numericFormat.FT._lte,">":sap.common.globalization.numericFormat.FT._gthan,">=":sap.common.globalization.numericFormat.FT._gte};a._COLORS={black:0,blue:255,cyan:65535,green:65280,magenta:16711935,red:16711680,white:16777215,yellow:16776960};a.prototype._isNumeric=function(e){var d="#?%";var b=d.length;for(var c=0;c<b;c++){if(e.indexOf(d.charAt(c))!=-1){return true}}return false};a.prototype.isParsedSuccess=function(){return this._isParsedSuccess};a.prototype.parse=function(x){this._isParsedSuccess=false;this._hasCustomCondition=false;var z=x;var t=x.length;var B;var d=0;for(var w=0;w<t;w++){B=z.charAt(w);if(B=='"'){while(w<t){if(z.charAt(++w)=='"'&&z.charAt(w-1)!="\\"){break}}continue}if(B=="\\"||B=="_"||B=="*"){w++;continue}if(B==";"){if(this.o[d]==undefined){this.o[d]=new sap.common.globalization.numericFormat.FText()}this.o[d].format=z.substring(0,w);d++;z=z.substring(w+1);t=z.length;w=-1;continue}if(B=="["){var r="";while(z.charAt(++w)!="]"&&(w<t)){r+=z.charAt(w)}var A=r.length;var n=r.charAt(0);if(n=="s"||n=="m"||n=="h"){for(var v=1;v<A;v++){var k=r.charAt(v);if(n!=k){break}}if(v==A){if(this.o[d]==undefined){this.o[d]=this._dateLocaleFactory.createFDate()}}}}var D=sap.common.globalization.numericFormat.FDate.tokens.indexOf(B);if(sap.common.globalization.numericFormat.FDate.tokens.indexOf(B)!=-1&&!this._isNumeric(x)){if(this.o[d]==undefined){this.o[d]=this._dateLocaleFactory.createFDate()}this.o[d]=this._dateLocaleFactory.createFDate()}else{if(sap.common.globalization.numericFormat.FNumber.tokens.indexOf(B)!=-1){if(this.o[d]==undefined){this.o[d]=this._numericLocaleFactory.createFNumber();if(d==1){this.o[d].bsign=false}}}else{if(sap.common.globalization.numericFormat.FText.tokens.indexOf(B)!=-1){if(this.o[d]==undefined){this.o[d]=new sap.common.globalization.numericFormat.FText()}}}}}if(this.o[d]==undefined){this.o[d]=this._numericLocaleFactory.createFNumber()}else{this._isParsedSuccess=true}this.o[d].format=z;var g=this.o.length;for(var s=0;s<g;s++){var m=this.o[s];m.condnum=0;if(s==0){m.cond=sap.common.globalization.numericFormat.FT._gthan}else{if(s==1){m.cond=sap.common.globalization.numericFormat.FT._lthan}else{if(s==2){m.cond=sap.common.globalization.numericFormat.FT._equals}}}var C=m.mask;var h=false;z=m.format;t=z.length;for(var v=0;v<t;v++){B=z.charAt(v);if(B=='"'){h=!h;continue}if(B=="\\"){v++;B=z.charAt(v);C.push(B);continue}if(h){C.push(B);continue}if(B=="*"){v++;continue}if(B=="_"){v++;C.push(" ");continue}if(B=="["){n=z.charAt(v+1);k=z.charAt(v+2);if(n=="$"&&k!="-"){var y=z.indexOf("]",v+1);if(y!=-1){var u=z.substring(v+1,y);if(r.indexOf("-")!=-1){u=r.substring(1,r.indexOf("-"))}else{u=r.substring(1)}for(var b=0;b<u.length;++b){C.push(u.charAt(b))}v=y;continue}}else{r=z.substring(v+1);r=r.substring(0,r.indexOf("]")).toLowerCase();if(sap.common.globalization.numericFormat.FT._COLORS[r]!=undefined){m.color=sap.common.globalization.numericFormat.FT._COLORS[r];v+=r.length+1;continue}else{if(r=="h"||r=="m"||r=="s"){}else{var e=1;while(r.charAt(e)!==""&&sap.common.globalization.numericFormat.FT._CONDITION_TOKENS.indexOf(r.charAt(e))!=-1){e++}var p=r.substring(0,e);if(sap.common.globalization.numericFormat.FT._CONDITIONS[p]!=undefined){m.cond=sap.common.globalization.numericFormat.FT._CONDITIONS[p];m.condnum=r.substring(e);v+=r.length+1;this._hasCustomCondition=true;continue}else{v+=r.length+1;continue}}}}}var E=m.parse(z.substring(v));if(E>0){v+=E-1}else{C.push(B)}}}};a.prototype.display=function(d){var f=this.o[0];var b=this.o.length;if(b>3&&sap.common.globalization.utils.BaseUtils.isString(d)){f=this.o[3]}else{if(this._hasCustomCondition&&b>0){if(b<=3){f=this.o[b-1]}else{f=this.o[2]}}for(var e=0;e<3&&e<b;e++){var c=this.o[e];if(c&&c.cond(d,c.condnum)){f=c;break}}}if(!isNaN(f.color)){this.color=f.color}else{this.color=undefined}return(f.display(d))};a.prototype.getNumericDisplayLoacleInfo=function(){return this._numericLocaleFactory.getNumericDisplayLocaleInfo()}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FTBoolean");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultBooleanFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.NumericFormatManager;");sap.common.globalization.require("sap.common.globalization.numericFormat.FT");sap.common.globalization.require("sap.common.globalization.utils.BaseUtils");var a=sap.common.globalization.numericFormat;sap.common.globalization.numericFormat.FTBoolean=function(c,b){a.FTBoolean.superclass.constructor.apply(this,[c,b]);this.__className="sap.common.globalization.numericFormat.FTBoolean";c=c||null;b=b||null;this._booleanLocaleFactory=sap.common.globalization.defaultFormat.DefaultBooleanFormatLocaleFactory.getInstance()};a.FTBoolean.BOOLEAN_TOKEN="SAP_DEFAULT_BOOLEAN_FORMAT";a.FTBoolean=sap.common.globalization.extend(a.FTBoolean,a.FT);sap.common.globalization.numericFormat.FTBoolean.prototype.parse=function(b){if(b==a.FTBoolean.BOOLEAN_TOKEN){this.o[0]=this}else{this.o[0]=null}};sap.common.globalization.numericFormat.FTBoolean.prototype.display=function(b){var d=String(b);var c=this._booleanLocaleFactory.getBooleanDisplayLocaleInfo();if(c&&this.o[0].__className=="sap.common.globalization.numericFormat.FTBoolean"){if(sap.common.globalization.utils.BaseUtils.isBoolean(b)){d=b?c.trueString():c.falseString()}else{if(sap.common.globalization.utils.BaseUtils.isString(b)&&(String(b).toLowerCase()=="true"||String(b).toLowerCase()=="false")){d=String(b).toLowerCase()=="true"?c.trueString():c.falseString()}}}return d}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FTimeSep");sap.common.globalization.numericFormat.FTimeSep=function(b,a){this._parseLocale=b;this._displayLocale=a};sap.common.globalization.numericFormat.FTimeSep.prototype.parse=function(c,b){var a=b.charAt(0);if(this._displayLocale.IMTimeSeparator()!=null&&(a==":"||a==".")){return 1}else{return 0}};sap.common.globalization.numericFormat.FTimeSep.prototype.display=function(a){return this._displayLocale.IMTimeSeparator()}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FTUtil");sap.common.globalization.numericFormat.FTUtil.isBooleanFT=function(a){return a&&(a.__className=="sap.common.globalization.numericFormat.FTBoolean")};sap.common.globalization.numericFormat.FTUtil.isDate=function(a){return a&&a.o&&a.o.length>0&&(a.o[0].__className=="sap.common.globalization.numericFormat.FDate")}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.TwoDigitGroupingStrategy");sap.common.globalization.numericFormat.TwoDigitGroupingStrategy=function(){this.__className="sap.common.globalization.numericFormat.TwoDigitGroupingStrategy"};var a=sap.common.globalization.numericFormat.TwoDigitGroupingStrategy;a._instance=new sap.common.globalization.numericFormat.TwoDigitGroupingStrategy();a.prototype.nextGroupDigits=function(){return 1};a.instance=function(){return a._instance}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDefaultCurrencyNumber");sap.common.globalization.require("sap.common.globalization.numericFormat.FNumber");sap.common.globalization.require("sap.common.globalization.numericFormat.DefaultGroupingStrategy");var a=sap.common.globalization.numericFormat;sap.common.globalization.numericFormat.FDefaultCurrencyNumber=function(c,b){sap.common.globalization.numericFormat.FDefaultCurrencyNumber.superclass.constructor.apply(this,[c,b]);this.__className="sap.common.globalization.numericFormat.FDefaultCurrencyNumber";this._groupingStrategy=a.DefaultGroupingStrategy.instance()};a.FDefaultCurrencyNumber=sap.common.globalization.extend(a.FDefaultCurrencyNumber,a.FNumber);a.FDefaultCurrencyNumber.prototype.display=function(k){if(typeof(k)!="number"){return k}if(isNaN(k)||!isFinite(k)){return k}if(this.mfore.length==0&&this.maft.length==0){return this.format}this.setNumber(k);var q=new Array();var e=this.mfore.length;var c=3;var m=this.period;var f=(m==-1)?(this.mask.length):m;var g;var o;var p;for(var h=e-1;h>=0;h--){m=this.mfore[h];for(g=f-1;g>m;g--){p=this.mask[g];if((typeof p)=="object"){q.unshift(p.display)}else{q.unshift(p)}}if(this.numfore.length>0){if(this.bcomma){if(c--==0){q.unshift(this.IMThousandsSeparator);c=this._groupingStrategy.nextGroupDigits()}}o=this.numfore.length-1;q.unshift(this.numfore.charAt(o));this.numfore=this.numfore.substring(0,o)}else{var n=this.mask[m].display;if(n.length!=0){if(this.bcomma&&c--==0){q.unshift(this.IMThousandsSeparator);c=this._groupingStrategy.nextGroupDigits()}q.unshift(this.mask[m].display)}}f=m}if(this.numfore.length>0){if(this.bcomma){while(this.numfore.length>0){if(c--==0){q.unshift(this.IMThousandsSeparator);c=this._groupingStrategy.nextGroupDigits()}o=this.numfore.length-1;q.unshift(this.numfore.charAt(o));this.numfore=this.numfore.substring(0,o)}}else{q.unshift(this.numfore)}}p=this.mask;if(this.currencyIndex!=-1){h=0}for(g=f-1;g>=0;g--){if((typeof this.mask[g])=="object"){q.unshift(this.mask[g].display)}else{q.unshift(this.mask[g])}}e=this.mask.length;h=(this.period==-1)?(e):(this.period);m=0;for(;h<e;h++){if((typeof p[h])=="object"){if(this.maft[m]==h){m++;if(this.numaft.length>0){q.push(this.numaft.charAt(0));this.numaft=this.numaft.substring(1)}else{q.push(p[h].display)}}else{q.push(p[h].display)}}else{q.push(p[h])}}var b;if(this.bsign){b=this.sign+q.join("")}else{b=q.join("")}return b};a.FDefaultCurrencyNumber.prototype.groupingStrategy=function(b){if(this._groupingStrategy!=b){this._groupingStrategy=b}}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.DefaultCurrencyFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultNumericFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.GlobalizationNumericConstant");sap.common.globalization.require("sap.common.globalization.numericFormat.FDefaultCurrencyNumber");sap.common.globalization.require("sap.common.globalization.numericFormat.TwoDigitGroupingStrategy");sap.common.globalization.require("sap.common.globalization.GlobalizationNumericUtil");sap.common.globalization.defaultFormat.DefaultCurrencyFormatLocaleFactory=function(b){sap.common.globalization.defaultFormat.DefaultCurrencyFormatLocaleFactory.superclass.constructor.apply(this,[b]);this.__className="sap.common.globalization.defaultFormat.DefaultCurrencyFormatLocaleFactory";this._displayCurrencySymbol=null;if(sap.common.globalization.defaultFormat.DefaultCurrencyFormatLocaleFactory.isDefaultCurrencyFormat(b)){this._parseCurrencySymbol(b)}};var a=sap.common.globalization.defaultFormat;a.DefaultCurrencyFormatLocaleFactory=sap.common.globalization.extend(a.DefaultCurrencyFormatLocaleFactory,a.DefaultNumericFormatLocaleFactory);a.DefaultCurrencyFormatLocaleFactory.REG_DEFAULT_CURRENCY_FORMAT=new RegExp('^SAP_DEFAULT_CURRENCY_FORMAT(;".*")?$',"i");a.DefaultCurrencyFormatLocaleFactory.isDefaultCurrencyFormat=function(b){return a.DefaultCurrencyFormatLocaleFactory.REG_DEFAULT_CURRENCY_FORMAT.test(b)};a.DefaultCurrencyFormatLocaleFactory.prototype.getDefaultCurrencyFormat=function(){return sap.common.globalization.GlobalizationNumericConstant.getDefaultCurrencyFormat()};a.DefaultCurrencyFormatLocaleFactory.prototype._parseCurrencySymbol=function(b){if("SAP_DEFAULT_CURRENCY_FORMAT"==b){this._displayCurrencySymbol=""}else{this._displayCurrencySymbol=b.slice(29,b.length-1)}};a.DefaultCurrencyFormatLocaleFactory.prototype.createFNumber=function(){var b=new sap.common.globalization.numericFormat.FDefaultCurrencyNumber(this.getNumericParseLocaleInfo(),this.getNumericDisplayLocaleInfo());if(sap.common.globalization.GlobalizationNumericUtil.isTwoDigitGroupingCountry(sap.common.globalization.GlobalizationNumericConstant.getActualLocaleForDefaultCurrencyFormat())){b._groupingStrategy=sap.common.globalization.numericFormat.TwoDigitGroupingStrategy.instance()}return b};a.DefaultCurrencyFormatLocaleFactory.prototype.displayCurrencySymbol=function(){return this._displayCurrencySymbol}})();(function(global){
    var sap = global.sap;
    var root = sap && sap.viz;
    if(root){
        var metadata = root.api && root.api.metadata;
        if(metadata){
            global.__sap_metadata = metadata;
        }
        __sap_temp_v2 = sap.viz.extapi;

        delete sap.viz.api;
        delete sap.viz.extapi;
    }
})(this);

(function(global) {

    function isModuleReady(moduleName) {
        var temp = global, nameParts = moduleName.split("."), i = 0;
        while (i < nameParts.length && temp !== undefined) {
            temp = temp[nameParts[i++]]
        }
        return temp !== undefined;
    }
    function getModuleByQname(qname){
        var nameParts = qname.split("."), res = global;
        for ( i = 0; i < nameParts.length; i++) {
            res = res[nameParts[i]];
        }
        return res;
    }
    function apiDef(apiname, def) {
        var res = global, i, nameParts = apiname.split("."), len = nameParts.length;
        nameParts.reduce(function(p, c, i) {
            p[c] = p[c] || (i < len - 1 || !def ? {} : def);
            return p[c];
        }, global);
        return getModuleByQname(apiname);
    }

    apiDef("sap.viz.extapi.env", {
        template:{
            _queue : {}
        },
        language:{
            _queue:[]
        }
    });

    var manifestDefQueue = sap.viz.extapi.env;
    
    function genManifestFuncOnModule(moduleQname, funcname, queue){
        return function(item){
            if (isModuleReady(moduleQname)) {
                getModuleByQname(moduleQname)[funcname](item);
            } else {
                queue&&queue.push(item);
            }
        }
    }
    
    function pushItemToQueue(queue){
    	return function(item){
    		queue&&queue.push(item);
    	}
    }

    apiDef("sap.viz.extapi.env.Template", {
        register : function(templateDef) {
            var configMap = manifestDefQueue.template._queue;
            configMap[templateDef.id] = configMap[templateDef.id] || [];
            configMap[templateDef.id].push(templateDef);
        }
    });
    apiDef("sap.viz.extapi.env.Language", {
        register : pushItemToQueue(manifestDefQueue.language._queue)
    });
    // make sure sap.viz.api namespace exists, it is used for VERSION in all in one build
	apiDef("sap.viz.api");
	
	apiDef("sap.viz.extapi.core");
})(this);
sap.viz.extapi.env.Language.register({id:'language',value: {IDS_ERROR_NOT_DETERMINE_AXIS_INDEX:"Could not determine measure value axis index",IDS_ERROR_WRONG_MEASURE_AXIS_INDEX:"The measure axis index in the feed definition {0} is incorrect.",IDS_ERROR_WRONG_TYPE:"Data type is incorrect.",IDS_ERROR_FLATTABLE_MANNUAL_FEED_WRONG_BINDING:"Field IDs in manual feeding are missing or are not in array format.",IDS_ERROR_NOT_CHILD_NODE_INSERT:"The node to be inserted is not a child of this node.",IDS_ERROR_DIMENSION_NOT_ZERO:"Length of dimension cannot be zero.",IDS_ERROR_NOT_ACCEPT:"Could not accept {0}",IDS_ERROR_NOT_SUPPORTED:"Not supported",IDS_ERROR_WRONG_VALUES_COUNT_IN_AA2:"The values count {0} in the second analysis axis (aa2) should be {1}.",IDS_ERROR_NOT_DETERMINE_DEMENSION:"Cannot determine the dimension after transform is applied",IDS_ERROR_NOT_MEET_NUMBER_OF_FEED:"{0} : does not meet the minimum or maximum number of feeds definition.",IDS_ERROR_WRONG_VALUES_COUNT_IN_AA1:"The values count {0} in the first analysis axis (aa1) should be {1}.",IDS_ERROR_UNKNOWN_STATE:"Unknown state",IDS_ERROR_CATEGORY_NAME_NOT_EMPTY:"The category name must be a non-empty string.",IDS_ERROR_NOT_CREATE_CHAIN_FOR_NON_FUNCTION_OBJECT:"Could not create a call chain for a non-function object.",IDS_ERROR_NO_FEED_ID:"Invalid feeding: no feed ID",IDS_FEED:"feed",IDS_ERROR_NOT_REGISTER_WITHOUT_VALID_ID:"Cannot register without a valid ID.",IDS_ERROR_FLATTABLE_FEED_DEF_FIELD_INDEX_MISSING:"The field index in feed definition {0} is missing.",IDS_ERROR_DIMENSION_WRONG_COUNT:"{0} is an incorrect dimension count.",IDS_ERROR_NODE_DIV_IN_SVG:"Cannot add <div> tag under <svg> tag.",IDS_ERROR_INVALID_FEEDING:"Invalid feeding: the feed {0} has exceeded the maximum stacked dimension number.",IDS_ERROR_INVALID_PATH_DEFINITION:"Invalid path definition: {0}.",IDS_ERROR_NOT_FIND_FEED_DEFINITION:"Could not find the feed definition of {0}.",IDS_ERROR_NODE_IS_NOT_CHILD_OF_THIS_NODE:"Node is not a child of this node",IDS_ERROR_DIMENSIONS_INCOMPLETE_BINDING:"Incomplete dimensions binding.",IDS_ERROR_NOT_ACCEPT_2_OR_MORE_AXES:"Could not accept more than 2 axes",IDS_ERROR_DIMENSIONS_OR_MEASURES_DUPLICATED_BINDING:"The dimensions/measures binding is duplicated.",IDS_ERROR_AXIS_INDEX_SHOULD_BE_1_OR_2:"Axis index should be 1 or 2",IDS_ERROR_WRONG_FEED_TYPE:"The feed type of {0} is incorrect.",IDS_ERROR_CATEGORY_FACTORY_MUST_BE_FUNCTION:"The category factory must be a function.",IDS_ERROR_NEED_SPECIFY_OPTIONS_TO_INITIALIZE:"You must specify the chart or component options to initialize.",IDS_ERROR_NOT_INITIALIZE_WITHOUT_UICONTROLLER:"Cannot initialize without a root UIController <DIV>.",IDS_ERROR_CAN_NOT_FIND_CATEGORY:"Cannot find {0} in category {1}.",IDS_WARN_PARAMETER_NOT_CORRECT:"Input parameter is not correct.",IDS_ERROR_NOT_REGISTER_UNDEFINED_OBJECT:"Cannot register a undefined object.",IDS_ERROR_WRONG_AXIS_INDEX:"The analysis axis index in the feed definition {0} is incorrect.",IDS_ERROR_WRONG_FEED_TYPE_IN_DEFINTION:"The feed type in the feed definition {0} is incorrect.",IDS_ALREADY_EXISTS:"{0} already exists",IDS_ERROR_NOT_FIND_JQUERY:"Cannot find 'jQuery' library",IDS_ERROR_NEED_SPECIFY_HOLDER_FOR_VISUALIZATION:"The target <DIV> is not specified for rendering the visualization.",IDS_ERROR_EXIST_CATEGORY_NAME:"A category named {0} already exists.",IDS_ERROR_UNKNOWN_ERROR:"Unknown error.",IDS_ERROR_AXIS_ALREADY_EXIST:"Axis {0} already exists.",IDS_ERROR_DIMENSION_WRONG_LABELS_COUNT:"{0} is an incorrect dimension labels count.",IDS_ERROR_INVALID_FEEDING_NUMBER:"Invalid feeding: the correct number  is {0} feed.",IDS_ERROR_LOADING_TEMPLATE_FAIL:"Loading template {0} failed.",IDS_ERROR_PARSE_ERROR_EXPECT_TO:"An error occurred when parsing {0}; it should be: {1}.",IDS_ERROR_FEED_NOT_ACCEPT_DATA:"Feed {0} could not accept more data containers.",IDS_ERROR_NO_AXIS:"Could not find axis {0} in the dataset {1} feed.",IDS_ERROR_NEED_PROVIDE_CONTAINER_FOR_FRAME:"You must provide a container <DIV> for the visualization.",IDS_ERROR_FLATTABLE_INVALID_DATA_PARAM:"Invalid parameter, parameter must have metadata and data.",IDS_ERROR_ALREADY_EXIST_IN_CATEGORY:"There is already an item named {0} in category {1}.",IDS_WARN_LOCALE_NOT_CORRECT:"Input locale is not correct.",IDS_ERROR_NOT_ADD_SELF_AS_CHILD:"An ID cannot add itself as a child.",IDS_ERROR_NODE_NOT_IN_SAME_ROOT:"Node is not in the same root.",IDS_ERROR_NOT_ADD_ANCESTOR_AS_CHILD:"Cannot add ancestor as a child",IDS_ERROR_INVALID_BINDING:"Invalid data binding",IDS_ERROR_NOT_FIND_MEASURE_GROUP:"Could not find measure values group {0} in the dataset {1} feed.",IDS_ERROR_SELECTOR_NOT_NULL:"Selector string cannot be null.",}});sap.viz.extapi.env.Language.register({id:'language',value: {IDS_BASESINGLECHART:"Base Single Chart",IDS_MULTIDUALLINECHART:"Multiple Line Chart with 2 Y-Axes",IDS_HORIZONTALAREACHART:"Horizontal Area Chart",IDS_TRELLISPERCENTAGEHORIZONTALAREACHART:"Trellis 100% Horizontal Area Chart",IDS_ANIMATION:"animation",IDS_MULTIHORIZONTALAREACHART:"Multiple Horizontal Area Chart",IDS_GRIDVISIBLE:"gridVisible",IDS_ENABLEROUNDCORNER:"enableRoundCorner",IDS_TREECHART:"Tree",IDS_TRELLISHORIZONTALLINECHART:"Trellis Horizontal Line Chart",IDS_MULTISTACKEDBARCHART:"Multiple Stacked Bar Chart",IDS_RADARAXESVALUE:"Radar Axes Values",IDS_MULTIPIEWITHDEPTHCHART:"Multiple Pie with Depth Chart",IDS_TRELLISBARCHART:"Trellis Bar Chart",IDS_PIESECTORCOLORNAME:"Sector Color",IDS_TRELLISDUALPERCENTAGESTACKEDBARCHART:"Trellis 100% Stacked Bar Chart with 2 X-Axes",IDS_TIMEVALUEBUBBLECHART:"Time Bubble Chart",IDS_FORMAT:"Format",IDS_SECONDARYAXISLABELNAME:"Secondary Category Axis",IDS_LABEL:"Label",IDS_TRELLISPERCENTAGESTACKEDBARCHART:"Trellis 100% Stacked Bar Chart",IDS_SECONDARYVALUES:"Secondary Values",IDS_DATA_FRAME:"Data Frame",IDS_SEMANTIC_DEFAULT_TITLE:"Semantic Rules",IDS_TIMEBUBBLECHART:"Time Bubble Chart",IDS_NETLINK:"Network Link",IDS_MULTIPIECHART:"Multiple Pie Chart",IDS_VARIANTBARCHART:"Variant Bar Chart (POC)",IDS_MULTISTACKEDVERTICALBARCHART:"Multiple Stacked Column Chart",IDS_TRELLISAREACHART:"Trellis Area Chart",IDS_MULTIVERTICALBARCHART:"Multiple Column Chart",IDS_STACKEDVERTICALBARCHART:"Stacked Column Chart",IDS_MULTIPERCENTAGESTACKEDBARCHART:"Multiple 100% Stacked Bar Chart",IDS_VALUE_AXIS:"Value Axis",IDS_MULTIDUALSTACKEDVERTICALBARCHART:"Multiple Stacked Column Chart with 2 Y-Axes",IDS_TRELLISHORIZONTALCOMBINATIONCHART:"Trellis Combined Bar Line Chart",IDS_SCATTERMATRIXCHART:"Scatter Matrix Chart",IDS_ENDCOLUMN:"endColumn",IDS_DUALSTACKEDVERTICALBARCHART:"Stacked Column Chart with 2 Y-Axes",IDS_DEFAULTMND:"All Measures",IDS_MARKERS:"Markers",IDS_TAGFAMILY:"Tags Family",IDS_PRIMARYVALUES:"Primary Values",IDS_DONUTWITHDEPTHCHART:"Donut with Depth Chart",IDS_TREENODE:"Tree Node",IDS_VERTICALBULLETCHART:"Vertical Bullet Chart",IDS_CATEGORY_AXIS2:"Category Axis 2",IDS_MULTIDUALHORIZONTALLINECHART:"Multiple Horizontal Line Chart with 2 X-Axes",IDS_TRELLISBULLETCHART:"Trellis Bullet Chart",IDS_MULTIDUALPERCENTAGESTACKEDVERTICALBARCHART:"Multiple 100% Stacked Column Chart with 2 Y-Axes",IDS_MULTIDONUTWITHDEPTHCHART:"Multiple Donut with Depth Chart",IDS_AUTOBINNINGOTHERS:"Others",IDS_PIESECTORSIZE:"Sector Size",IDS_COMBINATIONCHART:"Combined Column Line Chart",IDS_COLUMNCONFIG:"columnConfig",IDS_MULTIDUALBARCHART:"Multiple Bar Chart with 2 X-Axes",IDS_TAGNAME:"Tags Name",IDS_STARTCOLOR:"startcolor",IDS_PERCENTAGESTACKEDBARCHART:"100% Stacked Bar Chart",IDS_STARTCOLUMN:"startColumn",IDS_TYPE:"Type",IDS_DUALHORIZONTALLINECHART:"Horizontal Line Chart with 2 X-Axes",IDS_NUMBERCHART_VALUE:"Value",IDS_TRELLISSTACKEDCOLUMNCHART:"Trellis Stacked Column Chart",IDS_SHAPE:"Shape",IDS_VERTICALBOXPLOTCHART:"Box Plot",IDS_BASEHORIZONTALCHART:"Base horizontal XY Chart",IDS_TOOLTIPVISIBLE:"tooltipVisible",IDS_SCATTERCHART:"Scatter Plot",IDS_PERCENTAGEAREACHART:"100% Area Chart",IDS_SEMANTICCOLOROTHERS:"Others",IDS_REGIONCOLOR:"Region Color",IDS_HORIZONTALCOMBINATIONCHART:"Combined Bar Line Chart",IDS_BORDER:"Border",IDS_MULTIPERCENTAGEAREACHART:"Multiple 100% Area Chart",IDS_REFERENCEVALUES:"Reference Values",IDS_WATERFALLCHART:"Waterfall Chart",IDS_TRELLISHORIZONTALAREACHART:"Trellis Horizontal Area Chart",IDS_HORIZONTALSTACKEDWATERFALL:"Horizontal Stacked Waterfall Chart",IDS_STACKEDWATERFALLCHART:"Stacked Waterfall Chart",IDS_VISIBLE:"visible",IDS_GRIDLINE:"Gridline",IDS_SECONDARYVALUESCOLORPALETTE:"secondaryValuesColorPalette",IDS_SIZE:"size",IDS_MULTIBARCHART:"Multiple Bar Chart",IDS_DUALPERCENTAGESTACKEDVERTICALBARCHART:"100% Stacked Column Chart with 2 Y-Axes",IDS_TRELLISSCATTERCHART:"Trellis Scatter Chart",ID_FORECAST_VALUES:"Forecast Values",IDS_TAGCLOUDCHART:"Tag Cloud",IDS_TARGETVALUES:"Target Values",IDS_LOWCOLUMN:"lowColumn",IDS_MULTIBUBBLECHART:"Multiple Bubble Chart",IDS_FILLVISIBLE:"fillVisible",IDS_TRELLISDUALPERCENTAGESTACKEDCOLUMNCHART:"Trellis 100% Stacked Column Chart with 2 Y-Axes",IDS_STACKEDBARCHART:"Stacked Bar Chart",IDS_PIECHART:"Pie Chart",IDS_VERTICALBARCHART:"Column Chart",IDS_SPARKLINECHART:"Spark Line Chart (POC)",IDS_TRELLISPERCENTAGESTACKEDCOLUMNCHART:"Trellis 100% Stacked Column Chart",IDS_ISNOVALUE:"No value",IDS_BUBBLEWIDTH:"Bubble Width",IDS_BUBBLESIZE:"Bubble Size",IDS_HORIZONTALWATERFALLCHART:"Horizontal Waterfall Chart",IDS_VALUEFORMAT:"valueFormat",IDS_PIEWITHDEPTHCHART:"Pie with Depth Chart",IDS_BASEBUBBLECHART:"Base Scatter Chart",IDS_REFINEVISIBLE:"reflineVisible",IDS_TRELLISSTACKEDBARCHART:"Trellis Stacked Bar Chart",IDS_HEATMAPCHART:"Heat Map",IDS_DUALLINECHART:"Line Chart with 2 Y-Axes",IDS_WIDTH:"Width",IDS_HOVERLINEVISIBLE:"hoverlineVisible",IDS_MEKKOCHART:"Mekko chart",IDS_HORIZONTALMEKKOCHART:"Horizontal Mekko Chart",IDS_BUBBLECHART:"Bubble Chart",IDS_BASEMULTIPLEXYCHART:"Base Multiple XY Chart",IDS_HEADERVISIBLE:"headerVisible",IDS_TRELLISVERTICALBULLETCHART:"Trellis Vertical Bullet Chart",IDS_LINECHART:"Line Chart",IDS_BUBBLEHEIGHT:"Bubble Height",IDS_NUMBERCHART:"Numeric Point",IDS_PERCENTAGEHORIZONTALMEKKOCHART:"100% Horizontal Mekko Chart",IDS_MARKER:"Marker",IDS_PERCENTAGESTACKEDVERTICALBARCHART:"100% Stacked Column Chart",IDS_BASEVERTICALCHART:"Base Vertical XY Chart",IDS_DIUALLINECHART:"Line Chart with 2 Y-Axes",IDS_TRELLIS_COLUMN:"Trellis Column",IDS_BASEMULTIPLECHART:"Base Multiple Chart",IDS_PERCENTAGEMEKKOCHART:"100% Mekko Chart",IDS_MULTIDUALVERTICALBARCHART:"Multiple Column Chart with 2 Y-Axes",IDS_DUALCOMBINATIONCHART:"Combined Column Line Chart with 2 Y-Axes",IDS_RADARCHART:"Radar Chart",IDS_TRELLISCOMBINATIONCHART:"Trellis Combined Column Line Chart",IDS_DUALSTACKEDBARCHART:"Stacked Bar Chart with 2 X-Axes",IDS_TRELLISPERCENTAGEAREACHART:"Trellis 100% Area Chart",IDS_TRELLISDUALSTACKEDCOLUMNCHART:"Trellis Stacked Column Chart with 2 Y-Axes",IDS_SELECTABILITY:"Selectability",IDS_AXISVISIBLE:"axisVisible",IDS_DEFAULTCHARTTITLE:"Title of Chart",IDS_MULTIPERCENTAGESTACKEDVERTICALBARCHART:"Multiple 100% Stacked Column Chart",IDS_AXISLABELS:"Axis Labels",IDS_MULTIDUALSTACKEDBARCHART:"Multiple Stacked Bar Chart with 2 X-Axes",IDS_MULTIRADARCHART:"Multiple Radar Chart",IDS_TRELLIS_ROW:"Trellis Row",IDS_MULTILINECHART:"Multiple Line Chart",IDS_BARCHART:"Bar Chart",IDS_3D_BAR:"3D Bar Chart",IDS_TRELLISCOLUMNCHART:"Trellis Column Chart",IDS_DATAUPDATING:"dataUpdating",IDS_3D_COLUMN:"3D Column Chart",IDS_TRELLISPIECHART:"Trellis Pie Chart",IDS_HORIZONTALLINECHART:"Horizontal Line Chart",IDS_NETWORKCHART:"Network Chart",IDS_DUALVERTICALBARCHART:"Column Chart with 2 Y-Axes",IDS_PLAY_FIELD:"Play Field",IDS_RECTANGLEWEIGHT:"Rectangle Weight",IDS_PIEDEPTHSIZE:"Depth Size",IDS_MULTIHORIZONTALLINECHART:"Multiple Horizontal Line Chart",IDS_DUALHORIZONTALSTACKEDCOMBINATIONCHART:"Horizontal Combined Stacked Line Chart with 2 X-Axes",IDS_COLOR:"color",IDS_TEXT:"Text",IDS_DUALBARCHART:"Bar Chart with 2 X-Axes",IDS_TRELLISLINECHART:"Trellis Line Chart",IDS_DATALOADING:"dataLoading",IDS_BASECHART:"Base Chart",IDS_HORIZONTALBOXPLOTCHART:"Horizontal Box Plot",IDS_TRELLISDUALCOLUMNCHART:"Trellis Column Chart with 2 Y-Axes",IDS_LINECONFIG:"lineConfig",IDS_VALUES_SELECTED:"values selected",IDS_DUALHORIZONTALCOMBINATIONCHART:"Combined Bar Line Chart with 2 X-Axes",IDS_PRIMARYVALUECOLORPALETTE:"primaryValuesColorPalette",IDS_TRELLISDONUTCHART:"Trellis Donut Chart",IDS_PERCENTAGEHORIZONTALAREACHART:"100% Horizontal Area Chart",IDS_HIGHCOLUMN:"highColumn",IDS_TREEMAPCHART:"Tree Map",IDS_MULTISCATTERCHART:"Multiple Scatter Plot",IDS_SEMANTICCOLORRANGE:"Semantic Range",IDS_MODE:"Mode",IDS_TRELLISDUALLINECHART:"Trellis Line Chart with 2 Y-Axes",IDS_BULLETCHART:"Bullet Chart",IDS_AREACHART:"Area Chart",IDS_FORECAST_VALUES:"Forecast Values",IDS_LINE:"Line",IDS_ENDCOLOR:"endcolor",IDS_CATEGORY_AXIS:"Category Axis",IDS_DUALPERCENTAGESTACKEDBARCHART:"100% Stacked Bar Chart with 2 X-Axes",IDS_VALUE_AXIS2:"Value Axis 2",IDS_WEIGHT:"weight",IDS_REGIONSHAPE:"Region Shape",IDS_DONUTCHART:"Donut Chart",IDS_TITLE:"Title",IDS_MULTIPERCENTAGEHORIZONTALAREACHART:"Multiple 100% Horizontal Area Chart",IDS_RECTANGLECOLOR:"Rectangle Color",IDS_CATEGORYAXIS:"Axis Labels Category",IDS_COLUMNSEQUENCE:"columnSequence",IDS_MAINLABELAXISNAME:"Main Category Axis",IDS_RADARAXES:"Radar Axes",IDS_HORIZONTALSTACKEDCOMBINATIONCHART:"Horizontal Combined Stacked Line Chart",IDS_DRAWINGEFFECT:"drawingEffect",IDS_SHOWFIRSTLINE:"showFirstLine",IDS_MULTIDUALPERCENTAGESTACKEDBARCHART:"Multiple 100% Stacked Bar Chart with 2 X-Axes",IDS_TRELLISBUBBLECHART:"Trellis Bubble Chart",IDS_TRELLISDUALBARCHART:"Trellis Bar Chart with 2 X-Axes",IDS_TRELLISDUALHORIZONTALLINECHART:"Trellis Horizontal Line Chart with 2 X-Axes",IDS_TAGWEIGHT:"Tags Weight",IDS_BAR:"Bar",IDS_STACKEDCOMBINATIONCHART:"Combined Stacked Line Chart",IDS_POSITION:"Position",IDS_TRELLISDUALSTACKEDBARCHART:"Trellis Stacked Bar Chart with 2 X-Axes",IDS_MULTIAREACHART:"Multiple Area Chart",IDS_DUALSTACKEDCOMBINATIONCHART:"Combined Stacked Line Chart with 2 Y-Axes",IDS_MULTIDONUTCHART:"Multiple Donut Chart",IDS_RECTANGLETITLE:"Rectangle Title",}});
define('sap/viz/framework/common/util/TypeUtils',[],
    function Setup() {
        var class2type = {
            '[object Boolean]': 'boolean',
            '[object Number]': 'number',
            '[object String]': 'string',
            '[object Function]': 'function',
            '[object Array]': 'array',
            '[object Date]': 'date',
            '[object RegExp]': 'regexp',
            '[object Object]': 'object'
        };

        var hasOwn = Object.prototype.hasOwnProperty;
        // Used for trimming whitespace
        var rdigit = /\d/;

        var type = function(obj) {
            return obj == null ? String(obj) : class2type[Object.prototype.toString.call(obj)] || "object";
        };

        /**
         * Type Utilities for common variable type related tasks
         *
         * @name sap.viz.base.utils.TypeUtils
         * @class
         */
        var typeUtils = {

            /**
             * Returns a boolean value indicating whether the parameter is of type
             * function
             *
             * @param {object}
             * @returns {boolean}
             */
            // See test/unit/core.js for details concerning isFunction.
            // Since version 1.3, DOM methods and functions like alert
            // aren't supported. They return false on IE (#2968).
            isFunction: function(obj) {
                return type(obj) === "function";
            },

            /**
             * Returns a boolean value indicating whether the parameter is of type
             * array
             *
             * @param {object}
             * @returns {boolean}
             */
            isArray: Array.isArray || function(obj) {
                return type(obj) === "array";
            },

            /**
             * Returns a boolean value indicating whether the parameter is of type
             * string
             *
             * @param {object}
             * @returns {boolean}
             */
            isString: function(obj) {
                return type(obj) === "string";
            },

            /**
             * Returns a boolean value indicating whether the parameter is a
             * non-empty string
             *
             * @param {object}
             * @returns {boolean}
             */
            isNonEmptyString: function(obj) {
                return this.isString(obj) && obj.length !== 0;
            },


            /**
             * Returns a boolean value indicating whether the parameter is NaN
             *
             * @param {object}
             * @returns {boolean}
             */
            isNaN: function(obj) {
                return obj === null || obj === undefined || !rdigit.test(obj) || isNaN(obj);
            },

            /**
             * Returns a boolean value indicating whether the parameter is a number
             *
             * @param {object}
             * @returns {boolean} 
             * 
             * Caution: isNumber(Infinity) returns false;
             * Caution: isNumber([0,1]) returns true.
             */
            isNumber: function(n) {
                return !typeUtils.isNaN(parseFloat(n)) && isFinite(n);
            },
            
            /**
             * Returns a boolean value indicating whether the parameter is a number
             * This method fixed an issue of TypeUtils.isNumber, where an array with 
             * all numeric elements will be considered as a number. 
             * 
             * @param {object}
             * @returns {boolean} Caution: isNumber(Infinity) returns false.
             */
            isNumeric: function(n) {
                return !typeUtils.isArray( n ) && (n - parseFloat( n ) + 1) >= 0;
            },

            /**
             * Returns a boolean value indicating whether the parameter is defined
             *
             * @param {object}
             * @returns {boolean}
             */
            isDefined: function(v) {
                return typeof(v) !== 'undefined';
            },

            /**
             * Returns a boolean value indicating whether the parameter is undefined
             *
             * @param {object}
             * @returns {boolean}
             */
            isUndefined: function(v) {
                return typeof(v) === 'undefined';
            },

            /**
             * Returns a boolean value indicating whether the parameter is a plain
             * object
             *
             * @param {object}
             * @returns {boolean} Caution: A plain object is an object that has no
             *          prototype method and no parent class. Null, undefined, DOM
             *          nodes and window object are not considered as plain object.
             */
            isPlainObject: function(obj) {
                // Must be an Object.
                // Because of IE, we also have to check the presence of the
                // constructor property.
                // Make sure that DOM nodes and window objects don't pass through,
                // as well
                if (!obj || type(obj) !== "object" || obj.nodeType || (obj && typeof obj === "object" &&
                    "setInterval" in obj)) {
                    return false;
                }

                // Not own constructor property must be Object
                if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype,
                    "isPrototypeOf")) {
                    return false;
                }

                // Own properties are enumerated firstly, so to speed up,
                // if last one is own, then all properties are own.

                var key;
                for (key in obj) {} // jshint ignore:line

                return key === undefined || hasOwn.call(obj, key);
            },

            /**
             * Returns a boolean value indicating whether the parameter is an empty
             * object
             *
             * @param {object}
             * @returns {boolean} Caution: An empty is a plain object without any
             *          properties.
             */
            isEmptyObject: function(obj) {
                for (var name in obj) {
                    if (obj.hasOwnProperty(name)) {
                        return false;
                    }

                }
                return typeUtils.isPlainObject(obj);
            },

            equals: function(x, y) {
                var p;
                if (x === y) {
                    return true;
                }
                if (!(x instanceof Object) || !(y instanceof Object) || (x.constructor !== y.constructor)) {
                    return false;
                }

                for (p in x) {
                    if (x.hasOwnProperty(p)) {

                        if (!y.hasOwnProperty(p)) {
                            return false;
                        }
                        if (x[p] === y[p]) {
                            continue;
                        }
                        if (typeof(x[p]) !== "object" || !typeUtils.equals(x[p], y[p])) {
                            return false;
                        }
                    }
                }

                for (p in y) {
                    if (y.hasOwnProperty(p) && !x.hasOwnProperty(p)) {
                        {
                            return false;
                        }
                    }
                }
                return true;
            },

            /**
             * Returns a boolean value indicating whether the parameter is undefined or null
             *
             * @param {object}
             * @returns {boolean}
             */
            isExist: function(o) {
                if ((typeof(o) === 'undefined') || (o === null)) {
                    {
                        return false;
                    }
                }
                return true;
            }
        };

        return typeUtils;
    });
define('sap/viz/framework/common/log/Logger',[],
    function Setup() {
        var noop = function() {};
        Date.now = Date.now || function() {
            return +new Date();
        };

        function getLevel() {
            return this.threshold;
        }

        function setLevel(level) {
            if (typeof level === "string") {
                this.threshold = levelStr2Int(level);
            } else if (typeof level === "number") {
                this.threshold = level;
            }
        }

        /**
         * Append log message  into the browse console.
         *
         * @name ConsoleAppender
         * @property  {Number} threshold  The log level number.
         * @property  {DefaultLayout} layout  The log layout format class.
         * @property {function} print The console output function.
         * @method  ConsoleAppender#doAppend
         * @method  ConsoleAppender#setLayout
         * @method  ConsoleAppender#getLevel
         * @method  ConsoleAppender#setLevel
         */
        var ConsoleAppender = function() {
            this.threshold = Logger.LEVEL.INFO;
            this.layout = new Logger.DefaultLayout();
            this.print = typeof console !== undefined ? function(msg) {
                window.console.log(msg);
            } : noop;
        };
        ConsoleAppender.prototype = {
            doAppend: function(logTime, logLevel, logCate, logMsg) {
                this.print(this.layout.format(logTime, logLevel, logCate, logMsg));
            },
            setLayout: function(layout) {
                if (layout.format) {
                    this.layout = layout;
                }
            },
            getLevel: getLevel,
            setLevel: setLevel
        };

        /**
         * The default layout class  ConsoleAppender as console format.
         *
         * @name DefaultLayout
         */

        var DefaultLayout = function() {
            // this.df = Logger.dateFormatter;
        };
        DefaultLayout.prototype.format = function(logTime, logLevel, logCate, logMsg) {
            return "[" + logTime + "]" + "[" + getLevelStr(logLevel) + "]" + "[" + (logCate || "main") + "]-" + logMsg;
        };

        /**
         * Append log message on the DIV page.
         *
         * @name DivAppender
         * @property  {Number} threshold  The log level number.
         * @property  {HTMLLayout} layout  The log layout format class.
         * @property {<Div>} div The html div tag to display the log message.
         * @method  DivAppender#doAppend
         * @method  DivAppender#getLevel
         * @method  DivAppender#setLevel
         */
        var DivAppender = function(div) {
            //        if(!$) {  //remove jQuery dependency.
            //            throw "need jQuery";
            //        }
            this.threshold = Logger.LEVEL.INFO;
            //        this.divSl = $(div);  //remove jQuery dependency.
            this.div = div;
            this.layout = new HTMLLayout();
        };
        DivAppender.prototype = {
            getLevel: getLevel,
            setLevel: setLevel,
            doAppend: function(logTime, logLevel, logCate, logMsg) {
                //            this.divSl.append(this.layout.format(logTime, logLevel, logCate, logMsg));
                this.div.appendChild(this.layout.format(logTime, logLevel, logCate, logMsg));
            }
        };

        /**
         * The layout class specified for DivAppender as html page format.
         *
         * @name HTMLLayout
         */
        var HTMLLayout = function() {
            // this.df = Logger.dateFormatter;
        };
        HTMLLayout.prototype = {
            getStyle: function(logLevel) {
                var style;
                if (logLevel === Logger.LEVEL.ERROR) {
                    style = 'color:red';
                } else if (logLevel === Logger.LEVEL.WARN) {
                    style = 'color:orange';
                } else if (logLevel === Logger.LEVEL.DEBUG) {
                    style = 'color:green';
                } else if (logLevel === Logger.LEVEL.TRACE) {
                    style = 'color:green';
                } else if (logLevel === Logger.LEVEL.INFO) {
                    style = 'color:grey';
                } else {
                    style = 'color:yellow';
                }
                return style;
            },
            format: function(logTime, logLevel, logCate, logMsg) {
                return "<div style=\"" + this.getStyle(logLevel) + "\">[" + logTime + "]" + "[" +
                    getLevelStr(logLevel) + "][" + (logCate || "main") + "]-" + logMsg + "</div>";
            }
        };
        var FifoBuffer = function() {
            this.array = [];
        };

        FifoBuffer.prototype = {

            /**
             * @param {Object} obj any object added to buffer
             */
            push: function(obj) {
                this.array[this.array.length] = obj;
                return this.array.length;
            },
            /**
             * @return first putted in Object
             */
            pull: function() {
                if (this.array.length > 0) {
                    var firstItem = this.array[0];
                    for (var i = 0; i < this.array.length - 1; i++) {
                        this.array[i] = this.array[i + 1];
                    }
                    this.array.length = this.array.length - 1;
                    return firstItem;
                }
                return null;
            },
            length: function() {
                return this.array.length;
            }
        };
        /**
         * Append log message to a remote file via ajax call.
         *
         * @name AjaxAppender
         * @property  {Number} threshold  The log level number.
         * @property  {String} loggingUrl The ajax call url.
         * @property  {Boolean} isInProgress  The process state of ajax call.
         * @property  {Number} bufferSize  Once the log messages reaches the number, it will perform to send ajax call.
         * @property  {Number} timeout  The delayed time to send the ajax call request.
         * @property  {Arrary} loggingEventMap  The array stored the log messages.
         * @property  {JSONLayout} layout  The specified layout for AjaxAppender.
         * @property  {Arrary} loggingEventMap  The array stored the log messages.
         * @property  {httpRequest} httpRequest  The httpRequest to send ajax call.
         * @method  AjaxAppender#doAppend
         * @method  AjaxAppender#getLevel
         * @method  AjaxAppender#setLevel
         * @method  AjaxAppender#send
         * @method  AjaxAppender#onReadyStateChanged
         * @method  AjaxAppender#getXmlHttpRequest
         */

        var AjaxAppender = function(url) {
            this.loggingUrl = url;
            this.isInProgress = false;
            this.threshold = Logger.LEVEL.INFO;
            this.bufferSize = 20;
            this.timeout = 2000;
            this.loggingEventMap = [];
            this.layout = new Logger.JSONLayout();
            this.httpRequest = null;
            this.timer = undefined;
        };

        function tryAppend() {
            var appender = this;
            if (this.isInProgress === true) {
                setTimeout(function() {
                    tryAppend.call(appender);
                }, 100);
            } else {
                this.send();
            }
        }

        AjaxAppender.prototype = {
            getLevel: getLevel,
            setLevel: setLevel,
            doAppend: function(logTime, logLevel, logCate, logMsg) {
                this.loggingEventMap.push([logTime, logLevel, logCate, logMsg]);
                if (this.loggingEventMap.length <= this.bufferSize || this.isInProgress === true) {
                    var appender = this;
                    if (this.timer === undefined) {
                        this.timer = setTimeout(function() {
                            tryAppend.call(appender);
                        }, 100);
                    }
                }

                if (this.loggingEventMap.length >= this.bufferSize && this.isInProgress === false) {
                    //if bufferSize is reached send the events and reset current bufferSize
                    if (this.timer !== undefined) {
                        window.clearTimeout(this.timer);
                    }
                    this.send();
                }
            },
            send: function() {
                if (this.loggingEventMap.length > 0) {
                    this.isInProgress = true;
                    var a = [];
                    var loggingEvent;
                    for (var i = 0, lml = this.loggingEventMap.length; i < lml && i < this.bufferSize; i++) {
                        loggingEvent = this.loggingEventMap.shift();
                        a.push(this.layout.format(loggingEvent[0], loggingEvent[1], loggingEvent[2], loggingEvent[3]));
                    }

                    var content = this.layout.getHeader();
                    content += a.join(this.layout.getSeparator());
                    content += this.layout.getFooter();

                    var appender = this;
                    if (this.httpRequest === null) {
                        this.httpRequest = this.getXmlHttpRequest();
                    }
                    this.httpRequest.onreadystatechange = function() {
                        appender.onReadyStateChanged.call(appender);
                    };

                    this.httpRequest.open("POST", this.loggingUrl, true);
                    // set the request headers.
                    this.httpRequest.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                    this.httpRequest.setRequestHeader("Content-length", content.length);
                    //this.httpRequest.setRequestHeader("Content-type", this.layout.getContentType());
                    this.httpRequest.send(content);
                    appender = this;

                    try {
                        setTimeout(function() {
                            appender.httpRequest.onreadystatechange = function() {};
                            appender.httpRequest.abort();
                            //this.httpRequest = null;
                            appender.isInProgress = false;

                            if (appender.loggingEventMap.length > 0) {
                                appender.send();
                            }
                        }, this.timeout);
                    } catch (e) {}
                }
            },
            onReadyStateChanged: function() {
                var req = this.httpRequest;
                if (this.httpRequest.readyState !== 4) {
                    return;
                }

                var success = ((typeof req.status === "undefined") || req.status === 0 ||
                    (req.status >= 200 && req.status < 300));

                if (success) {

                    //ready sending data
                    this.isInProgress = false;

                } else {}
            },
            getXmlHttpRequest: function() {

                var httpRequest = false;

                try {
                    if (window.XMLHttpRequest) { // Mozilla, Safari, IE7...
                        httpRequest = new window.XMLHttpRequest();
                        if (httpRequest.overrideMimeType) {
                            httpRequest.overrideMimeType(this.layout.getContentType());
                        }
                    } else if (window.ActiveXObject) { // IE
                        try {
                            httpRequest = new window.ActiveXObject("Msxml2.XMLHTTP");
                        } catch (e) {
                            httpRequest = new window.ActiveXObject("Microsoft.XMLHTTP");
                        }
                    }
                } catch (e) {
                    httpRequest = false;
                }

                if (!httpRequest) {
                    throw "browser don't support AJAX";
                }

                return httpRequest;
            }
        };

        /**
         * The layout class specified for AjaxAppender as JSON format.
         *
         * @name JSONLayout
         */
        var JSONLayout = function() {

        };
        JSONLayout.prototype = {
            /**
             * Implement this method to create your own layout format.
             * @param {Log4js.LoggingEvent} loggingEvent loggingEvent to format
             * @return formatted String
             * @type String
             */
            format: function(logTime, logLevel, logCate, logMsg) {

                var jsonString = "{\n \"LoggingEvent\": {\n";
                jsonString += "\t\"category\": \"" + (logCate || "main") + "\",\n";
                jsonString += "\t\"level\": \"" + getLevelStr(logLevel) + "\",\n";
                jsonString += "\t\"message\": \"" + logMsg + "\",\n";
                // jsonString += "\t\"referer\": \"" + referer + "\",\n";
                // jsonString += "\t\"useragent\": \"" + useragent + "\",\n";
                jsonString += "\t\"timestamp\": \"" + logTime + "\"\n";
                jsonString += "}\n}";

                return jsonString;
            },
            /**
             * Returns the content type output by this layout.
             * @return The base class returns "text/xml".
             * @type String
             */
            getContentType: function() {
                return "text/json";
            },
            /**
             * @return Returns the header for the layout format. The base class returns null.
             * @type String
             */
            getHeader: function() {
                var useragent = "unknown";
                try {
                    useragent = window.navigator.userAgent;
                } catch (e) {
                    useragent = "unknown";
                }

                var referer = "unknown";
                try {
                    referer = window.location.href;
                } catch (e) {
                    referer = "unknown";
                }
                return "{" + "\"ClientInfo\" : {\n" + "\t\"useragent\": \"" + useragent + "\",\n" +
                    "\t\"referer\": \"" + referer + "\"\n},\n" + "\"VizLogger\": [\n";
            },
            /**
             * @return Returns the footer for the layout format. The base class returns null.
             * @type String
             */
            getFooter: function() {
                return "\n]}";
            },
            getSeparator: function() {
                return ",\n";
            }
        };

        /**
         * Get the XMLHttpRequest object independent of browser.
         * @private
         */
        var XMLLayout = function() {
            // this.df = Logger.dateFormatter;
        };
        XMLLayout.prototype = {
            format: function(logTime, logLevel, logCate, logMsg) {

                var content = "<vizLogger:event category=\"";
                content += (logCate || "main") + "\" level=\"";
                content += getLevelStr(logLevel) + "\" timestamp=\"";
                content += logTime + "\">\n";
                content += "\t<vizLogger:message><![CDATA[" + this.escapeCdata(logMsg) + "]]></vizLogger:message>\n";
                content += "</vizLogger:event>";

                return content;
            },
            /**
             * Returns the content type output by this layout.
             * @return The base class returns "text/xml".
             * @type String
             */
            getContentType: function() {
                return "text/xml";
            },
            /**
             * @return Returns the header for the layout format. The base class returns null.
             * @type String
             */
            getHeader: function() {
                var useragent = "unknown";
                try {
                    useragent = window.navigator.userAgent;
                } catch (e) {
                    useragent = "unknown";
                }

                var referer = "unknown";
                try {
                    referer = window.location.href;
                } catch (e) {
                    referer = "unknown";
                }
                return "<vizLogger:eventSet useragent=\"" + useragent + "\" referer=\"" +
                    referer.replace(/&/g, "&amp;") + "\">\n";
            },
            /**
             * @return Returns the footer for the layout format. The base class returns null.
             * @type String
             */
            getFooter: function() {
                return "</vizLogger:eventSet>\n";
            },
            getSeparator: function() {
                return "\n";
            },
            /**
             * Escape Cdata messages
             * @param str {String} message to escape
             * @return {String} the escaped message
             * @private
             */
            escapeCdata: function(str) {
                return str.replace(/\]\]>/, "]]>]]&gt;<![CDATA[");
            }
        };

        function getLevelStr(levelInt) {
            switch (levelInt) {
                case Logger.LEVEL.TRACE:
                    return "TRACE";
                case Logger.LEVEL.DEBUG:
                    return "DEBUG";
                case Logger.LEVEL.INFO:
                    return "INFO";
                case Logger.LEVEL.WARN:
                    return "WARN";
                case Logger.LEVEL.ERROR:
                    return "ERROR";
            }
        }

        function levelStr2Int(levelStr) {
            switch (levelStr.toLowerCase()) {
                case "trace":
                    return Logger.LEVEL.TRACE;
                case "debug":
                    return Logger.LEVEL.DEBUG;
                case "info":
                    return Logger.LEVEL.INFO;
                case "warn":
                    return Logger.LEVEL.WARN;
                case "error":
                    return Logger.LEVEL.ERROR;
            }
        }
        var enabled = false;
        var paused = false;
        var MaxBufferSize = 2000;
        var doLog = function(level, category, message, loggerLevel) {
            for (var appenderKey in appenders) {
                if (appenders.hasOwnProperty(appenderKey)) {
                    var appender = appenders[appenderKey];
                    var PnRAppender = appender.hasOwnProperty('profiling') && level <= levelSetting.DEBUG;
                    // pnr Appender (reference to sap.viz.base.utils.log.Analyzer), pnr default level is DEBUG.
                    if (PnRAppender || (appender.threshold >= loggerLevel && level >= appender.threshold)) {
                        // ONLY appender.threshold >= loggerLevel
                        appender.doAppend(Date.now(), level, category, message);
                    }
                }
            }
        };
        var awakeThenLog = function(level, category, message) {
            resume();
            doLog(level, category, message);
        };
        var log = noop;
        var pause = function() {
            paused = true;
            log = awakeThenLog;
        };
        var resume = function() {
            paused = false;
            log = doLog;
        };
        // id for appender
        var id = 0;
        var nextId = function() {
            return id++;
        };
        var appenders = {};
        /*
         * singleton Logger
         *
         */
        var levelSetting = {
            TRACE: 5000,
            DEBUG: 10000,
            INFO: 20000,
            WARN: 30000,
            ERROR: 40000,
            NO: Number.MAX_VALUE
        };
        var Logger = {
            LEVEL: levelSetting,
            isEnabled: function() {
                return enabled;
            },
            enable: function() {
                log = doLog;
                enabled = true;
            },
            disable: function() {
                log = noop;
                enabled = false;
            },
            toggleEnable: function() {
                if (enabled) {
                    this.disable();
                } else {
                    this.enable();
                }
            },
            addAppender: function( /*[key,] appender*/ ) {
                var _nextId = nextId();
                var key, appender;
                if (arguments.length === 1) {
                    key = _nextId;
                    appender = arguments[0];
                } else if (arguments.length >= 2) {
                    key = arguments[0];
                    appender = arguments[1];
                }
                if (typeof appender === "object" && appender.doAppend) {
                    if (appenders[key] !== undefined) {
                        return;
                    }
                    appenders[key] = appender;
                    return key;
                }

            },
            setAppenders: function(apds) {
                appenders = [];
                for (var i = 0, l = apds.length; i < l; i++) {
                    var appender = apds[i];
                    if (appender.appenderKey) {
                        this.addAppender(appender.appenderKey, appender.appender);
                    } else {
                        this.addAppender(appender.appender);
                    }
                }
            },
            removeAppender: function(key) {
                if (appenders[key] === undefined) {
                    return false;
                } else {
                    return (delete appenders[key]);
                }
            },
            getAppender: function(key) {
                return appenders[key];
            },
            getAppenders: function() {
                var appenderArray = [];
                if (appenders) {
                    for (var key in appenders) {
                        if (appenders.hasOwnProperty(key)) {
                            var item = appenders[key];
                            appenderArray.push(item);
                        }
                    }
                }
                return appenderArray;
            },
            ConsoleAppender: ConsoleAppender,
            DivAppender: DivAppender,
            AjaxAppender: AjaxAppender,
            //[time][level][category]-message [yyyy-MM-ddThh:mm:ss:ms][INFO][function1]-this is a piece of log.
            DefaultLayout: DefaultLayout,
            HTMLLayout: HTMLLayout,
            XMLLayout: XMLLayout,
            JSONLayout: JSONLayout,
            level: levelSetting.INFO, // default log level.
            trace: function(message, category) {
                log(Logger.LEVEL.TRACE, category, message, this.level);
            },
            debug: function(message, category) {
                log(Logger.LEVEL.DEBUG, category, message, this.level);
            },
            info: function(message, category) {
                log(Logger.LEVEL.INFO, category, message, this.level);
            },
            warn: function(message, category) {
                log(Logger.LEVEL.WARN, category, message, this.level);
            },
            error: function(message, category) {
                log(Logger.LEVEL.ERROR, category, message, this.level);
            }
        };
        appenders["[default]"] = new Logger.ConsoleAppender();
        return Logger;
    });
define('sap/viz/framework/common/util/FunctionUtils',['sap/viz/framework/common/util/TypeUtils', 'sap/viz/framework/common/log/Logger'],
    function Setup(TypeUtils, Logger) {
        var msgparas = /\{(\d+)\}/g;
        var ArraySlice = Array.prototype.slice;

        function emptyFn() {}

        function error(msg) {
            var args = arguments;
            if (args[0]) {
                var message = args[0].replace(msgparas, function(m, n) {
                    return args[parseInt(n) + 1];
                });
                Logger.error(message);
                throw message;
            } else {
                Logger.error('Unknown error!');
                throw 'Unknown error!';
            }
        }

        function createCallChain() {
            var callChain = [];

            function ChainedFunc() {
                for (var i = 0, len = callChain.length; i < len; i++) {
                    callChain[i].apply(this, arguments);
                }
            }

            function buildChain() {
                for (var i = 0, len = arguments.length; i < len; i++) {
                    if (TypeUtils.isFunction(arguments[i])) {
                        callChain.push(arguments[i]);
                    } else {
                        Logger.error('Could not create call chain for non-function object');
                        throw 'Could not create call chain for non-function object';
                    }
                }
            }
            ChainedFunc.chain = function() {
                return createCallChain.apply(null, [].concat(callChain, ArraySlice.call(arguments)));
            };
            buildChain.apply(null, arguments);
            return ChainedFunc;
        }

        var funcUtils = {
            /**
             * empty function
             *
             * @name sap.viz.base.utils.FunctionUtils#noop
             * @function
             */
            noop: emptyFn,

            /**
             * Function throwing unsupported exception with constant error message,
             * or make a new function which could throw exception with specified
             * error message
             *
             * @name sap.viz.base.utils.FunctionUtils#unsupported
             * @function
             *
             * @param {String}
             *            (msg)
             * @return {Function}
             * @throw {Error}
             */
            unsupported: function(msg) {
                if (arguments.length) {
                    return function() {
                        throw new Error(msg || 'Unsupported function!');
                    };
                } else {
                    throw new Error('Unsupported function!');
                }
            },

            /**
             * function throwing unimplemented exception
             *
             * @name sap.viz.base.utils.FunctionUtils#unimplemented
             * @function
             */
            unimplemented: function(msg) {
                if (arguments.length) {
                    return function() {
                        throw new Error(msg || 'Unimplemented function!');
                    };
                } else {
                    throw new Error('Unimplemented function!');
                }
            },

            /**
             * function throwing error
             *
             * @name sap.viz.base.utils.FunctionUtils#error
             * @param {String}
             *            msg the error message
             * @function
             */
            error: error,

            /**
             * Return a number comparator for ascendent sorting
             *
             * @param a
             * @param b
             * @returns todo
             */
            ascending: function(a, b) {
                return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
            },
            /**
             * Return a number comparator for descendent sorting
             *
             * @param a
             * @param b
             * @returns todo
             */
            descending: function(a, b) {
                return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
            },

            createCallChain: createCallChain
        };

        return funcUtils;
    });
define('sap/viz/framework/common/util/ObjectUtils',['sap/viz/framework/common/util/TypeUtils'], function Setup(TypeUtils) {
    // JSON RegExp
    var rvalidchars = /^[\],:{}\s]*$/,
        rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
        rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
        rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g;

    /**
     * Frequently used object utilities
     *
     * @name sap.viz.base.utils.ObjectUtils
     * @class
     */
    var ObjectUtils = {
        // Copy from jQuery
        extend: function() {
            var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {},
                i = 1,
                length = arguments.length,
                deep = false;

            // Handle a deep copy situation
            if (typeof target === "boolean") {
                deep = target;
                target = arguments[1] || {};
                // skip the boolean and the target
                i = 2;
            }

            // Handle case when target is a string or something (possible in
            // deep
            // copy)
            if (typeof target !== "object" && !TypeUtils.isFunction(target)) {
                target = {};
            }

            // extend jQuery itself if only one argument is passed
            if (length === i) {
                target = this;
                --i;
            }

            for (; i < length; i++) {
                // Only deal with non-null/undefined values
                if ((options = arguments[i]) != null) {
                    // Extend the base object
                    for (name in options) {
                        if (options.hasOwnProperty(name)) {
                            src = target[name];
                            copy = options[name];

                            // Prevent never-ending loop
                            if (target === copy) {
                                continue;
                            }

                            // Recurse if we're merging plain objects or arrays
                            if (deep && copy && (TypeUtils.isPlainObject(copy) || (copyIsArray = TypeUtils.isArray(
                                copy)))) {
                                if (copyIsArray) {
                                    copyIsArray = false;
                                    clone = src && TypeUtils.isArray(src) ? src : [];

                                } else {
                                    clone = src && TypeUtils.isPlainObject(src) ? src : {};
                                }
                                // Never move original objects, clone them
                                target[name] = ObjectUtils.extend(deep, clone, copy);
                                // Don't bring in undefined values
                            } else if (copy !== undefined) {
                                target[name] = copy;
                            }
                        }
                    }
                }
            }
            // Return the modified object
            return target;
        },

        // in this version, when target is array, just use src replace target
        extendByRepalceArray: function() {
            var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {},
                i = 1,
                length = arguments.length,
                deep = false;

            // Handle a deep copy situation
            if (typeof target === "boolean") {
                deep = target;
                target = arguments[1] || {};
                // skip the boolean and the target
                i = 2;
            }

            // Handle case when target is a string or something (possible in
            // deep
            // copy)
            if (typeof target !== "object" && !TypeUtils.isFunction(target)) {
                target = {};
            }

            // extend itself if only one argument is passed
            if (length === i) {
                target = this;
                --i;
            }

            for (; i < length; i++) {
                // Only deal with non-null/undefined values
                if ((options = arguments[i]) !== null) {
                    // Extend the base object
                    for (name in options) {
                        if (options.hasOwnProperty(name)) {
                            src = target[name];
                            copy = options[name];

                            // Prevent never-ending loop
                            if (target === copy) {
                                continue;
                            }

                            // Recurse if we're merging plain objects or arrays
                            // in this version, when target is array, just src replace target
                            if (deep && copy && (TypeUtils.isPlainObject(copy))) {
                                if (copyIsArray) {
                                    copyIsArray = false;
                                    clone = src && TypeUtils.isArray(src) ? src : [];

                                } else {
                                    clone = src && TypeUtils.isPlainObject(src) ? src : {};
                                }
                                // Never move original objects, clone them
                                target[name] = ObjectUtils.extendByRepalceArray(deep, clone, copy);
                                // Don't bring in undefined values
                            } else if (copy !== undefined) {
                                target[name] = copy;
                            }
                        }
                    }
                }
            }
            // Return the modified object
            return target;
        },

        // args is for internal usage only
        each: function(object, callback, args) {
            var name, i = 0,
                length = object.length,
                isObj = length === undefined || TypeUtils.isFunction(object);

            if (args) {
                if (isObj) {
                    for (name in object) {
                        if (callback.apply(object[name], args) === false) {
                            break;
                        }
                    }
                } else {
                    for (; i < length;) {
                        if (callback.apply(object[i++], args) === false) {
                            break;
                        }
                    }
                }

                // A special, fast, case for the most common use of each
            } else {
                if (isObj) {
                    for (name in object) {
                        if (callback.call(object[name], name, object[name]) === false) {
                            break;
                        }
                    }
                } else {
                    for (var value = object[0]; i < length && callback.call(value, i, value) !== false; value =
                        object[++i]) {}
                }
            }
            return object;
        },

        parseJSON: function(data) {
            if (typeof data !== "string" || !data) {
                return null;
            }

            // Make sure leading/trailing whitespace is removed (IE can't handle
            // it)
            data = data.trim();

            // Make sure the incoming data is actual JSON
            // Logic borrowed from http://json.org/json2.js
            if (rvalidchars.test(data.replace(rvalidescape, "@").replace(rvalidtokens, "]").replace(
                rvalidbraces, ""))) {

                // Try to use the native JSON parser first
                return window && window.JSON && window.JSON.parse ? window.JSON.parse(data) : (new Function("return " + data))(); // jshint ignore:line

            } else {
                TypeUtils.error("Invalid JSON: " + data);
            }
        },

        /**
         * Generate a guid
         *
         * @name sap.viz.base.utils.ObjectUtils#guid
         * @function
         * @return {String}
         */
        guid: function() { // guid generator
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random() * 16 | 0,
                    v = c == 'x' ? r : r & 0x3 | 0x8;
                return v.toString(16);
            });
        },

        clone: function(obj) {
            if (typeof(obj) !== 'object') {
                return obj;
            }
            if (obj === null) {
                return obj;
            }
            var o = obj.constructor === Array ? [] : {};
            for (var i in obj) {
                if (obj.hasOwnProperty(i)) {
                    o[i] = typeof obj[i] === "object" ? arguments.callee.call(null, obj[i]) : obj[i];
                }
            }
            return o;
        },

        deepEqual: function(source, target) {
            if (typeof source === 'object' && typeof target === 'object') {
                var key = null;
                for (key in source) {
                    if (source.hasOwnProperty(key)) {
                        if (!target.hasOwnProperty(key)) {
                            return false;
                        } else if (!this.deepEqual(source[key], target[key])) {
                            return false;
                        }
                    }
                }
                for (key in target) {
                    if (target.hasOwnProperty(key)) {
                        if (!source.hasOwnProperty(key)) {
                            return false;
                        }
                    }
                }
                return true;
            } else {
                return source === target;
            }
        },

        leftEqual: function(source, target) {
            if (typeof source === 'object' && typeof target === 'object') {
                var key = null;
                for (key in source) {
                    if (source.hasOwnProperty(key)) {
                        if (!target.hasOwnProperty(key)) {
                            return false;
                        } else if (!this.leftEqual(source[key], target[key])) {
                            return false;
                        }
                    }
                }
                return true;
            } else {
                return source === target;
            }
        },

        hasElement: function(array, element) {
            for (var i = 0; i < array.length; i++) {
                if (this.deepEqual(array[i], element)) {
                    return true;
                }
            }
            return false;
        },

        /**
         * Set value to a name path that starts from a base object
         * @param {string} name
         * @param {*} value
         * @param {object} [base=window]
         * @param {string} [separator='.']
         */
        setObject: function(name, value, base, separator) {
            for (var i = 0, parts = name.split(separator || '.'), last = parts.length - 1, p = base || window,
                    c;
                (c = parts[i]); ++i) {
                if (i < last) {
                    p[c] = p[c] || {};
                } else {
                    p[c] = value;
                }
                p = p[c];
            }
        },

        /**
         * Get value of a name path that starts from a base object
         * @param {string} name
         * @param {object} [base=window]
         * @param {string} [separator='.']
         * @returns {*} return undefined if path not found
         */
        getObject: function(name, base, separator) {
            for (var i = 0, parts = name.split(separator || '.'), last = parts.length - 1, p = base || window,
                    c;
                (c = parts[i]); ++i) {
                if (i < last && !p[c]) {
                    return undefined;
                }
                p = p[c];
            }
            return p;
        }
    };
    return ObjectUtils;
});
define('sap/viz/framework/common/lang/LangMessageUtil',[],
    function Setup() {

        var number2IDS = {

            // ERROR start with 50000.
            50000: 'IDS_ERROR_DIMENSION_NOT_ZERO',
            50001: 'IDS_ERROR_DIMENSION_WRONG_COUNT',
            50002: 'IDS_ERROR_DIMENSION_WRONG_LABELS_COUNT',
            50003: 'IDS_ERROR_WRONG_VALUES_COUNT_IN_AA2',
            50004: 'IDS_ERROR_WRONG_VALUES_COUNT_IN_AA1',
            50005: 'IDS_ERROR_NOT_MEET_NUMBER_OF_FEED',
            50006: 'IDS_ERROR_WRONG_FEED_TYPE',
            50007: 'IDS_ERROR_WRONG_FEED_TYPE_IN_DEFINTION',
            50008: 'IDS_ERROR_WRONG_AXIS_INDEX',
            50009: 'IDS_ERROR_WRONG_MEASURE_AXIS_INDEX',
            50010: 'IDS_ERROR_INVALID_FEEDING',
            50011: 'IDS_ERROR_NO_FEED_ID',
            50012: 'IDS_ERROR_INVALID_FEEDING_NUMBER',
            50013: 'IDS_ERROR_NO_AXIS',
            50014: 'IDS_ERROR_FEED_NOT_ACCEPT_DATA',
            50015: 'IDS_ERROR_NOT_FIND_MEASURE_GROUP',
            50016: 'IDS_ERROR_NOT_ACCEPT',
            50017: 'IDS_ERROR_INVALID_BINDING',
            50018: 'IDS_ERROR_NOT_FIND_FEED_DEFINITION',
            50019: 'IDS_ERROR_WRONG_TYPE',
            50020: 'IDS_ERROR_NOT_SUPPORTED',
            50021: 'IDS_ERROR_NOT_DETERMINE_AXIS_INDEX',
            50022: 'IDS_ERROR_NOT_ACCEPT_2_OR_MORE_AXES',
            50023: 'IDS_ERROR_AXIS_INDEX_SHOULD_BE_1_OR_2',
            50024: 'IDS_ERROR_NOT_DETERMINE_DEMENSION',
            50025: 'IDS_ERROR_UNKNOWN_STATE',
            50026: 'IDS_ERROR_INVALID_PATH_DEFINITION',
            50027: 'IDS_ERROR_NODE_NOT_IN_SAME_ROOT',
            50028: 'IDS_ERROR_NOT_ADD_SELF_AS_CHILD',
            50029: 'IDS_ERROR_NOT_ADD_ANCESTOR_AS_CHILD',
            50030: 'IDS_ERROR_NOT_CHILD_NODE_INSERT',
            50031: 'IDS_ERROR_NODE_IS_NOT_CHILD_OF_THIS_NODE',
            50032: 'IDS_ERROR_SELECTOR_NOT_NULL',
            50033: 'IDS_ERROR_NOT_FIND_JQUERY',
            50034: 'IDS_ERROR_NEED_SPECIFY_OPTIONS_TO_INITIALIZE',
            50035: 'IDS_ERROR_NEED_SPECIFY_HOLDER_FOR_VISUALIZATION',
            50036: 'IDS_ERROR_NOT_INITIALIZE_WITHOUT_UICONTROLLER',
            50037: 'IDS_ERROR_NEED_PROVIDE_CONTAINER_FOR_FRAME',
            50038: 'IDS_ERROR_CATEGORY_NAME_NOT_EMPTY',
            50039: 'IDS_ERROR_CATEGORY_FACTORY_MUST_BE_FUNCTION',
            50040: 'IDS_ERROR_EXIST_CATEGORY_NAME',
            50041: 'IDS_ERROR_NOT_REGISTER_UNDEFINED_OBJECT',
            50042: 'IDS_ERROR_NOT_REGISTER_WITHOUT_VALID_ID',
            50043: 'IDS_ERROR_UNKNOWN_ERROR',
            50044: 'IDS_ERROR_NOT_CREATE_CHAIN_FOR_NON_FUNCTION_OBJECT',
            50045: 'IDS_ERROR_AXIS_ALREADY_EXIST',
            50046: 'IDS_ERROR_CAN_NOT_FIND_CATEGORY',
            50047: 'IDS_ERROR_ALREADY_EXIST_IN_CATEGORY',
            50048: 'IDS_ERROR_LOADING_TEMPLATE_FAIL',
            50049: 'IDS_ERROR_PARSE_ERROR_EXPECT_TO',
            50050: 'IDS_ERROR_FLATTABLE_FEED_DEF_FIELD_INDEX_MISSING',
            50051: 'IDS_ERROR_FLATTABLE_MANNUAL_FEED_WRONG_BINDING',
            50052: 'IDS_ERROR_FLATTABLE_INVALID_DATA_PARAM',
            50053: 'IDS_ERROR_DIMENSIONS_INCOMPLETE_BINDING',
            50054: 'IDS_ERROR_DIMENSIONS_OR_MEASURES_DUPLICATED_BINDING',

            // warning
            40000: 'IDS_WARN_PARAMETER_NOT_CORRECT',
            40001: 'IDS_WARN_LOCALE_NOT_CORRECT'

        };


        var IDS2Number = null;
        /**
         * create a map for message key to message code.
         */
        function getIDS2NumberMapping() {
            if (IDS2Number == null && number2IDS) {
                IDS2Number = {};
                for (var num in number2IDS) {
                    if (number2IDS.hasOwnProperty(num)) {
                        IDS2Number[number2IDS[num]] = num;
                    }
                }
            }
            return IDS2Number;

        }

        var langMessageUtil = {
            /**
             * Register number/IDS pair for message globalization.
             *
             * @param {Number}
             *          message code.
             * @param {String}
             *          the key string of message content.
             */
            register: function(number, IDS) {
                if (IDS2Number === null) {
                    IDS2Number = getIDS2NumberMapping();
                }
                if (number2IDS && number2IDS.hasOwnProperty(number) === false && IDS2Number.hasOwnProperty(IDS) ===
                    false) {
                    number2IDS[number] = IDS;
                    IDS2Number[IDS] = number;
                } else {
                    // TODO: handle the number or IDS exists.
                }
            },

            /**
             * Get the message key by message code.
             *
             * @param {Number}
             *          message code.
             * @returns {String}
             *          the key string of message content.
             */
            getIDSByNumber: function(num) {
                if (number2IDS && number2IDS.hasOwnProperty(num)) {
                    return number2IDS[num];
                } else {
                    return undefined;
                }
            },
            /**
             * Get the message code by message key.
             *
             * @param {String}
             *          message key.
             * @returns {number}
             *          message code.
             */
            getNumberByIDS: function(IDS) {
                if (IDS2Number === null) {
                    IDS2Number = getIDS2NumberMapping();
                }
                if (IDS2Number && IDS2Number.hasOwnProperty(IDS)) {
                    return IDS2Number[IDS];
                } else {
                    return undefined;
                }
            }

        };
        return langMessageUtil;
    });
define('sap/viz/framework/common/util/ResourceLoader',[
    'sap/viz/framework/common/util/ObjectUtils'
], function(ObjectUtils) {

    // Load a script tag to current page
    function loadScript(url, onComplete) {
        var done = 0;
        var head = document.getElementsByTagName("head")[0] || document.documentElement;
        var script = document.createElement("script");
        script.type = 'text/javascript';
        script.src = url;

        function complete(err) {
            //clear script
            script.onload = script.onreadystatechange = null;
            if (script.parentNode) {
                script.parentNode.removeChild(script);
            }
            onComplete(err);
        }

        script.onload = script.onreadystatechange = function() {
            if (!done && (!this.readyState || this.readyState === "loaded" || this.readyState === "complete")) {
                done = 1;
                complete();
            }
        };

        if (script.addEventListener) {
            script.addEventListener('error', complete, true);
        }

        if (head.firstChild) {
            head.insertBefore(script, head.firstChild);
        } else {
            head.appendChild(script);
        }
    }

    var loadingMap = {};
    var loadedUrls = {};

    // Load resource on single path
    function loadForPath(path, id, onComplete, args) {
        function loadForId(id) {
            var url = args.getUrl(path, id);
            if (loadedUrls[url]) {
                onComplete(path, id);
            } else {
                loadScript(url, function(err) {
                    if (err) {
                        if (args.degrade) {
                            id = args.degrade(id);
                            if (id) {
                                loadForId(id);
                                return;
                            }
                        }
                        onComplete(path, id, err);
                    } else {
                        loadedUrls[url] = 1;
                        //FIXME (by eddy.zeng) temporary change, since we're using require.js in jsonp, 
                        //delay call callback to make sure jsonp content evaluated before trying to get
                        //language content from setting map.
                        setTimeout(function() {
                            onComplete(path, id);
                        }, 4);
                    }
                });
            }
        }
        loadForId(id);
    }

    // Load resource on multiple paths
    // example:
    // loadResource({
    //      id: "en_US",
    //      paths: ["path/to/resoruce", "another/path/to/resource"],
    //      degrade: function(id){
    //          // An optional function to degrade to another id if the given id failed to load resource file.
    //          // return another id
    //      },
    //      onPathComplete: function(path, effectiveId, error){
    //          // Callback when one path is loaded
    //          // If degrade is called, effectiveId != id
    //      },
    //      onComplete: function(errors){
    //          // Callback when every path are loaded.
    //          // errors is an array containing error reports on failed paths.
    //          // Each item in errors is of the following format:
    //          // {
    //          //      path: '...'
    //          //      id: effectiveId,
    //          //      err: error object
    //          // }
    //      }
    // });
    function loadResource(args) {
        var id = args.id;
        var paths = args.paths || [];
        var errors = [];
        var uuid = id + "_" + ObjectUtils.guid();

        // load counter for specific uuid
        loadingMap[uuid] = paths.length;

        function onLoadedForPath(path, effectiveId, err) {
            if (err) {
                errors.push({
                    path: path,
                    id: effectiveId,
                    err: err
                });
            }
            if (args.onPathComplete) {
                args.onPathComplete(path, effectiveId, err);
            }
            if (--loadingMap[uuid] === 0 && args.onComplete) {
                args.onComplete(errors);
            }
        }

        if(paths.length){
            for (var i = 0; i < paths.length; ++i) {
                loadForPath(paths[i], id, onLoadedForPath, args);
            }
        }else if(args.onComplete){
            args.onComplete(errors);
        }
    }

    return {
        loadScript: loadScript,
        loadResource: loadResource
    };
});

define('sap/viz/framework/common/lang/LangManager',[
    'sap/viz/framework/common/util/FunctionUtils',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/lang/LangMessageUtil',
    'sap/viz/framework/common/util/ResourceLoader',
    'exports'
], function(FunctionUtils, ObjectUtils, LangMessageUtil, ResourceLoader) {

    var listeners = [];
    var languageSetting = {};

    var placeHolder = 'language';
    languageSetting[placeHolder] = {};

    /**
     * substitute the localized string for resource bundle.
     * @private
     * @example
     *      substitute('The ID {0} is not a valid number', 'NOT_NUMBER')
     * @returns {String} replacedString
     */
    var substitute = function(str /*String*/ , rest /*Array*/ ) {
        if (str == null) {
            return '';
        }

        if (!rest) {
            rest = [];
        }
        var len = rest.length;
        for (var i = 0; i < len; i++) {
            str = str.replace(new RegExp("\\{" + i + "\\}", "g"), rest[i]);
        }
        return str;
    };

    var manager = {
        /** @lends sap.viz.lang.langManager */

        /**
         * The file paths of language folder.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead. You can use sap.viz.api.env.Resource.path instead.
         * @default ["../../../resources/langs/charts/", "../../../resources/langs/sdk"], by default it contains charts
           and sdk language resource.
         * if only contains sap.viz.skd, only reset loadPath for sdk.
         */
        loadPath: [
            "../../../resources/langs/charts/",
            "../../../resources/langs/sdk/"
        ],

        /**
         * File name template of the language resource. ${lang} can be used in the template to represent the language
           name.
         * @default "language_${lang}.js"
         */
        fileNameTemplate: 'language_${lang}.js',

        /**
         * Alias language name mapping. The mapper name will not be tried at all. The mapped name will be used instead.
         * @type Object?
         */
        alias: {
            "ar_AE": "ar",
            "ar_EG": "ar",
            "ar_SA": "ar",

            "bg_BG": "bg",

            "ca_ES": "ca",

            "cs_CZ": "cs",

            "da_DK": "da",

            "de_CH": "de",
            "de_AT": "de",
            "de_BE": "de",
            "de_LU": "de",
            "de_DE": "de",

            "el_CY": "el",
            "el_GR": "el",

            "en_AU": "en",
            "en_CA": "en",
            "en_GB": "en",
            "en_HK": "en",
            "en_ID": "en",
            "en_IE": "en",
            "en_IN": "en",
            "en_IS": "en",
            "en_MY": "en",
            "en_NZ": "en",
            "en_PH": "en",
            "en_SG": "en",
            "en_US": "en",
            "en_ZA": "en",

            "es_AR": "es",
            "es_BO": "es",
            "es_CL": "es",
            "es_CO": "es",
            "es_ES": "es",
            "es_MX": "es",
            "es_PE": "es",
            "es_UY": "es",
            "es_VE": "es",

            "et_EE": "et",

            "fa_IR": "fa",

            "fi_FI": "fi",

            "fr_BE": "fr",
            "fr_CA": "fr",
            "fr_CH": "fr",
            "fr_FR": "fr",
            "fr_LU": "fr",

            "he_IL": "iw",

            "hi_IN": "hi",

            "hr_HR": "hr",

            "hu_HU": "hu",

            "id_ID": "id",

            "it_CH": "it",
            "it_IT": "it",

            "ja_JP": "ja",

            "ko_KR": "ko",

            "lt_LT": "lt",

            "lv_LV": "lv",

            "nb_NO": "nb",

            "nl_BE": "nl",
            "nl_NL": "nl",

            "nn_NO": "nn",

            "pl_PL": "pl",

            "pt_BR": "pt",
            "pt_PT": "pt",

            "ro_RO": "ro",

            "ru_KZ": "ru",
            "ru_RU": "ru",
            "ru_UA": "ru",

            "sh_ME": "sr",
            "sh_RS": "sr",

            "sk_SK": "sk",

            "sl_SL": "sl",
            "sl_SI": "sl",

            "sv_SE": "sv",

            "th_TH": "th",

            "tr_CY": "tk",
            "tr_TR": "tk",

            "uk_UA": "uk",

            "vi_VI": "vi",
            "vi_VN": "vi",

            "zf_TW": "zh_TW",
            "zh_HK": "zh_CN"
        },

        /**
         * Special degrade rules. By default, "xx_yy" degrads to "xx", and "xx" degrads to the default language "en".
         */
        //degrade: {},

        /**
         * Default language
         * If a specific language does not exists, will degrade to this default language.
         * @default 'en'
         */
        defaultLanguage: 'en',

        /**
         * Current language
         */
        currentLanguage: 'en',

        /**
         * Return current applied language Id.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead.
         * @returns {String}
         */
        current: function() {
            return manager.currentLanguage;
        },

        /**
         * Register new language.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead. You ca nuse sap.viz.extapi.env.Language.
           register instead.
         * @param {Object...}
         *
         * @returns {Object} {@link sap.viz.lang.langManager}
         */
        register: function(obj) {
            languageSetting[obj.id] = ObjectUtils.extend(true, languageSetting[obj.id], obj.value);
            return manager;
        },

        /**
         * Apply(switch) language.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead. You ca nuse sap.viz.api.env.Language.set instead.
         * @param {String}
         *          id the language id
         * @param {Function}
         *          [callback] the call back function.
         *
         * @returns {Object} {@link sap.viz.lang.langManager}
         */
        apply: function(id, callback, failedCallback) {
            var aliasId = alias(id);
            var errMsgs = [];

            function onPathComplete(path, effectiveId, err) {
                var errMsg;

                if (!effectiveId) {
                    errMsg = 'Failed to load language ' + id + ' from path ' + path + '.';
                } else if (aliasId !== effectiveId) {
                    errMsg = 'Language ' + id + ' is degraded to ' + effectiveId + ' for path ' + path + '.';
                }

                if (errMsg) {
                    errMsgs.push(errMsg);
                    try {
                        FunctionUtils.error(errMsg);
                    } catch (e) {
                        // Not a fatal error.
                    }
                }
            }

            function onComplete() {
                takeinDefQueue();

                if (errMsgs.length && failedCallback) {
                    failedCallback(id, errMsgs.join('\n'));
                }

                // Honor user's input
                manager.currentLanguage = id;

                // Find the currently effective language resource and pass it to listeners
                id = aliasId;
                var language = languageSetting[id];
                while (!language) {
                    id = degrade(id);
                    language = id && languageSetting[id];
                }

                for (var i = 0; i < listeners.length; ++i) {
                    var listener = listeners[i];
                    listener.fn.apply(listener.scope, [language]);
                }

                // fail to load language will be handled by failedCallback, 
                if (callback) {
                    callback();
                }
            }

            if (aliasId) {
                ResourceLoader.loadResource({
                    id: aliasId,
                    paths: manager.loadPath,
                    getUrl: getUrl,
                    degrade: degrade,
                    onPathComplete: onPathComplete,
                    onComplete: onComplete
                });
            } else {
                takeinDefQueue();
            }
            return manager;
        },

        /**
         * Get globalization value.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead. You ca nuse sap.viz.api.env.Language.get instead.
         * @param {String}
         *       id of labels
         *
         * @returns {String}  globalization value
         */
        get: function(ids, lang) {
            var id = alias(lang || manager.currentLanguage);
            var language = languageSetting[id];
            var result = language && language[ids];

            while (id && id !== placeHolder && typeof result !== 'string') {
                id = degrade(id);
                language = id && languageSetting[id];
                result = language && language[ids];
            }

            return result || '';
        },

        /**
         * Get log id and globalization log message.
         * @ignore
         *
         * @param {...Object}
         *       key of log message
         *       variables in the log message
         * @example
         *      // return Invalid feeding: the correct number  is 2.
         *      getLogMessage('IDS_ERROR_INVALID_FEEDING_NUMBER', 2);
         *
         * @returns {String}  log id and globalization log message.
         */
        getLogMessage: function(ids) {
            var num = LangMessageUtil.getNumberByIDS(ids);
            var message = manager.get(ids);

            // Substitute the resouce boundle
            // e.g: ('Invalid feeding: the correct number  is {0}.', '2')
            if (arguments.length > 1) {
                message = substitute(message, Array.prototype.slice.call(arguments, 1));
            }

            return (num ? '[' + num + '] - ' : '') + message;
        },

        /**
         * Get log globalization message value by ID.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead.
         * @param {Number}
         *       message code.
         *
         * @returns {String}  globalization log message value
         */
        getLogMessageByID: function(num) {
            var ids = LangMessageUtil.getIDSByNumber(num);
            if (!ids) {
                FunctionUtils.error('Not exist the log ID {0}.', num);
            }
            return manager.get(ids);
        },

        /**
         * Add language folder path before load language file if the language folder is not default.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead. You can use sap.viz.api.env.Resource.path instead.
         * @param {String}
         *       folder of language files.
         *
         * @returns {Arrary}  all folders of language files.
         */
        addLanguageFolder: function(folder) {
            manager.loadPath.push(folder);
            return manager.loadPath;
        },

        /**
         * Add a listener which will be executed when current language is changed.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead. You ca nuse sap.viz.extapi.env.Language.
           addListener instead.
         * @param {Object}
         *          listener
         * @param {Function}
         *          listener.fn the listener function
         * @param {Object}
         *          listener.scope the "this" object in the listener function
         *
         * @returns {Object} {@link sap.viz.lang.langManager}
         */
        addListener: function(listener) {
            listeners.push(listener);
            return manager;
        },

        /**
         * Remove the listener.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead. You ca nuse sap.viz.extapi.env.Language.
           removeListener instead.
         * @param {Object} listener
         *          the listener reference
         *
         * @returns {Object} {@link sap.viz.lang.langManager}
         */
        removeListener: function(listener) {
            var index = listeners.indexOf(listener);
            if (index >= 0) {
                listeners.splice(index, 1);
            }
            return manager;
        }
    };

    function normalizeLangName(id) {
        return String(id).replace(/-/g, '_');
    }

    function alias(id) {
        id = normalizeLangName(id);
        return (manager.alias && manager.alias[id]) || id;
    }

    function degrade(id) {
        var degradeMap = manager.degrade;
        if (degradeMap && degradeMap[id]) {
            return degradeMap[id];
        }

        var matched = String(id).match(/^([a-zA-Z]+)([_-][a-zA-Z]+)?$/);
        if (matched) {
            var mainLang = matched[1].toLowerCase();

            if (matched[2]) {
                return mainLang;
            } else if (mainLang !== placeHolder) {
                return placeHolder;
            }
        }
        return null;
    }

    function getUrl(path, id) {
        path = /\/$/.test(path) ? path : path + '/';
        var fileName = id === placeHolder ?
                placeHolder + '.js' :
                manager.fileNameTemplate.replace(/\$\{lang\}/gi, id);
        return path + fileName;
    }

    //take in register queue
    function takeinDefQueue() {
        var langs = sap && sap.viz && sap.viz.extapi && sap.viz.extapi.env &&
            sap.viz.extapi.env.language && sap.viz.extapi.env.language._queue;

        if (langs) {
            for (var i = 0; i < langs.length; ++i) {
                manager.register(langs[i]);
            }
            // For multiple require contexts to work.
            //sap.viz.extapi.manifest._queue.language.registerList = [];
        }
    }

    takeinDefQueue();
    return manager;
});

define('sap/viz/framework/core/ChartViewRegistry',['sap/viz/framework/common/util/FunctionUtils', 'require', 'sap/viz/framework/common/lang/LangManager',
    'exports'
], function(FunctionUtils, require, LangManager) {
    

    var viewCache = {};
    var bindCache = {};
    var renderTypeCache = {};
    var loaded = false;
    var usingV3Registry = false;

    var filterBinding = function(bindingDef, chartType) {
        if (chartType.indexOf('trellis') < 0) {
            var bindings = [];
            bindingDef.map(function(item) {
                if (item.id.indexOf('trellis') < 0) {
                    bindings.push(item);
                }
            });
            return bindings;
        } else {
            return bindingDef;
        }
    };

    var ChartViewRegistry = {

        unregister: function(type) {
            delete viewCache[type];
            delete bindCache[type];
            delete renderTypeCache[type];
        },
        unregisterAll: function() {
            viewCache = {};
            bindCache = {};
            renderTypeCache = {};
        },
        registerAll: function(callback) {

            var services = sap.bi.framework.getService("sap.viz.aio",
                "*sap.viz.impls");
            var servicesMetaData = sap.bi.framework
                .getServiceMetadata("*sap.viz.impls");

            var loadedCount = 0;
            var chartViewDefs = [];
            var bindDefs = [];

            // obtain all of binding definition
            for (var i = 0; i < services.length; i++) {
                var service = services[i];
                chartViewDefs.push(service.view);
                bindDefs.push(service.bindings);
                renderTypeCache[servicesMetaData[i].id] = service.renderType;
            }

            // calculate the count of module needing loaded.
            var needLoadCount = bindDefs.length + services.length;
            if (needLoadCount > 0) {
                loaded = true;
            }
            chartViewDefs.forEach(function(viewDef, index) {
                doRegister(viewDef, index, viewCache);
            });

            bindDefs.forEach(function(bindDef, index) {
                doRegister(bindDef, index, bindCache, true);
            });

            function filterBinding(bindDef, chartType) {
                var tmpBindings = bindDef.slice();
                if (!/trellis/i.test(chartType)) {
                    tmpBindings = tmpBindings.filter(function(item) {
                        if (!/trellis/.test(item.id)) {
                            return item;
                        }
                    });
                }
                if (/scatter/i.test(chartType)) {
                    tmpBindings = tmpBindings.filter(function(item) {
                        if (!/bubble/.test(item.id)) {
                            return item;
                        }
                    });
                }
                if (/trellis/i.test(chartType)) {
                    tmpBindings = tmpBindings.filter(function(item) {
                        if (item.id !== 'dataFrame') {
                            return item;
                        }
                    });
                }
                return tmpBindings;
            }
            /* global requirejs: true */
            function doRegister(module, index, target, isBinding) {
                if (requirejs && requirejs.s && requirejs.s.contexts && requirejs.s.contexts._) {
                    var nextTickBak = requirejs.s.contexts._.nextTick;
                    requirejs.s.contexts._.nextTick = function(fn) {
                        fn();
                    };
                    if (!module) {
                        return;
                    }
                    if(usingV3Registry){
                        module = module+'/v3';
                    }
                    require([module], function(view) {
                        loadedCount++;
                        if (isBinding) {
                            view = filterBinding(view, services[index].name);
                        }
                        target[servicesMetaData[index].id] = {
                            family: services[index].family,
                            constructor: view,
                            name: LangManager.get(services[index].name),
                            vender: services[index].vender
                        };

                        if (loadedCount === needLoadCount) {
                            if (callback) {
                                callback();
                            }
                        }
                    });

                    requirejs.s.contexts._.nextTick = nextTickBak;
                }
            }
        },

        usingV3Registry: function(isUsingV3) {
            usingV3Registry = isUsingV3;
        },

        registerAllWithV3: function(callback) {
            this.registerAll(callback);
        },
        registerByType: function(type) {
            var services = sap.bi.framework.getService("sap.viz.aio",
                "*sap.viz.impls");
            var servicesMetaData = sap.bi.framework
                .getServiceMetadata("*sap.viz.impls");
            for (var len = servicesMetaData.length, i = len - 1; i > -1; i--) {
                if (servicesMetaData[i].id === type) {
                    break;
                }
            }
            if (i > -1) {
                var chart = services[i];
                if (chart.viz) { //backward for extension
                    chart.viz.forEach(function(item) {
                        if (item && (typeof item.init) === 'function') {
                            item.init();
                        }
                    });
                } else {
                    //TODO: Support register infochart by type.
                    // var service = services[i];
                    // renderTypeCache[servicesMetaData[i].id] = service.renderType;
                    // doRegister(service.view, i, viewCache);
                    // doRegister(service.bindings, i, bindCache, true);
                }
                return true;

            }
            return false;
        },
        getBindingDefinition: function(type) {
            var definition = bindCache[type];
            if (definition == null) {
                FunctionUtils
                    .error("can't find binding definition according to type[" + type + "]");
            }
            return definition;
        },
        registerBind: function(id, binds, family,name) {
            bindCache[id] = {
                constructor: binds,
                family: family,
                name: name
            };
        },
        registerViewer: function(id, viewer) {
            viewCache[id] = {
                constructor: viewer
            };
        },
        registerRenderType: function(id, innerId) {
            renderTypeCache[id] = innerId;
        },

        //TODO: add scale & property get.
        getMetadata: function(type) {

            if (!loaded) {
                var i, tmp;
                if (requirejs && requirejs.s && requirejs.s.contexts) {
                    var hasAIO = false;
                    for (i in requirejs.s.contexts) {
                        if (i.indexOf("sap.viz.aio") > -1) {
                            hasAIO = true;
                            break;
                        }
                    }
                    if (!hasAIO) {
                        i = "_";
                    }
                    tmp = requirejs.s.contexts[i].nextTick;
                    requirejs.s.contexts[i].nextTick = function(fn) {
                        fn();
                    };
                }
                if (usingV3Registry) {
                    this.registerAllWithV3();
                } else {
                    this.registerAll();
                }
                if (requirejs && requirejs.s && requirejs.s.contexts && requirejs.s.contexts[i] && tmp) {
                    requirejs.s.contexts[i].nextTick = tmp;
                }


            }

            if (!bindCache[type]) {
                if (!this.registerByType(type)) {
                    return null;
                }
            }

            if (bindCache[type]) {
                return {
                    "type": type,
                    "family": bindCache[type].family,
                    "name": LangManager.get(bindCache[type].name) || bindCache[type].name,
                    "vender": bindCache[type].vender,
                    "renderType": renderTypeCache[type],
                    "bindings": filterBinding(bindCache[type].constructor, type)
                };
            } else {
                return null;
            }
        },

        getAllMetadata: function() {
            var metadata = [];
            for (var i in renderTypeCache) {
                if (renderTypeCache.hasOwnProperty(i)) {
                    metadata.push({
                        "type": i,
                        "family": bindCache[i].family,
                        "renderType": renderTypeCache[i],
                        "bindings": filterBinding(bindCache[i].constructor, i)
                    });
                }
            }
            return metadata;
        },

        getViewInstance: function(type, runtime) {

            var renderType = renderTypeCache[type];

            var chartViewClazzInfo = viewCache[type];
            if (chartViewClazzInfo == null && renderType == null) {
                FunctionUtils.error("can't find ChartView according to type[" + type + "]");
            }

            var ChartViewClazz = chartViewClazzInfo.constructor;

            return new ChartViewClazz(runtime, {
                chartType: type,
                renderType: renderType
            });
        }
    };

    return ChartViewRegistry;
});

define( "jquery", [], function () { return jQuery; } );

define('sap/viz/framework/common/template/TemplateManager',[
    'sap/viz/framework/common/util/FunctionUtils',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/lang/LangManager',
    'sap/viz/framework/common/util/ResourceLoader',
    'sap/viz/framework/common/log/Logger',
    'exports'
], function(FunctionUtils, TypeUtils, ObjectUtils, langManager, ResourceLoader, Logger) {

    var listeners = [];
    var currentTemplate;
    var defaultTemplateId = "default";
    var defaultTemplate = {
        id: defaultTemplateId,
        name: "Default"
    };

    var manifest = {};
    manifest.registerCategory = function (name, factory, factoryThisObj) {
        if (!TypeUtils.isNonEmptyString(name)) {
            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_CATEGORY_NAME_NOT_EMPTY'));
        }

        if (factory && !TypeUtils.isFunction(factory)) {
            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_CATEGORY_FACTORY_MUST_BE_FUNCTION'));
        }

        if (manifest.hasOwnProperty(name)) {
            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_EXIST_CATEGORY_NAME', name));
        }

        var collection = d3.map();
        /**
         * xxx represents feeds, module and viz. The three categories have been registered into manifest and 
         * could provide some common APIs.
         * @class sap.viz.manifest.xxx
         * @ignore
         */
        var category = {
            /**
             * Load an item from category by id.</br>
             * </br>
             * If the item is a Built-in_Manifest_Objects, it will provide some other APIs.Please see the 
             * corresponding object in Built-in_Manifest_Objects.</br>
             * @see Built-in_Manifest_Objects
             * @method sap.viz.manifest.xxx#get
             * @param {String} id the id of item
             * @param {Object} throwErrorIfNull optional, a exception type
             * @returns {Object} the item loaded from category by id
             * @example <caption>Sample Code:</caption>
             * var moduleFeeds =  manifest.feeds.get(id);//xxx represents feeds
             * var barModule = manifest.module.get(barId);//xxx represents module
             * var lineChart = manifest.viz.get(lineChartId);//xxx represents viz
             * @ignore
             */
            get: function (id, throwErrorIfNull) {
                var manifest = this;
                var result = collection.get(id);
                if (result === undefined && throwErrorIfNull) {
                    FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_CAN_NOT_FIND_CATEGORY'), id, name);
                }

                if (result && result["__needParsed__"] === true) {
                    var isAbstract = result["abstract"] === true;
                    result = ObjectUtils
                        .extend(true, null, result.base !== undefined ? category.get(
                            result.base, true) : null, result);

                    Object.defineProperty(result, "abstract", {
                        value: isAbstract,
                        enumerable: false
                    });

                    if (factory && !isAbstract) {
                        factory.call(factoryThisObj, result, manifest);
                    }

                    delete result["__needParsed__"];
                    collection.set(id, result);
                }
                return result;
            },

            /**
             * unregister the item with specified id from category
             * @method sap.viz.manifest.xxx#unregister
             * @param {String} id id of the item being unregistered
             * @return {Object} the removed module Object
             * @example <caption>Sample Code:</caption>
             * manifest.module.unregister('sap.viz.modules.bar');
             * @ignore
             */
            unregister: function (id) {
                var ret;
                if (TypeUtils.isExist(id)) {
                    ret = collection.get(id);
                    collection.remove(id);
                }
                return ret;
            },

            /**
             * Register an item into category
             * @method sap.viz.manifest.xxx#register
             * @param {Object} newItems variable parameters, at least need one item to be registered into category
             * @return {Object} manifest
             * @example <caption>Sample Code:</caption>
             * manifest.viz.register(chartOne);//xxx represents viz
             * ....
             * manifest.viz.register(chartOne,chartTwo,chartThree);
             * ....
             * manifest.module.register(tooltip);//xxx represents module
             * @ignore
             */
            register: function () {
                Array.prototype.forEach.call(arguments, function (obj) {
                    if (TypeUtils.isUndefined(obj)) {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_REGISTER_UNDEFINED_OBJECT'));
                    }

                    var idStr = obj.id;

                    if (!TypeUtils.isNonEmptyString(idStr)) {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_REGISTER_WITHOUT_VALID_ID'));
                    }

                    if (collection.has(idStr)) {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_ALREADY_EXIST_IN_CATEGORY',
                                idStr, name));
                    }

                    obj["__needParsed__"] = true;

                    collection.set(idStr, obj);
                });

                return manifest;
            }
        };

        manifest[name] = category;
        return category;
    };

    var templateCategory = manifest.registerCategory("template", function(obj) {
        var css = obj.css;
        if (!TypeUtils.isString(css)) {
            var text = "";
            for (var selector in css) {
                if (css.hasOwnProperty(selector)) {
                    text += selector + "{";
                    var declaration = css[selector];
                    for (var name in declaration) {
                        if (declaration.hasOwnProperty(name)) {
                            text += name + ":" + declaration[name] + ";";
                        }
                    }
                    text += "}";
                }
            }
            obj.css = text;
        }
        Object.defineProperties(obj, {
            props: {
                value: function(vizId) {
                    var properties = obj.properties;
                    if (properties) {
                        return properties[vizId];
                    }
                }
            }
        });
        return obj;
    });

    function getUrl(path, id) {
        path = /\/$/.test(path) ? path : path + '/';
        return path + id + "/template.js";
    }

    function takeinDefQueue(id) {
        var templateConfigs = [];
        var templates = window.sap && sap.viz && sap.viz.extapi && sap.viz.extapi.env &&
            sap.viz.extapi.env.template && sap.viz.extapi.env.template._queue;
        var registered = !!templateCategory.get(id);
        var templatesById = templates && templates[id];

        if (templatesById) {
            for (var i = 0; i < templatesById.length; ++i) {
                var template = templatesById[i];
                if (registered) {
                    manager.extend(id, template);
                } else {
                    manager.register(template);
                    registered = true;
                }
            }
        }
        return templateCategory.get(id);
    }

    /** @lends sap.viz.TemplateManager */
    var manager = {
        /**
         * The file paths of templates folder. {@link sap.viz.TemplateManager} will discover available templates in 
         * this folder.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead. You can use sap.viz.api.env.Resource.path instead.
         * @default ["../../../resources/templates"]
         */
        loadPath: ["../../../resources/templates"],

        /**
         * Return current applied template.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead. You can use sap.viz.extapi.env.Template.
           current instead.
         * @returns {Object} the manifest of template
         */
        current: function() {
            return currentTemplate;
        },

        /**
         * Apply(switch) a template.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
          please consider to use new version of this API instead. You can use sap.viz.api.env.Template.set instead.
         * @param {String}
         *          id the template id
         * @param {Function}
         *          [cb] the call back function. It will be executed after template is applied successfully with 
         *          current template as parameter. *
         * @param {Object}
         *          [thisObj] "this" object during calling call back function.
         *
         * @returns {Object} {@link sap.viz.TemplateManager}
         *
         */
        apply: function(id, cb, thisObj, failedCallback) {
            var template = takeinDefQueue(id);
            var paths = manager.loadPath;

            function onComplete(errors) {
                var template = takeinDefQueue(id);
                if (template) {
                    currentTemplate = template;
                    for (var i = 0; i < listeners.length; ++i) {
                        var listener = listeners[i];
                        listener.fn.apply(listener.scope, [template, cb]);
                    }
                    if (cb) {
                        cb.call(thisObj, template);
                    }
                } else {
                    if (failedCallback) {
                        failedCallback(id, 'Loading template ' + id + ' failed.');
                    }
                    try {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_LOADING_TEMPLATE_FAIL', id));
                    } catch (e) {
                        // Not a fatal error.
                    }
                }
            }

            if (template) {
                onComplete(template);
            } else {
                ResourceLoader.loadResource({
                    id: id,
                    paths: manager.loadPath,
                    getUrl: getUrl,
                    onComplete: onComplete
                });
            }
            return manager;
        },

        /**
         * Register new templates.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead. You can use sap.viz.extapi.env.Template.
           register instead.
         * @param {Object...}
         *          templates the template descriptors(may be multiple).
         *
         * @returns {Object} {@link sap.viz.TemplateManager}
         */
        register: function() {
            templateCategory.register.apply(templateCategory, arguments);
            return manager;
        },

        /**
         * Extend/modify an existing template.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, 
         * please consider to use new version of this API instead. You can use sap.viz.extapi.env.Template.
         * register instead.
         * @param {String}
         *          id the template id
         * @param {Object}
         *          obj the extended part.
         *
         * @returns {Object} {@link sap.viz.TemplateManager}
         */
        extend: function(id, obj) {
            var template = templateCategory.get(id) || takeinDefQueue(id);
            if (template) {
                ObjectUtils.extend(true, template.properties, obj.properties);
                template.isGhost = obj.isGhost || template.isGhost;
                template.css += obj.css || "";
            }
            return manager;
        },

        /**
         * Add a listener which will be executed when current template is changed.
         * @ignore
         * @param {Object}
         *          listener
         * @param {Function}
         *          listener.fn the listener function
         * @param {Object}
         *          listener.scope the "this" object in the listener function
         *
         * @returns {Object} {@link sap.viz.TemplateManager}
         */
        addListener: function(listener) {
            listeners.push(listener);
            return manager;
        },

        /**
         * Remove the listener.
         * @ignore
         * @param {Object} listener
         *          the listener reference
         *
         * @returns {Object} {@link sap.viz.TemplateManager}
         */
        removeListener: function(listener) {
            var index = listeners.indexOf(listener);
            if (index !== -1) {
                listeners.splice(index, 1);
            }
            return manager;
        }
    };

    var apiProp = {
        writable: false,
        configurable: false
    };
    Object.defineProperties(manager, {
        current: apiProp,
        apply: apiProp,
        register: apiProp
    });

    manager.register(defaultTemplate);
    currentTemplate = templateCategory.get(defaultTemplateId);
    return manager;
});

define('sap/viz/framework/common/util/oo',[], function() {
    var oo = {};

    oo.extend = function(subClz, superClz) {
        var subClzPrototype = subClz.prototype;

        // add the superclass prototype to the subclass definition
        subClz.superclass = superClz.prototype;

        // copy prototype
        var F = function() {};
        F.prototype = superClz.prototype;

        subClz.prototype = new F();
        for (var prop in subClzPrototype) {
            if (subClzPrototype.hasOwnProperty(prop)) {
                subClz.prototype[prop] = subClzPrototype[prop];
            }
        }
        subClz.prototype.constructor = subClz;
        if (superClz.prototype.constructor === Object.prototype.constructor) {
            superClz.prototype.constructor = superClz;
        }
        return subClz;
    };

    return oo;
});
define('sap/viz/framework/scale/BaseScale',[],
    function() {

        var BaseScale = function(domain, range) {
            this.__className = "sap.viz.scale.BaseScale";
            this._scale = undefined;
            this._type = null;
            this._domain = domain;
            this._range = range;
            this._metaData = null;
            this._isReset = false;
        };

        BaseScale.prototype.scale = function(value) {

        };

        BaseScale.prototype.getDomain = function() {
            return this._domain;
        };

        BaseScale.prototype.setDomain = function(domain) {
            this._domain = domain;
            this._isReset = true;
            return this;
        };

        BaseScale.prototype.getRange = function() {
            return this._range;
        };

        BaseScale.prototype.setRange = function(range) {
            this._range = range;
            this._isReset = true;
            return this;
        };

        BaseScale.prototype.getMetaData = function() {
            return this._metaData;
        };

        BaseScale.prototype.destroy = function() {
            this._domain = null;
            this._range = null;
            var scale = this._scale;
            if (scale) {
                if (scale.domain) {
                    scale.domain([]);
                }
                if (scale.range) {
                    scale.range([]);
                }
            }
            this._scale = null;
            this._type = null;
            this._metaData = null;
            this.__className = null;
        };

        return BaseScale;
    });
define('sap/viz/framework/scale/ValueScale',['sap/viz/framework/common/util/oo', 'sap/viz/framework/scale/BaseScale'],
    function(oo, BaseScale) {

        var ValueScale = function(domain, range, domainFixed) {
            ValueScale.superclass.constructor.apply(this, arguments);
            this.__className = "sap.viz.scale.ValueScale";
            this._tickHint = undefined;
            this._domainFixed = domainFixed ? domainFixed : [false, false];
            this._type = "linear";
            this._min = "auto";
            this._max = "auto";
            this._autoDomain = [];
            this._initScale();
        };

        oo.extend(ValueScale, BaseScale);

        ValueScale.prototype.scale = function(value) {
            if (this._scale === undefined || this._isReset === true) {
                this._initScale();
            }
            return this._scale(value);
        };

        ValueScale.prototype.nice = function() {
            if (this._scale === undefined || this._isReset === true) {
                this._initScale();
            }
            this._scale = this._scale.nice();
            this._domain = this._scale.domain();
            this._range = this._scale.range();
            return this;
        };

        ValueScale.prototype.ticks = function(number) {
            if (this._scale === undefined) {
                this._initScale();
            }
            return this._scale.ticks(number);
        };

        ValueScale.prototype.getTickHint = function() {
            return this._tickHint;
        };

        ValueScale.prototype.setTickHint = function(number) {
            this._tickHint = number;
        };

        ValueScale.prototype.isFixed = function() {
            return this._domainFixed && (this._domainFixed[0] || this._domainFixed[1]);
        };

        ValueScale.prototype.getDomainFixed = function() {
            return this._domainFixed;
        };

        ValueScale.prototype.setDomainFixed = function(domainFixed) {
            this._domainFixed = domainFixed;
        };

        ValueScale.prototype.total = function(value) {
            if (this._domain) {
                this._scale.domain([0, value]);
            }
        };

        ValueScale.prototype._initScale = function() {
            this._scale = d3.scale.linear();
            if (this._domain) {
                this._scale.domain(this._domain);
            }
            if (this._range) {
                this._scale.range(this._range);
            }
            this._isReset = false;
        };

        ValueScale.prototype.getAutoDomain = function() {
            return this._autoDomain;
        };

        ValueScale.prototype.setAutoDomain = function(domain) {
            this._autoDomain = domain;
            return this;
        };
        
        ValueScale.prototype.destroy = function() {
            // release all properties which hold dom instances
            ValueScale.superclass.destroy.call(this);
            
            this._domainFixed = null;
            this._autoDomain = null;
            
            this._min = null;
            this._max = null;
            this._isReset = null;
            this._tickHint = null;
        }; 
        return ValueScale;
    });
define('sap/viz/framework/common/format/XCFormat',[
    'sap/viz/framework/common/util/ObjectUtils'
], function(ObjectUtils) {

    var locale = 'en';
    var isUseDefaultFormatter = false;
    var snf = ObjectUtils.getObject('sap.common.globalization.NumericFormatManager');

    var NF = snf ? {
        format: function(value, pattern) {
            if (isUseDefaultFormatter === true  && (pattern === null || pattern === undefined)) {
                return snf.formatToText(value, this.DEFAULT_FORMAT_NUMBER, true);
            }
            return snf.formatToText(value, pattern, true); // we always try to convert number to string
        },

        locale: function(value) {
            if (!arguments.length) {
                return locale;
            }
            locale = value;
            snf.setPVL(locale);

            //reset default format string
            NF.DEFAULT_FORMAT_DATE_TIME = snf.DEFAULT_FORMAT_DATE_TIME;
            NF.DEFAULT_FORMAT_TIME = snf.DEFAULT_FORMAT_TIME;
            NF.DEFAULT_FORMAT_SHORT_DATE = snf.DEFAULT_FORMAT_SHORT_DATE;
            NF.DEFAULT_FORMAT_LONG_DATE = snf.DEFAULT_FORMAT_LONG_DATE;
            NF.DEFAULT_FORMAT_NUMBER = snf.DEFAULT_FORMAT_NUMBER;
            NF.DEFAULT_FORMAT_BOOLEAN = snf.DEFAULT_FORMAT_BOOLEAN;
        },

        useDefaultFormatter: function(value) {
            if (!arguments.length) {
                return isUseDefaultFormatter;
            }
            isUseDefaultFormatter = value;
        },

        DEFAULT_FORMAT_DATE_TIME: snf.DEFAULT_FORMAT_DATE_TIME,
        DEFAULT_FORMAT_TIME: snf.DEFAULT_FORMAT_TIME,
        DEFAULT_FORMAT_SHORT_DATE: snf.DEFAULT_FORMAT_SHORT_DATE,
        DEFAULT_FORMAT_LONG_DATE: snf.DEFAULT_FORMAT_LONG_DATE,
        DEFAULT_FORMAT_NUMBER: snf.DEFAULT_FORMAT_NUMBER,
        DEFAULT_FORMAT_BOOLEAN: snf.DEFAULT_FORMAT_BOOLEAN
    } : {
        format: function(value) {
            return value;
        },
        locale: function() {},
        DEFAULT_FORMAT_DATE_TIME: '',
        DEFAULT_FORMAT_TIME: '',
        DEFAULT_FORMAT_SHORT_DATE: '',
        DEFAULT_FORMAT_LONG_DATE: '',
        DEFAULT_FORMAT_NUMBER: '',
        DEFAULT_FORMAT_BOOLEAN: ''
    };

    return NF;
});
define('sap/viz/framework/common/format/FormatManager',['sap/viz/framework/common/util/TypeUtils', 'sap/viz/framework/common/format/XCFormat'],
    function Setup(TypeUtils, XCFormat) {

        var locale = 'en',
            formatUtil = XCFormat,
            props = null,
            USE_DEFAULT_FORMATTER = 'use_default_formatter';
        var listeners = [];
        var useDefaultFormatter = null;
        var FM =
            /** @lends sap.viz.format.FormatManager */
            {
                /**
                 * @constructs
                 */
                constructor: function() {
                    return;
                },

                /**
                 * Apply a locale
                 *
                 * @param {String}
                 *       locale
                 *
                 * @returns {Object} {@link sap.viz.format.FormatManager}
                 * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in
                   the future, please consider to use new version of this API instead.
                 */
                apply: function(_) {
                    // formalize the locale to support both 'en_US' and 'en-US'
                    locale = _.split("-").join("_");
                    XCFormat.locale(locale);
                    if (TypeUtils.isFunction(formatUtil.locale)) {
                        formatUtil.locale(locale);
                    }
                },

                /**
                 * format a string
                 *
                 * @param {String}
                 *       value
                 *
                 * @param {String}
                 *       pattern
                 *
                 * @returns {Object} {@link sap.viz.format.FormatManager}
                 * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in
                   the future, please consider to use new version of this API instead.
                 */
                format: function(value, pattern) {
                    var result = formatUtil.format(value, pattern);
                    if (result === USE_DEFAULT_FORMATTER) {
                        return XCFormat.format(value, pattern);
                    }
                    return result;
                },

                /**
                 * set/get format function
                 *
                 * @param {Object}
                 *       func
                 *
                 * @returns {Object} {@link sap.viz.format.FormatManager}
                 * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in
                   the future, please consider to use new version of this API instead.
                 */
                formatFunc: function(_) {
                    if ( _!==undefined && _!==null && TypeUtils.isFunction(_.format)) {
                        formatUtil = _;
                    }
                    return formatUtil;
                },

                onFormatChanged: function() {
                    listeners.forEach(function(listener) {
                        listener.fn.apply(listener.scope);
                    });
                },

                addListener: function(listener) {
                    listeners.push(listener);
                },
                removeListener: function(listener) {
                    var index = listeners.indexOf(listener);
                    if (index !== -1) {
                        listeners.splice(index, 1);
                    }
                },

                useDefaultFormatter: function(_) {
                    if (!arguments.length) {
                        return XCFormat.useDefaultFormatter();
                    }
                    if (useDefaultFormatter !== _) {
                        XCFormat.useDefaultFormatter(_);
                        this.onFormatChanged();
                        useDefaultFormatter = _;
                    }

                },

                /**
                 * default data time format. It will changed by locale.
                 */
                DEFAULT_FORMAT_DATE_TIME: formatUtil.DEFAULT_FORMAT_DATE_TIME,
                /**
                 * default time format. It will changed by locale.
                 */
                DEFAULT_FORMAT_TIME: formatUtil.DEFAULT_FORMAT_TIME,
                /**
                 * default short data format. It will changed by locale.
                 */
                DEFAULT_FORMAT_SHORT_DATE: formatUtil.DEFAULT_FORMAT_SHORT_DATE,
                /**
                 * default long data format. It will changed by locale.
                 */
                DEFAULT_FORMAT_LONG_DATE: formatUtil.DEFAULT_FORMAT_LONG_DATE,
                /**
                 * default number format. It will changed by locale.
                 */
                DEFAULT_FORMAT_NUMBER: formatUtil.DEFAULT_FORMAT_NUMBER,
                /**
                 * default boolean format. It will changed by locale.
                 */
                DEFAULT_FORMAT_BOOLEAN: formatUtil.DEFAULT_FORMAT_BOOLEAN,
                /**
                 *  use default XCFormatter.
                 */
                DEFAULT_FORMATTED_VALUE: USE_DEFAULT_FORMATTER,
            };

        return FM;
    });
define('sap/viz/framework/common/util/Constants',[], function Setup() {
    var moduleConstants = {
        CSS : {
            CLASS : {
                AXIS : {
                    CONTAINER : "v-axis",
                    TITLE : "v-title",
                    SCROLLBAR : "v-scrollbar",
                    TITLE_BACKWORD : "viz-axis-title",
                    TITLE_HIDDEN : "v-hidden-title",
                    LINE_GROUP : "v-line-group",
                    TICK_GROUP : "v-tick-group",
                    LABEL_GROUP : "v-label-group",
                    LINE : "v-line",
                    TICK : "v-tick",
                    LONGTICK : "v-longtick",
                    LABEL : "v-label",
                    LABEL_SELECTION : "v-axis-item",
                    LABEL_BACKWORD : "viz-axis-label",
                    MORPHABLE_LABEL : "v-morphable-label",
                    PERIMETER : "v-valueaxisline",
                    FIXED_PERIMETER : "v-fixed-valueaxisline",
                    BACKGROUND_RECT : "viz-axis-label-rect"
                },
                MODULEPREFIX : "v-m-",
                DATAPOINT_GROUP:"v-datapoint-group",
                DATAPOINT : "v-datapoint",
                DATAPOINT_MARKER : "v-datapoint-marker",
                DATAPOINTDEFAULT : "v-datapoint-default",
                DATAPOINTHOVER : "v-datapoint-hover",
                DATAPOINTSELECTED : "v-datapoint-selected",
                STACK : "v-stack",
                MORPHABLEDATAPOINT : "v-morphable-datapoint",
                MORPHABLELABEL : "v-morphable-label",
                MORPHABLEBACKGROUND : "v-morphable-background",
                MORPHABLELINE : "v-morphable-line",
                MORPHABLEAREABG : "v-morphable-areabg",
                DATALABEL_GROUP:"v-datalabel-group",
                DATALABEL:"v-datalabel",
                GRIDLINE_GROUP : "v-gridline-group",
                GRIDLINE : "v-gridline",
                GRIDLINE_INCISED : "v-incised-gridline",
                HOVER_SHADOW : "v-hovershadow",
                FOCUS_SHADOW : "v-hovershadow-mousedown",
                CLIPPATH : 'v-clippath',
                LEGENDITEM : 'v-legend-item'
            }
        },
        LAYOUT_ADJUST_POLICY : {
            APPROXIMATE : 'APPROXIMATE',
            RELAYOUT : 'RELAYOUT'
        },
        Event : {
            SelectData : {
                name : 'selectData',
                desc : 'Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.' + '<code>{name: "selectData",' + 'data:[{\n//selected element\'s detail\n' + 'target:"Dom Element",//an object pointed to corresponding dom element\n' + 'data:[{val: "...",//value of this element\n' + 'ctx:{type:"Dimension"||"Measure"||"MND",\n' + '//for Dimension\n' + 'path:{aa:"...",di:"...",dii:"..."},\n' + '//for Measure\n' + 'path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},\n' + '//for MND\n' + 'path:{mg:"...",mi:"..."}\n' + '//path: analysis path\n' + '//aa: analysis axis index // 0 for analysis axis 1,  1 for analysis 2\n' + '//di: dimension index //zero based\n' + '//dii: dimension item index //zero based\n' + '//mg: measure group index // 0 for measure group 1,1 for measure group 2\n' + '//mi: measure index // measure index in measure group zero based\n' + '//dii_a1: each dii of di in analysis axis 1 index\n' + '//dii_a2: each dii of di in analysis axis 2 index\n' + '}},{\n//for bubble, tagcloud and scatter, there will be more than one values in one selected element.\n' + 'var:"...",ctx:"..."}]},{\n//if under multi selection, there will be more than one selected elements\n' + 'target:"...",data:["..."]}]}' //jshint ignore:line
            },
            DeSelectData : {
                name : 'deselectData',
                desc : 'Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.' + '<code>{name: "deselectData",' + 'data:["---the same as selectedData---"]}' //jshint ignore:line
            },
            TooltipShow : {
                name : 'showTooltip',
                desc : 'This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.' + '<code>{name:"showTooltip",data:{body:[{\n//All measures\n' + 'name:"...",val:[{//measure value is an array containing only one item\n' + 'value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],' + 'plotArea:{\n//this object specifies the plot area of the chart\n' + 'height:"...",width:"...",x:"...",y:"..."},point:{\n//this object specifies a point which affects the position of tooltip\n' + 'x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}'//jshint ignore:line
            },
            TooltipHide : {
                name : 'hideTooltip',
                desc : 'This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.' //jshint ignore:line
            },
            Initialized : {
                name : 'initialized',
                desc : 'Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.' //jshint ignore:line
            },
            highlightedByLegend : {
                desc : "Event fires when legend item is clicked, which contains its data context."
            },
            ContextualData : {
                name : 'contextualData',
                desc : 'Event fires when mouse right click, the event format is: <code>{name: "contextualData",\n' + 'type: "target type" //event target type,\n' + 'data:[{\n//selected element\'s detail\n' + 'target:"Dom Element",//an object pointed to corresponding dom element\n' + 'data:{key: "value",//key is usually a category name, value is the data\'s value in this category\n' + '...\n}]}' //jshint ignore:line
            }
        },

        mappings : {
            e2p : function(em) {
                return em * 12;
            }
        },
        COLOR : {
            SAPColorSingleAxis : ["#748CB2", "#9CC677", "#EACF5E", "#F9AD79", "#D16A7C", "#8873A2", "#3A95B3", 
                                  "#B6D949", "#FDD36C", "#F47958", "#A65084", "#0063B1", "#0DA841", "#FCB71D", 
                                  "#F05620", "#B22D6E", "#3C368E", "#8FB2CF", "#95D4AB", "#EAE98F", "#F9BE92", 
                                  "#EC9A99", "#BC98BD", "#1EB7B2", "#73C03C", "#F48323", "#EB271B", "#D9B5CA", 
                                  "#AED1DA", "#DFECB2", "#FCDAB0", "#F5BCB4"],
            SAPColorDualAxis1 : ["#8FBADD", "#B8D4E9", "#7AAED6", "#A3C7E3", "#3D88C4", "#66A1D0", 
                                 "#297CBE", "#5295CA", "#005BA3", "#146FB7", "#005395", "#0063B1"],
            SAPColorDualAxis2 : ["#F6A09B", "#F9C3C0", "#F58E88", "#F8B1AD", "#F05B52", "#F37D76", 
                                 "#EE4A40", "#F16C64", "#D92419", "#ED382D", "#C52117", "#EB271B"],
            SAPColorBulletReference : ["#CCCCCC", "#ACA8A8", "#838282"]
        },
        SHAPE : ['circle', 'square', 'diamond', 'triangleUp', 'triangleDown', 
                 'triangleLeft', 'triangleRight', 'cross', 'intersection'],
        DocExample : {
            SnippetUrl : '/vizdocs_snippet/#',
            TryThisValue : 'Try this.'
        },
        DIRECTION : {
            VERTICAL : "vertical",
            HORIZONTAL : "horizontal"
        },
        POSITION : {
            TOP : "top",
            BOTTOM : "bottom",
            LEFT : "left",
            RIGHT : "right"
        },
        SPACING_TYPE : {
            STEP : "step",
            RANGE : "range"
        },
        GRIDLINE_TYPE : {
            SOLID : "line",
            DASHED : "dotted",
            INCISED : "incised"
        },
        UNITFORMATTYPE : {
            METRICUNITS : 'MetricUnits',
            FINANCIALUNITS : 'FinancialUnits'
        },
        PADDING: {
            DEFAULT: 24
        },
        BUBBLE: {
            DEFAULT_WIDTH_RATIO: 1 / 8
        },
        AXIS: {
            HIDDEN_TITLE: {
                COLOR: "#a6a6a6"
            },
            SPACING_TO_ROUGH: 0.05,
            SPACING_TO_ROOT: 0.02,
            SPACING_MAX_IN_PX: 16
        },
        TITLE:{
            SPACING_WITH_MAIN_TO_ROUGH: 0.08,
            SPACING_MAX_IN_PX: 40 
        },
        LEGEND_GROUP:{
            SPACING_WITH_MAIN_TO_ROUGH: 0.04,
            SPACING_MAX_IN_PX: 40
        },
        TREE_MAP : {
            DEFAULT_TICKS : 5, 
            NULL_COLOR : "#e0e0e0", 
            START_COLOR : "#C2E3A9", 
            END_COLOR : "#73C03C",
            PALETTE : [],
            LEGEND_VALUES : []
        }
        
    };

    return moduleConstants;
}); 
define('sap/viz/framework/common/util/NumberUtils',['sap/viz/framework/common/util/TypeUtils', 'sap/viz/framework/common/format/FormatManager',
        'sap/viz/framework/common/util/Constants'
    ],
    function Setup(TypeUtils, FormatManager, Constants) {
        var NumberUtils = {
            
            getSizeValue: function(value, total, defaultValue) {
                var val;
                if (!value || !TypeUtils.isFunction(value.toString)) {
                    return 0;
                }
                
                var target = String(value);
                
                if (target.indexOf("%") != -1) {
                    val = parseFloat(value) / 100;
                    
                    if (TypeUtils.isNaN(val)) {
                        val = defaultValue || 0;
                    } else if (val > 1) {
                        val = 1;
                    }
                } else {
                    // delete px
                    val = parseFloat(value);
                    if (TypeUtils.isNaN(val)) {
                        val = defaultValue || 0;
                    } else if (val > total) {
                        val = total;
                    }
                }
                
                if (val < 0) {
                    val = 0;
                } else if (val >= 0 && val <= 1) {
                    val *= total;
                }
                
                return this.preciseSimple(val);
            },
            isNoValue: function(n) {
                return TypeUtils.isNaN(n);
            },
            precise: function(f, isNice) {
                var result, temp,
                    str = f.toString(),
                    index = str.indexOf('e');
                if (index >= 0) {
                    result = str.substring(index);
                    temp = parseFloat(str.substring(0, index)).toFixed(8);
                    result = parseFloat(temp + result);
                    if (isNice) {
                        result = index >= 8 ? 0 : result;
                    }
                } else {
                    result = parseFloat(f.toFixed(8));
                }
                return result;
            },
            preciseSimple: function(f) {
                if (!this.cache[f]) {
                    this.cache[f] = parseFloat(f.toFixed(8));
                }
                return this.cache[f];
            },
            preciseObject: function(obj) {
                if (TypeUtils.isNumeric(obj)) {
                    return NumberUtils.preciseSimple(obj);
                } else if (TypeUtils.isArray(obj)) {
                    for (var i = 0, length = obj.length; i < length; ++i) {
                        obj[i] = NumberUtils.preciseObject(obj[i]);
                    }
                } else if (obj instanceof Object) {
                    for (var key in obj) {
                        if (obj.hasOwnProperty(key)) {
                            obj[key] = NumberUtils.preciseObject(obj[key]);
                        }
                    }
                }
                return obj;
            },
            getPositiveInt: function(value, defaultValue) {
                var result = parseInt(value, 10);
                return (isNaN(result) || result < 0) ? defaultValue : result;
            }
        };
        NumberUtils.cache = {};
        return NumberUtils;
    });

define('sap/viz/framework/scale/ScaleUtil',['sap/viz/framework/common/util/NumberUtils',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/ObjectUtils',
    "sap/viz/framework/scale/ValueScale"],
    function Setup(NumberUtils, TypeUtils, ObjectUtils, ValueScale) {
        var MND_NAME = ["measureNamesDimension", "measureNames"];

        var Scaler = {

            getRoughTickNum: function(_scale) {
                var const_minTickNum = 1;
                var roughTickNum = -1;

                var rangeArray = _scale.getRange();
                var rangeLen = Math.abs(rangeArray[0] - rangeArray[rangeArray.length - 1]);
                if (rangeLen > 10) {
                    roughTickNum = const_minTickNum + Math.round(rangeLen / 100);
                } else {
                    roughTickNum = const_minTickNum;
                }

                _scale.setTickHint(roughTickNum);
                return roughTickNum;
            },

            nice: function(_scale) {
                if (!_scale.isFixed()) {
                    return this.perfect(_scale);
                } else {
                    var domainFixed = _scale.getDomainFixed();
                    if (!(domainFixed[0] && domainFixed[1])) {
                        var domain = _scale.getDomain();
                        var helpScale = new ValueScale(domain);
                        this.perfect(helpScale);
                        var refDomain = helpScale.getDomain();
                        if (domainFixed[0]) {
                            _scale.setDomain([domain[0], refDomain[1]]);
                        } else { //if(domainFixed[1])
                            _scale.setDomain([refDomain[0], domain[1]]);
                        }
                    }
                    return this.getRoughTickNum(_scale);
                }
            },

            /**
             * @param _scale
             *    d3 quantitative scale
             *
             * @param _roughTickNum
             *    rough tick number
             *
             * @param _accurateTickNum
             *    accurate tick number
             *
             * @returns d3 quantitative scale which can be divided by ticks perfectly
             */
            perfect: function(_scale) {
                var qScale = _scale.nice();

                //the function may change the domain, but never change the range.
                var const_minTickNum = 1;
                var const_extendNum = 100;

                var domainArray = _scale.getDomain(),
                    domainArrayLength = domainArray.length;
                domainArray = NumberUtils.preciseObject(domainArray);

                var originalDomainBegin = domainArray[0];
                var originalDomainEnd = domainArray[1];

                //if the domain is [0,0], we change it to [0,100]
                //if the domain is [-x,-x], we change it to [-x,0]
                //if the domain is [x,x], we change it to [0,x]
                //we do this in modules
                var roughTickNum = this.getRoughTickNum(_scale);
                var ticks = qScale.ticks(roughTickNum);
                ticks = NumberUtils.preciseObject(ticks);

                var adjustDomain = true;
                var distance;
                if (ticks.length === 0) {
                    adjustDomain = false;
                } else if (ticks.length > 1) {
                    distance = ticks[1] - ticks[0]; //>0
                } else { //ticks.length==1
                    var beginDis = Math.abs(domainArray[0] - ticks[0]); //>0
                    var endDis = Math.abs(domainArray[domainArrayLength - 1] - ticks[0]); //>0
                    if (beginDis > endDis) {
                        distance = beginDis;
                    } else {
                        distance = endDis;
                    }
                }

                var realTickNum = const_minTickNum;
                var ticksLength = ticks.length;
                if (adjustDomain) {
                    realTickNum = ticksLength;
                    var start, end;
                    if (domainArray[0] < domainArray[1]) {
                        start = 0;
                        end = domainArrayLength - 1;
                    } else {
                        start = domainArrayLength - 1;
                        end = 0;
                    }
                    if (ticks[0] !== domainArray[start]) {
                        domainArray[start] = ticks[0] - distance;
                        realTickNum++;
                    }
                    if (ticks[ticksLength - 1] !== domainArray[end]) {
                        domainArray[end] = ticks[ticksLength - 1] + distance;
                        realTickNum++;
                    }
                }

                qScale.tickNum = realTickNum;
                qScale.distance = distance;
                qScale.setTickHint(realTickNum - 1);
                qScale.setDomain(NumberUtils.preciseObject(domainArray));
                return realTickNum - 1;
            },

            /**
             * @param _scaleA
             *    d3 linear scale
             *
             * @param _scaleB
             *    d3 linear scale
             */
            sync: function(_scaleA, _scaleB) {

                var domainArrayA = _scaleA.getDomain();
                var domainArrayB = _scaleB.getDomain();

                if ((domainArrayA[0] > domainArrayA[1] && domainArrayB[0] < domainArrayB[1]) ||
                    (domainArrayA[0] < domainArrayA[1] && domainArrayB[0] > domainArrayB[1]) ||
                    (domainArrayA[0] < 0 && domainArrayA[1] < 0) ||
                    (domainArrayB[0] < 0 && domainArrayB[1] < 0) ||
                    (domainArrayA[0] > 0 && domainArrayA[1] > 0) ||
                    (domainArrayB[0] > 0 && domainArrayB[1] > 0)
                ) {
                    //we do not need to do anythings to support this "dual"
                    return;
                }

                //now make sure 
                //1. same tickNum before 0
                //2. same tickNum after 0
                var positiveTickNumA = 0;
                var negativeTickNumA = 0;

                var positiveTickNumB = 0;
                var negativeTickNumB = 0;

                var tickNumA = _scaleA.tickNum; //tickNumA >= const_minTickNum
                var tickNumB = _scaleB.tickNum; //tickNumB >= const_minTickNum

                var intervalA = (domainArrayA[1] - domainArrayA[0]) / (tickNumA - 1);
                intervalA = NumberUtils.preciseSimple(intervalA);
                var i, tickValue, moreInterNum;
                for (i = 0; i < tickNumA; i++) {
                    tickValue = NumberUtils.preciseSimple(domainArrayA[0] + i * intervalA);
                    if (tickValue > 0) {
                        positiveTickNumA++;
                    } else if (tickValue < 0) {
                        negativeTickNumA++;
                    }
                }

                var intervalB = (domainArrayB[1] - domainArrayB[0]) / (tickNumB - 1);
                intervalB = NumberUtils.preciseSimple(intervalB);

                for (i = 0; i < tickNumB; i++) {
                    tickValue = NumberUtils.preciseSimple(domainArrayB[0] + i * intervalB);
                    if (tickValue > 0) {
                        positiveTickNumB++;
                    } else if (tickValue < 0) {
                        negativeTickNumB++;
                    }
                }

                if (positiveTickNumA > positiveTickNumB) {
                    moreInterNum = positiveTickNumA - positiveTickNumB;
                    if (domainArrayB[0] < domainArrayB[1]) {
                        domainArrayB[1] += (moreInterNum * Math.abs(intervalB));
                        _scaleB.tickNum += moreInterNum;
                    } else if (domainArrayB[0] > domainArrayB[1]) {
                        domainArrayB[0] += (moreInterNum * Math.abs(intervalB));
                        _scaleB.tickNum += moreInterNum;
                    }
                } else if (positiveTickNumA < positiveTickNumB) {
                    moreInterNum = positiveTickNumB - positiveTickNumA;
                    if (domainArrayA[0] < domainArrayA[1]) {
                        domainArrayA[1] += (moreInterNum * Math.abs(intervalA));
                        _scaleA.tickNum += moreInterNum;
                    } else if (domainArrayA[0] > domainArrayA[1]) {
                        domainArrayA[0] += (moreInterNum * Math.abs(intervalA));
                        _scaleA.tickNum += moreInterNum;
                    }
                }

                //negative values
                if (negativeTickNumA > negativeTickNumB) {
                    moreInterNum = negativeTickNumA - negativeTickNumB;
                    if (domainArrayB[0] < domainArrayB[1]) {
                        domainArrayB[0] -= (moreInterNum * Math.abs(intervalB));
                        _scaleB.tickNum += moreInterNum;
                    } else if (domainArrayB[0] > domainArrayB[1]) {
                        domainArrayB[1] -= (moreInterNum * Math.abs(intervalB));
                        _scaleB.tickNum += moreInterNum;
                    }
                } else if (negativeTickNumA < negativeTickNumB) {
                    moreInterNum = negativeTickNumB - negativeTickNumA;
                    if (domainArrayA[0] < domainArrayA[1]) {
                        domainArrayA[0] -= (moreInterNum * Math.abs(intervalA));
                        _scaleA.tickNum += moreInterNum;
                    } else if (domainArrayA[0] > domainArrayA[1]) {
                        domainArrayA[1] -= (moreInterNum * Math.abs(intervalA));
                        _scaleA.tickNum += moreInterNum;
                    }
                }

                //to nice the domainArray, avoid the domain contains 0.00060000001
                domainArrayA[0] = NumberUtils.preciseSimple(domainArrayA[0]);
                domainArrayA[1] = NumberUtils.preciseSimple(domainArrayA[1]);
                domainArrayB[0] = NumberUtils.preciseSimple(domainArrayB[0]);
                domainArrayB[1] = NumberUtils.preciseSimple(domainArrayB[1]);

                _scaleA.setDomain(domainArrayA);
                _scaleB.setDomain(domainArrayB);

                _scaleA.setTickHint(_scaleA.tickNum - 1);
                _scaleB.setTickHint(_scaleB.tickNum - 1);
            },

            getScaleOfType : function(scales, typeStr){
                if (!scales){
                    return null;
                }
                for (var i = 0; i < scales.length; i++){
                    var s = scales[i];
                    if (s.feed === typeStr){
                        return s;
                    }
                }
                return null;
            },

            domainArrayCompare: function(lDomainArray, rDomainArray){
                //Handle null and undefined
                if (lDomainArray === rDomainArray){
                    return true;
                }
                if (!lDomainArray || !rDomainArray){
                    return false;
                }

                if (lDomainArray.length !== rDomainArray.length){
                    return false;
                }

                return !lDomainArray.some(function(l){
                    return !ObjectUtils.hasElement(rDomainArray, l);
                });
            },

            scaleResultToIndexArray: function(scale){
                if (!scale){
                    return [];
                }
                var results = scale.results;
                var retArray = [], i;
                for (i = 0; i < results.length; i++){
                    retArray.push(results[i].scaleResult.index);
                }
                return retArray;
            },

            findScaleResult: function(scale, targetDataContext, compareFunc){
                if (!scale){
                    return null;
                }
                compareFunc = compareFunc || Scaler.domainArrayCompare;

                var results = scale.results;
                var result, i;
                for (i = 0; i < results.length; i++){
                    result = results[i];
                    if (compareFunc(result.dataContext, targetDataContext)){
                        return result;
                    }
                }
                return null;
            },

            shrinkedDomainFromColumns: function(domain, columns){
                var retDomain = [];
                domain = domain || [];
                columns = columns || [];

                for (var iRow = 0; iRow < domain.length; iRow++){
                    var rowDomain = [];
                    for (var iColumnIndex = 0; iColumnIndex < columns.length; iColumnIndex++){
                        var iColumn = columns[iColumnIndex];
                        if (iColumn >= domain[iRow].length){
                            break;
                        }
                        rowDomain.push(domain[iRow][iColumn]);
                    }
                    if (rowDomain.length > 0){
                        retDomain.push(rowDomain);
                    }
                }
                return retDomain;
            },

            shrinkedDomain: function(domain, metaData){
                function checkSingleValues(meta){
                    var values = meta.values;
                    if (values.length > 1){
                        var firstValue = values[0];
                        for (var i = 1; i < values.length; i++){
                            if (firstValue !== values[i]){
                                return false;
                            }
                        }
                    }
                    return true;
                }

                var columns = [];
                if ( !TypeUtils.isExist(metaData) || metaData.length === 0){
                    return domain;
                }
                for (var iMetaDataIndex = 0; iMetaDataIndex < metaData.length; iMetaDataIndex++){
                    var meta = metaData[iMetaDataIndex];
                    
                    if (MND_NAME.indexOf(meta.id) === -1 || !checkSingleValues(meta)){
                        columns.push(iMetaDataIndex);
                    }
                }
                return Scaler.shrinkedDomainFromColumns(domain, columns);
            }
        };

        return Scaler;
    });
define('sap/viz/framework/scale/ValueScaleUtil',["sap/viz/framework/common/util/NumberUtils",
        "sap/viz/framework/scale/ScaleUtil",
        "sap/viz/framework/scale/ValueScale"
    ],
    function(NumberUtils, ScaleUtil, ValueScale) {

        var DEFAULT_TICK_NUM = 7;

        var ret = {};

        ret.getTicksPosition = function(ticks, scale) {
            var ticksPosition = [];
            for (var i = 0, length = ticks.length; i < length; ++i) {
                ticksPosition.push(scale.scale(ticks[i]));
            }
            return ticksPosition;
        };

        ret.getTicks = function(_scale) {

            /* Function definition start */

            function getFullTicks(domain, ticks) {
                ticks = ticks.map(function(e) {
                    return NumberUtils.precise(e);
                });
                var beginTick;
                var endTick;
                var domainLength = domain.length;
                if (domain[0] <= domain[domainLength - 1]) {
                    beginTick = domain[0];
                    endTick = domain[domainLength - 1];
                } else {
                    beginTick = domain[domainLength - 1];
                    endTick = domain[0];
                }
                if (ticks.length > 0) {
                    if (ticks[0] !== beginTick) {
                        ticks.unshift(beginTick);
                    }
                    if (ticks[ticks.length - 1] !== endTick) {
                        ticks.push(endTick);
                    }
                }
                return ticks;
            }

            /* Function definition over */

            var tickNum = _scale.getTickHint() || DEFAULT_TICK_NUM;
            var ticks = _scale.ticks(tickNum);
            var fullTicks = getFullTicks(_scale.getDomain(), ticks);
            return NumberUtils.preciseObject(fullTicks);
        };

        ret.perfectTicks = function(scale) {
            return ScaleUtil.nice(scale);
        };

        ret.perfectTimeTicks = function(scale) {
            var domain = scale.getDomain();
            var hour = 1000 * 60 * 60;
            var day = hour * 24;
            var month = day * 30;
            var year = month * 12;
            if (NumberUtils.isNoValue(domain[0])) {
                domain[0] = 0;
            }
            if (NumberUtils.isNoValue(domain[1])) {
                domain[1] = domain[0] + 1;
            }
            var gap = domain[1] - domain[0];

            var startDate = new Date(domain[0]);
            var endDate = new Date(domain[1]);

            startDate.setMinutes(0);
            startDate.setSeconds(0);
            startDate.setMilliseconds(0);

            endDate.setMinutes(0);
            endDate.setSeconds(0);
            endDate.setMilliseconds(0);

            var timeUnit;
            if (gap < 3 * day) {
                endDate.setHours(endDate.getHours() + 1);
                timeUnit = {
                    get: Date.prototype.getHours,
                    set: Date.prototype.setHours,
                    format: "dd/mm/yyyy hh:mm"
                };
                gap = (endDate.getTime() - startDate.getTime()) / hour;
            } else if (gap < 3 * month) {
                startDate.setHours(0);
                endDate.setHours(0);
                endDate.setDate(endDate.getDate() + 1);
                timeUnit = {
                    get: Date.prototype.getDate,
                    set: Date.prototype.setDate,
                    format: "dd/mm/yyyy"
                };
                gap = (endDate.getTime() - startDate.getTime()) / day;
            } else if (gap < 3 * year) {
                startDate.setHours(0);
                startDate.setDate(1);
                endDate.setHours(0);
                endDate.setDate(1);
                endDate.setMonth(endDate.getMonth() + 1);
                timeUnit = {
                    get: Date.prototype.getMonth,
                    set: Date.prototype.setMonth,
                    format: "mm/yyyy"
                };
                gap = (endDate.getFullYear() - startDate.getFullYear()) * 12 + endDate.getMonth() -
                    startDate.getMonth();
            } else { // gap > 3 * year
                startDate.setHours(0);
                startDate.setDate(1);
                startDate.setMonth(0);
                endDate.setHours(0);
                endDate.setDate(1);
                endDate.setMonth(0);
                endDate.setFullYear(endDate.getFullYear() + 1);
                timeUnit = {
                    get: Date.prototype.getFullYear,
                    set: Date.prototype.setFullYear,
                    format: "yyyy"
                };
                gap = endDate.getFullYear() - startDate.getFullYear();
            }

            var tickNum = ScaleUtil.getRoughTickNum(scale);
            var i, j;
            OUT: for (i = 0; tickNum > 2; i++) {//jshint ignore:line
                for (j = tickNum - 1; j > 1; j--) {
                    if ((gap + i) % j === 0) {
                        break OUT;
                    }
                }
            }

            scale.tickNum = tickNum > 2 ? j + 1 : tickNum;
            scale.timeUnitGap = (gap + i) / j;
            timeUnit.set.apply(endDate, [timeUnit.get.apply(endDate, []) + i]);

            var domainFixed = scale.getDomainFixed();
            if (!domainFixed[0] && !domainFixed[1]) {
                scale.setDomain([startDate.getTime(), endDate.getTime()]);
            } else if (!domainFixed[0]) {
                scale.setDomain([startDate.getTime(), domain[1]]);
            } else if (!domainFixed[1]) {
                scale.setDomain([domain[0], endDate.getTime()]);
            }

            scale.timeUnit = timeUnit;
        };

        ret.syncTicks = function(scaleA, scaleB) {
            if (!scaleA.isFixed() && !scaleB.isFixed()) {
                ScaleUtil.sync(scaleA, scaleB);
            }
        };

        ret.correctNoValueDomain = function(domain) {
            var result = domain.slice();
            result[0] = NumberUtils.isNoValue(result[0]) ? 0 : domain[0];
            result[1] = NumberUtils.isNoValue(result[1]) ? domain[0] + 1 : domain[1];
            return result;
        };

        return ret;
    });

define('sap/viz/framework/common/util/DataUtils',["sap/viz/framework/common/util/TypeUtils", "sap/viz/framework/common/lang/LangManager"], function(
    TypeUtils, langManager) {
    var MND_ID = ["MeasureNamesDimension", "measureNames"];

    var utils = {};

    utils.stringify = function(s) {
        if (s != null) {
            return "_" + s;
        } else {
            return "null";
        }
    };

    utils.getValueLength = function(data) {
        if (!data) {
            return 0;
        }
        return (data.values && data.values[0]) ? data.values[0].length : 0;
    };

    utils.getValues = function(data, index) {
        if (!data || !data.values) {
            return null;
        }
        var result = [];
        for (var i = 0; i < data.values.length; i++) {
            var value = data.values[i];
            /*if(data.metaData && data.metaData[i] && data.metaData[i].values){
              value = data.metaData[i].values;
          }*/
            result[i] = value[index];
        }
        return result;
    };

    utils.iterateValues = function(data, fn, thisArg) {
        if (!data || !data.values) {
            return;
        }

        data.values.forEach(function(d, i1) {
            if (d) {
                d.forEach(function(val, i2) {
                    if (TypeUtils.isArray(val)) {
                        val.forEach(function(v, i3) {
                            fn.call(thisArg, v, i1, i2, i3);
                        });
                    } else {
                        fn.call(thisArg, val, i1, i2);
                    }
                });
            }
        });
    };

    utils.getMetaDataIds = function(data) {
        if (!data || !data.metaData) {
            return null;
        }
        var result = [];
        for (var i = 0; i < data.metaData.length; i++) {
            result[i] = data.metaData[i].id;
        }
        return result;
    };

    utils.buildMetaDataInfo = function(data) {
        if (!data || !data.metaData) {
            return null;
        }
        var result = [];
        for (var i = 0; i < data.metaData.length; i++) {
            var metaData = data.metaData[i];
            var info = {
                name: metaData.name || metaData.id,
                id: metaData.id
            };
            if (MND_ID.indexOf(metaData.id) !== -1) {
                info.data = {};
                var values = metaData.values || data.values[i];
                for (var n = 0; n < values.length; n++) {
                    var id = values[n];
                    if (!info.data[id]) {
                        info.data[id] = {
                            id: id,
                            name: data.values[i][n]
                        };
                    }
                }
            }
            result.push(info);
        }
        return result;
    };

    utils.parse = function(s) {
        if (s.indexOf("_") === 0) {
            return s.substring(1);
        } else {
            return null;
        }
    };

    utils.valuesToString = function(values) {
        var ret = "";
        for (var i = 0; i < values.length; ++i) {
            if (i !== 0) {
                ret += "/";
            }
            ret += utils.stringify(utils.getDimensionValue(values[i]));
        }
        return ret;
    };

    utils.getMNDIndex = function(fields) {
        if (fields) {
            for (var i = 0, len = fields.length; i < len; i++) {
                if (MND_ID.indexOf(fields[i].id) !== -1) {
                    return i;
                }
            }
        }
        return -1;
    };

    utils.getDisplayTextsConverter = function(fields, mndIndex) {
        if (mndIndex === void 0) {
            mndIndex = utils.getMNDIndex(fields);
        }

        return function(source) {
            return source.map(function(str, i) {
                if (i === mndIndex) {
                    var strToShow = str;
                    if (fields[mndIndex].data && fields[mndIndex].data[source[mndIndex]]) {
                        strToShow = fields[mndIndex].data[source[mndIndex]].name;
                    } else if (fields[mndIndex].values) {
                        strToShow = fields[mndIndex].values[str] || str;
                    }
                    return strToShow;
                }
                if (str === null) {
                    return langManager.get('IDS_ISNOVALUE');
                }
                return getDisplayText(str);
            });
        };
    };

    utils.hasNegativeValue = function(data) {

        var keys = ["valueAxis", "valueAxis2"];
        var index = 0;
        for (index = 0; index < keys.length; index++) {
            for (var key in data) {
                if (data.hasOwnProperty(key)) {
                    if (key !== keys[index]) {
                        continue;
                    }

                    var valueAxis = data[key];

                    if (valueAxis == null) {
                        continue;
                    }

                    var scale = valueAxis.scale;

                    var domain = scale.getDomain();

                    var hasNegative = domain.some(function(value) {

                        // 100% stacked chart
                        if (TypeUtils.isArray(value)) {
                            return value.some(function(val) {
                                return val < 0 ? true : false;
                            });
                        } else {
                            return value < 0 ? true : false;
                        }
                    });

                    if (hasNegative === true) {
                        return true;
                    }
                }
            }
        }
        return false;
    };

    utils.getDomain = function(data) {

        function getMeasureMapping(metaData) {

            var mapping = {};

            metaData.forEach(function(meta, i) {
                if (meta.values) {
                    mapping[i] = meta.values;
                }
            });
            return mapping;
        }

        var domain = data.scale.getDomain();

        if (domain == null || domain.length === 0) {
            return [];
        }

        var metaData = data.metaData;

        if (metaData == null) {
            return domain;
        }

        var measureMapping = getMeasureMapping(metaData);

        if (Object.keys(measureMapping).length === 0) {
            return domain;
        }

        var result = [];

        for (var index = 0; index < domain.length; index++) {

            var domainItem = domain[index];

            if (!TypeUtils.isArray(domainItem)) {
                domainItem = [domainItem];
            }

            result.push(domainItem.map(function(item, index) {

                if (measureMapping[index] == null) {
                    return item;
                }

                var measureValues = measureMapping[index];

                for (var i = 0; i < measureValues.length; i++) {

                    if (measureValues[i].id === item) {
                        return measureValues[i].name || measureValues[i].id;
                    }
                }

                return item;
            }));
        }
        return result;
    };

    var DIMENSION_DISPLAYNAME = 'd',
        DIMENSION_VALUE = 'v';

    function dimensionValueAccessor(valueType) {
        return function(value) {
            return value && value.hasOwnProperty(valueType) ? value[valueType] : value;
        };
    }

    function getDisplayText(context) {
        if (utils.isPlainValue(context)) {
            return context;
        }

        if (context[DIMENSION_DISPLAYNAME] === "" || context[DIMENSION_DISPLAYNAME]) {
            return context[DIMENSION_DISPLAYNAME];
        } else if (context[DIMENSION_VALUE] === "" || context[DIMENSION_VALUE]) {
            return context[DIMENSION_VALUE];
        } else {
            return langManager.get("IDS_ISNOVALUE");
        }
    }

    utils.isPlainValue = function(context) {
        return !context || !context.hasOwnProperty(DIMENSION_VALUE);
    };

    utils.getDimensionValue = dimensionValueAccessor(DIMENSION_VALUE);

    utils.getDimensionDisplayName = dimensionValueAccessor(DIMENSION_DISPLAYNAME);

    // TODO: move it to context related utils
    utils.DIMENSION_DISPLAYNAME_SUFFIX = "." + DIMENSION_DISPLAYNAME;

    return utils;
});

define('sap/viz/framework/scale/CategoryScale',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/framework/scale/BaseScale',
    'sap/viz/framework/common/util/DataUtils'
], function(oo, BaseScale, DataUtils) {

    var CategoryScale = function(domain, range) {
        CategoryScale.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.scale.CategoryScale";
        this._type = "categorical";
        this._initScale();
    };

    oo.extend(CategoryScale, BaseScale);

    CategoryScale.prototype.getDomain = function() {
        if (this._scale === undefined || this._isReset === true) {
            this._initScale();
        }
        return this._domain;
    };

    CategoryScale.prototype.getRange = function() {
        if (this._scale === undefined || this._isReset === true) {
            this._initScale();
        }
        return this._range;
    };

    CategoryScale.prototype.scale = function(value) {
        if (this._scale === undefined || this._isReset === true) {
            this._initScale();
        }
        return this._scale(DataUtils.valuesToString(value));
    };

    CategoryScale.prototype.getRangeInterval = function() {
        if (this._scale === undefined || this._isReset === true) {
            this._initScale();
        }
        return this._scale.range();
    };

    CategoryScale.prototype.getRangeBand = function() {
        if (this._scale === undefined || this._isReset === true) {
            this._initScale();
        }
        return this._rangeBand;
    };

    CategoryScale.prototype._initScale = function() {
        var tmpScale = d3.scale.ordinal();
        var i, len, domain = [],
            range = [],
            tmpRange = [],
            offset;
        for (i = 0, len = this._domain.length; i < len; i++) {
            domain.push(DataUtils.valuesToString(this._domain[i]));
        }
        tmpScale.domain(domain).rangeBands(this._range);
        tmpRange = tmpScale.range();
        offset = tmpScale.rangeBand();
        this._rangeBand = offset;
        for (i = 0, len = tmpRange.length; i < len; i++) {
            range.push([tmpRange[i], tmpRange[i] + offset]);
        }

        this._scale = d3.scale.ordinal();
        this._scale.domain(domain).range(range);
        this._isReset = false;
    };

    CategoryScale.prototype.destroy = function() {
        CategoryScale.superclass.destroy.call(this);
        this._rangeBand = null;
        this._isReset = null;
    };
    
    return CategoryScale;
});
define('sap/viz/framework/common/util/IdProducer',[], function(){

    var baseId = 1;

    return {
        get: function(){
            return baseId++;
        }
    };
});


define('sap/viz/framework/chartmodel/DataPoint',[
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/IdProducer'
], function(TypeUtils, IdProducer){

    /**
     * Representing a data point in chart.
     * A data point is a logical concept of a bunch of dimension/measure values (called context).
     * This class is "rendering independent", so it does not contain any information of DOM.
     * @class
     */
    function DataPoint(context, address, dataModel, mode){
        this.id = IdProducer.get();
        this._data = context;
        this._addr = address;
        this._model = dataModel;
        this._mode = mode;
    }



    var prot = DataPoint.prototype;

    /**
     * Get the context of this data point
     * @return {Object}
     */
    prot.context = function(){
        return this._data;
    };

    /**
     * Get the address of this data point in data model series.
     * The address is an array of indexes for serieses, starting from the inner most to the outer most,
     * just like normal address starting from the most specific to the most general.
     * @return {Array}
     */
    prot.address = function(){
        return this._addr.slice();
    };

    /**
     * Get the series to which this data point belongs.
     * @return {Array}
     */
    prot.parentSeries = function(){
        var series = get(this._model, 'series');
        for(var i = this._addr.length - 1; i > 0; --i){
            series = series[i];
            if(this._mode === 'tree'){
                series = series.children;
            }
        }
        return series;
    };

    /**
     * Get the previous data point in the current series.
     * @return {DataPoint}
     */
    prot.prev = function(){
        return toDp(this, 0, -1);
    };

    /**
     * Get the next data point in the current series.
     * @return {DataPoint}
     */
    prot.next = function(){
        return toDp(this, 0, 1);
    };

    /**
     * Get the corresponding data point in the previous series.
     * @return {DataPoint}
     */
    prot.up = function(){
        return toDp(this, -1, 0);
    };

    /**
     * Get the corresponding data point in the next series.
     * @return {DataPoint}
     */
    prot.down = function(){
        return toDp(this, 1, 0);
    };

    // DataSelector APIs --------------------------------

    /**
     * Get the selector representation
     * @return {Object}
     */
    prot.selector = prot.context;

    /**
     * Get the data points that this selector matches.
     * @return {Array}
     */
    prot.getDataPoints = function(){
        return [this];
    };

    /**
     * Check whether a given data point matches this selector.
     * @param {DataPoint} dp
     * @return {Boolean}
     */
    prot.match = function(dp){
        for(var name in this._data){
            if(this._data[name] !== dp[name]){
                return false;
            }
        }
        return true;
    };

    /**
     * Merge with another selector
     * @param {DataSelector} ds
     * @param {String} [rel="or"]
     * @return {DataSelector}
     */
    prot.merge = function(ds, rel){
        return ds.merge({
            _selector: this._data
        }, rel);
    };

    // Utility ----------------------------

    function toDp(dp, seriesDelta, categoryDelta){
        var arr = get(dp._model, 'series');
        var addr = dp._addr;
        var seriesIndex = addr[1];
        var categoryIndex = addr[0];
        for(var i = addr.length - 1; i > 1; --i){
            arr = arr[i];
            if(dp._mode === 'tree'){
                arr = arr.children;
            }
        }
        var series = arr[seriesIndex + seriesDelta];
        if(dp._mode === 'tree'){
            series = series && series.children;
        }
        var item = series && series[categoryIndex + categoryDelta];
        return item && item.dp || null;
    }

    function get(model, field){
        return TypeUtils.isFunction(model[field]) ? model[field]() : model[field];
    }

    return DataPoint;
});

define('sap/viz/framework/chartmodel/DataSelector',[
    'sap/viz/framework/chartmodel/DataPoint',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/IdProducer'
], function(DataPoint, TypeUtils, IdProducer){

    var ALL_SELECTOR = '*';

    /**
     * Representing an expression to select a bunch of data points in chart.
     * An instance of this class translates a human-readable condition or rule
     * (usu. JSON) into a predicate function, and filter the data points using
     * this function.
     * @class
     * @param {Object} [selector] - If omitted, this selector selects nothing.
     * @param {DataModel} [dataModel]
     */
    function DataSelector(selector, dataModel){
        this.id = IdProducer.get();
        this._selector = selector;
        this._expr = null;
        this._dataPoints = null;
        this._model = dataModel;
    }

    /**
     * Check whether a data point matches a selector.
     * This is shortcut method for creating a temparory DataSelector and then call its
     * match function.
     * @param {Object} selector
     * @param {DataPoint|DataContext} dataPoint
     */
    DataSelector.match = function(selector, dataPoint){
        return (new DataSelector(selector)).match(dataPoint);
    };

    var prot = DataSelector.prototype;

    /**
     * Get the selector representation.
     * @return {Object}
     */
    prot.selector = function(){
        return this._selector;
    };

    /**
     * Get all the data points that this selector matches
     * @param {DataModel} [dataModel]
     * @return {Array}
     */
    prot.getDataPoints = function(dataModel){
        var dps = this._dataPoints;
        if (!dps) {
            var model = this._model = dataModel || this._model;
            var allDps = model._dataPoints;
            if (allDps) {
                dps = this._dataPoints = [];
                if (this._selector) {
                    var expr = this._expr = this._expr || createExpr(this._selector);
                    for (var dpId in allDps) {
                        if (allDps.hasOwnProperty(dpId)) {
                            var dp = allDps[dpId];
                            if (expr(dp.context(), dp)) {
                                dps.push(dp);
                            }
                        }
                    }
                }
            }
        }
        return dps;
    };

    /**
     * Check whether a given data point matches this selector.
     * @param {DataPoint|DataContext} dp
     * @return {Boolean}
     */
    prot.match = function(dataPoint){
        if (dataPoint) {
            this._expr = this._expr || createExpr(this._selector);
            var context = dataPoint instanceof DataPoint ? dataPoint.context() : dataPoint;
            return this._expr(context);
        }
        return false;
    };

    /**
     * Merge with another selector
     * @param {DataSelector} ds
     * @param {String} [rel="or"]
     * @return {DataSelector}
     */
    prot.merge = function(dataSelector, relation){
        relation = (relation || 'or').toLowerCase();
        var mergedSelector = {};
        if (relation === 'or' || relation === 'and') {
            if (this._selector && dataSelector._selector) {
                mergedSelector[relation] = [this._selector, dataSelector._selector];
                return new DataSelector(mergedSelector);
            } else if(this._selector) {
                return this;
            }
            return dataSelector;
        }
        return null;
    };

    // Expressions ------------------------------------------------------

    function createExpr(selector){
        if ((isObject(selector) && !selector.or && !selector.and && !selector.not) ||
                selector === ALL_SELECTOR || TypeUtils.isFunction(selector)) {
            return createSingleExpr(selector);
        }
        if (TypeUtils.isArray(selector)) {
            selector = {
                'or': selector
            };
        }
        var op = selector && (selector.or ? 'or' :
                selector.and ? 'and' :
                selector.not ? 'not' : null);
        if (op) {
            var operands = selector[op];
            if (!TypeUtils.isArray(operands)) {
                operands = [operands];
            }
            if (operands.length > 0) {
                if (op === 'not') {
                    return not(createExpr(operands));
                } else if (operands.length > 1) {
                    var opFunc = logicOperators[op];
                    return opFunc(operands.map(createExpr));
                }
                return createExpr(operands[0]);
            }
        }
        return alwaysFalse;
    }

    function createSingleExpr(selector){
        if (selector === ALL_SELECTOR) {
            return alwaysTrue;
        } else if(TypeUtils.isFunction(selector)) {
            return function(context, dp){
                var result = selector(context, dp);
                return String(result).toLowerCase() === 'false' ? false : !!result;
            };
        } else if(selector) {
            return createContextExpr(selector);
        }
        return alwaysFalse;
    }

    function handleMeasureNames(config){
        /*
         * If you want to match the data that its measure is revenue, you can config it as following: 
         * 1) Use "measureNames" or "MeasureNamesDimension" keyword: 
         * We support both keywords and "measureNames" takes higher priority if both are set. 
         * (*)This approach is not recommended. 
         * example: {dataContext: {MeasureNamesDimension: "Revenue"}} 
         * 2) Use *: 
         * example: {dataContext: {Revenue: "*"}}
         */
        if (config.MeasureNamesDimension && !config.measureNames) {
            config.measureNames = config.MeasureNamesDimension;
        }
        if (config.measureNames &&
                TypeUtils.isString(config.measureNames) &&
                !config.hasOwnProperty(config.measureNames)) {
            config[config.measureNames] = '*';
            delete config.measureNames;
        }
        delete config.MeasureNamesDimension;
    }

    function createContextExpr(selector){
        var exprs = [];
        handleMeasureNames(selector);
        for (var field in selector) {
            if (selector.hasOwnProperty(field)) {
                var config = selector[field];
                if (!isObject(config)) {
                    config = {
                        equal: config
                    };
                }
                var ops = [];
                var op;
                for (op in config) {
                    if (config.hasOwnProperty(op) && valueOperators[op.toLowerCase()]) {
                        ops.push(op);
                    }
                }
                if (ops.length > 1) {
                    ops.sort(opComparator);
                }
                while (ops.length) {
                    op = ops.shift();
                    var opFunc = valueOperators[op.toLowerCase()].func;
                    if (opFunc) {
                        exprs.push(opFunc(field, config[op]));
                        ops = getCompatibleOps(ops, op);
                    }
                }
            }
        }
        if (exprs.length > 1) {
            return and(exprs);
        } else if (exprs.length === 1) {
            return exprs[0];
        }
        return alwaysFalse;
    }

    // Logic Operators ---------------------------------------------

    function or(exprs){
        return function(context){
            for (var i = 0; i < exprs.length; ++i){
                if (exprs[i](context)) {
                    return true;
                }
            }
            return false;
        };
    }

    function and(exprs){
        return function(context){
            for (var i = 0; i < exprs.length; ++i) {
                if (!exprs[i](context)) {
                    return false;
                }
            }
            return true;
        };
    }

    function not(expr){
        return function(context){
            return !expr(context);
        };
    }

    // Data Operators ------------------------------------------------

    function equal(field, value){
        return function(context){
            if (value === ALL_SELECTOR) {
                return context.measureNames === field ||
                    context.MeasureNamesDimension === field ||
                    context.hasOwnProperty(field);
            }
            return context[field] === value;
        };
    }

    function notEqual(field, value){
        return function(context){
            return context[field] !== value;
        };
    }

    function oneOf(field, values){
        return function(context){
            return values.some(function(value){
                return value === context[field];
            });
        };
    }

    function max(field, value){
        return function(context){
            return context[field] <= value;
        };
    }

    function min(field, value){
        return function(context){
            return context[field] >= value;
        };
    }

    function openMax(field, value){
        return function(context){
            return context[field] < value;
        };
    }

    function openMin(field, value){
        return function(context){
            return context[field] > value;
        };
    }

    function alwaysTrue(){
        return true;
    }

    function alwaysFalse(){
        return false;
    }

    function opComparator(op1, op2){
        return (valueOperators[op1.toLowerCase()].priority || 0) -
            (valueOperators[op2.toLowerCase()].priority || 0);
    }

    function getCompatibleOps(operators, op){
        op = op.toLowerCase();
        var dict = valueOperators[op].compatible;
        if (dict) {
            var result = [];
            for (var i = 0; i < operators.length; ++i) {
                var targetOp = operators[i];
                if (dict[targetOp.toLowerCase()]) {
                    result.push(targetOp);
                }
            }
            return result;
        }
        return [];
    }

    var logicOperators = {
        'and': and,
        'or': or,
        'not': not
    };

    var valueOperators = {
        'equal': {
            func: equal,
            priority: 0
        },
        'notequal': {
            func: notEqual,
            priority: 1
        },
        'in': {
            func: oneOf,
            priority: 2
        },
        'max': {
            func: max,
            priority: 3,
            compatible: {
                'min': 1,
                'openmin': 1
            }
        },
        'openmax': {
            func: openMax,
            priority: 4,
            compatible: {
                'min': 1,
                'openmin': 1
            }
        },
        'min': {
            func: min,
            priority: 5,
            compatible: {
                'max': 1,
                'openmax': 1
            }
        },
        'openmin': {
            func: openMin,
            priority: 6,
            compatible: {
                'max': 1,
                'openmax': 1
            }
        }
    };

    // Utilities --------------------------------------------------------

    function isObject(it){
        return it && Object.prototype.toString.call(it) === '[object Object]';
    }

    return DataSelector;
});

define('sap/viz/framework/common/util/RuleUtil',['sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/lang/LangManager',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/chartmodel/DataSelector'
], function(TypeUtils, langManager, ObjectUtils, DataSelector) {

    /**
     *
     *
     * //This is a sample object which is passed in by users
     * refer to /wiki/display/BISHGVisualization/The+interface+of+semantic+color
     * 1.  "others" is optional. We will have our default property for users' "default".
     * 2.  "rules" may have one or more rule objects. If one data point matches many rules, the last rule will win.
     * 3.  The value of string property may be
     *     1, Single value, like "China" .
     *     2. A json object, it can support semantic definition such as contains,equal,notEqual,min,max.
     *
     *  If users want to include 200, but not 100 in the range, they may use {min:100.00001, max 200}.
     *  If users want values larger than 100, they may write {min:100}.
     *
     * 4. Wildcard characters (like "*", "?") are nice to have.
     *
     * @param context Data context
     * @param rulesSetting
     * eg.
     *{
     *    others: {
     *            properties: {
     *                  color: "#EB271B"
     *            }
     *            displayName: "others"
     *    }
     *    rules:
     *    [
     *        {
     *            dataContext:
     *                {"Type":"A","Product":"Car","Country":{
     *                  contains: [], equal: "", notEqual: "", min: "", max: ""}
     *                },
     *            properties : {
     *              color: "#000000"
     *            }
     *        },
     *        {
     *            dataContext:
     *                {"Type":"A","Product":"Truck","Country":"USA","Year":"2002",
     *                    "Revenue":{
     *                        min:100.000001,
     *                        max:200,
     *                    }
     *                },
     *            properties : {
     *              color: "#000000"
     *            }
     *        }
     *    ]
     *}
     */
    function verifyRule(ruleObj, uncheck) {

        if (ruleObj == null ||
            ruleObj.rules == null || ruleObj.rules.length === 0) {
            return false;
        }

        if (uncheck) {
            return true;
        }


        return true;
    }

    function analyzeRule(context, rulesSetting, uncheck) {

        var reRuleObj = null;

        if (verifyRule(rulesSetting, uncheck)) {
            // get setting matching rules
            var setting = matchRule(context, rulesSetting.rules);

            if (!setting) {
                reRuleObj = rulesSetting.others.properties;
            } else {
                if (rulesSetting.others) {
                    reRuleObj = parseValue(setting.properties, rulesSetting.others.properties);
                } else {
                    reRuleObj = setting.properties;
                }

            }
        }

        return reRuleObj;
    }

    function parseValue(properties, defaultProperties) {
        var result = ObjectUtils.extend(true, {}, properties);
        for (var prop in defaultProperties) {

            if (defaultProperties.hasOwnProperty(prop)) {

                if (result[prop] != null) {
                    continue;
                }

                result[prop] = defaultProperties[prop];
            }

        }
        return result;
    }


    function matchRule(context, rules) {

        var lastMatch = null;

        if (rules == null) {
            return null;
        }

        for (var index = 0, len = rules.length; index < len; index++) {
            var rule = rules[index];

            if (matchCondition(context, rule.callback || rule.dataContext)) {
                lastMatch = rule;
            }

        }

        return lastMatch;
    }

    function matchCondition(context, conditions) {

        if (conditions == null) {
            return false;
        }

        return DataSelector.match(conditions, context);

    }

    function withProperty(semantic, propertyName, defaultOthers) {
        if (!verifyRule(semantic)) {
            return semantic;
        }
        var result = {
            rules: null,
            others: semantic.others
        };
        var others = defaultOthers || {};

        result.rules = semantic.rules.filter(function(r) {
            return r.properties && r.properties.hasOwnProperty(propertyName);
        });

        if (result.rules.length > 0) {
            result.others = ObjectUtils.extend(true, {}, others, semantic.others);
            if (!(semantic.others && semantic.others.properties && semantic.others.properties.color)) {
                result.others.hideInLegend = true;
            }
        }

        return result;
    }

    return {
        verify: verifyRule,
        analyze: analyzeRule,
        matchRule: matchRule,
        matchCondition: matchCondition,
        withProperty: withProperty
    };
});

define('sap/viz/framework/scale/ColorScale',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/framework/scale/BaseScale',
    'sap/viz/framework/scale/ScaleUtil',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/util/DataUtils'
], function (oo, BaseScale, ScaleUtil, ObjectUtils, DataUtils) {

    /*
     * Used for color scale
     */
    var ColorScale = function (domain, range, opt) {
        ColorScale.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.scale.ColorScale";
        this._name = null;
        this._type = "color";
        opt = opt || {};
        this._needRuntimeColorScales = opt.needRuntimeColorScales !== false;
        this._sharedRuntimeColorScale = opt.sharedRuntimeColorScale;
        this._metaData = opt.metaData;
        this._runtimeColorScale = null;
        this._mergedRuntimeColorScale = null;
        this._initScale();
    };

    oo.extend(ColorScale, BaseScale);

    ColorScale.prototype._initScale = function () {
        if (this._scale === undefined) {
            this._scale = d3.scale.ordinal();

            var domain = [];
            for (var i = 0, len = this._domain.length; i < len; i++) {
                domain.push(DataUtils.valuesToString(this._domain[i]));
            }

            var shrinkedDomainArray = ScaleUtil.shrinkedDomain(this._domain, this.getMetaData());
            if (this._needRuntimeColorScales && this._sharedRuntimeColorScale && shrinkedDomainArray.length !== 0){
                this._handleRuntimeScale(domain, shrinkedDomainArray);
            } else {
                var range = [].concat(this._range);
                this._range = range.splice(0, domain.length > 0 ? domain.length : 1);
                this._scale.domain(domain).range(this._range);
                if (this._needRuntimeColorScales){
                    this._constructRuntimeColorScale();
                }
            }
        }
    };
    function findNextScaleIndex(currentIndex, currentResultIndexs){
        var i = currentIndex;
        while (true){
            if (currentResultIndexs.indexOf(i) === -1){
                currentResultIndexs.push(i);
                return i;
            }
            i++;
        }
    }

    ColorScale.prototype._constructRuntimeColorScale = function(){
        var runtimeScaleResults = [];
        var shrinkedDomainArray = ScaleUtil.shrinkedDomain(this._domain, this.getMetaData());
        for (var i = 0; i < shrinkedDomainArray.length; i++){
            runtimeScaleResults.push({
                dataContext: shrinkedDomainArray[i],
                scaleResult: {
                    index: i,
                    value: this._range[i % this._range.length]
                }
            });
        }
        this._runtimeColorScale = {
            feed : 'color',
            results : runtimeScaleResults
        };
        this._mergedRuntimeColorScale = ObjectUtils.clone(this._runtimeColorScale);
    };

    ColorScale.prototype._handleRuntimeScale = function(domain, shrinkedDomainArray){
        var range = [], i;
        var runtimeScaleResults = [];
        var mergedRuntimeScaleResults = [];
        var sharedRuntimeScale = this._sharedRuntimeColorScale;
        var currentResultIndexes = ScaleUtil.scaleResultToIndexArray(sharedRuntimeScale);
        var currentIndex = 0;

        for (i = 0; i < shrinkedDomainArray.length; i++){
            var domainArray = shrinkedDomainArray[i];
            var result = ScaleUtil.findScaleResult(sharedRuntimeScale, domainArray, ScaleUtil.domainArrayCompare);
            if (result){
                //Use share runtime scale result
                result = ObjectUtils.clone(result);
                result.scaleResult.value = this._range[result.scaleResult.index % this._range.length];
                range.push(result.scaleResult.value);
                mergedRuntimeScaleResults.push(result);
            } else {
                //Use own runtime scale result
                currentIndex = findNextScaleIndex(currentIndex, currentResultIndexes);
                //Handle overflow
                var colorIndex = currentIndex % this._range.length;
                var colorValue = this._range[colorIndex];
                range.push(colorValue);

                var newResult = {
                    dataContext: domainArray,
                    scaleResult: {
                        index: currentIndex,
                        value: colorValue
                    }
                };
                //Record runtime scale result
                runtimeScaleResults.push(newResult);
                mergedRuntimeScaleResults.push(newResult);
            }
        }

        this._range = range;
        this._scale.domain(domain).range(this._range);

        this._runtimeColorScale = {
            feed : 'color',
            results : runtimeScaleResults
        };
        this._mergedRuntimeColorScale = {
            feed : 'color',
            results : mergedRuntimeScaleResults
        };
    };

    ColorScale.prototype.runtimeColorScale = function(){
        return this._runtimeColorScale;
    };
    ColorScale.prototype.mergedRuntimeColorScale = function(){
        return this._mergedRuntimeColorScale;
    };
    ColorScale.prototype.scale = function (value) {
        if (value) {
            return this._scale(DataUtils.valuesToString(value));
        } else {
            return this._scale(value);
        }
    };
    ColorScale.prototype.destroy = function(){
        ColorScale.superclass.destroy.apply(this, arguments);
        this._sharedRuntimeColorScale = null;
        this._runtimeColorScale = null;
        this._mergedRuntimeColorScale = null;
    };

    return ColorScale;
});
define('sap/viz/framework/scale/ShapeScale',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/framework/scale/BaseScale',
    'sap/viz/framework/common/util/DataUtils'
], function(oo, BaseScale, DataUtils) {

    /*
     * Used for shape scale
     */
    var ShapeScale = function(domain, range) {
        ShapeScale.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.scale.ShapeScale";
        this._name = null;
        this._type = "shape";
        this._initScale();
    };

    oo.extend(ShapeScale, BaseScale);

    ShapeScale.prototype._initScale = function() {
        if (this._scale === undefined) {
            this._scale = d3.scale.ordinal();
            var domain = [];
            for (var i = 0, len = this._domain.length; i < len; i++) {
                domain.push(DataUtils.valuesToString(this._domain[i]));
            }
            var range = [].concat(this._range);
            this._range = range.splice(0, domain.length > 0 ? domain.length : 1);
            this._scale.domain(domain).range(this._range);
        }
    };

    ShapeScale.prototype.scale = function(value) {
        if (value) {
            return this._scale(DataUtils.valuesToString(value));
        } else {
            return this._scale(value);
        }
    };

    return ShapeScale;
});
define('sap/viz/framework/scale/QuantizeScale',['sap/viz/framework/common/util/oo', 'sap/viz/framework/scale/BaseScale',
    'sap/viz/framework/common/util/NumberUtils',
    'sap/viz/framework/common/util/Constants',
], function (oo, BaseScale, NumberUtils, Constants) {

    /*
     * Used for quantize scale
     */
    var QuantizeScale = function (config) {
        this.__className = "sap.viz.scale.QuantizeScale";
        this._name = null;
        this._type = "quantize";
        this._domain = config.domain;
        this._range = config.range;
        this._nullColor = config.nullColor;
        this._legendValues = config.legendValues;
        this._domainInfo = config.domainInfo;
        this._defaultColors = Constants.COLOR.SAPColorSingleAxis;
        this._initScale();
    };

    oo.extend(QuantizeScale, BaseScale);



    QuantizeScale.prototype._initScale = function () {
        if (this._scale === undefined) {
            this._scale = d3.scale.ordinal();
            if (this._domain) {
                this._scale.domain(this._domain);
            }
            if (this._range) {
                this._scale.range(this._range);
            } else {
                this._scale.range(this._defaultColors);
            }
        }
    };

    QuantizeScale.prototype.scale = function (value) {
        if (NumberUtils.isNoValue(value)) {
            if (this._nullColor) {
                return this._nullColor;
            }
        }
        var domainValue, j, tdv, info, flag;
        if (this._domain) {
            for (j = 0; j < this._domain.length; j++) {
                tdv = this._domain[j];
                info = this._domainInfo[j];
                flag = false;
                if ((j === this._domain.length - 1) || (this._domain[j + 1].length === 0)) {
                    domainValue = tdv;
                    break;
                }
                if ((value > tdv[0]) && (value < tdv[1])) {
                    flag = true;
                } else if (!info.isLeftOpen && (value === tdv[0])) {
                    flag = true;
                } else if (!info.isRightOpen && (value === tdv[1])) {
                    flag = true;
                }
                if (flag) {
                    domainValue = tdv;
                    break;
                }
                if ((value >= tdv[0]) && (value < tdv[1])) {
                    domainValue = tdv;
                    break;
                }
            }
            return this._scale(domainValue);
        } else {
            return this._scale.range()[0];
        }       
    };
    
    QuantizeScale.prototype.destroy = function() {
        // release all properties which hold dom instances
        QuantizeScale.superclass.destroy.call(this);
        
        this._nullColor = null;
        this._legendValues = null;
        this._domainInfo = null;
        this._defaultColors = null;
    }; 
    return QuantizeScale;
});
define('sap/viz/framework/scale/RGBA',[],
    function Setup() {
        function rgba(r_, g_, b_, a_, signForOpacity_) {
            this.r = r_;
            this.g = g_;
            this.b = b_;
            this.a = a_;
            this.signForOpacity = signForOpacity_;
        }

        rgba.prototype.clone = function() {
            return new rgba(this.r, this.g, this.b, this.a, this.signForOpacity);
        };

        rgba.prototype.toHex = function() {
            return d3.rgb(this.r, this.g, this.b).toString();
        };

        rgba.prototype.toString = function() {
            if (this.a <= 1 && this.signForOpacity === true) {
                return "rgba(" + this.r + "," + this.g + "," + this.b + "," + this.a + ")";
            } else if (this.a < 1) {
                return "rgba(" + this.r + "," + this.g + "," + this.b + "," + this.a + ")";
            } else {
                return this.toHex();
            }
        };

        rgba.prototype.from = function(color, a) {
            var nc = d3.rgb(0, 0, 0),
                na = 1,
                signForOpacity;
            if (a) {
                na = a;
                signForOpacity = true;
            }
            if (color !== undefined && typeof(color) === 'object') {
                if (color.rgb) {
                    nc = color.rgb();
                } else {
                    nc = color;
                }
            } else if (typeof(color) === 'string') {
                color = color.toLowerCase();
                var temp, i, j;
                if (color.indexOf('rgba') >= 0) {
                    temp = color.substring(color.indexOf('(') + 1);

                    i = temp.lastIndexOf(',');
                    j = temp.indexOf(')');
                    if (i >= 0 && j >= 0) {
                        var rgbStr = 'rgb(' + temp.substring(0, i) + ')';
                        na = parseFloat(temp.substring(i + 1, j));
                        nc = d3.rgb(rgbStr);
                    }
                } else if (color.indexOf('hsla') >= 0) {
                    temp = color.substring(color.indexOf('(') + 1);

                    i = temp.lastIndexOf(',');
                    j = temp.indexOf(')');
                    if (i >= 0 && j >= 0) {
                        var hslStr = 'hsl(' + temp.substring(0, i) + ')';
                        na = parseFloat(temp.substring(i + 1, j));
                        nc = d3.hsl(hslStr).rgb();
                    }
                } else if (color.indexOf('hsl') >= 0) {
                    nc = d3.hsl(color).rgb();
                } else if (color.indexOf('#') >= 0) {
                    var r, g, b;
                    if (color.length === 4) {
                        r = color.charAt(1);
                        r += r;
                        g = color.charAt(2);
                        g += g;
                        b = color.charAt(3);
                        b += b;
                    } else if (color.length === 7) {
                        r = color.substring(1, 3);
                        g = color.substring(3, 5);
                        b = color.substring(5, 7);
                    }
                    r = parseInt(r, 16);
                    g = parseInt(g, 16);
                    b = parseInt(b, 16);
                    nc = d3.rgb(r, g, b);
                } else {
                    nc = d3.rgb(color);
                }
            }
            this.r = nc.r;
            this.g = nc.g;
            this.b = nc.b;
            this.a = na;
            this.signForOpacity = signForOpacity;

            return this;
        };

        rgba.prototype.toGray = function() {
            var r = this.r,
                g = this.g,
                b = this.b,
                gc, result;
            if ((r === g) && (g === b)) {
                gc = Math.round(r + (255 - r) * 0.6);
            } else {
                gc = Math.round((r * 299 + g * 587 + b * 114 + 500) / 1000);
            }
            result = this.clone();
            result.r = gc;
            result.g = gc;
            result.b = gc;

            return result;
        };

        rgba.prototype.increaseBrightness = function(percent) {
            var r = this.r,
                g = this.g,
                b = this.b,
                nr, ng, nb, result;
            if (!isNaN(percent)) {
                if (percent >= 0) {
                    nr = Math.round(r + (255 - r) * percent / 100);
                    ng = Math.round(g + (255 - g) * percent / 100);
                    nb = Math.round(b + (255 - b) * percent / 100);
                } else {
                    nr = Math.round(r * (100 + percent) / 100);
                    ng = Math.round(g * (100 + percent) / 100);
                    nb = Math.round(b * (100 + percent) / 100);
                }
                result = this.clone();
                result.r = nr;
                result.g = ng;
                result.b = nb;
            }
            return result;
        };

        return rgba;
    });
define('sap/viz/framework/scale/QuantizeScaleUtil',["sap/viz/framework/scale/RGBA", 'sap/viz/framework/common/util/NumberUtils'],
    function Setup(RGBA, NumberUtils) {        
        var MeasureBasedColoring = {
            getColorScale: function(minVal, maxVal, hasNoValue, props) {            
                var fontColorScale;
                var quantizeScaleConfig = {};
                if ((minVal === undefined && maxVal === undefined) ||
                    (minVal === Number.MAX_VALUE && maxVal === -Number.MAX_VALUE)) {
                    if (hasNoValue) {
                        fontColorScale = d3.scale.ordinal().domain([
                            []
                        ]).range([props.nullColor]);
                        fontColorScale.domainInfo = [{}];
                        quantizeScaleConfig.nullColor = props.nullColor;
                    }
                } else {
                    var colorScale = null;
                    var tickNum = props.numberOfTicks;
                    if (props.palette && props.palette.length >= tickNum) {
                        var range = props.palette.slice(0, tickNum);
                        if (tickNum === 1) {
                            range.push(props.palette[0]);
                        }
                        if (minVal !== maxVal) {
                            colorScale = d3.scale.quantize().domain([minVal, maxVal]).range(range);
                            var tempDomain = d3.scale.linear().domain([minVal, maxVal]).range(range).nice().domain();
                            colorScale.domain(tempDomain);
                        } else {
                            colorScale = d3.scale.linear().domain([minVal, maxVal]).range(range).nice();
                        }
                    } else {
                        colorScale = d3.scale.linear().domain([minVal, maxVal])
                            .range([props.startColor, props.endColor]).nice();
                    }

                    var ticks = [],
                        i, len;
                    if (isLegendValuesValid(props.legendValues, tickNum)) {
                        ticks = props.legendValues.slice(0, tickNum + 1);
                    } else {
                        var colorScaleNice = colorScale.domain();
                        var t1 = getAccFormat(colorScaleNice[0]),
                            t2 = getAccFormat(colorScaleNice[1]);
                        var totalPrecision = t1 > t2 ? t1 : t2;
                        totalPrecision++;

                        var niceDomain = colorScale.domain();
                        niceDomain = formatRange(niceDomain, totalPrecision);

                        minVal = niceDomain[0];
                        maxVal = niceDomain[1];

                        if (minVal === maxVal) {
                            // only one value in range.
                            tickNum = 1;
                        }
                        var span = maxVal - minVal,
                            step, precision = 0,
                            start;
                        if (span / tickNum > 1) {
                            if (span % tickNum === 0) {
                                // divied properly
                                step = format(span / tickNum, totalPrecision + 1);
                                precision = getAccFormat(step);

                                for (i = 0; i < tickNum + 1; i++) {
                                    ticks.push(minVal + format(i * step, precision));
                                }
                            } else {
                                step = Math.ceil(span / tickNum);
                                precision = getAccFormat(step);
                                start = Math.floor(minVal / step) * step;
                                if (start === 0 || (start + step * tickNum < maxVal)) {
                                    start = minVal;
                                }

                                for (i = 0; i < tickNum + 1; i++) {
                                    ticks.push(start + format(i * step, precision));
                                }
                            }
                        } else {
                            // Can't be divided with integrate.
                            start = minVal;
                            step = format(span / tickNum, totalPrecision + 1);
                            precision = getAccFormat(step);

                            for (i = 0; i < tickNum; i++) {
                                ticks.push(start + format(i * step, precision));
                            }
                            ticks.push(format(maxVal, precision));
                        }

                        // format all values
                        for (i = 0, len = ticks.length; i < len; i++) {
                            ticks[i] = format(ticks[i], precision);
                        }

                        while (minVal < ticks[0]) {
                            ticks[0]--;
                        }
                        while (maxVal > ticks[ticks.length - 1]) {
                            ticks[ticks.length - 1]++;
                        }
                    }

                    // reset color scale
                    colorScale.domain([0, tickNum === 1 ? 1 : tickNum - 1]);


                    var domainRg = [],
                        rangeRg = [],
                        domainInfo = [];
                    for (i = 0, len = ticks.length - 1; i < len; i++) {
                        domainRg.push([ticks[i], ticks[i + 1]]);
                        rangeRg.push(colorScale(i));
                        domainInfo.push({
                            isLeftOpen: false,
                            isRightOpen: true,
                            isAscending: true
                        });
                    }
                    domainInfo[len - 1].isRightOpen = false;

                    var color, otherMinColor, otherMaxColor;
                    if (minVal < domainRg[0][0]) {
                        domainRg.unshift([-Number.MAX_VALUE, domainRg[0][0]]);
                        color = new RGBA();
                        otherMinColor = color.from(rangeRg[0]).increaseBrightness(10).toHex();
                        rangeRg.unshift(otherMinColor);
                        domainInfo.unshift({
                            isLeftOpen: false,
                            isRightOpen: true,
                            isAscending: true
                        });
                    }
                    if (maxVal > domainRg[domainRg.length - 1][1]) {
                        domainRg.push([domainRg[domainRg.length - 1][1], Number.MAX_VALUE]);
                        color = new RGBA();
                        otherMaxColor = color.from(rangeRg[rangeRg.length - 1]).increaseBrightness(-10).toHex();
                        rangeRg.push(otherMaxColor);
                        domainInfo.push({
                            isLeftOpen: true,
                            isRightOpen: true,
                            isAscending: true
                        });
                    }

                    // fontColorScale = d3.scale.ordinal().domain(domainRg).range(rangeRg);
                    // fontColorScale.domainInfo = domainInfo;
                    quantizeScaleConfig.domain = domainRg;
                    quantizeScaleConfig.range = rangeRg;
                    quantizeScaleConfig.domainInfo = domainInfo;
                    quantizeScaleConfig.legendValues = domainRg;

                    if (hasNoValue) {
                        quantizeScaleConfig.nullColor = props.nullColor;
                        //  fontColorScale.domain().push([]);
                        // fontColorScale.range().push(props.nullColor);
                        // fontColorScale.domainInfo.push({});
                    }
                }

                return quantizeScaleConfig;

            },
            getScale: function(minVal, maxVal, ticksCount, startColor, endColor) {
                return MeasureBasedColoring.getColorScale(minVal, maxVal, false, {
                    numberOfTicks: ticksCount,
                    startColor: startColor,
                    endColor: endColor
                });
            }
        };


        /**
         * 20131128_JohnWen: attach contexts of datapoints to corresponding color
         * so that interaction can select these points directly instead of
         * asking plot module to get points when clicking on legend
         * @param {type} fontColorScale the scale generated by getColorScale method
         * @param {type} objArray all data objects used to draw data point
         * @param {type} getValCB a callback which can get value from item in objArray. if undefined,
           then get .val of data object
         * @param {type} getPathCB a callback which can get path from item in objArray. if undefined, 
           then get .ctx.path of data object
         * @returns
         */
        MeasureBasedColoring.fillContexts2DomainInfo4MBC = function(fontColorScale, objArray, getValCB, getPathCB) {
            if (fontColorScale) {
                var domains = fontColorScale.domain(),
                    domain;
                var domainInfos = fontColorScale.domainInfo,
                    domainInfo;
                var hitted, left, leftOpen, right, rightOpen, val;
                var path;
                for (var i = -1; ++i < objArray.length;) {
                    val = getValCB ? getValCB(objArray[i]) : objArray[i].val;
                    for (var j = -1; ++j < domains.length;) {
                        //if performace is not good, optimize this loop
                        domain = domains[j];
                        domainInfo = domainInfos[j];
                        if (NumberUtils.isNoValue(val)) {
                            hitted = domain.length === 0; //if domain is an empty array, then it's for "no value" points
                        } else if (domain.length > 0) {
                            left = domain[0];
                            leftOpen = domainInfo.isLeftOpen;
                            right = domain[1];
                            rightOpen = domainInfo.isRightOpen;
                            hitted = (
                                (val < left || (!leftOpen && val === left)) && (val > right || (!rightOpen && val ===
                                    right))
                            ) || (
                                (val > left || (!leftOpen && val === left)) && (val < right || (!rightOpen && val ===
                                    right))
                            );
                        }
                        if (hitted) {
                            domainInfo.dpPaths = domainInfo.dpPaths || [];
                            path = getPathCB ? getPathCB(objArray[i]) : objArray[i].ctx.path;
                            domainInfo.dpPaths.push(path);
                            break;
                        }
                    }
                }
            }
        };

        var isLegendValuesValid = function(legendValues, numberOfTicks) {
            var i;
            if (!legendValues || !numberOfTicks) {
                return false;
            }
            if (legendValues.length < numberOfTicks + 1) {
                return false;
            }
            for (i = 0; i < numberOfTicks + 1; i++) {
                if (isNaN(legendValues[i])) {
                    return false;
                }
            }
            for (i = 0; i < numberOfTicks + 1; i++) {
                if (legendValues[i] >= legendValues[i + 1]) {
                    return false;
                }
            }
            return true;
        };

        var formatRange = function(range, precision) {
            for (var i = 0, len = range.length; i < len; i++) {
                range[i] = format(range[i], precision);
            }
            return range;
        };

        var getAccFormat = function(value) {
            var t = value.toString().split(".");
            return t.length > 1 ? t[1].length : 0;
        };

        var format = function(value, precision) {
            return Math.round(Math.pow(10, precision) * value) / Math.pow(10, precision);
        };

        return MeasureBasedColoring;
    });
define('sap/viz/framework/scale/FrameScale',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/framework/scale/BaseScale',
    'sap/viz/framework/common/util/ObjectUtils'
], function(oo, BaseScale, ObjectUtils) {

    /*
     * Used for shape scale
     */
    var FrameScale = function(domain, range) {
        FrameScale.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.scale.FrameScale";
        this._name = null;
        this._type = "frame";
        this._initScale();
    };

    oo.extend(FrameScale, BaseScale);

    FrameScale.prototype._initScale = function() {
        if (this._scale === undefined) {
            this._scale = d3.scale.ordinal();
        }
        var domain = [];
        for (var i = 0, len = this._domain.length; i < len; i++) {
            domain.push(this._domain[i].v || this._domain[i]);
        }
        this._scale.domain(domain).range(this._range);
        this._isReset = false;
    };


    FrameScale.prototype.getDomain = function() {
        if (this._scale === undefined || this._isReset === true) {
            this._initScale();
        }
        return this._domain;
    };

    FrameScale.prototype.getRange = function() {
        if (this._scale === undefined || this._isReset === true) {
            this._initScale();
        }
        return this._range;
    };

    FrameScale.prototype.scale = function(value) {
        var domain = this.getDomain();
        for (var i in domain) {
            if (ObjectUtils.deepEqual(domain[i], value)) {
                return this._scale(value.v || value);
            }
        }
        //if value is not a member of scale domain, return the index of the first element
        return 0;
    };

    return FrameScale;
});
define('sap/viz/framework/scale/PercentageValueScale',['sap/viz/framework/common/util/oo', 'sap/viz/framework/scale/ValueScale',
        'sap/viz/framework/common/util/TypeUtils'
    ],
    function(oo, ValueScale, TypeUtils) {

        var PercentageValueScale = function(domain, range, domainFixed) {
            this.__className = "sap.viz.scale.PercentageValueScale";
            PercentageValueScale.superclass.constructor.apply(this, arguments);
        };

        oo.extend(PercentageValueScale, ValueScale);

        PercentageValueScale.prototype.scale = function(value) {
            if (this._scale === undefined || this._isReset === true) {
                this._initScale();
            }
            return this._scale(value) < 0 ? 0 : this._scale(value);
        };



        return PercentageValueScale;
    });
define('sap/viz/framework/common/util/ArrayUtils',["sap/viz/framework/common/util/TypeUtils"],
    function Setup(TypeUtils) {
        var ArrayUtils = {
            /**
             * Iterate the given array and calling the provided callback function
             * for each item
             *
             * @name sap.viz.base.utils.ArrayUtils#each
             * @function
             * @param {Array}
             *            array array to be iterated
             * @param {Function}
             *            callback function to be called at each iteration, this
             *            will point to array itself, the arguments will be index
             *            and the current item
             *
             */
            each: function(array, callback) {
                array = array || [];
                for (var i = 0, len = array.length; i < len; i++) {
                    if (callback.call(array, i, array[i]) === false) {
                        break;
                    }
                }
            },

            /**
             * Return an array contains distinct values in the given Array
             *
             * @name sap.viz.base.utils.ArrayUtils#unique
             * @param {Array}
             *            array array to be processed
             * @param {Function}
             *            accessor function invoked for each item to obtain the
             *            identifier, if it returns false, the item will be omitted.
             * @returns
             */
            unique: function(array, accessor) {
                var u = {},
                    a = [],
                    Accessor = accessor || function(a) {
                        return a.toString();
                    };
                for (var i = 0, t, l = array.length; i < l; ++i) {
                    if (!(t = Accessor(array[i])) || u.hasOwnProperty(t)) {
                        continue;
                    }
                    a.push(array[i]);
                    u[t] = true;
                }
                return a;
            },

            /**
             * Flat a two dimension array into one dimension Array
             *
             * @param {Array}
             *            arrayOfArray
             * @returns
             */
            flat: function(arrayOfArray) {
                return Array.prototype.concat.apply([], arrayOfArray);
            },

            /**
             * Flat a heavily nested array (n-dimentional) into a one dimensional array.
             *
             * @param {Array} arrayOfArray heavily nested array
             * @return {Array} a one dimensional array containing every scala value of
             *         the input array
             */
            deepFlat: function(arrayOfArray) {
                var stack = arrayOfArray.slice(),
                    out = [],
                    curr;
                // Depth First Traversal with a stack, to avoid recursion
                while (stack.length > 0) {
                    curr = stack.shift();
                    if (curr instanceof Array) {
                        stack.push.apply(stack, curr);
                    } else {
                        out.unshift(curr);
                    }
                }
                return out;
            },

            /**
             * Find the maximum value in the given array. Empty array will return
             * undefined, and undefined entry will be skipped. Optional accessor
             * will be used to convert the entry to comparable data type before test
             * inequality.
             *
             * @param {Array}
             * @param {Function}
             *            accessor function will be called as accessor.call(array,
             *            array[i], i).
             */
            max: function(array, accessor) {
                var i = -1,
                    n = array.length,
                    a, t;
                if (arguments.length === 1) {
                    while (++i < n && (a = array[i]) == undefined) {} // jshint ignore:line
                    while (++i < n) {
                        if ((t = array[i]) > a) {
                            a = t;
                        }
                    }
                } else if (arguments.length > 1) {
                    while (++i < n && (a = accessor.call(array, array[i], i)) == undefined) {} // jshint ignore:line
                    while (++i < n) {
                        if ((t = accessor.call(array, array[i], i)) > a) {
                            a = t;
                        }
                    }
                }
                return a;
            },

            /**
             * Find the minimum value in the given array. Empty array will return
             * undefined, and undefined entry will be skipped. Optional accessor
             * will be used to convert the entry to comparable data type before test
             * inequality.
             *
             * @param {Array}
             * @param {Function}
             *            accessor function will be called as accessor.call(array,
             *            array[i], i).
             */
            min: function(array, accessor) {
                var i = -1,
                    n = array.length,
                    a, t;
                if (arguments.length === 1) {
                    while (++i < n && (a = array[i]) == undefined) {} // jshint ignore:line
                    while (++i < n) {
                        if ((t = array[i]) < a) {
                            a = t;
                        }
                    }
                } else if (arguments.length > 1) {
                    while (++i < n && (a = accessor.call(array, array[i], i)) == undefined) {} // jshint ignore:line
                    while (++i < n) {
                        if ((t = accessor.call(array, array[i], i)) < a) {
                            a = t;
                        }
                    }
                }
                return a;
            },
            /**
             * D3 like array facility function. Compute the sum of the array, only
             * number will be considered. If array is empty, returns 0.
             *
             * @param array
             * @param accessor
             * @returns {Number}
             */
            sum: function(array, accessor) {
                // from D3
                var s = 0,
                    n = array.length,
                    a, i = -1;
                if (arguments.length === 1) {
                    while (++i < n) {
                        if (!isNaN(a = +array[i])) {
                            s += a;
                        }
                    }
                } else {
                    while (++i < n) {
                        if (!isNaN(a = +accessor.call(array, array[i], i))) {
                            s += a;
                        }
                    }
                }
                return s;
            },

            /**
             * Find the extent in the given array. The range contains minimum and
             * maximum value.Empty array will return [undefined,undefined], and
             * undefined entry will be skipped. Optional accessor will be used to
             * convert the entry to comparable data type before test inequality.
             *
             * @param {Array}
             * @param {Function}
             *            accessor function will be called as accessor.call(array,
             *            array[i], i).
             * @return {[minimum, maximum]}
             */
            extent: function(array, accessor) {
                var i = -1,
                    n = array.length,
                    a, b, t;
                if (arguments.length === 1) {
                    while (++i < n && (a = b = array[i]) == undefined) {} // jshint ignore:line
                    while (++i < n) {
                        if ((t = array[i]) < a) {
                            a = t;
                        }
                        if ((t = array[i]) > b) {
                            b = t;
                        }
                    }
                } else if (arguments.length > 1) {
                    while (++i < n && (a = b = accessor.call(array, array[i], i)) == undefined) {} // jshint ignore:line
                    while (++i < n) {
                        if ((t = accessor.call(array, array[i], i)) < a) {
                            a = t;
                        }
                        if ((t = accessor.call(array, array[i], i)) > b) {
                            b = t;
                        }
                    }
                }
                return [a, b];
            },

            /**
             * Binary search the value in the array, and returns the index which
             * could be either the index of found value or insertion position.
             *
             * @param array
             * @param value
             */
            bisearch: function(array, value) {
                var l = 0,
                    h = array.length;
                var m, cv;
                while (l < h) {
                    m = l + h >> 1;
                    if ((cv = array[m]) === value) {
                        return m;
                    }
                    if (value > cv) {
                        l = m + 1;
                    } else {
                        h = m;
                    }
                }
                return l;
            },

            /**
             * D3 like array facility function.
             *
             * @param array
             * @param indexes
             * @returns {Array}
             */
            permute: function(array, indexes) {
                // From D3
                var permutes = [],
                    i = -1,
                    n = indexes.length;
                while (++i < n) {
                    permutes[i] = array[indexes[i]];
                }
                return permutes;
            },

            /**
             * Generate an array based on the start, stop and step. The first item
             * equals to start(if specified) or 0, next one equals to start + step,
             * start + 2*step, and so on until exceeding stop.
             *
             * @param {Number}
             *            (start) the first item of the sequence, default is 0.
             * @param {Number}
             *            stop
             * @param {Number}
             *            (step) step between two near items in the sequence,
             *            default is 1.
             */
            sequence: function(start, stop, step) {
                if (arguments.length < 3) {
                    step = 1;
                }
                if (arguments.length < 2) {
                    stop = start;
                    start = 0;
                }
                start = +start;
                stop = +stop;
                step = start < stop ? Math.abs(+step) : -Math.abs(+step);
                var seq = [],
                    i = -1,
                    v;
                if ((stop - start) / step === Infinity) {
                    throw new Error('Infinite Sequence');
                }
                if (start < stop) {
                    while ((v = (start + (++i) * step)) < stop) {
                        seq.push(v);
                    }
                } else {
                    while ((v = (start + (++i) * step)) > stop) {
                        seq.push(v);
                    }
                }
                return seq;
            },

            /**
             *
             * @param array
             * @param numFunc
             */
            stepSum: function(array, numFunc) {
                var ret = [],
                    stepSum = 0,
                    i = -1,
                    len = array.length;
                numFunc = numFunc || Number;
                ret.length = len;
                while (++i < len) {
                    stepSum += numFunc(array[i]);
                    ret[i] = stepSum;
                }
                return ret;
            },

            zip: function() {
                var ret = [],
                    len = Math.min.apply(null, Array.prototype.map.call(arguments, function(d) {
                        return d.length;
                    })),
                    i = -1,
                    a, count = arguments.length,
                    j;
                while (++i < len) {
                    a = [];
                    j = -1;
                    while (++j < count) {
                        a.push(arguments[j][i]);
                    }
                    ret.push(a);
                }
                return ret;
            },

            groupBy: function(arrays, groupFunc) {
                groupFunc = groupFunc || String;
                var groups = [],
                    groupOwners = [],
                    i = -1,
                    len = arrays.length,
                    groupOwner, j;
                while (++i < len) {
                    groupOwner = groupFunc(arrays[i]);
                    if ((j = groupOwners.indexOf(groupOwner)) === -1) {
                        groupOwners.push(groupOwner);
                        groups.push([arrays[i]]);
                    } else {
                        groups[j].push(arrays[i]);
                    }
                }
                return groups;
            },

            /**
             * for fundamental type element
             */
            equal: function(array1, array2) {
                if (!array1 || !array2) {
                    return false;
                }
                if (array1.length !== array2.length) {
                    return false;
                }
                for (var i = 0; i < array1.length; i++) {
                    if (TypeUtils.isArray(array1[i]) && TypeUtils.isArray(array2[i])) {
                        if (!this.equal(array1[i], array2[i])) {
                            return false;
                        }
                    } else if (array1[i] !== array2[i]) {
                        return false;
                    }
                }
                return true;
            }
        };
        return ArrayUtils;
    });
define('sap/viz/framework/scale/ScaleRepository',['sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/scale/ValueScale',
    'sap/viz/framework/scale/ValueScaleUtil',
    'sap/viz/framework/common/util/NumberUtils',
    'sap/viz/framework/scale/CategoryScale',
    "sap/viz/framework/common/util/RuleUtil",
    'sap/viz/framework/scale/ScaleUtil',
    'sap/viz/framework/scale/ColorScale',
    'sap/viz/framework/common/util/Constants',
    'sap/viz/framework/scale/ShapeScale',
    'sap/viz/framework/scale/QuantizeScale',
    'sap/viz/framework/scale/QuantizeScaleUtil',
    'sap/viz/framework/scale/FrameScale',
    'sap/viz/framework/scale/PercentageValueScale',
    'sap/viz/framework/common/util/ArrayUtils',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/template/TemplateManager',
    'sap/viz/framework/common/util/DataUtils'
], function Setup(TypeUtils, ValueScale, ValueScaleUtil, NumberUtils, CategoryScale, RuleUtil, ScaleUtil, ColorScale,
    Constants, ShapeScale, QuantizeScale, QuantizeScaleUtil, FrameScale, PercentageValueScale, ArrayUtils,
    ObjectUtils, TemplateManager, DataUtils) {

    var scales = {},
        ROLE_LAYOUT = 'layout',
        ROLE_MARK = 'mark',
        DUAL_COLOR_PALETTE = [Constants.COLOR.SAPColorDualAxis1, Constants.COLOR.SAPColorDualAxis2];
    // var measure = {
    //     "values": [
    //         [136.1245, 128.747, 24, null, null, null, 1500.23, 58, 58, null, null, null],
    //         [147, 269, 97, null, null, null, 159.0121212, 149, 38, null, null, null],
    //         [47, 69, 47, null, null, null, 129.21, 49, 33, null, null, null]
    //     ]
    // }

    var getMinMax = function(data) {
        if (!TypeUtils.isArray(data)) {
            data = [data];
        }
        var dataMin;
        var dataMax;

        data.map(function(d) {
            var minMax = {};
            if (TypeUtils.isArray(d)) {
                minMax = getMinMax(d);
            } else {
                if (NumberUtils.isNoValue(d)) {
                    return;
                }
                minMax = {
                    min: d,
                    max: d
                };
            }
            if (dataMin === undefined) {
                dataMin = minMax.min;
            }
            dataMin = dataMin > minMax.min ? minMax.min : dataMin;
            dataMax = dataMax > minMax.max ? dataMax : minMax.max;
        });
        return {
            min: dataMin,
            max: dataMax
        };
    };

    var isBlankSetting = function(setting) {

        if (setting == null) {
            return true;
        }

        for (var prop in setting) {

            if (setting[prop] != null) {
                for (var subProp in setting[prop]) {
                    if (setting[prop][subProp] != null) {
                        return false;
                    }
                }
            } else if (TypeUtils.isArray(setting[prop])) {
                if (setting[prop].length !== 0) {
                    return false;
                }
            }

        }
        return true;
    };

    var rotateArray = function(categoryArray) {
        var returnArray = [];
        if (categoryArray.length) {
            var rowLength = categoryArray.length;
            var columnLength = categoryArray[0].length;

            for (var j = 0; j < columnLength; j++) {
                returnArray[j] = [];
            }
            for (var i = 0; i < rowLength; i++) {
                var rowValue = categoryArray[i];
                for (j = 0; j < columnLength; j++) {
                    returnArray[j].push(rowValue[j]);
                }
            }
        }
        return returnArray;
    };

    var hasValues = function(array) {
        if (TypeUtils.isArray(array)){
            for (var i in array){
                if (array.hasOwnProperty(i)){
                    if (!TypeUtils.isArray(array[i])){
                        return true;
                    } else {
                        return false;
                    }
                }
            }
        } 
        return false;
    };

    var flattenValuesArray = function(values, flattenedValues) {
        if (!hasValues(values)){
            for (var i in values){
                if (values.hasOwnProperty(i)){
                    flattenValuesArray(values[i], flattenedValues);
                }
            }
        } else {
            flattenedValues.push(values);
        }
    };

    var isValuesHierarchical = function(values){
        for (var i in values){
            if (values.hasOwnProperty(i)){
                for (var j in values[i]){
                    if (values[i].hasOwnProperty(j)){
                        if(TypeUtils.isArray(values[i][j])) {
                            return true;
                        } else {
                            return false;
                        }
                    }
                }
            }
        }
    };

    var scaleTypesHandler = {
        stacked_combination: function(data, scaleOption, role, dataShape, series) {
            var flattenedValues = [];
            var origValues = data.values;
            if (TypeUtils.isArray(data.values) && isValuesHierarchical(data.values)){
                /*if data.values is hierarchical(when playField is binded, 
                as "(country, year) * values"), we need to flatten the array
                 to "category * values"*/
                flattenValuesArray(data.values, flattenedValues);
                data.values = flattenedValues;
            }
            if (role === ROLE_LAYOUT) {
                var stackedRange = [];
                var lineRange = [];
                for (var i in data.values) {
                    if (data.values.hasOwnProperty(i)) {
                        var values = data.values[i];
                        var stackedData = [];
                        var lineData = [];
                        for (var j in values){
                            if (values[j] && values.hasOwnProperty(j) && series[j]) {
                                //color and color2's mnd info is identical
                                var k;
                                for (k in series[j]){
                                    if (series[j][k] && series[j].hasOwnProperty(k)){
                                        break;
                                    }
                                }
                                //pick up first not null item to get series's mnd index
                                if (series[j][k] && series[j][k].color && dataShape){
                                    //filter line series to get the scale of stacked bar first
                                    series[j][k].color.mndIndex = series[j][k].color.mndIndex || 0;
                                    //set mnd = 0 if mnd is not feed in color
                                    var shape = dataShape[series[j][k].color.mndIndex] || "line";
                                    if (shape == "bar"){
                                        stackedData.push(data.values[i][j]);
                                    } else if (shape == "line"){
                                        lineData.push(data.values[i][j]);
                                    }
                                }
                            }
                        }
                        //stacked range
                        if (stackedData.length)
                        {
                            stackedRange[i] = [];
                            stackedRange[i][0] = 0;
                            stackedRange[i][1] = 0;
                            getStackedArrayValues(stackedData, stackedRange[i]);
                        }

                        //line range
                        if (lineData.length){
                            lineRange[i] = [];
                            var minMax = getMinMax(lineData);
                            lineRange[i][0] = minMax.min;
                            lineRange[i][1] = minMax.max;
                        }
                    }
                }
                //mix stacked scale and line scale
                data.range = stackedRange.concat(lineRange);
            }
            //calc final scale result
            var scaleResult = generateValueScale(data, scaleOption);
            data.values = origValues;
            return scaleResult;
        },
        stacked: function(data, scaleOption, role) {
            if (role === ROLE_LAYOUT) {
                var range = [];
                for (var i in data.values) {
                    if (data.values.hasOwnProperty(i)) {
                        range[i] = [];
                        range[i][0] = 0;
                        range[i][1] = 0;
                        getStackedArrayValues(data.values[i], range[i]);
                    }
                }
                data.range = range;
            }
            return generateValueScale(data, scaleOption);
        },
        spread: function(data, scaleOption) {
            return generateValueScale(data, scaleOption);
        },
        bullet: function(data, scaleOption) {
            var range = [0, data.maxValue];
            data.range = range;
            return generateValueScale(data, scaleOption);
        },
        percentage: function(data, scaleOption, role) {
            if (role === ROLE_LAYOUT) {
                var range = [];
                for (var i in data.values) {
                    if (data.values.hasOwnProperty(i)) {
                        range[i] = [];
                        range[i][0] = 0;
                        range[i][1] = 0;
                        getPercentageArrayValues(data.values[i], range[i]);
                    }
                }
                data.range = range;
                return new PercentageValueScale(range, [0, 1]);
            } else {
                return generateValueScale(data, scaleOption);
            }
        },
        yy: function(data, scaleOption) {
            var option = scaleOption || {};
            option.allowZeroMinMax = true;
            var scale = generateValueScale(data, option);
            var withNoValue = false,
                allNoValue = true,
                withMiddleValue = false,
                withZeroValue = false;
            var max = scale._domain[0],
                min = scale._domain[1];
            for (var i in data.values) {
                if (data.values.hasOwnProperty(i)) {
                    for (var j in data.values[i]) {
                        if (data.values[i].hasOwnProperty(j)) {
                            if (TypeUtils.isArray(data.values[i][j])) {
                                for (var k in data.values[i][j]) {
                                    if (data.values[i][j].hasOwnProperty(k)) {
                                        if (!TypeUtils.isExist(data.values[i][j][k])) {
                                            withNoValue = true;
                                        } else {
                                            allNoValue = false;
                                            if (data.values[i][j][k] !== max && data.values[i][j][k] !== min) {
                                                withMiddleValue = true;
                                            }
                                            if (data.values[i][j][k] === 0) {
                                                withZeroValue = true;
                                            }
                                        }

                                        if (withNoValue && !allNoValue && withMiddleValue && withZeroValue) {
                                            break;
                                        }
                                    }
                                }
                            } else {
                                if (!TypeUtils.isExist(data.values[i][j])) {
                                    withNoValue = true;
                                } else {
                                    allNoValue = false;
                                    if (data.values[i][j] !== max && data.values[i][j] !== min) {
                                        withMiddleValue = true;
                                    }
                                    if (data.values[i][j] === 0) {
                                        withZeroValue = true;
                                    }
                                }
                            }

                            if (withNoValue && !allNoValue && withMiddleValue && withZeroValue) {
                                break;
                            }
                        }
                    }

                    if (withNoValue && !allNoValue && withMiddleValue && withZeroValue) {
                        break;
                    }
                }
            }
            if (withNoValue) {
                scale._domain.withNoValue = true;
            }
            if (allNoValue) {
                scale._domain = [];
            }
            if (withMiddleValue) {
                scale._domain.withMiddleValue = true;
            }
            if (withZeroValue) {
                scale._domain.withZeroValue = true;
            }
            return scale;
        }
    };

    var getStackedArrayValues = function(data, range) {
        if (TypeUtils.isArray(data)) {
            var tmpRange = [0, 0];
            for (var i in data) {
                if (data.hasOwnProperty(i)) {
                    getStackedArrayValues(data[i], tmpRange);
                }
            }
            if (tmpRange[0] < range[0]) {
                range[0] = tmpRange[0];
            }
            if (tmpRange[1] > range[1]) {
                range[1] = tmpRange[1];
            }
        } else {
            if (data < 0) {
                range[0] += data;
            } else {
                range[1] += data;
            }
        }
    };

    var getPercentageArrayValues = function(data, range) {
        if (TypeUtils.isArray(data)) {
            for (var i in data) {
                if (data.hasOwnProperty(i)) {
                    getPercentageArrayValues(data[i], range);
                }
            }
        } else {
            range[1] += Math.abs(data);
        }
    };

    var generateValueScale = function(data, scaleOption) {
        var minSetting = scaleOption ? (!TypeUtils.isNumber(scaleOption.min) ? null : scaleOption.min) : null;
        var maxSetting = scaleOption ? (!TypeUtils.isNumber(scaleOption.max) ? null : scaleOption.max) : null;

        var minFixed = minSetting != null;
        var maxFixed = maxSetting != null;

        var minMax = {};
        minMax = getMinMax(data.range);
        if (minMax.min === undefined) {
            minMax.min = 0;
        }
        if (minMax.max === undefined) {
            minMax.max = 0;
        }
        var minValue = minFixed ? parseFloat(minSetting) : minMax.min;
        var maxValue = maxFixed ? parseFloat(maxSetting) : minMax.max;
        if (minValue >= maxValue) {
            if (minFixed === true) {
                minFixed = false;
                maxFixed = false;
                minValue = minMax.min;
                maxValue = minMax.max;
            } else if (maxFixed === true) {
                minFixed = false;
                maxFixed = true;
                minValue = minMax.min;
            }
        }

        if (!minFixed && !maxFixed) {
            if (maxValue === 0 && minValue === 0 && !(scaleOption && scaleOption.allowZeroMinMax === true)) {
                maxValue = 1;
            }
        }
        if (TypeUtils.isExist(scaleOption) && TypeUtils.isExist(scaleOption.allowZeroMinMax)) {
            delete scaleOption.allowZeroMinMax;
        }
        if (!TypeUtils.isArray(data.values) || data.values.length === 0) { //for axis tick calc
            minFixed = true;
            maxFixed = true;
        }
        var scale = new ValueScale([minValue, maxValue], [0, 1], [minFixed, maxFixed]);
        scale.setAutoDomain([minMax.min, minMax.max]);
        return scale;
    };

    var generateFirstUniqueDomain = function(array) {
        if (array.length === 0) {
            return [];
        }
        var returnArray = [];
        var temp = {};
        var result = rotateArray([array[0]]);
        for(var i=0,t;i<result.length;i++){
            if(result[i]){
                t=result[i];
                if(TypeUtils.isArray(t)){
                    t=t.map(function(item) {
                        return DataUtils.getDimensionValue(item);
                    }).map(String).join();
                }
                if(temp.hasOwnProperty(t)){
                    continue;
                }
                returnArray.push(result[i]);
                temp[t]=true;
            }
        }
        return returnArray;
    };

    scales.valueScale = function(data, name, scaleMgr, seriesType, role, propertyMgr, series, axis) {
        var dataShape;
        if (axis == "valueAxis") {
            dataShape = propertyMgr.get("plotArea.dataShape.primaryAxis");
        } else if (axis == "valueAxis2") {
            dataShape = propertyMgr.get("plotArea.dataShape.secondaryAxis");
        }
        var scale = scaleTypesHandler[seriesType].call(this, data, scaleMgr.get(name), role, dataShape, series);
        //ValueScaleUtil.perfectTicks(scale);
        if (!TypeUtils.isExist(scaleMgr.getDefault(name)) && name.indexOf('valueAxis') > -1) {
            scaleMgr.add(name, {
                serializable: true,
                defaultValue: {
                    "feed": name,
                    "type": "linear",
                    "min": "auto",
                    "max": "auto"
                }
            });
        }
        return scale; //return row Scale without perfect.
    };

    scales.categoryScale = function(data, name, scaleMgr) {
        if (TypeUtils.isArray(data.values)) {
            var dimensions = rotateArray(data.values);
            //var dimensions = data;
            var scale = new CategoryScale(dimensions, [0, 1]);
            return scale;
        }

    };

    scales.colorScale = function(data, name, scaleMgr, seriesType, paletteNum, propMgr, customerColorPalette) {
        var props = scaleMgr.get(name);
        var dual = TypeUtils.isNumber(paletteNum);
        var sharedRuntimeScales = scaleMgr.get('sharedRuntime');
        var colorRuntimeScale = ScaleUtil.getScaleOfType(sharedRuntimeScales, 'color');
        var needRuntimeColorScales = !(TemplateManager.current().isGhost || dual);
        var colorPalette = props ? props.palette : (customerColorPalette ? customerColorPalette : null);
        if(colorPalette === Constants.COLOR.SAPColorSingleAxis && customerColorPalette){
            colorPalette = customerColorPalette;
        }
        var options = {sharedRuntimeColorScale : colorRuntimeScale,
                       needRuntimeColorScales : needRuntimeColorScales,
                       metaData : data.metaData};
        if (!TypeUtils.isExist(data)) {
            return new ColorScale([], colorPalette, options);
        }
        var domain = [];
        if (data.values) {
            if (seriesType === 'yy') { //for bubble and scatter, only set first binding to domain
                domain = generateFirstUniqueDomain(data.values);
            } else {
                domain = rotateArray(data.values);
            }
        }

        if (!dual) {
            if (!colorPalette || (TypeUtils.isArray(colorPalette) && TypeUtils.isArray(colorPalette[0]))) {
                colorPalette = Constants.COLOR.SAPColorSingleAxis;
            }
            if (!TypeUtils.isExist(scaleMgr.getDefault(name))) {
                scaleMgr.add(name, {
                    serializable: true,
                    defaultValue: {
                        "feed": name,
                        "type": "color",
                        "palette": Constants.COLOR.SAPColorSingleAxis
                    }
                });
            }
            propMgr.origin.add('plotArea.colorPalette', {
                defaultValue: Constants.COLOR.SAPColorSingleAxis,
                serializable: false,
                get: function() {
                    var returnValue = props?props.palette:null;
                    if(!returnValue || returnValue === Constants.COLOR.SAPColorSingleAxis){
                        returnValue = this.value || colorPalette;
                    }
                    return returnValue;
                }
            });
            return new ColorScale(domain, colorPalette, options);
        } else {
            if (!TypeUtils.isExist(scaleMgr.getDefault(name))) {
                scaleMgr.add(name, {
                    serializable: true,
                    defaultValue: {
                        "feed": name,
                        "type": "color",
                        "palette": [DUAL_COLOR_PALETTE[0], DUAL_COLOR_PALETTE[1]]
                    }
                });
            }

            if (TypeUtils.isArray(colorPalette) && TypeUtils.isArray(colorPalette[paletteNum])) {
                colorPalette = colorPalette[paletteNum];
            } else {
                colorPalette = DUAL_COLOR_PALETTE[paletteNum];
            }
            if (paletteNum === 0) {
                propMgr.origin.add('plotArea.primaryValuesColorPalette', {
                    defaultValue: DUAL_COLOR_PALETTE[0],
                    serializable: false,
                    get: function() {
                        return colorPalette;
                    }
                });
            }
            if (paletteNum === 1) {
                propMgr.origin.add('plotArea.secondaryValuesColorPalette', {
                    defaultValue: DUAL_COLOR_PALETTE[1],
                    serializable: false,
                    get: function() {
                        return colorPalette;
                    }
                });
            }

            return new ColorScale(domain, colorPalette, options);
        }
    };

    scales.shapeScale = function(data, name, scaleMgr, seriesType, role, propMgr) {
        var props = scaleMgr.get(name);
        var shapePalette = props ? props.palette : null;
        if (!TypeUtils.isExist(data)) {
            return new ShapeScale([], shapePalette);
        }
        if (!TypeUtils.isExist(scaleMgr.getDefault(name))) {
            scaleMgr.add(name, {
                serializable: true,
                defaultValue: {
                    "feed": name,
                    "type": "shape",
                    "palette": Constants.SHAPE
                }
            });
        }
        var domain = [];
        if (data.values) {
            if (seriesType === 'yy') { //for bubble and scatter, only use first binding
                domain = generateFirstUniqueDomain(data.values);
            } else {
                domain = rotateArray(data.values);
            }
        }
        if (!shapePalette) {
            shapePalette = Constants.SHAPE;
        }
        propMgr.origin.add('plotArea.shapePalette', {
            defaultValue: Constants.SHAPE,
            serializable: false,
            get: function() {
                return shapePalette;
            }
        });
        if (domain != null) {
            return new ShapeScale(domain, shapePalette);
        }
    };

    // quantizeScale properties(default values): {
    //     numberOfTicks: 5,
    //     startColor: #C2E3A9,
    //     endColor: #73C03C,
    //     nullColor: rgb,
    //     hasNoValue:false,
    //     legendValues: null//[10,11,12,13,14,15]
    //     colorPalette:  null//["#748CB2", "#9CC677", "#EACF5E", "#F9AD79", "#D16A7C"]
    // };

    scales.quantizeScale = function(data, name, scaleMgr, seriesType, role, propMgr) {
        var i,
            _valArr = ObjectUtils.extend(true, [], data.values),
            _realArr = [],
            isNoValue = false;
        
        for (i = 0; i < _valArr.length; i++) {
            if (!_valArr[i]) {
                isNoValue = true;
            } else if (_realArr.indexOf(_valArr[i]) < 0) {
                _realArr.push(_valArr[i]);
            }
        }
        var min, max;
        if (_realArr.length === 1) {
            min = _realArr[0];
            max = _realArr[0];
        } else if (_realArr.length === 0) {
            min = undefined;
            max = undefined;
        } else {
            min = data.range[0][0];
            max = data.range[0][1];
        }

        var props = scaleMgr.get(name);
        var colorPalette = (props && props.palette) ? props.palette : Constants.TREE_MAP.PALETTE;
        var startColor = (props && props.startColor) ? props.startColor : Constants.TREE_MAP.START_COLOR;
        var endColor = (props && props.endColor) ? props.endColor : Constants.TREE_MAP.END_COLOR;
        var legendValues = (props && props.legendValues) ? props.legendValues : Constants.TREE_MAP.LEGEND_VALUES;

        if (!TypeUtils.isExist(scaleMgr.getDefault(name))) {
            scaleMgr.add(name, {
                serializable: true,
                defaultValue: {
                    "feed": name,
                    "type": "quantize",
                    "palette": Constants.TREE_MAP.PALETTE,
                    "startColor": Constants.TREE_MAP.START_COLOR,
                    "endColor": Constants.TREE_MAP.END_COLOR,
                    "nullColor": Constants.TREE_MAP.NULL_COLOR,
                    "numberOfTicks": Constants.TREE_MAP.DEFAULT_TICKS,
                    "legendValues": Constants.TREE_MAP.LEGEND_VALUES
                }
            });
        }

        propMgr.origin.add('plotArea.colorPalette', {
            defaultValue: Constants.TREE_MAP.PALETTE,
            serializable: false,
            get: function() {
                return colorPalette;
            }
        });
        propMgr.origin.add('plotArea.startColor', {
            defaultValue: Constants.TREE_MAP.START_COLOR,
            serializable: false,
            get: function() {
                return startColor;
            }
        });
        propMgr.origin.add('plotArea.endColor', {
            defaultValue: Constants.TREE_MAP.END_COLOR,
            serializable: false,
            get: function() {
                return endColor;
            }
        });
        propMgr.origin.add('plotArea.legendValues', {
            defaultValue: Constants.TREE_MAP.LEGEND_VALUES,
            serializable: false,
            get: function() {
                return legendValues;
            }
        });


        var scaleOption = scaleMgr.get(name);
        var scaleDefaultOption = scaleMgr.getDefault(name);
        // assign default value for config
        if (!scaleOption) {
            scaleOption = scaleDefaultOption;
        } else {
            scaleOption.nullColor = scaleOption.nullColor || scaleDefaultOption.nullColor;
            scaleOption.numberOfTicks = scaleOption.numberOfTicks || scaleDefaultOption.numberOfTicks;
            scaleOption.startColor = scaleOption.startColor || scaleDefaultOption.startColor;
            scaleOption.endColor = scaleOption.endColor || scaleDefaultOption.endColor;
            scaleOption.palette = scaleOption.palette || scaleDefaultOption.palette;
            scaleOption.legendValues = scaleOption.legendValues || scaleDefaultOption.legendValues;
        }

        var quantizeScaleConfig = QuantizeScaleUtil.getColorScale(min, max, isNoValue, scaleOption);
        if (quantizeScaleConfig.domain !== null) {
            return new QuantizeScale(quantizeScaleConfig);
        }
    };

    scales.frameScale = function(data, name, scaleMgr, seriesType, role, propMgr) {

        var domain = [];
        var range = [];

        if (data.values && data.values[0]) {
            for (var i = 0; i < data.values[0].length; i++) {
                domain.push(data.values[0][i]);
                range.push(i);
            }
        }

        scaleMgr.add(name, {
            serializable: true,
            defaultValue: {
                "feed": name,
                "type": "frame",
                "currentValue": null,
            }
        });

        scaleMgr.add(name + ".domain", {
            serializable: true,
            readonly: true,
            defaultValue: domain,
        });

        var frameScale = new FrameScale(domain, range);


        return frameScale;
    };


    return scales;
});
define('sap/viz/framework/scale/ScaleManager',['sap/viz/framework/common/util/TypeUtils', 'sap/viz/framework/scale/ScaleRepository'], function Setup(TypeUtils,
    scaleRepository) {

    var scaleManager = {};

    //TODO: support scale properties
    scaleManager.create = function (dataModel, scaleProperties, scaleRoles, chartFamily, runtime, chartType,
        customerColorPalette) {
        var scales = {},
            scaleResolver, scaleProps, i, scaleMgr = runtime.scaleManager();
        if (!chartFamily) {
            return {};
        }
        if (chartFamily.indexOf('xyy') > -1) { //dual case
            for (i in dataModel) {
                if (dataModel.hasOwnProperty(i) && TypeUtils.isFunction(dataModel[i]) && dataModel[i]()) {
                    if (i === 'color') {
                        scaleProps = getScaleProps('color', scaleProperties);
                        scaleResolver = scaleRepository[scaleRoles['color'].scaleType];
                        scales[i] = scaleResolver.call(scaleResolver, dataModel[i](), 'color',
                            scaleMgr, dataModel.seriesType(), 0, runtime._propertyMgr);
                    } else if (i === 'color2') {
                        scaleProps = getScaleProps('color', scaleProperties);
                        scaleResolver = scaleRepository[scaleRoles['color'].scaleType];
                        scales[i] = scaleResolver.call(scaleResolver, dataModel[i](), 'color',
                            scaleMgr, dataModel.seriesType(), 1, runtime._propertyMgr);
                    } else if ((i === 'valueAxis' || i === 'valueAxis2') && dataModel._series ) {
                        scaleResolver = scaleRepository[scaleRoles[i].scaleType];
                        scales[i] = scaleResolver.call(scaleResolver, dataModel[i](),
                                i, scaleMgr, dataModel.seriesType(), scaleRoles[i].role, runtime._propertyMgr,
                                dataModel._series, i);
                    } else if (TypeUtils.isExist(scaleRoles[i]) && TypeUtils.isExist(scaleRoles[i].scaleType)) {
                        scaleProps = getScaleProps(i, scaleProperties);
                        scaleResolver = scaleRepository[scaleRoles[i].scaleType];
                        scales[i] = scaleResolver.call(scaleResolver, dataModel[i](), i,
                            scaleMgr, dataModel.seriesType(), scaleRoles[i].role, runtime._propertyMgr);
                    }
                }

            }
        } else {
            for (i in dataModel) {
                if (dataModel.hasOwnProperty(i)) {
                    if (TypeUtils.isExist(scaleRoles[i]) && TypeUtils.isExist(scaleRoles[i].scaleType)) {
                        
                        if (TypeUtils.isFunction(dataModel[i]) && dataModel[i]()) {
                        
                            scaleResolver = scaleRepository[scaleRoles[i].scaleType];
                            if (scaleRoles[i].scaleType === 'colorScale' && customerColorPalette) {
                                scales[i] = scaleResolver.call(scaleResolver, dataModel[i](),
                                    i, scaleMgr, dataModel.seriesType(), scaleRoles[i].role, runtime._propertyMgr,
                                    customerColorPalette);
                            } else if (scaleRoles[i].scaleType === 'valueScale' && dataModel._series){
                                scales[i] = scaleResolver.call(scaleResolver, dataModel[i](),
                                    i, scaleMgr, dataModel.seriesType(), scaleRoles[i].role, runtime._propertyMgr,
                                    dataModel._series, i);
                            } else {
                                scales[i] = scaleResolver.call(scaleResolver, dataModel[i](),
                                    i, scaleMgr, dataModel.seriesType(), scaleRoles[i].role, runtime._propertyMgr);
                            }

                        } else {
                            scaleResolver = scaleRepository[scaleRoles[i].scaleType];
                            scales[i] = scaleResolver.call(scaleResolver, null, i,
                                scaleMgr, dataModel.seriesType(), scaleRoles[i].role, runtime._propertyMgr);
                        }
                    }
                }
            }
        }
        return scales;
    };

    var getScaleProps = function (key, scaleProperties) {
        if (scaleProperties == null) {
            return null;
        }
        for (var i = 0; i < scaleProperties.length; i++) {
            if (scaleProperties[i].feed === key) {
                return scaleProperties[i];
            }
        }
    };

    /**
     * UnRegister binding chain
     *
     * @function registerChain
     * @memberof sap.viz.api.chain
     * @static
     * @param {String} id Chain id, this id can be used in binding.
     */
    scaleManager.createScale = function (id, domain, range) {
        if (scaleRepository[id]) {
            return scaleRepository[id].call(scaleRepository[id], domain, range);
        }
    };

    return scaleManager;

});
define('sap/viz/framework/binding/flatTableChains/ChainUtils',['sap/viz/framework/common/util/TypeUtils'], function Setup(TypeUtils) {
    var TYPENAME_DIMENSION = "Dimension";
    var TYPENAME_MEASURE = "Measure";
    var MEASURE_NAMES = "measureNames";
    var CONST_COLUMN = 'trellisColumn';
    var CONST_ROW = 'trellisRow';
    var CONST_MEASURE = 'Measure';
    var CONST_DIMENSION = 'Dimension';
    var contextIdName = "_context_row_number";
    var utils = {};
    utils.rotateArray = function(categoryArray) {
        var returnArray = [];
        if (categoryArray.length) {
            var rowLength = categoryArray.length;
            var columnLength = categoryArray[0].length;
            var i, j;
            for (j = 0; j < columnLength; j++) {
                returnArray[j] = [];
            }
            for (i = 0; i < rowLength; i++) {
                var rowValue = categoryArray[i];
                for (j = 0; j < columnLength; j++) {
                    returnArray[j].push(rowValue[j]);
                }
            }
        }
        return returnArray;
    };
    utils.buildMetaData = function(categoryArray, rawData, bindingInfo, MND) {

        var bindingLength = bindingInfo.length;
        var returnArray = [];
        for (var i = 0; i < bindingLength; i++) {
            if (bindingInfo[i][MEASURE_NAMES]) {
                var MNDMeta = {};
                var measureID = MND;
                MNDMeta.id = MEASURE_NAMES;
                MNDMeta.type = CONST_DIMENSION;
                MNDMeta.values = [];
                var columnLength = measureID.length;
                for (var j = 0; j < columnLength; j++) {
                    var measureMetadata = rawData.metadata(measureID[j])[0];
                    MNDMeta.values.push({
                        'id': measureMetadata.id,
                        'name': measureMetadata.name
                    });
                }
                returnArray.push(MNDMeta);

            } else {
                var name = bindingInfo[i];
                var id = rawData.metadata(name)[0].id;
                var nameInfo = rawData.metadata(name)[0].name;
                if (name === contextIdName) {
                    returnArray.push({
                        'id': id,
                        'name': nameInfo
                    });
                } else {
                    var type = rawData.metadata(name)[0].semanticType;
                    returnArray.push({
                        'id': id,
                        'name': nameInfo,
                        'type': type
                    });
                }
            }
        }
        return returnArray;

    };
    
    utils.extractBindingDefinition = function(bindingDefinition) {
        var returnValue = {};
        bindingDefinition.map(function(item) {
            returnValue[item.role] = item.id;
        });
        return returnValue;
    };
    
    utils.getArrayLength = function(bindingResults, dimensions) {
        var arrayLength = [];
        for (var i in bindingResults) {
            if (dimensions.indexOf(i) > -1 && i !== 'categoryAxis' && bindingResults[i]) {
                arrayLength.push(bindingResults[i].rowArray.length);
            }
        }
        return arrayLength;
    };
    
    utils.sumByCategory = function(array) {
        var results = [];
        var total = 0;
        array.map(function(item, index) {
            var sum = 0;
            if (TypeUtils.isArray(item)) {
                item.map(function(item) {
                    if (TypeUtils.isArray(item) || !TypeUtils.isNumber(item)) {
                        return;
                    }
                    if (sum === 0) {
                        sum = item;
                    } else if (sum < 0 && item > 0) {
                        sum = item;
                    } else if (sum * item > 0) {
                        sum += item;
                    }
                });
            } else {
                sum = item;
            }
            results[index] = sum;
        });

        return results;
    };
    utils.buildNewBindingResult = function(dimensions, measures, contextResults, rowId, columnId, isRowFirst) {
        var newResult = {};
        var i;
        for (i in dimensions) {
            if (dimensions.hasOwnProperty(i)) {
                newResult[i] = dimensions[i];
            }

        }
        var resultRowId = isRowFirst ? rowId : columnId;
        var resultColumnId = isRowFirst ? columnId : rowId;

        for (i in measures) {
            if (measures.hasOwnProperty(i)) {
                var values;
                if (!TypeUtils.isArray(measures[i].values[rowId])) {
                    values = [];
                } else {
                    values = measures[i].values[rowId][columnId];
                }
                newResult[i] = {
                    range: measures[i].range,
                    values: values,
                    metaData: measures[i].metaData
                };

                if (measures[i].categorySum) {
                    if (!TypeUtils.isArray(measures[i].categorySum[resultRowId])) {
                        measures[i].categorySum[resultRowId] = [];
                    }
                    if (TypeUtils.isArray(values)) {
                        measures[i].categorySum[resultRowId][resultColumnId] = utils.sumByCategory(values);
                    } else {
                        measures[i].categorySum[resultRowId][resultColumnId] = values;
                    }
                }

            }
        }

        if (contextResults && contextResults.values[rowId]) {
            newResult.context = {
                values: contextResults.values[rowId][columnId],
                metaData: contextResults.metaData
            };
        }

        return newResult;
    };
    
    utils.checkRowFirst = function(bindings) {
        var length = bindings.length;
        for (var i = 0; i < length; i++) {
            if (bindings[i].feed === CONST_ROW) {
                return true;
            } else if (bindings[i].feed === CONST_COLUMN) {
                return false;
            }
        }
        throw "Binding not match";
    };
    
    utils.getMeasureResults = function(results, bindingDefinition) {
        var measures = {};
        bindingDefinition.map(function(item) {
            if (item.type === CONST_MEASURE) {
                if (results[item.id]) {
                    measures[item.id] = results[item.id];
                }
            }
        });
        return measures;
    };
    
    utils.addTrellisRow = function(measures, bindingResults) {
        for (var i in measures) {
            if (measures.hasOwnProperty(i)) {
                if (bindingResults[i]) {
                    bindingResults[i].values = [bindingResults[i].values];
                }
            }

        }
    };

    utils.addTrellisColumn = function(measures, bindingResults) {
        for (var i in measures) {
            if (measures.hasOwnProperty(i)) {
                var currentMeasureResult = bindingResults[i];
                currentMeasureResult.values.map(function(item, j) {
                    currentMeasureResult.values[j] = [currentMeasureResult.values[j]];
                });
            }
        }
    };
    utils.getDimensions = function(results, bindingDefinition) {
        var dimensions = {};
        bindingDefinition.map(function(item) {
            if (item.role !== CONST_ROW && item.role !== CONST_COLUMN) {
                if (results[item.id]) {
                    dimensions[item.id] = results[item.id];
                }
            }
        });
        return dimensions;
    };
    
    
    return utils;
});
define('sap/viz/framework/binding/flatTableChains/BaseChains',['sap/viz/framework/common/util/TypeUtils', 'sap/viz/framework/binding/flatTableChains/ChainUtils',
        'sap/viz/framework/common/util/DataUtils', 'sap/viz/framework/common/util/NumberUtils'
    ],
    function Setup(TypeUtils, ChainUtils, DataUtils, NumberUtils) {

        var flatTableChains = {};
        var TYPENAME_DIMENSION = "Dimension";
        var TYPENAME_MEASURE = "Measure";
        var MEASURE_NAMES = "measureNames";
        var CONST_COLUMN = 'trellisColumn';
        var CONST_FRAME = 'frame';
        var CONST_ROW = 'trellisRow';
        var CONST_MEASURE = 'Measure';
        var CONST_DIMENSION = 'Dimension';
        var contextIdName = "_context_row_number";

        var parseData = function(rawData, metadataId) {
            var data = rawData.dataInFields([metadataId]);
            for (var i in data) {
                if (data.hasOwnProperty(i)) {
                    data[i] = data[i].data[0] === undefined ? null : data[i].data[0];
                }

                //TODO: do we support flat table info?
                // if (data[i].info) {
                //     data[i].info = data[i].info[0];
                // }

            }
            return data;
        };

        var multiDimensionIndex;

        var resetState = function() {
            multiDimensionIndex = [];
        };
        var handleMND = function(category2DArray, MeasureNames, MNDPosition) {
            var measureNameLength = MeasureNames.length;
            var singleMeasureLength = category2DArray.length;
            var copyedArray = [];
            var i, j;
            for (j = 0; j < singleMeasureLength; j++) {
                category2DArray[j].splice(MNDPosition, 0, MeasureNames[0]);
            }
            for (i = 0; i < measureNameLength; i++) {
                copyedArray = copyedArray.concat(JSON.parse(JSON.stringify(category2DArray)));
                var startPosition = i * singleMeasureLength;
                for (j = 0; j < singleMeasureLength; j++) {
                    copyedArray[startPosition + j].splice(MNDPosition, 1, MeasureNames[i]);
                }
            }

            return copyedArray;

        };

        var sortByDomain = function(indexArray, domain) {
            if (!TypeUtils.isArray(domain)) {
                return [];
            }
            var returnArray = [];
            var allArray = [];
            for (var i = 0, len = indexArray.length; i < len; i++) {
                var index = 0;
                var val = indexArray[i],
                    dimValue;
                for (var j = 0, length = domain.length; j < length; j++) {
                    dimValue = DataUtils.getDimensionValue(val.originalValue[j]);
                    index += domain[j].multiPlier * domain[j].value[dimValue];
                }
                if (index > -1) {
                    allArray[index] = indexArray[i];
                }
            }
            for (i = 0, len = allArray.length; i < len; i++) {
                if (TypeUtils.isExist(allArray[i])) {
                    returnArray.push(allArray[i]);
                }
            }

            return returnArray;
        };

        var groupResult = function(array, MeasureNameLength, measureNamesDimension, domainSet) {
            if (!array || !array.length) {
                return [];
            }
            // array.join() does not distinguish between null and "" (empty string)
            var joinedArray = array.map(function(values) {
                return values.map(DataUtils.getDimensionValue).map(String).join(',');
            });
            //var joinedArray = array.join(';/*splitTag*/').split(';/*splitTag*/');

            var indexArray = [];
            var arrayLength = array.length;
            var maxIndex = MeasureNameLength > 0 ? arrayLength / MeasureNameLength : arrayLength;
            var i, j, dataIndex;
            for (i = 0; i < arrayLength; i++) {
                indexArray[i] = {
                    index: i % maxIndex,
                    originalValue: array[i],
                    //  joinedValue: joinedArray[i],
                    mndIndex: MeasureNameLength > 0 ? measureNamesDimension[Math.floor(i / maxIndex)] : null
                };
            }
            var dataCache = {};
            var count = 0;
            for (i = 0; i < arrayLength; i++) {
                if (!array[i].reference) {
                    array[i].reference = [];
                }
                dataIndex = indexArray[i].index;
                var value = joinedArray[i];
                // indexArray[i].originalValue.map(function(value){
                //     return DataUtils.getDimensionValue(value);
                // }).join(",");
                if (!dataCache[value]) {
                    dataCache[value] = {
                        reference: [],
                        index: count++,
                        position: i
                    };
                }
                dataCache[value].reference.push(dataIndex);
            }
            var newModel = [];
            for (var item in dataCache) {
                if (dataCache.hasOwnProperty(item)) {
                    var it = dataCache[item];
                    newModel[it.index] = indexArray[it.position];
                    for (j in it.reference) {
                        if (it.reference.hasOwnProperty(j)) {
                            newModel[it.index].originalValue.reference.push(it.reference[j]);
                        }
                    }
                }
            }
            indexArray = newModel;
            if (indexArray[0] && indexArray[0].originalValue.length > 0) {
                if (domainSet) {
                    indexArray = sortByDomain(indexArray, domainSet);
                }

            }

            var returnArray = [];
            var dimensionIndex = [];
            for (i = 0; i < indexArray.length; i++) {
                returnArray[i] = indexArray[i].originalValue;
                returnArray[i].mndIndex = indexArray[i].mndIndex;
                var reference = returnArray[i].reference;
                reference.map(function(value, index) {
                    if (!dimensionIndex[value]) {
                        dimensionIndex[value] = [];
                    }
                    dimensionIndex[value].push(i);
                });
            }

            dimensionIndex.map(function(value, index) {
                if (!multiDimensionIndex[index]) {
                    multiDimensionIndex[index] = [];
                }
                multiDimensionIndex[index].push(value);
            });
            if (!multiDimensionIndex.levels) {
                multiDimensionIndex.levels = 0;
            }
            multiDimensionIndex.levels++;

            return returnArray;
        };

        var getDistinctValues = function(array) {
            var returnArray = [],
                dimValue;
            var obj = {};
            for (var i = 0, len = array.length; i < len; i++) {
                dimValue = DataUtils.getDimensionValue(array[i]);
                if (!obj[dimValue]) {
                    returnArray.push(dimValue);
                    obj[dimValue] = true;
                }
            }
            return returnArray;
        };

        var groupDomain = function(domains) {
            var len = domains.length;
            var multiPlier = 1;
            var domainObj = [];
            for (var i = len - 1; i >= 0; i--) {
                var length = domains[i].length;

                var tmpObj = {};
                for (var j = 0; j < length; j++) {
                    tmpObj[domains[i][j]] = j;
                }
                domainObj[i] = {
                    multiPlier: multiPlier,
                    value: tmpObj
                };
                multiPlier = multiPlier * length;
            }
            return domainObj;
        };

        var handleDimension = function(rawData, bindingInfo, measureNamesDimension) {
            if (bindingInfo) {
                var length = bindingInfo.length;
                var category2DArray = [];
                var hasMND = false;
                var MNDPosition = -1;
                var MNDItems = [];
                var MNDItemLength = 0;
                var i, j;
                var domain = [];
                for (i = 0; i < length; i++) {
                    var bindItem = bindingInfo[i];
                    if (bindItem[MEASURE_NAMES]) {
                        hasMND = true;
                        MNDPosition = i;
                        MNDItems = measureNamesDimension;
                        MNDItemLength = MNDItems.length;
                        domain.push(measureNamesDimension);
                    } else {
                        var metadata = rawData.metadata(bindItem)[0];
                        if (metadata.semanticType === TYPENAME_DIMENSION) {
                            var data = parseData(rawData, bindItem);
                            var dataVolume = data.length;
                            for (j = 0; j < dataVolume; j++) {
                                if (!category2DArray[j]) {
                                    category2DArray[j] = [];
                                }
                                category2DArray[j].push(data[j]);
                            }
                            if (metadata.domain) {
                                domain.push(getDistinctValues(metadata.domain));
                            } else {
                                domain.push(getDistinctValues(data));
                            }

                        } else {
                            throw "semantic type not match";
                        }
                    }

                }
                if (hasMND) {
                    if (category2DArray.length > 0) {
                        category2DArray = handleMND(category2DArray, MNDItems, MNDPosition);
                    } else {
                        //TODO: add API to get flatTable size.
                        var rowLength = rawData._FlatTableD._data.length;
                        for (i = 0; i < rowLength; i++) {
                            MNDItems.map(function(value, index) {
                                category2DArray[index * rowLength + i] = [value];
                            });

                        }
                    }

                }
                var domainSet = groupDomain(domain);
                return groupResult(category2DArray, MNDItemLength, measureNamesDimension, domainSet);
            } else {
                throw "flat table need fieldsName as it's bindingInfo";
            }
        };


        //Follow the sequence of the feeding definition, data[][][][]
        var createMeasureMultiDimensionTable = function(measure2DArray, enableDuplicated, mnd, isBullet) {
            var measureArray = [];

            var rowLength = measure2DArray.length;
            var i, j, k, value, tmpValue, length, position;
            if (multiDimensionIndex && multiDimensionIndex.levels) {
                var dimensionLength = multiDimensionIndex.levels;

                for (i = 0; i < rowLength; i++) {
                    var rowMeasure = measure2DArray[i];
                    var dimensionIndex = multiDimensionIndex[i];
                    if (!TypeUtils.isExist(dimensionIndex)) {
                        continue;
                    }
                    var index = 0,
                        number = 0;
                    for (j in rowMeasure) {
                        if (rowMeasure.hasOwnProperty(j)) {
                            number++;
                        }

                    }
                    if (number === mnd.length) {
                        for (j in rowMeasure) {
                            if (rowMeasure.hasOwnProperty(j)) {
                                value = rowMeasure[j];
                                position = dimensionIndex.map(function(value) {
                                    return value[index] ? value[index] : value[0];
                                });
                                tmpValue = measureArray;
                                if (position.length < dimensionLength) {
                                    continue;
                                }
                                for (k = 0; k < dimensionLength - 1; k++) {
                                    if (!tmpValue[position[k]]) {
                                        tmpValue[position[k]] = [];
                                    }
                                    tmpValue = tmpValue[position[k]];
                                }
                                if (!TypeUtils.isExist(position[k])) {
                                    continue;
                                }
                                if (enableDuplicated) {
                                    if (!tmpValue[position[k]]) {
                                        tmpValue[position[k]] = [];
                                    }
                                    tmpValue[position[k]].push(value);
                                } else {
                                    if (!tmpValue[position[k]]) {
                                        tmpValue[position[k]] = value;
                                    }
                                }
                                index++;
                            }
                        }
                    } else {
                    
                        var values  = [];
                        for (j in rowMeasure) {
                            if (rowMeasure.hasOwnProperty(j)) {
                                if(isBullet){
                                    values.push(rowMeasure[j]);
                                }else{
                                    values =  rowMeasure[j];
                                }
                            }
                        }
                        if (mnd.length > 0) {
                            length = mnd.length;
                        } else {
                            length = 1;
                        }
                        for (var ii = 0; ii < length; ii++) {
                            position = dimensionIndex.map(function(value) {
                                return value[ii] ? value[ii] : value[0];
                            });
                            tmpValue = measureArray;
                            for (k = 0; k < dimensionLength - 1; k++) {
                                if (!tmpValue[position[k]]) {
                                    tmpValue[position[k]] = [];
                                }
                                tmpValue = tmpValue[position[k]];
                            }
                            if (enableDuplicated) {
                                if (!tmpValue[position[k]]) {
                                    tmpValue[position[k]] = [];
                                }
                                tmpValue[position[k]].push(values);
                            } else {
                                if (!tmpValue[position[k]]) {
                                    tmpValue[position[k]] = values;
                                }
                            }
                        }
                    }
                }
            } else {
                length = measure2DArray.length;

                for (i = 0; i < length; i++) {
                    measureArray[i] = [];
                    var row = measure2DArray[i];
                    for (j in row) {
                        if (row.hasOwnProperty(j)) {
                            measureArray[i].push(row[j]);
                        }

                    }
                }
            }
            return measureArray;
        };
        // calculate min max value for bullet
        function calculateMaxValue(array, feed) {
            var maxValue = 0;
            var minValue = 0;
            var sum = 0;
            if (feed === "valueAxis") {
                array.forEach(function(e, i) {
                    sum = 0;
                    for(var j = 0, len = e.length; j < len; ++j){
                        if(!NumberUtils.isNoValue(e[j])){
                            sum += e[j];
                            maxValue = Math.max(maxValue, sum);
                            minValue = Math.min(minValue, sum);
                        }
                    }
                //    maxValue = Math.max(maxValue, sum);
                });
            } else {
                array.forEach(function(e, i) {
                    for(var j = 0, len = e.length; j < len; ++j){
                        if(!NumberUtils.isNoValue(e[j])){
                            maxValue = Math.max(maxValue, e[j]);
                            minValue = Math.min(minValue, e[j]);
                        }
                    }
                });
            }
            return [minValue,maxValue];
        }

        var handleMeasure = function(rawData, bindingInfo, enableDuplicated, mnd, isBullet) {
            if (bindingInfo) {
                var length = bindingInfo.length;
                var measure2DArray = [];
                var i, j;
                for (i = 0; i < length; i++) {
                    var measureName = bindingInfo[i];
                    var metadata = rawData.metadata(measureName)[0];
                    var data = parseData(rawData, measureName);
                    var dataVolume = data.length;
                    for (j = 0; j < dataVolume; j++) {
                        if (!measure2DArray[j]) {
                            measure2DArray[j] = {};
                        }
                        measure2DArray[j][measureName] = data[j];
                    }
                }
                var measureArray = [],
                    multiArray;
                for (i = 0; i < measure2DArray.length; i++) {
                    measureArray[i] = [];
                    for (j = 0; j < bindingInfo.length; j++) {
                        measureArray[i].push(measure2DArray[i][bindingInfo[j]]);
                    }
                }
                multiArray = createMeasureMultiDimensionTable(measure2DArray, enableDuplicated, mnd, isBullet);
                var returnArray = {};
                returnArray['measureArray'] = measureArray;
                returnArray['multiArray'] = multiArray;
                return returnArray;

            } else {
                throw "flat table need fieldsName as it's bindingInfo";
            }
        };


        var generateNum = function(arrayLength, numberArray) {
            var num = 0;
            for (var i = 0; i < numberArray.length; i++) {
                var factor = 1;
                for (var j = i + 1; j < arrayLength.length; j++) {
                    factor *= arrayLength[j];
                }
                num += numberArray[i] * factor;
            }
            return num;
        };

        var getMeasures = function(results, bindingDefinition) {
            var measures = {};
            bindingDefinition.map(function(item) {
                if (item.type === CONST_MEASURE) {
                    if (results[item.id]) {
                        measures[item.id] = results[item.id];
                    }
                }
            });
            return measures;
        };

      

      
     

        flatTableChains.GetBindingSeries = function(rawData, dimensions, measures, context,
            bindingResults, bindings, bindingDefinition) {
            var roleMap = ChainUtils.extractBindingDefinition(bindingDefinition);
            var rowDimension = bindingResults[roleMap[CONST_ROW]];
            var columnDimension = bindingResults[roleMap[CONST_COLUMN]];
            var playDimension = bindingResults[roleMap[CONST_FRAME]];
            var rowLength = rowDimension ? rowDimension.rowArray.length : 0;
            var columnLength = columnDimension ? columnDimension.rowArray.length : 0;
            var playLength = playDimension ? playDimension.rowArray.length : 0;

            if (rowLength === 0 && columnLength === 0) {
                if (playLength === 0) {
                    getBindingSeries(rawData, dimensions, measures, context, bindingResults);
                } else {
                    getPlayBindingSeries(rawData, dimensions, measures, context,
                        bindingResults, bindings, bindingDefinition, playDimension, playLength);
                }
            } else {
                getTrellisBindingSeries(rawData, dimensions, measures, context, bindingResults, bindings,
                    bindingDefinition, rowDimension, columnDimension, rowLength, columnLength);
            }
        };

        var getPlayBindingSeries = function(rawData, dimensions, measures, context, bindingResults,
            bindings, bindingDefinition, playDimension, playLength) {
            var allDimensions = ChainUtils.getDimensions(bindingResults, bindingDefinition);
            var measureResults = ChainUtils.getMeasureResults(bindingResults, bindingDefinition);
            var contextResults = bindingResults.context;

            ChainUtils.addTrellisRow(measureResults, bindingResults);
            if (contextResults) {
                ChainUtils.addTrellisRow({
                    context: contextResults
                }, bindingResults);
            }

            var allSeries = [];
            for (var i = 0; i < playLength; i++) {
                var tmpBindingResult;
                tmpBindingResult = ChainUtils.buildNewBindingResult(allDimensions, 
                        measureResults, contextResults, 0, i, true);

                var newDimensions = dimensions.filter(function(item) {
                    return item !== "dataFrame";
                });
                tmpBindingResult.seriesType = bindingResults.seriesType;

                getBindingSeries(rawData, newDimensions, measures, context, tmpBindingResult);
                allSeries[i] = tmpBindingResult.series;
            }
            bindingResults.allSeries = allSeries;
            bindingResults.series = allSeries[0];
            if(bindingResults.valueAxis &&
                bindingResults.valueAxis.categorySum &&
                bindingResults.valueAxis.categorySum[0] &&
                Array.isArray(bindingResults.valueAxis.categorySum[0]))
            {
                bindingResults.allCategorySum = bindingResults.valueAxis.categorySum[0];
                bindingResults.valueAxis.categorySum = bindingResults.allCategorySum[0];
            }
            if(bindingResults.valueAxis2 &&
                bindingResults.valueAxis2.categorySum &&
                bindingResults.valueAxis2.categorySum[0] &&
                Array.isArray(bindingResults.valueAxis2.categorySum[0]))
            {
                bindingResults.allCategorySum2 = bindingResults.valueAxis2.categorySum[0];
                bindingResults.valueAxis2.categorySum = bindingResults.allCategorySum2[0];
            }
        };

        var getTrellisBindingSeries = function(rawData, dimensions, measures, context,
            bindingResults, bindings, bindingDefinition,
            rowDimension, columnDimension, rowLength, columnLength) {
            var isRowFirst = ChainUtils.checkRowFirst(bindings);
            var allDimensions = ChainUtils.getDimensions(bindingResults, bindingDefinition);
            var trellisBindItem = 2;
            var measureResults = ChainUtils.getMeasureResults(bindingResults, bindingDefinition);
            var contextResults = bindingResults.context;
            if (rowLength === 0) {
                ChainUtils.addTrellisRow(measureResults, bindingResults);
                if (contextResults) {
                    ChainUtils.addTrellisRow({
                        context: contextResults
                    }, bindingResults);
                }
                rowLength = 1;
                trellisBindItem = 1;
                isRowFirst = true;
            }
            if (columnLength === 0) {
                ChainUtils.addTrellisColumn(measureResults, bindingResults);
                if (contextResults) {
                    ChainUtils.addTrellisColumn({
                        context: contextResults
                    }, bindingResults);
                }
                columnLength = 1;
                trellisBindItem = 1;
            }
            var series = [];
            for (var i = 0; i < rowLength; i++) {
                for (var j = 0; j < columnLength; j++) {
                    var tmpBindingResult;
                    if (isRowFirst) {
                        tmpBindingResult = ChainUtils.buildNewBindingResult(allDimensions, measureResults,
                            contextResults, i, j, isRowFirst);
                    } else {
                        tmpBindingResult = ChainUtils.buildNewBindingResult(allDimensions, measureResults,
                            contextResults, j, i, isRowFirst);
                    }

                    var newDimensions = dimensions.slice(trellisBindItem);
                    tmpBindingResult.seriesType = bindingResults.seriesType;

                    var trellisInfo;
                    if (!series[i]) {
                        series[i] = [];
                    }
                    trellisInfo = {
                        trellisRow: rowDimension ? rowDimension.rowArray[i] : undefined,
                        trellisColumn: columnDimension ? columnDimension.rowArray[j] : undefined
                    };
                    getBindingSeries(rawData, newDimensions, measures, context, tmpBindingResult, trellisInfo);
                    series[i][j] = tmpBindingResult.series;
                }
            }
            bindingResults.series = series;
        };



        var getBindingSeries = function(rawData, dimensions, measures, context, bindingResults, trellisInfo) {
            var arrayLength = getArrayLength(bindingResults, dimensions);
            var series = [],
                seriesNum, categoryBinds, categoryMeta, seriesBinds = [],
                seriesMeta = [],
                measureBinds = [],
                measureMeta = [],
                contextMeta = [],
                categoryLength;
            if (context) {
                contextMeta = 'context';
            }
            for (var i in bindingResults) {
                if (bindingResults.hasOwnProperty(i) && bindingResults[i]) {
                    if (i === 'categoryAxis') {
                        categoryBinds = bindingResults[i];
                        categoryMeta = i;
                    } else if (dimensions.indexOf(i) > -1) {
                        seriesBinds.push(bindingResults[i]);
                        seriesMeta.push(i);
                    } else if (measures.indexOf(i) > -1) {
                        measureBinds.push(bindingResults[i]);
                        measureMeta.push(i);
                    }
                }
            }
            var indexArray = generateIndexArray(arrayLength);
            var dp, isExisted, j, k, temp, l;
            if (categoryBinds) {
                for (i in indexArray) {
                    if (indexArray.hasOwnProperty(i)) {
                        for (var categoryNum = 0; categoryNum < categoryBinds.rowArray.length; categoryNum++) {
                            dp = trellisInfo ? {
                                trellisRow: trellisInfo.trellisRow,
                                trellisColumn: trellisInfo.trellisColumn
                            } : {};
                            isExisted = true;
                            for (j = 0; j < indexArray[i].length; j++) {
                                var tmpSeries = seriesBinds[j].rowArray[indexArray[i][j]];
                                if (tmpSeries.mndIndex) {
                                    var meta = bindingResults[seriesMeta[j]].metaData;
                                    var mndMeta = meta[tmpSeries.indexOf(tmpSeries.mndIndex)];
                                    if (mndMeta && mndMeta.values) {
                                        var metaDataValues = mndMeta.values;
                                        for (k in metaDataValues) {
                                            if (metaDataValues.hasOwnProperty(k)) {
                                                if (metaDataValues[k].id == tmpSeries.mndIndex) {
                                                    tmpSeries.mndIndex = k;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }

                                dp[seriesMeta[j]] = tmpSeries;

                            }
                            for (k in measureBinds) {
                                if (measureBinds.hasOwnProperty(k)) {
                                    if (TypeUtils.isExist(measureBinds[k].values)) {
                                        temp = measureBinds[k].values[categoryNum];
                                        if (!TypeUtils.isExist(temp)) {
                                            isExisted = false;
                                            continue;
                                        }
                                        for (l = 0; l < indexArray[i].length; l++) {
                                            if (TypeUtils.isExist(temp[indexArray[i][l]])) {
                                                temp = temp[indexArray[i][l]];
                                            }
                                        }
                                        if (TypeUtils.isArray(temp)) {
                                            isExisted = false;
                                        } else {
                                            dp[measureMeta[k]] = temp;
                                        }
                                    } else {
                                        isExisted = false;
                                    }
                                }
                            }

                            if (bindingResults.context && bindingResults.context.values) {
                                temp = bindingResults.context.values[categoryNum];
                                if (!TypeUtils.isExist(temp)) {} else {
                                    for (l = 0; l < indexArray[i].length; l++) {
                                        if (TypeUtils.isExist(temp[indexArray[i][l]])) {
                                            temp = temp[indexArray[i][l]];
                                        }
                                    }
                                    if (!TypeUtils.isArray(temp)) {
                                        dp[contextMeta] = temp;
                                    }
                                }
                            }

                            if (isExisted === false) {
                                continue;
                            }
                            seriesNum = generateNum(arrayLength, indexArray[i]);
                            if (series[seriesNum] === undefined) {
                                series[seriesNum] = [];
                            }
                            series[seriesNum][categoryNum] = dp;
                        }
                    }
                }
            } else {
                for (i in indexArray) {
                    if (indexArray.hasOwnProperty(i)) {
                        dp = trellisInfo ? {
                            trellisRow: trellisInfo.trellisRow,
                            trellisColumn: trellisInfo.trellisColumn
                        } : {};
                        isExisted = true;
                        for (j = 0; j < indexArray[i].length; j++) {
                            dp[seriesMeta[j]] = seriesBinds[j].rowArray[indexArray[i][j]];
                        }
                        var match;
                        for (k in measureBinds) {
                            if (measureBinds.hasOwnProperty(k)) {
                                temp = measureBinds[k].values;
                                if (!TypeUtils.isExist(temp)) {
                                    dp[measureMeta[k]] = undefined;
                                    continue;
                                }
                                match = 0;
                                for (l = 0; l < indexArray[i].length; l++) {
                                    if (TypeUtils.isExist(temp[indexArray[i][l]])) {
                                        temp = temp[indexArray[i][l]];
                                        match++;
                                    }
                                }
                                dp[measureMeta[k]] = temp;
                            }
                        }
                        if (bindingResults.context && bindingResults.context.values) {
                            temp = bindingResults.context.values;
                            if (TypeUtils.isExist(temp)) {
                                for (l = 0; l < indexArray[i].length; l++) {
                                    if (TypeUtils.isExist(temp[indexArray[i][l]])) {
                                        temp = temp[indexArray[i][l]];
                                    }
                                }
                                dp[contextMeta] = temp;
                            }


                        }
                        if (match === indexArray[i].length || indexArray[i] === 0) { //zero for no series binding
                            seriesNum = generateNum(arrayLength, indexArray[i]);
                            if (series[seriesNum] === undefined) {
                                series[seriesNum] = [];
                            }
                            if (TypeUtils.isArray(dp[measureMeta[k]])) {
                                var dps = splitObjects(dp, measures, dp[measureMeta[k]].length);
                                dps.forEach(function(e) {
                                    series[seriesNum].push(e);
                                });
                            } else {
                                series[seriesNum].push(dp);
                            }
                        }
                    }
                }
            }

            var returnSeries = [];
            for (i in series) { // remove undefined
                if (series.hasOwnProperty(i) && series[i]) {
                    returnSeries.push(series[i]);
                }
            }
            bindingResults.series = returnSeries;
        };

        var splitObjects = function(dps, measures, length) {
            var arr = [];
            for (var i = 0; i < length; i++) {
                var dp = {};
                for (var j in dps) {
                    if (TypeUtils.isExist(dps[j])) {
                        if (measures.indexOf(j) > -1) {
                            dp[j] = dps[j][i];
                        } else {
                            dp[j] = dps[j];
                        }
                    }
                }
                arr.push(dp);
            }
            return arr;
        };

        var getArrayLength = function(bindingResults, dimensions) {
            var arrayLength = [];
            for (var i in bindingResults) {
                if (dimensions.indexOf(i) > -1 && i !== 'categoryAxis' && bindingResults[i]) {
                    arrayLength.push(bindingResults[i].rowArray.length);
                }
            }
            return arrayLength;
        };

        //TODO: only support 2d array, need to support cross join Nd array
        var generateIndexArray = function(inputArray) {
            var arr = [],
                length = inputArray.length,
                resultArray = [];
            var i, j;
            if (inputArray.length === 0) { //series is not bind
                return [0];
            }
            for (i = 0; i < length; i++) {
                for (j = 0; j < inputArray[i]; j++) {
                    if (arr[i] === undefined) {
                        arr[i] = [];
                    }
                    arr[i].push(j);
                }
            }
            var index = 0;
            if (arr.length === 1) { //1d array
                for (i in arr[0]) {
                    if (arr[0].hasOwnProperty(i)) {
                        if (resultArray[index] === undefined) {
                            resultArray[index] = [];
                        }
                        resultArray[index].push(i);
                        index++;
                    }
                }
                return resultArray;
            }
            for (i in arr[0]) {
                if (arr[0].hasOwnProperty(i)) { //2d array
                    for (j in arr[1]) {
                        if (arr[1].hasOwnProperty(j)) {
                            if (resultArray[index] === undefined) {
                                resultArray[index] = [];
                            }
                            resultArray[index].push(i);
                            resultArray[index].push(j);
                            index++;
                        }
                    }
                }
            }
            return resultArray;
        };

        var getMetadata = function(data) {
            return data._FlatTableD._dataset.metadata;
        };



        flatTableChains.GetContext = function(rawData, context, duplicated, mnd) {
            if (context.length === 0) {
                return {
                    values: [],
                    metaData: []
                };
            }
            var results = handleMeasure(rawData, context, duplicated, mnd);
            return {
                values: results.multiArray,
                metaData: ChainUtils.buildMetaData(results.measureArray, rawData, context)
            };
        };


        flatTableChains.GetDimensionsFromFlattable = function(rawData, fields, measureNamesDimension) {
            var metadata = getMetadata(rawData).fields;
            for (var i = 0; i < fields.length; i++) {
                for (var j = 0; j < metadata.length; j++) {
                    if (fields[i].measureNames || fields[i] === metadata[j].id) {
                        var rowArray = handleDimension(rawData, fields, measureNamesDimension);
                        return {
                            values: ChainUtils.rotateArray(rowArray),
                            metaData: ChainUtils.buildMetaData(rowArray, rawData, fields, measureNamesDimension),
                            rowArray: rowArray
                        };
                    }
                }
            }
        };
        flatTableChains.GetMeasuresFromFlattable = function(rawData, fields, mnd, bindings, duplicated, 
                isSize, isBullet, bindingName) {
            var metadata = getMetadata(rawData).fields;
            for (var i = 0; i < fields.length; i++) {
                for (var j = 0; j < metadata.length; j++) {
                    if (fields[i] === metadata[j].id) {
                        var returnArray = handleMeasure(rawData, fields, duplicated, mnd, isBullet);
                        var rowArray = returnArray.measureArray;
                        var array = ChainUtils.rotateArray(rowArray);
                        var domain = [];
                        array.forEach(function(e, i) {
                            domain[i] = [];
                            var k = e;
                            if (isSize) {
                                for (var t in e) {
                                    if (e.hasOwnProperty(t) && (e[t] < 0)) {
                                        k[t] = -e[t];
                                    }
                                }
                            }
                            domain[i][0] = Math.min.apply(Math, k);
                            domain[i][1] = Math.max.apply(Math, k);
                        });
                        //When mnd is not bound ,only first measure will be visible.
                        var metaData = ChainUtils.buildMetaData(rowArray, rawData, fields);
                        if (!(isBullet || (mnd && mnd.length > 0))) {
                            metaData = [metaData[metaData.length - 1]];
                            domain = [domain[domain.length - 1]];
                        }
                        var result = {
                            values: returnArray.multiArray,
                            categorySum: ChainUtils.sumByCategory(returnArray.multiArray),
                            range: domain,
                            metaData: metaData
                        };
                        if(isBullet){
                            var values = calculateMaxValue(returnArray.measureArray, bindingName);
                            result.maxValue = values[1];
                            result.minValue = values[0];
                        }
                        
                        return result;
                    }
                }
            }
        };

        var parseMeasureNames = function(fields, bindings) {
            var mndBindName, array = [];
            var i, j;
            for (i in fields) {
                if (fields.hasOwnProperty(i)) {
                    for (j in fields[i]) {
                        if (fields[i].hasOwnProperty(j)) {
                            if (j === MEASURE_NAMES) {
                                mndBindName = fields[i][j];
                                break;
                            }
                        }
                    }
                }
            }
            for (i in bindings) {
                if (mndBindName.indexOf(bindings[i].feed) > -1) {
                    array.push(bindings[i].source);
                    break;
                }
            }
            return array;
        };

        flatTableChains.GetMeasureNames = function(rawData, fields, measureNamesDimension, bindings) {
            return {
                values: parseMeasureNames(fields, bindings),
                metaData: [{
                    id: MEASURE_NAMES
                }]
            };
        };

        flatTableChains.OnBindingFinished = function() {
            resetState();
        };
        flatTableChains.OnBindingStart = function() {
            resetState();
        };


        flatTableChains.extend = function(type, defaultChains) {
            var newChains = {};
            defaultChains.map(function(item) {
                newChains[type + item] = flatTableChains[item];
            });
            return newChains;
        };

        return flatTableChains;
    });
define('sap/viz/framework/binding/flatTableChains/XYChains',['sap/viz/framework/binding/flatTableChains/BaseChains'], function Setup(BaseChains) {
    var xyChains = {};
    var defaultChains =
        ['GetDimensionsFromFlattable',
            'GetMeasuresFromFlattable',
            'GetBindingSeries',
            'GetContext',
            'OnBindingFinished',
            'OnBindingStart'
        ];
    xyChains = BaseChains.extend('xy', defaultChains);

    return xyChains;
});
define('sap/viz/framework/binding/flatTableChains/YYChains',['sap/viz/framework/binding/flatTableChains/BaseChains'], function Setup(BaseChains) {
    var yyChains = {};
    var defaultChains =
        ['GetDimensionsFromFlattable',
            'GetMeasuresFromFlattable',
            'GetBindingSeries',
            'GetContext',
            'OnBindingFinished',
            'OnBindingStart'
        ];
    yyChains = BaseChains.extend('yy', defaultChains);

    return yyChains;
});
define('sap/viz/framework/binding/flatTableChains/XYYChains',['sap/viz/framework/binding/flatTableChains/BaseChains'], function Setup(BaseChains) {
    var xyyChains = {};
    var defaultChains =
        ['GetDimensionsFromFlattable',
            'GetMeasuresFromFlattable',
            'GetBindingSeries',
            'GetContext',
            'OnBindingFinished',
            'OnBindingStart'
        ];
    xyyChains = BaseChains.extend('xyy', defaultChains);

    return xyyChains;
});
define('sap/viz/framework/binding/flatTableChains/XXChains',['sap/viz/framework/binding/flatTableChains/BaseChains'], function Setup(BaseChains) {
    var xxChains = {};
    var defaultChains =
        ['GetDimensionsFromFlattable',
            'GetMeasuresFromFlattable',
            'GetContext',
            'OnBindingFinished',
            'OnBindingStart'
        ];
    xxChains = BaseChains.extend('xx', defaultChains);
    //TODO: we may not just support feeding key as categoryAxis and categoryAxis2.
    xxChains.xxBindingSeries = function(rawData, bindingInfo, measureNamesDimension, bindings, dimensions,
        bindingResults) {

        var series = [];
        var result = series[0] = [];
        var i, j, ca1Length, ca2Length;
        if (!bindingResults.categoryAxis2.values) {
            ca1Length = bindingResults.categoryAxis.rowArray.length;
            for (i = 0; i < ca1Length; i++) {
                if (!bindingResults.color.values[i]) {
                    continue;
                }
                result.push({
                    categoryAxis: bindingResults.categoryAxis.rowArray[i].join('/'),
                    color: bindingResults.color.values[i]
                });
            }
        } else {
            ca1Length = bindingResults.categoryAxis.rowArray.length;
            ca2Length = bindingResults.categoryAxis2.rowArray.length;
            for (i = 0; i < ca1Length; i++) {
                for (j = 0; j < ca2Length; j++) {
                    if (!bindingResults.color.values[i][j]) {
                        continue;
                    }
                    result.push({
                        categoryAxis: bindingResults.categoryAxis.rowArray[i].join('/'),
                        categoryAxis2: bindingResults.categoryAxis2.rowArray[j].join('/'),
                        color: bindingResults.color.values[i][j]
                    });
                }
            }
        }
        bindingResults.series = series;
    };
    return xxChains;
});
define('sap/viz/framework/binding/flatTableChains/TreeChains',['sap/viz/framework/common/util/TypeUtils', 'sap/viz/framework/binding/flatTableChains/BaseChains', 
        'sap/viz/framework/common/util/DataUtils'],
        function Setup(TypeUtils, BaseChains, DataUtils) {
    var treeChains = {};
    var defaultChains =
        ['GetDimensionsFromFlattable',
            'GetMeasuresFromFlattable',
            'GetContext',
            'OnBindingFinished',
            'OnBindingStart'
        ];
    treeChains = BaseChains.extend('treemap', defaultChains);

    var buildTree = function (bindingResults) {
        var titles = bindingResults.title.rowArray;
        var length = titles.length;
        var trees = {};
        var weight = bindingResults.weight? bindingResults.weight.values : [];
        var color = bindingResults.color ? bindingResults.color.values : [];
        var context = bindingResults.context ? bindingResults.context.values : [];
        for (var i = 0; i < length; i++) {
            var tmpTree, hierarchyLength = titles[i].length,
                item = titles[i], title;
            
            hierarchyLength = item.length;
            tmpTree = trees;

            for (var j = 0; j < hierarchyLength; j++) {
                title = DataUtils.getDimensionValue(item[j]);
                if (!tmpTree[title]) {
                    tmpTree[title] = {title:item[j]};
                }
                tmpTree = tmpTree[title];

                if (j !== hierarchyLength - 1) {
                    tmpTree.weight = tmpTree.weight || 0;
                    tmpTree.weight += weight[i] > 0 ? weight[i] : 0;
                    if (!tmpTree.children) {
                        tmpTree.children = {};    
                    }
                    tmpTree = tmpTree.children;
                } 
                else {
                    tmpTree.weight = weight[i];
                    tmpTree.color = color[i];
                    tmpTree.context  = context[i];
                    if(TypeUtils.isArray(tmpTree.weight)){
                        tmpTree.weight = tmpTree.weight[0];                
                    }
                    if(TypeUtils.isArray(tmpTree.color)){
                        tmpTree.color = tmpTree.color[0];                
                    }
                    if(TypeUtils.isArray(tmpTree.context)){
                        tmpTree.context = tmpTree.context[0];                
                    }
                }

            }
        }
        return trees;
    };

    var buildTreeMetadata = function(bindingResults) {
        var metaData = {};
        metaData.hierarchy = bindingResults.title ? bindingResults.title.metaData : [];
        metaData.color = bindingResults.color ? bindingResults.color.metaData : [];
        metaData.weight = bindingResults.weight ? bindingResults.weight.metaData : [];
        return metaData;
    };

    treeChains.treemapGetBindingSeries = function (rawData, dimensions, measures, context, bindingResults, 
            bindings, bindingDefinition) {
        var data = buildTree(bindingResults);
        bindingResults.series = data;
        var metaData = buildTreeMetadata(bindingResults);
        return {
            data: data,
            metaData: metaData
        };
    };
    return treeChains;
});

define('sap/viz/framework/binding/flatTableChains/PieChains',['sap/viz/framework/binding/flatTableChains/BaseChains'], function Setup(BaseChains) {
    var pieChains = {};
    var defaultChains =
        ['GetDimensionsFromFlattable',
            'GetMeasuresFromFlattable',
            'GetBindingSeries',
            'GetContext',
            'OnBindingFinished',
            'OnBindingStart'
        ];
    pieChains = BaseChains.extend('pie', defaultChains);

    return pieChains;
});
define('sap/viz/framework/binding/flatTableChains/BulletChains',[ 'sap/viz/framework/binding/flatTableChains/BaseChains',
         'sap/viz/framework/binding/flatTableChains/ChainUtils',
         'sap/viz/framework/common/util/NumberUtils', 'sap/viz/framework/common/util/TypeUtils'],
        function Setup(BaseChains, ChainUtils, NumberUtils, TypeUtils) {
    var bulletChains = {};
    var TYPENAME_DIMENSION = "Dimension";
    var TYPENAME_MEASURE = "Measure";
    var MEASURE_NAMES = "measureNames";
    var CONST_DIMENSION = 'Dimension';

    var CONST_COLUMN = 'trellisColumn';
    var CONST_PLAY = 'play';
    var CONST_ROW = 'trellisRow';
    var contextIdName = "_context_row_number";
    var defaultChains = ['GetDimensionsFromFlattable', 'GetMeasuresFromFlattable', 'GetBindingSeries',
        'GetContext', 'OnBindingFinished', 'OnBindingStart'
    ];

    var parseData = function(rawData, metadataId) {
        var data = rawData.dataInFields([ metadataId ]);
        for ( var i in data) {
            if (data.hasOwnProperty(i)) {
                data[i] = data[i].data[0];
            }

            // TODO: do we support flat table info?
            // if (data[i].info) {
            // data[i].info = data[i].info[0];
            // }

        }
        return data;
    };
    bulletChains = BaseChains.extend('bullet', defaultChains);
    // Follow the sequence of the feeding definition, data[][][][]


  

    
    var getBindingSeries = function(rawData, dimensions, measures, context, bindingResults, trellisInfo) {
        var arrayLength = ChainUtils.getArrayLength(bindingResults, dimensions);
        var series = {},
            seriesNum, categoryBinds, categoryMeta, seriesBinds = [],
            seriesMeta = [],
            measureBinds = [],
            measureMeta = [],
            contextMeta = [],
            categoryLength;
        if (context) {
            contextMeta = 'context';
        }
        for (var i in bindingResults) {
            if (bindingResults.hasOwnProperty(i) && bindingResults[i]) {
                if (i === 'categoryAxis') {
                    categoryBinds = bindingResults[i];
                    categoryMeta = i;
                } else if (measures.indexOf(i) > -1) {
                    measureBinds.push(bindingResults[i]);
                    measureMeta.push(i);
                    series[i] = [];
                }
            }
        }
        var  j, k, temp, l;
        series[contextMeta] = [];

        for (var categoryNum = 0; categoryNum < categoryBinds.rowArray.length; categoryNum++) {
            var actualIndex =categoryNum;

            if (bindingResults.context && bindingResults.context.values) {

                temp = bindingResults.context.values[categoryNum];
                series[contextMeta].push(temp);
                
            }

            for (k in measureBinds) {
                if (measureBinds.hasOwnProperty(k)) {
                    if (TypeUtils.isExist(measureBinds[k].values)) {
                        temp = measureBinds[k].values[actualIndex];
                        if (TypeUtils.isArray(temp)) {
                            
                            var values = [];
                            if(measureMeta[k] === "valueAxis"){
                                series[measureMeta[k]][categoryNum] = {values:values};
                                 
                            }else{
                                series[measureMeta[k]][categoryNum] = values;
                            }
                             
                        
                            for( i = 0; i < temp.length; i++){
                                values.push(temp[i]);
                            }
                        } else {
                            series[measureMeta[k]][categoryNum] = temp;
                        }
                    } 
                }
            }
        }
        
        if(trellisInfo){
            series.trellisRow = trellisInfo.trellisRow;
            series.trellisColumn = trellisInfo.trellisColumn;
        }
         
        bindingResults.series = series;
    };
    

  
    var getTrellisBindingSeries = function(rawData, dimensions, measures, context,
            bindingResults, bindings, bindingDefinition,
            rowDimension, columnDimension, rowLength, columnLength) {
            var isRowFirst = ChainUtils.checkRowFirst(bindings);
            var allDimensions = ChainUtils.getDimensions(bindingResults, bindingDefinition);
            var trellisBindItem = 2;
            var measureResults = ChainUtils.getMeasureResults(bindingResults, bindingDefinition);
            var contextResults = bindingResults.context;
            if (rowLength === 0) {
                ChainUtils.addTrellisRow(measureResults, bindingResults);
                if (contextResults) {
                    ChainUtils.addTrellisRow({
                        context: contextResults
                    }, bindingResults);
                }
                rowLength = 1;
                trellisBindItem = 1;
                isRowFirst = true;
            }
            if (columnLength === 0) {
                ChainUtils.addTrellisColumn(measureResults, bindingResults);
                if (contextResults) {
                    ChainUtils.addTrellisColumn({
                        context: contextResults
                    }, bindingResults);
                }
                columnLength = 1;
                trellisBindItem = 1;
            }
            var series = [];
            for (var i = 0; i < rowLength; i++) {
                for (var j = 0; j < columnLength; j++) {
                    var tmpBindingResult;
                    if (isRowFirst) {
                        tmpBindingResult = ChainUtils.buildNewBindingResult(allDimensions, measureResults,
                            contextResults, i, j, isRowFirst);
                    } else {
                        tmpBindingResult = ChainUtils.buildNewBindingResult(allDimensions, measureResults,
                            contextResults, j, i, isRowFirst);
                    }

                    var newDimensions = dimensions.slice(trellisBindItem);
                    tmpBindingResult.seriesType = bindingResults.seriesType;

                    var trellisInfo;
                    if (!series[i]) {
                        series[i] = [];
                    }
                    trellisInfo = {
                        trellisRow: rowDimension ? rowDimension.rowArray[i] : undefined,
                        trellisColumn: columnDimension ? columnDimension.rowArray[j] : undefined
                    };
                    getBindingSeries(rawData, newDimensions, measures, context, tmpBindingResult, trellisInfo);
                    series[i][j] = tmpBindingResult.series;
                }
            }
            bindingResults.series = series;
        };



  
    bulletChains.bulletGetBindingSeries = function(rawData, dimensions, measures, context,
            bindingResults, bindings, bindingDefinition) {
            var roleMap = ChainUtils.extractBindingDefinition(bindingDefinition);
            var rowDimension = bindingResults[roleMap[CONST_ROW]];
            var columnDimension = bindingResults[roleMap[CONST_COLUMN]];
          // var playDimension = bindingResults[roleMap[CONST_PLAY]];
            var rowLength = rowDimension ? rowDimension.rowArray.length : 0;
            var columnLength = columnDimension ? columnDimension.rowArray.length : 0;
            //var playLength = playDimension ? playDimension.rowArray.length : 0;

            if (rowLength === 0 && columnLength === 0) {
              //  if (playLength === 0) {
                getBindingSeries(rawData, dimensions, measures, context, bindingResults);
                //} else {
//                    getPlayBindingSeries(rawData, dimensions, measures, context,
//                        bindingResults, bindings, bindingDefinition, playDimension, playLength);
//                }
            } else {
                getTrellisBindingSeries(rawData, dimensions, measures, context, bindingResults, bindings,
                    bindingDefinition, rowDimension, columnDimension, rowLength, columnLength);
            }
        };

    return bulletChains;
});
define('sap/viz/framework/binding/FlatTableChains',['sap/viz/framework/binding/flatTableChains/XYChains',
    'sap/viz/framework/binding/flatTableChains/YYChains',
    'sap/viz/framework/binding/flatTableChains/XYYChains',
    'sap/viz/framework/binding/flatTableChains/XXChains',
    'sap/viz/framework/binding/flatTableChains/TreeChains',
    'sap/viz/framework/binding/flatTableChains/PieChains',
    'sap/viz/framework/binding/flatTableChains/BulletChains'],
      function Setup(XYChains, YYChains, XYYChains, XXChains, TreeChains, PieChains, BulletChains) {


    return [].concat(XYChains, YYChains, XYYChains, XXChains, TreeChains, PieChains, BulletChains);
});

define('sap/viz/framework/binding/crosstableChains/BaseChains',['sap/viz/framework/common/util/TypeUtils'], function Setup(TypeUtils) {

    var crosstableChains = {};
    // {
    //      "analysisAxis" : [{
    //          "index" : 1,
    //          "data" : [{
    //              "type" : "Dimension",
    //              "name" : "Product",
    //              "values" : ["Car", "Truck", "Motorcycle", "Bicycle"]
    //          }]
    //      }, {
    //          "index" : 2,
    //          "data" : [{
    //              "type" : "Dimension",
    //              "name" : "Country",
    //              "values" : ["China", "USA"]
    //          }, {
    //              "type" : "Dimension",
    //              "name" : "Year",
    //              "values" : ["2001", "2001"]
    //          }]
    //      }],
    //      "measureValuesGroup" : [{
    //          "index" : 1,
    //          "data" : [{
    //              "type" : "Measure",
    //              "name" : "Profit",
    //              "values" : [[25, 136, 23, 116], [58, 128, 43, 73]]
    //          }, {
    //              "type" : "Measure",
    //              "name" : "Revenue",
    //              "values" : [[50, 236, 43, 126], [158, 228, 143, 183]]
    //          }]
    //      }]
    //  }

    // [{
    //   "feedId" : "primaryValues",
    //     "binding" : [{
    //        "type" : "measureValuesGroup",
    //        "index" : 1
    //     }]
    //  }, {
    //   "feedId" : "regionColor",
    //      "binding" : [{
    //        "type" : "analysisAxis",
    //        "index" : 2
    //      }, {
    //        "type" : "measureNamesDimension"
    //      }]
    //  }, {
    //   "feedId" : "axisLabels",
    //     "binding" : [{
    //        "type" : "analysisAxis",
    //        "index" : 1
    //     }]
    // }]

    var handleMND = function(categoryLength, MNDItems) {
        var length = categoryLength;
        var mndArray = [];
        MNDItems.map(function(item) {
            for (var i = 0; i < length; i++) {
                mndArray.push(item);
            }

        });
        return mndArray;
    };
    var parseDimensionsFromAA = function(aa, dimensionArray, metaData) {
        if (!TypeUtils.isArray(aa.data)) {
            return;
        }
        aa.data.map(function(data) {
            dimensionArray.push(data.values);
            metaData.push({
                id: data.id ? data.id : data.name,
                name: data.name,
                type: data.type
            });
        });
    };

    var parseMeasuresFromAA = function(aa) {
        if (!TypeUtils.isArray(aa.data)) {
            return [];
        }
        var metaData = [];
        var measureArray = [];
        aa.data.map(function(data) {
            if (measureArray.length === 0) {
                measureArray = data.values;
            } else {
                data.values.map(function(value) {
                    measureArray.push(value);
                });
            }
            metaData.push({
                id: data.name,
                name: data.name,
                type: data.type
            });
        });
        return {
            data: measureArray,
            meta: metaData
        };
    };
    var duplicateArrayForMND = function(sourceArray, times) {
        var targetArray = [];
        sourceArray.map(function(data, index) {
            var targetData = [];
            for (var i = 0; i < times; i++) {
                targetData = targetData.concat(data);
            }
            targetArray[index] = targetData;
        });
        return targetArray;
    };

    var handleDimension = function(ct, feedings, MND) {
        var length = feedings.length;
        var category2DArray = [];
        var metaData = [];
        var hasMND = false;
        var MNDItems = MND;
        var MNDPosition = 0;
        for (var i = 0; i < length; i++) {
            var feed = feedings[i];
            if (feed.type === "measureNamesDimension") {
                hasMND = true;
                if (category2DArray.length > 0) {
                    var mndArray = handleMND(category2DArray[0].length, MNDItems);
                    category2DArray = duplicateArrayForMND(category2DArray, MNDItems.length);
                    category2DArray.push(mndArray);
                    metaData.push({
                        id: 'measureNamesDimension',
                        values: mndArray,
                        type: 'Dimension'
                    });
                } else {
                    MNDPosition = i;
                    category2DArray.push(MNDItems);
                    metaData.push({
                        id: 'measureNamesDimension',
                        values: MNDItems,
                        type: 'Dimension'
                    });
                }
            } else {
                var categoryArray = [];
                var aa = ct.analysisAxis[feed.index - 1];
                parseDimensionsFromAA(aa, category2DArray, metaData);
                if (hasMND) {
                    category2DArray = duplicateArrayForMND(category2DArray, MNDItems.length);
                    category2DArray[MNDPosition] = handleMND(category2DArray[0].length, MNDItems);
                    metaData[MNDPosition].values = category2DArray[MNDPosition];
                }
                hasMND = false;
            }
        }
        return {
            values: category2DArray,
            metaData: metaData,
            rowArray: rotateArray(category2DArray)
        };

    };

    var SimpleHandleMeasure = function(ct, feedings) {
        var length = feedings.length;
        var measure2DArray = [];
        for (var i = 0; i < length; i++) {
            var feed = feedings[i];
            if (Number(feed.index) > 0) {
                measure2DArray = parseMeasuresFromAA(ct.measureValuesGroup[feed.index - 1]);
            }
        }
        return measure2DArray;
    };

    var rotateArray = function(categoryArray) {
        var returnArray = [];
        if (categoryArray.length) {
            var rowLength = categoryArray.length;
            var columnLength = categoryArray[0].length;
            var i, j;
            for (j = 0; j < columnLength; j++) {
                returnArray[j] = [];
            }
            for (i = 0; i < rowLength; i++) {
                var rowValue = categoryArray[i];
                for (j = 0; j < columnLength; j++) {
                    returnArray[j].push(rowValue[j]);
                }
            }
        }
        return returnArray;
    };

    crosstableChains.GetDimensionsFromCrosstable = function(rawData, bindingInfo, measureNamesDimension) {

        var result = handleDimension(rawData._crosstableDataset._dataSet, bindingInfo, measureNamesDimension);
        return result;

    };

    //TODO: 
    //1.when aa1 is not bound to axis and aa2 is not bound to regioncolor.
    //2.When 2 or more aa group is bound to single feeding object.
    crosstableChains.GetMeasuresFromCrosstable = function(rawData, bindingInfo) {

        var measureArray = SimpleHandleMeasure(rawData._crosstableDataset.data(), bindingInfo);
        var domain = [];
        measureArray.data.forEach(function(e, i) {
            domain[i] = [];
            domain[i][0] = Math.min.apply(Math, e);
            domain[i][1] = Math.max.apply(Math, e);
        });
        var array = rotateArray(measureArray.data);
        return {
            values: array,
            categorySum: sumByCategory(array),
            range: domain,
            metaData: measureArray.meta
        };

    };
    var sumByCategory = function (array) {
        var results = [];
        var total = 0;
        array.map(function (item, index) {
            var sum = 0;
            if (TypeUtils.isArray(item)) {
                item.map(function (item) {
                    if(TypeUtils.isArray(item) || !TypeUtils.isNumber(item)){
                        return;
                    }
                    if (sum === 0) {
                        sum = item;
                    } else if (sum < 0 && item > 0) {
                        sum = item;
                    } else if (sum * item > 0) {
                        sum += item;
                    }
                });
            } else {
                sum = item;
            }
            results[index] = sum;
        });

        return results;
    };
    crosstableChains.GetColorRangeFromCrosstable = function(rawData, bindingInfo, measureNamesDimension) {
        var result = handleDimension(rawData._crosstableDataset._dataSet, bindingInfo, measureNamesDimension);
        return result;
    };


    crosstableChains.extend = function(type, defaultChains) {
        var newChains = {};
        defaultChains.map(function(item) {
            newChains[type + item] = crosstableChains[item];
        });
        return newChains;
    };


    return crosstableChains;
});
define('sap/viz/framework/binding/crosstableChains/XYChains',['sap/viz/framework/binding/crosstableChains/BaseChains'], function Setup(BaseChains) {
    var xyChains = {};
    var defaultChains =
        ['GetDimensionsFromCrosstable',
            'GetMeasuresFromCrosstable',
        ];
    xyChains = BaseChains.extend('xy', defaultChains);

    return xyChains;
});
define('sap/viz/framework/binding/crosstableChains/YYChains',['sap/viz/framework/binding/crosstableChains/BaseChains'], function Setup(BaseChains) {
    var yyChains = {};
    var defaultChains =
        ['GetDimensionsFromCrosstable',
            'GetMeasuresFromCrosstable'
        ];
    yyChains = BaseChains.extend('yy', defaultChains);

    return yyChains;
});
define('sap/viz/framework/binding/crosstableChains/XYYChains',['sap/viz/framework/binding/crosstableChains/BaseChains'], function Setup(BaseChains) {
    var xyyChains = {};
    var defaultChains =
        ['GetDimensionsFromCrosstable',
            'GetMeasuresFromCrosstable'
        ];
    xyyChains = BaseChains.extend('xyy', defaultChains);

    return xyyChains;
});
define('sap/viz/framework/binding/crosstableChains/XXChains',['sap/viz/framework/binding/crosstableChains/BaseChains'], function Setup(BaseChains) {
    var xxChains = {};
    var defaultChains =
        ['GetDimensionsFromCrosstable',
            'GetMeasuresFromCrosstable'
        ];
    xxChains = BaseChains.extend('xx', defaultChains);

    return xxChains;
});
define('sap/viz/framework/binding/crosstableChains/TreeChains',['sap/viz/framework/binding/crosstableChains/BaseChains'], function Setup(BaseChains) {
    var treeChains = {};
    var defaultChains =
        ['GetDimensionsFromCrosstable',
            'GetMeasuresFromCrosstable'
        ];
    treeChains = BaseChains.extend('treemap', defaultChains);
    return treeChains;
});
define('sap/viz/framework/binding/crosstableChains/PieChains',['sap/viz/framework/binding/crosstableChains/BaseChains'], function Setup(BaseChains) {
    var pieChains = {};
    var defaultChains =
        ['GetDimensionsFromCrosstable',
            'GetMeasuresFromCrosstable'
        ];
    pieChains = BaseChains.extend('pie', defaultChains);

    return pieChains;
});
define('sap/viz/framework/binding/CrosstableChains',['sap/viz/framework/binding/crosstableChains/XYChains', 
    'sap/viz/framework/binding/crosstableChains/YYChains',
    'sap/viz/framework/binding/crosstableChains/XYYChains',
    'sap/viz/framework/binding/crosstableChains/XXChains',
    'sap/viz/framework/binding/crosstableChains/TreeChains', 
    'sap/viz/framework/binding/crosstableChains/PieChains'
], function Setup(XYChains, YYChains, XYYChains, XXChains, TreeChains, PieChains) {


    return [].concat(XYChains, YYChains, XYYChains, XXChains, TreeChains, PieChains);
});
define('sap/viz/framework/binding/defaultChains',['sap/viz/framework/binding/FlatTableChains', 'sap/viz/framework/binding/CrosstableChains',
        'sap/viz/framework/binding/flatTableChains/BaseChains'
    ], function Setup(FlatTableChains,
        CrosstableChains, BaseChains) {
    var defaulChains = [];

    var addDefaultChains = function(id, chainResolver) {
        defaulChains.push({
            id: id,
            dataResolver: chainResolver
        });
    };


    FlatTableChains.map(function(item) {
        for (var i in item) {
            if (item.hasOwnProperty(i)) {
                addDefaultChains(i, item[i]);
            }
        }
    });

    CrosstableChains.map(function(item) {
        for (var i in item) {
            if (item.hasOwnProperty(i)) {
                addDefaultChains(i, item[i]);
            }
        }
    });

    addDefaultChains('GetBindingSeries', BaseChains.GetBindingSeries);

    return defaulChains;
});
define('sap/viz/framework/chartmodel/ContextBuilder',[
    'sap/viz/framework/chartmodel/DataPoint',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/DataUtils',
    'sap/viz/framework/common/util/ObjectUtils'
], function(DataPoint, TypeUtils, DataUtils, ObjectUtils){

    var MND = "measureNames";

    function buildContext(bindingResults){
        if (bindingResults.seriesType === 'bullet') {
            return buildBullet(bindingResults);
        }
        if (typeof bindingResults.series === "object" && !bindingResults.series.hasOwnProperty('length')) {
            return buildTreeMap(bindingResults);
        }
        var builder = buildBasic;
        if (bindingResults.valueAxis && bindingResults.categoryAxis) {
            if (bindingResults.seriesType === 'percentage') {
                builder = buildPercentage;
            } else {
                builder = buildCSV;
            }
        }
        return _buildContext(bindingResults.series, builder, bindingResults);
    }

    function _buildContext(series, builder, bindingResults, addrStack, dps){
        dps = dps || {};
        addrStack = addrStack || [];
        for (var i = 0, len = series.length; i < len; ++i) {
            var item = series[i];
            if (item) {
                var address = [i].concat(addrStack);
                if (TypeUtils.isArray(item)) {
                    _buildContext(item, builder, bindingResults, address, dps);
                } else {
                    var context = builder(bindingResults, item, i);
                    var dp = new DataPoint(context, address, bindingResults);
                    item.dp = dp;
                    dps[dp.id] = dp;
                }
            }
        }
        return dps;
    }

    function buildBasic(data, value) {
        var context = {};
        for (var p in value) {
            if (value.hasOwnProperty(p)) {
                buildContextField(context, data, p, value);
            }
        }
        return context;
    }

    function buildCSV(data, value, categoryIndex) {
        var dimValue = {};
        for (var p in value) {
            if (p !== "valueAxis" && p !== "valueAxis2") {
                dimValue[p] = value[p];
            }
        }
        var context = buildBasic(data, dimValue);
        var categoryAxis = data.categoryAxis;
        for (var i = 0; i < categoryAxis.values.length; i++) {
            setContextValue(context, categoryAxis.metaData[i], categoryAxis.values[i][categoryIndex]);
        }
        if (!context[MND]) {
            var valueAxisName = value.hasOwnProperty('valueAxis') ? 'valueAxis' :
                value.hasOwnProperty('valueAxis2') ? 'valueAxis2' : null;
            if(valueAxisName){
                var metadata = data[valueAxisName].metaData;
                if(metadata && metadata.length === 1){
                    context[MND] = metadata[0].id;
                }
            }
        }
        if (context[MND]) {
            context[context[MND]] = value.hasOwnProperty('valueAxis') ? value.valueAxis : value.valueAxis2;
        }
        return context;
    }

    function buildPercentage(data, value, categoryIndex) {
        var context = buildCSV(data, value, categoryIndex);
        var measureNames = context[MND];
        if (measureNames && context[measureNames]) {
            context[measureNames] = context[measureNames].value || context[measureNames];
        }
        return context;
    }

    function buildBullet(data){
        var dps = {};

        var trellisRow = data.trellisRow;
        var trellisCol = data.trellisColumn;
        var rowLength = trellisRow && trellisRow.rowArray ? trellisRow.rowArray.length : 0;
        var colLength = trellisCol && trellisCol.rowArray ? trellisCol.rowArray.length : 0;
        var categoryLen = data.categoryAxis.rowArray.length;
        var fields = [
            'categoryAxis',
            'valueAxis',
            'targetValues',
            'forecastValues',
            'context'
        ];
        var i, j, k, rowIndex, colIndex;
        var series, metaData, values, field, context, value, dp, name;
        if(rowLength === 0 && colLength === 0){
            series = data.series;
            for (i = 0; i < categoryLen; ++i) {
                context = {};
                for (j = 0; j < fields.length; ++j) {
                    
                    field = fields[j];
                    if (data[field]) {
                        metaData = data[field].metaData;
                        values = data[field].values;
    
                        if (metaData && values && values.length > 0) {
                            if (field === 'categoryAxis') {
                                for (k = 0; k < metaData.length; ++k) {
                                    setContextValue(context, metaData[k], values[k][i]);
                                }
                            } else {
                                value = values[i];
                                for (k = 0; k < metaData.length; ++k) {
                                    name = metaData[k].id;
                                    if(TypeUtils.isArray(value)){
                                        context[name] = value[k];
                                    }else{
                                        context[name] = value;
                                    }
                                }
                            }
                        }
                    }
                }
                dp = new DataPoint(context, [i], data);
                dps[dp.id] = dp;
                series["valueAxis"][i].dp = dp;
                  
            }
        }else{
            fields = [
                'valueAxis',
                'targetValues',
                'forecastValues',
                'context'
            ];
            rowLength = data.series.length;
            colLength = data.series[0].length;
            for(rowIndex = 0; rowIndex < rowLength; ++rowIndex){

                
                for(colIndex = 0; colIndex < colLength; ++ colIndex){

                    series = data.series[rowIndex][colIndex];
                    if(series.valueAxis.length === 0){
                        continue;
                    }
                    for (i = 0; i < categoryLen; ++i) {


                        var realContext = {};
                        for (j = 0; j < fields.length; ++j) {
                            
                            field = fields[j];
                            if (data[field] && data[field].values && series[field][i]) {
                                metaData = data[field].metaData;
                                if(field === "valueAxis"){
                                    values = series[field][i].values;
                                } else {
                                    values = series[field][i];
                                }
            
                                if (metaData && values) {
                                    
                                    for (k = 0; k < metaData.length; ++k) {
                                        name = metaData[k].id;
                                        if(TypeUtils.isArray(values)){
                                            realContext[name] = values[k];
                                        }else{
                                            realContext[name] = values;
                                        }
                                    }
                                    
                                    
                                }
                            }
                        }
                        if(!TypeUtils.isEmptyObject(realContext)){
                            if(series.trellisRow){
                                metaData = trellisRow.metaData;
                                values = series.trellisRow;
                     
                                for (k = 0; k < metaData.length; ++k) {
                                    setContextValue(realContext, metaData[k], values[k]);
                                }
                            }
                            
                            if(series.trellisColumn){
                                metaData = trellisCol.metaData;
                                values = series.trellisColumn;
                     
                                for (k = 0; k < metaData.length; ++k) {
                                    setContextValue(realContext, metaData[k], values[k]);
                                }
                            }
                            metaData = data.categoryAxis.metaData;
                            values = data.categoryAxis.values;
                            for (k = 0; k < metaData.length; ++k) {
                                setContextValue(realContext, metaData[k], values[k][i]);
                            }
                            dp = new DataPoint(realContext, [i], data);
                            dps[dp.id] = dp;
                            series["valueAxis"][i].dp = dp;
                        }
                    
                    }
                    
                }
            }
        }
        // make sure series is a 2d array, to align with other charts
       // data.series = [series];
        return dps;
    }

    function buildTreeMap(bindingResults){
        var result = {};
        _buildTreeMap(bindingResults.series, 0, bindingResults, {}, [], result);
        return result;
    }

    function _buildTreeMap(items, level, data, parentCtx, addrStack, output) {
        var key, i = 0, address, context, dp, item, maxLevel;
        for (key in items) {
            if (items.hasOwnProperty(key)) {
                item = items[key];
                address = [i].concat(addrStack);
                context = buildTreeMapItemContext(data, item, level, parentCtx);
                dp = new DataPoint(context, address, data, 'tree');
                item.dp = dp;
                if(item.children){
                    maxLevel = _buildTreeMap(item.children, level + 1, data, context, address, output);
                }else{
                    output[dp.id] = dp;
                    maxLevel = level;
                }
                context.levelNum = maxLevel + 1;
                i++;
            }
        }
        return maxLevel;
    }

    function buildTreeMapItemContext(data, value, level, parentCtx) {
        var ctx = ObjectUtils.extend(true, {}, parentCtx);
        for (var p in value) {
            if (value.hasOwnProperty(p)) {
                if (!data[p] || !data[p].metaData || !data[p].metaData[0]) {
                    continue;
                }
                var v = value[p], metaData;
                if (p === "title" ) {
                    metaData = data[p].metaData[level];
                    ctx[metaData.id] = DataUtils.getDimensionValue(v);
                    if (typeof v === 'object') {
                        ctx[metaData.id + DataUtils.DIMENSION_DISPLAYNAME_SUFFIX] =
                            DataUtils.getDimensionDisplayName(v);
                    }
                } else if (!value.children) {
                    metaData = data[p].metaData[0];
                    ctx[metaData.id] = v;
                }
            }
        }
        return ctx;
    }

    function buildContextField(context, data, property, value){
        var prop = data[property];
        if (prop && prop.metaData && prop.metaData[0]) {
            var v = value[property];
            var metaData = prop.metaData;
            if (TypeUtils.isArray(v)) {
                for(var i = 0, len = v.length; i < len; ++i) {
                    if(metaData[i] && metaData[i].id) {
                        setContextValue(context, metaData[i], v[i]);
                    }
                }
            } else {
                setContextValue(context, metaData[0], v);
            }
        }
    }

    function getBindingContext(binding) {

        var bindingContexts = [];

        var metaDataIds = binding.metaData.map(function(d) {
            return d.id;
        });

        var domains = binding.scale.getDomain();

        for (var index = 0; index < domains.length; index++) {

            var context = {};
            var domain = domains[index];

            for (var itemIndex = 0; itemIndex < domain.length; itemIndex++) {
                context[metaDataIds[itemIndex]] = domain[itemIndex];
            }
            buildContextValue(context);
            bindingContexts.push(context);
        }

        return bindingContexts;
    }

    function buildContextValue(context) {
        var value;
        for (var property in context) {
            if (context.hasOwnProperty(property) && context[property]) {
                value = context[property];
                if (!DataUtils.isPlainValue(value)) {
                    context[property] = DataUtils.getDimensionValue(value);
                    context[property + DataUtils.DIMENSION_DISPLAYNAME_SUFFIX] =
                        DataUtils.getDimensionDisplayName(value);
                }
            }
        }
    }

    function setContextValue(context, metaData, value){
        if (metaData && metaData.id) {
            if (metaData.type === "Dimension" && !DataUtils.isPlainValue(value)) {
                context[metaData.id] = DataUtils.getDimensionValue(value);
                context[metaData.id + DataUtils.DIMENSION_DISPLAYNAME_SUFFIX] =
                    DataUtils.getDimensionDisplayName(value);
            } else {
                context[metaData.id] = value;
            }
        }
    }

    function buildSeriesContext(dataModel, seriesIndex, keys){
        var context = {};
        var series = dataModel.series[seriesIndex];
        for(var i = 0; i < series.length; ++i){
            var item = series[i];
            if(item){
                for(var j = 0; j < keys.length; ++j){
                    var key = keys[j];
                    if(item.hasOwnProperty(key)){
                        buildContextField(context, dataModel, key, item);
                    }
                }
                return context;
            }
        }
        return null;
    }

    return {
        build: buildContext,
        buildSeriesContext: buildSeriesContext,
        getBindingContext: getBindingContext
    };
});

define('sap/viz/framework/chartmodel/DataModel',[
    'sap/viz/framework/chartmodel/ContextBuilder',
    'sap/viz/framework/common/util/TypeUtils'
], function(ContextBuilder, TypeUtils) {

    function DataModel(bindingResults, rawData) {
        this._freshScale = true;
        this._bindingResults = bindingResults;
        this._dataPoints = ContextBuilder.build(bindingResults);
        this._rawData = rawData;
        for (var key in bindingResults) {
            if (bindingResults.hasOwnProperty(key)) {
                this[key] = generateGetFn(this, key, bindingResults[key]);
            }
        }
    }

    /**
     * Get a data point by id
     * @return {DataPoint}
     */
    DataModel.prototype.getDataPoint = function(id){
        return this._dataPoints[id];
    };

    /**
     * Get an array of data points by address or customized condition
     * @param {Array|Function} - addr
     * @return {Array}
     */
    DataModel.prototype.getDataPoints = function(addr){
        var results = [];
        var args = TypeUtils.isArray(addr) || TypeUtils.isFunction(addr) ? addr : arguments;
        var dps = this._dataPoints;
        var id;
        if (TypeUtils.isFunction(addr)) {
            for (id in dps){
                if (dps.hasOwnProperty(id) && addr(dps[id])) {
                    results.push(dps[id]);
                }
            }
        } else {
            for (id in dps){
                if (dps.hasOwnProperty(id)) {
                    var dpAddr = dps[id].address();
                    var match = 1;
                    for (var i = 0; i < args.length; ++i) {
                        var idx = args[i];
                        if (typeof idx === 'number' && idx >= 0 && dpAddr[i] !== idx) {
                            match = 0;
                            break;
                        }
                    }
                    if (match) {
                        results.push(dps[id]);
                    }
                }
            }
        }
        return results;
    };

    DataModel.prototype.destroy = function(){
        this._dataPoints = null;
        this._freshScale = null;
        
        for (var key in this._bindingResults) {
            if (this._bindingResults.hasOwnProperty(key)) {
                this["_" + key] = null;
                this[key] = null;
            }
        }
        
        this._bindingResults = null;
        this._rawData = null;
    };

    DataModel.prototype.isNeedRefreshScale = function() {
        return this._freshScale;
    };
    
    DataModel.prototype.updateSeriesIndex = function(index) {
        
        if (this.allSeries == null) {
            return;
        }
        
        var allSeries = this.allSeries();
        this._bindingResults.series = allSeries[index];
        this._series = allSeries[index];
        if(this.allCategorySum)
        {
            var allCategorySum = this.allCategorySum();
            this._valueAxis.categorySum = allCategorySum[index];
        }
        if(this.allCategorySum2)
        {
            var allCategorySum2 = this.allCategorySum2();
            this._valueAxis2.categorySum = allCategorySum2[index];
        }
        this._dataPoints = ContextBuilder.build(this._bindingResults);
        this.setNeedRefreshScale(false);
    };
    
    DataModel.prototype.setNeedRefreshScale = function(value) {
        this._freshScale = value;
    };
    
    // Utility -------------------------------------
    function generateGetFn(model, key, values) {
        model['_' + key] = values;
        var fn = function() {
            return model['_' + key];
        };
        return fn;
    }

    return DataModel;
});

define('sap/viz/framework/binding/bindingValidationUtil',['sap/viz/framework/common/util/TypeUtils', 'sap/viz/framework/common/lang/LangManager',
    'sap/viz/framework/common/util/FunctionUtils'
], function Setup(TypeUtils, LangManager, FunctionUtils) {
    var bindingValidationUtil = {};

    var maxMinCheck = function(bind, def) {
        if (!bind) {
            return def.min === 0;
        }
        return bind.length <= def.max && bind.length >= def.min;
    };

    var MNDCheck = function(bind, def) {
        var acceptMND = def.acceptMND;
        var valid = true;
        var length = bind.length;
        for (var i = 0; i < length; i++) {
            if (bind[i].measureNames && !acceptMND) {
                return false;
            }
        }
        return true;
    };

    var metaCheck = function(data, bind, def) {
        var length = bind.length;
        for (var i = 0; i < length; i++) {
            if (!bind[i].measureNames) {
                var metadata = data.metadata(bind[i])[0];
                if (!metadata || metadata.semanticType != def.type) {
                    return false;
                }
            }
        }
        return true;
    };

    var allDimensionCheck = function(data, items) {
        var dimensions = data.dimensions();
        for (var i = 0, length = dimensions.length; i < length; i++) {
            if (!items[dimensions[i]]) {
                return false;
            }
        }
        return true;
    };


    bindingValidationUtil.acceptable = function(flatTable, flatTableFeedingDefinition, flatTableBinding, chartType) {

        if (!flatTableBinding) {
            FunctionUtils.error(LangManager.getLogMessage('IDS_ERROR_INVALID_BINDING'));
        }

        var length, i, j, k;
        var allBindingDimensions = [];
        var bindings = {};
        var allItems = {};
        var mndBind = [],
            definition;
        var trellisInFlatTableFeedingDef = false;
        var indexTrellis = -1;
        var context = flatTable.getContext();

        var feedingDefinitionObject = {};
        for (i = 0, length = flatTableFeedingDefinition.length; i < length; i++) {
            definition = flatTableFeedingDefinition[i];
            if (definition.type === 'Measure' && definition.role === 'layout') {
                mndBind.push(definition.id);
            }
            if (!feedingDefinitionObject.hasOwnProperty(definition.id)) {
                feedingDefinitionObject[definition.id] = true;
            }
        }

        for (i = flatTableBinding.length - 1; i >= 0; --i) {
            if (!feedingDefinitionObject.hasOwnProperty(flatTableBinding[i].feed) && flatTableBinding[i].feed !==
                "bubbleHeight") {
                FunctionUtils.error(LangManager.getLogMessage('IDS_ERROR_INVALID_BINDING'));
            }
            if (flatTableBinding[i].source === undefined || flatTableBinding[i].source.length === 0) {
                flatTableBinding.splice(i, 1);
            } else if (flatTableBinding[i].feed.indexOf("trellisRow") != -1 ||
                flatTableBinding[i].feed.indexOf("trellisColumn") != -1) {
                if (indexTrellis != -1) {
                    indexTrellis = i;
                }
                trellisInFlatTableFeedingDef = true;
            }
        }
        if ((chartType.indexOf("trellis") != -1 && !trellisInFlatTableFeedingDef) ||
            (chartType.indexOf("trellis") == -1 && trellisInFlatTableFeedingDef)) {
            if (indexTrellis != -1) {
                FunctionUtils.error(LangManager.getLogMessage('IDS_ERROR_INVALID_BINDING',
                    flatTableFeedingDefinition[indexTrellis].id));
            } else {
                FunctionUtils.error(LangManager.getLogMessage('IDS_ERROR_INVALID_BINDING'));
            }
        }

        for (i in flatTableBinding) {
            if (flatTableBinding.hasOwnProperty(i)) {
                bindings[flatTableBinding[i].feed] = flatTableBinding[i].source;
                length = flatTableBinding[i].source.length;
                var sources = {};
                for (j = 0; j < length; j++) {
                    var item = flatTableBinding[i].source[j];
                    if (sources.hasOwnProperty(item)) {
                        FunctionUtils.error(LangManager.getLogMessage('IDS_ERROR_INVALID_BINDING'));
                    } else {
                        sources[item] = 1;
                    }
                    if (item.measureNames) {
                        if (allItems['MND']) {
                            FunctionUtils.error(LangManager.getLogMessage(
                                'IDS_ERROR_DIMENSIONS_OR_MEASURES_DUPLICATED_BINDING'));
                        }
                        allItems['MND'] = true;
                        if (mndBind.length !== item.measureNames.length) {
                            FunctionUtils.error(LangManager.getLogMessage(
                                'IDS_ERROR_INVALID_BINDING', flatTableBinding[i].source[j]));
                        }
                        for (k = 0; k < mndBind.length; k++) {
                            if (item.measureNames.indexOf(mndBind[k]) < 0) {
                                FunctionUtils.error(LangManager.getLogMessage(
                                    'IDS_ERROR_INVALID_BINDING', flatTableBinding[i].source[j]));
                            }
                        }
                    } else {
                        /*
                        if (allItems[item]) {
                            FunctionUtils.error(LangManager.getLogMessage(
                                'IDS_ERROR_DIMENSIONS_OR_MEASURES_DUPLICATED_BINDING'));
                        }
                        */
                        allItems[item] = true;
                    }
                }
            }
        }

        if (!allDimensionCheck(flatTable, allItems) && !(/bubble|scatter/.test(chartType))) {
            //for bubble and scatter, do not check full dimensions
            FunctionUtils.error(LangManager.getLogMessage('IDS_ERROR_DIMENSIONS_INCOMPLETE_BINDING'));
        }

        for (i = 0, length = flatTableFeedingDefinition.length; i < length; i++) {
            definition = flatTableFeedingDefinition[i];
            var id = definition.id;
            var type = definition.type;
            var oneFeedDimensionsOrMeasures = [];
            var bind = bindings[id];

            if (!maxMinCheck(bind, definition)) {
                FunctionUtils.error(LangManager.getLogMessage('IDS_ERROR_NOT_MEET_NUMBER_OF_FEED', definition.id));
            }
            if (bind) {
                if (!MNDCheck(bind, definition)) {
                    FunctionUtils.error(LangManager.getLogMessage('IDS_ERROR_INVALID_BINDING', definition.id));
                }
                if (!metaCheck(flatTable, bind, definition)) {
                    FunctionUtils.error(LangManager.getLogMessage('IDS_ERROR_FEED_NOT_ACCEPT_DATA', bind));

                }
            }
        }

        return true;
    };

    return bindingValidationUtil;
});
define('sap/viz/framework/binding/BindingManager',['sap/viz/framework/common/util/TypeUtils', 'sap/viz/framework/common/util/FunctionUtils',
    'sap/viz/framework/binding/defaultChains',
    'sap/viz/framework/scale/ScaleManager', 'sap/viz/framework/chartmodel/DataModel',
    'sap/viz/framework/common/util/ArrayUtils',
    'sap/viz/framework/common/util/ObjectUtils', 'sap/viz/framework/binding/bindingValidationUtil',
    'sap/viz/framework/common/lang/LangManager'
], function Setup(TypeUtils, FunctionUtils, defaultChains,
    ScaleManager, DataModel, ArrayUtils, ObjectUtils, bindingValidationUtil, LangManager) {

    var BindingManager = {};
    var BindingRepository = {};
    var bindingSequence = [];
    var measures = [];
    var dimensions = [];
    var flatTableDefaultChain = {
        dimension: 'GetDimensionsFromFlattable',
        measure: 'GetMeasuresFromFlattable'
    };
    var crossTableDefaultChain = {
        dimension: 'GetDimensionsFromCrosstable',
        measure: 'GetMeasuresFromCrosstable'
    };
    var MEASURE_NAMES = "measureNames",
        LAYOUT = "layout",
        TYPE_DIMENSION = "Dimension";
    var roles = {};
    var chartType;

    var bindingDefinition = null;
    var roleMap = {};

    BindingManager.getInstance = function(def) {
        bindingDefinition = def;
        bindingDefinition.map(function(item) {
            roleMap[item.id] = item.role;
        });
        return this;
    };

    BindingManager.registerChain = function(id, dataResolver) {

        if (arguments.length < 2) {
            FunctionUtils.error('need at least 2 arguments');
        }
        if (BindingRepository[id]) {
            FunctionUtils.error('already exist');
        }
        BindingRepository[id] = dataResolver;
    };

    BindingManager.unRegisterChain = function(id) {
        delete BindingRepository[id];
    };

    BindingManager.getChainResvolerById = function(id) {
        return BindingRepository[id];
    };

    BindingManager.getCurrentFeedRole = function() {
        return roles;
    };

    var getMeasureNamesFromFlatTable = function(bindings) {
        var mndBindName;
        var i, j;
        for (i in bindings) {
            if (bindings.hasOwnProperty(i)) {
                for (j in bindings[i].source) {
                    if (bindings[i].source.hasOwnProperty(j)) {
                        if (bindings[i].source[j][MEASURE_NAMES]) {
                            mndBindName = bindings[i].source[j][MEASURE_NAMES];
                            break;
                        }
                    }
                }
            }
        }
        var measureNamesDimension = [];
        for (i in bindings) {
            if (bindings.hasOwnProperty(i)) {
                if (!mndBindName) {
                    break;
                }
                if (mndBindName.indexOf(bindings[i].feed) > -1) {
                    bindings[i].source.forEach(function(e) {
                        measureNamesDimension.push(e);
                    });
                }
            }
        }
        return measureNamesDimension;
    };

    var getBindIndex = function(bindings, feedName) {
        for (var i = 0; i < bindings.length; i++) {
            if (bindings[i].feed === feedName) {
                return i;
            }
        }
        return -1;
    };

    //for nd array parse, make sure layout binding is first dimension in values array
    //Trellis fisrt, then layout, last is mark. 
    var changeBindingSequence = function(bindings) {
        var layoutIndex = [],
            binding, trellisIndex = [],
            othersIndex = [];
        var i;
        for (i in bindings) {
            if (bindings.hasOwnProperty(i)) {
                if (roleMap[bindings[i].feed] === LAYOUT) {
                    layoutIndex.push(i);
                } else if (roleMap[bindings[i].feed] &&
                    ((roleMap[bindings[i].feed].indexOf('trellis') > -1)||
                    (roleMap[bindings[i].feed].indexOf('frame') > -1))) {
                    trellisIndex.push(i);
                } else {
                    othersIndex.push(i);
                }
            }

        }
        layoutIndex = [].concat(trellisIndex, layoutIndex, othersIndex);
        var newBindings = [];
        for (i in layoutIndex) {
            if (layoutIndex.hasOwnProperty(i)) {
                newBindings.push(bindings[layoutIndex[i]]);
            }
        }
        return newBindings;
    };

    BindingManager.setChartType = function(bindings) {

        var feeds = bindingDefinition;
        var config = null;

        var parseFeedingDef = function(feedingDef) {
            var typeMap = {};
            for (var i in feedingDef) {
                if (feedingDef.hasOwnProperty(i)) {
                    typeMap[feedingDef[i].id] = {
                        type: feedingDef[i].type,
                        scaleType: feedingDef[i].scaleType,
                        role: feedingDef[i].role
                    };
                }
            }
            return typeMap;
        };
        parseFeedingDef = parseFeedingDef(feeds);
        bindingSequence = [];
        measures = [];
        dimensions = [];
        bindings = changeBindingSequence(bindings);
        for (var i in bindings) {
            if (bindings.hasOwnProperty(i) && parseFeedingDef[bindings[i].feed]) {
                if (parseFeedingDef[bindings[i].feed].type === 'Dimension') {
                    dimensions.push(bindings[i].feed);
                } else if (parseFeedingDef[bindings[i].feed].type === 'Measure') {
                    measures.push(bindings[i].feed);
                }
                roles[bindings[i].feed] = {
                    feedingType: parseFeedingDef[bindings[i].feed].type,
                    config: config,
                    scaleType: parseFeedingDef[bindings[i].feed].scaleType,
                    role: parseFeedingDef[bindings[i].feed].role
                };
            }
        }
        bindingSequence = [].concat(dimensions, measures);
    };


    var getMeasureNamesFromCrossTable = function(rawData) {
        var mgs = rawData._crosstableDataset._dataSet.measureValuesGroup;
        var measureName = [];
        mgs.map(function(mg) {
            if (TypeUtils.isArray(mg.data)) {
                mg.data.map(function(data) {
                    measureName.push(data.name);
                });
            }
        });
        return measureName;
    };

    var getBindingFromCrosstableFeeding = function(bindings, feedId) {
        var feedsLength = bindings.length;
        for (var i = 0; i < feedsLength; i++) {
            if (bindings[i].feedId === feedId) {
                return {
                    bindingInfo: bindings[i].binding
                };
            }
        }
    };

    function addMaxToBindingResults(bindResults) {
        var maxValue = 0,
            minValue = 0;
        var i;
        for (i in bindResults) {
            if (i != "context" && bindResults.hasOwnProperty(i) && TypeUtils.isPlainObject(bindResults[i]) &&
                bindResults[i].metaData && bindResults[i].metaData[0].type === 'Measure') {
                maxValue = Math.max(maxValue, bindResults[i].maxValue);
                minValue = Math.min(minValue, bindResults[i].minValue);
            }
        }
        for (i in bindResults) {
            if (i != "context" && bindResults.hasOwnProperty(i) && TypeUtils.isPlainObject(bindResults[i]) &&
                bindResults[i].metaData && bindResults[i].metaData[0].type === 'Measure') {
                bindResults[i].maxValue = maxValue;
                bindResults[i].minValue = minValue;
            }
        }
    }

    var getBindingInfo = function(rawData, bindings, type) {
        var bindingResults = {},
            measureNamesDimension;
        var isInternal = false;
        var isFlatTable = false;
        var seriesType = type.split('/')[0];
        var bindItem;
        var bindResvoler;
        var seriesBindingResolver;
        var i;
        if (rawData.type.indexOf('FlatTableDataset') > -1) {
            measureNamesDimension = getMeasureNamesFromFlatTable(bindings);
            isInternal = true;
            isFlatTable = true;
        } else if (rawData.type.indexOf('CrosstableDataset') > -1) {
            measureNamesDimension = getMeasureNamesFromCrossTable(rawData);
            isInternal = true;
        }
        if (isInternal) {
            //For flat and cross, we have binding dependency so we have to do build the data by sequence..
            var onbeforeBindingResolver = BindingManager.getChainResvolerById(seriesType + 'OnBindingStart');
            if (!TypeUtils.isFunction(onbeforeBindingResolver)) {
                onbeforeBindingResolver = BindingManager.getChainResvolerById('xy' + 'OnBindingStart');
            }
            onbeforeBindingResolver.call(onbeforeBindingResolver);

            var length = bindingSequence.length;
            var enableDuplicated = false;
            for (i = 0; i < length; i++) {
                var bindingObject = bindings[getBindIndex(bindings, bindingSequence[i])];
                if (!bindingObject) {
                    bindingObject = getBindingFromCrosstableFeeding(bindings, bindingSequence[i]);
                }

                if (bindingObject) {
                    bindItem = bindingObject;
                    bindResvoler = BindingManager.getChainResvolerById(seriesType + bindItem.chain);
                    if (!TypeUtils.isFunction(bindResvoler)) {
                        var chainObject;
                        if (isFlatTable) {
                            chainObject = flatTableDefaultChain;
                        } else {
                            chainObject = crossTableDefaultChain;
                        }
                        //Using default chains
                        if (dimensions.indexOf(bindingSequence[i]) >= 0) {
                            bindResvoler = BindingManager.getChainResvolerById(seriesType + chainObject.dimension);
                            if (!bindResvoler) {
                                bindResvoler = BindingManager.getChainResvolerById('xy' + chainObject.dimension);
                            }
                        } else if (measures.indexOf(bindingSequence[i]) >= 0) {
                            bindResvoler = BindingManager.getChainResvolerById(seriesType + chainObject.measure);
                            if (!bindResvoler) {
                                bindResvoler = BindingManager.getChainResvolerById('xy' + chainObject.measure);
                            }
                        } else {
                            FunctionUtils.error('Resolver is not a function');
                        }

                    }
                    var isBubbleSize = false;
                    if (type.indexOf('bubble') > -1 || type.indexOf('scatter') > -1 ||
                        type.indexOf('value_line') > -1) {
                        enableDuplicated = true;

                    }
                    if (bindingSequence[i].indexOf('bubbleWidth') >= 0) {
                        isBubbleSize = true;
                    }
                    var result = bindResvoler.call(bindResvoler, rawData, bindItem.source,
                        measureNamesDimension, bindings, enableDuplicated, isBubbleSize,
                        type.indexOf('bullet') > -1,  bindItem.feed);

                    if (bindItem.scale && roles[bindingSequence[i]].scaleType) {
                        var scaleOption = bindItem.scale;

                    }

                    bindingResults[bindingSequence[i]] = result;

                }

            }

            var context = [];
            if (isFlatTable && rawData.getContext()) {
                context = rawData.getContext();
                var ContextResolver = BindingManager.getChainResvolerById(seriesType + 'GetContext');
                if (!ContextResolver) {
                    ContextResolver = BindingManager.getChainResvolerById('xy' + 'GetContext');
                }
                var contextResult = ContextResolver.call(ContextResolver, rawData, context,
                    enableDuplicated, measureNamesDimension);
                bindingResults['context'] = contextResult;
            }


            seriesBindingResolver = BindingManager.getChainResvolerById(seriesType + 'GetBindingSeries');
            if (!seriesBindingResolver) {
                seriesBindingResolver = BindingManager.getChainResvolerById('xy' + 'GetBindingSeries');
            }

            if (type.indexOf('stacked_combination') > -1) {
                bindingResults.seriesType = 'stacked_combination';
            } else if (type.indexOf('/stack') > -1) {
                bindingResults.seriesType = 'stacked';
            } else if (type.indexOf('/100') > -1) {
                bindingResults.seriesType = 'percentage';
            } else if (seriesType.indexOf("bullet") > -1) {
                bindingResults.seriesType = 'bullet';
            } else if (type.indexOf("yy") === 0) {
                bindingResults.seriesType = 'yy';
            } else {
                bindingResults.seriesType = 'spread';
            }

            seriesBindingResolver.call(seriesBindingResolver, rawData, dimensions, measures, context,
                bindingResults, bindings, bindingDefinition);

            var onafterBindingResolver = BindingManager.getChainResvolerById(seriesType + 'OnBindingFinished');

            if (!onafterBindingResolver) {
                onafterBindingResolver = BindingManager.getChainResvolerById('xy' + 'OnBindingFinished');
            }

            onafterBindingResolver.call(onafterBindingResolver);


        } else {
            for (i in bindings) {
                if (bindings.hasOwnProperty(i)) {
                    bindItem = bindings[i];
                    bindResvoler = BindingManager.getChainResvolerById(bindItem.chain);
                    if (TypeUtils.isFunction(bindResvoler)) {
                        bindingResults[bindItem.feed] = bindResvoler.call(bindResvoler, rawData, bindItem.source);
                    } else {
                        FunctionUtils.error('Resolver is not a function');
                    }
                }
            }
            seriesBindingResolver = BindingManager.getChainResvolerById('GetBindingSeries');
            seriesBindingResolver.call(seriesBindingResolver, rawData, dimensions, measures, bindingResults,
                bindings, bindingDefinition);
            bindingResults.seriesType = 'spread';


        }
        return bindingResults;
    };

    var splitCrossBinding = function(bindings) {
        var newBindings = [],
            mnd, i, j;

        var dimBinding = [],
            measureBinding = [];
        for (i = 0; i < bindings.length; i++) {
            for (j = 0; j < bindings[i].source.length; j++) {
                if (bindings[i].source[j].type === "analysisAxis") {
                    dimBinding.push(bindings[i]);
                } else if (bindings[i].source[j].type === "measureValuesGroup") {
                    measureBinding.push(bindings[i]);
                }
            }
        }
        for (i = 0; i < measureBinding.length; i++) {
            var tempBinding = dimBinding.concat();
            tempBinding.push(measureBinding[i]);
            newBindings.push(tempBinding);
        }
        return newBindings;
    };

    var splitFlatBinding = function(bindings) {
        var newBindings = [],
            mnd, i, j;
        var colorIndex = -1;
        for (i = 0; i < bindings.length; i++) {
            for (j = 0; j < bindings[i].source.length; j++) {
                if (bindings[i].source[j][MEASURE_NAMES]) {
                    mnd = bindings[i].source[j][MEASURE_NAMES];
                }
            }
            if (bindings[i].feed === 'color') {
                colorIndex = i;
            }
        }
        if (!mnd) {
            FunctionUtils.error(LangManager.getLogMessage('IDS_ERROR_INVALID_BINDING'));
        }

        var dimBinding = bindings.filter(function(e) {
            if (mnd.indexOf(e.feed) < 0) {
                return e;
            }
        });
        for (i = 0; i < mnd.length; i++) {
            var tempBinding = dimBinding.concat();
            for (j = 0; j < bindings.length; j++) {
                if (bindings[j].feed === mnd[i]) {
                    tempBinding.push(bindings[j]);
                }
            }
            newBindings.push(tempBinding);
        }
        return newBindings;
    };

    //TODO: only rename color to color2
    var renameColor = function(bindings) {
        var changeFlag = false,
            binding, colorIndex, colorBinding;
        for (var i in bindings) {
            if (bindings.hasOwnProperty(i)) {
                if (bindings[i].feed === 'color') {
                    colorIndex = i;
                }
                if (bindings[i].feed === 'valueAxis2') {
                    changeFlag = true;
                }
            }
        }
        if (changeFlag) {
            colorBinding = ObjectUtils.clone(bindings[colorIndex]);
            colorBinding.feed = 'color2';
            bindings[colorIndex] = colorBinding;
        }
    };

    //TODO: only rename color to color2
    var renameColor2 = function(bindingResults) {
        for (var i in bindingResults) {
            if (i === 'valueAxis2') {
                bindingResults['color2'] = bindingResults['color'];
                delete bindingResults['color'];
                return true;
            }
        }
        return false;
    };
    var isTrellis = function(bindings) {
        var length = bindings.length;
        for (var i = 0; i < length; i++) {
            if (bindings[i].feed.indexOf('trellis') > -1) {
                return true;
            }
        }
        return false;
    };
    
    var isDataFrame = function(bindings) {
        var length = bindings.length;
        for (var i = 0; i < length; i++) {
            if (bindings[i].feed === 'dataFrame') {
                return true;
            }
        }
        return false;
    };

    //combine two data model and concat series
    var combineBindingResult = function(allBindingResult, bindings) {

        var length = allBindingResult.length;
        if (isTrellis(bindings)) {
            allBindingResult[1].series.map(function(row, i) {
                row.map(function(column, j) {
                    allBindingResult[1].series[i][j] = allBindingResult[0].series[i][j].concat(
                        allBindingResult[1].series[i][j]);
                });
            });
        } else {
            allBindingResult[1].series = allBindingResult[0].series.concat(allBindingResult[1].series);
            if(isDataFrame(bindings)) {
                allBindingResult[1].allSeries.map(function(series, i) {
                    allBindingResult[1].allSeries[i] = allBindingResult[0].allSeries[i].concat(
                        allBindingResult[1].allSeries[i]);
                });
            }
        }
        var bindingResults = ObjectUtils.extend(allBindingResult[0], allBindingResult[1]);
        return bindingResults;
    };

    var getMNDFeedName = function(bindings) {
        var i, j;
        for (i in bindings) {
            if (bindings.hasOwnProperty(i)) {
                for (j in bindings[i].source) {
                    if (bindings[i].source.hasOwnProperty(j)) {
                        if (bindings[i].source[j][MEASURE_NAMES]) {
                            return bindings[i].feed;
                        }
                    }
                }
            }
        }
    };

    var changeSeriesColorName = function(series, newName) {
        if (TypeUtils.isArray(series)) {
            series.map(function(item) {
                changeSeriesColorName(item, newName);
            });
        } else {
            if (series.color) {
                series['color2'] = series.color;
                delete series.color;
            }
        }
    };

    var complementDataModel = function(data, def) {
        var length = def.length;
        for (var i = 0; i < length; i++) {
            if (!data[def[i].id] && def[i].id.indexOf('trellis') < 0) {
                data[def[i].id] = {};
            }
        }
    };

    BindingManager.parseDataWithBindingInformation = function(rawData, bindings, type, chartType) {
        var bindingResults, dataModel = null,
            i, j, k;

        var cloneBindings = ObjectUtils.clone(bindings);

        if (rawData.type.indexOf('FlatTableDataset') > -1) {
            bindingValidationUtil.acceptable(rawData, bindingDefinition, cloneBindings, chartType);
        }

        if (type.indexOf('xyy') > -1) {
            var allBindingResult = [],
                newBindings;
            if (rawData.type.indexOf('FlatTableDataset') > -1) {
                newBindings = splitFlatBinding(cloneBindings);
            } else {
                newBindings = splitCrossBinding(cloneBindings);
            }
            this.setChartType(cloneBindings);
            for (i in newBindings) {
                if (newBindings.hasOwnProperty(i)) {
                    //renameColor(newBindings[i]);
                    bindingResults = getBindingInfo(rawData, newBindings[i], type);
                    var changeName = renameColor2(bindingResults);
                    if (changeName) {
                        changeSeriesColorName(bindingResults.series, 'color2');
                        if(bindingResults.allSeries)
                        {
                            for(var index in bindingResults.allSeries) {
                                if(bindingResults.allSeries.hasOwnProperty(index)) {
                                    changeSeriesColorName(bindingResults.allSeries[index], 'color2');
                                }
                            }
                        }
                    }
                    allBindingResult.push(bindingResults);
                }
            }
            bindingResults = combineBindingResult(allBindingResult, cloneBindings);
        } else {
            bindingResults = getBindingInfo(rawData, cloneBindings, type);
        }

        complementDataModel(bindingResults, bindingDefinition);
        if (type.indexOf("bullet") > -1) {
            addMaxToBindingResults(bindingResults);
        }
        dataModel = new DataModel(bindingResults, rawData);
        return dataModel;
    };

    var length = defaultChains.length;
    for (var i = 0; i < length; i++) {
        var defaultChainItem = defaultChains[i];
        BindingManager.registerChain(defaultChainItem.id, defaultChainItem.dataResolver);
    }

    return BindingManager;

});

define('sap/viz/framework/common/util/DOM',[],function() {
    return {
        empty: function(node) {
            var temp;
            while ((temp = node.firstChild)) {
                node.removeChild(temp);
            }
            return node;
        },
        matches: function(node, selector) {
            return (node.matches || node.webkitMatchesSelector ||
                node.msMatchesSelector || node.mozMatchesSelector).call(node,
                selector);
        },
        hasClass: function(node, clz) {
            if (!node || !node.getAttribute) {
                return false;
            }
            var nodeClz = node.getAttribute('class') || "";
            return (' ' + nodeClz + ' ').indexOf(' ' + clz + ' ') >= 0;
        }
    };
});
define('sap/viz/framework/common/util/UADetector',[],

    function Setup() {
        var devicePixRatio = window.devicePixelRatio || 1;
        var versionSearchString;
        var searchString = function(data) {
            for (var i = 0; i < data.length; i++) {
                var dataString = data[i].string;
                var dataProp = data[i].prop;
                versionSearchString = data[i].versionSearch || data[i].identity;
                if (dataString) {
                    if (dataString.indexOf(data[i].subString) != -1) {
                        return data[i].identity;
                    }
                } else if (dataProp) {
                    return data[i].identity;
                }
            }
        };
        var seps = [';', ' '];
        var searchVersion = function(dataString) {
            var index = dataString.indexOf(versionSearchString);
            if (index == -1) {
                return;
            }
            var versionStr = dataString.substring(index + versionSearchString.length + 1);
            var i = 0,
                l = seps.length,
                sepIndex = -1;
            while (sepIndex === -1 && i < l) {
                sepIndex = versionStr.indexOf(seps[i++]);
            }
            if (sepIndex !== -1) {
                versionStr = versionStr.slice(0, sepIndex);
            }
            return versionStr;
        };
        var dataBrowser = [{
            string: navigator.userAgent,
            subString: "Chrome",
            identity: "Chrome"
        }, {
            string: navigator.userAgent,
            subString: "OmniWeb",
            versionSearch: "OmniWeb/",
            identity: "OmniWeb"
        }, {
            string: navigator.userAgent,
            subString: "Safari",
            identity: "Safari",
            versionSearch: "Version"
        }, {
            string: navigator.userAgent,
            subString: "Apple",
            identity: "UIWebView",
            versionSearch: "AppleWebKit"
        }, {
            prop: window.opera,
            identity: "Opera",
            versionSearch: "Version"
        }, {
            string: navigator.vendor,
            subString: "iCab",
            identity: "iCab"
        }, {
            string: navigator.vendor,
            subString: "KDE",
            identity: "Konqueror"
        }, {
            string: navigator.userAgent,
            subString: "Firefox",
            identity: "Firefox"
        }, {
            string: navigator.vendor,
            subString: "Camino",
            identity: "Camino"
        }, { // for newer Netscapes (6+)
            string: navigator.userAgent,
            subString: "Netscape",
            identity: "Netscape"
        }, {
            string: navigator.userAgent,
            subString: "MSIE",
            identity: "Explorer",
            versionSearch: "MSIE"
        }, {
            string: navigator.userAgent,
            subString: ".NET",
            identity: "Explorer"
        }, {
            string: navigator.userAgent,
            subString: "Gecko",
            identity: "Mozilla",
            versionSearch: "rv"
        }, { // for older Netscapes (4-)
            string: navigator.userAgent,
            subString: "Mozilla",
            identity: "Netscape",
            versionSearch: "Mozilla"
        }];

        var dataOS = [{
            string: navigator.userAgent,
            subString: "Windows Phone",
            identity: "WindowsPhone"
        },{
            string: navigator.platform,
            subString: "Win",
            identity: "Windows"
        }, {
            string: navigator.platform,
            subString: "Mac",
            identity: "Mac"
        }, {
            string: navigator.userAgent,
            subString: "iPhone",
            identity: "iPhone/iPod"
        }, {
            string: navigator.userAgent,
            subString: "iPad",
            identity: "iPad"
        }, {
            string: navigator.platform,
            subString: "Linux",
            identity: "Linux"
        }];

        var dataRenderEngine = [{
            string: navigator.userAgent,
            subString: "Presto",
            identity: "Presto"
        }, {
            string: navigator.userAgent,
            subString: "KHTML",
            identity: "KHTML"
        }, {
            string: navigator.userAgent,
            subString: "Gecko",
            identity: "Gecko"
        }, {
            string: navigator.userAgent,
            subString: "Trident",
            identity: "Trident"
        }];

        var dataMobile = [{
            string: navigator.userAgent,
            subString: 'Touch',
            identity: 'Touch'
        },{
            string: navigator.userAgent,
            subString: 'Android',
            identity: 'Android',
        }, {
            string: navigator.userAgent,
            subString: 'iPhone',
            identity: 'iPhone'
        }, {
            string: navigator.userAgent,
            subString: 'iPad',
            identity: 'iPad'
        }];

        var _userAgent = searchString(dataBrowser) || "An unknown browser",
            _version = searchVersion(navigator.userAgent) || searchVersion(navigator.appVersion) ||
            "an unknown version",
            _isIE = searchString(dataBrowser) === "Explorer",
            _isFirefox = searchString(dataBrowser) === 'Firefox',
            _isChrome = searchString(dataBrowser) === 'Chrome',
            _isSafari = searchString(dataBrowser) === 'Safari',
            _isUIWebView = searchString(dataBrowser) === 'UIWebView',
            _os = searchString(dataOS) || "an unknown OS",
            _renderEngine = searchString(dataRenderEngine) || "An unknown RenderEngine",
            _mobile = searchString(dataMobile);
        var UADetector = {
            userAgent: function() {
                return _userAgent;
            },
            version: function() {
                return _version;
            },
            isIE: function() {
                return _isIE;
            },
            isFirefox: function() {
                return _isFirefox;
            },
            isChrome: function() {
                return _isChrome;
            },
            isSafari: function() {
                return _isSafari;
            },
            isUIWebView: function() {
                return _isUIWebView;
            },
            os: function() {
                return _os;
            },
            devicePixelRatio: function() {
                return devicePixRatio;
            },
            renderEngine: function() {
                return _renderEngine;
            },
            isMobile: function() {
                return _mobile !== undefined;
            },
            isWindowsSurface: function() {
                return ((_os === 'Windows' || _os === 'WindowsPhone') && (_mobile === 'Touch'));
            },
            isWindowsPhone: function(){
                return ((_os === 'WindowsPhone') && (_mobile === 'Touch'));
            },
            isAndroid: function() {
                return _mobile === "Android";
            }
        };
        return (UADetector);
    });
define('sap/viz/framework/interaction/Constants',[],function() {
    var Constants = {
        BEHAVIOR: {
            DEFAULT_BEHAVIOR_ID: "default",
            DEFAULT_CHART_TYPE_KEY: "*",
            ALL_TARGETS: "*"
        },
        SELECTION_MODE: {
            INCLUSIVE: 'INCLUSIVE',
            EXCLUSIVE: 'EXCLUSIVE',
            NONE: 'NONE',
            SINGLE: 'SINGLE',
            MULTIPLE: 'MULTIPLE'
        }
    };

    return Constants;
});
define('sap/viz/framework/interaction/DesktopMonitor',["jquery",
    "sap/viz/framework/common/util/UADetector",
    "sap/viz/framework/common/util/ObjectUtils"
], function($, UADetector, ObjectUtils) {
    var MIN_LASSO_DISTANCE = 5;
    var types = [
        "click", "hover", "down", "up",
        "lassostart", "lassomove", "lassoend",
        "dragstart", "dragmove", "dragend",
        "wheelmove", "contextmenu",
        "uparrow", "downarrow", "leftarrow", "rightarrow"
    ];

    var dragEventTypes = ["dragstart", "dragmove", "dragend"];
    var mouseEventTypes = ["click", "hover", "down", "up", "wheelmove"];
    
    var DesktopMonitor = function(props, eventLayer) {
        this._dispatch = d3.dispatch.apply(this, types);
        this._props = {
            "enableClick": true,
            "enableHover": true,
            "enableDown": true,
            "enableUp": true,
            "enableLasso": true,
            "enableDrag": true,
            "enableWheelmove": true,
            "enableUparrow": true,
            "enableDownarrow": true,
            "enableLeftarrow": true,
            "enableRightarrow": true,
        };
        this.setProperties(props);
        this._eventLayer = null;
        this._divNode = null;
        this.registerEvent(eventLayer);
        this._startPoint = null;
        this._focusTarget = null;
        this._lastPoint = null;
        this._status = "standby";
    };

    DesktopMonitor.getMonitorEventTypes = function() {
        return types;
    };

    DesktopMonitor.prototype.setProperties = function(_) {
        ObjectUtils.extendByRepalceArray(true, this._props, _);
        return this;
    };

    DesktopMonitor.prototype.registerEvent = function(eventLayer) {
        this._eventLayer = eventLayer;
        this._eventLayer.on("mousedown.monitor", this._mousedown.bind(this))
            .on("mouseup.monitor", this._mouseup.bind(this))
            .on("mousemove.monitor", this._mousemove.bind(this))
            .on("contextmenu.monitor", this._contextmenu.bind(this));

        if (UADetector.isFirefox()) {
            this._eventLayer.on("dragstart.monitor", this._preventEvent);
            this._eventLayer.on("DOMMouseScroll.monitor", this._mousewheel.bind(this));
        } else {
            this._eventLayer.on("mousewheel.monitor", this._mousewheel.bind(this));
        }
        if (UADetector.isIE()) {
            this._eventLayer.on("dragstart.monitor", this._preventEvent);
            this._eventLayer.on("mouseleave.monitor", function() {
                this._mouseleave.call(this, d3.event);
            }.bind(this));
        } else {
            $(this._eventLayer.node()).mouseleave(this._mouseleave.bind(this));
        }

        this._divNode = this._eventLayer.node().parentNode;
        if (this._divNode) {
            this._keydownHandler = function(evt){
                this._keydown(evt);
            }.bind(this);
            this._divNode.addEventListener("keydown", this._keydownHandler);
        }
        return this;
    };

    DesktopMonitor.prototype.destroy = function() {
        var eventLayer = this._eventLayer;
        this._eventLayer = null;
        if (eventLayer) {
            eventLayer.on("mousedown.monitor", null)
                .on("mouseup.monitor", null)
                .on("mousemove.monitor", null)
                .on("contextmenu.monitor", null);

            if (UADetector.isFirefox()) {
                eventLayer.on("DOMMouseScroll", null);
            } else {
                eventLayer.on("mousewheel.monitor", null);
            }
            if (UADetector.isIE()) {
                eventLayer.on("mouseleave.monitor", null);
            } else {
                $(eventLayer.node()).unbind("mouseleave");
            }
        }
        if (this._divNode) {
            this._divNode.removeEventListener("keydown", this._keydownHandler);
        }
        this._keydownHandler = null;
        this._divNode = null;
        this._dispatch = null;
        this._props = null;
        this._startPoint = null;
        this._focusTarget = null;
        this._lastPoint = null;
        this._status = null;
    };

    DesktopMonitor.prototype.getDispatch = function() {
        return this._dispatch;
    };

    DesktopMonitor.prototype.resetStatus = function() {
        this._startPoint = null;
        this._focusTarget = null;
        this._status = "standby";
    };

    function isEventWithLeftMouseButton(event) {
        return event.which === 1;
    }

    function isEventWithCtrlKey(event) {
        return UADetector.os() === 'Mac' ? event.metaKey : event.ctrlKey;
    }

    function getEventCoordinate(event) {
        return {
            x: event.clientX,
            y: event.clientY
        };
    }

    function distance(p1, p2) {
        var dx = p1.x - p2.x;
        var dy = p1.y - p2.y;
        return Math.sqrt(dx * dx + dy * dy);
    }

    function getCurrentEvent() {
        if (d3.event) {
            return d3.event;
        } else {
            return window.event;
        }
    }

    function getFlagCategoryByEventType(type) {
        return "enable" + type.substring(0, 1).toUpperCase() + type.substring(1);
    }

    DesktopMonitor.prototype._preventEvent = function() {
        var originalEvent = getCurrentEvent();
        originalEvent.preventDefault();
        return false;
    };

    DesktopMonitor.prototype._keydown = function(keydownEvent) {
        var evt = keydownEvent;
        switch (evt.keyCode) {
            case 37:
                this._fireKeyBoardEvent("leftarrow", evt);
                break;
            case 38:
                this._fireKeyBoardEvent("uparrow", evt);
                break;
            case 39:
                this._fireKeyBoardEvent("rightarrow", evt);
                break;
            case 40:
                this._fireKeyBoardEvent("downarrow", evt);
                break;
        }
    };


    DesktopMonitor.prototype._mousewheel = function() {
        this._fireEvent("wheelmove");
    };

    DesktopMonitor.prototype._mousedown = function() {
        var originalEvent = getCurrentEvent();
        if (!isEventWithLeftMouseButton(originalEvent)) {
            return;
        }
        this._startPoint = getEventCoordinate(originalEvent);
        this._focusTarget = originalEvent.target;
        this._status = "focus";
        this._fireEvent("down");
    };

    DesktopMonitor.prototype._mousemove = function() {
        var originalEvent = getCurrentEvent();
        //In chrome 32, mouse click would activate mousedown, mouseup, click and mousemove in sequence.
        //So we need to add a judgement to avoid mousemove when the mouse hasn't actually moved.
        var lastPoint = this._lastPoint;
        var currentPoint = getEventCoordinate(originalEvent);
        if (lastPoint && distance(lastPoint, currentPoint) === 0) {
            return;
        }
        this._lastPoint = currentPoint;

        var status = this._status;
        switch (status) {
            case "standby":
                this._fireEvent("hover");
                break;
            case "focus":
                if (this._checkMouseDownUpDistance()) {
                    var moveType = this._getMoveEventType(originalEvent); //"lasso" or "drag"
                    this._status = moveType;
                    this._fireEvent("up", this._startPoint, this._focusTarget);
                    this._fireEvent(moveType + "start", this._startPoint); //"lassostart" or "dragstart"
                    this._fireEvent(moveType + "move"); //"lassomove" or "dragmove"
                }
                break;
            case "lasso":
                this._fireEvent("lassomove");
                break;
            case "drag":
                this._fireEvent("dragmove");
                break;
        }
    };

    DesktopMonitor.prototype._mouseup = function() {
        var originalEvent = getCurrentEvent();
        if (!isEventWithLeftMouseButton(originalEvent)) {
            return;
        }
        var status = this._status;
        switch (status) {
            case "standby":
                this._fireEvent("hover");
                break;
            case "focus":
                this._fireEvent("up", this._startPoint, this._focusTarget);
                this._fireEvent("click", this._startPoint, this._focusTarget);
                break;
            case "lasso":
                this._fireEvent("lassoend");
                break;
            case "drag":
                this._fireEvent("dragend");
                break;
        }
        this.resetStatus();
    };

    DesktopMonitor.prototype._mouseleave = function(e) {
        var status = this._status;
        switch (status) {
            case "lasso":
                this._fireEvent("lassoend", undefined, undefined, e);
                break;
            case "drag":
                this._fireEvent("dragend", undefined, undefined, e);
                break;
        }
        this.resetStatus();
    };
    
    DesktopMonitor.prototype._contextmenu = function() {
        this._fireEvent("contextmenu");
    };

    DesktopMonitor.prototype._getMoveEventType = function(event) {
        var result = "drag";
        if (this._isLasso(event)) {
            result = "lasso";
        }
        return result;
    };

    DesktopMonitor.prototype._isLasso = function(event) {
        var props = this._props;
        var ret = false;
        if (props.enableLasso) {
            ret = true;
            /*if (props.selectability.lassoWithCtrlKey && !isEventWithCtrlKey(event)) {
                ret = false;
            }*/
        }
        return ret;
    };

    DesktopMonitor.prototype._checkMouseDownUpDistance = function() {
        var tmp = getEventCoordinate(getCurrentEvent());
        if (this._startPoint !== null &&
            (distance(this._startPoint, tmp) < MIN_LASSO_DISTANCE)) {
            return false;
        } else {
            return true;
        }
    };

    DesktopMonitor.prototype._fireEvent = function(type, point, target, evt) {
        var originalEvent = getCurrentEvent();
        if (!originalEvent && evt) {
            originalEvent = evt;
        }
        var wheelDelta = 0;
        if (UADetector.isFirefox()) {
            if (originalEvent.detail) {
                wheelDelta = -120 * originalEvent.detail;
            }
        } else {
            if (originalEvent.wheelDelta) {
                wheelDelta = originalEvent.wheelDelta;
            }
        }
        var tempEvent = {
            name: type,
            data: {
                point: point ? point : getEventCoordinate(originalEvent),
                target: target ? target : originalEvent.target,
                ctrlKey: isEventWithCtrlKey(originalEvent),
                wheelDelta: wheelDelta,
                originalEvent: originalEvent
            }
        };
        var props = this._props;
        var d = this._dispatch;
        if (mouseEventTypes.indexOf(type) > -1) {
            var flagCategory = getFlagCategoryByEventType(type); //"focus" -> "enableFocus"
            if (this._props[flagCategory]) {
                this._dispatch[type](tempEvent);
            }
        } else if (dragEventTypes.indexOf(type) > -1) {
            if (this._props.enableDrag) {
                this._dispatch[type](tempEvent);
            }
        } else {
            this._dispatch[type](tempEvent);
        }
    };

    DesktopMonitor.prototype._fireKeyBoardEvent = function(type, evt) {
        var tempEvent = {
            name: type,
            data: {
                target: evt.target,
                originalEvent: evt
            }
        };
        var flagCategory = getFlagCategoryByEventType(type);
        if (this._props[flagCategory]) {
            this._dispatch[type](tempEvent);
        }
    };
    return DesktopMonitor;
});

define('sap/viz/framework/interaction/gesture/GestureDetector',[
    'sap/viz/framework/common/util/FunctionUtils'
], function Setup(FuncUtils) {
    var noop = FuncUtils.noop;
    /**
     * Possible State. Gesture Detector is ready to detect gesture
     *
     * @name sap.viz.mvc.GestureDetector.TransitionState#Possible
     * @field
     *
     */
    var Possible = 0;
    /**
     * Began State. Gesture Detector is ready to detect continuous gesture
     *
     * @name sap.viz.mvc.GestureDetector.TransitionState#Began
     * @field
     *
     */
    var Began = 1;
    /**
     * Began State. Gesture Detector is continuous to detect continuous gesture
     *
     * @name sap.viz.mvc.GestureDetector.TransitionState#Changed
     * @field
     *
     */
    var Changed = 2;
    /**
     * Recognized State. Discrete Gesture is detected
     *
     * @name sap.viz.mvc.GestureDetector.TransitionState#Recognized
     * @field
     *
     */
    var Recognized = 3; // Recognized == Ended
    /**
     * Ended State. Continuous Gesture is detected
     *
     * @name sap.viz.mvc.GestureDetector.TransitionState#Ended
     * @field
     *
     */
    var Ended = 3;
    /**
     * Ended State. Continuous Gesture is stop to detected
     *
     * @name sap.viz.mvc.GestureDetector.TransitionState#Canceled
     * @field
     *
     */
    var Canceled = 4;
    /**
     * Ended State. Detector fails to detect in current touch sequence
     *
     * @name sap.viz.mvc.GestureDetector.TransitionState#Failed
     * @field
     *
     */
    var Failed = 5;


    // var count = 0;
    /**
     * The base abstract gesture detector class
     *
     * @name sap.viz.mvc.GestureDetector
     * @constructor
     */
    var GestureDetector = function() {
        // this.id = count++;
        this._grEnabled = true;
        this._grTouchTotal = 0;
        this._grTouchTracker = {};
        this._grActions = [];
        this._grCancelTouches = true;
        var state = Possible;
        Object.defineProperties(this, {
            'state': {
                get: function() {
                    return state;
                },
                set: function(value) {
                    switch (value) {
                        case Possible:
                            state = Possible;
                            break;
                        case Began:
                            state = Began;
                            this._grActions.forEach(function(action, i) {
                                action(this);
                            }, this);
                            break;
                        case Changed:
                            if (state === Began) {
                                state = Changed;
                            }
                            this._grActions.forEach(function(action, i) {
                                action(this);
                            }, this);
                            break;
                        case Canceled:
                            state = Canceled;
                            this._grActions.forEach(function(action, i) {
                                action(this);
                            }, this);
                            break;
                        case Failed:
                            state = Failed;
                            break;
                        case Ended:
                        case Recognized:
                            state = value;
                            this._grActions.forEach(function(action, i) {
                                action(this);
                            }, this);
                            break;
                    }
                }
            }
        });
    };

    /**
     * Add gesture function callback which will get triggered when
     * gesture is detected. One function instance could only be
     * added once. The returned value indicates whether the adding
     * is succeed.
     *
     * @name sap.viz.mvc.GestureDetector#addGestureAction
     * @function
     * @param {Function}
     *            actionFn
     * @returns {Boolean}
     */
    GestureDetector.prototype.addGestureAction = function(actionFn) {
        var actions = this._grActions;
        if (actions.indexOf(actionFn) === -1) {
            actions.push(actionFn);
            return true;
        }
        return false;
    };
    /**
     * Remove a previous added gesture function callback, the
     * returned value indicates whether the removing is succeed.
     *
     * @name sap.viz.mvc.GestureDetector#removeGestureAction
     * @function
     * @param {Function}
     *            actionFn, the function to be removed.
     * @returns {Boolean}
     */
    GestureDetector.prototype.removeGestureAction = function(actionFn) {
        var actions = this._grActions,
            i = actions.indexOf(actionFn);
        if (i > -1) {
            actions.splice(i, 1);
            return true;
        }
        return false;
    };

    /**
     * Get the location of the gesture, the location is calculated
     * as the average of the locations of all touches on the screen.
     * Caution: This function only return meaningful point value IF
     * and ONLY IF the current state of this gesture detector is in
     * one of the <b>Recognizing</b> states, a.k.a Began, Changed,
     * Canceled, Ended, Recognized, otherwise undefined will return.
     *
     * @function
     * @returns {POINT}
     */
    GestureDetector.prototype.globalLocOfGesture = function() {
        var state = this.state;
        if (this._grEnabled && [Began, Changed, Canceled, Ended, Recognized].indexOf(state) >
            -1) {
            var count = 0;
            var ttracker = this._grTouchTracker,
                p;
            var x = 0;
            var y = 0;
            for (var tId in ttracker) {
                if (ttracker.hasOwnProperty(tId)) {
                    p = ttracker[tId];
                    x += p.x;
                    y += p.y;
                    count++;
                }
            }
            if (count) {
                return {
                    x: x / count,
                    y: y / count
                };
            }
        }
    };

    /**
     * Return an array of identifier of the touches currently
     * involved in the gesture detection, Caution: This function
     * only return meaningful array of touches IF and ONLY IF the
     * current state of this gesture detector is in one of the
     * <b>Recognizing</b> states, a.k.a Began, Canceled, Ended,
     * Recognized, otherwise empty array will return.
     *
     * @function
     * @returns {Array}
     */
    GestureDetector.prototype.involvedTouchePoints = function() {
        var ret = [],
            state = this.state;
        if (this._grEnabled && [Began, Changed, Canceled, Ended, Recognized].indexOf(state) >
            -1) {
            var ttracker = this._grTouchTracker;
            for (var tId in ttracker) {
                if (ttracker[tId] !== undefined) {
                    ret.push(ttracker[tId]);
                }
            }
        }
        return ret;
    };

    /**
     * Get the average position of all the touchs on the screen
     *
     * @function
     * @returns {POINT}
     */
    GestureDetector.prototype.globalLocOfTouchPoints = function() {
        var count = 0;
        var ttracker = this._grTouchTracker,
            p;
        var x = 0;
        var y = 0;
        for (var tId in ttracker) {
            if (ttracker.hasOwnProperty(tId)) {
                p = ttracker[tId];
                x += p.x;
                y += p.y;
                count++;
            }
        }
        if (count) {
            return {
                x: x / count,
                y: y / count
            };
        }
    };

    /**
     * Return the number of touches currently on the screen
     *
     * @function
     * @returns {Number}
     */
    GestureDetector.prototype.totalTouches = function() {
        return this._grTouchTotal;
    };

    /**
     * Get or set whether needs to cancel previous events of the
     * touches when a gesture detected. Default is yes. The related
     * logic like bookkeeping of the canceled touches among several
     * gesture detectors, are currently implemented outside of
     * gesture detector.
     *
     * @function
     * @returns {Boolean|this}
     */
    GestureDetector.prototype.cancelTouches = function(cancel) {
        if (arguments.length) {
            this._grCancelTouches = cancel ? true : false;
            return this;
        } else {
            return this._grCancelTouches;
        }
    };

    /**
     * Get or set the <b>enable</b> status of the gesture detector.
     * If the gesture detector is in detecting a continuous gesture,
     * it will immediately transit to <b>canceled</b> state.
     * Default is yes.
     *
     * @function
     * @returns {Boolean|this}
     */
    GestureDetector.prototype.enable = function(enable) {
        if (arguments.length) {
            enable = enable ? true : false;
            if (this._grEnabled !== enable) {
                this._grEnabled = enable;
                if (!enable) {
                    if ([Began, Canceled].indexOf(this.state) > -1) {
                        this.state = Canceled;
                    } else {
                        this.state = Failed;
                    }
                }
            }
            return this;
        } else {
            return this._grEnabled;
        }
    };

    /**
     * Process the touch start event of a touch sequence. This
     * method is not intent to be overridden and is supposed to be
     * called by the user.
     *
     * @name sap.viz.mvc.GestureDetector#touchBegin
     * @function
     * @param {DOMTouchEvent}
     *            touchStartEvent
     */
    GestureDetector.prototype.touchBegin = function(touchStartEvent) {
        var newTouches = touchStartEvent.changedTouches;
        var ttracker = this._grTouchTracker;
        for (var i = 0, t, len = newTouches.length; i < len; i++) {
            t = newTouches[i];
            ttracker[t.identifier] = {
                x: t.clientX,
                y: t.clientY
            };
            this._grTouchTotal++;
            // console.log(this.id + ":touchadd. number:" + this._grTouchTotal);
        }
        // console.log(ttracker);
        if (this._grEnabled && ([Began, Possible, Changed].indexOf(this.state) > -1)) {
            this.doTouchBegin(touchStartEvent);
        }
    };

    /**
     * Process the touch move event of a touch sequence. This method
     * is not intent to be overridden and is supposed to be called by
     * the user.
     *
     *
     * @name sap.viz.mvc.GestureDetector#touchMove
     * @function
     * @param {DOMTouchEvent}
     *            touchMoveEvent
     */
    GestureDetector.prototype.touchMove = function(touchMoveEvent) {
        if (this._grEnabled && ([Began, Possible, Changed].indexOf(this.state) > -1)) {
            var movedTouches = touchMoveEvent.changedTouches;
            var ttracker = this._grTouchTracker;
            for (var i = 0, t, len = movedTouches.length; i < len; i++) {
                t = movedTouches[i];
                if (ttracker[t.identifier]) {
                    ttracker[t.identifier] = {
                        x: t.clientX,
                        y: t.clientY
                    };
                }
            }
            // console.log(this.id + ":touchmove");
            // console.log(ttracker);
            this.doTouchMove(touchMoveEvent);
        }
    };

    /**
     * Process the touch end event of a touch sequence. This method
     * is not intent to be overridden and is supposed to be called by
     * the user.
     *
     *
     * @name sap.viz.mvc.GestureDetector#touchEnd
     * @function
     * @param {DOMTouchEvent}
     *            touchEndEvent
     */
    GestureDetector.prototype.touchEnd = function(touchEndEvent) {
        var endedTouches = touchEndEvent.changedTouches;
        var ttracker = this._grTouchTracker;
        for (var i = 0, t, len = endedTouches.length; i < len; i++) {
            t = endedTouches[i];
            if (ttracker[t.identifier]) {
                ttracker[t.identifier] = {
                    x: t.clientX,
                    y: t.clientY,
                    toBeDeleted: true
                };
                this._grTouchTotal--;
            }
            // console.log(this.id + ":touchremove_end. number:" + this._grTouchTotal);
        }
        // console.log(ttracker);
        if (this._grEnabled && ([Began, Possible, Changed].indexOf(this.state) > -1)) {
            this.doTouchEnd(touchEndEvent);
        }
        for (var tId in ttracker) {
            if (ttracker.hasOwnProperty(tId) && ttracker[tId].toBeDeleted) {
                delete ttracker[tId];
            }
        }
        // Reset the detector only when all fingers lifted and in
        // 'ending' state
        //Somehow the mobile browser will omit the last touchEnd event or just combine the last several
        //touchEnd event in one but give the wrong changedTouches list. In this case, 
        //the _grTouchTotal counter will not come to zero and the component will be in the intermediate state
        //and response to no further touches. Therefore, we count on the touches and targetTouches list 
        //to determine whether we should reset the gesture state. 
        if ((!this._grTouchTotal) && ([Recognized, Failed, Canceled].indexOf(this.state) > -1)) {
            this.reset();
        }
    };

    /**
     * Process the touch cancel event of a touch sequence. This
     * method is not intent to be override and is supposed to be
     * called by the user.
     *
     *
     * @name sap.viz.mvc.GestureDetector#touchCancel
     * @function
     * @param {DOMTouchEvent}
     *            touchCancelEvent
     */
    GestureDetector.prototype.touchCancel = function(touchCancelEvent) {
        var cancelledTouches = touchCancelEvent.changedTouches;
        var ttracker = this._grTouchTracker;
        for (var i = 0, t, len = cancelledTouches.length; i < len; i++) {
            t = cancelledTouches[i];
            if (ttracker[t.identifier]) {
                ttracker[t.identifier] = {
                    x: t.clientX,
                    y: t.clientY,
                    toBeDeleted: true
                };
                this._grTouchTotal--;
            }
            // console.log(this.id + ":touchremove_cancel. number:" + this._grTouchTotal);

        }
        if (this._grEnabled && ([Began, Possible, Changed].indexOf(this.state) > -1)) {
            this.doTouchCancel(touchCancelEvent);
        }
        for (var tId in ttracker) {
            if (ttracker.hasOwnProperty(tId) && ttracker[tId].toBeDeleted) {
                delete ttracker[tId];
            }
        }
        // Reset the detector only when all fingers lifted and in
        // 'ending' state
        if ((!this._grTouchTotal) && ([Recognized, Failed, Canceled].indexOf(this.state) > -1)) {
            this.reset();
        }
    };

    /**
     * This method should be overridden in subclass, to handle
     * actual gesture detection
     *
     *
     * @name sap.viz.mvc.GestureDetector#doTouchBegin
     * @function
     * @param {DOMTouchEvent}
     *            touchStartEvent
     */
    GestureDetector.prototype.doTouchBegin = noop;
    /**
     * Gesture Detector uses this method to receive touches in
     * moving phase of a touch sequence. This method should be
     * overridden in subclass.
     *
     *
     * @name sap.viz.mvc.GestureDetector#doTouchMove
     * @function
     * @param {DOMTouchEvent}
     *            touchMoveEvent
     */
    GestureDetector.prototype.doTouchMove = noop;
    /**
     * This method should be overridden in subclass, to handle
     * actual gesture detection
     *
     *
     * @name sap.viz.mvc.GestureDetector#doTouchEnd
     * @function
     * @param {DOMTouchEvent}
     *            touchEndEvent
     */
    GestureDetector.prototype.doTouchEnd = noop;
    /**
     * This method should be overridden in subclass, to handle
     * actual gesture detection
     *
     *
     * @name sap.viz.mvc.GestureDetector#doTouchCancel
     * @function
     * @param {DOMTouchEvent}
     *            touchCancelEvent
     */
    GestureDetector.prototype.doTouchCancel = noop;
    /**
     * Reset the state of this gesture detector. Subclass SHOULD NOT
     * call this method. Override it if necessary.
     *
     *
     * @name sap.viz.mvc.GestureDetector#reset
     * @function
     */
    GestureDetector.prototype.reset = function() {
        this.state = Possible;
        this._grTouchTracker = {};
        this._grTouchTotal = 0;
    };

    /**
     * The mask used to specify gesture detector's state
     *
     * @name sap.viz.mvc.GestureDetector.TransitionState
     * @class
     */
    GestureDetector.TransitionState = {
        Possible: Possible,
        Began: Began,
        Changed: Changed,
        Recognized: Recognized,
        Ended: Ended,
        Canceled: Canceled,
        Failed: Failed
    };
    return GestureDetector;
});
define('sap/viz/framework/interaction/gesture/PanGestureDetector',[
    "sap/viz/framework/common/util/oo",
    'sap/viz/framework/interaction/gesture/GestureDetector'
], function Setup(oo, GestureDetector) {

    var ts = GestureDetector.TransitionState;
    var CONST_PAN_MIN_DISTANCE = 10;
    var CONST_PAN_MAX_TIME = 500;
    var _distance = function(xy1, xy2) {
        var dx = xy1.x - xy2.x;
        var dy = xy1.y - xy2.y;
        return Math.sqrt(dx * dx + dy * dy);
    };
    var _time = function(lastTime, currentTime) {
        return currentTime - lastTime;
    };

    var _refreshStatus = function(event) {
        this._startWhen = this._stopWhen;
        this._stopWhen = event.timeStamp;
        this._lastXY = this._currentXY;
        this._currentXY = this.globalLocOfTouchPoints();
    };

    /**
     * This class defines detector for detecting Panning gesture. Panning
     * gesture is detected when required number of fingers touch the screen and
     * move a reasonable distance.
     *
     * @name sap.viz.mvc.PanGestureDetector
     * @class
     * @augments sap.viz.mvc.GestureDetector
     */
    var PanGestureDetector = function(touchesRequired) {
        PanGestureDetector.superclass.constructor.apply(this, arguments);
        this._touchesRequired = (touchesRequired > 0 && touchesRequired < 6) ? touchesRequired : 1;
        this._startXY = undefined;
        this._lastXY = undefined;
        this._currentXY = undefined;
        this._startWhen = 0;
        this._stopWhen = 0;
        this._isLongPress = false;
    };
    oo.extend(PanGestureDetector, GestureDetector);

    /**
     * The number of touches required for tap to be detected.
     *
     * @function
     * @param {Number}
     *            numOfTouches
     * @returns {Number|this}
     */
    PanGestureDetector.prototype.touchesRequired = function(numOfTouches) {
        if (arguments.length) {
            this._touchesRequired = +numOfTouches;
            return this;
        }
        return this._touchesRequired;
    };

    PanGestureDetector.prototype.doTouchBegin = function(touchStartEvent) {
        var currentNumOfTouches = this.totalTouches();
        if (currentNumOfTouches === this._touchesRequired && this.state === ts.Possible) {
            this._startWhen = this._stopWhen = touchStartEvent.timeStamp;
            this._startXY = this._lastXY = this._currentXY = this.globalLocOfTouchPoints();
            this.state = ts.Began;
        } else if (currentNumOfTouches > this._touchesRequired) {
            if (this.state === ts.Began || this.state === ts.Changed) {
                this._stopWhen = touchStartEvent.timeStamp;
                this._lastXY = this._currentXY;
                this._currentXY = this.globalLocOfTouchPoints();
                this.state = ts.Canceled;
            } else {
                this.state = ts.Failed;
            }
        }
    };

    PanGestureDetector.prototype.doTouchMove = function(touchMoveEvent) {
        switch (this.state) {
            case ts.Began:
                if (_distance(this._currentXY, this.globalLocOfTouchPoints()) >= CONST_PAN_MIN_DISTANCE) {
                    if (_time(this._stopWhen, touchMoveEvent.timeStamp) < CONST_PAN_MAX_TIME) {
                        this._isLongPress = false;
                    } else {
                        this._isLongPress = true;
                    }
                    _refreshStatus.call(this, touchMoveEvent);
                    this.state = ts.Changed;
                }
                break;
            case ts.Changed:
                _refreshStatus.call(this, touchMoveEvent);
                this.state = ts.Changed;
                break;
        }
    };

    PanGestureDetector.prototype.doTouchEnd = function(touchEndEvent) {
        if ((this.state === ts.Began || this.state === ts.Changed)) {
            _refreshStatus.call(this, touchEndEvent);
            this._isLongPress = false;
            this.state = ts.Ended;
        }
    };

    PanGestureDetector.prototype.doTouchCancel = function(touchCancelEvent) {
        if (this.state === ts.Began || this.state === ts.Changed) {
            _refreshStatus.call(this, touchCancelEvent);
            this._isLongPress = false;
            this.state = ts.Canceled;
        }
    };

    /**
     * The current moving range in X,Y direction of the gesture
     *
     * <pre>
     * {
     *      x : ###,
     *      y : ###
     * }
     * </pre>
     *
     * @name sap.viz.mvc.PanGestureDetector#rangeInXY
     * @function
     * @return {POINT}
     */
    PanGestureDetector.prototype.rangeInXY = function() {
        return {
            x: this._currentXY.x - this._startXY.x,
            y: this._currentXY.y - this._startXY.y
        };
    };

    /**
     * The current moving velocity in X,Y direction of the gesture
     *
     * <pre>
     * {
     *      x : ###,
     *      y : ###
     * }
     * </pre>
     *
     * @name sap.viz.mvc.PanGestureDetector#velocityInXY
     * @function
     * @return {POINT}
     */
    PanGestureDetector.prototype.velocityInXY = function() {
        var duration = this._stopWhen - this._startWhen;
        if (duration) {
            return {
                x: (this._currentXY.x - this._lastXY.x) / duration,
                y: (this._currentXY.y - this._lastXY.y) / duration
            };
        } else {
            return 0;
        }
    };

    PanGestureDetector.prototype.reset = function() {
        PanGestureDetector.superclass.reset.apply(this, arguments);
        this._startXY = undefined;
        this._lastXY = undefined;
        this._currentXY = undefined;
        this._startWhen = 0;
        this._stopWhen = 0;
        this._isLongPress = false;
    };

    PanGestureDetector.prototype.isLongPress = function() {
        return this._isLongPress;
    };

    return PanGestureDetector;
});
define('sap/viz/framework/interaction/gesture/PinchGestureDetector',[
    "sap/viz/framework/common/util/oo",
    'sap/viz/framework/interaction/gesture/GestureDetector'
], function Setup(oo, GestureDetector) {
    var ts = GestureDetector.TransitionState;

    var MIN_DISTANCE = 35;
    var MIN_TIME = 30;
    /**
     * This class defines detector for detecting Pinching gesture.
     *
     * @name sap.viz.mvc.PinchGestureDetector
     * @class
     * @augments sap.viz.mvc.GestureDetector
     */
    var PinchGestureDetector = function() {
        PinchGestureDetector.superclass.constructor.apply(this, arguments);
        this._origDistance = 1;
        this._currDistance = 1;
        this._startWhen = 0;
        this._stopWhen = 0;
        this._timerStarted = false;
        this._timerId = null;
    };
    oo.extend(PinchGestureDetector, GestureDetector);

    PinchGestureDetector.prototype._distance = function() {
        var points = [];
        for (var tId in this._grTouchTracker) {
            if (this._grTouchTracker.hasOwnProperty(tId)) {
                points.push(this._grTouchTracker[tId]);
            }
        }
        var dx = points[1].x - points[0].x;
        var dy = points[1].y - points[0].y;
        return Math.sqrt(dx * dx + dy * dy);
    };

    PinchGestureDetector.prototype.doTouchBegin = function(touchStartEvent) {
        var currentNumOfTouches = this.totalTouches();
        if (this.state === ts.Possible) {
            if (currentNumOfTouches === 2) {
                var twoTouchDistance = this._distance();
                if (twoTouchDistance > MIN_DISTANCE) {
                    this._origDistance = this._currDistance = twoTouchDistance;
                    this._startWhen = this._stopWhen = touchStartEvent.timeStamp;
                    this._touchStartPoints = [];
                    var ttracker = this._grTouchTracker;
                    for (var tId in ttracker) {
                        if (ttracker[tId] !== undefined) {
                            this._touchStartPoints.push(ttracker[tId]);
                        }
                    }
                } else {
                    this.state = ts.Failed;
                    return;
                }
            }
            // If more than 2 touches began, regard it as a failure
            else if (currentNumOfTouches > 2) {
                this.state = ts.Failed;
                return;
            }
            // If only one touch began, we can wait for another one to come.
        } else if ((this.state === ts.Began || this.state === ts.Changed)) {
            this._stopWhen = touchStartEvent.timeStamp;
            this._currDistance = this._distance();

            this.state = ts.Canceled;
            return;
        }
    };

    PinchGestureDetector.prototype.doTouchMove = function(touchMoveEvent) {
        switch (this.state) {
            case ts.Possible:
                if (this.totalTouches() === 2) {
                    this._stopWhen = touchMoveEvent.timeStamp;
                    this._currDistance = this._distance();

                    var scale = this.scale();
                    if (scale > 1.05 || scale < 0.95) {
                        this.state = ts.Began;
                    }
                }
                break;
            case ts.Began:
                if (Math.abs(this._origDistance - this._distance()) > 10) {
                    this._currDistance = this._distance();
                    this._stopWhen = touchMoveEvent.timeStamp;
                    this.state = ts.Changed;
                }
                break;
            case ts.Changed:
                this._currDistance = this._distance();
                this._stopWhen = touchMoveEvent.timeStamp;
                this.state = ts.Changed;
                if (this._timerStarted){
                    window.clearTimeout(this._timerId);
                }
                var that = this;
                this._timerId = window.setTimeout(function(){
                    that.state = ts.Ended;
                    that._origDistance = that._currDistance;
                    that._startWhen = that._stopWhen;
                    that.state = ts.Began;
                    that._timerStarted = false;
                    that._timerId = null;
                }, MIN_TIME);
                this._timerStarted = true;
                break;
        }
    };

    PinchGestureDetector.prototype.doTouchEnd = function(touchEndEvent) {
        if (this.state === ts.Began || this.state === ts.Changed) {
            if (this.totalTouches() === 0) {
                this._stopWhen = touchEndEvent.timeStamp;
                this._currDistance = this._distance();
                this.state = ts.Ended;
            } else {
                this._stopWhen = touchEndEvent.timeStamp;
                this._currDistance = this._distance();
                this.state = ts.Canceled;
            }
            if (this._timerStarted){
                window.clearTimeout(this._timerId);
                this._timerStarted = false;
                this._timerId = null;
            }
        } else if (this.state === ts.Possible) {
            this.state = ts.Failed;
        }
    };

    PinchGestureDetector.prototype.doTouchCancel = function(touchCancelEvent) {
        if (this.state === ts.Began || this.state === ts.Changed) {
            this._stopWhen = touchCancelEvent.timeStamp;
            this._currDistance = this._distance();
            this.state = ts.Canceled;
        } else if (this.state === ts.Possible) {
            this.state = ts.Failed;
        }
    };

    /**
     * The current scale of the pinching gesture
     *
     *
     * @name sap.viz.mvc.PinchGestureDetector#scale
     * @function
     * @return {Number}
     */
    PinchGestureDetector.prototype.scale = function() {
        return this._currDistance / this._origDistance;
    };

    /**
     * The current velocity of the pinching gesture
     *
     *
     * @name sap.viz.mvc.PinchGestureDetector#velocity
     * @function
     * @return {Number}
     */
    PinchGestureDetector.prototype.velocity = function() {
        var duration = this._startWhen - this._stopWhen;
        if (duration) {
            return Math.abs((this._currDistance - this._origDistance)) * 1000 / duration;
        } else {
            return 0;
        }
    };

    PinchGestureDetector.prototype.reset = function() {
        PinchGestureDetector.superclass.reset.apply(this, arguments);
        this._origDistance = 1;
        this._currDistance = 1;
        this._startWhen = 0;
        this._stopWhen = 0;
    };
    return PinchGestureDetector;
});
define('sap/viz/framework/interaction/MobileMonitor',[
    "sap/viz/framework/common/util/UADetector",
    "sap/viz/framework/common/util/DOM",
    "sap/viz/framework/interaction/gesture/PanGestureDetector",
    'sap/viz/framework/interaction/gesture/PinchGestureDetector',
    "sap/viz/framework/interaction/gesture/GestureDetector",
    "sap/viz/framework/common/util/ObjectUtils"
], function(UADetector, DOM, PanGestureDetector, PinchGestureDetector, GestureDetector,
    ObjectUtils) {

    var TRANSITION_STATE = GestureDetector.TransitionState;

    var types = [
        "click", "hover", "down", "up",
        "lassostart", "lassomove", "lassoend",
        "dragstart", "dragmove", "dragend",
        'pinchstart', 'pinchmove', 'pinchend',
        "2xtouchstart", "2xtouchmove", "2xtouchend"
    ];

    var MobileMonitor = function(props, eventLayer) {
        this._dispatch = d3.dispatch.apply(this, types);
        this._props = {
            "enableClick": true,
            "enableHover": false,
            "enableDown": true,
            "enableUp": true,
            "enableLasso": true,
            "enableDrag": true,
            "enablePinch": true
        };
        this.setProperties(props);
        this._eventLayer = null;
        this._gestureDetectors = [];
        this.registerEvent(eventLayer);
        this._startPoint = null;
        this._focusTarget = null;
        this._status = "standby";
    };

    MobileMonitor.getMonitorEventTypes = function() {
        return types;
    };

    MobileMonitor.prototype.setProperties = function(_) {
        ObjectUtils.extendByRepalceArray(true, this._props, _);
        return this;
    };

    MobileMonitor.prototype.registerEvent = function(eventLayer) {
        this._eventLayer = eventLayer;

        var detector = new PanGestureDetector();
        detector.addGestureAction(this._panHandler.bind(this));
        this.addGestureDetector(detector);

        detector = new PinchGestureDetector();
        detector.addGestureAction(this._pinchhandler.bind(this));
        this.addGestureDetector(detector);

        detector = new PanGestureDetector(2);
        detector.addGestureAction(this._2xtouchhandler.bind(this));
        this.addGestureDetector(detector);

        var touchHandler = this._touchHandler.bind(this);
        if (UADetector.isWindowsSurface()) {
            this._eventLayer.on("pointerdown.monitor", touchHandler)
                .on("pointermove.monitor", touchHandler)
                .on("pointerup.monitor", touchHandler)
                .on("pointercancel.monitor", touchHandler)
                .on("pointerleave.monitor", touchHandler); // "pointerleave" event is a must for windows surface.
                
        } else {
            this._eventLayer.on("touchstart.monitor", touchHandler)
                .on("touchmove.monitor", touchHandler)
                .on("touchend.monitor", touchHandler)
                .on("touchcancel.monitor", touchHandler);
        }
        return this;
    };

    MobileMonitor.prototype.addGestureDetector = function(gd) {
        if (gd instanceof GestureDetector) {
            gd.enable(true);
            this._gestureDetectors.push(gd);
        }
    };

    MobileMonitor.prototype.destroy = function() {
        var eventLayer = this._eventLayer;
        this._eventLayer = null;
        if (eventLayer) {
            if (UADetector.isWindowsSurface()) {
                eventLayer.on("pointerdown.monitor", null)
                    .on("pointermove.monitor", null)
                    .on("pointerup.monitor", null)
                    .on("pointercancel.monitor", null)
                    .on("pointerleave.monitor", null);
            } else {
                eventLayer.on("touchstart.monitor", null)
                    .on("touchmove.monitor", null)
                    .on("touchend.monitor", null)
                    .on("touchcancel.monitor", null);
            }
        }
        this._dispatch = null;
        this._props = null;
        this._startPoint = null;
        this._focusTarget = null;
        this._status = null;
        this._gestureDetectors = null;

    };

    MobileMonitor.prototype.getDispatch = function() {
        return this._dispatch;
    };

    MobileMonitor.prototype.resetStatus = function() {
        this._startPoint = null;
        this._focusTarget = null;
        this._status = "standby";
    };

    MobileMonitor.prototype.getOriginalEvent = function() {
        return this._originalEvent;
    };


    MobileMonitor.prototype._touchHandler = function() {

        function getCurrentEvent() {
            if (d3.event) {
                return d3.event;
            } else {
                return window.event;
            }
        }

        function pointEvent2TouchEvent(event) {
            if (event.type === "pointerdown" || event.type === "pointermove" ||
                event.type === "pointerup" || event.type === "pointercancel" ||
                event.type === "pointerleave") {

                var touch = {
                    clientX: event.clientX,
                    clientY: event.clientY,
                    pageX: event.pageX,
                    pageY: event.pageY,
                    screenX: event.screenX,
                    screenY: event.screenY,
                    identifier: event.pointerId,
                    target: event.target
                };
                event.touches = [touch];
                event.changedTouches = [touch];
                event.targetTouches = [touch];
            }
        }

        function handleGestureDetect(grs, origTouchEvent) {
            for (var i = 0, gd, len = grs.length; i < len; i++) {
                gd = grs[i];
                switch (origTouchEvent.type) {
                    case 'pointerdown':
                    case 'touchstart':
                        gd.touchBegin(origTouchEvent);
                        break;
                    case 'pointermove':
                    case 'touchmove':
                        gd.touchMove(origTouchEvent);
                        break;
                    case 'pointerup':
                    case 'touchend':
                    case 'pointerleave':
                        gd.touchEnd(origTouchEvent);
                        break;
                    case 'pointercancel':
                    case 'touchcancel':
                        gd.touchCancel(origTouchEvent);
                        break;
                }
            }
        }

        var originalEvent = getCurrentEvent();
        this._originalEvent = originalEvent;
        pointEvent2TouchEvent(originalEvent);
        handleGestureDetect(this._gestureDetectors, originalEvent);
    };

    function onChartArea(target, eventLayer) {
        if (!target || !target.getAttribute) {
            return false;
        }
        if (target === eventLayer) {
            return true;
        } else if (target.parentNode) {
            return onChartArea(target.parentNode, eventLayer);
        }
        return false;
    }

    function distance(p1, p2) {
        var dx = p1.x - p2.x;
        var dy = p1.y - p2.y;
        return Math.sqrt(dx * dx + dy * dy);
    }

    MobileMonitor.prototype._panHandler = function(go) {
        var status = this._status;
        var currentPoint = go.globalLocOfTouchPoints();
        var currentTarget = document.elementFromPoint(currentPoint.x, currentPoint.y);
        switch (go.state) {
            case TRANSITION_STATE.Began:
                if (status === "lasso" || status === "drag") {
                    this._fireEvent(status + "end", currentPoint);
                }

                if (this._startPoint && this._focusTarget) {
                    this._fireEvent("up", this._startPoint, this._focusTarget);
                }
                this._startPoint = currentPoint;
                this._focusTarget = currentTarget;

                this._status = "focus";
                this._fireEvent("hover", currentPoint, currentTarget);
                this._fireEvent("down", currentPoint, currentTarget);
                break;
            case TRANSITION_STATE.Changed:
                if (status === "standby") {
                    return;
                }

                var eventType = this._props.enableLasso && !UADetector.isWindowsPhone() && go.isLongPress() ?
                    "lasso" : "drag";
                if (UADetector.isWindowsSurface() && eventType === "drag" && this.getOriginalEvent()
                    .pointerType === "mouse") {
                    return;
                }
                switch (status) {
                    case "focus":
                        this._status = eventType;
                        this._fireEvent("up", this._startPoint, this._focusTarget);
                        this._fireEvent(eventType + "start", this._startPoint, currentTarget);
                        this._fireEvent(eventType + "move", currentPoint, currentTarget);
                        break;
                    case "lasso":
                    case "drag":
                        if (!onChartArea(currentTarget, this._eventLayer.node())) {
                            this._fireEvent(status + "end", currentPoint);
                            this.resetStatus();
                        } else {
                            this._fireEvent(status + "move", currentPoint, currentTarget);
                        }
                        break;
                }
                break;
            case TRANSITION_STATE.Ended:
                switch (status) {
                    case "focus":
                        this._fireEvent("up", this._startPoint, this._focusTarget);
                        this._fireEvent("click", this._startPoint, this._focusTarget);
                        break;
                    case "lasso":
                    case "drag":
                        this._fireEvent(status + "end", currentPoint, currentTarget);
                        break;
                }
                this.resetStatus();
                break;
            case TRANSITION_STATE.Canceled:
            case TRANSITION_STATE.Failed:
                switch (status) {
                    case "focus":
                        this._fireEvent("up", this._startPoint, this._focusTarget);
                        break;
                    case "lasso":
                    case "drag":
                        this._fireEvent(status + "end", currentPoint, currentTarget);
                        break;
                }
                this.resetStatus();
                break;
        }
        if (status === "lasso") {
            this.getOriginalEvent().preventDefault();
        }
    };

    MobileMonitor.prototype._2xtouchhandler = function(go) {
        var currentPoint = go.globalLocOfTouchPoints();
        switch (go.state) {
            case TRANSITION_STATE.Began:
                this._fireEvent("2xtouchstart", currentPoint);
                break;
            case TRANSITION_STATE.Changed:
                this._fireEvent("2xtouchmove", currentPoint);
                break;
            case TRANSITION_STATE.Ended:
            case TRANSITION_STATE.Canceled:
            case TRANSITION_STATE.Failed:
                this._fireEvent("2xtouchend", currentPoint);
                break;
        }
        this.getOriginalEvent().preventDefault();
    };

    MobileMonitor.prototype._pinchhandler = function(gesture) {
        var centerPoint = gesture.globalLocOfGesture();
        var currentScale = Math.round(gesture.scale() * 100) / 100;
        switch (gesture.state) {
            case TRANSITION_STATE.Began:
                this._fireEvent("pinchstart", centerPoint, null, currentScale);
                break;
            case TRANSITION_STATE.Changed:
                this._fireEvent("pinchmove", centerPoint, null, currentScale);
                break;
            default:
                this._fireEvent("pinchend", centerPoint, null, currentScale);
                break;
        }
        this.getOriginalEvent().preventDefault();
    };

    function getFlagCategoryByEventType(type) {
        return "enable" + type.substring(0, 1).toUpperCase() + type.substring(1);
    }

    MobileMonitor.prototype._fireEvent = function(type, point, target, scale) {
        var temptarget;
        if (target) {
            temptarget = target;
        } else {
            temptarget = this._eventLayer.node();
        }
        var tempEvent = {
            name: type,
            data: {
                point: point,
                target: temptarget,
                originalEvent: this.getOriginalEvent()
            }
        };
        if (scale) {
            tempEvent.data.scale = scale;
        }
        if (["click", "hover", "down", "up"].indexOf(type) > -1) {
            var flagCategory = getFlagCategoryByEventType(type); //"focus" -> "enableFocus"
            if (this._props[flagCategory]) {
                this._dispatch[type](tempEvent);
            }
        } else if (["dragstart", "dragmove", "dragend"].indexOf(type) > -1) {
            if (this._props.enableDrag) {
                this._dispatch[type](tempEvent);
            }
        } else if (['pinchstart', 'pinchmove', 'pinchend'].indexOf(type) > -1) {
            if (this._props.enablePinch) {
                this._dispatch[type](tempEvent);
            }
        } else {
            this._dispatch[type](tempEvent);
        }
    };

    return MobileMonitor;
});
define('sap/viz/framework/common/util/EventDispatch',[], function() {
    var EventDispatch = function() {
        this._edp_dispatch = d3.dispatch.apply(d3, arguments);
        this._copyEventTypes(this._edp_dispatch, false);
    };

    EventDispatch.prototype._copyEventTypes = function(d3Dispatch, copyToLocalDispatch) {
        for (var newType in d3Dispatch) {
            if (d3Dispatch.hasOwnProperty(newType)) {
                this[newType] = d3Dispatch[newType];
                if (copyToLocalDispatch) {
                    this._edp_dispatch[newType] = d3Dispatch[newType];
                }
            }
        }
    };

    EventDispatch.prototype.addEventTypes = function() {
        var tempDispatch = d3.dispatch.apply(d3, arguments);
        this._copyEventTypes(tempDispatch, true);
        return this;
    };

    EventDispatch.prototype.on = function(type, listenFn) {
        return this._edp_dispatch.on(type, listenFn);
    };

    EventDispatch.prototype.destroy = function() {
        var dis = this._edp_dispatch;
        if (dis) {
            for (var i in dis) {
                if (dis.hasOwnProperty(i)) {
                    dis.on(i, null);
                }
            }
        }
        this._edp_dispatch = null;
    };

    return EventDispatch;
});
define('sap/viz/framework/interaction/ActionItem',[
    "sap/viz/framework/interaction/Constants",
    "sap/viz/framework/common/util/TypeUtils"
], function(Constants, TypeUtils) {
    var DEFAULT_CHART_TYPE_KEY = Constants.BEHAVIOR.DEFAULT_CHART_TYPE_KEY;
    var ALL_TARGETS = Constants.BEHAVIOR.ALL_TARGETS;

    var ActionItem = function(option) {
        this._trigger = null;
        this._handlers = null;
        if (option) {
            var trigger = option.triggerEvent;
            if (trigger) {
                if (option.declaredEvents && (TypeUtils.isString(option.declaredEvents) || TypeUtils.isArray(
                    option.declaredEvents))) {
                    trigger.onAfterRegistered = (function(events) {
                        return function() {
                            this.exposeMoreEvents(events);
                        };
                    })(option.declaredEvents);
                }
                if (option.destroy && TypeUtils.isFunction(option.destroy)) {
                    trigger.onBeforeUnregistered = option.destroy;
                }
                this.setTrigger(trigger);
            }
            if (option.handler) {
                this.setHandler(option.handler);
            }
        }
    };

    ActionItem.prototype.clone = function() {
        var clone = new ActionItem();
        clone.setTrigger(this._trigger);
        this._handlers.forEach(function(e) {
            clone.addHandler(e);
        });
        return clone;
    };

    function turnToArray(elem) {
        if (TypeUtils.isArray(elem)) {
            return elem;
        } else if (TypeUtils.isString(elem)) {
            return [elem];
        } else {
            return null;
        }
    }

    ActionItem.prototype.setTrigger = function(trigger) {
        var current = this._trigger;
        if (!current) {
            current = (this._trigger = {});
        }
        current.name = trigger.name;
        current.excludeTargets = turnToArray(trigger.excludeTargets);

        [{
            "field": "targets",
            "defaultValue": ALL_TARGETS
        }, {
            "field": "supportedChartTypes",
            "defaultValue": DEFAULT_CHART_TYPE_KEY
        }].forEach(function(e) {
            var temp = trigger[e.field];
            if (temp == null || temp === e.defaultValue) {
                current[e.field] = e.defaultValue;
            } else {
                current[e.field] = turnToArray(temp);
            }
        });

        ["onAfterRegistered", "onBeforeUnregistered"].forEach(function(e) {
            current[e] = TypeUtils.isFunction(trigger[e]) ? trigger[e] : null;
        });
        return this;
    };

    ActionItem.prototype.getTrigger = function() {
        return this._trigger;
    };

    ActionItem.prototype.setHandler = function(handler) {
        if (!TypeUtils.isFunction(handler)) {
            return this;
        }
        this.removeHandler();
        this._handlers = [handler];
        return this;
    };

    ActionItem.prototype.addHandler = function(handler) {
        if (!TypeUtils.isFunction(handler)) {
            return this;
        }
        if (!this._handlers) {
            this._handlers = [];
        }
        this._handlers.push(handler);
        return this;
    };

    ActionItem.prototype.removeHandler = function(handler) {
        if (arguments.length) {
            var index = this._handlers.indexOf(handler);
            if (index > -1) {
                this._handlers.splice(index, 1);
            }
        } else {
            this._handlers = null;
        }
        return this;
    };

    ActionItem.prototype.getHandler = function() {
        return this._handlers;
    };

    ActionItem.prototype.destroy = function() {
        this._trigger = null;
        this._handlers = null;
    };

    return ActionItem;

});
define('sap/viz/framework/interaction/Behavior',[
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/framework/common/util/EventDispatch",
    "sap/viz/framework/interaction/ActionItem"
], function(TypeUtils, EventDispatch, ActionItem) {

    var Behavior = function() {
        this._actionItems = {};
        this._evtDisp = null;
    };

    /**
     *@this {Behavior}
     *@returns {Object} a cloned behavior object.
     */
    Behavior.prototype.clone = function() {
        var clone = new Behavior();
        for (var key in this._actionItems) {
            if (this._actionItems.hasOwnProperty(key)) {
                clone.addAction(key, this._actionItems[key].clone());
            }
        }
        return clone;
    };

    /**
     *@param {String} name The event name to be exposed.
     *@this {Behavior}
     *@returns {Object} the behavior object itself.
     *
     *@override
     *@param {Array} name The array of event name to be exposed.
     *@this {Behavior}
     *@returns {Object} the behavior object itself.
     */
    Behavior.prototype.exposeMoreEvents = function(name) {
//        if (TypeUtils.isArray(arguments[0])) {
//            this._dispatch.addEventTypes.apply(this._dispatch, arguments[0]);
//            this._dispatchTypes = arguments[0].concat(this._dispatchTypes);
//        } else {
//            this._dispatch.addEventTypes.apply(this._dispatch, arguments);
//            this._dispatchTypes = [].slice.call(arguments).concat(this._dispatchTypes);
//        }
        return this;
    };


    Behavior.prototype.eventDispatcher = function(evtDisp) {
        if (arguments.length) {
            this._evtDisp = evtDisp;
            return this;
        }
        return this._evtDisp;
    };

    /**
     * dispatch external event
     *@param {String} name The event name to be dispatched.
     *@param {Object} data The event data to be dispatched.
     *@this {Behavior}
     */
    Behavior.prototype.dispatchEvent = function(name, data) {
        var evtDisp = this._evtDisp;
        window.setTimeout(function() {
            evtDisp.fire(name, data);
        }, 1);
    };

    Behavior.prototype.addAction = function(id, action) {
        if (action instanceof ActionItem) {
            var current = this._actionItems[id];
            if (current && current.getTrigger().onBeforeUnregistered) {
                current.getTrigger().onBeforeUnregistered.call(this);
            }
            this._actionItems[id] = action;
            if (action.getTrigger().onAfterRegistered) {
                action.getTrigger().onAfterRegistered.call(this);
            }
        }
        return this;
    };

    Behavior.prototype.getActionById = function(id) {
        if (this._actionItems[id]) {
            return this._actionItems[id];
        }
        return null;
    };

    Behavior.prototype.removeActionById = function(id) {
        var current = this._actionItems[id];
        if (current && current.getTrigger().onBeforeUnregistered) {
            current.getTrigger().onBeforeUnregistered.call(this);
        }
        delete this._actionItems[id];
        return this;
    };

    Behavior.prototype.getAllActions = function(id) {
        return this._actionItems;
    };

    /**
     *@param {String} key the trigger's id to be triggered.
     *@param {Object} event the event data.
     *@param {Object} service the interaction service object.
     *@this {Behavior}
     *@returns {Object} the behavior object itself.
     */
    Behavior.prototype.trigger = function(key, event, service) {
        var current = this._actionItems[key];
        if (!current) {
            return;
        }
        var ret;
        current.getHandler().forEach(function(handler) {
            ret = handler.call(this, event, service);
        }, this);
        return ret;
    };

    Behavior.prototype.destroy = function() {
        for (var key in this._actionItems) {
            if (this._actionItems.hasOwnProperty(key)) {
                this.removeActionById(key);
            }
        }
        this._actionItems = null;
        this._evtDisp = null;
    };

    return Behavior;
});
define('sap/viz/framework/interaction/BehaviorManager',[
    "sap/viz/framework/interaction/Behavior"
], function(Behavior) {

    var BehaviorManager = {
        _map: {},
        get: function(id) {
            if (id && this._map[id]) {
                this._map[id].updated = false;
                return this._map[id].bhr;
            } else {
                return new Behavior();
            }
        },
        register: function(id, bhr) {
            if (bhr instanceof Behavior) {
                if (!this._map[id]) {
                    this._map[id] = {};
                } else {
                    if (this._map[id].bhr !== bhr) {
                        //if not the same instance, destroy last one.
                        this._map[id].bhr.destroy();
                    }
                }
                this._map[id].updated = true;
                this._map[id].bhr = bhr;
            }
            return this;
        },
        unregister: function(id) {
            if (this._map[id]) {
                this._map[id].bhr.destroy();
                delete this._map[id];
            }
            return this;
        },
        hasUpdate: function(id) {
            if (this._map[id]) {
                return this._map[id].updated;
            } else {
                return false;
            }
        },
        has : function(id) {
            if (this._map[id]) {
                return true;
            } else {
                return false;
            }
        }
    };

    return BehaviorManager;

});
define('sap/viz/framework/interaction/InteractionService',[
    "sap/viz/framework/common/util/TypeUtils"
], function(TypeUtils) {
    var InteractionService = function(option) {
        this._status = {};
        this._runtime = option.runtime;
        this._rootNode = option.rootNode;
        this._chartView = option.chartView;
        this._dispatch = d3.dispatch("fire");
    };

    InteractionService.prototype.setStatus = function(key, value) {
        this._status[key] = value;
        return this;
    };

    InteractionService.prototype.getStatus = function(key) {
        return this._status[key];
    };

    InteractionService.prototype.removeStatus = function(key) {
        if (this._status){
            delete this._status[key];
        }
        return this;
    };

    InteractionService.prototype.resetStatus = function() {
        this._status = {};
        return this;
    };

    InteractionService.prototype.getProperties = function() {
        // TODO Jove fix the temp propertyMgr reference here
        return this._runtime._propertyMgr;
    };
    
    // TODO: Remove this API
    InteractionService.prototype.getChartView = function() {
        return this._chartView;
    };
    
    InteractionService.prototype.getBindingMetaData = function() {
        return this._chartView.getBindingMetaData();
    };

    InteractionService.prototype.getRootNode = function() {
        return this._rootNode;
    };

    InteractionService.prototype.getModule = function(key) {
        var path = key.split(".");
        var component = this._chartView;
        for (var i = 0; i < path.length; ++i) {
            if (!component || !component.getChild || !component.getChild(path[i])) {
                component = null;
                break;
            } else {
                component = component.getChild(path[i]).module;
            }
        }
        return component;
    };

    InteractionService.prototype.getDispatch = function() {
        return this._dispatch;
    };

    InteractionService.prototype.fireEvent = function(event, data, useDefault) {
        if (TypeUtils.isString(event)) {
            this._dispatch.fire({
                name: event,
                data: data ? data : {},
                useDefault: useDefault
            });
        } else if (TypeUtils.isString(event.name)) {
            this._dispatch.fire({
                name: event.name,
                data: event.data ? event.data : {},
                useDefault: arguments[1]
            });
        }
        return this;
    };

    InteractionService.prototype.runtime = function() {
        return this._runtime;
    };
    
    InteractionService.prototype.destroy = function() {
        this._status = null;
        this._runtime = null;
        this._data = null;
        this._rootNode = null;
        this._dispatch = null;
        this._chartView = null;
    };

    return InteractionService;
});
define('sap/viz/framework/interaction/Interaction',[
    "sap/viz/framework/common/util/ArrayUtils",
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/framework/common/util/DOM",
    "sap/viz/framework/common/util/UADetector",
    "sap/viz/framework/interaction/Constants",
    "sap/viz/framework/interaction/DesktopMonitor",
    "sap/viz/framework/interaction/MobileMonitor",
    "sap/viz/framework/interaction/BehaviorManager",
    "sap/viz/framework/interaction/InteractionService"
], function(ArrayUtils, TypeUtils, DOM, UADetector,
    Constants, DesktopMonitor, MobileMonitor, 
    BehaviorManager, InteractionService) {

    var BehaviorConstants = Constants.BEHAVIOR;

    var DEFAULT_CHART_TYPE_KEY = BehaviorConstants.DEFAULT_CHART_TYPE_KEY;
    var DEFAULT_BEHAVIOR_ID = BehaviorConstants.DEFAULT_BEHAVIOR_ID;
    var ALL_TARGETS = BehaviorConstants.ALL_TARGETS;

    function setBehaviorTypeFunc() {
        var that = this;
        return function(value, config) {
            var propBehaviorType;
            if (!TypeUtils.isString(value)) {
                propBehaviorType = DEFAULT_BEHAVIOR_ID;
                value = config.defaultValue;
            } else {
                propBehaviorType = value;
            }

            if (!that._currentBehavior || (that._currentBehaviorType !== propBehaviorType) ||
                BehaviorManager.hasUpdate(propBehaviorType)) {

                that._currentBehaviorType = propBehaviorType;
                if (that._currentBehavior) {
                    that._service.fireEvent("beforeBehaviorUnloaded", null);
                    that._currentBehavior.destroy();
                }
                that._currentBehavior = BehaviorManager.get(propBehaviorType).clone();
                that._currentBehavior.eventDispatcher(that._evtDisp);
                that._triggerMap =
                    buildEventTriggerMap(that._currentBehavior, that._chartType, that.getMonitorEventTypes());
                that._service.fireEvent("afterBehaviorLoaded", null);
            }
            return value;
        };
    }

    var Interaction = function(option) {
        this._enabled = true;
        this._monitor = null;
        this._currentBehavior = null;
        this._currentBehaviorType = null;
        this._service = new InteractionService(option);
        this._service.getDispatch().on("fire", this._logicEventHandler.bind(this));
        this._evtDisp = option.runtime.eventDispatcher();
        this._rootNode = this._service.getRootNode();
        this._rootNode.style("cursor", "default");
        var properties = this._service.getProperties();
        properties.add({
            "interaction": {
                "selectability": {
                    "mode": {
                        set: function(value, config) {
                            var selMode = value.toUpperCase();
                            switch (selMode) {
                                case Constants.SELECTION_MODE.INCLUSIVE:
                                case Constants.SELECTION_MODE.EXCLUSIVE:
                                case Constants.SELECTION_MODE.NONE:
                                case Constants.SELECTION_MODE.SINGLE:
                                case Constants.SELECTION_MODE.MULTIPLE:
                                    return value;
                                default:
                                    return config.defaultValue;
                            }
                        }
                    }
                },
                "behaviorType": {
                    defaultValue: null,
                    set: setBehaviorTypeFunc.call(this)
                }
            }
        });
        this._chartType = option.chartType;
        this._backgroundRect = null;
        this._triggerMap = null;
    };

    Interaction.prototype.initialize = function() {
        var handler = this._logicEventHandler.bind(this);
        //this._service.getDispatch().on("fire", handler);
        var dispatch = this._monitor.getDispatch();
        var types = this.getMonitorEventTypes();
        types.forEach(function(e) {
            dispatch.on(e, handler);
        });
        this._service.fireEvent("afterChartRendered", null);
    };

//    Interaction.prototype.dispatch = function() {
//        return this._currentBehavior ? this._currentBehavior.getDispatch() : d3.dispatch();
//    };

    Interaction.prototype.destroy = function() {
        if (this._monitor) {
            var dispatch = this._monitor.getDispatch();
            var types = this.getMonitorEventTypes();
            types.forEach(function(e) {
                dispatch.on(e, null);
            });
            this._monitor.destroy();
        }
        this._monitor = null;
        if (this._currentBehavior) {
            this._service.fireEvent("beforeBehaviorUnloaded", null);
            this._currentBehavior.destroy();
        }
        this._currentBehavior = null;
        if (this._service) {
            this._service.getDispatch().on("fire", null);
            this._service.destroy();
        }
        
        if (this._evtDisp) {
            this._evtDisp.destroy();
        }
        this._evtDisp = null;
        this._service = null;
        this._rootNode = null;
        this._props = null;
        this._backgroundRect = null;
        this._currentBehaviorType = null;
        this._triggerMap = null;
    };

    /**
     * Enable/disable all interactions or get the status of enabled.
     * @param {boolean} [enabled]
     * @return {boolean|Interaction}
     */
    Interaction.prototype.enabled = function(enabled){
        if(!arguments.length){
            return this._enabled;
        }
        this._enabled = enabled;
        return this;
    };

    Interaction.prototype._getMonitor = function(props) {
        return UADetector.isMobile() ?
            new MobileMonitor(props, this._rootNode) :
            new DesktopMonitor(props, this._rootNode);
    };

    Interaction.prototype.initializeBehavior = function() {
        var props = this._service.getProperties().get("interaction");
        this._monitor = this._monitor || this._getMonitor(props);
        this._monitor.setProperties(props);

        if (!this._currentBehavior) {
            this._currentBehaviorType = DEFAULT_BEHAVIOR_ID;
            this._currentBehavior = BehaviorManager.get(DEFAULT_BEHAVIOR_ID).clone();
            this._currentBehavior.eventDispatcher(this._evtDisp);
            this._triggerMap =
                buildEventTriggerMap(this._currentBehavior, this._chartType, this.getMonitorEventTypes());
            this._service.fireEvent("afterBehaviorLoaded", null);
        }
    };

    Interaction.prototype.getMonitorEventTypes = function (){
        return UADetector.isMobile() ?
            MobileMonitor.getMonitorEventTypes() :
            DesktopMonitor.getMonitorEventTypes();
    };

    function buildEventTriggerMap(behavior, currentType, monitorTypes) {
        var actions = behavior.getAllActions();
        var map = {};
        for (var key in actions) {
            if (actions.hasOwnProperty(key)) {
                var trigger = actions[key].getTrigger();
                var eventName = trigger.name;
                if (eventName) {
                    var chartType = trigger.supportedChartTypes;
                    var mapKey;
                    if (chartType === DEFAULT_CHART_TYPE_KEY) {
                        mapKey = DEFAULT_CHART_TYPE_KEY;
                    } else if (chartType === currentType || (TypeUtils.isArray(chartType) && chartType.indexOf(
                        currentType) > -1)) {
                        mapKey = currentType;
                    } else {
                        continue;
                    }
                    if (!map[mapKey]) {
                        map[mapKey] = {};
                    }
                    if (!map[mapKey][eventName]) {
                        map[mapKey][eventName] = [];
                    }
                    map[mapKey][eventName].push(key);
                }
            }
        }
        //merge current chart type's trigger with default trigger
        if (map[currentType]) {
            for (key in map[currentType]) {
                if (map[DEFAULT_CHART_TYPE_KEY][key] && monitorTypes.indexOf(key) > -1) { //only merge raw event case
                    var clonedDefaultMap = map[DEFAULT_CHART_TYPE_KEY][key].slice();
                    for (var i = 0; i < map[currentType][key].length; i++) {
                        var currentTrigger = behavior.getActionById(map[currentType][key][i]).getTrigger();
                        for (var j = 0; j < map[DEFAULT_CHART_TYPE_KEY][key].length; j++) {
                            var defaultTrigger =
                                behavior.getActionById(map[DEFAULT_CHART_TYPE_KEY][key][j]).getTrigger();
                            //if same targets and excludeTargets,
                            //replace default one with chart-type-specified one's trigger
                            if (isSameTrigger(currentTrigger, defaultTrigger)) {
                                clonedDefaultMap.splice(j, 1);
                            }
                        }
                    }
                    map[currentType][key] = clonedDefaultMap.concat(map[currentType][key]);
                }
            }
        }
        return map;
    }

    function isEquivalentArray(a1, a2) {
        return ArrayUtils.equal(a1.slice().sort(), a2.slice().sort());
    }

    function isSameTrigger(currentTrigger, defaultTrigger) {
        var flag = true;
        ["targets", "excludeTargets"].forEach(function(e) {
            if (!TypeUtils.isArray(currentTrigger[e]) || !TypeUtils.isArray(defaultTrigger[e])) {
                if (currentTrigger[e] !== defaultTrigger[e]) {
                    flag = false;
                }
            } else {
                if (!isEquivalentArray(currentTrigger[e], defaultTrigger[e])) {
                    flag = false;
                }
            }
        });
        return flag;
    }

    Interaction.prototype._logicEventHandler = function(event) {
        /**
         * trigger event after behavior is loaded to initialize required status like selectedDataPoints
         * event it is set to disable for example, ghost mode. Otherwise, status will not be correct when the 
         * chart is updated later.
         */
        if(this._enabled || event.name === "afterBehaviorLoaded"){
            var eventName = event.name,
                behavior = this._currentBehavior,
                mapKey;
            if (event.useDefault) {
                mapKey = DEFAULT_CHART_TYPE_KEY;
                delete event.useDefault;
            } else if (this._triggerMap[this._chartType] && this._triggerMap[this._chartType][eventName]) {
                mapKey = this._chartType;
            } else if (this._triggerMap[DEFAULT_CHART_TYPE_KEY] && 
                    this._triggerMap[DEFAULT_CHART_TYPE_KEY][eventName]) {
                mapKey = DEFAULT_CHART_TYPE_KEY;
            }

            if (mapKey) {
                this._triggerMap[mapKey][eventName].forEach(function(key) {
                    var trigger = behavior.getActionById(key).getTrigger();
                    if ((this.getMonitorEventTypes().indexOf(eventName) < 0) || isTriggerActivated(trigger,
                        event, this._rootNode)) {
                        behavior.trigger(key, event, this._service);
                    }
                }, this);
            }
        }
    };

    function isTriggerActivated(trigger, event, rootNode) {
        if ((!trigger.targets && !trigger.excludeTargets) || trigger.name !== event.name) {
            return false;
        }
        var ret = false;

        var foundInclude, notFoundExclude;
        var eventData = event.data;
        var eventTarget = eventData.target;

        if (trigger.targets === ALL_TARGETS) {
            foundInclude = eventTarget;
        } else {
            foundInclude = tryToFindNode(trigger.targets, eventTarget, rootNode);
        }
        if (trigger.excludeTargets == null) {
            notFoundExclude = true;
        } else {
            notFoundExclude = !tryToFindNode(trigger.excludeTargets, eventTarget, rootNode);
        }

        if (foundInclude && notFoundExclude) {
            ret = true;
            eventData.currentTarget = foundInclude;
        }
        return ret;
    }

    function tryToFindNode(cssClass, node, rootNode) {
        if (!node || !node.getAttribute) {
            return null;
        }

        for (var i = 0; i < cssClass.length; i++) {
            if (DOM.hasClass(node, cssClass[i])) {
                return node;
            }
        }

        if (node !== rootNode.node()) {
            //not found in this level, try its parent node
            return tryToFindNode(cssClass, node.parentNode, rootNode);
        }
        return null;
    }

    return Interaction;

});

define('sap/viz/framework/property/PropertyManager',[
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/framework/common/util/ObjectUtils"
], function(TypeUtils, ObjectUtils) {

    var isFunction = TypeUtils.isFunction;

    /**
     * Manage property CRUD operations.
     * The purpose of PropertyManager is to provide a central place for public
     * property access and management. Note that if a property is only
     * accessible by a module itself, it need not be put into property manager.
     * @class
     */
    function PropertyManager() {
        this._props = {};
        this._cache = {};
        this._watchers = {};
        this.origin = this;
    }

    var prot = PropertyManager.prototype;

    /**
     * Property name level separator
     */
    prot.separator = '.';

    /**
     * Add a new property to this manager, or override an existing property.
     * @param {string} key - the name of the property
     * @param {object} [config] - configuration of this property
     * @param {boolean} [safe] - if true, existing properties (or prefix) won't be overrided
     * @example
     * propMgr.add("some.prop");
     * propMgr.add("some.prop", { readonly: true });
     * propMgr.add({
     *    "some.prop": { readonly: true }
     * });
     * propMgr.add({
     *    "some": {
     *        "prop": { readonly: true },
     *        "other.prop": { serializable: false }
     *    }
     * });
     * propMgr.add({
     *     "some": {
     *         "prop": "default value"
     *     }
     * });
     */
    prot.add = function(key, config, safe) {
        var obj = key;
        if (typeof key === 'string') {
            obj = {};
            obj[key] = config;
        } else {
            safe = config;
        }
        if (this._prefix) {
            var tmp = obj;
            obj = {};
            obj[this._prefix] = tmp;
        }
        addAll(this, obj, '', safe);
    };

    /**
     * Remove a property
     * @param {string} key - the name of the property
     */
    prot.remove = function(key) {
        key = getKey(this, key);
        if (this._allow(key, 'remove')) {
            delete this._props[key];
        }
    };

    /**
     * Get an array of property names with the given prefix
     * @param {string} [prefix] - a common prefix of property names
     * @return {array} property full names
     */
    prot.names = function(prefix) {
        prefix = getPrefix(this, prefix);
        var result = [];
        var storage = this._cache[prefix] || this._props;
        for (var key in storage) {
            if (storage.hasOwnProperty(key)){
                result.push(key);
            }
        }
        return result;
    };

    /**
     * Check whether a property exists
     * @param {string} key - the name of the property
     * @param {string} [attr] - if provided, check whether the specified attribute exists
     * @return {boolean} whether this property exists
     */
    prot.has = function(key, attr) {
        var config = this._props[getKey(this, key)];
        if(config && configKeywords[attr]){
            return config.hasOwnProperty(attr);
        }
        return !!config;
    };

    /**
     * Get the value of a property, or get values of a bunch of properties.
     * @param {string} [key] - the name of the property, or a prefix of a bunch of properties.
     * @param {string} [attr] - if provided, get the specified attribute instead of value
     * @return {*}
     * @example
     * // get a single property:
     * var visible = propMgr.get('title.visible');
     * // get a bunch of properties by prefix:
     * var props = propMgr.get('title');
     * var visible = props.visible;
     * // check whether a property is readonly:
     * var readonly = propMgr.get('title.visible', 'readonly');
     * // check whether a bunch of properties are readonly:
     * var readonlys = propMgr.get('title', 'readonly');
     * var readonly = readonlys.visible;
     * // get all properties in this property manager (or proxy):
     * var props = propMgr.get();
     */
    prot.get = function(key, attr) {
        key = getKey(this, key);
        return (this._props[key] ? get : getMultiple)(this, key, attr);
    };

    /**
     * Set property value, and notify all watchers when the new value is
     * different from the old one.
     * @param {string} key - the name of the property
     * @param {*} value - the new value of the property
     * @param {boolean} [forced=false] - whether force to set even if the property is readonly
     * @param {string} [attr] - if provided, set the specified attribute instead of value
     * @example
     * // set a single property value:
     * propMgr.set('legend.title.color', '#cccccc');
     * // set a bunch of properties by providing a prefix:
     * propMgr.set('legend', {
     *      title: {
     *          visible: true,
     *          color: '#cccccc'
     *      }
     * });
     * // set a bunch of properties withour prividing a prefix:
     * propMgr.set({
     *      legend: {
     *          title: {
     *              visible: true,
     *              color: '#cccccc'
     *          },
     *          "layout.position": right
     *      }
     * });
     * // force to set a readonly property:
     * propMgr.set('legend.title.text', 'abc', true);
     * // set a property to be serializable:
     * propMgr.set('legend.title.color', true, true, 'serializable');
     */
    prot.set = function(key, value, forced, attr) {
        if (typeof key !== 'string') {
            attr = forced;
            forced = value;
            value = key;
            key = '';
        }
        key = getKey(this, key);
        (this._props[key] ? set : setMultiple)(this, key, value, forced, attr);
    };

    /**
     * Reset (delete) a property attribute, by default reset the value
     * @param {string} key - the name of the property
     * @param {string} [attr] - if provided, delete the specified attribute instead of value
     */
    prot.reset = function(key, attr){
        var config = this._props[getKey(this, key)];
        attr = attr || 'value';
        if(config && configKeywords[attr]){
            delete config[attr];
            config.watchers = config.watchers || [];
        }
    };

    /**
     * Watch a property, get notified when it is changed.
     * @param {string} key - the name of the property
     * @param {function} callback
     * @return {object} a handler object holding a remove function to unwatch.
     * @example
     * var handler = propMgr.watch("some.prop", function(newValue, oldValue, key){});
     * handler.remove();
     */
    prot.watch = function(key, callback){
        if(typeof key !== 'string'){
            callback = key;
            key = '';
        }
        key = getKey(this, key);
        var watchers = this._watchers[key] = this._watchers[key] || [];
        if(watchers.indexOf(callback) < 0){
            watchers.push(callback);
        }
        return {
            remove: function(){
                var idx = watchers.indexOf(callback);
                if (idx >= 0) {
                    watchers.splice(idx, 1);
                }
            }
        };
    };

    /**
     * Load property values from a previously serialized object
     * @param {object} obj
     */
    prot.load = function(obj, prefix) {
        if (obj) {
            prefix = getPrefix(this, prefix);
            var storage = this._props;
            var dict = getPlainDict(this, prefix, obj, this.separator);
            for (var key in obj) {
                if (obj.hasOwnProperty(key) && this._allow(key, 'load')) {
                    storage[key] = storage[key] || {};
                    storage[key].value = obj[key];
                }
            }
        }
    };

    /**
     * Serialize all changed properties to an object
     * @param {object} [args]
     * @return {object}
     * @example
     * // only changed serializable properties are serialized.
     * var obj = propMgr.serialize();
     * // both changed and unchanged serializable properties are serialized.
     * var obj = propMgr.serialize({ all: true });
     * // customize what to serialize
     * var obj = propMgr.serialize({
     *      filter: function(key, value, defaultValue){
     *          return key != "somestring";
     *      }
     * });
     */
    prot.serialize = function(args) {
        args = args || {};
        var storage = this._props;
        var result = {};
        var hasFilter = isFunction(args.filter);
        for (var key in storage) {
            if (storage.hasOwnProperty(key)) {
                var config = storage[key];
                if (config && (config.serializable || config.serializable === undefined)) {
                    var value = get(this, key);
                    // provide a chance to customize what to serialize
                    if ((hasFilter && args.filter(key, value, getDefaultValue(config), config)) ||
                        // Unless explicitly specified, only serialize changed values
                        (!hasFilter && (args.all || config.hasOwnProperty('value')))) {
                        value = isFunction(config.serialize) ? config.serialize(value) : value;
                        ObjectUtils.setObject(key, value, result, this.separator);
                    }
                }
            }
        }
        return result;
    };

    /**
     * Get the default value of a property
     * @param {string} key - the name of the property
     * @return {*}
     */
    prot.getDefault = function(key) {
        return this.get(key, 'defaultValue');
    };

    /**
     * Set the default value of a property
     * @param {string} key - the name of the property
     * @param {*} value - the default value of the property
     */
    prot.setDefault = function(key, value) {
        if (typeof key !== 'string') {
            value = key;
            key = '';
        }
        this.set(key, value, 1, 'defaultValue');
    };

    /**
     * Reset the default values to the registered ones (i.e, default values in
     * "add"). All the changed default values (i.e, by template) will be
     * reverted.
     */
    prot.resetDefault = function() {
        var storage = this._props;
        for(var key in storage){
            if(storage.hasOwnProperty(key)){
                storage[key].templateValue = undefined;
            }
        }
    };

    /**
     * Return a proxy of this manager that works under a given prefix
     * @param {string} [prefix] - prefix that the result manager will work with
     * @return {PropertyManager}
     */
    prot.proxy = function(prefix) {
        var proxy = new PropertyManager();
        proxy._prefix = getPrefix(this, prefix);
        proxy._props = this._props;
        proxy._cache = this._cache;
        proxy._watchers = this._watchers;
        proxy._allow = this._allow;
        proxy.parentLevel = this;
        proxy.origin = this.origin;
        return proxy;
    };

    /**
     * Destroy this manager
     */
    prot.destroy = function(){
        this._props = null;
        this._cache = null;
        this._watchers = null;
        this.origin = null;
    };

    /**
     * The original property manager of this proxy. If this is not a proxy,
     * then this.origin is undefined.
     * @member: origin
     */

    // Protected ------------------------------------------------------

    /**
     * Check whether a property is allowed to be accessed.
     * By default it is always true, but this method can be overrided to
     * provide some authorization control.
     * @param {string} key
     * @param {string} operation
     * @param {string} [attr]
     * @return {boolean} anything truthy
     */
    prot._allow = function( /*key, operation, attr*/ ) {
        return true;
    };

    // Private------------------------------------------------------

    var configKeywords = {
        value: 1,
        type: 1,
        templateValue: 1,
        defaultValue: 1,
        set: 1,
        get: 1,
        readonly: 1,
        serializable: 1,
        serialize: 1,
        compare: 1,
        watchers: 1
    };

    function addAll(manager, properties, prefix, safe) {
        prefix = prefix ? prefix + manager.separator : '';
        for (var key in properties) {
            if (properties.hasOwnProperty(key) && !configKeywords[key] && key) {
                addProp(manager, prefix + key, properties[key], safe);
            }
        }
    }

    function addProp(manager, key, config, safe) {
        var storage = manager._props;
        var obj = storage[key] || {};
        var isProp, hasSubprop;
        var allow = 1;
        var parts, prefix, i;

        if(safe){
            // Safe mode should not override existing properties
            parts = key.split(manager.separator);
            if(manager._cache[key]){
                // adding an existing prefix is not allowed
                allow = 0;
            }else{
                for(i = 0; i < parts.length; ++i){
                    prefix = prefix ? prefix + manager.separator + parts[i] : parts[i];
                    if(storage[prefix]){
                        // If any prefix of this key is an existing property, it is not allowed
                        allow = 0;
                        break;
                    }
                }
            }
        }

        config = isValue(config) ? {
            defaultValue: config
        } : config || {};
        for (var arg in config) {
            if (configKeywords[arg]) {
                isProp = 1;
                if(allow){
                    if(/value/i.test(arg)){
                        obj[arg] = normalizeType(config[arg], config);
                    }else{
                        obj[arg] = config[arg];
                    }
                }
            } else {
                hasSubprop = 1;
            }
        }
        if ((isProp || !hasSubprop) && key !== manager._prefix && allow) {
            if(typeof obj.defaultValue === 'boolean' && !obj.type){
                obj.type = 'boolean';
            }
            if(!storage.hasOwnProperty(key)){
                parts = parts || key.split(manager.separator);
                prefix = '';
                for(i = 0; i < parts.length; ++i){
                    prefix = prefix ? prefix + manager.separator + parts[i] : parts[i];
                    var cache = manager._cache[prefix] = manager._cache[prefix] || {};
                    cache[key] = obj;
                }
            }
            obj.watchers = obj.watchers || [];
            storage[key] = obj;
        }
        if (hasSubprop) {
            // search for hierarchical properties
            addAll(manager, config, key, safe);
        }
    }

    function get(manager, key, attr) {
        var config = manager._props[key];
        if (config && manager._allow(key, 'get', attr)) {
            if (!attr || attr === 'value') {
                var value = getValue(config);
                return isFunction(config.get) ? config.get(value, config) : value;
            }else if(attr === 'defaultValue'){
                return getDefaultValue(config);
            }
            return config[attr];
        }
    }

    function set(manager, key, value, forced, attr) {
        var config = manager._props[key];
        if (config && manager._allow(key, 'set', attr) && (!config.readonly || forced)) {
            if (!attr || attr === 'value') {
                var oldValue = getValue(config);
                var newValue = isFunction(config.set) ? config.set(value, config) : value;
                newValue = config.value = normalizeType(newValue, config);
                if (isValueChanged(config, newValue, oldValue)) {
                    onChange(manager, key, newValue, oldValue);
                }
            } else {
                config[attr] = value;
            }
        }
    }

    function getPrefix(manager, prefix) {
        return manager._prefix && prefix ?
            manager._prefix + manager.separator + prefix :
            prefix || manager._prefix || '';
    }

    function getKey(manager, key, prefix) {
        prefix = getPrefix(manager, prefix);
        return key ? (prefix ? prefix + manager.separator : '') + key : prefix;
    }

    function getMultiple(manager, prefix, attr) {
        var properties = prefix ? manager._cache[prefix] || {} : manager._props;
        var prefixLength = prefix ? prefix.length + manager.separator.length : 0;
        var result = {};
        var path;
        for(var key in properties){
            if(properties.hasOwnProperty(key) && (path = key.substring(prefixLength))){
                ObjectUtils.setObject(path, get(manager, key, attr), result, manager.separator);
            }
        }
        return path ? result : undefined;
    }

    function setMultiple(manager, prefix, values, forced, attr) {
        values = getPlainDict(manager, prefix, values, manager.separator);
        for (var key in values) {
            if (values.hasOwnProperty(key)) {
                set(manager, key, values[key], forced, attr);
            }
        }
    }

    function getPlainDict(manager, prefix, obj, separator, dict) {
        dict = dict || {};
        if (!isValue(obj)) {
            prefix = prefix ? prefix + separator : '';
            for (var name in obj) {
                if (obj.hasOwnProperty(name)) {
                    var value = obj[name];
                    if (manager._props[prefix + name]) {
                        dict[prefix + name] = value;
                    } else {
                        getPlainDict(manager, prefix + name, value, separator, dict);
                    }
                }
            }
        }
        return dict;
    }

    // Event ----------------------------------------------------------------

    function onChange(manager, key, newValue, oldValue){
        function notify(watchers){
            if(watchers){
                for(var i = 0; i < watchers.length; ++i){
                    watchers[i](newValue, oldValue, key);
                }
            }
        }
        var sep = manager.separator;
        for(var parts = key.split(sep); parts.length; parts.pop()){
            notify(manager._watchers[parts.join(sep)]);
        }
        notify(manager._watchers['']);
    }

    // Utility ---------------------------------------------------------------

    function getValue(config){
        return config.hasOwnProperty('value') ? config.value : getDefaultValue(config);
    }

    function getDefaultValue(config){
        return config.templateValue === undefined ? config.defaultValue : config.templateValue;
    }

    function isValueChanged(config, newValue, oldValue) {
        return isFunction(config.compare) ?
            config.compare(newValue, oldValue) :
            newValue !== oldValue;
    }

    function isValue(it) {
        return typeof it !== 'object' || it instanceof Array;
    }

    function normalizeType(v, config){
        if(/^boolean$/i.test(config.type)){
            if(/^true$/i.test(v)){
                v = true;
            }else if(/^false$/i.test(v)){
                v = false;
            }
        }
        return v;
    }

    return PropertyManager;
});

define('sap/viz/framework/common/effect/EffectManager',['sap/viz/framework/common/util/ObjectUtils'],
    function Setup(ObjectUtils) {

        /**
         *
         * @param svgdef d3 svg defs to store all gradient effect
         * @return TODO: add desc
         */
        function EffectManager(svgdef, enableGhostEffect) {
            this._defs = svgdef;
            this._enableGhostEffect = enableGhostEffect;
            this._glossyIds = [];
        }

        EffectManager.prototype.rgba = function(r_, g_, b_, a_, signForOpacity) {
            var temp = {
                r: r_,
                g: g_,
                b: b_,
                a: a_,
                toHex: function() {
                    return d3.rgb(temp.r, temp.g, temp.b).toString();
                },
                toString: function() {
                    if (temp.a <= 1 && signForOpacity === true) {
                        return "rgba(" + temp.r + "," + temp.g + "," + temp.b + "," + temp.a + ")";
                    } else if (temp.a < 1) {
                        return "rgba(" + temp.r + "," + temp.g + "," + temp.b + "," + temp.a + ")";
                    } else {
                        return temp.toHex();
                    }
                }
            };
            return temp;
        };

        EffectManager.prototype.color2rgba = function(color, a) {
            var nc = d3.rgb(0, 0, 0),
                na = 1,
                signForOpacity;
            if (a) {
                na = a;
                signForOpacity = true;
            }
            if (color != null && typeof(color) === 'object') {
                if (color.rgb) {
                    nc = color.rgb();
                } else {
                    nc = color;
                }
            } else if (typeof(color) === 'string') {
                color = color.toLowerCase();
                var temp, i, j;
                if (color.indexOf('rgba') >= 0) {
                    temp = color.substring(color.indexOf('(') + 1);

                    i = temp.lastIndexOf(',');
                    j = temp.indexOf(')');
                    if (i >= 0 && j >= 0) {
                        var rgbStr = 'rgb(' + temp.substring(0, i) + ')';
                        na = parseFloat(temp.substring(i + 1, j));
                        nc = d3.rgb(rgbStr);
                    }
                } else if (color.indexOf('hsla') >= 0) {
                    temp = color.substring(color.indexOf('(') + 1);

                    i = temp.lastIndexOf(',');
                    j = temp.indexOf(')');
                    if (i >= 0 && j >= 0) {
                        var hslStr = 'hsl(' + temp.substring(0, i) + ')';
                        na = parseFloat(temp.substring(i + 1, j));
                        nc = d3.hsl(hslStr).rgb();
                    }
                } else if (color.indexOf('hsl') >= 0) {
                    nc = d3.hsl(color).rgb();
                } else if (color.indexOf('#') >= 0) {
                    var r, g, b;
                    if (color.length === 4) {
                        r = color.charAt(1);
                        r += r;
                        g = color.charAt(2);
                        g += g;
                        b = color.charAt(3);
                        b += b;
                    } else if (color.length === 7) {
                        r = color.substring(1, 3);
                        g = color.substring(3, 5);
                        b = color.substring(5, 7);
                    }
                    r = parseInt(r, 16);
                    g = parseInt(g, 16);
                    b = parseInt(b, 16);
                    nc = d3.rgb(r, g, b);
                } else {
                    nc = d3.rgb(color);
                }
            }
            return this.rgba(nc.r, nc.g, nc.b, na, signForOpacity);
        };

        EffectManager.prototype.rgba2gray = function(c) {
            var r = c.r,
                g = c.g,
                b = c.b,
                gc;

            if ((r === g) && (g === b)) {
                gc = Math.round(r + (255 - r) * 0.6);
            } else {
                gc = Math.round((r * 299 + g * 587 + b * 114 + 500) / 1000);
            }
            return this.rgba(gc, gc, gc, c.a);
        };

        function increaseBrightness(c, percent) {
            var r = c.r,
                g = c.g,
                b = c.b,
                nr, ng, nb;
            if (percent >= 0) {
                nr = Math.round(r + (255 - r) * percent / 100);
                ng = Math.round(g + (255 - g) * percent / 100);
                nb = Math.round(b + (255 - b) * percent / 100);
            } else {
                nr = Math.round(r * (100 + percent) / 100);
                ng = Math.round(g * (100 + percent) / 100);
                nb = Math.round(b * (100 + percent) / 100);
            }
            return this.rgba(nr, ng, nb, c.a);
        }

        function drawGlossySector(d3defs, id, c, radius) {
            var c0 = c.toHex();
            var c2 = increaseBrightness.call(this, c, 50).toHex();
            var c3 = increaseBrightness.call(this, c, -30).toHex();

            var d3rg = d3defs.append('radialGradient');
            var rg = d3rg[0][0];
            rg.setAttribute('id', id);
            rg.setAttribute('cx', 0);
            rg.setAttribute('cy', 0);
            rg.setAttribute('r', radius);
            rg.setAttribute('fx', 0);
            rg.setAttribute('fy', 0);
            rg.setAttribute('gradientUnits', "userSpaceOnUse");
            d3rg.append("stop").attr('stop-opacity', c.a).attr("offset", 0).attr("stop-color", c2);
            d3rg.append("stop").attr('stop-opacity', c.a).attr("offset", 0.9).attr("stop-color", c0);
            d3rg.append("stop").attr('stop-opacity', c.a).attr("offset", 1).attr("stop-color", c3);
        }

        function drawGlossy3dSector(d3defs, id, c) {
            var c0 = c.toHex();
            var c1 = increaseBrightness.call(this, c, 10).toHex();
            var c2 = increaseBrightness.call(this, c, 60).toHex();

            var d3rg = d3defs.append('radialGradient');
            var rg = d3rg[0][0];
            rg.setAttribute('id', id);
            rg.setAttribute('cx', '50%');
            rg.setAttribute('cy', '50%');
            rg.setAttribute('r', '50%');
            rg.setAttribute('fx', '25%');
            rg.setAttribute('fy', '25%');
            rg.setAttribute('gradientUnits', "userSpaceOnUse");
            d3rg.append("stop").attr('stop-opacity', c.a).attr("offset", 0).attr("stop-color", c2);
            d3rg.append("stop").attr('stop-opacity', c.a).attr("offset", 0.8).attr("stop-color", c1);
            //d3rg.append("stop").attr('stop-opacity', c.a).attr("offset", 0.9).attr("stop-color", c0);
            d3rg.append("stop").attr('stop-opacity', c.a).attr("offset", 1).attr("stop-color", c0);
        }

        function drawGlossyCircle(d3defs, id, c) {
            var c0 = c.toHex();
            var c1 = increaseBrightness.call(this, c, 10).toHex();
            var c2 = increaseBrightness.call(this, c, 80).toHex();

            var d3rg = d3defs.append('radialGradient');
            var rg = d3rg[0][0];
            rg.setAttribute('id', id);
            rg.setAttribute('cx', '50%');
            rg.setAttribute('cy', '50%');
            rg.setAttribute('r', '50%');
            rg.setAttribute('fx', '50%');
            rg.setAttribute('fy', '20%');
            d3rg.append("stop").attr('stop-opacity', c.a).attr("offset", 0).attr("stop-color", c2);
            d3rg.append("stop").attr('stop-opacity', c.a).attr("offset", 0.7).attr("stop-color", c1);
            d3rg.append("stop").attr('stop-opacity', c.a).attr("offset", 0.9).attr("stop-color", c0);
            d3rg.append("stop").attr('stop-opacity', c.a).attr("offset", 1).attr("stop-color", c0);
        }

        function drawGlossyRectangle(d3defs, id, c, direction) {
            var c1 = increaseBrightness.call(this, c, 30).toHex();
            var c2 = increaseBrightness.call(this, c, 50).toHex();
            var c3 = increaseBrightness.call(this, c, -10).toHex();
            var c4 = increaseBrightness.call(this, c, 10).toHex();
            var gradient = d3defs.append("svg:linearGradient").attr("id", id).attr("x1", "0%").attr("y1", "0%");
            if (direction === 'horizontal') {
                gradient.attr("y2", "0%").attr("x2", "100%");
            } else {
                gradient.attr("y2", "100%").attr("x2", "0%");
            }

            gradient.append("stop").attr('stop-opacity', c.a).attr("offset", 0).attr("stop-color", c1);
            gradient.append("stop").attr('stop-opacity', c.a).attr("offset", 0.2).attr("stop-color", c2);
            gradient.append("stop").attr('stop-opacity', c.a).attr("offset", 0.8).attr("stop-color", c3);
            gradient.append("stop").attr('stop-opacity', c.a).attr("offset", 1).attr("stop-color", c4);
        }

        function drawGlossyCubeTopSurface(d3defs, id, c, direction) {
            var c1 = increaseBrightness.call(this, c, 50).toHex();
            var c2 = increaseBrightness.call(this, c, -10).toHex();

            var gradient = d3defs.append("svg:linearGradient").attr("id", id);

            switch (direction) {
                case "LeftRight":
                    gradient.attr("x1", "0%").attr("y1", "0%").attr("y2", "0%").attr("x2", "100%");
                    break;
                case "BottomUp":
                    gradient.attr("x1", "0%").attr("y1", "100%").attr("y2", "0%").attr("x2", "0%");
                    break;
                case "RightLeft":
                    gradient.attr("x1", "100%").attr("y1", "0%").attr("y2", "0%").attr("x2", "0%");
                    break;
                case "TopDown":
                    gradient.attr("x1", "0%").attr("y1", "0%").attr("y2", "100%").attr("x2", "0%");
                    break;
                default:
                    gradient.attr("x1", "0%").attr("y1", "0%").attr("y2", "0%").attr("x2", "100%");
            }
            gradient.append("stop").attr('stop-opacity', c.a).attr("offset", 0).attr("stop-color", c2);
            gradient.append("stop").attr('stop-opacity', c.a).attr("offset", 1).attr("stop-color", c1);
        }

        function drawGlossyCubeSideSurface(d3defs, id, c, direction) {
            var c1 = increaseBrightness.call(this, c, 50).toHex();
            var c2 = increaseBrightness.call(this, c, -10).toHex();

            var gradient = d3defs.append("svg:linearGradient").attr("id", id).attr("x1", "0%").attr("y1", "100%").attr(
                "y2", "0%").attr("x2", "100%");

            gradient.append("stop").attr('stop-opacity', c.a).attr("offset", 0).attr("stop-color", c2);
            gradient.append("stop").attr('stop-opacity', c.a).attr("offset", 1).attr("stop-color", c1);
        }

        function drawGlossySectorSideSurface(d3defs, id, c, direction) {
            var c1 = increaseBrightness.call(this, c, 50).toHex();
            var c2 = increaseBrightness.call(this, c, -30).toHex();

            var gradient = d3defs.append("svg:linearGradient").attr("id", id).attr("x1", "0%").attr("y1", "100%").attr(
                "y2", "0%").attr("x2", "100%");

            gradient.append("stop").attr('stop-opacity', c.a).attr("offset", 0).attr("stop-color", c2);
            gradient.append("stop").attr('stop-opacity', c.a).attr("offset", 1).attr("stop-color", c1);
        }

        function drawGlossyBackground(d3defs, id, c, direction) {
            var gradient = d3defs.append("svg:linearGradient").attr("id", id);
            if (direction === 'horizontal') {
                gradient.attr("x1", "100%").attr("y1", "0%").attr("x2", "0%").attr("y2", "0%");
            } else {
                gradient.attr("x1", "0%").attr("y1", "0%").attr("x2", "0%").attr("y2", "100%");
            }

            gradient.append("stop").attr('stop-opacity', c.a).attr("offset", 0).attr("stop-color", '#ffffff');
            gradient.append("stop").attr('stop-opacity', c.a).attr("offset", 1).attr("stop-color", c.toHex());
        }

        function getExistedFillElementId(parameters) {
            if (parameters.drawingEffect !== "glossy") {
                return;
            }

            for (var i = 0; i < this._glossyIds.length; i++) {
                var prop = this._glossyIds[i].parameter;
                if (prop['fillColor'] === parameters['fillColor'] &&
                    prop['direction'] === parameters['direction']) {
                    if (prop['graphType'] === 'sector' && parameters['graphType'] === 'sector') {
                        if (prop.radius === parameters.radius) {
                            return this._glossyIds[i].id;
                        }
                    } else if (prop['graphType'] === parameters['graphType']) {
                        return this._glossyIds[i].id;
                    }
                }
            }
        }

        function getFillElementId(parameters) {
            var id;

            if (parameters.drawingEffect === "glossy") {

                if (parameters.graphType === 'line') {
                    id = null;
                } else {
                    id = parameters.drawingEffect + ObjectUtils.guid();
                    this._glossyIds.push({
                        id: id,
                        parameter: {
                            fillColor: parameters.fillColor,
                            direction: parameters.direction,
                            graphType: parameters.graphType,
                            radius: parameters.radius
                        }
                    });
                }
            }

            return id;
        }
        /**
         *
         * @param parameters
         * {
         *   graphType: 'circle','square','diamond'.....
         *   drawingEffect,
         *   fillColor,
         *   direction,  "horizontal" means left to right. "vertical" means top to bottom
         * }
         * @return id to use in "fill"
         */

        EffectManager.prototype.register = function(parameters, a) {
            parameters.drawingEffect = parameters.drawingEffect || 'normal';
            var originalColor = parameters.fillColor;
            if (typeof(originalColor) === 'string') {
                if ((originalColor.toLowerCase() === 'transparent') ||
                    (originalColor.toLowerCase() === 'none')) {
                    return originalColor;
                }
            }

            var color = this.color2rgba(originalColor, a);
            if (this._enableGhostEffect) {
                color = this.rgba2gray(color);
            }

            var id = getExistedFillElementId.call(this, parameters);
            if (id) {
                return "url(#" + id + ")";
            }

            id = getFillElementId.call(this, parameters);
            if (!id) {
                return color.toString();
            }

            var element = this._defs.select("#" + id);
            if (element.empty()) {
                if (parameters.drawingEffect === "glossy") {
                    switch (parameters.graphType) {
                        case 'background':
                            drawGlossyBackground.call(this, this._defs, id, color, parameters.direction);
                            break;
                        case 'sector':
                            drawGlossySector.call(this, this._defs, id, color, parameters.radius);
                            break;
                        case '3dSector':
                            drawGlossy3dSector.call(this, this._defs, id, color);
                            break;
                        case 'cubeTop':
                            drawGlossyCubeTopSurface.call(this, this._defs, id, color, parameters.direction);
                            break;
                        case 'cubeSide':
                            drawGlossyCubeSideSurface.call(this, this._defs, id, color);
                            break;
                        case 'sectorSide':
                            drawGlossySectorSideSurface.call(this, this._defs, id, color);
                            break;
                        case 'circle':
                            drawGlossyCircle.call(this, this._defs, id, color, parameters.direction);
                            break;
                        case 'triangle-up':
                        case 'triangle-down':
                            drawGlossyRectangle.call(this, this._defs, id, color, 'vertical');
                            break;
                        case 'triangle-left':
                        case 'triangle-right':
                            drawGlossyRectangle.call(this, this._defs, id, color, 'horizontal');
                            break;
                        case 'rectangle':
                        case 'diamond':
                        case 'cross':
                        case 'star':
                        case 'intersection':
                            drawGlossyRectangle.call(this, this._defs, id, color, parameters.direction);
                            break;
                        default:
                            drawGlossyRectangle.call(this, this._defs, id, color, parameters.direction);
                            break;
                    }
                } else {
                    return color.toString();
                }
            }
            return "url(#" + id + ")";
        };

        EffectManager.prototype.container = function(container) {
            if (!arguments.length) {
                return this._defs;
            }
            this._defs = container;
        };

        EffectManager.prototype.ghostEffect = function(_) {
            if (!arguments.length) {
                return this._enableGhostEffect;
            }
            this._enableGhostEffect = _;
        };

        EffectManager.prototype.destroy = function() {
            this._defs = null;
            this._enableGhostEffect = null;
            this._glossyIds = null;
        };
        return EffectManager;
    });
define('sap/viz/framework/common/semantic/SemanticManager',['sap/viz/framework/common/util/RuleUtil',
    'sap/viz/framework/common/lang/LangManager'
], function(RuleUtil, langManager) {

    var SemanticManager = function() {
        this._dataPointPropName = null;
        this._lineStylePropName = null;
        this._propMgr = null;
        this._handlers = [];
        this._onDataPointChangeHook = null;
    };

    SemanticManager.prototype.destroy = function() {
        this._dataPointPropName = null;
        this._lineStylePropName = null;
        this._propMgr = null;
        this._handlers = null;
        this._onDataPointChangeHook = null;
    };
    
    SemanticManager.prototype.setDependency = function(propMgrProxy) {
        this._propMgr = propMgrProxy;
    };

    SemanticManager.prototype.bindDataPointProperty = function(name) {

        if (this._dataPointPropName === name) {
            return;
        }

        this._dataPointPropName = name;

        if (this._onDataPointChangeHook) {
            this._onDataPointChangeHook.remove();
        }

        if (this._handlers.length === 0) {
            return;
        }

        this._onDataPointChangeHook = this._propMgr.watch(this._dataPointPropName, (function() {
            var handlers = this._handlers;
            handlers.forEach(function(handler) {
                handler();
            });
        }).bind(this));
    };

    SemanticManager.prototype.bindLineStyleProperty = function(names) {
        this._lineStylePropName = names;
    };

    SemanticManager.prototype.addDataPointChangeCallback = function(fn) {
        this._handlers.push(fn);
    };

    SemanticManager.prototype.hasDataPointStyle = function() {

        if (this._dataPointPropName == null) {
            return false;
        }

        var dataPoinStyle = this._propMgr.get(this._dataPointPropName);
        return dataPoinStyle != null && dataPoinStyle.rules != null;
    };

    SemanticManager.prototype.hasDataPointColorStyle = function() {

        if (this._dataPointPropName == null) {
            return false;
        }

        var dataPoinStyle = this._propMgr.get(this._dataPointPropName);

        if (dataPoinStyle == null || dataPoinStyle.rules == null) {
            return false;
        }

        var allRules = dataPoinStyle.rules;

        for (var index = 0; index < allRules.length; index++) {
            if (allRules[index].properties == null || allRules[index].properties.color == null) {
                continue;
            }
            return true;
        }

        return false;
    };

    SemanticManager.prototype.hasDataPointDataLabelStyle = function() {

        if (this._dataPointPropName == null) {
            return false;
        }

        var dataPoinStyle = this._propMgr.get(this._dataPointPropName);

        if (dataPoinStyle == null || dataPoinStyle.rules == null) {
            return false;
        }

        var allRules = dataPoinStyle.rules;

        for (var index = 0; index < allRules.length; index++) {
            if (allRules[index].properties == null || allRules[index].properties.dataLabel == null) {
                continue;
            }
            return true;
        }

        return false;
    };


    SemanticManager.prototype.hasDataPointStyleOthers = function() {

        if (this._dataPointPropName == null) {
            return false;
        }

        var dataPoinStyle = this._propMgr.get(this._dataPointPropName);
        return dataPoinStyle && dataPoinStyle.others != null;
    };

    SemanticManager.prototype.analyzeDataPoint = function(ctx) {

        if (this._dataPointPropName == null) {
            throw "The data point property name is required";
        }

        var dataPoinStyle = this._propMgr.get(this._dataPointPropName);

        return RuleUtil.analyze(ctx, RuleUtil.withProperty(dataPoinStyle, 'color', this.getOthersStyle()), true);
    };

    SemanticManager.prototype.analyzeDataPointDataLabel = function(ctx) {

        if (this._dataPointPropName == null) {
            throw "The data point property name is required";
        }

        var dataPoinStyle = this._propMgr.get(this._dataPointPropName);

        return RuleUtil.analyze(ctx, RuleUtil.withProperty(dataPoinStyle, 'dataLabel', this.getOthersStyle()), true);
    };

    /**
     * WARNING, this function is only used by Legend, it removes the default others from semantic colored legend
     */
    SemanticManager.prototype.getDataPointColorScale = function() {

        var dataPoinStyle = this._propMgr.get(this._dataPointPropName);

        if (dataPoinStyle == null) {
            return [];
        }

        // if doesn't exist others property, add default others property
        dataPoinStyle = RuleUtil.withProperty(dataPoinStyle, 'color', this.getOthersStyle());

        var rules = dataPoinStyle.rules;
        var domain = [];
        var range = [];
        var ruleCondition = [];
        var hasOtherCondition = false;
        var displayName;
        for (var index = 0; index < rules.length; index++) {

            if (rules[index].properties.color == null) {
                continue;
            }

            displayName = rules[index].displayName;

            if (displayName == null) {
                displayName = (langManager.get("IDS_SEMANTICCOLORRANGE") + (index + 1));
            }

            domain.push(displayName);
            range.push(rules[index].properties.color);
            ruleCondition.push(rules[index].callback || rules[index].dataContext);
        }

        var others = dataPoinStyle.others;

        if (others != null && !others.hideInLegend) {

            displayName = others.displayName;

            if (displayName == null) {
                displayName = langManager.get("IDS_SEMANTICCOLOROTHERS");
            }

            domain.push(displayName);
            range.push(others.properties.color);
            hasOtherCondition = true;
        }

        return new SemanticColorScaleAdapter(domain, range, ruleCondition, hasOtherCondition);
    };

    SemanticManager.prototype.analyzeLineStyle = function(context) {
        var props = this._lineStylePropName.slice(),
            style = null;
        
        if (!props || props.length === 0) {
            throw "The line style property name is required";
        }

        if (typeof props === "string") {
            style = this._propMgr.get(this._lineStylePropName);
        } else if (props instanceof Array){
            while (props.length > 0 && !(style && Object.keys(style).length > 0)) {
                style = this._propMgr.get(props.pop());
            }
        }        

        style = RuleUtil.withProperty(style, "width", false);
        return style ? RuleUtil.analyze(context, style, true) : null;
    };

    SemanticManager.prototype.getOthersStyle = function() {
        var dataPoinStyle = this._propMgr.get(this._dataPointPropName);
        if(dataPoinStyle && dataPoinStyle.others && dataPoinStyle.others.properties &&
                undefined !== dataPoinStyle.others.properties.color &&
                null !== dataPoinStyle.others.properties.color &&
                '' !== dataPoinStyle.others.properties.color) {
            return {
                properties: dataPoinStyle.others.properties
            };
        }
        else {
            return {
                properties: {
                    color: this._propMgr.get("plotArea.defaultOthersStyle.color")
                }
            };
        }        
    };

    function SemanticColorScaleAdapter(domain, range, rules, hasOthers) {
        this._domain = domain;
        this._range = range;
        this._rules = rules;
        this._hasOthers = hasOthers;
    }

    SemanticColorScaleAdapter.prototype.getDomain = function() {
        return this._domain;
    };

    SemanticColorScaleAdapter.prototype.getRange = function() {
        return this._range;
    };

    SemanticColorScaleAdapter.prototype.getRules = function() {
        return this._rules;
    };

    SemanticColorScaleAdapter.prototype.hasOthers = function() {
        return this._hasOthers;
    };

    return SemanticManager;
});

define('sap/viz/framework/common/mark/MarkManager',['sap/viz/framework/common/util/TypeUtils'], function(TypeUtils) {

    var MarkManager = function() {
        this._primaryRestrict = null;
        this._secondaryRestrict = null;
        this._defaultRestrict = null;
    };

    MarkManager.prototype.setDefaultRestrict = function(value) {
        this._defaultRestrict = value;
    };

    MarkManager.prototype.getDefaultRestrict = function() {
        return this._defaultRestrict;
    };

    MarkManager.prototype.setPrimaryAxisRestrict = function(value) {
        this._primaryRestrict = value;
    };

    MarkManager.prototype.setSecondaryAxisRestrict = function(value) {
        this._secondaryRestrict = value;
    };

    MarkManager.prototype.getShape = function(mndIndex, colorIndex) {

        var currentRestrict =
            (colorIndex == null || colorIndex === 0) ? this._primaryRestrict : this._secondaryRestrict;

        if (TypeUtils.isString(currentRestrict)) {
            // line chart
            return currentRestrict;
        } else if (TypeUtils.isArray(currentRestrict)) {
            // combination chart
            return currentRestrict[mndIndex] || this._defaultRestrict;
        } else {
            return this._defaultRestrict;
        }
    };

    MarkManager.prototype.destroy = function() {
        this._primaryRestrict = null;
        this._secondaryRestrict = null;
        this._defaultRestrict = null;
    };
    
    return MarkManager;
});
define('sap/viz/framework/core/Runtime',["sap/viz/framework/property/PropertyManager",
        "sap/viz/framework/common/effect/EffectManager", 
        "sap/viz/framework/common/semantic/SemanticManager",
        "sap/viz/framework/common/mark/MarkManager"], 
function(PropertyManager, EffectManager, SemanticManager, MarkManager) {

    

    var Runtime = function(propertyMgr, effectMgr, semanticMgr, markMgr, scaleMgr, 
            zoneMgr, evtDisp, statusMgr) {
        this._propertyMgr = propertyMgr;
        this._effectMgr = effectMgr;
        this._semanticMgr = semanticMgr;
        this._markMgr = markMgr;
        this._scaleMgr = scaleMgr;
        this._zoneMgr = zoneMgr;
        this._evtDisp = evtDisp;
        this._statusMgr = statusMgr;
        // to forbid attaching other properties
        Object.seal(this);
    };

    function attachPropertyManagerFacade(propertyMgr) {
        var facade = propertyMgr.proxy();
        facade.remove = null;
        facade.names = null;
        facade.load = null;
        facade.serialize = null;
        return facade;
    }
    
    /**
     * TODO For internal usage only, should be moved out here
     * UIComponent uses this method to create a fake Runtime to make sure it can run separately
     */
    Runtime._create = function() {
        var propertyMgr = new PropertyManager();
        var effectMgr = new EffectManager();
        var semanticMgr = new SemanticManager();
        var markMgr = new MarkManager();
        semanticMgr.setDependency(propertyMgr);
        
        return new Runtime(propertyMgr, effectMgr, semanticMgr, markMgr);
    };

    Runtime.prototype = {
        /**
         * Obtain an effect manager from runtime instance.
         * 
         * @return an effect manager instance
         */
        effectManager: function() {
            return this._effectMgr;
        },
        
        /**
         * Obtain a semantic manager from runtime instance.
         * 
         * @return a semantic manager instance
         */
        semanticManager: function() {
            return this._semanticMgr;
        },
        
        /**
         * Obtain a mark manager from runtime instance.
         * 
         * @return a mark manager instance
         */
        markManager: function() {
            return this._markMgr;
        },
        
        /**
         * Obtain a scale manager from runtime instance.
         * 
         * @return a scale manager instance
         */
        scaleManager: function() {
            return this._scaleMgr;
        },
        /**
         * Obtain a zone manager from runtime instance.
         * 
         * @return a zone manager instance
         */
        zoneManager: function() {
            return this._zoneMgr;
        },

        /**
         * Obtain a event manager from runtime instance.
         * 
         * @return a event manager instance
         */
        eventDispatcher: function() {
            return this._evtDisp;
        },

        /**
         * Obtain a status manager from runtime instance.
         * 
         * @return a status manager instance
         */
        statusManager: function() {
            return this._statusMgr;
        },

        
        isDestroyed : function() {
            return (this._propertyMgr == null);
        },
        
        destroy : function() {
            this._propertyMgr = null;
            this._effectMgr = null;
            this._semanticMgr = null;
            this._markMgr = null;
            this._scaleMgr = null;
            this._zoneMgr = null;
            this._evtDisp = null;
            this._statusMgr = null;
        }
    };

    return Runtime;

});

define('sap/viz/framework/common/util/GeometryUtils',['sap/viz/framework/common/util/UADetector'], function(UADetector) {
    var geometry = {};

    /**
     * A safe getBBox function for DOM elements which supports getBBox() function.
     *
     * When an element is invisible (either display:none itself or inside a display:none element), the call to the
     * native getBBox() function behaves differently in different browser. In the latest IE and Chrome, it can
     * peacefully return a SVGRect with all 0s; but it throws exception in firefox.
     *
     * This safe getBBox function takes care of the difference and always return without exception, just like what
     * the latest IE and Chrome would have done.
     *
     * @param node the DOM element
     *
     * @return a SVGRect-like object having "width", "height", "x" and "y" attributes
     */
    geometry.getBBox = UADetector.isFirefox() ? function(node) { // firefox
        try {
            return node.getBBox();
        } catch (e) {
            // not error handling needed
        }

        return {
            width: 0,
            height: 0,
            x: 0,
            y: 0
        };
    } : function(node) { // Chrome and IE
        return node.getBBox();
    };

    return geometry;
});

define('sap/viz/framework/common/util/FeedingZoneUtil',["sap/viz/framework/common/util/GeometryUtils"],
    function Setup(GeometryUtils) {
        var FeedingZoneUtil = {
            buildRes: function(name, feed, selection, byBound) {
                var elements = selection.selectAll('.v-m-' + name);
                var bound = [];
                elements.each(function(d, i) {
                    var rect = GeometryUtils.getBBox(this);
                    if (byBound) {
                        var node = d3.select(this).select('.v-bound').node();
                        if (node === null) {
                            return;
                        }
                        rect = GeometryUtils.getBBox(node);
                    }
                    var transform = this.getTransformToElement(this.ownerSVGElement);
                    if(transform){
                        var point1 = [transform.e + rect.x, transform.f + rect.y];
                        var point2 = [point1[0] + rect.width, point1[1]];
                        var point3 = [point1[0] + rect.width, point1[1] + rect.height];
                        var point4 = [point1[0], point1[1] + rect.height];
                        bound.push([point1, point2, point3, point4]);
                    }
                });
                var res = {
                    name: name,
                    bindDef: feed,
                    bound: bound
                };
                return res;
            },
            xy: function() {
                colorLegend.apply(this, arguments);
            },
            xyy: function() {
                colorLegend.apply(this, arguments);
            },
            pie: function() {
                colorLegend.apply(this, arguments);
            },
            treemap: function() {
                MBCLegend.apply(this, arguments);
            },
            yy: function() {
                var feedingZone = arguments[0];
                var feedDef = arguments[1];
                for (var i in feedingZone) {
                    if (i === 'legend') {
                        feedingZone[i].bindDef = [];
                        for (var j in feedDef) {
                            if (feedDef[j].id === 'color' || feedDef[j].id === 'shape') {
                                feedingZone[i].bindDef.push({id : feedDef[j].id});
                            }
                        }
                    }
                }
            },
            bubble: function() {
                var feedingZone = arguments[0];
                var feedDef = arguments[1];
                for (var i in feedingZone) {
                    if (feedingZone[i].name === 'sizeLegend') {
                        feedingZone[i].bindDef = addSizeLegend.apply(this, arguments);
                        break;
                    }
                }
            },
            scatter: function() {
                var feedingZone = arguments[0];
                var feedDef = arguments[1];
                var sizeLegendPos = -1;
                for (var i in feedingZone) {
                    if (feedingZone.hasOwnProperty(i)) {
                        if (feedingZone[i].name === 'plot') {
                            feedingZone[i].bindDef = feedingZone[i].bindDef.filter(function(e) {
                                if (e.id.indexOf('bubble') < 0) {
                                    return e;
                                }
                            });
                        }
                        if (feedingZone[i].name === 'sizeLegend') {
                            sizeLegendPos = i;
                        }
                    }
                }
                if (sizeLegendPos > -1) {
                    feedingZone.splice(sizeLegendPos, 1);
                }
            },
            plot : function(that) {
                return {
                    tempFeedingZone: {
                        plot: {
                            value: [],
                            readonly: true,
                            serializable: false,
                            get: function() {
                                var node, result, feeding, root;
                                if (that._selections && that._selections.plot &&
                                    that._selections.plot.node()) {
                                    node = that._selections.plot.node();
                                } else if (that._selection) {
                                    node = that._selection.node();//pie, donut
                                }
                                if (node) {
                                    root = d3.select(node.ownerSVGElement);
                                    result = FeedingZoneUtil.buildRes('plot', feeding, root, true);
                                }
                                return result;
                            }
                        }
                    }
                };
            }
        };

        var colorLegend = function() {
            var feedingZone = arguments[0];
            var feedDef = arguments[1];
            for (var i in feedingZone) {
                if (i === 'legend') {
                    feedingZone[i].bindDef = [];
                    for (var j in feedDef) {
                        if (feedDef[j].id === 'color') {
                            feedingZone[i].bindDef.push({id : feedDef[j].id});
                        }
                    }
                }
            }
        };

        var MBCLegend = function() {
            var feedingZone = arguments[0];
            var feedDef = arguments[1];
            for (var i in feedingZone) {
                if (i === 'legend') {
                    feedingZone[i].bindDef = [];
                    for (var j in feedDef) {
                        if (feedDef[j].id === 'color') {
                            feedingZone[i].bindDef.push({id : feedDef[j].id});
                        }
                    }
                }
            }
        };

        var addSizeLegend = function() {
            var feedingZone = arguments[0];
            var feedDef = arguments[1];
            for (var i in feedDef) {
                if (feedDef[i].id === 'bubbleWidth') {
                    for (var j in feedingZone) {
                        if (feedingZone[j].name === 'sizeLegend') {
                            return [{id : feedDef[i].id}];
                        }
                    }
                }
            }
        };
        return FeedingZoneUtil;
    });

define('sap/viz/framework/event/EventDispatcher',[
    "sap/viz/framework/common/util/EventDispatch"
], function(EventDispatch) {

    var EventDispatcher = function() {
        this._dispatch = new EventDispatch();
    };
    
    var pt = EventDispatcher.prototype;
    
    pt.destroy = function() {
        if (this._dispatch) {
            this._dispatch.destroy();
            this._dispatch = null;
        }
    };
    
    pt.on = function(name, handler) {
        var type = name.split(".")[0];
        if (!this._dispatch[type]) {
            this._dispatch.addEventTypes(type);
        }
        this._dispatch.on(name, handler);
        return this;
    };
    
    pt.off = function(name) {
        var type = name.split(".")[0];
        if (this._dispatch[type]) {
            this._dispatch.on(name, null);
        }
        return this;
    };
    
    pt.fire = function(type, data) {
        if (!this._dispatch){
            return;
        }
        if (!this._dispatch[type]) {
            this._dispatch.addEventTypes(type);
        }
        this._dispatch[type](data);
        return this;
    };
    
    return EventDispatcher;
});
define('sap/viz/framework/chartmodel/DataModelManager',[
    'sap/viz/framework/binding/BindingManager'
], function(BindingManager) {

    function DataModelManager(viewLoaderDelegator) {
        this._dataModel = null;
        this._role = null;
        this._viewLoaderDelegator = viewLoaderDelegator;
        this._type = null;
        this._renderType = null;
        this._family = null;
        this._data = null;
        this._bindings = null;
    }

    var prot = DataModelManager.prototype;

    prot.init = function(type, renderType, data, bindings) {
        this._type = type;
        this._renderType = renderType;
        this._data = data;
        this._bindings = bindings;
    };
    
    prot.createDataModel = function() {
        var bindDef = this._viewLoaderDelegator.getBindingDefinition(this._type);
        var bindingManager = BindingManager.getInstance(bindDef.constructor);
        
        bindingManager.setChartType(this._bindings);
        var dataModel = bindingManager.parseDataWithBindingInformation(this._data, 
                this._bindings, 
                bindDef.family + '/' + this._renderType,
                this._type);

        var role = {};
        for (var i in bindDef.constructor) {
            if (bindDef.constructor.hasOwnProperty(i) && dataModel[bindDef.constructor[i].id]) {
                role[bindDef.constructor[i].id] = bindDef.constructor[i];
            }
        }
        this._family = bindDef.family;
        this._dataModel = dataModel;
        this._role = role;
    };
    
    prot.getFamily = function() {
        return this._family;
    };
    
    prot.getDataModel = function() {
        return this._dataModel; 
    };
    
    prot.getRole = function() {
        return this._role; 
    };
    
    prot.clear = function() {
        this._dataModel = null;
        this._role = null;
        this._type = null;
        this._renderType = null;
        this._family = null;
        this._data = null;
        this._bindings = null;
    };
    
    prot.destroy = function() {
        this.clear();
        this._viewLoaderDelegator = null;
    };

    return DataModelManager;
});

define('sap/viz/migrate/scaleMigrator',['sap/viz/framework/common/util/TypeUtils'], function Setup(TypeUtils) {
    var migrateUtils = {};

    var scalesMap = {
        primaryScale: 'valueAxis',
        secondaryScale: 'valueAxis2',
        minValue: 'min',
        maxValue: 'max'
    };
    
    migrateUtils.migrate = function (json) {
        json.scales = this.ChartPropsToScalesProps(json.properties, json.scales);
        return json;
    };
    
    /*
       if scale props is not specified, mapping
           plotArea: {
              primaryScale : {
                fixedRange : true,
                minValue : 0,
                maxValue : 100
              },            
              secondaryScale : {
                fixedRange : true,
                minValue : 20,
                maxValue : 200
              },
              colorPalette : ["#00ffff", "#ff00ff", "#ff1122", "#ffff00", "#f99f99", "#99ff99"],
              shapePalette : ["triangleDown", "triangleUp"]
            }
        to
           {
                "feed": "valueAxis",
                "min": 0,
                "max": 100
            },
            {
                "feed": "valueAxis2",
                "min": 20,
                "max": 200
            },
            {
                "feed": "color",
                "type": "color",
                "palette": ["#00ffff", "#ff00ff", "#ff1122", "#ffff00", "#f99f99", "#99ff99"]
            },
            {
                "feed": "shape",
                "type": "shape",
                "palette": ["triangleDown", "triangleUp"]
            }
          
          for dual case:
            primaryValuesColorPalette : ["#00ffff", "#ff00ff", "#ff1122", "#ffff00", "#f99f99", "#99ff99"],
            secondaryValuesColorPalette :  ["#748CB2", "#9CC677", "#EACF5E", "#F9AD79", "#D16A7C", "#8873A2"]
          to
            {
                "feed": "color",
                "type": "color",
                "palette": [
                               ["#00ffff", "#ff00ff", "#ff1122", "#ffff00", "#f99f99", "#99ff99"],
                               ["#748CB2", "#9CC677", "#EACF5E", "#F9AD79", "#D16A7C", "#8873A2"]
                           ]
            }
    */
    migrateUtils.ChartPropsToScalesProps = function(props, scales) {
        var scale, startColor, endColor, legendValues, cscale;
        if (!props) {
            return scales;
        }
        if (!TypeUtils.isExist(scales)) {
            scales = [];
        }
        var primaryScale = getScales(scales, 'valueAxis'),
            secondaryScale = getScales(scales, 'valueAxis2');
        if (!TypeUtils.isExist(primaryScale) && !TypeUtils.isExist(secondaryScale)) {
            if (props && props.plotArea && props.plotArea.primaryScale && props.plotArea.primaryScale.fixedRange ===
                true) {
                scale = setValue('primaryScale', props.plotArea.primaryScale);
                if (TypeUtils.isExist(scale)) {
                    scales.push(scale);
                }
            }
            if (props && props.plotArea && props.plotArea.secondaryScale && props.plotArea.secondaryScale.fixedRange ===
                true) {
                scale = setValue('secondaryScale', props.plotArea.secondaryScale);
                if (TypeUtils.isExist(scale)) {
                    scales.push(scale);
                }
            }
        }
        var colorScale = getScales(scales, 'color');
        if (!TypeUtils.isExist(colorScale)) {
            if (TypeUtils.isExist(props.plotArea) && TypeUtils.isExist(props.plotArea.colorPalette)) {
                cscale = setPalette('color', props.plotArea.colorPalette);
            }
            var palette = {};
            if (TypeUtils.isExist(props.plotArea) && TypeUtils.isExist(props.plotArea.primaryValuesColorPalette)) {
                palette.primary = props.plotArea.primaryValuesColorPalette;
            }
            if (TypeUtils.isExist(props.plotArea) && TypeUtils.isExist(props.plotArea.secondaryValuesColorPalette)) {
                palette.secondary = props.plotArea.secondaryValuesColorPalette;
            }
            if (TypeUtils.isExist(palette.primary) || TypeUtils.isExist(palette.secondary)) {
                cscale = setPalette('color', palette);
            }
            
            if (TypeUtils.isExist(props.plotArea) && TypeUtils.isExist(props.plotArea.startColor)) {
                startColor = props.plotArea.startColor;
            }
            if (TypeUtils.isExist(props.plotArea) && TypeUtils.isExist(props.plotArea.endColor)) {
                endColor = props.plotArea.endColor;
            }
            if (TypeUtils.isExist(startColor) || TypeUtils.isExist(endColor)) {
                cscale = cscale || {feed:'color'};
                setStartEndColor(cscale, startColor, endColor);
            }
            if (TypeUtils.isExist(props.plotArea) && TypeUtils.isExist(props.plotArea.legendValues)) {
                cscale = cscale || {feed:'color'};
                setLegendValues(cscale, props.plotArea.legendValues);
            }
            if (cscale) {
                scales.push(cscale);
            }
        }
        var shapeScale = getScales(scales, 'shape');
        if (!TypeUtils.isExist(shapeScale)) {
            if (TypeUtils.isExist(props.plotArea) && TypeUtils.isExist(props.plotArea.shapePalette)) {
                scale = setPalette('shape', props.plotArea.shapePalette);
                scales.push(scale);
            }
        }
        return scales;
    };

    var getScales = function(scales, key) {
        for (var i in scales) {
            if (scales[i].feed === key) {
                return scales[i];
            }
        }
    };

    var setPalette = function(feedName, value) {
        var scale;
        scale = {};
        scale.feed = feedName;
        scale.type = feedName;
        if (TypeUtils.isPlainObject(value)) {
            scale.palette = [];
            if (value.primary) {
                scale.palette[0] = value.primary;
            }
            if (value.secondary) {
                scale.palette[1] = value.secondary;
            }
        } else {
            scale.palette = value;
        }
        return scale;
    };

    var setValue = function(prefix, key) {
        var feedName = scalesMap[prefix],
            scale;
        if (TypeUtils.isExist(key.minValue)) {
            if (!TypeUtils.isExist(scale)) {
                scale = {};
                scale.feed = feedName;
            }
            scale.min = key.minValue;
        }
        if (TypeUtils.isExist(key.maxValue)) {
            if (!TypeUtils.isExist(scale)) {
                scale = {};
                scale.feed = feedName;
            }
            scale.max = key.maxValue;
        }
        scale.type = 'linear';//set scale type to linear if scale is set by properties
        return scale;
    };
    
    var setStartEndColor = function(scale, startColor, endColor) {
        if (scale && TypeUtils.isExist(startColor)) {
            scale.startColor = startColor;
        }
        if (scale && TypeUtils.isExist(endColor)) {
            scale.endColor = endColor;
        }
    };
    
    var setLegendValues = function(scale, legendValues) {
        if (scale && TypeUtils.isExist(legendValues)) {
            scale.legendValues = legendValues;
        }
    };
    
    return migrateUtils;
});
define('sap/viz/framework/core/ChartApp',[
    'jquery',
    'sap/viz/framework/common/template/TemplateManager',
    'sap/viz/framework/scale/ScaleManager',
    'sap/viz/framework/binding/BindingManager',
    'sap/viz/framework/interaction/Interaction',
    'sap/viz/framework/core/Runtime',
    'sap/viz/framework/common/util/UADetector',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/util/FeedingZoneUtil',
    'sap/viz/framework/common/util/TypeUtils',
    "sap/viz/framework/property/PropertyManager",
    "sap/viz/framework/common/effect/EffectManager",
    "sap/viz/framework/common/semantic/SemanticManager",
    "sap/viz/framework/common/mark/MarkManager",
    "sap/viz/framework/event/EventDispatcher",
    "sap/viz/framework/common/log/Logger",
    'sap/viz/framework/common/util/NumberUtils',
    "sap/viz/framework/core/ChartViewRegistry",
    'sap/viz/framework/common/lang/LangManager',
    'sap/viz/framework/chartmodel/DataModelManager',
    'sap/viz/migrate/scaleMigrator'
], function (jQuery, TemplateManager, ScaleManager, BindingManager, Interaction, Runtime,
    UADetector, ObjectUtils, FeedingZoneUtil, TypeUtils, 
    PropertyManager, EffectManager, SemanticManager, MarkManager, EventDispatcher, Logger,
    NumberUtils, ChartViewRegistry, LangManager, DataModelManager, scaleMigrateUtil) {

    

    var id = 0;

    function generateAppId() {
        return 'UIComp_' + id++;
    }

    var ChartApp = function (viewLoaderDelegator) {

        this._type = null;
        this._data = null;
        this._bindings = null;
        this._events = null;
        this._properties = null;
        this._scales = null;
        this._sharedRuntimeScales = null;

        this._container = null;
        this._svgContainer = null;

        this._chartView = null;
        this._rootElement = null;
        this._interaction = null;

        this._dataModel = null;
        this._dataRole = null;

        this._dispatchCache = {};
        this._viewLoaderDelegator = viewLoaderDelegator;
        this._size = null;
        this._propertyMgr = new PropertyManager();
        this._effectMgr = new EffectManager();
        this._semanticMgr = new SemanticManager();
        this._semanticMgr.setDependency(this._propertyMgr);
        this._dataModelManager = new DataModelManager(viewLoaderDelegator);
        this._markMgr = new MarkManager();
        this._scaleMgr = new PropertyManager();
        this._zoneMgr = new PropertyManager();
        this._statusMgr = new PropertyManager();
        this._statusMgr.add({
            "interaction.holdSelection": false
        });
        this._evtDisp = new EventDispatcher();

        this._scaleMgr.watch("dataFrame", this.onFrameScaleChange.bind(this));
        
        this._runtime = new Runtime(this._propertyMgr, this._effectMgr, this._semanticMgr,
            this._markMgr, this._scaleMgr, this._zoneMgr, this._evtDisp, this._statusMgr);

        this._i18nListener = {
            fn: this._localeChanged,
            scope: this
        };

        this._timeInterval = null;

        LangManager.addListener(this._i18nListener);
        this._propertyZone.call(this);
        this._feedingZone.call(this);
    };

    /**
     * Get or set the chart type of chart app.
     *
     * @param type {String} chart type
     * @return chart type / ChartApp instance
     */
    ChartApp.prototype.type = function (type) {
        if (arguments.length === 0) {
            return this._type;
        }

        this._type = type;
        return this;
    };

    /**
     * Get or set the data of chart app.
     *
     * @param data
     * @return data / ChartApp instance
     */
    ChartApp.prototype.data = function (data) {
        if (arguments.length === 0) {
            return this._data;
        }
        if (this._dataModelManager) {
            this._dataModelManager.clear();
        }
        
        this._data = data;
        return this;
    };

    /**
     * Get or set the events of chart app.
     *
     * @param events
     * @return events / ChartApp instance
     */
    ChartApp.prototype.events = function (events) {
        if (arguments.length === 0) {
            return this._events;
        }

        this._events = events;
        return this;
    };

    ChartApp.prototype.getDescription = function () {
        return {
            type: this.type(),
            classId: this._container.id
        };
    };
    /**
     * Get or set the bindings of chart app.
     *
     * @param bindings
     * @return bindings / ChartApp instance
     */
    ChartApp.prototype.bindings = function (bindings) {
        if (arguments.length === 0) {
            return this._bindings;
        }

        this._bindings = bindings;

        // if change feeding, initialize data model object
        if (this._dataModelManager) {
            this._dataModelManager.clear();
        }

        return this;
    };

    /**
     * Get or set the properties of chart app.
     *
     * @param properties
     * @return properties / ChartApp instance
     */
    ChartApp.prototype.properties = function (properties) {
        var propMgr = this._propertyMgr;
        if (!arguments.length || TypeUtils.isString(properties)) {
            // after rendering, obtain properties from property manager
            return this._chartView ? propMgr.get.apply(propMgr, arguments) : this._properties;
        }

        this._properties = properties;
        propMgr.set(properties);
        if (this._interaction) {
            this._interaction.initializeBehavior();
        }

        return this;
    };

    /**
     * Get serialized properties.
     *
     * @return serialized properties
     */
    ChartApp.prototype.serializeProps = function () {
        return this._propertyMgr.serialize();
    };

    /**
     * Get or set the scales of chart app.
     *
     * @param scales
     * @return scales / ChartApp instance
     */
    ChartApp.prototype.scales = function (scales) {
        var i;
        if (arguments.length === 0) {
            var resultScales = [];
            var scaleProps = this._scaleMgr.get();
            for (i in scaleProps) {
                //Ignore sharedRuntime and empty dataFrame
                if (scaleProps.hasOwnProperty(i) && i !== 'sharedRuntime' && 
                !(i === 'dataFrame' && scaleProps[i].domain && scaleProps[i].domain.length === 0)) {
                    resultScales.push(scaleProps[i]);
                }
            }
            var defaultScaleProps = this._scaleMgr.getDefault();
            for (i in defaultScaleProps) {
                //Ignore sharedRuntime and empty dataFrame
                if (!TypeUtils.isExist(scaleProps[i]) && i !== 'sharedRuntime' &&
                !(i === 'dataFrame' && defaultScaleProps[i].domain && defaultScaleProps[i].domain.length === 0)) {
                    resultScales.push(defaultScaleProps[i]);
                }
            }
            return resultScales;
        }
        if (TypeUtils.isExist(scales)) {
            for (i = 0; i < scales.length; i++) {
                if (!TypeUtils.isExist(this._scaleMgr.get(scales[i].feed))) {
                    this._scaleMgr.add(scales[i].feed, {
                        serializable: true
                    });
                }
                this._scaleMgr.set(scales[i].feed, scales[i]);
            }
            var dataModel = this._dataModelManager.getDataModel();
            if(dataModel) {
                dataModel.setNeedRefreshScale(true);
            }
        }
        return this;
    };

    ChartApp.prototype.serializeScales = function () {
        var scaleProps = this._scaleMgr.serialize();
        var resultScales = [],
            i;
        for (i in scaleProps) {
            if (scaleProps.hasOwnProperty(i)) {
                resultScales.push(scaleProps[i]);
            }
        }
        return resultScales;
    };

    /**
     * Get or set the container of chart app.
     *
     * @param container
     * @return container / ChartApp instance
     */
    ChartApp.prototype.container = function (container) {
        if (arguments.length === 0) {
            return this._container;
        }

        if (jQuery && container instanceof jQuery) {
            container = container.get(0);
        }

        this._container = container;
        return this;
    };

    function createChartView(chartApp) {

        var chartView = chartApp._viewLoaderDelegator.getViewInstance(chartApp._type, chartApp
            ._runtime);
        chartApp._chartView = chartView;

        if (chartApp._events) {
            var eventDispatcher = chartView.getDispatch();
            var events = chartApp._events;

            for (var name in events) {
                if (events.hasOwnProperty(name)) {

                    var handler = events[name].fn;

                    if (handler == null) {
                        continue;
                    }

                    var scope = events[name].scope;

                    if (scope) {
                        handler = handler.bind(scope);
                    }

                    eventDispatcher.on(name, handler);
                }
            }
        }

        return chartView;
    }

    function createInteraction(chartApp) {

        var context = {
            runtime: chartApp._runtime,
            chartView: chartApp._chartView,
            rootNode: chartApp._rootElement,
            chartType: chartApp._type
        };

        return new Interaction(context);
    }

    function createSvgContainer(containerTag) {

        var container = d3.select(containerTag);

        var svgContainer = container.append("div").attr('id', generateAppId());

        svgContainer.style('height', '100%')
            .style('width', '100%')
            .style('position', 'relative')
            .style('font-size', '10px')
            .style('box-sizing', 'border-box')
            .style('-moz-box-sizing', 'border-box')
            .style('-ms-box-sizing', 'border-box')
            .style('-webkit-box-sizing', 'border-box')
            .style('-webkit-user-select', 'none')
            .style('-webkit-tap-highlight-color', 'rgba(0,0,0,0)');

        return svgContainer;
    }

    function createRootElement(svgContainer, isDIV) {
        var rootElement;
        if (isDIV) {
            rootElement = svgContainer.append("div").attr('class', 'v-m-root');
        } else {
            rootElement = svgContainer.append("svg").attr('class', 'v-m-root');
        }
        rootElement.style('left', 0)
            .style('top', 0)
            .style('direction', 'ltr')
            .style('height', '100%')
            .style('width', '100%');

        if (UADetector.isWindowsSurface()) {
            svgContainer.style('touch-action', 'none');
        }
        return rootElement;
    }

    function createDataAdapter(chartApp, metadata) {

        if (!chartApp._bindings && metadata.family ==='extension') {
            return {
                dataModel: {
                    _rawData: chartApp._data
                },
                scales: {}
            };
        }

        var dataModelMgr = chartApp._dataModelManager;

        var currentValue = null;
        if (dataModelMgr.getDataModel() == null) {

            dataModelMgr.init(chartApp._type, chartApp._chartView._renderType, chartApp._data, chartApp._bindings);
            dataModelMgr.createDataModel();
            var scaleArray = chartApp.scales();
            for(var i in scaleArray)
            {
                if(scaleArray[i].feed == 'dataFrame')
                {
                    currentValue = scaleArray[i].currentValue;
                    break;
                }
            }
        }
        var dataModel = dataModelMgr.getDataModel();
        var scales = null;
        
        if (dataModel.isNeedRefreshScale()) {
            scales = ScaleManager.create(dataModel,
                                        chartApp._scales,
                                        dataModelMgr.getRole(),
                                        dataModelMgr.getFamily(),
                                        chartApp._runtime,
                                        chartApp._type,
                                        chartApp._chartView._customerColorPalette);
            chartApp._scales = scales;
        } else {
            // if fresh scale is false, skip this time.
            scales = chartApp._scales;
            dataModel.setNeedRefreshScale(true);
        }

        if(currentValue !== null && scales.dataFrame && scales.dataFrame.scale)
        {
            var index = scales.dataFrame.scale(currentValue);
            dataModel.updateSeriesIndex(index);
        }

        return {
            dataModel: dataModel,
            scales: scales
        };
    }

    ChartApp.prototype._autoResize = function (isAuto) {
        if (isAuto) {
            if (this._timeInterval) {
                window.clearInterval(this._timeInterval);
            }
            this._timeInterval = window.setInterval(function () {
                if (this._container) {
                    var size = {
                        width: NumberUtils.getPositiveInt(
                            parseInt(getBrowserComputedStyle(this._container, 'width'),
                                10),
                            this._size.width),
                        height: NumberUtils.getPositiveInt(
                            parseInt(getBrowserComputedStyle(this._container, 'height'),
                                10),
                            this._size.height)
                    };
                    if (size.width !== this._size.width || size.height !== this._size.height) {
                        this.size({
                            width: size.width,
                            height: size.height,
                            auto: true
                        });
                    }
                } else {
                    window.clearInterval(this._timeInterval);
                }

            }.bind(this), 100);
        } else {
            if (this._timeInterval) {
                window.clearInterval(this._timeInterval);

            }

        }
    };

    /**
     * Create a chart view instance and render chart by chart view logic.
     */
    ChartApp.prototype.render = function () {
        var metadata = ChartViewRegistry.getMetadata(this._type);
        var family = metadata.family;
        var chartView = this._chartView;
        var isFirstRender;
        if (!chartView) {
            isFirstRender = true;
            chartView = createChartView(this);

            this._svgContainer = createSvgContainer(this._container);

            if (chartView.renderTo() === 'DIV' || chartView.renderTo() === 'BorderDIVFlow' ) {
                this._rootElement = createRootElement(this._svgContainer, true);
            } else {
                this._rootElement = createRootElement(this._svgContainer);
            }

            var width = null;
            var height = null;

            if (this._size) {
                width = this._size.width;
                height = this._size.height;
            }
            width = NumberUtils.getPositiveInt(width,
                parseInt(getBrowserComputedStyle(this._container, 'width'), 10));
            height = NumberUtils.getPositiveInt(height,
                parseInt(getBrowserComputedStyle(this._container, 'height'), 10));
            chartView.setSize({
                width: width,
                height: height
            });


            if (!TypeUtils.isFunction(chartView.enableInteraction) || chartView.enableInteraction() === true) {
                var interaction = this._interaction = createInteraction(this);

                chartView.getDispatch().on("ready.interaction", interaction.initialize.bind(
                    interaction));
            }
            if (!this._size) {
                this._autoResize(true);
                this._size = {
                    width: width,
                    height: height,
                    auto: true
                };
            }
        }

        // safe-add properties to include any new properties that user defined
        this._propertyMgr.add(this._properties || {}, true);

        // logic for property template
        applyTemplateProperties(this);
        this._propertyMgr.set(this._properties);

        //TODO: Now new modules (plotArea) will be created inside setData, so
        //we have to apply template properties after this,
        //otherwise some properties will be unregistered yet.
        chartView.setData(createDataAdapter(this, metadata));

        if (isFirstRender) {
            //The reason why we set properties twice is because every behavior would add new 
            //properties during its initialization. The first set is to set behavior type. 
            //The second one is to set properties created by this behavior, e.g. tooltip. 
            if (this._interaction) {
                this._interaction.initializeBehavior();
            }

            this._propertyMgr.set(this._properties);
        }

        this._statusMgr.set('interaction.holdSelection', false);

        chartView.render(this._rootElement);
    };

    function applyTemplateProperties(chartApp) {
        // Assume current template must exist
        var template = TemplateManager.current();
        var templateProps = template.props(chartApp._type);
        var propMgr = chartApp._propertyMgr;

        var scales = scaleMigrateUtil.ChartPropsToScalesProps(templateProps, chartApp.serializeScales());
        chartApp.scales(scales);
        propMgr.resetDefault();
        propMgr.set(templateProps, 1, 'templateValue');
        chartApp._effectMgr.ghostEffect(template.isGhost);
        if (chartApp._interaction) {
            chartApp._interaction.enabled(!template.isGhost);
        }

    }

    /**
     * Get or set the size of chart app.
     *
     * @param {height,width} a object including width and height information
     * @return current size information
     */
    ChartApp.prototype.size = function (sizeInfo) {
        var args = [].slice.call(arguments);
        if (args.length) {
            // if user just set the sizeInfo.auto or set error date
            if (sizeInfo && (sizeInfo.auto === true || sizeInfo.auto === false) && this._size) {
                if (sizeInfo.auto === true) {
                    this._size.auto = true;
                } else {
                    this._size.auto = false;
                }
            }
            if (!sizeInfo || isNaN(sizeInfo.width) || isNaN(sizeInfo.height) ||
                sizeInfo.width <= 0 || sizeInfo.height <= 0) {
                return;
            }

            // only work for situation that user call size method before chart view is created
            if (!TypeUtils.isExist(this._size)) {
                this._size = {};
            }

            this._size.width = sizeInfo.width;
            this._size.height = sizeInfo.height;
            if (sizeInfo.auto === true) {
                this._size.auto = true;
            } else {
                this._size.auto = false;
            }
        }

        if (!this._chartView) {
            return;
        }

        var chartView = this._chartView;
        if (args.length > 0) {
            var originSize = chartView.getSize();

            if (originSize.width === sizeInfo.width &&
                originSize.height === sizeInfo.height) {
                return;
            }

            if (sizeInfo.auto) {
                sizeInfo.width = NumberUtils.getPositiveInt(
                    parseInt(getBrowserComputedStyle(this._container, 'width'), 10),
                    this._size.width);
                sizeInfo.height = NumberUtils.getPositiveInt(
                    parseInt(getBrowserComputedStyle(this._container, 'height'), 10),
                    this._size.height);
            }

            this._svgContainer.style('width', sizeInfo.width + "px")
                .style('height', sizeInfo.height + "px");

            chartView.setSize({
                width: sizeInfo.width,
                height: sizeInfo.height
            });

            this._statusMgr.set('interaction.holdSelection', true);

            this._rootElement.style('width', '100%').style('height', '100%');
            this._rootElement.attr('width', "100%").attr('height', "100%");

            chartView.render(this._rootElement);
            this._autoResize(this._size.auto);
        } else {
            var size = chartView.getSize();
            size.auto = this._size.auto;
            this._autoResize(this._size.auto);
            return size;

        }

    };


    var addEventOnChildren = function (parent, typeToCheck, evtType, callBackFunction) {
        var childrenModule = parent._children;
        var length = childrenModule.length;
        for (var i in childrenModule) {
            if (childrenModule.hasOwnProperty(i)) {
                var child = childrenModule[i];
                if (child.module && child.module.getDispatch()) {
                    var childDispatch = child.module.getDispatch();
                    if (childDispatch[typeToCheck]) {
                        childDispatch.on(evtType, function () {
                            callBackFunction.apply(null, arguments);
                        });
                        if (!this._dispatchCache[evtType]) {
                            this._dispatchCache[evtType] = [];
                        }
                        this._dispatchCache[evtType].push(childDispatch);
                    } else {
                        if (child.module._children) {
                            addEventOnChildren(child.module, typeToCheck, evtType,
                                callBackFunction);
                        }
                    }
                }
            }
        }
    };

    /**
     * To provide a interface to add event handler.
     *
     * @param evtType {String} event type name
     * @param callback {function} callback handler
     * @param scope {Object} binding target
     */
    ChartApp.prototype.on = function (evtType, callback, scope) {
        var typeToCheck = evtType.split(".")[0];
        var customerDispatch = this._chartView._customerDispatch;
        var dispatch = this._chartView.getDispatch();
        var callBackFunction = function () {
            callback.apply(scope, arguments);
        };
        if (customerDispatch && customerDispatch[typeToCheck]) {
            customerDispatch.on(evtType, callBackFunction);
        } else if (dispatch[typeToCheck]) {
            dispatch.on(evtType, callBackFunction);
            if (!this._dispatchCache[evtType]) {
                this._dispatchCache[evtType] = [];
            }
            this._dispatchCache[evtType].push(dispatch);
        } else if (this._interaction) {
            this._evtDisp.on(evtType, callBackFunction);
        } else {
            if (this._chartView & this._chartView._children) {
                addEventOnChildren(this._chartView, typeToCheck, evtType, callBackFunction);
            }
        }

    };

    /**
     * To provide a interface to remove event handler.
     *
     * @param evtType {String} event type name
     */
    ChartApp.prototype.off = function (evtType) {
        var dispatchList = this._dispatchCache[evtType];
        if (dispatchList) {

            var ns = evtType.split(".")[0];

            dispatchList.map(function (item) {
                if (item && item.on && item[ns]) {
                    item.on(evtType, function () {});
                }
            });
        } else if (this._interaction) {
            this._evtDisp.off(evtType);
        }
        delete this._dispatchCache[evtType];
    };

    /**
     * Obtain selected objects from property manager.
     *
     * @return selected objects
     */
    ChartApp.prototype.getSelectedObjects = function () {
        return this._statusMgr.get('interaction.selectedDataPoints');
    };

    /**
     * Set selected objects.
     *
     * @param items
     * @param options
     */
    ChartApp.prototype.setSelectedObjects = function (items, options) {
        var config = {
            items: items,
            options: options
        };
        this._statusMgr.set('interaction.selectedDataPoints', config);
        return !!config.success;
    };

    //TOFIX: these two APIs should be replaced by property api.
    ChartApp.prototype.setSelectedPropertyZone = function (items) {
        return this._propertyMgr.set('selectedPropertyZone', items);
    };

    ChartApp.prototype.getSelectedPropertyZone = function () {
        return this._propertyMgr.get('selectedPropertyZone');
    };

    /**
     * To destroy chart app and every child included in chart app.
     */
    ChartApp.prototype.destroy = function () {
        
        if (this._timeInterval) {
            window.clearInterval(this._timeInterval);
        }
        this._timeInterval = null;
        
        if (this._rootElement) {
            this._rootElement.remove();
        }
        this._rootElement = null;
        
        if (this._svgContainer) {
            this._svgContainer.remove();
        }
        this._svgContainer = null;
        
        this._type = null;
        this._data = null;
        this._bindings = null;
        this._properties = null;
        this._container = null;
        
        this._sharedRuntimeScales = null;

        if (this._chartView) {
            this._chartView.destroy();
        }
        this._chartView = null;
        if (this._scales) {
            for (var i in this._scales) {
                if (this._scales.hasOwnProperty(i)) {
                    if (this._scales[i] != null) {
                        this._scales[i].destroy();
                    }
                }
            }
        }
        this._scales = null;
        
        if (this._dataModelManager && this._dataModelManager.destroy) {
            this._dataModelManager.destroy();
        }
        this._dataModelManager = null;
        
        this._runtime.destroy();
        this._runtime = null;

        if (this._interaction) {
            this._interaction.destroy();
            this._interaction = null;
        }

        LangManager.removeListener(this._i18nListener);
        this._i18nListener = null;

        this._events = null;
        this._dispatchCache = null;
        this._viewLoaderDelegator = null;
        this._size = null;
        
        if (this._propertyMgr) {
            this._propertyMgr.destroy();
        }
        this._propertyMgr = null;
        
        if (this._effectMgr) {
            this._effectMgr.destroy();
        }
        this._effectMgr = null;
        
        if (this._semanticMgr) {
            this._semanticMgr.destroy();
        }
        this._semanticMgr = null;
        
        if (this._markMgr) {
            this._markMgr.destroy();
        }
        this._markMgr = null;
        
        if (this._scaleMgr) {
            this._scaleMgr.destroy();
        }
        this._scaleMgr = null;
        
        if (this._zoneMgr) {
            this._zoneMgr.destroy();
        }
        this._zoneMgr = null;
        
        if (this._statusMgr) {
            this._statusMgr.destroy();
        }
        this._statusMgr = null;

        if (this._evtDisp) {
            this._evtDisp.destroy();
            this._evtDisp = null;
        }
        this._dataModel = null;
        this._dataRole = null;
        
    };

    /**
     * Update parameters of chart app.
     * e.g. data, property, bindings, scales
     *
     * @param param a object including data, property, bindings, scales information.
     */
    ChartApp.prototype.update = function (param) {

        if (!param || !this._chartView) {
            return;
        }

        if (param.data) {
            this.data(param.data);
        }

        if (param.properties) {
            this.properties(param.properties);
        }

        if (param.bindings) {
            this.bindings(param.bindings);
        }

        if (param.scales) {
            this.scales(param.scales);
        }

        if (param.sharedRuntimeScales){
            this.sharedRuntimeScales(param.sharedRuntimeScales);
        }

        this.render();
    };

    /**
     * Obtain all feeding zone information.
     *
     * @return feeding zone information
     */
    ChartApp.prototype.getAllFeedingZone = function () {
        return this._propertyMgr.get('feedingZone');
    };

    ChartApp.prototype._feedingZone = function () {
        var that = this;
        var parseFeedingZone = {
            defaultValue: null,
            readonly: true,
            serializable: false,
            get: function () {
                var feedingZone = that._zoneMgr.get('tempFeedingZone'),
                    i, j, parseFeedingZone = [];
                if (that._viewLoaderDelegator) {
                    var bindDef = that._viewLoaderDelegator.getBindingDefinition(that._type);
                    for (i in feedingZone) {
                        if (feedingZone.hasOwnProperty(i) && !TypeUtils.isExist(
                            feedingZone[i])) {
                            delete feedingZone[i];
                        }
                    }
                    for (i in feedingZone) {
                        if (feedingZone.hasOwnProperty(i)) {
                            if (i === 'plot') { //plot has all feed def
                                if (TypeUtils.isArray(feedingZone[i])) {
                                    feedingZone[i] = feedingZone[i][0];
                                }
                                feedingZone[i].bindDef = [];
                                ChartViewRegistry.getMetadata(that._type).bindings.forEach(
                                    function (e) {
                                        if (e.id !== 'dataFrame') {
                                            feedingZone[i].bindDef.push({
                                                id : e.id
                                            });
                                        }
                                    });
                                parseFeedingZone.push(feedingZone[i]);
                            } else if (i === 'trellisAxis') { //for trellis axis, row, column, category, value
                                for (j in bindDef.constructor) {
                                    if (TypeUtils.isExist(feedingZone[i][bindDef.constructor[
                                        j].id])) {
                                        feedingZone[i][bindDef.constructor[j].id][0].bindDef =
                                            [{
                                            id: bindDef.constructor[j].id
                                        }];
                                    }
                                }
                                for (j in feedingZone[i]) {
                                    if (feedingZone[i].hasOwnProperty(j)) {
                                        parseFeedingZone.push(feedingZone[i][j][0]);
                                    }
                                }
                            } else {
                                for (j in bindDef.constructor) {
                                    if (i === bindDef.constructor[j].id) {
                                        feedingZone[i].bindDef = [{
                                            id: bindDef.constructor[j].id
                                        }];
                                    }
                                }
                                parseFeedingZone.push(feedingZone[i]);
                            }
                        }
                    }
                    if (FeedingZoneUtil[bindDef.family]) {
                        FeedingZoneUtil[bindDef.family].apply(that, [feedingZone, bindDef.constructor]);
                    }

                    var split = that._type.split('/');
                    var type;
                    if (split.length === 1) {
                        type = that._type;
                    } else {
                        type = split[1];
                    }
                    if (type.indexOf('_') > -1) {
                        type = that._type.split('_')[1];
                    }
                    if (FeedingZoneUtil[type]) {
                        FeedingZoneUtil[type].apply(that, [parseFeedingZone, bindDef.constructor]);
                    }
                }
                return parseFeedingZone;
            }
        };
        that._propertyMgr.add({
            feedingZone: parseFeedingZone
        });
    };

    var EMPTY_SVG =
        "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\"/>";

    ChartApp.prototype.exportToSVGString = function (option) {
        if (!this._chartView) {
            Logger.warn("cannot export to svg, the viz has not been initialized..");
            return EMPTY_SVG;
        }
        this._id = ObjectUtils.guid("sap-viz");
        //100% is not a valid value to export, we need to change to real pixel values. 
        var size = {
            width: this._rootElement.style('width'),
            height: this._rootElement.style('height')
        };
        this._rootElement.attr('width', parseFloat(size.width)).attr('height', parseFloat(size
            .height));
        this._rootElement.style('width', '')
            .style('height', '');

        if ((this._type === "info/pie" || this._type === "info/donut")) {
            //Determine whether aspect ratio user speicifies in option is same with the original one.
            var aspectRatioChange = function (option) {
                if (option && option.width && option.height) {
                    var svg = this._rootElement.node();
                    var svgWidth = d3.select(svg).attr("width");
                    var svgHeight = d3.select(svg).attr("height");
                    if ((svgHeight / svgWidth) === (option.height / option.width)) {
                        return false;
                    } else {
                        return true;
                    }
                }
                return false;
            };
            if (!aspectRatioChange.call(this, option)) {
                return this._getSvgFromDom(option);
            } else {
                var svgString = this._getCustomSvg(option);
                var svgCss = this._getSvgCss();
                if (svgCss) { //Find the flag and replace with css
                    svgString = svgString.replace("^@@##$$^", svgCss);
                } else { //Remove the flag.
                    svgString = svgString.replace("<style>^@@##$$^</style>", "");
                }
                return svgString;
            }
        }

        if (this._supportCustomSVG()) {
            return this._getCustomSvg(option);
        }

        var svgResult = this._getSvgFromDom(option);

        // return to original status
        this._rootElement.style('width', '100%').style('height', '100%');

        this._rootElement.attr('width', "100%").attr('height', "100%");

        return svgResult;
    };

    ChartApp.prototype.supportExportToSVG = function () {
        var ret = false;
        // by now we can make sure to support all built in chart types
        if (this._type && this._chartView) {
            ret = this._supportCustomSVG() ||
                this._viewLoaderDelegator.getBindingDefinition(this._type).vender ===
                "sap.viz" ||
                (this._rootElement.node().tagName === 'svg') || ret;
        }
        return ret;
    };

    ChartApp.prototype.onFrameScaleChange = function(e) {
        var dataModel = this._dataModelManager.getDataModel();
        if(dataModel)
        {
            var seriesIndex = this._scales ? this._scales["dataFrame"].scale(e.currentValue) : 0;
            dataModel.updateSeriesIndex(seriesIndex);            
        }
    };
    
    
    /**
     * determine if current viz support custom SVG by providing exportContent() and supportExportToContentType function
     * @private
     */
    ChartApp.prototype._supportCustomSVG = function () {
        return this._chartView && TypeUtils.isFunction(this._chartView.supportExportToContentType) &&
            this._chartView.supportExportToContentType("svg");
    };

    ChartApp.prototype._getSvgFromDom = function (option) {
        var svg = this._rootElement.node().cloneNode(true),
            svgStr = EMPTY_SVG;

        // add svg namespace
        d3.select(svg).attr("xmlns", "http://www.w3.org/2000/svg");

        // add chart class to the svg
        d3.select(svg).attr("class", this._id + " " + this._rootElement.attr("class"));

        // wrokaround for chromium min font size rendering
        d3.select(svg).attr("text-rendering", "geometricPrecision");

        // remove tooltip if any
        d3.select(svg).selectAll(".v-m-tooltip").remove();

        // remove zoom and reset button when exporting to svg
        d3.select(svg).selectAll(".v-geo-zoom-btn").remove();
        d3.select(svg).selectAll(".v-geo-reset-control").remove();

        // remove rectangle highlight
        d3.select(svg).selectAll("rect.v-select-indicator").remove();

        // remove axis if necessray
        if (option && option.hideAxis) {
            d3.select(svg).select(".v-m-main .v-m-yAxis").remove();
            d3.select(svg).select(".v-m-main .v-m-yAxis2").remove();
            d3.select(svg).select(".v-m-main .v-m-xAxis").remove();
            d3.select(svg).select(".v-m-main .v-m-xAxis2").remove();
            d3.select(svg).select(".v-m-main .v-m-zAxis").remove();
        }

        // remove legend and title if necessary
        // [workaround] resize the width/height of the svg and plot
        var svgWidth = d3.select(svg).attr("width"),
            svgHeight = d3.select(svg).attr("height");
        if (option && option.hideTitleLegend) {
            if (!d3.select(svg).select(".v-m-legends .v-bound").empty()) {
                svgWidth = svgWidth - d3.select(svg).select(".v-m-legends .v-bound").attr(
                    "width");
                d3.select(svg).select(".v-m-legends").remove();
            }

            if (!d3.select(svg).select(".v-m-title .v-bound").empty()) {
                svgHeight = svgHeight - d3.select(svg).select(".v-m-title .v-bound").attr(
                    "height");
                d3.select(svg).select(".v-m-title").remove();
            }
            d3.select(svg).attr("width", svgWidth).attr("height", svgHeight);
            // hard-code the plot at the position when there is no title and
            // legend
            d3.select(svg).select(".v-m-main").attr("transform", "translate(24, 24)");
            d3.select(svg).select(".v-backgroundutil .v-background-body").attr("width",
                svgWidth);
            d3.select(svg).select(".v-backgroundutil .v-background-body").attr("height",
                svgHeight);
        }

        // scale if necessary
        if (option && option.width && option.height) {
            d3.select(svg).attr("width", option.width);
            d3.select(svg).attr("height", option.height);
            d3.select(svg).attr("viewBox", "0 0 " + svgWidth + " " + svgHeight);
        }

        // add external css as inline css
        var externalCss = "";
        if (sap && sap.bi && sap.bi.framework &&
            sap.bi.framework.getService(this._type, "*sap.viz.impls")) {
            var services = sap.bi.framework.getService(this._type, "*sap.viz.impls");
            var i = 0,
                cssDeclarations;
            for (; i < services.length; i++) {
                if (services[i] && services[i].viz &&
                    services[i].viz[0] &&
                    services[i].viz[0].id === this._type && services[i].cssString) {
                    externalCss = services[i].cssString;
                    break;
                }
            }
        }
        if (externalCss) {
            d3.select(svg).append("style").text(externalCss);
        }
        try {
            svgStr = new XMLSerializer().serializeToString(svg);
        } catch (e) {
            Logger.error("error on exporting the svg document : ", e.message);
        }
        var clippath = d3.select(svg)[0][0].getElementsByTagName('clipPath');
        var reg;
        for (var num = 0; num < clippath.length; num++) {
            reg = new RegExp(clippath[num].id, "g");
            svgStr = svgStr.replace(reg, 'clipPath-' + ObjectUtils.guid());
        }
        // fix the bug in IE
        var subSvgLength = svgStr.search('>') + 1;
        var subSvgStr = svgStr.substr(0, subSvgLength);
        // Transform 'NS1:xmlns:xlink' to 'xmlns:xlink' in IE
        reg = /\w+:\w+:\w+/g;
        subSvgStr = subSvgStr.replace(reg, function (item) {
            var word = item.split(':');
            return word[1] + ':' + word[2];
        });
        // Clear empty URI of Non-default namespace declarations in IE
        reg = /\s\S*:NS\S*/g;
        subSvgStr = subSvgStr.replace(reg, '');

        svgStr = subSvgStr + svgStr.substr(subSvgLength);
        //fix the 'feMerge' bug in network chart by removing them
        reg = /<feMerge>.*<\/feMerge>/g;
        svgStr = svgStr.replace(reg, '');

        return svgStr;
    };

    ChartApp.prototype._getCustomSvg = function (options) {
        return this._chartView &&
            TypeUtils.isFunction(this._chartView.exportContent) &&
            this._charView.exportContent(ObjectUtils.extend(true, {
                type: "svg"
            }, options)) || EMPTY_SVG;
    };
    /**
     * Obtain all property zone information.
     *
     * @return feeding property information
     */
    ChartApp.prototype.getPropertyZone = function () {
        return this._propertyMgr.get('propertyZone');
    };

    ChartApp.prototype._propertyZone = function () {
        var that = this;
        var parsePropertyZone = {
            defaultValue: null,
            readonly: true,
            serializable: false,
            get: function () {
                var propertyZone = that._zoneMgr.get('tempPropertyZone'),
                    parsePropertyZone = [];
                for (var i in propertyZone) {
                    if (propertyZone.hasOwnProperty(i)) {
                        for (var j in propertyZone[i]) {
                            if (propertyZone[i].hasOwnProperty(j)) {
                                if (i === 'trellisAxis') { //row, column, category, value
                                    propertyZone[i][j].forEach(function (e) {
                                        parsePropertyZone.push(e);
                                    });
                                } else {
                                    parsePropertyZone.push(propertyZone[i][j]);
                                }
                            }
                        }
                    }
                }
                return parsePropertyZone;
            }
        };
        that._propertyMgr.add({
            propertyZone: parsePropertyZone
        });
    };

    function getBrowserComputedStyle(target, styleName) {
        if (window.getComputedStyle) {
            // w3c
            return window.getComputedStyle(target, null)[styleName];

        } else {
            // ie
            return target.currentStyle[styleName];
        }
    }

    ChartApp.prototype._localeChanged = function () {
        // update the data of modules to let the module have change to make up locale string again.
        if (this._chartView && this._rootElement) {
            this._statusMgr.set('interaction.holdSelection', true);

            this._chartView.render(this._rootElement);
        }
    };

    
    //Scales
    ChartApp.prototype.sharedRuntimeScales = function(sharedRuntimeScales){
        var scalesMgr = this._scaleMgr;
        if (arguments.length === 0){
            // after rendering, obtain properties from property manager
            return this._chartView ? scalesMgr.get('sharedRuntime') : this._sharedRuntimeScales;
        }
        else{
            if (this._sharedRuntimeScales && sharedRuntimeScales &&
             ObjectUtils.deepEqual(this._sharedRuntimeScales, sharedRuntimeScales)){
                return this;
            }

            this._sharedRuntimeScales = sharedRuntimeScales;
            scalesMgr.add({'sharedRuntime' : sharedRuntimeScales});
            if (this._chartView) {
                this.render();
            }
            return this;
        }
    };

    ChartApp.prototype.runtimeScales = function(param){
        var retArray = [];
        var scales = this._scales;

        if (arguments.length > 0 && param.merged === true){
            if (scales.color && scales.color.mergedRuntimeColorScale && scales.color.mergedRuntimeColorScale()){
                retArray.push(scales.color.mergedRuntimeColorScale());
            }
        } else {
            if (scales.color && scales.color.runtimeColorScale && scales.color.runtimeColorScale()){
                retArray.push(scales.color.runtimeColorScale());
            }
        }
        return retArray;
    };

    return ChartApp;
});

define('sap/viz/migrate/migrator/versionMigrator',[ 'sap/viz/framework/common/util/ObjectUtils', 'sap/viz/framework/core/ChartViewRegistry' ], function(
        ObjectUtils, ChartViewRegistry) {
    var versionMigrator = {
        migrate : function(json, isAPICall) {
            var result = ObjectUtils.extendByRepalceArray({}, json);
            if (!ChartViewRegistry.getMetadata(json.type)) {
                result.version = this.toVersion;
                return result;
            }
            for (var i = 0; i < this.chainedMigrators.length; i++) {
                result = this.chainedMigrators[i].migrate(result, isAPICall);
            }
            result.version = this.toVersion;
            return result;
        }
    };
    return versionMigrator;
});
define('sap/viz/migrate/PropertyUtil',[ 'sap/viz/framework/common/util/ObjectUtils', 'sap/viz/framework/common/util/TypeUtils' ], function Setup(
        ObjectUtils, TypeUtils) {

    var propertyUtil = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;

    function isEmpty(obj) {
        if (!obj) {
            return true;
        }
        for ( var key in obj) {
            if (hasOwnProperty.call(obj, key)) {
                return false;
            }
        }
        if (TypeUtils.isFunction(obj)) {
            return false;
        }
        return true;
    }
    
    function clearEmptyPropertiesWithSrcPath(properties, path) {
        var paths = path.split('.'), i, j;
        for (i = paths.length - 2; i >= 0; i--) {
            var current = properties;
            for (j = 0; j < i; j++) {
                current = current[paths[j]];
            }
            if (isEmpty(current[paths[i]])) {
                delete current[paths[i]];
            }
        }
    }

    propertyUtil.getProperty = function(properties, path) {
        var paths = path.split('.'), current = properties, i;

        for (i = 0; i < paths.length; i++) {
            // the given path is broken:
            // e.g. the given path is a.b.c, but a.b=null
            if (current === null) {
                return undefined;
            }
            // we do not have the key a.b, or a.b=undefined
            if (current[paths[i]] === undefined ) {
                return undefined;
            }
            current = current[paths[i]];
        }
        return current;
    };

    propertyUtil.setProperty = function(properties, path, value) {
        var paths = path.split('.'), current = properties, i;

        for (i = 0; i < paths.length - 1; i++) {
            if (current[paths[i]] === undefined || current[paths[i]] === null) {
                current[paths[i]] = {};
            }
            current = current[paths[i]];
        }
        current[paths[paths.length - 1]] = value;
    };

    propertyUtil.setPropertyWithMergence = function(properties, path, value) {
        var paths = path.split('.'), current = properties, i;

        for (i = 0; i < paths.length - 1; i++) {
            if (current[paths[i]] === undefined || current[paths[i]] === null) {
                current[paths[i]] = {};
            }
            current = current[paths[i]];
        }
        if(isEmpty(current[paths[paths.length - 1]])){
            current[paths[paths.length - 1]] = value;
        }else{
            for(var property in value){
                if(value.hasOwnProperty(property)){
                    current[paths[paths.length - 1]][property] = value[property];
                }
            }
        }
    };
    
    propertyUtil.removeProperty = function(properties, path) {
        var paths = path.split('.'), current = properties, i;

        for (i = 0; i < paths.length - 1; i++) {
            if (current[paths[i]] === undefined) {
                return;
            }
            current = current[paths[i]];
        }
        delete current[paths[paths.length - 1]];
        clearEmptyPropertiesWithSrcPath(properties, path);
    };

    return propertyUtil;
});
define('sap/viz/migrate/bindingMigrator',["sap/viz/framework/core/ChartViewRegistry", 'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/ObjectUtils'
], function Setup(ChartViewRegistry, TypeUtils, ObjectUtils) {
    var migrateUtils = {};

    var feedingMap = {
        primaryValues: 'valueAxis',
        secondaryValues: 'valueAxis2',
        axisLabels: 'categoryAxis',
        regionColor: 'color',
        regionShape: 'shape',
        pieSectorColor: 'color',
        pieSectorSize: 'size',
        rectangleTitle: 'title',
        rectangleColor: 'color',
        rectangleWeight: 'weight',
        "multiplier.row": "trellisRow",
        "multiplier.column": "trellisColumn"
    };

    var FLATTABLETYPE = 'sap.viz.api.data.FlatTableDataset';
    var CROSSTABLETYPE = 'sap.viz.api.data.CrosstableDataset';
    var CONST_MND = 'MeasureNamesDimension';
    var CONST_TYPE_MEASURE = "Measure";

    var checkMND = function (arr) {
        var length = arr.length;
        for (var i = 0; i < length; i++) {
            if (arr[i] === CONST_MND) {
                return i;
            }
        }
        return -1;
    };

    var isMeasure = function (feedingDef) {
        var isMeasure = {};
        feedingDef.map(function (obj) {
            isMeasure[obj.id] = (obj.type === CONST_TYPE_MEASURE);
        });
        return isMeasure;
    };

    migrateUtils.getFeedingMap = function () {
        return feedingMap;
    };
    
    migrateUtils.isSupportedChart = function(chartType) {
        if (ChartViewRegistry.getMetadata(chartType)) {
            return true;
        } else {
            return false;
        }
    };

    migrateUtils.FlatTableFeedingToBindings = function (feeding, feedingDef) {
        if (feeding && TypeUtils.isArray(feedingDef)) {
            var bindings = [];
            var MNDItem = {
                measureNames: []
            };
            var isMeasureArr = isMeasure(feedingDef);
            for (var i in feeding) {
                if (feeding.hasOwnProperty(i)) {
                    var source = ObjectUtils.clone(feeding[i]);
                    var id = feedingMap[i];
                    if (!id) {
                        id = i;
                    }
                    if (isMeasureArr[id]) {
                        MNDItem.measureNames.push(id);
                    }
                    var MNDIndex = checkMND(source);
                    if (MNDIndex > -1) {
                        source[MNDIndex] = MNDItem;
                    }
                    bindings.push({
                        feed: id,
                        source: source
                    });

                }
            }
            return bindings;
        }
    };
    
    migrateUtils.CrosstableFeedingToBindings = function (feeding) {
        if (feeding) {
            var bindings = [];
            for (var i in feeding) {
                if (feeding.hasOwnProperty(i)) {
                    var source = ObjectUtils.clone(feeding[i]);
                    bindings[i] = {};
                    bindings[i].feed = feedingMap[source.feedId] || source.feedId;
                    bindings[i].source = source.binding;
                }
            }
            return bindings;
        }
    };


    migrateUtils.migrate = function (json) {
        if (this.isSupportedChart(json.type) && !json.bindings) {
            if (json.data && json.data.type === CROSSTABLETYPE) {
                json.bindings = migrateUtils.CrosstableFeedingToBindings(json.feeding);
            } else {
                json.bindings = migrateUtils.FlatTableFeedingToBindings(json.feeding, ChartViewRegistry
                    .getMetadata(json.type).bindings);       
            }
            delete json.feeding;
        }
        return json;
    };


    return migrateUtils;
});

define('sap/viz/migrate/BaseMigrator',[
    'sap/viz/framework/common/util/ObjectUtils', 
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/migrate/PropertyUtil',
	'sap/viz/migrate/bindingMigrator',
    'sap/viz/framework/core/ChartViewRegistry'
], function(ObjectUtils, TypeUtils, PropertyUtil, migrateUtils, ChartViewRegistry) {

    return {
        factory: function(migrationModel) {
            var migrator = {
                _model: migrationModel,
                _isAPICall : false,
                _propertyMigrateActions: {
                    rename: function(chart, srcPath, srcProperty, action) {
                        PropertyUtil.setPropertyWithMergence(chart.properties, action.to, srcProperty);
                        this.remove(chart, srcPath);
                    },

                    remove: function(chart, srcPath) {
                        PropertyUtil.removeProperty(chart.properties, srcPath);
                    },
                    
                    exchange: function(chart, srcPath, srcProperty, action, isAPICall) {
                        if (isAPICall) {
                            return;
                        }
                        var toProperty = PropertyUtil.getProperty(chart.properties, action.to);
                        if (toProperty !== undefined) {
                            PropertyUtil.setProperty(chart.properties, srcPath, toProperty);
                            PropertyUtil.setProperty(chart.properties, action.to, srcProperty);
                        }
                    },
                    
                    changeFormatString : function(chart, srcPath) {
                        if (this._unifyFormatString(chart.properties, srcPath)) {
                            return;
                        }
                        // normal case
                        var feedNames = [];
                        var bindingDef = ChartViewRegistry.getBindingDefinition(chart.type)["constructor"];
                        if (!bindingDef) {
                            return;
                        }
                        var bindings = chart.bindings;
                        if (!bindings) {
                            return;
                        }
                        
                        for ( var i = 0; i<bindingDef.length; i++) {
                            if (bindingDef[i].hasOwnProperty('type') && bindingDef[i].hasOwnProperty('role') &&
                                    bindingDef[i]['type'] === 'Measure' && bindingDef[i]['role'] === 'layout') {
                                feedNames.push(bindingDef[i].id);
                            }
                        }
                        
                        var measureNames = [];
                        for (var index=0; index<bindings.length; index++) {
                            var feed = bindings[index].feed;
                            if (feedNames.indexOf(feed)>=0) {
                                measureNames.push(bindings[index].source);
                            }
                        }
                        
                        var newValue = {};
                        var value = PropertyUtil.getProperty(chart.properties, srcPath);
                        if (TypeUtils.isArray(value)) {
                            for (var j=0; j<value.length; j++) {
                                if (TypeUtils.isArray(value[j])) {
                                    for (var k=0; k<value[j].length; k++) {
                                        if(measureNames[j] && measureNames[j][k]) {
                                            newValue[measureNames[j][k]] = value[j][k];    
                                        }
                                    }
                                }    
                            }
                        }
                        PropertyUtil.setProperty(chart.properties, srcPath, newValue);
                    }, 
                    
                    _unifyFormatString : function(properties, srcPath) {
                        var value = PropertyUtil.getProperty(properties, srcPath);
                        // for the format string in the 2d array, if they are the same, convert it into one string.
                        if (TypeUtils.isArray(value)) {
                            var formatString;
                            for (var j=0; j<value.length; j++) {
                                if (TypeUtils.isArray(value[j])) {
                                    for (var k=0; k<value[j].length; k++) {
                                        if (formatString === undefined){
                                            formatString = value[j][k];
                                        } else {
                                            if (formatString !== value[j][k]) {
                                                return false;
                                            }
                                        }
                                    }
                                }    
                            }
                            PropertyUtil.setProperty(properties, srcPath, formatString);
                        }
                        return true;
                    }
                },

                migrate: function(json, isAPICall) {
                    this._isAPICall = arguments[1] || false;
                    var result = ObjectUtils.extendByRepalceArray({}, json),
                        allModel = this._getTypeModel('all'),
                        chartModel = this._getTypeModel(result.type);

                    this._doMigrate(result, chartModel);
                    this._doMigrate(result, allModel);
                    return result;
                },

				_doMigrate: function(chart, model) {
                    if (!model) {
                        return;
                    }

                    this._migrateProperties(chart, model.properties);

                    // other migration goes here
                },

                _migrateProperties: function(chart, propModel) {
                    var property, path, action;
                    var properties = chart.properties;
                    if (!propModel || !properties) {
                        return properties;
                    }
                    for (path in propModel) {
                        if (propModel.hasOwnProperty(path)) {
                            property = PropertyUtil.getProperty(properties, path);
                            if (property !== undefined) {
                                action = propModel[path];
                                this._propertyMigrateActions[action.action](chart, path,
                                        property, action, this._isAPICall);
                            }
                        }
                    }
                    return properties;
                },

                _getTypeModel: function(chartType) {
                    return this._model[chartType];
                }
                   
            };

            return migrator;
        }
    };
});

define('sap/viz/migrate/migrator/Migrator10to12',[ 'sap/viz/migrate/migrator/versionMigrator', 'sap/viz/migrate/BaseMigrator' ], function(versionMigrator,
        BaseMigrator) {
    var migrator = Object.create(versionMigrator);
    migrator.fromVersion = "4.0.10";
    migrator.toVersion = "4.0.12";
    migrator.propertyModel = {
        "all" : {
            properties : {
                "title.layout.width" : {
                    action : "rename",
                    to : "title.layout.maxWidth",
                },
                "title.layout.height" : {
                    action : "rename",
                    to : "title.layout.maxHeight",
                },
                "background.direction" : {
                    action : "rename",
                    to : "background.gradientDirection"
                },
                "background.body.color" : {
                    action : "rename",
                    to : "background.color"
                },
                "legend.layout.width" : {
                    action : "rename",
                    to : "legend.layout.maxWidth"
                },
                "legend.layout.height" : {
                    action : "rename",
                    to : "legend.layout.maxHeight"
                },
                "valueAxis.hideTitleFirst" : {
                    action : "remove"
                },
                "valueAxis.axisline" : {
                    action : "rename",
                    to : "valueAxis.axisLine"
                },
                "valueAxis.lineSize" : {
                    action : "rename",
                    to : "valueAxis.axisLine.size"
                },
                "valueAxis.unitFormatType" : {
                    action : "remove"
                },
                "valueAxis.layout.width" : {
                    action : "rename",
                    to : "valueAxis.layout.maxWidth"
                },
                "valueAxis.layout.height" : {
                    action : "rename",
                    to : "valueAxis.layout.maxHeigth"
                },
                "categoryAxis.hideTitleFirst" : {
                    action : "remove"
                },
                "categoryAxis.axisline" : {
                    action : "rename",
                    to : "categoryAxis.axisLine"
                },
                "categoryAxis.lineSize" : {
                    action : "rename",
                    to : "categoryAxis.axisLine.size"
                },
                "categoryAxis.layout.width" : {
                    action : "rename",
                    to : "categoryAxis.layout.maxWidth"
                },
                "categoryAxis.layout.height" : {
                    action : "rename",
                    to : "categoryAxis.layout.maxHeigth"
                },
                "plotArea.dataLabel.hiddenWhenOverlap" : {
                    action : "rename",
                    to : "plotArea.dataLabel.hideWhenOverlap"
                },
                "plotArea.fixedDatapointSize" : {
                    action : "rename",
                    to : "plotArea.isFixedDataPointSize"
                },
                "plotArea.dataLabel.position" : {
                    action : "remove"
                },
                "plotArea.primaryScale.autoMinValue" : {
                    action : "remove"
                },
                "plotArea.primaryScale.autoMaxValue" : {
                    action : "remove"
                },
                "background" : {
                    action : "rename",
                    to : "plotArea.background"
                },
            }
        },
        "info/100_stacked_bar" : {
            properties : {
                "xAxis" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "yAxis" : {
                    action : "rename",
                    to : "categoryAxis"
                },
                "plotArea.primaryValuesColorPalette" : {
                    action : "remove"
                },
                "plotArea.secondaryValuesColorPalette" : {
                    action : "remove"
                }
            }
        },
        "info/100_dual_stacked_bar" : {
            properties : {
                "xAxis" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "yAxis" : {
                    action : "rename",
                    to : "categoryAxis"
                },
                "xAxis2" : {
                    action : "rename",
                    to : "valueAxis2"
                },
                "plotArea.colorPalette" : {
                    action : "remove"
                }
            }
        },
        "info/100_stacked_column" : {
            properties : {
                "yAxis" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "xAxis" : {
                    action : "rename",
                    to : "categoryAxis"
                },
                "plotArea.primaryValuesColorPalette" : {
                    action : "remove"
                },
                "plotArea.secondaryValuesColorPalette" : {
                    action : "remove"
                }
            }
        },
        "info/100_dual_stacked_column" : {
            properties : {
                "yAxis" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "xAxis" : {
                    action : "rename",
                    to : "categoryAxis"
                },
                "yAxis2" : {
                    action : "rename",
                    to : "valueAxis2"
                },
                "plotArea.colorPalette" : {
                    action : "remove"
                }
            }
        },
        "info/bubble" : {
            properties : {
                "scale" : {
                    action : "remove"
                },
                "xAxis" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "yAxis" : {
                    action : "rename",
                    to : "valueAxis2"
                },
                "plotArea.primaryValuesColorPalette" : {
                    action : "remove"
                },
                "plotArea.secondaryValuesColorPalette" : {
                    action : "remove"
                }
            }
        },
        "info/bullet" : {
            properties : {
                "xAxis2" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "yAxis" : {
                    action : "rename",
                    to : "categoryAxis"
                },
                "yAxis2" : {
                    action : "rename",
                    to : "categoryAxis2"
                },
                "plotArea.barSize.desktop" : {
                    action : "remove"
                },
                "plotArea.barSize.mobile" : {
                    action : "remove"
                },
                "plotArea.primaryValuesColorPalette" : {
                    action : "remove"
                },
                "plotArea.secondaryValuesColorPalette" : {
                    action : "remove"
                }
            }
        },
        "info/combination" : {
            properties : {
                "yAxis" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "xAxis" : {
                    action : "rename",
                    to : "categoryAxis"
                },
                "plotArea.bar.barSize" : {
                    action : "remove"
                },
                "plotArea.bar.barSize.desktop" : {
                    action : "remove"
                },
                "plotArea.bar.barSize.mobile" : {
                    action : "remove"
                },
                "plotArea.line.categorySize.desktop" : {
                    action : "remove"
                },
                "plotArea.line.categorySize.mobile" : {
                    action : "remove"
                },
                "plotArea.primaryValuesColorPalette" : {
                    action : "remove"
                },
                "plotArea.secondaryValuesColorPalette" : {
                    action : "remove"
                },
                "plotArea.dataShape.secondaryAxis" : {
                    action : "remove"
                }
            }
        },
        "info/donut" : {
            properties : {
                "plotArea.primaryValuesColorPalette" : {
                    action : "remove"
                },
                "plotArea.secondaryValuesColorPalette" : {
                    action : "remove"
                }
            }
        },
        "info/horizontal_line" : {
            properties : {
                "xAxis" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "yAxis" : {
                    action : "rename",
                    to : "categoryAxis"
                },
                "plotArea.primaryValuesColorPalette" : {
                    action : "remove"
                },
                "plotArea.secondaryValuesColorPalette" : {
                    action : "remove"
                }
            }
        },
        "info/dual_horizontal_line" : {
            properties : {
                "xAxis" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "yAxis" : {
                    action : "rename",
                    to : "categoryAxis"
                },
                "xAxis2" : {
                    action : "rename",
                    to : "valueAxis2"
                },
                "plotArea.colorPalette" : {
                    action : "remove"
                }
            }
        },
        "info/line" : {
            properties : {
                "yAxis" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "xAxis" : {
                    action : "rename",
                    to : "categoryAxis"
                },
                "plotArea.primaryValuesColorPalette" : {
                    action : "remove"
                },
                "plotArea.secondaryValuesColorPalette" : {
                    action : "remove"
                }
            }
        },
        "info/dual_line" : {
            properties : {
                "yAxis" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "xAxis" : {
                    action : "rename",
                    to : "categoryAxis"
                },
                "yAxis2" : {
                    action : "rename",
                    to : "valueAxis2"
                },
                "plotArea.colorPalette" : {
                    action : "remove"
                },
            }
        }
    /**
     *   sample model
     "chartType": {
         properties: {
             "propertyPath" : {
                 action : "rename/remove",
                 to : "toPath"
             }
         }
     },
     */

    };
    migrator.propertyModel["info/bar"] = migrator.propertyModel["info/100_stacked_bar"];
    migrator.propertyModel["info/dual_bar"] = migrator.propertyModel["info/100_dual_stacked_bar"];
    migrator.propertyModel["info/dual_column"] = migrator.propertyModel["info/100_dual_stacked_column"];
    migrator.propertyModel["info/pie"] = migrator.propertyModel["info/donut"];
    migrator.propertyModel["info/scatter"] = migrator.propertyModel["info/bubble"];
    migrator.propertyModel["info/stacked_bar"] = migrator.propertyModel["info/100_stacked_bar"];
    migrator.propertyModel["info/dual_stacked_bar"] = migrator.propertyModel["info/100_dual_stacked_bar"];
    migrator.propertyModel["info/stacked_column"] = migrator.propertyModel["info/100_stacked_column"];
    migrator.propertyModel["info/dual_stacked_column"] = migrator.propertyModel["info/100_dual_stacked_column"];
    migrator.propertyModel["info/column"] = migrator.propertyModel["info/100_stacked_column"];
    migrator.chainedMigrators = [ BaseMigrator.factory(migrator.propertyModel) ];
    return migrator;
});
define('sap/viz/migrate/migrator/Migrator12to16',[ 'sap/viz/migrate/migrator/versionMigrator', 'sap/viz/migrate/BaseMigrator' ], function(versionMigrator,
        BaseMigrator) {
    var migrator = Object.create(versionMigrator);
    migrator.fromVersion = "4.0.12";
    migrator.toVersion = "4.0.16";
    migrator.propertyModel = {
        "info/donut" : {
            properties : {
                "plotArea.highlightIndex" : {
                    action : "rename",
                    to : "plotArea.highlight.highlightIndex"
                },
                "plotArea.unhighlightSliceColor" : {
                    action : "rename",
                    to : "plotArea.highlight.unhighlightSliceColor"
                },
                "plotArea.contextInfos" : {
                    action : "rename",
                    to : "plotArea.highlight.contextInfos"
                },
                "plotArea.highlightContext" : {
                    action : "rename",
                    to : "plotArea.highlight.highlightContext"
                },
                "plotArea.centerRenderer" : {
                    action : "rename",
                    to : "plotArea.highlight.centerRenderer"
                },
                "plotArea.centerName" : {
                    action : "rename",
                    to : "plotArea.highlight.centerName"
                },

                "plotArea.centerValue" : {
                    action : "rename",
                    to : "plotArea.highlight.centerValue"
                }
            }
        }
    };
    migrator.chainedMigrators = [ BaseMigrator.factory(migrator.propertyModel) ];
    return migrator;
});
define('sap/viz/migrate/migrator/Migrator16to18Model/Properties',[],function() {
    var properties = {
        "all" : {
            properties : {
                "multiLayout.numberOfDimensionInColumn" : {
                    action : "remove"
                },
                "legend.hoverShadowMouseDown.color": {
                    action: "rename",
                    to : "legend.mouseDownShadow.color"
                },
                "categoryAxis.hoverShadowMouseDown.color": {
                    action: "rename",
                    to : "categoryAxis.mouseDownShadow.color"
                },
                "tooltip.separationLine.borderBottomColor" : {
                    action : "rename",
                    to : "tooltip.separationLine.color"
                },
                "background.direction": {
                    action: "rename",
                    to : "background.gradientDirection"
                },
                "dataLabel": {
                    action: "rename",
                    to : "plotArea.dataLabel"
                },
				"valueAxis.axisline": {
                    action: "rename",
                    to : "valueAxis.axisLine"
                },
                "valueAxis2.axisline": {
                    action: "rename",
                    to : "valueAxis2.axisLine"
                },
                "categoryAxis.axisline": {
                    action: "rename",
                    to : "categoryAxis.axisLine"
                },
                "valueAxis.lineSize": {
                    action: "rename",
                    to : "valueAxis.axisLine.size"
                },
                "categoryAxis.lineSize": {
                    action: "rename",
                    to : "categoryAxis.axisLine.size"
                },
                "valueAxis2.lineSize": {
                    action: "rename",
                    to : "valueAxis2.axisLine.size"
                },
                "valueAxis.scale": {
                    action: "rename",
                    to : "plotArea.primaryScale"
                },
                "valueAxis2.scale": {
                    action: "rename",
                    to : "plotArea.secondaryScale"
                },
                "valueAxis.gridline": {
                    action: "rename",
                    to : "plotArea.gridline"
                },
                "background": {
                    action: "rename",
                    to : "plotArea.background"
                },
                "selectedDataPoints" : {
                    action : "rename",
                    to : "interaction.selectedDataPoints"
                },
                "plotArea.referenceLine.line.primaryValues" : {
                    action : "rename",
                    to : "plotArea.referenceLine.line.valueAxis"
                },
                "plotArea.referenceLine.line.secondaryValues" : {
                    action : "rename",
                    to : "plotArea.referenceLine.line.valueAxis2"
                },
                /////////// Format String Properties /////////////
                "valueAxis.label.formatString" : {
                    action : "changeFormatString"
                },
                "valueAxis2.label.formatString" : {
                    action : "changeFormatString"
                },
                "tooltip.formatString" : {
                    action : "changeFormatString"
                },
                "plotArea.dataLabel.formatString" : {
                    action : "changeFormatString"
                },
                "legend.formatString" : {
                    action : "changeFormatString"
                },
                "sizeLegend.formatString" : {
                    action : "changeFormatString"
                }
            }
        },
        "info/column": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "valueAxis"
                }
            }
        },
        "info/stacked_column": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "valueAxis"
                }
            }
        },
        "info/100_stacked_column": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "valueAxis"
                }
            }
        },
        "info/100_dual_stacked_column": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "yAxis2" : {
                    action : "rename",
                    to : "valueAxis2"
                }
            }
        },
        "info/bar": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "categoryAxis"
                }
            }
        },
        "info/stacked_bar": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "categoryAxis"
                }
            }
        },
        "info/100_stacked_bar": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "categoryAxis"
                }
            }
        },
        "info/100_dual_stacked_bar": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "xAxis2" : {
                    action : "rename",
                    to : "valueAxis2"
                },
                "valueAxis" : {
                    action : "exchange",
                    to : "valueAxis2"
                }
            }
        },
        "info/line": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "valueAxis"
                }
            }
        },
        "info/horizontal_line": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "categoryAxis"
                }
            }
        },
        "info/combination": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                
                ////////////////////Info Chart////////////////////

                "plotArea.line.lineVisible": {
                    action: "rename",
                    to: "plotArea.line.visible"
                },
                "plotArea.line.lineStyle": {
                    action: "rename",
                    to: "plotArea.line.style"
                }
            }
        },
        "info/horizontal_combination": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                
                ////////////////////Info Chart////////////////////

                "plotArea.line.lineVisible": {
                    action: "rename",
                    to: "plotArea.line.visible"
                },
                "plotArea.line.lineStyle": {
                    action: "rename",
                    to: "plotArea.line.style"
                }
            }
        },
        "info/dual_column": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "yAxis2" : {
                    action : "rename",
                    to : "valueAxis2"
                }
            }
        },
        "info/dual_stacked_column": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "yAxis2" : {
                    action : "rename",
                    to : "valueAxis2"
                }
            }
        },
        "info/dual_bar": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "xAxis2" : {
                    action : "rename",
                    to : "valueAxis2"
                },
                "valueAxis" : {
                    action : "exchange",
                    to : "valueAxis2"
                }
            }
        },
        "info/dual_stacked_bar": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "xAxis2" : {
                    action : "rename",
                    to : "valueAxis2"
                },
                "valueAxis" : {
                    action : "exchange",
                    to : "valueAxis2"
                }
            }
        },
        "info/dual_line": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "yAxis2" : {
                    action : "rename",
                    to : "valueAxis2"
                }
            }
        },
        "info/dual_horizontal_line": {
            properties: {
                "xAxis": {
                    action: "rename",
                    to : "valueAxis"
                },
                "yAxis": {
                    action: "rename",
                    to : "categoryAxis"
                },
                "xAxis2" : {
                    action : "rename",
                    to : "valueAxis2"
                },
                "valueAxis" : {
                    action : "exchange",
                    to : "valueAxis2"
                }
            }
        },
        "info/scatter": {
            properties: {
                "xAxis" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "yAxis" : {
                    action : "rename",
                    to : "valueAxis2"
                }
            }
        },
        "info/bubble": {
            properties: {
                "xAxis" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "yAxis" : {
                    action : "rename",
                    to : "valueAxis2"
                }
            }
        },
        "info/timeBubble": {
            properties: {
                "xAxis" : {
                    action : "rename",
                    to : "valueAxis"
                },
                "yAxis" : {
                    action : "rename",
                    to : "valueAxis2"
                },
                "valueAxis.scale.fixedTicks" : {
                    action : "rename",
                    to : "valueAxis.axisTick.fixedTicks"
                }
            }
        },
        "info/treeMap": {
            properties: {
    
            }
        },
        "info/pie": {
            properties: {
                ////////////////////Info Chart////////////////////

                "plotArea.contextInfos" : {
                    action : "rename",
                    to  : "plotArea.highlight.contextInfos"
                }
            }
        },
        "info/donut": {
            properties: {
                ////////////////////Info Chart////////////////////
                "plotArea.contextInfos" : {
                    action : "rename",
                    to  : "plotArea.highlight.contextInfos"
                }
            }
        },
        "info/bullet": {
            properties: {
                "yAxis" : {
                    action : "rename",
                    to : "categoryAxis"
                },
                ////////////////////Info Chart////////////////////

                "plotArea.targetValueColor" : {
                    action : "rename",
                    to : "plotArea.target.valueColor"
                },
                "plotArea.targetShadowColor" : {
                    action : "rename",
                    to : "plotArea.target.shadowColor"
                }
            }
        }
    };

    properties["info/trellis_column"] = properties["info/column"];
    properties["info/trellis_bar"] = properties["info/bar"];
    properties["info/trellis_line"] = properties["info/line"];
    properties["info/trellis_bubble"] = properties["info/bubble"];
    properties["info/trellis_scatter"] = properties["info/scatter"];
    properties["info/trellis_stacked_column"] = properties["info/stacked_column"];
    properties["info/trellis_stacked_bar"] = properties["info/stacked_bar"];
    properties["info/trellis_dual_column"] = properties["info/dual_column"];
    properties["info/trellis_dual_line"] = properties["info/dual_line"];
    properties["info/trellis_dual_bar"] = properties["info/dual_bar"];
    properties["info/trellis_100_stacked_column"] = properties["info/100_stacked_column"];
    properties["info/trellis_100_stacked_bar"] = properties["info/100_stacked_bar"];
    properties["info/trellis_combination"] = properties["info/combination"];
    properties["info/trellis_donut"] = properties["info/donut"];
    properties["info/trellis_pie"] = properties["info/pie"];
    properties["info/trellis_horizontal_line"] = properties["info/horizontal_line"];
    properties["info/trellis_dual_horizontal_line"] = properties["info/dual_horizontal_line"];
    properties["info/trellis_horizontal_combination"] = properties["info/horizontal_combination"];
    properties["info/trellis_dual_stacked_column"] = properties["info/dual_stacked_column"];
    properties["info/trellis_100_dual_stacked_column"] = properties["info/dual_100_stacked_column"];
    properties["info/trellis_100_dual_stacked_bar"] = properties["info/100_dual_stacked_bar"];
    properties["info/trellis_dual_stacked_bar"] = properties["info/dual_stacked_bar"];
    
    return properties;
});

define('sap/viz/migrate/migrator/Migrator16to18Model/CSS',[],function() {
    var css = {
        "default" : {
            ".v-m-root .v-m-title .v-title" : {
                "font-family" : "title.style.fontFamily",
                "font-size" : "title.style.fontSize",
                "font-weight" : "title.style.fontWeight",
                "fill" : "title.style.color",
                "font-style" : "title.style.fontStyle"
            },
            
            ".v-m-root .v-m-legends .v-m-legend .v-title" : {
                "font-family" : "legend.title.style.fontFamily",
                "font-size" : "legend.title.style.fontSize",
                "font-weight" : "legend.title.style.fontWeight",
                "fill" : "legend.title.style.color",
                "font-style" : "legend.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-legends .v-m-legend .v-label" : {
                "font-family" : "legend.label.style.fontFamily",
                "font-size" : "legend.label.style.fontSize",
                "font-weight" : "legend.label.style.fontWeight",
                "fill" : "legend.label.style.color",
                "font-style" : "legend.label.style.fontStyle"
            },
            
            ".v-m-root .v-m-legends .v-m-legend .v-hovershadow" : {
                "fill" : "legend.hoverShadow.color"
            },
            
            ".v-m-root .v-m-main .v-m-background .v-background-body" : {
                "fill" : "plotArea.background.color"
            },

            ".v-m-root .v-m-main .v-m-background .v-background-border" : {
                "stroke" : "plotArea.background.border.stroke",
                "stroke-width" : "plotArea.background.border.strokeWidth"
            },

            ".v-m-root .v-m-tooltip .v-background" : {
                "background-color" : "tooltip.background.color",
                "border-color" : "tooltip.background.borderColor"
            },

            ".v-m-root .v-m-tooltip .v-footer-label" : {
                "color" : "tooltip.footerLabel.color"
            },

            ".v-m-root .v-m-tooltip .v-separationline" : {
                "border-bottom-color" : "tooltip.separationLine.color"
            },

            ".v-m-root .v-m-tooltip .v-body-dimension-label" : {
                "color" : "tooltip.bodyDimensionLabel.color"
            },

            ".v-m-root .v-m-tooltip .v-body-dimension-value" : {
                "color" : "tooltip.bodyDimensionValue.color"
            },

            ".v-m-root .v-m-tooltip .v-body-measure-label" : {
                "color" : "tooltip.bodyMeasureLabel.color"
            },

            ".v-m-root .v-m-tooltip .v-body-measure-value" : {
                "color" : "tooltip.bodyMeasureValue.color"
            },

            ".v-m-root .v-m-tooltip .v-closeButton" : {
                "background-color" : "tooltip.closeButton.backgroundColor",
                "border-color" : "tooltip.closeButton.borderColor"
            }
        },

        "single_default" : {
            ".v-m-root .v-m-main .v-m-datalabel .v-datalabel" : {
                "font-family" : "plotArea.dataLabel.style.fontFamily",
                "font-size" : "plotArea.dataLabel.style.fontSize",
                "font-weight" : "plotArea.dataLabel.style.fontWeight",
                "fill" : "plotArea.dataLabel.style.color",
                "font-style" : "plotArea.dataLabel.style.fontStyle"
            }
        },
        
        "bar" : {
            ".v-m-root .v-m-main .v-m-xAxis .v-title" : {
                "font-family" : "valueAxis.title.style.fontFamily",
                "font-size" : "valueAxis.title.style.fontSize",
                "font-weight" : "valueAxis.title.style.fontWeight",
                "fill" : "valueAxis.title.style.color",
                "font-style" : "valueAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-hidden-title" : {
                "fill" : "valueAxis.hiddenTitle.color"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-label" : {
                "font-family" : "valueAxis.label.style.fontFamily",
                "font-size" : "valueAxis.label.style.fontSize",
                "font-weight" : "valueAxis.label.style.fontWeight",
                "fill" : "valueAxis.label.style.color",
                "font-style" : "valueAxis.label.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis .v-title" : {
                "font-family" : "categoryAxis.title.style.fontFamily",
                "font-size" : "categoryAxis.title.style.fontSize",
                "font-weight" : "categoryAxis.title.style.fontWeight",
                "fill" : "categoryAxis.title.style.color",
                "font-style" : "categoryAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis .v-hidden-title" : {
                "fill" : "categoryAxis.hiddenTitle.color"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-label" : {
                "font-family" : "categoryAxis.label.style.fontFamily",
                "font-size" : "categoryAxis.label.style.fontSize",
                "font-weight" : "categoryAxis.label.style.fontWeight",
                "fill" : "categoryAxis.label.style.color",
                "font-style" : "categoryAxis.label.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-hovershadow" : {
                "fill" : "categoryAxis.hoverShadow.color"
            }
        },
        
        "dual_bar" : {            
            ".v-m-root .v-m-main .v-m-xAxis2 .v-title" : {
                "font-family" : "valueAxis2.title.style.fontFamily",
                "font-size" : "valueAxis2.title.style.fontSize",
                "font-weight" : "valueAxis2.title.style.fontWeight",
                "fill" : "valueAxis2.title.style.color",
                "font-style" : "valueAxis2.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis2 .v-hidden-title" : {
                "fill" : "valueAxis2.hiddenTitle.color"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis2 .v-label" : {
                "font-family" : "valueAxis2.label.style.fontFamily",
                "font-size" : "valueAxis2.label.style.fontSize",
                "font-weight" : "valueAxis2.label.style.fontWeight",
                "fill" : "valueAxis2.label.style.color",
                "font-style" : "valueAxis2.label.style.fontStyle"
            }
        },
        
        "column" : {
            ".v-m-root .v-m-main .v-m-xAxis .v-title" : {
                "font-family" : "categoryAxis.title.style.fontFamily",
                "font-size" : "categoryAxis.title.style.fontSize",
                "font-weight" : "categoryAxis.title.style.fontWeight",
                "fill" : "categoryAxis.title.style.color",
                "font-style" : "categoryAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-hidden-title" : {
                "fill" : "categoryAxis.hiddenTitle.color"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-label" : {
                "font-family" : "categoryAxis.label.style.fontFamily",
                "font-size" : "categoryAxis.label.style.fontSize",
                "font-weight" : "categoryAxis.label.style.fontWeight",
                "fill" : "categoryAxis.label.style.color",
                "font-style" : "categoryAxis.label.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-hovershadow" : {
                "fill" : "categoryAxis.hoverShadow.color"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-title" : {
                "font-family" : "valueAxis.title.style.fontFamily",
                "font-size" : "valueAxis.title.style.fontSize",
                "font-weight" : "valueAxis.title.style.fontWeight",
                "fill" : "valueAxis.title.style.color",
                "font-style" : "valueAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis .v-hidden-title" : {
                "fill" : "valueAxis.hiddenTitle.color"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-label" : {
                "font-family" : "valueAxis.label.style.fontFamily",
                "font-size" : "valueAxis.label.style.fontSize",
                "font-weight" : "valueAxis.label.style.fontWeight",
                "fill" : "valueAxis.label.style.color",
                "font-style" : "valueAxis.label.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-hovershadow" : {
                "fill" : "valueAxis.hoverShadow.color"
            }
        },
        
        "dual_column" : {           
            ".v-m-root .v-m-main .v-m-yAxis2 .v-title" : {
                "font-family" : "valueAxis2.title.style.fontFamily",
                "font-size" : "valueAxis2.title.style.fontSize",
                "font-weight" : "valueAxis2.title.style.fontWeight",
                "fill" : "valueAxis2.title.style.color",
                "font-style" : "valueAxis2.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis2 .v-hidden-title" : {
                "fill" : "valueAxis2.hiddenTitle.color"
            },

            ".v-m-root .v-m-main .v-m-yAxis2 .v-label" : {
                "font-family" : "valueAxis2.label.style.fontFamily",
                "font-size" : "valueAxis2.label.style.fontSize",
                "font-weight" : "valueAxis2.label.style.fontWeight",
                "fill" : "valueAxis2.label.style.color",
                "font-style" : "valueAxis2.label.style.fontStyle"
            }
        },

        "scatter" : {
            ".v-m-root .v-m-main .v-m-xAxis .v-title" : {
                "font-family" : "valueAxis.title.style.fontFamily",
                "font-size" : "valueAxis.title.style.fontSize",
                "font-weight" : "valueAxis.title.style.fontWeight",
                "fill" : "valueAxis.title.style.color",
                "font-style" : "valueAxis.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-hidden-title" : {
                "fill" : "valueAxis.hiddenTitle.color"
            },
            
            ".v-m-root .v-m-main .v-m-xAxis .v-label" : {
                "font-family" : "valueAxis.label.style.fontFamily",
                "font-size" : "valueAxis.label.style.fontSize",
                "font-weight" : "valueAxis.label.style.fontWeight",
                "fill" : "valueAxis.label.style.color",
                "font-style" : "valueAxis.label.style.fontStyle"
            },
            
            ".v-m-root .v-m-main .v-m-yAxis .v-title" : {
                "font-family" : "valueAxis2.title.style.fontFamily",
                "font-size" : "valueAxis2.title.style.fontSize",
                "font-weight" : "valueAxis2.title.style.fontWeight",
                "fill" : "valueAxis2.title.style.color",
                "font-style" : "valueAxis2.title.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-yAxis .v-label" : {
                "font-family" : "valueAxis2.label.style.fontFamily",
                "font-size" : "valueAxis2.label.style.fontSize",
                "font-weight" : "valueAxis2.label.style.fontWeight",
                "fill" : "valueAxis2.label.style.color",
                "font-style" : "valueAxis2.label.style.fontStyle"
            }
        },

        "bubble" : {
            ".v-m-root .v-m-legends .v-m-sizeLegend .v-title" : {
                "font-family" : "sizeLegend.title.style.fontFamily",
                "font-size" : "sizeLegend.title.style.fontSize",
                "font-weight" : "sizeLegend.title.style.fontWeight",
                "fill" : "sizeLegend.title.style.color",
                "font-style" : "sizeLegend.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-legends .v-m-sizeLegend .v-label" : {
                "font-family" : "sizeLegend.label.style.fontFamily",
                "font-size" : "sizeLegend.label.style.fontSize",
                "font-weight" : "sizeLegend.label.style.fontWeight",
                "fill" : "sizeLegend.label.style.color",
                "font-style" : "sizeLegend.label.style.fontStyle"
            }
        },

        "trellis_default" : {
            ".v-m-root .v-m-main .v-m-plot .v-m-datalabel .v-datalabel" : {
                "font-family" : "plotArea.dataLabel.style.fontFamily",
                "font-size" : "plotArea.dataLabel.style.fontSize",
                "font-weight" : "plotArea.dataLabel.style.fontWeight",
                "fill" : "plotArea.dataLabel.style.color",
                "font-style" : "plotArea.dataLabel.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-background .v-background-body" : {
                "fill" : "plotArea.background.color"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-background .v-background-border" : {
                "stroke" : "plotArea.background.border.stroke",
                "stroke-width" : "plotArea.background.border.strokeWidth"
            },

            ".v-m-root>.v-m-main>.v-m-xAxis2 .v-title" : {
                "font-family" : "columnAxis.title.style.fontFamily",
                "font-size" : "columnAxis.title.style.fontSize",
                "font-weight" : "columnAxis.title.style.fontWeight",
                "fill" : "columnAxis.title.style.color",
                "font-style" : "columnAxis.title.style.fontStyle"
            },

            ".v-m-root>.v-m-main>.v-m-xAxis2 .v-label" : {
                "font-family" : "columnAxis.label.style.fontFamily",
                "font-size" : "columnAxis.label.style.fontSize",
                "font-weight" : "columnAxis.label.style.fontWeight",
                "fill" : "columnAxis.label.style.color",
                "font-style" : "columnAxis.label.style.fontStyle"
            },

            ".v-m-root>.v-m-main>.v-m-xAxis2 .v-hovershadow" : {
                "fill" : "columnAxis.hoverShadow.color"
            },

            ".v-m-root>.v-m-main>.v-m-yAxis .v-title" : {
                "font-family" : "rowAxis.title.style.fontFamily",
                "font-size" : "rowAxis.title.style.fontSize",
                "font-weight" : "rowAxis.title.style.fontWeight",
                "fill" : "rowAxis.title.style.color",
                "font-style" : "rowAxis.title.style.fontStyle"
            },

            ".v-m-root>.v-m-main>.v-m-yAxis .v-label" : {
                "font-family" : "rowAxis.label.style.fontFamily",
                "font-size" : "rowAxis.label.style.fontSize",
                "font-weight" : "rowAxis.label.style.fontWeight",
                "fill" : "rowAxis.label.style.color",
                "font-style" : "rowAxis.label.style.fontStyle"
            },

            ".v-m-root>.v-m-main>.v-m-yAxis .v-hovershadow" : {
                "fill" : "rowAxis.hoverShadow.color"
            }
        },

        "trellis_bar" : {
            ".v-m-root .v-m-main .v-m-plot .v-m-xAxis .v-title" : {
                "font-family" : "valueAxis.title.style.fontFamily",
                "font-size" : "valueAxis.title.style.fontSize",
                "font-weight" : "valueAxis.title.style.fontWeight",
                "fill" : "valueAxis.title.style.color",
                "font-style" : "valueAxis.title.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-xAxis .v-label" : {
                "font-family" : "valueAxis.label.style.fontFamily",
                "font-size" : "valueAxis.label.style.fontSize",
                "font-weight" : "valueAxis.label.style.fontWeight",
                "fill" : "valueAxis.label.style.color",
                "font-style" : "valueAxis.label.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-yAxis .v-title" : {
                "font-family" : "categoryAxis.title.style.fontFamily",
                "font-size" : "categoryAxis.title.style.fontSize",
                "font-weight" : "categoryAxis.title.style.fontWeight",
                "fill" : "categoryAxis.title.style.color",
                "font-style" : "categoryAxis.title.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-yAxis .v-label" : {
                "font-family" : "categoryAxis.label.style.fontFamily",
                "font-size" : "categoryAxis.label.style.fontSize",
                "font-weight" : "categoryAxis.label.style.fontWeight",
                "fill" : "categoryAxis.label.style.color",
                "font-style" : "categoryAxis.label.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-yAxis .v-hovershadow" : {
                "fill" : "categoryAxis.hoverShadow.color"
            }
        },

        "trellis_dual_bar" : {
            ".v-m-root .v-m-main .v-m-plot .v-m-xAxis2 .v-title" : {
                "font-family" : "valueAxis2.title.style.fontFamily",
                "font-size" : "valueAxis2.title.style.fontSize",
                "font-weight" : "valueAxis2.title.style.fontWeight",
                "fill" : "valueAxis2.title.style.color",
                "font-style" : "valueAxis2.title.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-xAxis2 .v-label" : {
                "font-family" : "valueAxis2.label.style.fontFamily",
                "font-size" : "valueAxis2.label.style.fontSize",
                "font-weight" : "valueAxis2.label.style.fontWeight",
                "fill" : "valueAxis2.label.style.color",
                "font-style" : "valueAxis2.label.style.fontStyle"
            }
        },

        "trellis_column" : {
            ".v-m-root .v-m-main .v-m-plot .v-m-xAxis .v-title" : {
                "font-family" : "categoryAxis.title.style.fontFamily",
                "font-size" : "categoryAxis.title.style.fontSize",
                "font-weight" : "categoryAxis.title.style.fontWeight",
                "fill" : "categoryAxis.title.style.color",
                "font-style" : "categoryAxis.title.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-xAxis .v-label" : {
                "font-family" : "categoryAxis.label.style.fontFamily",
                "font-size" : "categoryAxis.label.style.fontSize",
                "font-weight" : "categoryAxis.label.style.fontWeight",
                "fill" : "categoryAxis.label.style.color",
                "font-style" : "categoryAxis.label.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-xAxis .v-hovershadow" : {
                "fill" : "categoryAxis.hoverShadow.color"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-yAxis .v-title" : {
                "font-family" : "valueAxis.title.style.fontFamily",
                "font-size" : "valueAxis.title.style.fontSize",
                "font-weight" : "valueAxis.title.style.fontWeight",
                "fill" : "valueAxis.title.style.color",
                "font-style" : "valueAxis.title.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-yAxis .v-label" : {
                "font-family" : "valueAxis.label.style.fontFamily",
                "font-size" : "valueAxis.label.style.fontSize",
                "font-weight" : "valueAxis.label.style.fontWeight",
                "fill" : "valueAxis.label.style.color",
                "font-style" : "valueAxis.label.style.fontStyle"
            }
        },

        "trellis_dual_column" : {
            ".v-m-root .v-m-main .v-m-plot .v-m-yAxis2 .v-title" : {
                "font-family" : "valueAxis2.title.style.fontFamily",
                "font-size" : "valueAxis2.title.style.fontSize",
                "font-weight" : "valueAxis2.title.style.fontWeight",
                "fill" : "valueAxis2.title.style.color",
                "font-style" : "valueAxis2.title.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-yAxis2 .v-label" : {
                "font-family" : "valueAxis2.label.style.fontFamily",
                "font-size" : "valueAxis2.label.style.fontSize",
                "font-weight" : "valueAxis2.label.style.fontWeight",
                "fill" : "valueAxis2.label.style.color",
                "font-style" : "valueAxis2.label.style.fontStyle"
            }
        },

        "trellis_scatter" : {
            ".v-m-root .v-m-main .v-m-plot .v-m-xAxis .v-title" : {
                "font-family" : "valueAxis.title.style.fontFamily",
                "font-size" : "valueAxis.title.style.fontSize",
                "font-weight" : "valueAxis.title.style.fontWeight",
                "fill" : "valueAxis.title.style.color",
                "font-style" : "valueAxis.title.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-xAxis .v-label" : {
                "font-family" : "valueAxis.label.style.fontFamily",
                "font-size" : "valueAxis.label.style.fontSize",
                "font-weight" : "valueAxis.label.style.fontWeight",
                "fill" : "valueAxis.label.style.color",
                "font-style" : "valueAxis.label.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-yAxis .v-title" : {
                "font-family" : "valueAxis2.title.style.fontFamily",
                "font-size" : "valueAxis2.title.style.fontSize",
                "font-weight" : "valueAxis2.title.style.fontWeight",
                "fill" : "valueAxis2.title.style.color",
                "font-style" : "valueAxis2.title.style.fontStyle"
            },

            ".v-m-root .v-m-main .v-m-plot .v-m-yAxis .v-label" : {
                "font-family" : "valueAxis2.label.style.fontFamily",
                "font-size" : "valueAxis2.label.style.fontSize",
                "font-weight" : "valueAxis2.label.style.fontWeight",
                "fill" : "valueAxis2.label.style.color",
                "font-style" : "valueAxis2.label.style.fontStyle"
            }
        },

        "trellis_bubble" : {
            ".v-m-root .v-m-legends .v-m-sizeLegend .v-title" : {
                "font-family" : "sizeLegend.title.style.fontFamily",
                "font-size" : "sizeLegend.title.style.fontSize",
                "font-weight" : "sizeLegend.title.style.fontWeight",
                "fill" : "sizeLegend.title.style.color",
                "font-style" : "sizeLegend.title.style.fontStyle"
            },
            
            ".v-m-root .v-m-legends .v-m-sizeLegend .v-label" : {
                "font-family" : "sizeLegend.label.style.fontFamily",
                "font-size" : "sizeLegend.label.style.fontSize",
                "font-weight" : "sizeLegend.label.style.fontWeight",
                "fill" : "sizeLegend.label.style.color",
                "font-style" : "sizeLegend.label.style.fontStyle"
            }
        }
    };

    function extend(target, src) {
        for (var i in src) {
            if (src.hasOwnProperty(i)) {
                target[i] = src[i];
            }
        }
    }

    // Single
    extend(css["bar"], css["single_default"]);
    extend(css["column"], css["single_default"]);
    extend(css["scatter"], css["single_default"]);
    extend(css["dual_bar"], css["bar"]);
    extend(css["dual_column"], css["column"]);
    extend(css["bubble"], css["scatter"]);

    css["horizontal_combination"] = css["bar"];
    css["stacked_bar"] = css["bar"];
    css["100_stacked_bar"] = css["bar"];
    css["horizontal_line"] = css["bar"];

    css["dual_stacked_bar"] = css["dual_bar"];
    css["100_dual_stacked_bar"] = css["dual_bar"];
    css["dual_horizontal_line"] = css["dual_bar"];

    css["combination"] = css["column"];
    css["stacked_column"] = css["column"];
    css["100_stacked_column"] = css["column"];
    css["line"] = css["column"];

    css["dual_stacked_column"] = css["dual_column"];
    css["100_dual_stacked_column"] = css["dual_column"];
    css["dual_line"] = css["dual_column"];

    css["pie"] = css["default"];
    css["donut"] = css["default"];
    css["treemap"] = css["default"];
    extend(css["pie"], css["single_default"]);
    extend(css["donut"], css["single_default"]);
    extend(css["treemap"], css["single_default"]);

    // Trellis
    extend(css["trellis_bar"], css["trellis_default"]);
    extend(css["trellis_column"], css["trellis_default"]);
    extend(css["trellis_scatter"], css["trellis_default"]);
    extend(css["trellis_dual_bar"], css["trellis_bar"]);
    extend(css["trellis_dual_column"], css["trellis_column"]);

    css["trellis_stacked_bar"] = css["trellis_bar"];
    css["trellis_100_stacked_bar"] = css["trellis_bar"];
    css["trellis_horizontal_line"] = css["trellis_bar"];

    css["trellis_dual_stacked_bar"] = css["trellis_dual_bar"];
    css["trellis_100_dual_stacked_bar"] = css["trellis_dual_bar"];
    css["trellis_dual_horizontal_line"] = css["trellis_dual_bar"];

    css["trellis_stacked_column"] = css["trellis_column"];
    css["trellis_100_stacked_column"] = css["trellis_column"];
    css["trellis_line"] = css["trellis_column"];

    css["trellis_dual_stacked_column"] = css["trellis_dual_column"];
    css["trellis_100_dual_stacked_column"] = css["trellis_dual_column"];
    css["trellis_dual_line"] = css["trellis_dual_column"];

    extend(css["trellis_bubble"], css["trellis_scatter"]);

    css["trellis_pie"] = css["trellis_default"];
    css["trellis_donut"] = css["trellis_default"];

    return css;
});


define('sap/viz/migrate/CSSMigrator',['sap/viz/migrate/PropertyUtil'], function(PropertyUtil) {
    
    function findProperty(chartType, cssText, cssSector, cssModel) {
        var property = null;
        if (cssText && cssModel) {
            if (cssModel[chartType] && cssModel[chartType][cssText] && cssModel[chartType][cssText][cssSector]) {
                property = cssModel[chartType][cssText][cssSector];
            } else {
                if (cssModel["default"][cssText] && cssModel["default"][cssText][cssSector]) {
                    property = cssModel["default"][cssText][cssSector];
                }
            }
        }
        return property;
    }

    function applyCSSProperty(properties, chartType, cssText, cssSector, cssModel) {
        if (cssSector.indexOf(":") > -1) {
            var sector = cssSector.split(":");
            if (sector && sector.length === 2) {
                var property = findProperty(chartType, cssText, sector[0], cssModel);

                var index = sector[1].indexOf("!important");
                if (index > -1) {
                    sector[1] = sector[1].substring(0, index);
                }

                if (property) {
                    PropertyUtil.setProperty(properties, property, sector[1]);
                }
            }
        }
    }
    function removeChartTypePrefix(chartType){
        var retValue = chartType;
        var infoPrefix = "info/";
        if(chartType && chartType.indexOf(infoPrefix) > -1){
            retValue = chartType.substring(infoPrefix.length);
        }
        return retValue;
    }
    
    function enableCSSMigration(chartType, supportedList){
        var retValue = false; 
        if(chartType && supportedList && supportedList.indexOf(chartType) >-1 ){
            retValue = true;
        }   
        return retValue;
    }

    return {
        factory: function(cssModel) {
            var cssMigrator = {
                _model: cssModel,
                _migrateCSS: function(properties, chartType, css, cssModel) {
                    if (css && cssModel) {
                        var ruleTexts = css.split("}");
                        ruleTexts.forEach(function(rule) {
                            if (rule && rule.indexOf("{") > -1) {
                                var ruleItems = rule.split("{");
                                if (ruleItems && ruleItems.length === 2) {
                                    var cssText = ruleItems[0].trim();
                                    var cssValue = ruleItems[1];
            
                                    if (cssValue && cssValue.indexOf(";") > -1) {
                                        var cssSectors = cssValue.split(";");
                                        if (cssSectors && cssSectors.length > 0) {
                                            cssSectors.forEach(function(cssSector) {
                                                applyCSSProperty(properties, chartType, cssText, cssSector,cssModel);
                                            });
                                        }
                                    }
                                }
                            }
                        });
                    }
                    return properties;
                },
    
                migrate : function(json) {
                    if (this._model && json.css) {
                        var chartTypeWithOutPrefix = removeChartTypePrefix(json.type);
                        json.properties = this._migrateCSS(json.properties, chartTypeWithOutPrefix, json.css,
                                this._model);
                        delete json.css;
                    }
                    return json;
                }
            };
            
            return cssMigrator;
        }
    };
});
define('sap/viz/migrate/migrator/Migrator16to18',[ 'sap/viz/migrate/migrator/Migrator16to18Model/Properties', 'sap/viz/migrate/migrator/Migrator16to18Model/CSS',
        'sap/viz/migrate/migrator/versionMigrator', 'sap/viz/migrate/bindingMigrator', 'sap/viz/migrate/BaseMigrator',
        'sap/viz/migrate/scaleMigrator', 'sap/viz/migrate/CSSMigrator' ], function(propertyModel, cssModel,
        versionMigrator, bindingMigrator, BaseMigrator, scaleMigrator, cssMigrator) {

    var migrator = Object.create(versionMigrator);
    migrator.fromVersion = "4.0.16";
    migrator.toVersion = "5.0.0";
                         
    migrator.chainedMigrators = [ bindingMigrator, BaseMigrator.factory(propertyModel), scaleMigrator,
            cssMigrator.factory(cssModel) ];

    return migrator;
});
define('sap/viz/migrate/MigrationTool',['sap/viz/migrate/migrator/Migrator10to12',
    'sap/viz/migrate/migrator/Migrator12to16','sap/viz/migrate/migrator/Migrator16to18',
    'sap/viz/framework/common/util/ObjectUtils'
], function(Migrator1, Migrator2, Migrator3, ObjectUtils) {

    var migrators = (function init() {
        var migrators = {};
        [Migrator1, Migrator2, Migrator3].forEach(function(versionMigrator) {
            migrators[versionMigrator.fromVersion] = versionMigrator;
        });
        return migrators;
    }());
    
    return {
        _getVersion: function(json) {
            if (!json) {
                return json;
            }
            var version = json.version,
                versionArray;
            // Migration Tool only checks first 3 version numbers without build number (e.g. 4.0.10)
            // to perform the migration.
            if (version && version.split) {
                versionArray = version.split('.');
                if (versionArray.length === 4) {
                    return versionArray[0] + '.' + versionArray[1] + '.' + versionArray[2];
                }
            }
            return version;
        },

        _getMigrator: function(fromVersion) {
            if(migrators[fromVersion] === undefined){
                var version, targetVersion;
                for(version in migrators){
                    if(fromVersion > version){
                        targetVersion = version;
                    }else{
                        return migrators[targetVersion];
                    }
                }
                if(fromVersion < migrators[version].toVersion){
                    return migrators[targetVersion];
                }else{
                    return null;
                }
            }
            else{
                return migrators[fromVersion];
            }
        },

        migrate: function(json) {
            var version = this._getVersion(json),
                migrator,
                isAPICall = false;

            // Clone a copy to keep paramater will not be changed
            var o;
            if (json) {
                o  = {};
                for(var key in json) {
                    if (json.hasOwnProperty(key)) {
                        o[key] = json[key];
                    }
                }
                if (o.scales) {
                    o.scales = ObjectUtils.clone(o.scales);
                }
                json = o;
            }

            if (version === undefined ) {
                version = Migrator1.fromVersion;
                isAPICall = true;
            }
            while (version && (migrator = this._getMigrator(version))) {
                json = migrator.migrate(json, isAPICall);
                version = this._getVersion(json);
            }
            if (isAPICall) {
                delete json.version;
            }

            return json;
        }
    };
});
define('sap/viz/api/core/VizInstance',['sap/viz/framework/core/ChartApp',
        'sap/viz/framework/common/util/FunctionUtils',
        'sap/viz/framework/common/util/ObjectUtils',
        'sap/viz/migrate/MigrationTool',
        'exports'
    ],
    function Setup(ChartApp, FunctionUtils, ObjectUtils, MigrationTool) {
    
        
    
        var CROSSTABLEDATASET = 'CrosstableDataset';
        var FLATTABLEDATASET = 'FlatTableDataset';
        /**
         * sap.viz.api.core.VizInstance
         * @namespace sap.viz.api.core.VizInstance
         */
        var vizInstance = function (ChartViewRegistry, param) {
            this.__className = "sap.viz.api.core.VizInstance";
            this.app = new ChartApp(ChartViewRegistry);
            this.app.type(param.type)
                .data(param.data)
                .bindings(param.bindings)
                .properties(param.properties)
                .container(param.container)
                .events(param.events)
                .scales(param.scales)
                .sharedRuntimeScales(param.sharedRuntimeScales)
                .size(param.size);
            this.app.render();
        };

        vizInstance.prototype = {
            size: function (size) {
                if (!arguments.length) {
                    return this.app.size();
                }
                this.app.size(size);
                return this;
            },
            destroy: function () {
                this.app.destroy();
                this.app = null;
            },
            feedingZone: function () {
                return this.app.getAllFeedingZone();
            },
            propertyZone: function () {
                return this.app.getPropertyZone();
            },
            data: function (data) {
                if (arguments.length > 0) {
                    this.app.update({
                        data: data
                    });
                    return this;
                } else {
                    return this.app.data();
                }
            },
            description: function () {
                return this.app.getDescription();
            },
            bindings: function (bindings) {
                if (arguments.length > 0) {
                    this.app.update({
                        bindings: bindings
                    });
                    return this;
                } else {
                    return this.app.bindings();
                }
            },
            /**
             * Setting/getting scales
             *
             * @function scales
             * @memberof sap.viz.api.core.VizInstance
             * @static
             * @param {Object} [optional] Scales settings.
             * @returns {Object} Scales settings of current vizInstance.
             * <pre>
             * [
             *  {
             *    "feed": "valueAxis", //feed named "valueAxis"
             *    "type": "linear", // currently not working
             *    "min": 0, // min value of the scale
             *    "max": 300 // max value of the scale
             *  }, {
             *    "feed": "color", // feed named "color"
             *    "type": "color", // currently not working
             *    "palette": ["#00ffff", "#ff00ff", "#ff1122", "#ffff00", "#f99f99", "#99ff99"] // color palette
             *  }
             * ]
             * </pre>
             */
            scales: function (scales) {
                if (arguments.length > 0) {
                    this.app.update({
                        scales: scales
                    });
                    return this;
                } else {
                    return this.app.scales();
                }
            },
            sharedRuntimeScales: function (sharedRuntimeScales){
                if (arguments.length > 0){
                    this.app.update({
                        sharedRuntimeScales: sharedRuntimeScales
                    });
                    return this;
                } else {
                    return this.app.sharedRuntimeScales();
                }
            },
            runtimeScales: function (){
                return this.app.runtimeScales.apply(this.app, arguments);
            },
            on: function (evtType, callback, scope) {
                return this.app.on(evtType, callback, scope);
            },
            off: function (evtType) {
                return this.app.off(evtType);
            },
            update: function (updates) {
                var json;
                if (arguments.length > 0) {
                    var options = arguments[0];
                    if(!options.hasOwnProperty("type") && this.app && this.app.type()){
                        options.type = this.app.type();
                    }
                    json = MigrationTool.migrate(options);
                    this.app.update(json);
                    return this;
                }
            },
            properties: function () {
                var json;
                if (arguments.length > 0) {
                    json = MigrationTool.migrate({
                        properties: arguments[0], 
                        type: this.app.type()
                    });
                    this.app.update(json);
                    return this;
                } else{
                    return this.app.properties();    
                }
            },
            selection: function () {
                var items = null;
                var selOptions = null;

                var isGet = false;
                if (arguments.length <= 0) {
                    isGet = true;
                } else if (arguments.length <= 1) {
                    if (arguments[0] instanceof Array) {
                        isGet = false;
                        items = arguments[0];
                    } else {
                        isGet = true;
                        selOptions = arguments[0];
                    }
                } else {
                    isGet = false;
                    items = arguments[0];
                    selOptions = arguments[1];
                }

                var reValue;
                if (isGet) {
                    reValue = this.app.getSelectedObjects(selOptions);
                } else {
                    reValue = this.app.setSelectedObjects(items, selOptions);
                }
                return reValue;
            },
            /**
             * Export chart instance into a JSON object which contains
             * all information of the chart including type, data, properties,
             * css, feeding, and size.
             * @function toJSON
             * @memberof sap.viz.api.core.VizInstance
             * @static
             * @deprecated
             * @returns {Object}  VizDoc object that contains all the information of VizInstance.
             * <pre>
             * {
             *   "type": String, //refer to chartproperty for all supported viz chart TypeUtils
             *   "properties": {}, //refer to chartproperty for all supported options for each viz type
             *   "css": String, //refer to chartproperty  or all supported css items for each viz type
             *   "size": {
             *         "auto": Boolean, // When "auto" is true, chart will use parent container size.
             *                          // When "auto" is false, the setting of "width" and "height" take precedence .
             *         "width": Number, // Width of chart, only works when 'auto' is true
             *         "height": Number // Height of chart, only works when 'auto' is true
             *      },
             *   "data": {
             *         "type":"Crosstable"|"FlatTable",
             *         "val":dataset
             *         },
             *   "feeding": {@link sap.viz.api.core.VizInstance#feeding}
             * }
             * </pre>
             */
            toJSON: function (options) {
                var doc = {};
                doc.type = this.app.type();
                var dsJSON = this.app.data().toJSON(options);
                var type;
                if (dsJSON.id === 'sap.viz.data.CrosstableDataset') {
                    type = 'Crosstable';
                } else if (dsJSON.id === 'sap.viz.data.FlatTableDataset') {
                    type = 'FlatTable';
                }
                doc.data = {
                    type: type,
                    val: dsJSON.data,
                    info: dsJSON.info
                };
                doc.properties = this.app.serializeProps();
                doc.bindings = this.bindings();
                doc.scales = this.app.serializeScales();
                doc.size = this.app.size();
                if (sap.viz.api.hasOwnProperty('VERSION')) {
                    doc.version = sap.viz.api.VERSION;
                }
                return doc;
            },
            /**
             * Export the current viz as SVG String.
             * The viz is ready to be exported to svg ONLY after the "initialized" event is dispatched.
             * Any attempt to export to svg before that will result in an empty svg string.
             * @param {Object} [option] {width: Number, height: Number}
             * @return {String} the SVG string of the current viz or empty svg if error occurs.
             * @ignore
             */
            exportToSVGString: function (option) {
                return this.app.exportToSVGString(option);
            },

            supportExportToSVG: function () {
                return this.app.supportExportToSVG();
            },
            
            selectedPropertyZone: function(sel) {
                if (arguments.length){
                    this.app.setSelectedPropertyZone.apply(this.app, arguments);
                    return this;
                } else {
                    return this.app.getSelectedPropertyZone();
                }
            },
            
        };
        return vizInstance;
    });
define('sap/viz/framework/chartmodel/feed/feed',['sap/viz/framework/common/util/FunctionUtils'],
    function Setup(FunctionUtils) {

        return function(feedId, feedName, type, min, max, aaIndex, acceptMND, mgIndex, maxStackedDims, minStackedDims) {

            var _feedId = feedId;
            var _feedName = feedName;
            var _type = type;
            var _min = min;
            var _max = max;
            var _aaIndex = aaIndex;
            var _acceptMND = acceptMND;
            var _mgIndex = mgIndex;
            var _maxStackedDims = maxStackedDims;
            var _minStackedDims = minStackedDims;

            var _data = [];

            function feed() {
                return feed;
            }

            feed.feedId = function(_) {
                if (!arguments.length) {
                    return _feedId;
                }

                _feedId = _;

                return feed;
            };

            feed.feedName = function(_) {
                if (!arguments.length) {
                    return _feedName;
                }

                _feedName = _;

                return feed;
            };

            feed.type = function(_) {
                if (!arguments.length) {
                    return _type;
                }

                _type = _;

                return feed;
            };

            feed.min = function(_) {
                if (!arguments.length) {
                    return _min;
                }

                _min = _;
                return feed;
            };

            feed.max = function(_) {
                if (!arguments.length) {
                    return _max;
                }


                _max = _;

                return feed;
            };

            feed.analysisAxisIndex = function(_) {
                if (!arguments.length) {
                    return _aaIndex;
                }


                _aaIndex = _;

                return feed;
            };

            feed.measureGroupIndex = function(_) {
                if (!arguments.length) {
                    return _mgIndex;
                }

                _mgIndex = _;

                return feed;
            };

            feed.acceptMND = function(_) {
                if (!arguments.length) {
                    return _acceptMND;
                }


                _acceptMND = _;

                return feed;
            };

            feed.maxStackedDims = function(_) {
                if (!arguments.length) {
                    return _maxStackedDims;
                }

                _maxStackedDims = _;

                return feed;
            };
            feed.minStackedDims = function(_) {
                if (!arguments.length) {
                    return _minStackedDims;
                }

                _minStackedDims = _;

                return feed;
            };

            feed.data = function(_) {
                if (!arguments.length) {
                    return _data;
                }

                _data = _;

                return feed;
            };


            feed.addData = function(_) {
                _data.push(_);
                return feed;
            };

            feed.getMeasureNames = function() {

                var mgIndex = _mgIndex - 1;
                var measureNames = [];
                for (var i = 0; i < _data.length; i++) {
                    measureNames.push({
                        'val': _data[i]['name'],
                        'ctx': {
                            'mg': mgIndex,
                            'mi': i
                        }
                    });
                }

                return measureNames;
            };

            feed.getMeasureValues = function() {
                var values = [];
                if (_data.length > 0) {
                    return _data[0].getMeasureValues();
                }

                return values;

            };

            feed.getMeasureCount = function() {
                return _data.length;
            };

            /**
             * @returns check if the feed has been feeded MND
             */
            feed.hasMNDFeeded = function() {

                var data = feed.data();
                for (var i = 0; i < data.length; i++) {
                    if (data[i].getType() === "measureNamesDimension") {
                        return true;
                    }
                }

                return false;
            };

            feed.hasFeeded = function() {
                return feed.data().length > 0 ? true : false;
            };

            feed.getIndex = function() {
                return feed.analysisAxisIndex() ? feed.analysisAxisIndex() : feed.measureGroupIndex();
            };

            feed.getDataCount = function() {
                if (feed.type() === "Dimension") {
                    return feed.data().length;
                } else {
                    return feed.data().length > 0 ? feed.data()[0].getMeasureValues().length : 0;
                }

            };

            return feed;
        };

    });
define('sap/viz/framework/chartmodel/description/DataContainer',[],
    function Setup() {
        var DataContainer = function(uid) {
            this._uId = uid;
            this._isFake = false;
            this._infos = null;
        };

        DataContainer.prototype.getId = function() {
            return this._uId;
        };

        DataContainer.prototype.fake = function(_) {
            if (!arguments.length) {
                return this._isFake;
            }
            this._isFake = _;
        };

        DataContainer.prototype.infos = function(_) {
            if (!arguments.length) {
                return this._infos;
            }
            this._infos = _;
        };

        return DataContainer;
    });
define('sap/viz/framework/chartmodel/description/DimensionLabels',['sap/viz/framework/chartmodel/description/DataContainer', 'sap/viz/framework/common/util/oo'],
    function Setup(DataContainer, oo) {
        var DimensionLabels = function(uid, type, values) {
            DimensionLabels.superclass.constructor.apply(this, arguments);
            this._type = type;
            this._values = values;
        };

        oo.extend(DimensionLabels, DataContainer);

        DimensionLabels.prototype.getType = function() {
            return this._type;
        };

        DimensionLabels.prototype.getValues = function() {
            return this._values;
        };

        return DimensionLabels;
    });
define('sap/viz/framework/chartmodel/feed/feeder',['sap/viz/framework/chartmodel/feed/feed', 'sap/viz/framework/common/util/FunctionUtils',
    'sap/viz/framework/common/util/TypeUtils', 'sap/viz/framework/chartmodel/description/DimensionLabels',
    'sap/viz/framework/common/lang/LangManager'
], function Setup(Feed, FunctionUtils, TypeUtils, DimensionLabels, langManager) {

    return function(feedDefs, crossTableDS, feedingInfo) {

        var FEED_D = 'Dimension';
        var FEED_M = 'Measure';

        var FEEDID = "feedId";

        var BINDTO = "binding";
        var TYPE = "type";
        var INDEX = "index";

        var _aaMap = [];
        // analysis axis index to feed map,
        // _aamap[0] point to feed of axis 1
        var _mgMap = [];
        // measure group index to feed map,
        // _mgMap[0] point to feed of measure value
        // group 1
        var _feeds = [];
        var _feedsMap = {};

        var _aaBindingInfo = [];

        function feeder() {

            return feeder;
        }


        feeder.init = function() {
            initFeeds(feedDefs);

            // TODO separate validation and init
            if (crossTableDS) {
                if (feedingInfo) {
                    manualFeed(crossTableDS, feedingInfo);
                } else {
                    autoFeed(crossTableDS);
                }

                feeder.checkValid();
            }
        };

        /**
         * @returns {feed}
         */
        feeder.getFeeds = function() {
            return _feeds;
        };

        /**
         * @param feedId
         *            feed id
         *
         * @returns {feed} undefined if no feed matched
         *
         */
        feeder.findFeed = function(feedId) {
            return _feedsMap[feedId];
        };

        feeder.getAnalysisAxisIndex = function(feed) {

            for (var i = 0; i < _aaMap.length; i++) {
                if (_aaMap[i] === feed) {
                    return i;
                }
            }

        };

        feeder.getMeasureValuesGroupIndex = function(feed) {

            for (var i = 0; i < _mgMap.length; i++) {
                if (_mgMap[i] === feed) {
                    return i;
                }
            }

        };

        /**
         * TODO: add description
         */
        feeder.getMeasureValuesGroupFeeds = function() {

            return _mgMap;
        };

        /**
         * Check if meta data and raw data are matched. If not match,
         * throw exception
         */
        feeder.checkValid = function() {
            for (var i = 0; i < _feeds.length; i++) {
                var feed = _feeds[i];
                var dataLength;
                if (feed.type() === "Dimension") {
                    dataLength = feed.getDataCount();
                    if (dataLength < feed.min() || (feed.max() !== Number.POSITIVE_INFINITY && dataLength >
                        feed.max())) {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_MEET_NUMBER_OF_FEED', feed
                            .feedId()));
                    }

                } else if (feed.type() === "Measure") {
                    dataLength = feed.getDataCount();
                    if (dataLength < feed.min() || (feed.max() !== Number.POSITIVE_INFINITY && dataLength >
                        feed.max())) {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_MEET_NUMBER_OF_FEED', feed
                            .feedId()));
                    }

                } else {
                    FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_WRONG_FEED_TYPE', feed.feedId()));
                }

            }

        };

        feeder.getBindingInfo = function() {

            return _aaBindingInfo;
        };

        /**
         * TODO: add desc
         */
        function initFeeds(feedDefinitions) {
            if (TypeUtils.isArray(feedDefinitions)) {

                var dimensonNumber = 0;

                for (var i = 0; i < feedDefinitions.length; i++) {

                    var feedType = feedDefinitions[i]['type'];
                    var aaIndex = feedDefinitions[i]['aaIndex'];
                    var feedId = feedDefinitions[i]['id'];

                    if (feedType !== FEED_D && feedType !== FEED_M) {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_WRONG_FEED_TYPE_IN_DEFINTION',
                            feedDefinitions[i]['id']));
                    }

                    if (feedDefinitions[i]['type'] === FEED_D) {
                        if (feedDefinitions[i]['aaIndex'] <= 0) {
                            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_WRONG_AXIS_INDEX',
                                feedDefinitions[i]['id']));
                        }

                        dimensonNumber++;
                    }

                    if (feedDefinitions[i]['type'] === FEED_M) {
                        if (feedDefinitions[i]['mgIndex'] <= 0) {
                            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_WRONG_MEASURE_AXIS_INDEX',
                                feedDefinitions[i]['id']));
                        }

                    }

                    var arrayLength = _feeds.push(Feed(feedId, feedDefinitions[i]['name'], feedType,
                        feedDefinitions[i]['min'], feedDefinitions[i]['max'], aaIndex, feedDefinitions[
                            i]['acceptMND'], feedDefinitions[i]['mgIndex'], feedDefinitions[i][
                            'maxStackedDims'
                        ], feedDefinitions[i]['minStackedDims']));

                    _feedsMap[feedId] = _feeds[arrayLength - 1];

                }

                for (i = 0; i < dimensonNumber; i++) {
                    _aaBindingInfo[i] = false;
                }
            }

        }

        function autoFeed(crosstableDS) {
            var axes = crosstableDS.getAnalysisAxisCount();
            var feed;
            for (var i = 0; i < axes; i++) {
                feed = searchFeed(_feeds, FEED_D, i + 1);
                if (feed) {
                    var axis = crosstableDS.getAnalysisAxisByIdx(i);
                    if (TypeUtils.isExist(feed.maxStackedDims()) && axis.getDimensionLabels().length >
                        feed.maxStackedDims()) {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_INVALID_FEEDING', feed.feedId()));
                    }
                    if (TypeUtils.isExist(feed.minStackedDims()) && axis.getDimensionLabels().length <
                        feed.minStackedDims()) {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_INVALID_FEEDING', feed.feedId()));
                    }

                    _aaMap[i] = feed;
                    _aaBindingInfo[i] = true;
                    feed.addData(axis);
                }
            }

            var mvgs = crosstableDS.getMeasureValuesGroupCount();
            for (i = 0; i < mvgs; i++) {
                feed = searchFeed(_feeds, FEED_M, i + 1);
                if (feed) {
                    _mgMap[i] = feed;
                    if (crosstableDS.getMeasureValuesGroupByIdx(i)) {
                        feed.addData(crosstableDS.getMeasureValuesGroupByIdx(i));
                    }
                }

            }
        }

        function searchFeed(feeds, type, index) {
            for (var i = 0; i < feeds.length; i++) {
                if (feeds[i].type() === type && feeds[i].getIndex() === index) {
                    return feeds[i];
                }
            }

            return null;
        }

        function manualFeed(crosstableDS, feedList) {
            var dataLength;
            for (var i = 0; i < feedList.length; i++) {
                var feeding = feedList[i];
                var feedId = feeding[FEEDID];
                if (!feedId) {
                    FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NO_FEED_ID'));
                }

                var feed = _feedsMap[feedId];
                if (!feed) {
                    FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_INVALID_FEEDING_NUMBER', feedId));
                }

                var bindings = feeding[BINDTO];
                for (var j = 0; j < bindings.length; j++) {
                    var type = bindings[j][TYPE];
                    var index = bindings[j][INDEX];

                    if (type === "analysisAxis") {
                        var aa = crosstableDS.getAnalysisAxisByIdx(index - 1);
                        if (!aa) {
                            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NO_AXIS', index, feedId));
                        }

                        if (TypeUtils.isExist(feed.maxStackedDims()) && aa.getDimensionLabels().length >
                            feed.maxStackedDims()) {
                            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_INVALID_FEEDING', feedId));
                        }
                        if (TypeUtils.isExist(feed.minStackedDims()) && aa.getDimensionLabels().length <
                            feed.minStackedDims()) {
                            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_INVALID_FEEDING', feedId));
                        }

                        dataLength = feed.getDataCount();
                        if (feed.max() !== Number.POSITIVE_INFINITY && dataLength >= feed.max()) {
                            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_FEED_NOT_ACCEPT_DATA',
                                feedId));
                        }

                        feed.addData(aa);
                        _aaMap[index - 1] = feed;
                        _aaBindingInfo[feed.getIndex() - 1] = true;

                    } else if (type === "measureValuesGroup") {

                        var mvg = crosstableDS.getMeasureValuesGroupByIdx(index - 1);
                        if (!mvg) {
                            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_FIND_MEASURE_GROUP',
                                index, feedId));
                        }

                        dataLength = feed.getDataCount();
                        if (feed.max() !== Number.POSITIVE_INFINITY && dataLength >= feed.max()) {
                            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_FEED_NOT_ACCEPT_DATA',
                                feedId));
                        }

                        feed.addData(mvg);
                        _mgMap[feed.getIndex() - 1] = feed;

                    } else if (type === "measureNamesDimension") {
                        if (feed.acceptMND() < 0) {
                            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_ACCEPT') +
                                " MeasureNamesDimension " + feedId + " " + langManager.get('IDS_FEED'));
                        }

                        dataLength = feed.getDataCount();
                        if (feed.max() !== Number.POSITIVE_INFINITY && dataLength >= feed.max()) {
                            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_FEED_NOT_ACCEPT_DATA',
                                feedId));
                        }

                        feed.addData(new DimensionLabels("", "measureNamesDimension", ""));

                    } else {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_INVALID_BINDING'));
                    }
                }

            }

        }


        feeder.init();

        return feeder;
    };

});
define('sap/viz/framework/chartmodel/description/AnalysisAxis',['sap/viz/framework/chartmodel/description/DimensionLabels', 'sap/viz/framework/common/util/FunctionUtils',
        'sap/viz/framework/common/util/TypeUtils', 'sap/viz/framework/common/lang/LangManager'
    ],
    function Setup(DimensionLabels, FunctionUtils, TypeUtils, langManager) {

        var AnalysisAxis = function(data) {
            this._dimensionLabels = [];
            this.init(data);

        };

        AnalysisAxis.prototype.init = function(data) {

            for (var i = 0; i < data.length; i++) {
                this._dimensionLabels[i] = new DimensionLabels(data[i]["name"], data[i]["type"] ? data[i]["type"] :
                    "Dimension",
                    data[i]["values"]);

                this._dimensionLabels[i].fake(data[i]["isFake"] ? data[i]["isFake"] : false);
                this._dimensionLabels[i].infos(data[i]["infos"] ? data[i]["infos"] : null);
            }
        };

        AnalysisAxis.prototype.getDimensionLabels = function() {
            return this._dimensionLabels;
        };

        AnalysisAxis.prototype.getType = function() {
            return "analysisAxis";
        };

        AnalysisAxis.prototype.validate = function() {

            var labels = 1;
            var dimensions = this.getDimensionLabels();
            if (dimensions.length === 0) {
                FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_DIMENSION_NOT_ZERO'));
            }
            for (var i = 0; i < dimensions.length; i++) {
                if (i === 0) {
                    labels = dimensions[i].getValues().length;
                    if (TypeUtils.isExist(dimensions[i].infos()) && labels !== dimensions[i].infos().length) {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_DIMENSION_WRONG_COUNT',
                            dimensions[i].getId()));
                    }
                } else {
                    if (labels !== dimensions[i].getValues().length) {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_DIMENSION_WRONG_LABELS_COUNT',
                            dimensions[i].getId()));
                    }

                    if (TypeUtils.isExist(dimensions[i].infos()) && labels !== dimensions[i].infos().length) {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_DIMENSION_WRONG_COUNT',
                            dimensions[i].getId()));
                    }
                }
            }

            return labels;

        };

        AnalysisAxis.prototype.hasFakeData = function() {
            var dimensions = this.getDimensionLabels();
            for (var i = 0; i < dimensions.length; i++) {
                if (dimensions[i].fake()) {
                    return true;
                }
            }

            return false;
        };

        return AnalysisAxis;
    });
define('sap/viz/framework/chartmodel/description/MeasureValues',['sap/viz/framework/chartmodel/description/DataContainer', 'sap/viz/framework/common/util/oo'],
    function Setup(DataContainer, oo) {
        var MeasureValues = function(uid, values) {
            MeasureValues.superclass.constructor.apply(this, arguments);
            this._values = values;
        };

        oo.extend(MeasureValues, DataContainer);

        MeasureValues.prototype.getValues = function() {
            return this._values;
        };

        return MeasureValues;
    });
define('sap/viz/framework/chartmodel/description/MeasureValuesGroup',['sap/viz/framework/chartmodel/description/MeasureValues', 'sap/viz/framework/common/util/FunctionUtils',
        'sap/viz/framework/common/lang/LangManager'
    ],
    function Setup(MeasureValues, FunctionUtils, langManager) {

        var MeasureValuesGroup = function(data) {
            this._measureValues = [];
            this.init(data);
        };

        MeasureValuesGroup.prototype.init = function(data) {

            for (var i = 0; i < data.length; i++) {
                this._measureValues[i] = new MeasureValues(data[i]["name"], data[i]["values"]);
                this._measureValues[i].fake(data[i]["isFake"] ? data[i]["isFake"] : false);
                this._measureValues[i].infos(data[i]["infos"] ? data[i]["infos"] : null);
            }
        };

        MeasureValuesGroup.prototype.getMeasureValues = function() {
            return this._measureValues;
        };

        MeasureValuesGroup.prototype.getType = function() {
            return "measureValuesGroup";
        };

        MeasureValuesGroup.prototype.validate = function(labels) {

            var measures, value, i, j;
            if (!arguments.length) {
                var label = [1, 1];
                measures = this.getMeasureValues();
                for (i = 0; i < measures.length; i++) {
                    value = measures[i].getValues();
                    if (i === 0) {
                        if (value.length !== label[1]) {
                            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_WRONG_VALUES_COUNT_IN_AA2',
                                measures[i].getId(), label[1]));
                        }

                        label[0] = value[0].length;

                    } else {
                        if (value.length !== label[1]) {
                            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_WRONG_VALUES_COUNT_IN_AA2',
                                measures[i].getId(), label[1]));
                        }

                        for (j = 0; j < value.length; j++) {
                            if (value[j].length !== label[0]) {
                                FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_WRONG_VALUES_COUNT_IN_AA1',
                                    measures[i].getId(), label[0]));
                            }
                        }
                    }

                }

                return label;

            } else {
                measures = this.getMeasureValues();
                for (i = 0; i < measures.length; i++) {
                    value = measures[i].getValues();
                    if (value.length !== labels[1]) {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_WRONG_VALUES_COUNT_IN_AA2', measures[i]
                            .getId(), labels[1]));
                    }

                    for (j = 0; j < value.length; j++) {
                        if (value[j].length !== labels[0]) {
                            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_WRONG_VALUES_COUNT_IN_AA2',
                                measures[i].getId(), labels[0]));
                        }
                    }
                }
            }

        };

        MeasureValuesGroup.prototype.hasFakeData = function() {
            var measures = this.getMeasureValues();
            for (var i = 0; i < measures.length; i++) {
                if (measures[i].fake()) {
                    return true;
                }
            }

            return false;
        };

        return MeasureValuesGroup;
    });
define('sap/viz/framework/chartmodel/info/Handler',['sap/viz/framework/common/util/ObjectUtils', 'sap/viz/framework/common/util/TypeUtils'],
    function Setup(ObjectUtils, TypeUtils) {
        var ANALYSISAXIS = "analysisAxis";
        var MEASUREVALUESGROUP = "measureValuesGroup";
        var handler = {};
        var _handlers = {};
        /*
   {
   'analysisAxis': [{
   'index': 1,
   'data': [{
   'name': 'Product',
   'values': ['Car', 'Truck', 'Motorcycle', 'Bicycle']
   }]
   }, {
   'index' : 2,
   'data': [{
   'name': 'Country',
   'values': ['China', 'USA']
   }, {
   'name': 'Year',
   'values': ['2001', '2001']
   }]
   }],
   'measureValuesGroup': [{
   'index': 1,
   'data': [{
   'name': 'Profit',
   'values': [[25, 136, 23, 116], [58, 128, 43, 73]]
   }, {
   'name': 'Revenue',
   'values': [[50, 236, 43, 126], [158, 228, 143, 183]]
   }]
   }]};
   * */

        function findInJson(jsondata, targetname) {
            var anax = jsondata[ANALYSISAXIS].concat(jsondata[MEASUREVALUESGROUP]);
            var ret = [];
            anax.forEach(function(ana, idx) {
                var anad = ana.data;
                anad.forEach(function(d, didx) {
                    if (d.name === targetname) {
                        ret.push(d);
                    }
                }, this);
            }, this);
            return ret;
        }
        var valueinfo = {
            'type': 'valueinfo',
            /**
     *This function is only used by ZEN-waterfall chart which does not meet other regular charts' valueinfo
      requirements. More details about this, please ask Fei Christy.
     * example: 
          var ds = new CrosstableDataset();
          ds.data({
            'analysisAxis' : [ {
              'index' : 1,
              'data' : [ {
                'type' : 'Dimension',
                'name' : 'Country',
                'values' : [ 'C1', 'C2', 'C1-C2 total', 'C3', 'Total' ]
              } ]
            }, {
              'index' : 2,
              'data' : [ {
                'type' : 'Dimension',
                'name' : 'Region',
                'values' : [ 'Asia', 'Europe' ]
              } ]
            } ],
            'measureValuesGroup' : [ {
              'index' : 1,
              'data' : [ {
                'type' : 'Measure',
                'name' : 'Profit',
                'values' : [ [ 10, 10, 20, -40, -20], [ 22, -20, 2, 50, 52] ]
              } ]
            } ]
          });
          ds.info({
              'type' : 'valueinfo',
              'value' : [undefined,undefined,{'isTotal' : true}, undefined, {'isTotal' : true}] 
            });
     * result:
          the value of 'ds._crosstableDataset._dataSet.measureValuesGroup[0].data[0].infos' is: 
          [[{'valueinfo': undefined}, {'valueinfo': undefined}, {'valueinfo': {'isTotal' : true}},
           {'valueinfo': undefined}, {'valueinfo': {'isTotal' : true}}
            ],[
            {'valueinfo': undefined}, {'valueinfo': undefined}, {'valueinfo': {'isTotal' : true}},
             {'valueinfo': undefined}, {'valueinfo': {'isTotal' : true}}
            ]
          ]
     */
            'process': function(value, jsondata) {
                var i, iLen, j, jLen, k, kLen, m, mLen;
                var iterate, mgValue, mg, dValues, measureGroups = jsondata[MEASUREVALUESGROUP];
                for (i = 0, iLen = value.length; i < iLen; i++) {
                    iterate = value[i];
                    if (iterate !== undefined) {
                        for (j = 0, jLen = measureGroups.length; j < jLen; j++) {
                            mg = measureGroups[j];
                            mgValue = mg.data;
                            for (k = 0, kLen = mgValue.length; k < kLen; k++) {
                                dValues = mgValue[k];
                                if (!dValues.infos) {
                                    dValues.infos = [];
                                }
                                for (m = 0, mLen = dValues.values.length; m < mLen; m++) {
                                    if (!dValues.infos[m]) {
                                        dValues.infos[m] = [];
                                    }
                                    if (!dValues.infos[m][i]) {
                                        dValues.infos[m][i] = {};
                                    }
                                    dValues.infos[m][i][valueinfo.type] = iterate;
                                }
                            }
                        }
                    }
                }
                //      var iterate, dname, finds, d, dvalue;
                //      var i, iLen, j, jLen, k, kLen, m, mLen;
                //      for(i = 0, iLen = value.length; i < iLen; i++) {
                //        iterate = value[i];
                //        dname = iterate.name;
                //        finds = findInJson(jsondata, dname);
                //        for(j = 0, jLen = finds.length; j < jLen; j++){
                //          d = finds[j];
                //          if (iterate.value) {
                //            if (!d.infos) {
                //              d.infos = [];
                //            }
                //            for(k = 0, kLen = d.values.length; k < kLen; k++){
                //              d.infos[k] = [];
                //              dvalue = d.values[k];
                //              for(m = 0, mLen = dvalue.length; m < mLen; m++){
                //                if(d.infos[k][m] === undefined){
                //                  d.infos[k][m] = {};
                //                }
                //                d.infos[k][m][valueinfo.type] = iterate.value[k][m];
                //              }
                //            }
                //          }
                //        }
                //      }
            },
            'merge': function(jsondata) {

            },

            'remove': function(jsondata) {
                measureInfoRemove(valueinfo.type, jsondata);
            }
        };

        /**
         * [26-Feb-2013 Nick]
         * Default selection is bind with data model, it has the similar mechanism as custom label has.
         */

        var defaultSelection = {
            'type': 'defaultSelection',
            'process': function(info, data) {
                var iterate;
                var aa1, aa2, len;
                var hasAA2 = (data[ANALYSISAXIS] && data[ANALYSISAXIS][1]) ? true : false;
                var aa1Length = data[ANALYSISAXIS] ? data[ANALYSISAXIS][0].data[0].values.length : data[
                        MEASUREVALUESGROUP][0].data[0].values[0].length,
                    aa2Length = hasAA2 ? data[ANALYSISAXIS][1].data[0].values.length : 1;
                var i, m, n;
                var defaultSelectionInfo, temp;

                for (i = 0, len = info.length; i < len; i++) {
                    aa1 = new Array(aa1Length);
                    aa2 = new Array(aa2Length);
                    defaultSelectionInfo = [];
                    iterate = info[i];
                    AAContextConstructor(data, iterate, aa1, aa2);
                    // if analysis axis 2 does not exit, we think it is selected by default.
                    if (!hasAA2) {
                        aa2[0] = true;
                    }
                    // Construct a two-dimensional array, which is aa2.length * aa1.length. Each member is a object
                    // like:
                    //    'defaultSelection' : {
                    //        isSelected : false,
                    //        index : i
                    //      }
                    // According to aa1 and aa2 arrays, the 'isSelected' of corresponding object is changed from
                    // false to true.
                    for (m = 0; m < aa2.length; m++) {
                        temp = [];
                        for (n = 0; n < aa1.length; n++) {
                            var ctxObj = {
                                'defaultSelection': {
                                    isSelected: false,
                                    index: i
                                }
                            };
                            if (aa2[m] && aa1[n]) {
                                ctxObj.defaultSelection.isSelected = true;
                            }
                            temp.push(ctxObj);
                        }
                        defaultSelectionInfo.push(temp);
                    }
                    // Attach the default selection object to each data object.
                    MGContextConstructor(data, iterate, defaultSelectionInfo);
                }

            },

            'remove': function(jsondata) {
                measureInfoRemove(defaultSelection.type, jsondata);
            },
            'merge': function(jsondata) {}
        };

        function measureInfoRemove(infoName, jsondata) {
            var iterate, d, dvalue, value = jsondata[MEASUREVALUESGROUP];
            if (!value || !TypeUtils.isArray(value)) {
                return;
            }
            var i, iLen, j, jLen, k, kLen, m, mLen;
            var stillHasInfo = false;
            for (i = 0, iLen = value.length; i < iLen; i++) {
                iterate = value[i].data;
                for (j = 0, jLen = iterate.length; j < jLen; j++) {
                    d = iterate[j];
                    if (d.infos) {
                        stillHasInfo = false;
                        for (k = 0, kLen = d.infos.length; k < kLen; k++) {
                            dvalue = d.infos[k];
                            for (m = 0, mLen = dvalue.length; m < mLen; m++) {
                                if (dvalue[m]) {
                                    delete dvalue[m][infoName];
                                    if (TypeUtils.isEmptyObject(dvalue[m])) {
                                        dvalue[m] = undefined;
                                    } else {
                                        stillHasInfo = true;
                                    }
                                }
                            }
                        }
                    }
                    if (!stillHasInfo) {
                        delete d.infos;
                    }
                }
            }
        }

        /**
         * [26-Feb-2013 Nick]
         * This function is to process which elements are selected in analysis axises 1 and 2.
         * aa1 is the array that records which elements are selected in analysis axis 1.
         * aa2 is the array that records which elements are selected in analysis axis 2.
         */
        function AAContextConstructor(jsondata, target, aa1, aa2) {
            var analysisAxis = jsondata[ANALYSISAXIS];
            if (!analysisAxis) {
                for (var index = 0; index < aa1.length; index++) {
                    aa1[index] = true;
                }
                return;
            }
            analysisAxis.forEach(function(ana, idx) {
                var anad = ana.data;

                anad.forEach(function(d, didx) {
                    var value = target[d.name];
                    for (var i = 0; i < d.values.length; i++) {
                        var isMatch = (value === '*' || (value !== null && d.values[i] === value));
                        if (isMatch) {
                            if (didx === 0) {
                                if (ana.index === 1) {
                                    aa1[i] = true;
                                } else {
                                    aa2[i] = true;
                                }
                            } else {
                                if (ana.index === 1) {
                                    if (aa1[i] !== true) {
                                        aa1[i] = undefined;
                                    }
                                } else {
                                    if (aa2[i] !== true) {
                                        aa2[i] = undefined;
                                    }
                                }
                            }
                        } else {
                            if (ana.index === 1) {
                                aa1[i] = undefined;
                            } else {
                                aa2[i] = undefined;
                            }
                        }
                    }
                }, this);
            }, this);
        }

        /**
         * [26-Feb-2013 Nick]
         * This function is to process which elements are selected in measures.
         */
        function MGContextConstructor(jsondata, target, defaultSelectionInfo) {
            var measureGroup = jsondata[MEASUREVALUESGROUP];
            var unSelectionInfo = [],
                temp, m, n;
            for (m = 0; m < defaultSelectionInfo.length; m++) {
                temp = [];
                for (n = 0; n < defaultSelectionInfo[m].length; n++) {
                    var ctxObj = {
                        'defaultSelection': {
                            isSelected: false
                        }
                    };
                    temp.push(ctxObj);
                }
                unSelectionInfo.push(temp);
            }
            measureGroup.forEach(function(ana, idx) {
                var anad = ana.data;
                var i, j, selectedTarget;
                anad.forEach(function(d, didx) {
                    if (d.name === target['Measure']) {
                        selectedTarget = defaultSelectionInfo;
                    } else {
                        selectedTarget = unSelectionInfo;
                    }
                    if (!d.infos) {
                        d.infos = selectedTarget;
                    } else {
                        for (i = 0; i < selectedTarget.length; i++) {
                            var aa1 = selectedTarget[i];
                            var daa1 = d.infos[i];
                            for (j = 0; j < aa1.length; j++) {
                                var alreadySelected = daa1[j]['defaultSelection'].isSelected;
                                if (!alreadySelected) {
                                    daa1[j]['defaultSelection'] = aa1[j]['defaultSelection'];
                                }
                            }
                        }
                    }
                }, this);
            }, this);
        }

        var customlabel = {
            'type': 'customlabel',
            /*'value': [{
     'name': 'Country', //dimension name
     'mapping': {'CHN', {'type': 'url', 'val': 'http://xxxx/xxxx.png'},
     'GER', {'type': 'string', 'val': 'Germany'},
     'FRA', {'type': 'string', 'val': 'France'}} //support both string and url
     }] //you can have several mappings, it will be merged inside crosstable dataset. no info will be created
     // (existed will be deleted) if the mapping value is same as the original value.*/
            'process': function(value, jsondata) {
                var iterate, dname, finds, mapping, m, dvalues, mappingfound, removeinfo;
                for (var i = 0, len = value.length; i < len; i++) {
                    iterate = value[i];
                    dname = iterate.name;
                    finds = findInJson(jsondata, dname);
                    finds.forEach(function(d, tdidx) {
                        //if no infos exist, create one, delete it if no info found
                        mappingfound = false;
                        if (!d.infos) {
                            removeinfo = true;
                            d.infos = [];
                        }

                        dvalues = d.values;
                        mapping = iterate.mapping;
                        dvalues.forEach(function(v, idx) {
                            if (mapping[v]) {
                                if (mapping[v].type === 'string' && mapping[v].val === v) {
                                    //we won't create mapping for it. existing mapping should be deleted
                                    if (d.infos[idx]) {
                                        delete d.infos[idx][customlabel.type];
                                        //if it becomes empty, set it to undefined
                                        if (TypeUtils.isEmptyObject(d.infos[idx])) {
                                            d.infos[idx] = undefined;
                                        }
                                    } else {
                                        //tipjira: BITVIZA-1181
                                        //if current value happens to be the last value, we won't create anything for it
                                        //then d.infos will be shorter than d.values which is not allowed
                                        //so here we should create something for it.
                                        d.infos[idx] = undefined;
                                    }
                                } else {
                                    mappingfound = true;
                                    d.infos[idx] = d.infos[idx] ? d.infos[idx] : {};
                                    d.infos[idx][customlabel.type] = mapping[v];
                                }
                            } else {
                                if (!d.infos[idx]) {
                                    d.infos[idx] = undefined;
                                }
                            }
                        }, this);

                        if (removeinfo && !mappingfound) {
                            delete d.infos;
                        }
                    }, this);
                }
            },

            'merge': function(jsondata) {
                var ret = {};
                ret.type = customlabel.type;
                ret.value = [];
                var anax = jsondata[ANALYSISAXIS];
                if (!anax || !TypeUtils.isArray(anax)) {
                    return;
                }
                var found;
                anax.forEach(function(ana, idx) {
                    var anad = ana.data;
                    anad.forEach(function(d, didx) {
                        if (d.infos) {
                            var dmapping = {};
                            dmapping.name = d.name;
                            dmapping.mapping = {};
                            found = false;
                            d.infos.forEach(function(dinfo, dinfoidx) {
                                if (dinfo && dinfo[customlabel.type]) {
                                    found = true;
                                    dmapping.mapping[d.values[dinfoidx]] = dinfo[customlabel.type];
                                }
                            }, this);
                            if (found) {
                                ret.value.push(dmapping);
                            }
                        }
                    }, this);
                }, this);
                if (ret.value.length > 0) {
                    return ret;
                }
            },

            'remove': function(jsondata) {
                var anax = jsondata[ANALYSISAXIS];
                var stillHasInfo = false;
                anax.forEach(function(ana, idx) {
                    var anad = ana.data;
                    anad.forEach(function(d, didx) {
                        if (d.infos) {
                            stillHasInfo = false;
                            d.infos.forEach(function(dinfo, dinfoidx) {
                                if (dinfo) {
                                    delete dinfo[customlabel.type];
                                    if (TypeUtils.isEmptyObject(dinfo)) {
                                        d.infos[dinfoidx] = undefined;
                                    } else {
                                        stillHasInfo = true;
                                    }
                                }
                            }, this);
                            if (!stillHasInfo) {
                                delete d.infos;
                            }
                        }
                    }, this);
                }, this);
            }
        };

        handler.register = function(hndl) {
            _handlers[hndl.type] = hndl;
        };

        handler.get = function(type) {
            return _handlers[type];
        };

        /*
         * call each handler to extract corresponding info to an object and return
         */
        handler.mergeInfo = function(jsondata) {
            var iter, ret = [],
                mr;
            for (var type in _handlers) {
                if (_handlers.hasOwnProperty(type)) {
                    iter = _handlers[type];
                    mr = iter.merge(jsondata);
                    if (mr) {
                        //return a copy, intend to use ObjectUtils as we want to deep copy the array
                        ret.push(ObjectUtils.extend(true, {}, mr));
                    }
                }
            }
            return ret;
        };

        handler.register(customlabel);
        handler.register(defaultSelection);
        handler.register(valueinfo);

        return handler;

    });
define('sap/viz/framework/chartmodel/info/CrosstableHandler',['sap/viz/framework/common/util/TypeUtils', 'sap/viz/framework/common/util/ObjectUtils'], function Setup(
    TypeUtils, ObjectUtils) {
    var ANALYSISAXIS = "analysisAxis";
    var MEASUREVALUESGROUP = "measureValuesGroup";
    var handler = {};
    var internalHandlers = {};
    // for internal use and don't support info.get function
    var externalHandlers = {};
    // for external use and support info.get function

    handler.register = function(hndl, isExternal) {
        if (isExternal) {
            externalHandlers[hndl.type] = hndl;
        } else {
            internalHandlers[hndl.type] = hndl;
        }
    };

    handler.get = function(type) {
        if (externalHandlers[type]) {
            return externalHandlers[type];
        } else {
            return internalHandlers[type];
        }
    };

    handler.getExternal = function(type) {
        if (externalHandlers[type]) {
            return externalHandlers[type];
        }
    };
    handler.storeInfo = function(allInfos, info) {
        if (externalHandlers[info.type] && info.hasOwnProperty('info')) {
            allInfos[info.type] = {
                'type': info.type,
                'info': info.info
            };
        }
    };
    handler.mergeInfo = function(allInfos) {
        var ret = [];
        for (var type in externalHandlers) {
            if (allInfos.hasOwnProperty(type)) {
                var hndl = allInfos[type];
                var mr = {};
                mr.type = hndl.type;
                mr.info = hndl.info;
                if (mr.info !== "undefined") {
                    // return a copy, intend to use ObjectUtils as we want to deep copy the array
                    ret.push(ObjectUtils.clone(mr));
                }
            }
        }
        return ret;
    };

    var additionalData = {
        'type': "additionalData",
        /*
         info : [{
             name : "<dimension_name>",
             // Match dimension member's 1D Array structure
             infoValues : [{
             featureId : "<featureId1>",
             isTotal : true
            }, {
             featureId : "<featureId2>",
             isTotal : false
            }]
         }, {
         name : "<rangeure_name>",
         // Match rangeure value's 2D Array structure
         infoValues : [[{
             adata1 : "<adata1>",
             adata2 : true
         }, {
             adata1 : "<adata2>",
             adata2 : false
         }], [{
             adata1 : "<adata3>",
             adata2 : true
         }, {
             adata1 : "<adata4>",
             adata2 : false
         }]]
         }]
         */
        'process': function(info, jsondata, dimensions, measures) {
            if (!info.hasOwnProperty('info')) {
                return;
            }
            var _info = ObjectUtils.clone(info.info);
            if (_info === undefined || (TypeUtils.isArray(_info) && _info.length === 0)) {
                removeInfo(additionalData.type, jsondata, dimensions, measures);
                return;
            } else if (!TypeUtils.isArray(_info)) {
                return;
            }
            removeInfo(additionalData.type, jsondata, dimensions, measures);
            var found = false,
                i, j, index, loc;
            for (i = 0; i < _info.length; i++) {
                found = false;
                for (j = 0; j < dimensions.length; j++) {
                    if (dimensions[j].name === _info[i].name) {
                        index = dimensions[j].index;
                        loc = dimensions[j].location;
                        if (!_info[i].hasOwnProperty('infoValues')) {
                            break;
                        } else if (_info[i].infoValues === undefined) {
                            _info[i].infoValues = [];
                        } else if (!TypeUtils.isArray(_info[i].infoValues)) {
                            break;
                        }
                        setDimensionInfoValues(jsondata[ANALYSISAXIS][index].data[loc], _info[i].infoValues,
                            additionalData.type);
                        found = true;
                        break;
                    }
                }
                if (found) {
                    continue;
                }
                for (j = 0; j < measures.length; j++) {
                    if (measures[j].name === _info[i].name) {
                        index = measures[j].index;
                        loc = measures[j].location;
                        if (!_info[i].hasOwnProperty('infoValues')) {
                            break;
                        } else if (_info[i].infoValues === undefined) {
                            _info[i].infoValues = [];
                        } else if (!TypeUtils.isArray(_info[i].infoValues)) {
                            break;
                        }
                        setMeasureInfoValues(jsondata[MEASUREVALUESGROUP][index].data[loc], _info[i].infoValues,
                            additionalData.type);
                        break;
                    }
                }
            }
        }
    };

    var customlabel = {
        'type': "customlabel",
        /*
         info : [{
             name : "<dimension_name>",
             // INTERNAL usage for customlabel only
             infoMappings : {
                 "CHN" : {
                     type : "String",
                     val : "China"
                 },
                 "US" : {
                     type : "url",
                     val : "http://aa.bb.cc"
                 }
             }
         }]
         */
        'process': function(info, jsondata) {
            var _info = info.info;
            if (_info === undefined || !TypeUtils.isArray(_info)) {
                return;
            }
            if (jsondata[ANALYSISAXIS] === undefined) {
                return;
            }
            var iterate, dname, finds, mapping, m, dvalues, mappingfound, removeinfo;
            for (var i = 0, len = _info.length; i < len; i++) {
                iterate = _info[i];
                dname = iterate.name;
                finds = findInJson(jsondata, dname);
                finds.forEach(function(d, tdidx) {
                    //if no infos exist, create one, delete it if no info found
                    mappingfound = false;
                    if (!d.infos) {
                        removeinfo = true;
                        d.infos = [];
                    }

                    dvalues = d.values;
                    mapping = iterate.infoMappings;
                    dvalues.forEach(function(v, idx) {
                        if (mapping[v]) {
                            if (mapping[v].type === 'string' && mapping[v].val === v) {
                                //we won't create mapping for it. existing mapping should be deleted
                                if (d.infos[idx]) {
                                    delete d.infos[idx][customlabel.type];
                                    //if it becomes empty, set it to undefined
                                    if (TypeUtils.isEmptyObject(d.infos[idx])) {
                                        d.infos[idx] = undefined;
                                    }
                                } else {
                                    //tipjira: BITVIZA-1181
                                    //if current value happens to be the last value, we won't create anything for it
                                    //then d.infos will be shorter than d.values which is not allowed
                                    //so here we should create something for it.
                                    d.infos[idx] = undefined;
                                }
                            } else {
                                mappingfound = true;
                                d.infos[idx] = d.infos[idx] ? d.infos[idx] : {};
                                d.infos[idx][customlabel.type] = mapping[v];
                            }
                        } else {
                            if (!d.infos[idx]) {
                                d.infos[idx] = undefined;
                            }
                        }
                    }, this);

                    if (removeinfo && !mappingfound) {
                        delete d.infos;
                    }
                }, this);
            }
        }
    };

    function findInJson(jsondata, targetname) {
        var anax = jsondata[ANALYSISAXIS];
        if (jsondata[MEASUREVALUESGROUP] !== undefined) {
            anax = jsondata[ANALYSISAXIS].concat(jsondata[MEASUREVALUESGROUP]);
        }
        var ret = [];
        anax.forEach(function(ana, idx) {
            var anad = ana.data;
            anad.forEach(function(d, didx) {
                if (d.name === targetname) {
                    ret.push(d);
                }
            }, this);
        }, this);
        return ret;
    }

    function setDimensionInfoValues(destination, infoValues, infoType) {
        // no need to new a infos for empty info values
        if (destination['infos'] === undefined && (TypeUtils.isArray(infoValues) && infoValues.length === 0)) {
            return;
        }
        if (destination['infos'] === undefined) {
            destination.infos = [];
        }
        var infos = destination.infos;
        var dataLength = destination.values.length;
        for (var i = 0; i < dataLength; i++) {
            if (infos[i] === undefined && infoValues[i] !== undefined) {
                infos[i] = {};
            }
            if ((infos[i] === undefined || infos[i] === null) && infoValues[i] === undefined) {
                infos[i] = undefined;
                continue;
            }
            if (infos[i] !== undefined) {
                infos[i][infoType] = infoValues[i];
                if (infos[i][infoType] === undefined) {
                    delete(infos[i][infoType]);
                }
            }
            if (TypeUtils.isEmptyObject(infos[i])) {
                infos[i] = undefined;
            }
        }
    }

    function setMeasureInfoValues(destination, infoValues, infoType) {
        // no need to new a infos for empty info values
        if (destination['infos'] === undefined && (TypeUtils.isArray(infoValues) && infoValues.length === 0)) {
            return;
        }
        if (destination['infos'] === undefined) {
            destination.infos = [];
        }
        var infos = destination.infos;
        var dataLength = destination.values.length;
        var dataWidth = destination.values[0].length;
        for (var i = 0; i < dataLength; i++) {
            var j;
            if (infos[i] === undefined && infoValues[i] !== undefined) {
                infos[i] = [];
            }
            if (infos[i] === undefined && (infoValues[i] === undefined || infoValues[i] === null)) {
                infos[i] = infoValues[i];
                continue;
            }
            if (infos[i] !== undefined && (infoValues[i] === undefined || infoValues[i] === null)) {
                for (j = 0; j < dataWidth; j++) {
                    if (infos[i][j] !== undefined && infos[i][j] !== null && infos[i][j][infoType] !== undefined) {
                        infos[i][j][infoType] = infoValues[i];
                        if (infoValues[i] === undefined) {
                            delete(infos[i][j][infoType]);
                        }
                    }
                    if (TypeUtils.isEmptyObject(infos[i][j])) {
                        infos[i][j] = undefined;
                    }
                }
                continue;
            }
            for (j = 0; j < dataWidth; j++) {
                if (infos[i][j] === undefined && infoValues[i][j] !== undefined) {
                    infos[i][j] = {};
                }
                if (infos[i][j] === undefined && infoValues[i][j] === undefined) {
                    infos[i][j] = undefined;
                }
                if (infos[i][j] !== undefined && infos[i][j] !== null) {
                    infos[i][j][infoType] = infoValues[i][j];
                }
                if (infos[i][j] !== undefined && infos[i][j] !== null && infos[i][j][infoType] === undefined) {
                    delete(infos[i][j][infoType]);
                }
                if (TypeUtils.isEmptyObject(infos[i][j])) {
                    infos[i][j] = undefined;
                }
            }
        }
    }

    function removeInfo(infoType, jsondata, dimensions, measures) {
        var i, index, loc;
        for (i = 0; i < dimensions.length; i++) {
            index = dimensions[i].index;
            loc = dimensions[i].location;
            setDimensionInfoValues(jsondata[ANALYSISAXIS][index].data[loc], [], additionalData.type);
        }
        for (i = 0; i < measures.length; i++) {
            index = measures[i].index;
            loc = measures[i].location;
            setMeasureInfoValues(jsondata[MEASUREVALUESGROUP][index].data[loc], [], additionalData.type);
        }
    }

    handler.register(additionalData, true);
    handler.register(customlabel);

    return handler;
});
define('sap/viz/framework/chartmodel/CrosstableDataset',['sap/viz/framework/chartmodel/feed/feeder', 'sap/viz/framework/common/util/TypeUtils',
        'sap/viz/framework/common/util/FunctionUtils', 'sap/viz/framework/common/util/ObjectUtils',
        'sap/viz/framework/chartmodel/description/AnalysisAxis',
        'sap/viz/framework/chartmodel/description/MeasureValuesGroup',
        'sap/viz/framework/chartmodel/info/Handler', 'sap/viz/framework/chartmodel/info/CrosstableHandler',
        'sap/viz/framework/common/lang/LangManager'
    ],
    function Setup(Feeder, TypeUtils, FunctionUtils, ObjectUtils, AnalysisAxis, MeasureValuesGroup, Handler,
        CrosstableHandler, langManager) {

        var TYPE = 'type';
        var NAME = 'name';
        var VALUES = 'values';

        var FEEDID = 'feedId';
        var MND = 'MeasureNamesDimension';

        var ANALYSISAXIS = "analysisAxis";
        var MEASUREVALUESGROUP = "measureValuesGroup";

        function getMeasureValueDataPointCount(measureValue) {
            var values = measureValue.getValues();

            return values.length > 0 ? values.length * values[0].length : 0;
        }

        /**
         * @name sap.viz.data.CrosstableDataset
         * @constructor
         */
        function crossTableDataSet() {
            this._analysisAxis = [];
            this._measureValuesGroup = [];
            this._dataSet = {};
            this._measures = [];
            this._dimensions = [];
            this._emptyDataset = false;
            this._infos = {};
        }

        crossTableDataSet.prototype.destroy = function() {
            this._analysisAxis = null;
            this._measureValuesGroup = null;
            this._dataSet = null;
            this._measures = null;
            this._dimensions = null;
            this._emptyDataset = null;
            this._infos = null;
        };
        
        /**
         * Get/set data
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
         * please consider to use new version of this API instead. You can use sap.viz.api.data.CrosstableDataset.data
         * instead.
         * @name sap.viz.data.CrosstableDataset#data
         * @param data
         *        data with metaData and rawData
         * @returns {Object} {@link sap.viz.data.CrosstableDataset}
        */
        crossTableDataSet.prototype.data = function(data) {
            if (!arguments.length) {
                return ObjectUtils.clone(this._dataSet);
            }
            this._analysisAxis = [];
            this._measureValuesGroup = [];
            this._measures = [];
            this._dimensions = [];
            this._dataSet = ObjectUtils.clone(data);
            this.init(this._dataSet);
            this._measures = this.getMetaNames(data, MEASUREVALUESGROUP);
            this._dimensions = this.getMetaNames(data, ANALYSISAXIS);
            this._infos = {};
            return this;
        };

        //@deprecated
        crossTableDataSet.prototype.setData = function(in_data) {
            this.data(in_data);
        };
        /**
         * Get all dimension/ measure names from data
         * @ignore
         * @param data : data with metaData and rawData
         * @param range : ANALYSISAXIS/ MEASUREVALUESGROUP
         * @returns {[Object]}: array of names of all dimesions/ measures
         *            Object : {name:  "<dimension_name>"/  "<measure_name>", index: <number>, location: <number>}
         */
        crossTableDataSet.prototype.getMetaNames = function(data, range) {
            if (data === undefined || data === null) {
                return;
            }
            var ret = [];
            var ranges = data[range];
            if (ranges === undefined || !TypeUtils.isArray(ranges)) {
                return ret;
            }
            for (var i = 0; i < ranges.length; i++) {
                var rangeData = ranges[i].data;
                if (rangeData === undefined || !TypeUtils.isArray(rangeData)) {
                    continue;
                }
                for (var j = 0; j < rangeData.length; j++) {
                    if (rangeData[j].name !== undefined) {
                        var obj = {
                            'name': rangeData[j].name,
                            'index': i,
                            'location': j
                        };
                        ret.push(obj);
                    }
                }
            }
            return ret;
        };

        /**
         * Get/Set additional info for the crosstable dataset
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
         * please consider to use new version of this API instead.  You can use sap.viz.api.data.CrosstableDataset.
         * info instead.
         * @name sap.viz.data.CrosstableDataset#info
         * @returns {Object} return a copy of current additional info if no param provided
         */
        crossTableDataSet.prototype.info = function(info) {
            // only call get function for new handler
            if (!arguments.length) {
                return CrosstableHandler.mergeInfo(this._infos);
            }

            if (info !== undefined) {
                if (info.type && info.value) { // call old info handler
                    var handler = Handler.get(info.type);
                    if (handler) {
                        handler.process(info.value, this._dataSet);
                    }
                } else if (TypeUtils.isArray(info)) { // call new info handler
                    var crosstableHandler;
                    for (var i = 0; i < info.length; i++) {
                        crosstableHandler = CrosstableHandler.get(info[i].type);
                        if (crosstableHandler) {
                            CrosstableHandler.storeInfo(this._infos, info[i]);
                            crosstableHandler.process(info[i], this._dataSet, this._dimensions, this._measures);
                        }
                    }
                } else if (TypeUtils.isString(info)) { // call new info handler get function with infotype
                    var ret = [];
                    if (this._infos[info]) {
                        ret.push(ObjectUtils.clone(this._infos[info]));
                    }
                    return ret;
                }
                //Jimmy, 12/28/2012, AnalysisAxis reads info reference from this._dataset.
                //here the reference may be deleted (in clearInfo) and recreated(here), to make sure AnalysisAxis
                //still can get the right infos, we recreate them.
                //or we can optimize it to save infos in analysisAxis and merge them when we get data and info?
                this._analysisAxis = [];
                this._measureValuesGroup = [];
                this.init(this._dataSet);
            }
            return this;
        };

        /**
      clear specific additional info for the crosstable dataset
      @param {String}type "customlabel"||"geo" 
    */
        crossTableDataSet.prototype.clearInfo = function(type) {
            if (type) {
                var handler = Handler.get(type);
                if (handler) {
                    handler.remove(this._dataSet);
                }
            }
            return this;
        };

        crossTableDataSet.prototype.init = function(data) {
            // removed check for measureValuesGroup for tree map doesn't have it
            if (!data || (!data[ANALYSISAXIS] && !data[MEASUREVALUESGROUP])) {
                //FIX ME Remove when multihandler is available
                return; // FunctionUtils.error("dataset is empty or invalid");
            }
            var aaLabels = [1, 1];


            var axes = data[ANALYSISAXIS];
            var i = 0;
            var mvgs, mvg, mv;
            if (axes) {
                if (axes.length > 2) {
                    FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_ACCEPT_2_OR_MORE_AXES'));
                }

                for (; i < axes.length; i++) {
                    var axis = axes[i];
                    var axisIndex = axis["index"];
                    if (axisIndex !== 1 && axisIndex !== 2) {
                        FunctionUtils.error(langManager.get('IDS_ERROR_AXIS_INDEX_SHOULD_BE_1_OR_2'));
                    }

                    if (this._analysisAxis[axisIndex - 1]) {
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_AXIS_ALREADY_EXIST', axisIndex));
                    }

                    var aa = new AnalysisAxis(axis["data"]);
                    aaLabels[axisIndex - 1] = aa.validate();
                    this._analysisAxis[axisIndex - 1] = aa;

                }

                //TODO handle if only meta data exist in data set when layout
                if (aaLabels[0] === 0) {
                    aaLabels[1] = 0;
                    this._emptyDataset = true;
                }

                mvgs = data[MEASUREVALUESGROUP];
                // to handle tree chart without measurevaluegroup, but not know what chart is going to be filled,
                // should we give a warning for the empty measurevaluegroup?
                if (!mvgs) {
                    return;
                }
                for (i = 0; i < mvgs.length; i++) {
                    mvg = mvgs[i];
                    var mvgIndex = mvg["index"];
                    if (this._measureValuesGroup[mvgIndex - 1]) {
                        FunctionUtils.error("MeausreValuesGroup " + mvgIndex + " " + langManager.get(
                            'IDS_ALREADY_EXISTS'));
                    }

                    mv = new MeasureValuesGroup(mvg["data"]);
                    mv.validate(aaLabels);
                    this._measureValuesGroup[mvgIndex - 1] = mv;
                }
            } else { // no axes case

                mvgs = data[MEASUREVALUESGROUP];
                for (i = 0; i < mvgs.length; i++) {
                    mvg = mvgs[i];
                    mv = new MeasureValuesGroup(mvg["data"]);
                    if (i === 0) {
                        aaLabels = mv.validate();
                    } else {
                        mv.validate(aaLabels);
                    }

                    this._measureValuesGroup[mvg["index"] - 1] = mv;
                }
            }


        };

        /**
         * @name sap.viz.data.CrosstableDataset#getAnalysisAxisCount
         * @ignore
         */
        crossTableDataSet.prototype.getAnalysisAxisCount = function() {
            return this._analysisAxis.length;
        };

        /**
         * @name sap.viz.data.CrosstableDataset#getAnalysisAxisByIdx
         * @ignore
         * @param index
         */
        crossTableDataSet.prototype.getAnalysisAxisByIdx = function(index) {
            return this._analysisAxis[index];
        };

        /**
         * @name sap.viz.data.CrosstableDataset#getMeasureValuesGroupCount
         * @ignore
         */
        crossTableDataSet.prototype.getMeasureValuesGroupCount = function() {
            return this._measureValuesGroup.length;
        };

        /**
         * @name sap.viz.data.CrosstableDataset#getMeasureValuesGroupByIdx
         * @ignore
         * @param index
         */
        crossTableDataSet.prototype.getMeasureValuesGroupByIdx = function(index) {
            return this._measureValuesGroup[index];
        };

        /**
         * @name sap.viz.data.CrosstableDataset#hasFakeData
         * @ignore
         */
        crossTableDataSet.prototype.hasFakeData = function() {
            for (var i = 0; i < this._measureValuesGroup.length; i++) {
                if (this._measureValuesGroup[i] && this._measureValuesGroup[i].hasFakeData()) {
                    return true;
                }
            }

            for (i = 0; i < this._analysisAxis.length; i++) {
                if (this._analysisAxis[i].hasFakeData()) {
                    return true;
                }
            }

            return false;
        };

        /**
         * @name sap.viz.data.CrosstableDataset#getDataPointCount
         * @ignore
         */
        crossTableDataSet.prototype.getDataPointCount = function() {

            var dpCount = 0;
            // to handle tree chart to accept dataset without measureValuesGroup
            var mvDpCount = 0;
            if (this._measureValuesGroup.length) {
                mvDpCount = getMeasureValueDataPointCount(this._measureValuesGroup[0].getMeasureValues()[0]);
            }

            for (var i = 0; i < this._measureValuesGroup.length; i++) {
                if (this._measureValuesGroup[i]) {
                    dpCount += mvDpCount * this._measureValuesGroup[i].getMeasureValues().length;
                }
            }

            return dpCount;
        };

        /**
         * @name sap.viz.data.CrosstableDataset#isEmptyDataSet
         * @ignore
         */
        crossTableDataSet.prototype.isEmptyDataset = function() {
            return this._emptyDataset;
        };
        /**
         * @name sap.viz.data.CrosstableDataset#ctx2TableData
         * @ignore
         */
        crossTableDataSet.prototype.ctx2TableData = function(rawCtx) {
            var convertDims = function(ctx, crosstable) {
                var a1Index = ctx.path.dii_a1;
                var a2Index = ctx.path.dii_a2;

                var dims = {},
                    i, dim;
                if (!crosstable.getAnalysisAxisByIdx(0)) {
                    return null;
                }
                for (i = 0; i < crosstable.getAnalysisAxisByIdx(0).getDimensionLabels().length; i++) {
                    dim = crosstable.getAnalysisAxisByIdx(0).getDimensionLabels()[i];
                    dims[dim._uId] = dim._values[a1Index];
                }
                if (crosstable.getAnalysisAxisByIdx(1)) {
                    for (i = 0; i < crosstable.getAnalysisAxisByIdx(1).getDimensionLabels().length; i++) {
                        dim = crosstable.getAnalysisAxisByIdx(1).getDimensionLabels()[i];
                        dims[dim._uId] = dim._values[a2Index];
                    }
                }

                return dims;
            };
            var convertMeas = function(ctx, crosstable) {
                var a1Index = ctx.path.dii_a1;
                var a2Index = ctx.path.dii_a2;
                var mg = ctx.path.mg;
                var mi = ctx.path.mi;

                var obj = {};
                if (!crosstable.getMeasureValuesGroupByIdx(mg)) {
                    return null;
                }
                var mea = crosstable.getMeasureValuesGroupByIdx(mg).getMeasureValues()[mi];
                var meaId = mea._uId;
                obj[meaId] = mea._values[a2Index][a1Index];
                return obj;
            };
            var data = {};
            if (TypeUtils.isPlainObject(rawCtx)) {
                data.dimension = convertDims(rawCtx, this);
                data.measure = convertMeas(rawCtx, this);
            } else if (TypeUtils.isArray(rawCtx)) {
                data.dimension = convertDims(rawCtx[0], this);
                var measures = {};
                for (var i = 0; i < rawCtx.length; i++) {
                    if (!rawCtx[i]) {
                        continue;
                    }
                    var measure = convertMeas(rawCtx[i], this);
                    for (var attr in measure) {
                        if (measure.hasOwnProperty(attr)) {
                            measures[attr] = measure[attr];
                        }
                    }
                }
                data.measure = measures;
            } else {
                return;
            }
            return data;
        };

        /**
         * @name sap.viz.data.CrosstableDataset#ctx2ArrayData
         * @ignore
         */
        crossTableDataSet.prototype.ctx2ArrayData = function(rawCtx) {
            var convertDims = function(ctx, crosstable) {
                var a1Index = ctx.path.dii_a1;
                var a2Index = ctx.path.dii_a2;

                var dims = [],
                    dim, i;
                if (!crosstable.getAnalysisAxisByIdx(0)) {
                    return null;
                }
                for (i = 0; i < crosstable.getAnalysisAxisByIdx(0).getDimensionLabels().length; i++) {
                    dim = crosstable.getAnalysisAxisByIdx(0).getDimensionLabels()[i];
                    dims.push({
                        key: dim._uId,
                        value: dim._values[a1Index]
                    });
                }
                if (crosstable.getAnalysisAxisByIdx(1)) {
                    for (i = 0; i < crosstable.getAnalysisAxisByIdx(1).getDimensionLabels().length; i++) {
                        dim = crosstable.getAnalysisAxisByIdx(1).getDimensionLabels()[i];
                        dims.push({
                            key: dim._uId,
                            value: dim._values[a2Index]
                        });
                    }
                }

                return dims;
            };
            var convertMeas = function(ctx, crosstable) {
                var a1Index = ctx.path.dii_a1;
                var a2Index = ctx.path.dii_a2;
                var mg = ctx.path.mg;
                var mi = ctx.path.mi;

                var obj = [];
                if (!crosstable.getMeasureValuesGroupByIdx(mg)) {
                    return null;
                }
                var mea = crosstable.getMeasureValuesGroupByIdx(mg).getMeasureValues()[mi];
                var meaId = mea._uId;
                obj.push({
                    key: meaId,
                    value: mea._values[a2Index][a1Index]
                });
                return obj;
            };
            var data = {};
            if (TypeUtils.isPlainObject(rawCtx)) {
                data.dimension = convertDims(rawCtx, this);
                data.measure = convertMeas(rawCtx, this);
            } else if (TypeUtils.isArray(rawCtx)) {
                data.dimension = convertDims(rawCtx[0], this);
                var measures = [];
                for (var i = 0; i < rawCtx.length; i++) {
                    if (!rawCtx[i]) {
                        continue;
                    }
                    var measure = convertMeas(rawCtx[i], this);
                    for (var element in measure) {
                        if (measure.hasOwnProperty(element)) {
                            measures.push(measure[element]);
                        }
                    }
                }
                data.measure = measures;
            } else {
                return;
            }
            return data;
        };
        /**
         * @name sap.viz.data.CrosstableDataset#tableData2Ctx
         * @ignore
         */
        crossTableDataSet.prototype.tableData2Ctx = function(data) {
            var dims = data.dimension;
            var meas = data.measure;
            if (TypeUtils.isEmptyObject(dims) && TypeUtils.isEmptyObject(meas)) {
                return [];
            }
            var i;
            var getIndexs = function(array, keyValue) {
                var ret = [];
                for (i = 0; i < array.length; i++) {
                    if (array[i] === keyValue) {
                        ret[i] = i;
                    }
                }
                return ret;
            };
            var getOnlyIndexes = function(indexes, dimsCount) {
                var onlyIndexes = [],
                    i;
                // if no dimmension in data passed in, then we'll pick out all dimensions on the measures
                if (indexes.length === 0) {
                    for (i = 0; i < dimsCount; i++) {
                        onlyIndexes.push(i);
                    }
                } else {
                    for (i = 0; i < indexes[0].length; i++) {
                        var allHas = true;
                        for (var j = 0; j < indexes.length; j++) {
                            if (indexes[j][i] === undefined) {
                                allHas = false;
                                break;
                            }
                        }
                        if (allHas) {
                            onlyIndexes.push(i);
                        }
                    }
                }
                return onlyIndexes;
            };
            var getDimensionValues = function(dim, dimValue, analysisAxis) {
                var ret = [];
                for (var i = 0; i < analysisAxis.length; i++) {
                    var dimLabels = analysisAxis[i]._dimensionLabels;
                    for (var j = 0; j < dimLabels.length; j++) {
                        if (dim === dimLabels[j]._uId) {
                            ret[i] = getIndexs(dimLabels[j]._values, dimValue);
                            return ret;
                        }
                    }
                }
            };
            var aa1 = [];
            var aa2 = [];
            for (var key in dims) {
                if (dims.hasOwnProperty(key)) {
                    var indexes = getDimensionValues(key, dims[key], this._analysisAxis);
                    if (indexes[0]) {
                        aa1.push(indexes[0]);
                    } else if (indexes[1]) {
                        aa2.push(indexes[1]);
                    }
                }
            }
            var onlyAA1 = [];
            var onlyAA2 = [];
            if (this._analysisAxis[0] && TypeUtils.isArray(this._analysisAxis[0]._dimensionLabels)) {
                onlyAA1 = getOnlyIndexes(aa1, this._analysisAxis[0]._dimensionLabels[0]._values.length);
            } else {
                var length = this.getDataPointCount() / this.getMeasureValuesGroupCount();
                for (i = 0; i < length; i++) {
                    onlyAA1.push(i);
                }
            }
            if (this._analysisAxis[1] && TypeUtils.isArray(this._analysisAxis[1]._dimensionLabels)) {
                onlyAA2 = getOnlyIndexes(aa2, this._analysisAxis[1]._dimensionLabels[0]._values.length);
            } else {
                onlyAA2.push(0);
            }


            var mgCount = this._measureValuesGroup.length;
            var getMeasureValues = function(values, onlyAA1, onlyAA2, id, mg, mi) {
                var ret = [];
                for (i = 0; i < onlyAA2.length; i++) {
                    for (var j = 0; j < onlyAA1.length; j++) {
                        var obj = {};
                        obj[id] = values[onlyAA2[i]][onlyAA1[j]];
                        obj.mg = mg;
                        obj.mi = mi;
                        obj.dii_a1 = onlyAA1[j];
                        obj.dii_a2 = onlyAA2[i];
                        ret.push(obj);
                    }
                }
                return ret;
            };
            var allMeasureValues = [];
            for (i = 0; i < mgCount; i++) {
                var measureValues = this._measureValuesGroup[i]._measureValues;
                for (var j = 0; j < measureValues.length; j++) {
                    var values = measureValues[j]._values;
                    allMeasureValues = allMeasureValues.concat(getMeasureValues(values, onlyAA1, onlyAA2, measureValues[
                        j]._uId, i, j));
                }
            }
            var allCtx = [];
            var packCtx = function(ctx) {
                var obj = {};
                obj.dii_a1 = ctx.dii_a1;
                obj.dii_a2 = ctx.dii_a2;
                obj.mg = ctx.mg;
                obj.mi = ctx.mi;
                return obj;
            };
            if (TypeUtils.isEmptyObject(meas)) {
                for (i = 0; i < allMeasureValues.length; i++) {
                    allCtx.push(packCtx(allMeasureValues[i]));
                }
            } else {
                for (i = 0; i < allMeasureValues.length; i++) {
                    for (key in meas) {
                        if (meas[key] === allMeasureValues[i][key]) {
                            allCtx.push(packCtx(allMeasureValues[i]));
                        }
                    }
                }
            }
            return allCtx;
        };

        /**
         * @name sap.viz.data.CorsstalbeDataset#toJSON
         * @ignore
         * @param {Object} options, optional
         * Example:
         *      {
         *          emptyDataset: Boolean // If true, returns a JSON with none-value dataset
         *      }
         * @return {Object} ctJSON
         * Example:
         *      {
         *          id: "sap.viz.data.CrosstableDataset",
         *          data: <data object for CrosstableDataset>
         *          info: <info array for CrosstableDataset>
         *      }
         */
        crossTableDataSet.prototype.toJSON = function(options) {
            var id = "sap.viz.data.CrosstableDataset";
            var data = this.data();
            var info = this.info(); // only 'additionalData' is supported
            info = (TypeUtils.isArray(info) && info.length > 0) ? info : undefined;
            var i, j;
            if (options && options.emptyDataset === true) {
                var emptyDataValues = function(data) {
                    for (j = 0; j < data.length; j++) {
                        if (data[j].values && TypeUtils.isArray(data[j].values)) {
                            data[j].values = [];
                        }
                        if (data[j].infos && TypeUtils.isArray(data[j].infos)) {
                            delete data[j].infos;
                        }
                    }
                };
                if (data[ANALYSISAXIS]) {
                    var aa = data[ANALYSISAXIS];
                    for (i = 0; i < aa.length; i++) {
                        emptyDataValues(aa[i].data);
                    }
                }
                if (data[MEASUREVALUESGROUP]) {
                    var mg = data[MEASUREVALUESGROUP];
                    for (i = 0; i < mg.length; i++) {
                        emptyDataValues(mg[i].data);
                    }
                }
                info = undefined;
            }
            var ctJSON = {
                id: id,
                data: data,
                info: info
            };
            return ctJSON;
        };

        /**
         * Deserialize CrosstableDataset
         * @ignore
         * @param {Object} ctJSON
         * @return {Objece} CrosstableDataset
         */
        crossTableDataSet.fromJSON = function(ctJSON) {
            if (!TypeUtils.isPlainObject(ctJSON) || ctJSON.id !== 'sap.viz.data.CrosstableDataset' ||
                !ctJSON.hasOwnProperty('data')) {
                return;
            }
            var data = ObjectUtils.clone(ctJSON.data);
            var info = ObjectUtils.clone(ctJSON.info);
            var ctDataset = new crossTableDataSet();
            ctDataset.data(data);
            ctDataset.info(info);
            return ctDataset;
        };


        return crossTableDataSet;

    });
define('sap/viz/api/data/CrosstableDataset',[
    'sap/viz/framework/chartmodel/CrosstableDataset',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/util/TypeUtils',
    'exports'
], function Setup(CrosstableDataset, ObjectUtils, TypeUtils) {

    /**
     * sap.viz.api.data.CrosstableDataset
     * @class sap.viz.api.data.CrosstableDataset
     */
    var crosstableD = function() {
        this._crosstableDataset = new CrosstableDataset();
        this.type = 'sap.viz.api.data.CrosstableDataset';
    };
    /**
     * Get or Set the data in CrosstableDataset
     * @method sap.viz.api.data.CrosstableDataset.prototype.data
     * @param {Object|undefined} value
     *                      optional, pass the data object consist of "analysisAxis" and "measureValuesGroup", 
     Check /viz/wiki/ProductGuides/Tutorials/XTabDataModel for detail
     *
     *<pre>
     * Example:
     * {
     *      "analysisAxis" : [{
     *          "index" : 1,
     *          "data" : [{
     *              "type" : "Dimension",
     *              "name" : "Product",
     *              "values" : ["Car", "Truck", "Motorcycle", "Bicycle"]
     *          }]
     *      }, {
     *          "index" : 2,
     *          "data" : [{
     *              "type" : "Dimension",
     *              "name" : "Country",
     *              "values" : ["China", "USA"]
     *          }, {
     *              "type" : "Dimension",
     *              "name" : "Year",
     *              "values" : ["2001", "2001"]
     *          }]
     *      }],
     *      "measureValuesGroup" : [{
     *          "index" : 1,
     *          "data" : [{
     *              "type" : "Measure",
     *              "name" : "Profit",
     *              "values" : [[25, 136, 23, 116], [58, 128, 43, 73]]
     *          }, {
     *              "type" : "Measure",
     *              "name" : "Revenue",
     *              "values" : [[50, 236, 43, 126], [158, 228, 143, 183]]
     *          }]
     *      }]
     *  }
     * </pre>
     Check /viz/wiki/ProductGuides/Tutorials/XTabDataModel for Understanding CrossTableDataset
     */
    crosstableD.prototype.data = function(value) {
        if (value !== undefined) {
            this._crosstableDataset.data(value);
        } else {
            return this._crosstableDataset.data();
        }
    };

    /**
     * Get/Set additional info for the crosstable dataset
     * By now, only "additionalData" info type is supported
     * @name sap.viz.api.data.CrosstableDataset#info
     * @method sap.viz.api.data.CrosstableDataset.prototype.info
     * @param {Array|String} [arguments]
     *                               Array of Objects is for setting info and passes different types of infos objects.
     * <pre>
     * Schema:
     * [{
     *     "type": "additionalData",
     *     "info": [{
     *        "name": "<dimension_name>",
     *        // Match dimension member's 1D Array structure
     *        "infoValues": []
     *     }, {
     *     "name": "<measure_name>",
     *        // Match measure value's 2D Array structure
     *        "infoValues": [[]]
     *     }]
     * }]
     * </pre>
     * <pre>
     * Example:
     * [{
     *    "type" : "additionalData",
     *    "info" : [{
     *        "name" : "Country",
     *        "infoValues" : [{
     *            "CountryID": "1"
     *        }, {
     *            "CountryID": "2"
     *        }]
     *    }, {
     *        "name" : "Profit",
     *        "infoValues" : [[{
     *            "ID" : "11"
     *        }, {
     *            "ID" : "12"
     *        }, {
     *            "ID" : "13"
     *        }, {
     *            "ID" : "14"
     *        }], [{
     *            "ID" : "21"
     *        }, {
     *            "ID" : "22"
     *        }, {
     *            "ID" : "23"
     *        }, {
     *            "ID" : "24"
     *        }]]
     *    }]
     * }]
     * </pre>
     *                               or String is for getting info and passes the name of a specific type of info.
     * <pre>
     * Example:
     * "additionalData"
     * </pre>
     * @returns {Array}
     *                 return a copy of info type passed in
     *                        or a copy all type of info set if no param provided
     * @example <caption>Live Demo:<div class="livedemoFlag">
     <input style="display:none;" value="livedemo/api_CrosstableDataset_info.html"></caption>
     */
    crosstableD.prototype.info = function(value) {
        if (value !== undefined && !TypeUtils.isString(value)) {
            this._crosstableDataset.info(ObjectUtils.clone(value));
        } else if (TypeUtils.isString(value)) {
            return ObjectUtils.clone(this._crosstableDataset.info(value));
        } else {
            return ObjectUtils.clone(this._crosstableDataset.info());
        }
    };
    /**
     * Serialize CrosstableDataset
     * @ignore
     * @name sap.viz.api.data.CrosstableDataset#toJSON
     * @method sap.viz.api.data.CrosstableDataset.prototype.toJSON
     * @param {Object} options, optional
     * Example:
     *      {
     *          emptyDataset: Boolean // If true, returns a JSON with none-value dataset
     *      }
     * @return {Object}
     *
     * <pre>
     * Example:
     *     {
     *            id: 'sap.viz.data.CrosstableDataset',
     *            data: dataObject, //data object for CrosstableDataset
     *            info: infoArray, //array for CrosstableDataset
     *     }
     * </pre>
     */
    crosstableD.prototype.toJSON = function(options) {
        return this._crosstableDataset.toJSON(options);
    };

    /**
     * Deserialize CrosstableDataset
     * @ignore
     * @param {Object} ctJSON
     * @return {Objece} CrosstableDataset
     */
    crosstableD.fromJSON = function(ctJSON) {
        if (!TypeUtils.isPlainObject(ctJSON) || ctJSON.id !== 'sap.viz.data.CrosstableDataset' ||
            !ctJSON.hasOwnProperty('data')) {
            return;
        }
        var data = ObjectUtils.clone(ctJSON.data);
        var info = ObjectUtils.clone(ctJSON.info);
        var ctDataset = new crosstableD();
        ctDataset.data(data);
        ctDataset.info(info);
        return ctDataset;
    };
    //Used for VizControls.
    crosstableD.prototype.hasFakeData = function() {
        return this._crosstableDataset.hasFakeData();
    };
    
    crosstableD.prototype.destroy = function() {
        this._crosstableDataset = null;
        this.type = null;
    };
    
    return crosstableD;
});
define('sap/viz/framework/chartmodel/info/FlatTableInfoHandler',[], function() {
    var _handler = {};
    var handler = {};

    var geoInfoHandler = {
        'process': function(infoSet, infoData) {
            if (infoData.type != 'geo') {
                return;
            }
            if (infoSet == null) {
                infoSet = {};
            }
            infoSet[infoData.type] = infoData.info;
            return infoSet;
        },
        'find': function(infoset, rowIndex, selectedColumnIndexes) {
            var geoInfos = infoset['geo'];
            var geoInfo = geoInfos[rowIndex];
            var infoResult;
            if (geoInfo == null) {
                return;
            }
            for (var i = 0; i < selectedColumnIndexes.length; ++i) {
                var colIndex = selectedColumnIndexes[i];
                if (infoResult == null) {
                    infoResult = [];
                }
                infoResult.push(geoInfo[colIndex]);
            }
            return infoResult;
        }
    };

    var additionalDataInfoHandler = {
        'process': function(infoSet, infoData) {
            if (infoData.type != 'additionalData') {
                return;
            }
            if (infoSet == null) {
                infoSet = {};
            }
            infoSet[infoData.type] = infoData.info;
            return infoSet;
        },
        'find': function(infoset, rowIndex, selectedColumnIndexes) {
            var additionalDataInfos = infoset['additionalData'];
            var additionalDataInfo = additionalDataInfos[rowIndex];
            var infoResult;
            if (additionalDataInfo == null) {
                return;
            }
            for (var i = 0; i < selectedColumnIndexes.length; ++i) {
                var colIndex = selectedColumnIndexes[i];
                if (infoResult == null) {
                    infoResult = [];
                }
                infoResult.push(additionalDataInfo[colIndex]);
            }
            return infoResult;
        }
    };

    handler.get = function(type) {
        return _handler[type];
    };

    handler.register = function(type, handler) {
        _handler[type] = handler;
    };

    handler.register('geo', geoInfoHandler);
    handler.register('additionalData', additionalDataInfoHandler);

    return handler;
});
define('sap/viz/framework/chartmodel/FlatTableDataset',['sap/viz/framework/common/util/TypeUtils', 'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/chartmodel/info/FlatTableInfoHandler',
    'sap/viz/framework/common/util/FunctionUtils', 'sap/viz/framework/common/lang/LangManager'
], function(util, ObjectUtils, FlatTableInfoHandler, FunctionUtils, langManager) {
    var colName = 'fields';
    var rowName = "data";
    var contextIdName = "_context_row_number";
    var measureTypeName = "Measure";
    var dimesionTypeName = "Dimension";
    var sematicTypeName = "semanticType";

    function generateContextId(data) {
        if (data.context === undefined) {
            return false;
        }
        var contextIdNameTemp;
        if (util.isArray(data.context)) {
            contextIdNameTemp = data.context[0];
        } else {
            contextIdNameTemp = data.context;
        }
        if (contextIdNameTemp === contextIdName) {
            return true;
        } else {
            var cols = data.metadata[colName],
                i;
            for (i = cols.length - 1; i >= 0; --i) {
                if (cols[i].id === contextIdNameTemp && cols[i].name === contextIdNameTemp) {
                    //if context id already exists in original data, return false to indicate no context id is generated
                    return false;
                }
            }
            // if go this path ,then the context is wrong.
            return true;
        }
    }
    /**
     * @constructor
     * Constructor of flat table dataset.
     * @param data, example:
     *             {
     *                 metadata:{
     *                     fields:[{
     *                         id: 'Year',
     *                      semanticType: 'Dimension'
     *                     },{
     *                         id: 'Profit',
     *                      semanticType: 'Measure'
     *                     }],
     *                     summary:{}
     *                 },
     *                 data:[
     *                     [2001,100000],
     *                     [2002,200000]
     *                 ],
     *                 info:[    //optional
     *                     {}
     *                 ]
     *             }
     */
    var FlatTableDataset = function(dataset) {
        this._infoset = {};
        if (dataset) {
            this.data(dataset);
            if (this._dataset.info != null) {
                this.info(this._dataset.info);
            }
            this._emptyDataset = false;
        } else {
            this._emptyDataset = true;
        }
    };
    
    FlatTableDataset.prototype.destroy = function() {
        this._infoset = null;
        this._table = null;
        this._isIdGenerated = null;
        this._data = null;
        this._dataset.data = null;
        this._dataset.metadata = null;
        this._dataset = null;
        this._emptyDataset = null;
    };
    
    FlatTableDataset.prototype._getTypeByIndex = function(index) {
        var type = this._dataset.metadata.fields[index].semanticType;
        if (type === dimesionTypeName) {
            return 'Dimension';
        } else if (type === measureTypeName) {
            return 'Measure';
        }
    };
    /**
     * Get/set for the property data.
     * @param value {Object}:
     * example {
     *         metadata:{},
     *         data:[]
     * }
     * @returns {Object} instance of FlatTableDataset
     */
    FlatTableDataset.prototype.data = function(value) {
        if (value != null) {
            if (value.metadata == null || value.data == null) {
                FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_FLATTABLE_INVALID_DATA_PARAM'));
            }
            this._dataset = ObjectUtils.clone(value);
            //remove quotes from measure
            var data = this._dataset.data;
            var fields = this._dataset.metadata.fields;

            if (this._dataset.metadata.context) {
                this._dataset.context = this._dataset.metadata.context;
            }
            var i, j;
            for (i = 0; i < fields.length; i++) {
                for (j = 0; j < data.length; j++) {
                    if (fields[i].semanticType === "Measure") {
                        if (typeof data[j][i] !== "number") {
                            if (util.isString(data[j][i]) && (data[j][i].trim() !== "")) {
                                data[j][i] = Number(data[j][i]); //string to float
                            } else {
                                data[j][i] = null; // otherwise to null
                            }
                        }
                        if (util.isNaN(data[j][i])) {
                            data[j][i] = null;
                        }
                    }
                }
            }
            this._data = this._dataset[rowName];
            this._table = null;
            this._isIdGenerated = generateContextId(this._dataset);
            return this;
        }
        return {
            metadata: ObjectUtils.clone(this._dataset.metadata),
            data: ObjectUtils.clone(this._dataset.data)
        };
    };
    /**
     * get the data of specified column
     * @param id {String} id of column
     * @returns {Array}
     */
    FlatTableDataset.prototype.getMetadata = function(id) {
        if(id===contextIdName){
            return [{id:contextIdName,name:contextIdName}];
        }
        var cols = this._dataset.metadata[colName];
        for (var i = 0, len = cols.length; i < len; ++i) {
            var col = cols[i];
            if (col.id === id) {
                col = ObjectUtils.clone(col);
                //we want to know the col index of this column
                col.index = i;
                return [col];
            }
        }
        return [];
    };

    /**
     * Get the meta data of the field of the specified index
     * @param index {Number}
     * @returns
     */
    FlatTableDataset.prototype.getMetadataByIndex = function(index) {
        return this._dataset.metadata[colName][index];
    };

    FlatTableDataset.prototype._getColumnIdOfSemanticType = function(semanticType) {
        var cols = this._dataset.metadata[colName];
        var result = [];
        var length = cols.length;
        for (var i = 0; i < length; ++i) {
            var col = cols[i];
            if (col[sematicTypeName] === semanticType) {
                if (this._dataset.context) {
                    if (this._dataset.context.indexOf(col.id) > -1) {
                        continue;
                    }
                }
                result.push(col.id);
            }
        }
        return result;
    };
    /**
     * get the column id of measures
     * @returns {Array}
     */
    FlatTableDataset.prototype.getMeasures = function() {
        return this._getColumnIdOfSemanticType(measureTypeName);
    };
    /**
     * get the column id of dimensions
     * @returns {Array}
     */
    FlatTableDataset.prototype.getDimensions = function() {
        return this._getColumnIdOfSemanticType(dimesionTypeName);
    };
    /**
     * Transform the data into an object table
     * @returns {Array} the data in the object table format
     */
    FlatTableDataset.prototype.getTable = function() {
        if (this._table != null) {
            return this._table;
        }
        var cols = this._dataset.metadata[colName];
        var rows = this._data;
        var result = [];
        for (var i = 0; i < rows.length; ++i) {
            var item = {};
            for (var j = 0; j < cols.length; ++j) {
                item[cols[j].id] = rows[i][j];
            }
            result.push(item);
        }
        this._table = result;
        return this._table;
    };
    /**
     * get the specified row item of some specified type
     * @param rowIndex {Number} the index of the row you want to get
     * @returns {Array|Object}
     */
    FlatTableDataset.prototype.getRow = function(rowIndex) {
        var row = this._data[rowIndex];
        if (row == null) {
            return;
        }
        return row.slice(0);
    };
    /**
     * for now we only support simple criteria which is key:value pairs
     * and we return all rows match the criteria
     * @param criteria
     * @returns {Array} all rows index match the criteria
     */
    FlatTableDataset.prototype.query = function(criteria) {
        var ret = [];
        var rowMatched = true;
        for (var i = 0, len = this._data.length; i < len; i++) {
            var row = this._data[i];
            rowMatched = true;
            for (var key in criteria) {
                if (criteria.hasOwnProperty(key)) {
                    var meta = this.getMetadata(key);
                    if (meta && meta.length > 0 && row[meta[0].index] !== criteria[key]) {
                        rowMatched = false;
                        break;
                    }
                }
            }
            if (rowMatched) {
                ret.push(i);
            }
        }
        return ret;
    };
    /**
     * set a new row to the dataset with its specified row index.
     * @param {Number} rowIndex
     * @param {Array} rowItem
     */
    FlatTableDataset.prototype.setRow = function(rowIndex, rowItem) {
        var numCols = this._dataset.metadata[colName].length;
        var rowData = {};
        var rawRowData = [],
            colId;
        if (util.isArray(rowItem)) {
            for (var i = 0; i < numCols - 1; ++i) {
                colId = this._dataset.metadata[colName][i].id;
                rowData[colId] = rowItem[i];
                rawRowData[i] = rowItem[i];
            }
            rowData[contextIdName] = this._data[rowIndex][numCols - 1];
            rawRowData[numCols - 1] = this._data[rowIndex][numCols - 1];
        } else {
            //TODO error handle for format error
            return;
        }
        this._data[rowIndex] = rawRowData;
        if (this._table) {
            this._table[rowIndex] = rowData;
        }
    };
    FlatTableDataset.prototype._getInfoOfSelectedColumnsByRowIndex = function(selectedColumnIndexes, rowIndex) {
        var result = null;
        for (var infoType in this._infoset) {
            if (this._infoset.hasOwnProperty(infoType)) {
                var info = this._infoset[infoType];
                var infoResult = null;
                if (info == null) {
                    continue;
                }
                var handler = FlatTableInfoHandler.get(infoType);
                if (handler != null && util.isFunction(handler.find)) {
                    infoResult = handler.find(this._infoset, rowIndex, selectedColumnIndexes);
                }
                if (result == null && infoResult != null) {
                    result = {};
                }
                if (result != null) {
                    result[infoType] = infoResult;
                }
            }
        }
        return result;
    };

    FlatTableDataset.prototype._getAllColumnIds = function() {
        var cols = this._dataset.metadata[colName];
        var result = [];
        var length = cols.length;
        for (var i = 0; i < length; ++i) {
            result.push(cols[i].id);
        }
        return result;
    };

    FlatTableDataset.prototype.getContext = function() {
        if (util.isArray(this._dataset.context)) {
            //Only using the first context.
            return [this._dataset.context[0]];
        } else if (this._dataset.context) {
            return [this._dataset.context];
        } else {
            return [];
        }

    };
    /**
     * seleted the data of specified columns
     * @param selectedColumns :['columnId1','columnId2']
     * @return {Array} clone of the this._data or its subset
     */
    FlatTableDataset.prototype.dataInFields = function(selectedColumns) {
        if (selectedColumns !== undefined && !util.isArray(selectedColumns)) {
            // TODO throw error 
            FunctionUtils.error("Invalid Parameter");
        }
        if (selectedColumns == null || selectedColumns.length === 0) {
            return this._data.slice(0);
        } else {
            var rowData = this._data;
            var hasInfo = this._infoset != null;
            var result = [],
                i;
            var selectedColumnIndexes = [];
            var allColumnIds = this._getAllColumnIds();
            var initialId = 0;

            for (i = 0; i < selectedColumns.length; ++i) {
                selectedColumnIndexes.push(allColumnIds.indexOf(selectedColumns[i]));
            }

            for (i = 0; i < rowData.length; ++i) {
                var data = [];
                var info = null;
                if (selectedColumns[0] === contextIdName) {
                    data.push(initialId++);
                } else {
                    for (var j = 0; j < selectedColumnIndexes.length; ++j) {
                        var colIndex = selectedColumnIndexes[j];
                        var dataValue = rowData[i][colIndex];
                        if (util.isPlainObject(dataValue)) {
                            data.push(ObjectUtils.extend(true, {}, dataValue));
                        } else if (util.isArray(dataValue)) {
                            data.push(dataValue.slice(0));
                        } else {
                            data.push(dataValue);
                        }
                    }
                    info = this._getInfoOfSelectedColumnsByRowIndex(selectedColumnIndexes, i);
                }

                result.push({
                    data: data,
                    info: info
                });
            }
            return result;
        }
    };

    /**
     * Get/set for the info.
     * @param {String|Array of Object} value
     */
    FlatTableDataset.prototype.info = function(value) {
        if (value == null) {
            var result = [];
            if (this._infoset['additionalData'] != null) {
                result.push({
                    type: 'additionalData',
                    info: this._infoset['additionalData']
                });
            }
            return result;
        } else if (util.isString(value)) {
            return [{
                type: value,
                info: this._infoset[value]
            }];
        } else if (util.isArray(value)) {
            for (var i = 0; i < value.length; ++i) {
                var infoData = value[i];
                var handler = FlatTableInfoHandler.get(infoData.type);
                if (handler != null && util.isFunction(handler.process)) {
                    this._infoset = handler.process(this._infoset, infoData);
                }
            }
            return this;
        }

    };

    FlatTableDataset.prototype.isEmptyDataset = function() {
        if (this.getDataPointCount() === 0) {
            return true;
        } else {
            return false;
        }
    };

    FlatTableDataset.prototype.getDataPointCount = function() {
        var count = 0;
        if (this._dataset.data && this._dataset.data[0]) {
            count = this._dataset.data[0].length * this._dataset.data.length;
        }
        return count;
    };

    FlatTableDataset.prototype.hasFakeData = function() {
        if (this._dataset.metadata.fields && this._dataset.metadata.fields[0]) {
            var fields = this._dataset.metadata.fields;
            for (var i = 0; i < fields.length; i++) {
                if (fields[i].semanticType && (fields[i].semanticType === dimesionTypeName || fields[i].semanticType ===
                    measureTypeName) && fields[i].isFake === true) {
                    return true;
                }
            }
        }
        return false;
    };

    /**
     * internal used for composing data form ctx
     * @ignore
     */
    FlatTableDataset.prototype.ctx2TableData = function(rawCTX) {
        var data = {};
        if (!Array.isArray(rawCTX)) {
            rawCTX = [rawCTX];
        }
        var dims = {};
        var measures = {};
        for (var i = 0; i < rawCTX.length; i++) {
            var ctx = rawCTX[i];
            if (!ctx) {
                continue;
            }
            var row = this.getRow(ctx.row);
            //for each value in row, if it's a dimension put it in dims
            //if it's a measure, put it in measure if it's index is same as ctx.col
            for (var j = 0; j < row.length; j++) {
                var eachMetadata = this.getMetadataByIndex(j);
                if (eachMetadata.semanticType === dimesionTypeName) {
                    dims[eachMetadata.name] = row[j];
                } else if (eachMetadata.semanticType === measureTypeName && j === ctx.col) {
                    measures[eachMetadata.name] = row[j];
                }
            }
        }
        data.dimension = dims;
        data.measure = measures;
        return data;
    };

    /**
     * Serialize FlatTableDataset.data to JSON format
     * @ignore
     * @param {Object} options, optional
     * Example:
     *      {
     *          emptyDataset: Boolean // If true, returns a JSON with none-value dataset
     *      }
     * @return {Object} ftJSON
     * Example:
     * {
     *    id: "sap.viz.data.FlatTableDataset",
     *    data: <data object for FlatTableDataset>,
     *    info: <info array for FlatTableDataset>
     * }
     */
    FlatTableDataset.prototype.toJSON = function(options) {
        var id = "sap.viz.data.FlatTableDataset";
        var data = this.data();
        var infos = ObjectUtils.clone(this._infoset);
        var info = [];
        for (var key in infos) {
            if (infos.hasOwnProperty(key)) {
                var obj = {};
                obj.type = key;
                obj.info = infos[key];
                info.push(obj);
            }
        }
        info = info.length > 0 ? info : undefined;
        if (this._isIdGenerated) {
            for (var i = 0; i < data.data.length; i++) {
                data.data[i].pop();
            }
            data.metadata.fields.pop();
        }
        if (options && options.emptyDataset === true) {
            data.data = [];
            info = undefined;
        }
        var ftJSON = {
            id: id,
            data: data,
            info: info
        };
        return ftJSON;
    };

    /**
     * Deserialize stringified FlatTableDataset.data back to object
     * @param {Object} ftJSON
     * @return {Object} data Object of FlatTableDataset
     */
    FlatTableDataset.fromJSON = function(ftJSON) {
        if (!util.isPlainObject(ftJSON) || ftJSON.id !== 'sap.viz.data.FlatTableDataset' || !ftJSON.hasOwnProperty(
            'data')) {
            return;
        }
        var data = ObjectUtils.clone(ftJSON.data);
        var info = ObjectUtils.clone(ftJSON.info);
        if (info !== undefined) {
            data.info = info;
        }
        var ftDataset = new FlatTableDataset(data);
        return ftDataset;
    };

    return FlatTableDataset;
});
define('sap/viz/api/data/FlatTableDataset',[
    'sap/viz/framework/chartmodel/FlatTableDataset',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/log/Logger',
    'sap/viz/framework/common/lang/LangManager',
    'sap/viz/framework/common/util/ObjectUtils',
    'exports'
], function Setup(FlatTableDataset, TypeUtil, Logger, langManager, ObjectUtil) {

    /**
     * sap.viz.api.data.FlatTableDataset
     * @class sap.viz.api.data.FlatTableDataset
     * @param {Object} data JSON object
     *
     * <pre>
     * Example:
     *     {
     *         metadata:{
     *             fields:[{
     *                 id: 'Year',
     *                 semanticType: 'Dimension'
     *             },{
     *                 id: 'Profit',
     *                 semanticType: 'Measure'
     *             }],
     *             summary:{}
     *         },
     *         data:[
     *             [2001,100000],
     *             [2002,200000]
     *         ],
     *             info:[    //optional
     *            {}
     *         ]
     *     }
     * </pre>
     */
    var FlatTableD = function(data) {
        this._FlatTableD = new FlatTableDataset(data);
        this.type = 'sap.viz.api.data.FlatTableDataset';
    };
    /**
     * Get/Set data and metadata in FlatTableDataset
     * @method sap.viz.api.data.FlatTableDataset.prototype.data
     * @param {Object} value JSON Object
     *
     * <pre>
     * Example:
     *     {
     *         metadata:{
     *             fields:[{
     *                 id: 'Year',
     *                 semanticType: 'Dimension'
     *             },{
     *                 id: 'Profit',
     *                 semanticType: 'Measure'
     *             }],
     *             summary:{}
     *         },
     *         data:[
     *             [2001,100000],
     *             [2002,200000]
     *         ]
     *     }
     * </pre>
     */
    FlatTableD.prototype.data = function(value) {
        return this._FlatTableD.data(value);
    };

    /**
     * Get the data of specified column id
     * @name sap.viz.api.data.FlatTableDataset#metadata
     * @method sap.viz.api.data.FlatTableDataset.prototype.metadata
     * @param {String} id   id of column
     * @returns {Array of Object}
     */
    FlatTableD.prototype.metadata = function(id) {
        if (id != null) {
            return this._FlatTableD.getMetadata(id);
        } else {
            Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
        }
    };

    /**
     * Get the column ids of measures
     * @name sap.viz.api.data.FlatTableDataset#measures
     * @method sap.viz.api.data.FlatTableDataset.prototype.measures
     * @returns {Array of Object}
     */
    FlatTableD.prototype.measures = function() {
        return this._FlatTableD.getMeasures();
    };
    /**
     * Get the column ids of dimensions
     * @name sap.viz.api.data.FlatTableDataset#dimensions
     * @method sap.viz.api.data.FlatTableDataset.prototype.dimensions
     * @returns {Array of Object}
     */
    FlatTableD.prototype.dimensions = function() {
        return this._FlatTableD.getDimensions();
    };

    /**
     * Transform the data into an object table
     * @name sap.viz.api.data.FlatTableDataset#table
     * @method sap.viz.api.data.FlatTableDataset.prototype.table
     * @returns {Array of Object} the data in the object table format
     */
    FlatTableD.prototype.table = function() {
        return this._FlatTableD.getTable();
    };

    /**
     * Get/Set the specified row item of some specified type
     * @name sap.viz.api.data.FlatTableDataset#row
     * @method sap.viz.api.data.FlatTableDataset.prototype.row
     * @param  {Number}  rowIndex the index of the row you want to get
     * @param {Undefined|Array} param  to get the data in raw format or set the row
     *
     * <pre>
     * Example:
     *     FlatTableDataset.row(index) is the get method to get row.
     *     FlatTableDataset.row(index,[2001, 'Q2', 'CAN', 300, 200]) is the set method the set row.
     * </pre>
     * @returns {Array|Object|} return the raw value if this is a get function and no return value if this is a set 
     function.
     */
    FlatTableD.prototype.row = function(rowIndex, param) {
        if (TypeUtil.isNumber(rowIndex)) {
            if (TypeUtil.isPlainObject(param) || TypeUtil.isArray(param)) {
                this._FlatTableD.setRow(rowIndex, param);
            } else {
                return this._FlatTableD.getRow(rowIndex);
            }
        }
    };

    /**
     * Seleted the data of specified fields
     * @name sap.viz.api.data.FlatTableDataset#dataInFields
     * @method sap.viz.api.data.FlatTableDataset.prototype.dataInFields
     * @param {Array|Undefined} selectedColumns ['fieldId1','fieldId2']
     * @return {Array of Object} clone of the this._table or its subset
     */
    FlatTableD.prototype.dataInFields = function(selectedFields) {
        return this._FlatTableD.dataInFields(selectedFields);
    };

    /**
     * Get/set of the info of dataset
     * By now, only 'additionalData' info type is supported.
     * @name sap.viz.api.data.FlatTableDataset#info
     * @method sap.viz.api.data.FlatTableDataset.prototype.info
     * @param {Undefined|String|Array}infoData
     * @return {Array of Object}
     * <pre>
     * Example:
     *     1. dataset.info(); return the info of 'additionalData' type.
     *     2. dataset.info('additionalData'); return the info of the specified data. for current example the type is
      'additionalData'.
     *     3. dataset.info([{
     *                 type:'additionalData'
     *                 info:[[1,2,3,4]]
     *             }]);                    set the new info with it's type and info data.
     *</pre>
     */
    //TODO:NOT finished code.
    FlatTableD.prototype.info = function(infoData) {
        return this._FlatTableD.info(infoData);
    };


    /**
     * Serialize FlatTableDataset
     * @deprecated
     * @name sap.viz.api.data.FlatTableDataset#toJSON
     * @method sap.viz.api.data.FlatTableDataset.prototype.toJSON
     * @return {Object}
     *
     * <pre>
     * Example:
     *     {
     *            id: 'sap.viz.data.FlatTableDataset',
     *            data: dataObject, //data object for FlatTableDataset
     *            info: infoArray, //array for FlatTableDataset
     *     }
     * </pre>
     */

    FlatTableD.prototype.toJSON = function(options) {
        return this._FlatTableD.toJSON(options);
    };

    /**
     * Deserialize FlatTableDataset
     * @deprecated
     * @name sap.viz.api.data.FlatTableDataset#fromJSON
     * @method sap.viz.api.data.FlatTableDataset.fromJSON
     * @param {Object} ftJSON an object returned by method toJSON
     * @return {Object} an instance of FlatTableDataset same with which called method toJSON
     */
    FlatTableD.fromJSON = function(ftJSON) {
        if (!TypeUtil.isPlainObject(ftJSON) || ftJSON.id !== 'sap.viz.data.FlatTableDataset' || !ftJSON.hasOwnProperty(
            'data')) {
            return;
        }
        var data = ObjectUtil.clone(ftJSON.data);
        var info = ObjectUtil.clone(ftJSON.info);
        if (info !== undefined) {
            data.info = info;
        }
        var ftD = new FlatTableD(data);
        return ftD;
    };
    //Used for VizControls.
    FlatTableD.prototype.hasFakeData = function() {
        return this._FlatTableD.hasFakeData();
    };
    //Used for VizControls.
    FlatTableD.prototype.getContext = function() {
        return this._FlatTableD.getContext();
    };
    
    FlatTableD.prototype.destroy = function() {
        if (this._FlatTableD) {
            this._FlatTableD.destroy();
        }
        this._FlatTableD = null;
        this.type = null;
    };
    return FlatTableD;
});
define('sap/viz/api/core',[
    "sap/viz/framework/core/ChartViewRegistry",
    "sap/viz/api/core/VizInstance",
    "sap/viz/migrate/bindingMigrator",
    "sap/viz/framework/common/lang/LangManager",
    "sap/viz/api/data/CrosstableDataset",
    "sap/viz/api/data/FlatTableDataset",
    "sap/viz/framework/common/log/Logger",
    "sap/viz/migrate/MigrationTool",
    "exports"
], function(ChartViewRegistry, VizInstance, migrateUtils, langManager, CrosstableDataset,
    FlatTableDataset, Logger, MigrationTool) {

    return {

        createViz: function(param) {
            param.properties = param.properties || param.options;
            param = MigrationTool.migrate(param);
            var viz = new VizInstance(ChartViewRegistry, param);
            return viz;
        },
        destroyViz: function() {
            for (var i = -1, j = arguments.length; ++i < j;) {
                arguments[i].destroy();
            }
        },
        exportViz: function(chart, options) {
            return chart.toJSON(options);
        },
        loadViz: function(vizJSON, container) {
            if (arguments.length === 2) {
                var chartJSON = JSON.parse(JSON.stringify(vizJSON));
                chartJSON = MigrationTool.migrate(chartJSON, true);
                chartJSON.container = container;
                var data = null;

                data = chartJSON.data;
                data.data = data.val;
                if (chartJSON.data.type === "Crosstable") {
                    data.id = "sap.viz.data.CrosstableDataset";
                    data = CrosstableDataset.fromJSON(data);
                } else if (chartJSON.data.type === "FlatTable") {
                    data.id = "sap.viz.data.FlatTableDataset";
                    data = FlatTableDataset.fromJSON(data);
                }

                chartJSON.data = data;
                return this.createViz(chartJSON);
            } else {
                Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
            }

        }
    };

});

define('sap/viz/framework/common/log/Analyzer',['sap/viz/framework/common/log/Logger'], function Setup(LOG) {
    function Stack() {
        this.stac = [];

        this.pop = function() {
            return this.stac.pop();
        };

        this.push = function(item) {
            this.stac.push(item);
        };

        this.peek = function() {
            return this.stac[this.stac.length - 1];
        };
    }

    /*
     * return {
     *   'usedJSHeapSize' : [OPTIONAL] int
     *   'totalJSHeapSize' : [OPTIONAL] int
     *   'flag' : string
     * }
     */
    function parseProfilingMsg(msg) {
        //[18403120][24402304][767557632]Render: layout
        var ret = {};
        var exp = /\[\d+\]/g;
        var exp2 = /\d+/;
        var exp3 = /[^\d\[\]]+/;
        var heapsize = msg.match(exp);
        if (heapsize) {
            ret.usedJSHeapSize = heapsize[0].match(exp2)[0];
            ret.totalJSHeapSize = heapsize[1].match(exp2)[0];
        }
        ret.flag = msg.match(exp3)[0];
        return ret;
    }

    /*
     * return {
     *   'name': string,
     *   'client': string,
     *   'info' : Array
     * }
     */
    function parseContextMsg(msg) {
        //"[Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.22 (KHTML, like Gecko)
        //Chrome/25.0.1364.152 Safari/537.22]creation:3:16:0"
        //[useragent]contextname:[:additional values]
        var ret = {};
        var exp = /\[.+\]/;
        var exp2 = /\]:.+$/;
        ret.client = msg.match(exp)[0];
        var ctxMatch = msg.match(exp2);
        if (ctxMatch) {
            var ctxa = ctxMatch[0].split(':');
            ret.name = ctxa[1];
            ctxa.shift();
            ctxa.shift();
            ret.info = ctxa;
        }
        return ret;
    }

    //TODO FIXME @Eddy CHANGE TO STRING
    var threshold = LOG.LEVEL.DEBUG;
    var msgs = [];
    var layout = null;
    var Analyzer = {
        // add property threshold to adapt new log framework and each appender needs a threshold property
        threshold: threshold,
        doAppend: function(logTime, logLevel, logCate, logMsg) {
            msgs.push([logTime, logLevel, logCate, logMsg]);
        },
        setLayout: function(layout) {
            return layout.format && (this.layout = layout);
        },
        getLevel: function() {
            return threshold;
        },
        setLevel: function(level) {
            threshold = level;
        },

        reset: function() {
            msgs = [];
        },

        pnrProfiling: function(msg) {
            //chrome supports window.performance.memory, we include it in profile message
            if (window && window.performance && window.performance.memory) {
                var m = window.performance.memory;
                msg = '[' + m.usedJSHeapSize + '][' + m.totalJSHeapSize + '][' + m.jsHeapSizeLimit + ']' + msg;
            }
            LOG.debug(msg, 'PROFILING');
        },

        pnrContext: function(msg) {
            //try to get as many env contexts as possible
            if (window && window.navigator) {
                msg = "[" + window.navigator.userAgent + "]" + msg;
            }
            LOG.debug(msg, 'CONTEXT');
        },

        profiling: function() {
            LOG.disable();

            var pfa = [];
            var ctxmsg;
            var currentPF;

            var pStartMsg;
            var pEndMsg;
            var calculateDoneFlag = "pnr.calculate.done";
            for (var i = 0, len = msgs.length; i < len; i++) {
                //typical msg:
                //[1362633819088][DEBUG][PROFILING]-[18403120][24402304][767557632]Render: layout
                //[1362633819099][DEBUG][PROFILING]-[18786948][24402304][767557632]Render: layout
                pStartMsg = msgs[i];
                if (pStartMsg[2] === 'CONTEXT') { //group the context, push a new currentPF
                    ctxmsg = parseContextMsg(pStartMsg[3]);
                    currentPF = {
                        ctx: {
                            name: ctxmsg.name,
                            client: ctxmsg.client,
                            info: ctxmsg.info
                        },
                        data: []
                    };
                    pfa.push(currentPF);
                } else if (pStartMsg[2] === 'PROFILING') {
                    if (pfa.length < 1) { // chekc pfa  has currentPF.
                        currentPF = {
                            data: []
                        };
                        pfa.push(currentPF);
                    }

                    var startMsg = parseProfilingMsg(pStartMsg[3]);

                    for (var j = i + 1; j < len; j++) {
                        pEndMsg = msgs[j];
                        var endMsg = parseProfilingMsg(pEndMsg[3]);
                        if (startMsg.flag && endMsg.flag === startMsg.flag && (pStartMsg.length > 0 &&
                            pStartMsg[pStartMsg.length - 1] !== calculateDoneFlag)) {
                            if (pEndMsg[pEndMsg.length - 1] != calculateDoneFlag) {
                                msgs[j].push(calculateDoneFlag);
                            }

                            // [start.flag, endTime-startTime, startTime, endTime, end.usedJSHeapSize -
                            // start.usedJSHeapSize, end.totalJSHeapSize - start.totalJSHeapSize, end.usedJSHeapSize,
                            // end.totalJSHeapSize]
                            currentPF.data.push([startMsg.flag, pEndMsg[0] - pStartMsg[0], pStartMsg[0],
                                pEndMsg[0], endMsg.usedJSHeapSize - startMsg.usedJSHeapSize, endMsg.totalJSHeapSize -
                                startMsg.totalJSHeapSize, endMsg.usedJSHeapSize, endMsg.totalJSHeapSize
                            ]);
                            break;
                        }
                    }

                }
            }

            LOG.enable();

            return pfa;
        },
    };

    return Analyzer;
});
define('sap/viz/framework/common/locale/Locale',['sap/viz/framework/common/lang/LangManager', 'sap/viz/framework/common/format/FormatManager',
    'sap/viz/framework/common/util/TypeUtils'
], function Setup(langManager, FormatManager, TypeUtils) {
    var locale = 'en',
        listeners = [],
        callback;

    function internalCallback() {
        onLocaleChanged(locale);
        if (TypeUtils.isFunction(callback)) {
            callback.apply();
        }
    }

    function onLocaleChanged(locale) {
        listeners.forEach(function(listener) {
            listener.fn.apply(listener.scope, [locale]);
        });
    }

    var Locale =
        /** @lends sap.viz.Locale */
        {
            /**
             * @constructs
             */
            constructor: function() {
                return;
            },

            /**
             * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
             please consider to use new version of this API instead. You can use sap.viz.api.env.Locale.set/get instead.
             * @param {String}
             *       locale
             *
             * @returns {Object} {@link sap.viz.Locale}
             */
            locale: function(loc, callbackFunc) {
                if (!arguments.length) {
                    return locale;
                }
                locale = loc;
                callback = callbackFunc;
                FormatManager.apply(locale);
                langManager.apply(locale, internalCallback);
                return Locale;
            },

            /**
             * Add a listener which will be executed when current language is changed.
             * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
               please consider to use new version of this API instead. You can use sap.viz.extapi.env.Locale.
               addListener instead.
             * @param {Object}
             *          listener
             * @param {Function}
             *          listener.fn the listener function
             * @param {Object}
             *          listener.scope the "this" object in the listener function
             *
             * @returns {Object} {@link sap.viz.Locale}
             */
            addListener: function(listener) {
                listeners.push(listener);
                return Locale;
            },

            /**
             * Remove the listener.
             * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
               please consider to use new version of this API instead. You can use sap.viz.extapi.env.Locale.
               removeListener instead.
             * @param {Object} listener
             *          the listener reference
             *
             * @returns {Object} {@link sap.viz.Locale}
             */
            removeListener: function(listener) {
                var index = listeners.indexOf(listener);
                if (index !== -1) {
                    listeners.splice(index, 1);
                }
                return Locale;
            }
        };

    return Locale;
});
define('sap/viz/framework/core/env',[
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/log/Logger',
    'sap/viz/framework/common/log/Analyzer',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/locale/Locale'
], function Setup(TypeUtils, LOG, analyzer, ObjectUtils, Locale) {
    var _setLogLevel = function(_level) {
        if (TypeUtils.isExist(_level)) {
            LOG.setLevel(_level);
        }
    };
    var _initLogger = function(options) {
        if (!options) {
            return;
        }

        if (options.enable) {
            LOG.enable();
        }

        if (!options.appenders) {
            //no customize appenders, we'll use default appender
            if (options.level) {
                //FIXME @Eddy, allow set level with string
                //FIXME and only for debug, trace we will use analyzer as appender
                //otherwise we set this level to default appender
                LOG.setAppenders([{
                    appenderKey: 'sap.viz.util.analyzer',
                    appender: analyzer
                }]);
            }
            return;
        }
        //if user set appenders, we remove default appender
        LOG.setAppenders([]);
        for (var i = 0, l = options.appenders.length; i < l; i++) {
            var appender = options.appenders[i];
            if (appender.appenderKey) {
                LOG.addAppender(appender.appenderKey, appender.appender);
            } else {
                LOG.addAppender(appender.appender);
            }

        }
        // LOG.addAppender('analyzerAppender', new AnalyzerAppender());
        // LOG.addAppender("ajaxApp", new LOG.AjaxAppender("http://localhost:8800"));
        // LOG.getAppender("ajaxApp").setLevel(LOG.LEVEL.DEBUG);
        //LOG.getAppender("[default]").setLevel(_level);
    };

    var _initLocal = function(options, callback) {
        Locale.locale(options.locale, callback);
    };

    var setting = {};

    var env =
        /**
         * @lends sap.viz.Environment
         */
        {
            /**
             * @constructs
             */
            constructor: function() {

            },
            /**
             * initialize visualization environment
             * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
               please consider to use new version of this API instead.
             * @param {Object}
             *            option {locale:'en_US'}
             *
             */
            initialize: function(option, callback) {
                if (!option) {
                    return;
                }
                _initLogger(option.log);
                if (option.locale) {
                    _initLocal(option, callback);
                } else {
                    if (callback) {
                        callback.call();
                    }
                }

                setting = ObjectUtils.extend(true, {}, setting, option);
                // _setLogLevel(option.log);
            },

            /**
             * get Environment setting.
             * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
               please consider to use new version of this API instead.
             * @return {Object}
             *            option {locale:'en_US'}
             *
             */
            getEnvSetting: function() {
                return setting;
            },

            /**
             * @ignore
             * @param enable
             */
            setLoggerEnable: function(enable) {
                if (enable === true) {
                    LOG.enable();
                } else if (enable === false) {
                    LOG.disable();
                }

            },

            /**
             * @ignore
             * @returns TODO: add desc
             */
            addLogAppender: function() {
                if (arguments.length === 1) {
                    return LOG.addAppender(arguments[0]);
                } else if (arguments.length === 2) {
                    return LOG.addAppender(arguments[0], arguments[1]);
                }

            },

            /**
             * @ignore
             * @param key
             * @returns TODO: add desc
             */
            removeLogAppender: function(key) {
                return LOG.removeAppender(key);
            }
        };

    return env;
});
define('sap/viz/framework/core/config',['sap/viz/framework/common/util/FunctionUtils', 'sap/viz/framework/core/env'],
    function Setup(FunctionUtils, env) {

        var configs = {};

        var enableCanvg = false;

        var manager = {

            constructor: function() {
                return;
            },

            enableCanvg: function(_) {
                if (!arguments.length) {
                    //get option from environment.
                    return (env.getEnvSetting().enableCanvg !== undefined) ? env.getEnvSetting().enableCanvg :
                        enableCanvg;
                }
                enableCanvg = _;
                return manager;
            },

            register: function(obj) {
                if (configs.hasOwnProperty(obj.id)) {
                    return;
                }
                configs[obj.id] = obj.value;
                return manager;
            },

            get: function(ids) {
                if (configs.hasOwnProperty(ids)) {
                    return configs[ids];
                }
            },

            getConfigs: function() {
                return configs;
            }
        };

        return manager;
    });
define('sap/viz/framework/common/util/NameColorUtils',['sap/viz/framework/common/util/ObjectUtils'],
    function Setup(ObjectUtils) {

        var configs = {};
        var colorRegex =
            /^ *(#[a-f0-9]{6}|#[a-f0-9]{3}|(rgb|rgba|hsl|hsla) *\([^)]*\)|AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGray|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGray|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGray|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gray|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGray|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGray|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGray|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen|DarkGrey|DarkSlateGrey|DimGrey|Grey|LightGrey|LightSlateGrey|SlateGrey) *$/i; //jshint ignore:line

        var namedColorUtils = {

            constructor: function() {
                return;
            },

            register: function(obj) {
                configs = ObjectUtils.extendByRepalceArray(true, null, configs, obj);
                return namedColorUtils;
            },
            convertColor: function(namedColor) {
                var colorValue = null;
                if (configs.hasOwnProperty(namedColor)) {
                    colorValue = configs[namedColor];
                }

                var retValue = null;
                if (colorValue) {
                    retValue = colorValue;
                } else if (colorRegex.test(namedColor)) {
                    retValue = namedColor;
                } else {
                    retValue = "#000000";
                }
                return retValue;
            }

        };

        return namedColorUtils;
    });
define('sap/viz/api/env',[
    'sap/viz/framework/core/env',
    'sap/viz/framework/core/config',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/log/Logger',
    'sap/viz/framework/common/lang/LangManager',
    'sap/viz/framework/common/util/NameColorUtils',
    'exports'
], function Setup(environment, config, TypeUtils, ObjectUtils, Logger, langManager, NameColorUtils) {
    var env =
        /**
         * sap.viz.api.env
         * @namespace sap.viz.api.env
         */
        {
            /**
             * Experimental
             * @function globalSettings
             * @memberof sap.viz.api.env
             * @static
             * @param {Object|undefined} globalSettings
             * If there is no input parameter, this is a get globalSettings function, otherwise this is a set 
             globalSettings function.
             * <pre>
             * Example:
             *      sap.viz.api.env.globalSettings({"enableCanvg": true, "enableCanvgConfig": {"viz/bar": {"max_svg": 
             2100, "max_canvas": 4000}}}); //Set globalSettings
             *      var globalSettings = sap.viz.api.env.globalSettings(); //Get globalSettings, it returns an cloned 
             object which contains globalSettings.
             * </pre>
             * @returns {Object}
             *                  return a copy of global settings
             */
            globalSettings: function(input) {
                var values;
                if (arguments.length === 1 && TypeUtils.isPlainObject(input)) {
                    values = ObjectUtils.clone(input);
                    if (values.enableCanvg) {
                        environment.initialize(values);
                    }
                    if (values.enableCanvgConfig && TypeUtils.isPlainObject(values.enableCanvgConfig)) {
                        for (var i in values.enableCanvgConfig) {
                            if (values.enableCanvgConfig.hasOwnProperty(i)) {
                                config.register({
                                    id: i,
                                    value: values.enableCanvgConfig[i]
                                });
                            }
                        }
                    }
                    if (values.colorMapping && TypeUtils.isPlainObject(values.colorMapping)){
                        NameColorUtils.register(values.colorMapping);
                    }
                } else if (arguments.length === 0) {
                    values = {};
                    if (environment.getEnvSetting() && environment.getEnvSetting().enableCanvg) {
                        values = {
                            enableCanvg: environment.getEnvSetting().enableCanvg
                        };
                    }
                    if (config.getConfigs()) {
                        var configs = {
                            enableCanvgConfig: config.getConfigs()
                        };
                        values = ObjectUtils.extend(true, {}, values, configs);
                    }
                    return values;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                }
            }
        };
    return env;
});
define('sap/viz/framework/common/format/UnitFormat',['sap/viz/framework/common/util/TypeUtils', 'sap/viz/framework/common/format/FormatManager',
        'sap/viz/framework/common/util/Constants'
    ],
    function Setup(TypeUtils, FormatManager, Constants) {
        var UnitFormat = {
            format: function(value, pattern, unitFomratType) {
                if (value === null || value === undefined) {
                    return null;
                }

                // Parse prefix and suffix
                var prefix, suffix;
                var PRE_MARKER = '[CVOM#PFIX]',
                    SUF_MARKER = '[CVOM#SFIX]';
                // MARKER_LEGNTH = PRE_MARKER.length and MARKER_LEGNTH = SUF_MARKER.length
                var MARKER_LEGNTH = 11;
                if (pattern) {
                    // parse out the prefix
                    var sIdx = pattern.indexOf(PRE_MARKER);
                    var eIdx = pattern.lastIndexOf(PRE_MARKER);
                    if (sIdx >= 0 && eIdx >= 0 && sIdx !== eIdx) {
                        prefix = pattern.substring(sIdx + MARKER_LEGNTH, eIdx);
                        pattern = pattern.substring(eIdx + MARKER_LEGNTH);
                    }

                    // parse out the suffix
                    sIdx = pattern.indexOf(SUF_MARKER);
                    eIdx = pattern.lastIndexOf(SUF_MARKER);
                    if (sIdx >= 0 && eIdx >= 0 && sIdx !== eIdx) {
                        suffix = pattern.substring(sIdx + MARKER_LEGNTH, eIdx);
                        pattern = pattern.substring(0, sIdx);
                    }
                }

                var CVOMNUMBERUNITPREFIX = '[CVOM#UNIT]';
                var tempValueLeft, tempValueRight, numLeft, result, formatFun, index, str, temp;
                if ((typeof pattern === 'string') &&
                    (pattern.charAt(pattern.length - 1) === 'u')) {
                    if ((typeof value === 'number')) {
                        // currently, the difference between financial units and metrics units is that
                        // we only change the G to B
                        numLeft = value;
                        tempValueRight = '';
                        formatFun = d3.format('s');
                        while (pattern.charAt(pattern.length - 1) === 'u') {
                            tempValueLeft = formatFun(numLeft);
                            if (isNaN(tempValueLeft.charAt(tempValueLeft.length - 1))) {
                                tempValueRight = tempValueLeft.substr(tempValueLeft.length - 1, 1) + tempValueRight;
                                if (unitFomratType !== Constants.UNITFORMATTYPE.METRICUNITS && tempValueRight ===
                                    'G') {
                                    tempValueRight = 'B';
                                }
                                tempValueLeft = tempValueLeft.substr(0, tempValueLeft.length - 1);
                            }
                            numLeft = parseFloat(tempValueLeft);
                            pattern = pattern.substring(0, pattern.length - 1);
                        }

                        numLeft = parseFloat(numLeft.toPrecision(8));
                        if ((Math.abs(numLeft) >= 1e12) ||
                            (Math.abs(numLeft) < 1e-3 && Math.abs(numLeft) > 0)) {
                            tempValueLeft = numLeft.toExponential();
                            index = tempValueLeft.indexOf('e');
                            tempValueRight = tempValueLeft.substring(index) + tempValueRight;
                            numLeft = parseFloat(tempValueLeft.substring(0, index));
                        }

                        tempValueLeft = UnitFormat.format(numLeft, pattern);
                        result = tempValueLeft + tempValueRight;

                    } else {
                        result = value;
                    }
                } else if ((typeof pattern === 'string') &&
                    (pattern.substring(pattern.length - CVOMNUMBERUNITPREFIX.length - 1, pattern.length - 1) ===
                        CVOMNUMBERUNITPREFIX)) {
                    // Example:
                    //  call UnitFormat.format(1.234567890123, "0.##########[CVOM#UNIT]k")
                    //  returns "0.0012345679K"
                    if (typeof value !== 'number') {
                        result = value;
                    } else {
                        var unit = pattern.charAt(pattern.length - 1).toUpperCase();
                        var validatedUnit = true,
                            unitIndicaterIdx = pattern.indexOf("["),
                            afterDotIdx = pattern.indexOf(".") + 1 || unitIndicaterIdx,
                            scale = {
                                'K': 3,
                                'M': 6,
                                'B': 9,
                                'T': 12
                            }[unit] || 0,
                            fixedLength = unitIndicaterIdx - afterDotIdx; // how many digits after decimal point to show

                        result = (value / Math.pow(10, scale)).toFixed(fixedLength) + unit;
                    }
                } else {
                    str = value.toString();
                    index = str.indexOf('e');
                    if ((typeof value === 'number') && (index >= 0)) {
                        result = str.substring(index);
                        temp = FormatManager.format(parseFloat(str.substring(0, index)), pattern);
                        result = temp + result;
                    } else {
                        result = FormatManager.format(value, pattern); // we always try to convert number to string
                    }
                }

                result = prefix ? prefix + result : result;
                result = suffix ? result + suffix : result;

                return result;
            }
        };
        UnitFormat.cache = {};
        return UnitFormat;
    });
define('sap/viz/api/env/Format',['sap/viz/framework/common/format/FormatManager',
        'sap/viz/framework/common/util/TypeUtils',
        'sap/viz/framework/common/format/UnitFormat',
        'exports'
    ],
    function Setup(FormatManager, TypeUtils, UnitFormat) {

        var format =
            /**
             * sap.viz.api.env.Format
             * @namespace sap.viz.api.env.Format
             */
            {
                /**
                 * Customize the global numeric formatter.
                 * If you set a formatter, it will replace the existing formatter.
                 * @function numericFormatter
                 * @memberof sap.viz.api.env.Format
                 * @static
                 * @param {Object} formatter
                 * {format: function(value, pattern) {...}}
                 *
                 *
                 * <pre>
                 * Example:
                 *      var customerFormatter = {
                 *          format : function(value, pattern) {
                 *              //add your codes here to convert number value to formatted string according to the 
                 pattern string
                 *              return formattedString;
                 *          }
                 *      };
                 *      sap.viz.api.env.Format.numericFormatter(customerFormatter);
                 * </pre>
                 */
                numericFormatter: function(formatter) {
                    return FormatManager.formatFunc(formatter);
                },

                /**
                 *
                 * Set Use default numeric formatter when usingDefaultFormatter is set to 'true'.
                 * @function useDefaultFormatter
                 * @memberof sap.viz.api.env.Format
                 * @static
                 * @param {Boolean}  usingDefaultFormatter when value is true, the formatted number displays as default
                  setting based on locale.
                 */
                useDefaultFormatter: function(usingDefaultFormatter) {
                    if (usingDefaultFormatter === true || usingDefaultFormatter === false) {
                        FormatManager.useDefaultFormatter(usingDefaultFormatter);
                    }
                    return FormatManager.useDefaultFormatter();

                },

                format: UnitFormat.format,
                /**
                 * The formatted value which tells the format manager to use its default formatter.
                 */
                DEFAULT_FORMATTED_VALUE: FormatManager.DEFAULT_FORMATTED_VALUE
            };
        return format;
    });
define('sap/viz/api/env/Language',[
    'sap/viz/framework/common/lang/LangManager',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/log/Logger',
    'exports'
], function Setup(langManager, TypeUtils, Logger) {
    var language =
        /**
         * sap.viz.api.env.Language
         * @namespace sap.viz.api.env.Language
         */
        {


            /**
             * Set current language
             * @function set
             * @memberof sap.viz.api.env.Language
             * @static
             * @param {String} language
             *                      language value like en, de, fr, zh_CN, ja, ru, pt
             * @param {Function} completeCallback
             *                      optional, function(language){...}
             * @param {Function} failedCallback
             *                      optional, function(language, errorMsg){...}
             * @return {sap.viz.api.env.Language} self
             *
             * @example <caption>Live Demo:<div class="livedemoFlag">
             <input style="display:none;" value="livedemo/api_Language_set.html"></caption>
             */
            set: function(language, completeCallback, failedCallback) {
                if (TypeUtils.isString(language) &&
                    (arguments.length === 1 ||
                        (arguments.length === 2 && TypeUtils.isFunction(completeCallback)) ||
                        (arguments.length === 3 && TypeUtils.isFunction(completeCallback) &&
                            TypeUtils.isFunction(failedCallback)))) {
                    langManager.apply(language, completeCallback, failedCallback);
                    return language;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                    return;
                }
            },

            /**
             * Get current language
             * @function get
             * @memberof sap.viz.api.env.Language
             * @static
             * @return {String} language value like en, de, fr, es, zh_CN, ja, ru, pt
             */
            get: function() {
                return langManager.current();
            },

            /**
             * Get error message in current language by error code
             * @function getErrorMessage
             * @memberof sap.viz.api.env.Language
             * @static
             * @param {Number} code
             * error code
             *
             * @return {String} error message
             *
             * @example sap.viz.api.env.Language.getErrorMessage(50000) =
                "Length of dimension cannot be zero."(locale == en);
             */
            getErrorMessage: function(code) {
                if (TypeUtils.isNumber(code)) {
                    return langManager.getLogMessageByID(code);
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                }
            }

        };
    return language;
});
define('sap/viz/api/env/Locale',[
    'sap/viz/framework/common/locale/Locale',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/log/Logger',
    'sap/viz/framework/common/lang/LangManager',
    'exports'
], function Setup(Locale, TypeUtils, Logger, langManager) {
    var locale =
        /**
         * sap.viz.api.env.Locale
         * @namespace sap.viz.api.env.Locale
         */
        {

            /**
             * Set current locale
             * @function set
             * @memberof sap.viz.api.env.Locale
             * @static
             * @param {String}
             *             locale value like en, de, fr, es, zh_CN, ja, ru, pt
             * @param {Function} callback
             *                      optional, function(){...}
             * @return {sap.viz.api.env.Locale} self
             * @example <caption>Live Demo:<div class="livedemoFlag">
             <input style="display:none;" value="livedemo/api_Lacale_set.html"></caption>
             */
            set: function(l, callback) {
                if (TypeUtils.isString(l) &&
                    (arguments.length === 1 ||
                        (arguments.length === 2 && TypeUtils.isFunction(callback)))) {
                    Locale.locale(l, callback);
                    return locale;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_LOCALE_NOT_CORRECT'));
                    return;
                }
            },

            /**
             * Get current locale
             * @function get
             * @memberof sap.viz.api.env.Locale
             * @static
             * @return {String} locale value like en, de, fr, zh_CN, ja, ru, pt
             */
            get: function() {
                return Locale.locale();
            }
        };
    return locale;
});
define('sap/viz/api/env/Resource',[
    'sap/viz/framework/common/template/TemplateManager',
    'sap/viz/framework/common/lang/LangManager',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/log/Logger',
    'exports'
], function(TemplateManager, langManager, TypeUtils, Logger) {

    function toArray(p) {
        return TypeUtils.isArray(p) ? p.slice() : [p];
    }

    function toItem(p) {
        return TypeUtils.isArray(p) ? p[0] : p;
    }

    var handlers = {
        'sap.viz.GeoManager.resourcePath': {
            path: "../../resources",
            setPath: function(path) {
                var GeoManager = sap && sap.viz && sap.viz.GeoManager;
                if (GeoManager) {
                    GeoManager.resourcePath(toItem(path));
                }
            }
        },
        'sap.viz.api.env.Template.loadPaths': {
            path: TemplateManager.loadPath,
            setPath: function(path) {
                TemplateManager.loadPath = toArray(path);
            }
        },
        'sap.viz.api.env.Language.loadPaths': {
            path: langManager.loadPath,
            setPath: function(path) {
                langManager.loadPath = toArray(path);
            }
        },
        // if the package ONLY includes sap.viz.sdk, only needs to set sdk language loadpath.
        'sap.viz.env.Language.loadPaths.sdk': {
            path: ["../../../resources/langs/sdk/"],
            setPath: function(path) {
                langManager.loadPath = toArray(path);
            }
        },
        'sap.viz.map.Resources': {
            path: ["../../resources"]
        }
    };
    //temporary to set sap.viz.extapi.* to sap.viz.api.*
    handlers['sap.viz.extapi.env.Template.loadPaths'] = handlers['sap.viz.api.env.Template.loadPaths'];
    handlers['sap.viz.extapi.env.Language.loadPaths'] = handlers['sap.viz.api.env.Language.loadPaths'];

    function setPath(key, path) {
        var handler = handlers[key] = handlers[key] || {};
        handler.path = path;
        if (handler.setPath) {
            handler.setPath(path);
        }
    }

    function getPath(key) {
        if (!key) {
            var allPath = {};
            for (var i in handlers) {
                if (handlers.hasOwnProperty(i)) {
                    var value = handlers[i] && handlers[i].path;
                    allPath[i] = TypeUtils.isArray(value) ? value.slice() : value;
                }
            }
            return allPath;
        }
        if (!handlers.hasOwnProperty(key)) {
            // explicitly null to keep backwards
            return null;
        }
        var handler = handlers[key];
        var path = handler && handler.path;
        return TypeUtils.isArray(path) ? path.slice() : path;
    }

    /**
     * sap.viz.api.env.Resource
     * @namespace sap.viz.api.env.Resource
     */
    var resource = {
        /**
         * Get/Set resource path
         * @function path
         * @memberof sap.viz.api.env.Resource
         * @static
         * @name  sap.viz.api.env.Resource.path
         * @param {String} key
         * @param {undefined|String|Array} [path]
         * If path is undefined, this is a get path by key function, otherwise this is a set path by key function.
         * Example:
         *      Resource.path('baseURL') is to get path by key.
         *      Resource.path('baseURL', 'testurl') is to set path by key.
         * If path is Array, keep a cloned Array in the internal map.
         * Predefined Resource Paths:
         * <pre>
         *     "sap.viz.api.env.Template.loadPaths":                       ["../../../resources/templates"]
         *     "sap.viz.api.env.Language.loadPaths":                       ["../../../resources/langs/"]
         *     "sap.viz.map.Resources" :                                   "../../resources"
         *
         * Example:
         *
         * Set path:
         * sap.viz.api.env.Resource.path("sap.viz.api.env.Template.loadPaths", ["../../../resources/templates"]);
         * sap.viz.api.env.Resource.path("sap.viz.api.env.Language.loadPaths", ["../../../resources/langs/"]);
         * sap.viz.api.env.Resource.path("sap.viz.map.Resources", "../../resources");
         *
         * Get path:
         * sap.viz.api.env.Resource.path("sap.viz.api.env.Template.loadPaths") =  ["../../../resources/templates"];
         * sap.viz.api.env.Resource.path("sap.viz.api.env.Language.loadPaths") =  ["../../../resources/langs/"];
         * sap.viz.api.env.Resource.path("sap.viz.map.Resources") = "../../resources";
         *
         * </pre>
         * Or you can use customized paths:
         *      sap.viz.api.env.Resource.path("baseURL", "testurl"), you can set any key-value pair which value should
          be a valid path.
         * @return {sap.viz.api.env.Resource|String|Array} return self when it is a set function and return String or 
          Array if it is a get function.
         */
        path: function() {
            if (arguments.length === 1 && TypeUtils.isString(arguments[0])) {
                return getPath(arguments[0]);
            } else if (arguments.length === 2 && TypeUtils.isString(arguments[0])) {
                setPath(arguments[0], arguments[1]);
            } else if (arguments.length === 0) {
                return getPath();
            } else {
                Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
            }
            return resource;
        }
    };

    return resource;
});
define('sap/viz/api/env/Template',[
    'sap/viz/framework/common/template/TemplateManager',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/log/Logger',
    'sap/viz/framework/common/lang/LangManager',
    'exports'
], function Setup(TemplateManager, TypeUtils, Logger, langManager) {
    var _listeners = {};
    var template =
        /**
         * sap.viz.api.env.Template
         * @namespace sap.viz.api.env.Template
         */
        {

            /**
             * Set current template's unique id
             * @function set
             * @memberof sap.viz.api.env.Template
             * @static
             * @param {String} id
             *                          tempalte's unique id
             * @param {Function} [completeCallback]
             *                           function(id){...} //parameter id is optional
             * @param {Function} [failedCallback]
             *                           function(id, errorMsg){...} //parameter id and errorMsg are optional
             * @return {sap.viz.api.env.Template} self
             *
             * @example <caption>Live Demo:<div class="livedemoFlag">
              <input style="display:none;" value="livedemo/api_Template_set.html"></caption>
             */
            set: function (id, completeCallback, failedCallback) {
                if (TypeUtils.isString(id) &&
                    (arguments.length === 1 ||
                        (arguments.length === 2 && TypeUtils.isFunction(completeCallback)) ||
                        (arguments.length === 3 && TypeUtils.isFunction(completeCallback) && TypeUtils.isFunction(
                            failedCallback)))) {
                    TemplateManager.apply(id, completeCallback, this, failedCallback);
                    return template;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                    return;
                }
            },

            /**
             * Get current template's unique id
             * @function get
             * @memberof sap.viz.api.env.Template
             * @static
             * @return {String} template's unique id
             *
             * Example:
             *      sap.viz.api.env.Template.set('flashy', completeCallback, failedCallback);//set template by id
             *      sap.viz.api.env.Template.get() = 'flashy';//Get the set template id.
             */
            get: function () {
                return TemplateManager.current().id;
            },

            /**
             *
             * @ignore
             */
            addListener: function (func) {
                if (arguments.length === 1 && TypeUtils.isFunction(func)) {
                    var listener = {
                        fn: func
                    };
                    TemplateManager.addListener(listener);
                    _listeners[func] = listener;
                    return template;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                    return;
                }
            },

            /**
             *
             * @ignore
             */
            removeListener: function (func) {
                if (arguments.length === 1 && TypeUtils.isFunction(func)) {
                    TemplateManager.removeListener(_listeners[func]);
                    delete _listeners[func];
                    return template;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                    return;
                }
            }
        };
    return template;
});
define('sap/viz/api/interaction/Behavior',[
    "sap/viz/framework/interaction/Behavior",
    "sap/viz/framework/interaction/ActionItem",
    'exports'
], function(SDKBehavior, ActionItem) {
    function Behavior(options) {
        this.id = options && options.id ? options.id : "";
        this._sdkBehavior = new SDKBehavior();
    }

    var pt = Behavior.prototype;
    /**
     * sap.viz.api.interaction.Behavior
     * @ignore
     * @namespace sap.viz.api.interaction.Behavior
     */


    /**
     * Add a new ActionItem according to input action option to behavior.
     *
     * @ignore
     * @function add
     * @memberof sap.viz.api.interaction.Behavior
     * @param {Object} actionOption Action option data, it should follow action option rule defined in spec.
     * <pre>
     * {
     *   "id": String,
     *   "declaredEvents": Array, //event names for any chart level events, which can be listened by external chart
     consumer
     *   "triggerEvent": Object, //The action trigger event
     *   "destroy": Function, //Destroy for lifecycle management
     *   "handler": Function, // Handler function
     * }
     * @this {Behavior}
     */
    pt.add = function(actionOption) {
        
        if(actionOption && actionOption.trigger && !actionOption.triggerEvent){
            actionOption.triggerEvent = actionOption.trigger;
        }
        var ai = new ActionItem(actionOption);
        this._sdkBehavior.addAction(actionOption.id, ai);
    };

    /**
     * Remove an ActionItem according to input action id.
     *
     * @ignore
     * @function remove
     * @memberof sap.viz.api.interaction.Behavior
     * @param {String} actionId the action's id.
     * @this {Behavior}
     */
    pt.remove = function(actionId) {
        this._sdkBehavior.removeActionById(actionId);
    };

    /**
     * Update an ActionItem.
     *
     * @ignore
     * @function update
     * @memberof sap.viz.api.interaction.Behavior
     * @param {String} actionId the action's id.
     * @param {Object} actionOption Action option data.
     * @this {Behavior}
     */
    pt.update = function(actionId, actionOption) {
        if(actionOption) {
            var actionItem = this._sdkBehavior.getActionById(actionId);
            if (actionItem) {
                if(actionOption.handler) {
                    actionItem.setHandler(actionOption.handler);
                }
                if(actionOption.triggerEvent) {
                    actionItem.setTrigger(actionOption.triggerEvent);
                }
            }
        }
    };

    return Behavior;
});
define('sap/viz/api/interaction',[
    "sap/viz/api/interaction/Behavior",
    'sap/viz/framework/interaction/BehaviorManager',
    'exports'
], function (Behavior, behaviorManager) {
    return {
        /**
         * sap.viz.api.interaction
         *
         * @ignore
         * @namespace sap.viz.api.interaction
         */
        /**
         * Add a behavior
         *
         * @ignore
         * @function add
         * @memberof sap.viz.api.interaction
         * @param {sap.viz.api.interaction.Behavior} behavior
         */
        "add": function (behavior) {
            if (behavior && behavior.id) {
                behaviorManager.register(behavior.id, behavior._sdkBehavior);
            }
        },
        /**
         * Remove a behavior with the specified id
         *
         * @ignore
         * @function remove
         * @memberof sap.viz.api.interaction
         * @param {String} behaviorId
         */
        "remove": function (behaviorId) {
            behaviorManager.unregister(behaviorId);
        },
        /**
         * Query behavior by its id, and return its copy. 
         *
         * @ignore
         * @function getBehaviorById
         * @memberof sap.viz.api.interaction
         * @param {String} behaviorId
         * @returns {sap.viz.api.interaction.Behavior} behavior or null
         */
        "getBehaviorById": function (behaviorId) {
            if (behaviorId && behaviorManager.has(behaviorId)) {
                var Bhvr = new Behavior({
                    id: behaviorId
                });
                Bhvr._sdkBehavior = behaviorManager.get(behaviorId).clone();
                return Bhvr;
            }
            return null;
        }
    };
});
define('sap/viz/api/log/Appender',['sap/viz/framework/common/log/Logger', 'exports'], function Setup(LOG) {

    /**
     * The appender class of sap logger.
     * @namespace sap.viz.api.log.Appender
     */
    var appender = {};

    /**
     * Console appender class, the log will displayed on browser console.
     * @member ConsoleAppender
     * @memberof sap.viz.api.log.Appender
     * @static
     */
    appender.ConsoleAppender = LOG.ConsoleAppender;

    /**
     *  DivAppender class, the log will be displayed on web page.
     * @member DivAppender
     * @memberof sap.viz.api.log.Appender
     * @static
     */
    appender.DivAppender = LOG.DivAppender;

    /**
     * AjaxAppender class, the log will be displayed on remote file.
     * @member AjaxAppender
     * @memberof sap.viz.api.log.Appender
     * @static
     */
    appender.AjaxAppender = LOG.AjaxAppender;

    return appender;
});
define('sap/viz/api/log/Layout',['sap/viz/framework/common/log/Logger', 'exports'], function Setup(LOG) {

    /**
     * The layout class of sap logger appender.
     * @namespace sap.viz.api.log.Layout
     */
    var layout = {};

    /**
     * Appender default layout Class.
     * @memberof sap.viz.api.log.Layout
     * @member DefaultLayout
     * @static
     */
    layout.DefaultLayout = LOG.DefaultLayout;

    /**
     * Appender html layout Class.
     * @memberof sap.viz.api.log.Layout
     * @member HTMLLayout
     * @static
     */
    layout.HTMLLayout = LOG.HTMLLayout;

    /**
     * Appender xml layout Class.
     * @memberof sap.viz.api.log.Layout
     * @member XMLLayout
     * @static
     */
    layout.XMLLayout = LOG.XMLLayout;

    /**
     * Appender JSON layout Class.
     * @memberof sap.viz.api.log.Layout
     * @member JSONLayout
     * @static
     */
    layout.JSONLayout = LOG.JSONLayout;


    return layout;


});
define('sap/viz/api/log/Logger',['sap/viz/framework/common/log/Logger', 'exports'], function Setup(LOG) {
    /**
     * sap.viz.api.log.Logger
     * @namespace sap.viz.api.log.Logger
     */
    var logger = {};
    /**
     * @ignore
     */
    logger.LEVEL = {};

    /**
     * Log level constant, OFF.
     * @constant LEVEL.OFF
     * @memberof sap.viz.api.log.Logger
     */
    logger.LEVEL.OFF = LOG.LEVEL.NO;

    /**
     * Log level constant, TRACE
     * @constant LEVEL.TRACE
     * @memberof sap.viz.api.log.Logger
     */
    logger.LEVEL.TRACE = LOG.LEVEL.TRACE;

    /**
     * Log level constant, DEBUG
     * @constant LEVEL.DEBUG
     * @memberof sap.viz.api.log.Logger
     */
    logger.LEVEL.DEBUG = LOG.LEVEL.DEBUG;

    /**
     * Log level constant, INFO.
     * @constant LEVEL.INFO
     * @memberof sap.viz.api.log.Logger
     */
    logger.LEVEL.INFO = LOG.LEVEL.INFO;

    /**
     * Log level constant, WARN.
     * @constant LEVEL.WARN
     * @memberof sap.viz.api.log.Logger
     */
    logger.LEVEL.WARN = LOG.LEVEL.WARN;

    /**
     * Log level constant, ERROR.
     * @constant LEVEL.ERROR
     * @memberof sap.viz.api.log.Logger
     */
    logger.LEVEL.ERROR = LOG.LEVEL.ERROR;

    /** 
     * Get or set log appenders.
     * @function appenders
     * @memberof sap.viz.api.log.Logger
     * @static
     * @param {Array} value - Array of the instances of sap.viz.api.log.Appender.#Appender
     * <pre>
     * {
     *   The instancecan be
     *   sap.viz.api.log.Appender.ConsoleAppender
     *   sap.viz.api.log.Appender.DivAppender
     *   sap.viz.api.log.Appender.AjaxAppender
     * }
     * </pre>
     * @returns {Array}  [sap.viz.api.log.ConsoleAppender, sap.viz.api.log.DivAppender].
     */
    logger.appenders = function(value) {
        if (arguments.length > 0) { // set appenders
            for (var i = 0; i < value.length; i++) {
                LOG.addAppender(value[i]);
            }
            return this;
        }
        return LOG.getAppenders();
    };

    /**
     *    Get or set log level.
     * @function level
     * @memberof sap.viz.api.log.Logger
     * @static
     * @param {String} value - sap.viz.log.LEVEL constant.
     * <pre>
     * {
     *   The value can be
     *   sap.viz.log.LEVEL.NO
     *   sap.viz.log.LEVEL.TRACE
     *   sap.viz.log.LEVEL.DEBUG
     *   sap.viz.log.LEVEL.INFO
     *   sap.viz.log.LEVEL.WARN
     *   sap.viz.log.LEVEL.ERROR
     * }
     * </pre>
     * @returns {String} sap.viz.log.LEVEL constant.
     */

    logger.level = function(value) {
        if (arguments.length > 0) {
            LOG.level = value;
        } else {
            return LOG.level;
        }
    };

    return logger;
});
define('sap/viz/api/serialization',['sap/viz/migrate/MigrationTool',
    'sap/viz/migrate/bindingMigrator',
    'exports'
    ], function(MigrationTool, bindingMigrator) {

    var serialization =

        /**
         * sap.viz.api.serialization
         * @ignore
         * @namespace sap.viz.api.serialization
         */
        {
            /**
             * Migrate the serialized chart to the latest version.
             * @ignore
             * @function migrate
             * @memberof sap.viz.api.serialization
             * @static
             * @param {Object} json
             * <pre>
             * serialized chart in json format
             * </pre>
             * @returns {Object} the migrated chart in json format
             **/
            migrate: function(json) {
                return MigrationTool.migrate(json);
            },
            feedsIdToBindingId: function(chartType, feedsId) {
                if(!chartType || !feedsId){
                    return null;
                }            
                var feedingMap = bindingMigrator.getFeedingMap();                
                if(!bindingMigrator.isSupportedChart(chartType)){
                    return null;
                }
                if(!feedingMap[feedsId]){
                    return null;
                }else{
                    return feedingMap[feedsId];
                }
            }            
        };

    return serialization;
});
define('sap/viz/framework/common/lang/langManager',[
    'sap/viz/framework/common/util/FunctionUtils',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/lang/LangMessageUtil',
    'sap/viz/framework/common/util/ResourceLoader',
    'exports'
], function(FunctionUtils, ObjectUtils, LangMessageUtil, ResourceLoader) {

    var listeners = [];
    var languageSetting = {};

    var placeHolder = 'language';
    languageSetting[placeHolder] = {};

    /**
     * substitute the localized string for resource bundle.
     * @private
     * @example
     *      substitute('The ID {0} is not a valid number', 'NOT_NUMBER')
     * @returns {String} replacedString
     */
    var substitute = function(str /*String*/ , rest /*Array*/ ) {
        if (str == null) {
            return '';
        }

        if (!rest) {
            rest = [];
        }
        var len = rest.length;
        for (var i = 0; i < len; i++) {
            str = str.replace(new RegExp("\\{" + i + "\\}", "g"), rest[i]);
        }
        return str;
    };

    var manager = {
        /** @lends sap.viz.lang.langManager */

        /**
         * The file paths of language folder.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead. You can use sap.viz.api.env.Resource.path instead.
         * @default ["../../../resources/langs/charts/", "../../../resources/langs/sdk"], by default it contains charts
           and sdk language resource.
         * if only contains sap.viz.skd, only reset loadPath for sdk.
         */
        loadPath: [
            "../../../resources/langs/charts/",
            "../../../resources/langs/sdk/"
        ],

        /**
         * File name template of the language resource. ${lang} can be used in the template to represent the language
           name.
         * @default "language_${lang}.js"
         */
        fileNameTemplate: 'language_${lang}.js',

        /**
         * Alias language name mapping. The mapper name will not be tried at all. The mapped name will be used instead.
         * @type Object?
         */
        alias: {
            "ar_AE": "ar",
            "ar_EG": "ar",
            "ar_SA": "ar",

            "bg_BG": "bg",

            "ca_ES": "ca",

            "cs_CZ": "cs",

            "da_DK": "da",

            "de_CH": "de",
            "de_AT": "de",
            "de_BE": "de",
            "de_LU": "de",
            "de_DE": "de",

            "el_CY": "el",
            "el_GR": "el",

            "en_AU": "en",
            "en_CA": "en",
            "en_GB": "en",
            "en_HK": "en",
            "en_ID": "en",
            "en_IE": "en",
            "en_IN": "en",
            "en_IS": "en",
            "en_MY": "en",
            "en_NZ": "en",
            "en_PH": "en",
            "en_SG": "en",
            "en_US": "en",
            "en_ZA": "en",

            "es_AR": "es",
            "es_BO": "es",
            "es_CL": "es",
            "es_CO": "es",
            "es_ES": "es",
            "es_MX": "es",
            "es_PE": "es",
            "es_UY": "es",
            "es_VE": "es",

            "et_EE": "et",

            "fa_IR": "fa",

            "fi_FI": "fi",

            "fr_BE": "fr",
            "fr_CA": "fr",
            "fr_CH": "fr",
            "fr_FR": "fr",
            "fr_LU": "fr",

            "he_IL": "iw",

            "hi_IN": "hi",

            "hr_HR": "hr",

            "hu_HU": "hu",

            "id_ID": "id",

            "it_CH": "it",
            "it_IT": "it",

            "ja_JP": "ja",

            "ko_KR": "ko",

            "lt_LT": "lt",

            "lv_LV": "lv",

            "nb_NO": "nb",

            "nl_BE": "nl",
            "nl_NL": "nl",

            "nn_NO": "nn",

            "pl_PL": "pl",

            "pt_BR": "pt",
            "pt_PT": "pt",

            "ro_RO": "ro",

            "ru_KZ": "ru",
            "ru_RU": "ru",
            "ru_UA": "ru",

            "sh_ME": "sr",
            "sh_RS": "sr",

            "sk_SK": "sk",

            "sl_SL": "sl",
            "sl_SI": "sl",

            "sv_SE": "sv",

            "th_TH": "th",

            "tr_CY": "tk",
            "tr_TR": "tk",

            "uk_UA": "uk",

            "vi_VI": "vi",
            "vi_VN": "vi",

            "zf_TW": "zh_TW",
            "zh_HK": "zh_CN"
        },

        /**
         * Special degrade rules. By default, "xx_yy" degrads to "xx", and "xx" degrads to the default language "en".
         */
        //degrade: {},

        /**
         * Default language
         * If a specific language does not exists, will degrade to this default language.
         * @default 'en'
         */
        defaultLanguage: 'en',

        /**
         * Current language
         */
        currentLanguage: 'en',

        /**
         * Return current applied language Id.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead.
         * @returns {String}
         */
        current: function() {
            return manager.currentLanguage;
        },

        /**
         * Register new language.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead. You ca nuse sap.viz.extapi.env.Language.
           register instead.
         * @param {Object...}
         *
         * @returns {Object} {@link sap.viz.lang.langManager}
         */
        register: function(obj) {
            languageSetting[obj.id] = ObjectUtils.extend(true, languageSetting[obj.id], obj.value);
            return manager;
        },

        /**
         * Apply(switch) language.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead. You ca nuse sap.viz.api.env.Language.set instead.
         * @param {String}
         *          id the language id
         * @param {Function}
         *          [callback] the call back function.
         *
         * @returns {Object} {@link sap.viz.lang.langManager}
         */
        apply: function(id, callback, failedCallback) {
            var aliasId = alias(id);
            var errMsgs = [];

            function onPathComplete(path, effectiveId, err) {
                var errMsg;

                if (!effectiveId) {
                    errMsg = 'Failed to load language ' + id + ' from path ' + path + '.';
                } else if (aliasId !== effectiveId) {
                    errMsg = 'Language ' + id + ' is degraded to ' + effectiveId + ' for path ' + path + '.';
                }

                if (errMsg) {
                    errMsgs.push(errMsg);
                    try {
                        FunctionUtils.error(errMsg);
                    } catch (e) {
                        // Not a fatal error.
                    }
                }
            }

            function onComplete() {
                takeinDefQueue();

                if (errMsgs.length && failedCallback) {
                    failedCallback(id, errMsgs.join('\n'));
                }

                // Honor user's input
                manager.currentLanguage = id;

                // Find the currently effective language resource and pass it to listeners
                id = aliasId;
                var language = languageSetting[id];
                while (!language) {
                    id = degrade(id);
                    language = id && languageSetting[id];
                }

                for (var i = 0; i < listeners.length; ++i) {
                    var listener = listeners[i];
                    listener.fn.apply(listener.scope, [language]);
                }

                // fail to load language will be handled by failedCallback, 
                if (callback) {
                    callback();
                }
            }

            if (aliasId) {
                ResourceLoader.loadResource({
                    id: aliasId,
                    paths: manager.loadPath,
                    getUrl: getUrl,
                    degrade: degrade,
                    onPathComplete: onPathComplete,
                    onComplete: onComplete
                });
            } else {
                takeinDefQueue();
            }
            return manager;
        },

        /**
         * Get globalization value.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead. You ca nuse sap.viz.api.env.Language.get instead.
         * @param {String}
         *       id of labels
         *
         * @returns {String}  globalization value
         */
        get: function(ids, lang) {
            var id = alias(lang || manager.currentLanguage);
            var language = languageSetting[id];
            var result = language && language[ids];

            while (id && id !== placeHolder && typeof result !== 'string') {
                id = degrade(id);
                language = id && languageSetting[id];
                result = language && language[ids];
            }

            return result || '';
        },

        /**
         * Get log id and globalization log message.
         * @ignore
         *
         * @param {...Object}
         *       key of log message
         *       variables in the log message
         * @example
         *      // return Invalid feeding: the correct number  is 2.
         *      getLogMessage('IDS_ERROR_INVALID_FEEDING_NUMBER', 2);
         *
         * @returns {String}  log id and globalization log message.
         */
        getLogMessage: function(ids) {
            var num = LangMessageUtil.getNumberByIDS(ids);
            var message = manager.get(ids);

            // Substitute the resouce boundle
            // e.g: ('Invalid feeding: the correct number  is {0}.', '2')
            if (arguments.length > 1) {
                message = substitute(message, Array.prototype.slice.call(arguments, 1));
            }

            return (num ? '[' + num + '] - ' : '') + message;
        },

        /**
         * Get log globalization message value by ID.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead.
         * @param {Number}
         *       message code.
         *
         * @returns {String}  globalization log message value
         */
        getLogMessageByID: function(num) {
            var ids = LangMessageUtil.getIDSByNumber(num);
            if (!ids) {
                FunctionUtils.error('Not exist the log ID {0}.', num);
            }
            return manager.get(ids);
        },

        /**
         * Add language folder path before load language file if the language folder is not default.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead. You can use sap.viz.api.env.Resource.path instead.
         * @param {String}
         *       folder of language files.
         *
         * @returns {Arrary}  all folders of language files.
         */
        addLanguageFolder: function(folder) {
            manager.loadPath.push(folder);
            return manager.loadPath;
        },

        /**
         * Add a listener which will be executed when current language is changed.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead. You ca nuse sap.viz.extapi.env.Language.
           addListener instead.
         * @param {Object}
         *          listener
         * @param {Function}
         *          listener.fn the listener function
         * @param {Object}
         *          listener.scope the "this" object in the listener function
         *
         * @returns {Object} {@link sap.viz.lang.langManager}
         */
        addListener: function(listener) {
            listeners.push(listener);
            return manager;
        },

        /**
         * Remove the listener.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future,
           please consider to use new version of this API instead. You ca nuse sap.viz.extapi.env.Language.
           removeListener instead.
         * @param {Object} listener
         *          the listener reference
         *
         * @returns {Object} {@link sap.viz.lang.langManager}
         */
        removeListener: function(listener) {
            var index = listeners.indexOf(listener);
            if (index >= 0) {
                listeners.splice(index, 1);
            }
            return manager;
        }
    };

    function normalizeLangName(id) {
        return String(id).replace(/-/g, '_');
    }

    function alias(id) {
        id = normalizeLangName(id);
        return (manager.alias && manager.alias[id]) || id;
    }

    function degrade(id) {
        var degradeMap = manager.degrade;
        if (degradeMap && degradeMap[id]) {
            return degradeMap[id];
        }

        var matched = String(id).match(/^([a-zA-Z]+)([_-][a-zA-Z]+)?$/);
        if (matched) {
            var mainLang = matched[1].toLowerCase();

            if (matched[2]) {
                return mainLang;
            } else if (mainLang !== placeHolder) {
                return placeHolder;
            }
        }
        return null;
    }

    function getUrl(path, id) {
        path = /\/$/.test(path) ? path : path + '/';
        var fileName = id === placeHolder ?
                placeHolder + '.js' :
                manager.fileNameTemplate.replace(/\$\{lang\}/gi, id);
        return path + fileName;
    }

    //take in register queue
    function takeinDefQueue() {
        var langs = sap && sap.viz && sap.viz.extapi && sap.viz.extapi.env &&
            sap.viz.extapi.env.language && sap.viz.extapi.env.language._queue;

        if (langs) {
            for (var i = 0; i < langs.length; ++i) {
                manager.register(langs[i]);
            }
            // For multiple require contexts to work.
            //sap.viz.extapi.manifest._queue.language.registerList = [];
        }
    }

    takeinDefQueue();
    return manager;
});

define('sap/viz/framework/flow/FlowConstant',[], function() {

    var flowConstant = {
        CONST_DEFAULT_TYPE:'DIV',
        CONST_DEFAULT_ELEMENT_PATH:'root.modules.main.modules.plot',
        CONST_SVG_TYPE:'SVG',
        CONST_POSITION_LEFT:'left',
        CONST_POSITION_RIGHT:'right',
        CONST_POSITION_TOP:'top',
        CONST_POSITION_BOTTOM:'bottom',
        CONST_POSITION_CENTER:'center',
        CONST_TITLE_NAME:'sap.viz.modules.title',
        CONST_LEGEND_NAME:'sap.viz.modules.legend.common',
        CONST_LEGENDS_NAME: 'sap.viz.modules.legend',
        CONST_LEGENDS_MODULE_KEY: 'legends',
        CONST_INTERACTION_NAME: 'sap.viz.modules.controller.interaction'
    };

    return  flowConstant;

});

define('sap/viz/framework/flow/Flow',['sap/viz/framework/flow/FlowConstant', 'sap/viz/framework/common/util/TypeUtils',
 'sap/viz/framework/common/lang/LangManager', 'sap/viz/framework/common/util/FunctionUtils'
], function (FlowConstant,
    TypeUtils, langManager, Logger) {
    /* jshint ignore:start */
    /**
     * @constructer
     * @param {Object} options
     * {
     *  id: flow id,
     *  name: flow name,
     *  type: flow type, currently we have: Single DIV Flow, Border SVG Flow, Border DIV Flow.
     *  dataModel: dataModel supported for the flow, currently we have: sap.viz.api.data.CrosstableDataset" , "sap.viz.api.data.FlatTableDataset". Default is none which means no specific data model defined.
     * }
     * @param {String}flowType Flow type, like div,svg...
     */
    /* jshint ignore:end */
    var supportedType = ["BorderSVGFlow", "BorderDIVFlow", "SVG", "DIV"];

    var flow = function (options, flowType) {
        if (supportedType.indexOf(flowType) < 0) {
            Logger.error(langManager.getLogMessage('IDS_ERROR_CAN_NOT_FIND_CATEGORY'));
        }
        this.elements = [];
        this.type = flowType;
        this.id = options ? options.id : null;
        this.name = options ? options.name : null;
        this.dataModel = options.dataModel;
    };


    /**
     *
     * sample parameters:
     * element: plotElement,
     * propertyCategory: "plot",
     * place: "center" //Other supported place top, bottom, left, right
     * });
     */

    flow.prototype.addElement = function (parameterObject) {
        if (parameterObject != null) {
            if (parameterObject.element) {
                if (!parameterObject.place) {
                    parameterObject.place = 'center';
                }
                if(!parameterObject.propertyCategory){
                    parameterObject.propertyCategory = 'plotArea';
                }
                parameterObject.id = parameterObject.propertyCategory;
                this.elements.push(parameterObject);
            }
        }
    };

    return flow;
});
define('sap/viz/framework/flow/Element',[
        'sap/viz/framework/common/util/ObjectUtils',
        'sap/viz/framework/common/util/TypeUtils',
        'sap/viz/framework/common/util/FunctionUtils',
        'sap/viz/framework/common/lang/langManager',
        'sap/viz/framework/common/util/oo'
    ],
    function(ObjectUtils, TypeUtils, Logger, langManager, oo) {
        /* jshint ignore:start */
        /**
         * @param {Object} options
         * {
         *  id: element id,
         *  name: element name,
         *  fn: element function base object.//See more on basic module spec, fn needs to implement each function of the basic module.
         * }
         */
        /* jshint ignore:end */
        var Element = function(options) {

            this.elementDefinition = {};
            for (var i in options) {
                if (options.hasOwnProperty(i)) {
                    //type in manifest is not same with this, we don't need to change the value of this key.
                    if (i !== 'type') {
                        this.elementDefinition[i] = options[i];
                    }
                }

            }
            this.bindingDefinition = [];
            this.properties = [];
            this.implementFn = null;
            this.id = options ? options.id : null;
            if (options && options.fn) {
                this.implementFn = options.fn;
            }

        };

        Element.prototype.addFeed = function(feed) {
            //TODO backward
            //  var binding = migrateUtil.feedToBind(feed);
            this.addBindingDefition(feed);
        };


        var migrateFeedingToBinding = function(feeding) {
            var binding = {};
            for (var i in feeding) {
                if (feeding.hasOwnProperty(i)) {
                    if (i === "type" && feeding[i] === "Dimension") {
                        binding.role = "layout";
                        binding.scaleType = "colorScale";
                        binding.acceptMND = true;
                    } else if (i === "type" && feeding[i] === "Measure") {
                        binding.role = "layout";
                        binding.scaleType = "valueScale";
                        binding.acceptMND = false;
                    }
                    binding[i] = feeding[i];
                }
            }
            return binding;
        };

        Element.prototype.addBindingDefition = function(binds) {
            if (TypeUtils.isArray(binds)) {
                var len = binds.length;
                for (var i = 0; i < len; i++) {
                    this.bindingDefinition.push(migrateFeedingToBinding(binds[i]));
                }
            } else {
                this.bindingDefinition.push(migrateFeedingToBinding(binds));
            }

        };
        var checkObjectValid = function(Obj, key) {
            if (key !== undefined) {
                var keyLength = key.length;
                for (var i = 0; i < keyLength; i++) {
                    if (Obj[key[i]] === undefined) {
                        return false;
                    }
                }
            }
            return true;
        };

        /*
         * Properties sample:
         * {
         * 'properties' : {
         * 'tooltip' : {
         *   'name' : 'tooltip',
         *   'supportedValueType' : 'Object',
         *   'supportedValues' : {
         *   'enabled' : {
         *     'name' : 'enabled',
         *     'supportedValueType' : 'Boolean',
         *     'defaultValue' : true,
         *     'description' : 'Set enabled/disabled tooltip.'
         *     }
         *    }
         *   }
         *  }
         * }
         */
        var propertyObjectKey = ['name', 'type']; //must have properties.
        var createPropertyObject = function(propertyObject) {
            //deep copy the propertyObject.
            var inputObj = ObjectUtils.clone(propertyObject);
            var returnObj = {};
            returnObj.metadata = {};
            //parse input to output;
            for (var i in inputObj) {
                if (inputObj.hasOwnProperty(i)) {
                    returnObj[i] = inputObj[i];
                }

            }

            returnObj.metadata.type = inputObj.type;
            if(inputObj.supportedValueType){
                returnObj.metadata.supportedValueType = inputObj.supportedValueType;
            }else{
                returnObj.metadata.supportedValueType = inputObj.type;
            }

            return returnObj;
        };
        /* global requirejs: true */
        var extendImplement = function(type, extendJson) {
            var implementFn;
            if (requirejs && requirejs.s && requirejs.s.contexts && requirejs.s.contexts._) {
                var nextTickBak = requirejs.s.contexts._.nextTick;
                requirejs.s.contexts._.nextTick = function(fn) {
                    fn();
                };
                require(['sap/viz/chart/components/UIComponent'], function(Base) {
                    if (Base) {
                        var superMethod = Base.prototype;
                        implementFn = function() {
                            implementFn.superclass.constructor.apply(this, arguments);
                        };
                        oo.extend(implementFn, Base);
                        //change to BaseGraphic
                        for (var i in extendJson) {
                            if (extendJson.hasOwnProperty(i)) {
                                implementFn.prototype[i] = extendJson[i];
                                implementFn[i] = extendJson[i];
                            }


                        }
                        implementFn.prototype._manifest = {};
                        //ADD colorPalette as a default property.
                        implementFn._properties = {
                            "colorPalette": null
                        };
                        return implementFn;
                    } else {
                        Logger.error(langManager.getLogMessage('IDS_ERROR_CAN_NOT_FIND_CATEGORY'));
                    }
                });

                requirejs.s.contexts._.nextTick = nextTickBak;
            }


            return implementFn;
            // if (baseElements[type]) {
            //     var superMethod = baseElements[type].prototype;
            //     var implementFn = function () {
            //         implementFn.superclass.constructor.apply(this, arguments);
            //     };
            //     oo.extend(implementFn, baseElements[type]);
            //     //change to BaseGraphic
            //     for (var i in extendJson) {
            //         if (extendJson.hasOwnProperty(i)) {
            //             implementFn.prototype[i] = extendJson[i];
            //             implementFn[i] = extendJson[i];
            //         }


            //     }
            //     implementFn.prototype._manifest = {};
            //     return implementFn;
            // } else {
            //     Logger.error(langManager.getLogMessage('IDS_ERROR_CAN_NOT_FIND_CATEGORY'));
            // }
        };

        /**
         *
         * @param {String} path Base element path.
         * @param {Object} extendJson Override functions object.
         */
        Element.prototype.implement = function(type, extendJson) {

            var fn = extendImplement(type, extendJson);
            this.implementFn = fn;
        };

        /**
         * @param {Object}propertyObject
         * {
         *   name:propName,
         *   type:String, property type, can be: Obejct, String, Number, ...
         *   defaultValue: default property values
         * }
         *
         */
        Element.prototype.addProperty = function(propertyObject) {
            if (checkObjectValid(propertyObject, propertyObjectKey)) {
                this.properties[propertyObject.name] = createPropertyObject(propertyObject);

            } else {
                Logger.error(langManager.getLogMessage('IDS_ERROR_CAN_NOT_FIND_CATEGORY'));
            }
        };

        return Element;
    });
define('sap/viz/framework/flow/ChartViewFactory',['sap/viz/framework/common/util/oo', 'sap/viz/framework/core/ChartViewRegistry',
        'sap/viz/framework/common/util/FunctionUtils', 'sap/viz/framework/common/lang/LangManager',
        'sap/viz/framework/common/util/Constants', 'sap/viz/framework/common/util/NameColorUtils',
        'sap/viz/framework/common/util/ObjectUtils'
    ],
    function(oo, ChartViewRegistry, Logger, LangManager, Constants, NameColorUtils, ObjectUtils) {

        var ChartViewFactory = {};
        var moduleFactory = function(module, propertyCategory, place, id, name, renderTo) {
            var legendIndex = 1;
            if (module.id === "sap.viz.chart.elements.Title" || module.id === "sap.viz.modules.title") {
                return {
                    id: 'title',
                    place: place
                };
            } else if (module.id === "sap.viz.chart.elements.ColorLegend" || module.id === "sap.viz.modules.legend") {
                if (module.dimensionIndex) {
                    legendIndex = module.dimensionIndex[0];
                }
                return {
                    id: 'legend',
                    place: place
                };
            }
            var newModule = function() {
                newModule.superclass.constructor.apply(this, arguments);
                if (module.properties) {
                    var me = this;
                    module.properties.map(function(property) {
                        // var name = property.name;
                        var obj = {};
                        if (propertyCategory) {
                            obj[propertyCategory] = {};
                            obj[propertyCategory][property.name] = property.defaultValue || null;
                            this._runtime._propertyMgr.add(obj);
                        } else {
                            obj[property.name] = property.defaultValue || null;
                            me._properties.add(obj);
                        }

                    });
                }
                if (module.implementFn && module.implementFn._properties) {
                    var propertyList = {};
                    propertyList[propertyCategory] = module.implementFn._properties;
                    this._runtime._propertyMgr.add(propertyList);
                }
                if (place && place !== 'center') {
                    var placeProp = {};
                    placeProp['layout'] = {
                        position: place
                    };

                    this._properties.add(placeProp);
                }
                var that = this;
                this._originalProperties = this._properties;
                this._properties = null;
                //= this._properties, _dispatch = this._dispatch, _feeds = this._manifest.feeds
                //Backward compatibility.
                this._manifest = {};
                Object.defineProperty(this, "_colorPalette", {
                    get: function() {
                        return that.colorPalette();
                    }
                });
                Object.defineProperty(this, "_dispatch", {
                    get: function() {
                        return that.dispatch();
                    }
                });
                Object.defineProperty(this, "_data", {
                    get: function() {
                        return that.data();
                    }
                });
                Object.defineProperty(this, "_width", {
                    get: function() {
                        return that.width();
                    }
                });
                Object.defineProperty(this, "_height", {
                    get: function() {
                        return that.height();
                    }
                });
                Object.defineProperty(this, "_properties", {
                    get: function() {
                        return that.properties();
                    }
                });
                Object.defineProperty(this._manifest, "feeds", {
                    get: function() {
                        return that.feeds();
                    }
                });
                Object.defineProperty(this, "_props", {
                    get: function() {
                        return that.properties();
                    }
                });
            };
            if (module.implementFn) {
                oo.extend(newModule, module.implementFn);
            }
            newModule.id = module.id;
            newModule.name = module.name;

            newModule.prototype.dispatch = function() {
                return module.implementFn._dispatch;
            };
            newModule.prototype.getPreferredSize = function(measureInfo) {
                return {
                    maxWidth: 0,
                    maxHeight: 0,
                    minWidth: 0,
                    minHeight: 0,
                    width: measureInfo.width,
                    height: measureInfo.height
                };
            };
            newModule.prototype.feeds = function() {
                return module.bindingDefinition;
            };
            newModule.prototype.data = function() {
                return {
                    dataset: this._rawData
                };
            };

            newModule.prototype.renderTo = function() {
                return renderTo;
            };
            newModule.prototype.setRawData = function(rawData) {
                this._rawData = rawData.dataModel._rawData;
                this._originalData = rawData;
                this._data = this._rawData;
            };

            newModule.prototype.width = function() {
                return this._size.width;
            };
            newModule.prototype.height = function() {
                return this._size.height;
            };
            newModule.prototype.colorPalette = function() {
                if (this._runtime._propertyMgr.get('plotArea.colorPalette')) {
                    var colorPalette = ObjectUtils.clone(this._runtime._propertyMgr.get('plotArea.colorPalette'));
                    for (var index = 0, len = colorPalette.length; index < len; index++) {
                        colorPalette[index] = NameColorUtils.convertColor(colorPalette[index]);
                    }
                    return colorPalette;
                }
                if (!module.implementFn._colorPalette) {
                    if (this._originalData && this._originalData.scales) {
                        for (var i in module.bindingDefinition) {
                            if (module.bindingDefinition.hasOwnProperty(i)) {
                                if (module.bindingDefinition[i].scaleType === "colorScale") {
                                    if (this._originalData.scales[module.bindingDefinition[i].id]) {
                                        return this._originalData.scales[module.bindingDefinition[i].id]._range;
                                    } else {
                                        return Constants.COLOR.SAPColorSingleAxis;
                                    }

                                }
                            }
                        }
                    }
                }
                return module.implementFn._colorPalette;
            };
            newModule.prototype.properties = function() {
                if (this._runtime && this._runtime._propertyMgr) {
                    var props = this._runtime._propertyMgr.get(propertyCategory);
                    if (!props) {
                        props = this._runtime._propertyMgr.get(module.id);
                    }
                    return props;
                }

                return null;
            };


            if (module.bindingDefinition) {
                for (var i in module.bindingDefinition) {
                    if (module.bindingDefinition[i].aaIndex === legendIndex) {
                        module.bindingDefinition[i].isLegendBinding = true;

                    } else {
                        module.bindingDefinition[i].scaleType = 'categoryScale';
                    }
                }
            }

            if (module.bindingDefinition) {
                ChartViewRegistry.registerBind(id, module.bindingDefinition, "extension", name);
                ChartViewRegistry.registerRenderType(id, id);
            }
            return newModule;
        };

        /* global requirejs: true */
        ChartViewFactory.createChartView = function(viz) {



            if (requirejs && requirejs.s && requirejs.s.contexts && requirejs.s.contexts._) {
                var nextTickBak = requirejs.s.contexts._.nextTick;
                requirejs.s.contexts._.nextTick = function(fn) {
                    fn();
                };
                var newChartView;
                require(['sap/viz/chart/views/ChartView'], function(ChartView) {
                    if (ChartView) {
                        newChartView = function() {
                            this._dataItem = [];
                            newChartView.superclass.constructor.apply(this, arguments);
                        };
                        var childrens = [];
                        childrens = viz.elements.map(function(child) {
                            return moduleFactory(child.element, child.propertyCategory, child.place, viz.id,
                                viz.name,
                                viz.type);
                        });

                        oo.extend(newChartView, ChartView);

                        newChartView.prototype._createChildren = function() {
                            var that = this;
                            var index = 2;
                            childrens.map(function(child) {
                                if (child.id === 'title') {
                                    that._createTitle(child.place);
                                } else if (child.id === 'legend') {
                                    that._createLegendGroup(child.place);
                                } else {
                                    var moduleInstance = new child(that.runtime(), {
                                        name: child.id
                                    });
                                    that.setChild(child.id, moduleInstance, {
                                        priority: index++
                                    });
                                    if (moduleInstance.feeds) {
                                        that._dataItem = parseId(moduleInstance.feeds());
                                    }
                                    if (moduleInstance.colorPalette) {
                                        Object.defineProperty(that, "_customerColorPalette", {
                                            get: function() {
                                                return moduleInstance.colorPalette();
                                            }
                                        });
                                    }
                                    if (moduleInstance.dispatch) {
                                        that._customerDispatch = moduleInstance.dispatch();
                                    }
                                }

                            });
                        };

                        var parseId = function(feeds) {
                            return feeds.map(function(item) {
                                return item.id;
                            });
                        };

                        newChartView.prototype.enableInteraction = function() {
                            return false;
                        };

                        newChartView.prototype.renderTo = function() {
                            return viz.type;
                        };
                        newChartView.prototype._updateData = function() {
                            newChartView.superclass._updateData.apply(this, arguments);
                            if (this._data) {
                                for (var key in this._children) {
                                    if (this._children.hasOwnProperty(key)) {
                                        if (this.getChild(key).module.setRawData && this._rawData.dataModel._rawData) {
                                            this.getChild(key).module.setRawData(this._rawData);
                                        }
                                    }
                                }
                            }

                        };

                        newChartView.prototype._getDataItems = function() {
                            return this._dataItem;
                        };
                        newChartView.id = viz.id;

                        return newChartView;
                    } else {
                        Logger.error(LangManager.getLogMessage('IDS_ERROR_CAN_NOT_FIND_CATEGORY'));
                    }
                });

                requirejs.s.contexts._.nextTick = nextTickBak;

                return newChartView;
            }
        };


        return ChartViewFactory;
    });
define('sap/viz/framework/flow/FlowManager',['sap/viz/framework/flow/FlowConstant', 'sap/viz/framework/flow/Flow', 'sap/viz/framework/flow/Element',
        'sap/viz/framework/core/ChartViewRegistry', 'sap/viz/framework/flow/ChartViewFactory'
    ],
    function (FlowConstant, Flow, Element, ChartViewRegistry, ChartViewFactory) {

        var FlowManager = {};
        var defaultType = FlowConstant.CONST_DEFAULT_TYPE;
        FlowManager.createElement = function (options) {
            return new Element(options);
        };

        FlowManager.createFlow = function (options) {
            var flowType = (options && options.type) ? options.type : defaultType;
            return new Flow(options, flowType);
        };

        FlowManager.register = function (flow) {
            var chartView = ChartViewFactory.createChartView(flow);
            ChartViewRegistry.registerViewer(chartView.id, chartView);
        };



        FlowManager.registerFlow = function (options) {
            if (options.id) {
                var ID = options.id;
                if (options.renderType) {
                    ChartViewRegistry.registerRenderType(ID, options.renderType);
                }
                if (options.bindings && options.family) {
                    ChartViewRegistry.registerBind(ID, options.bindings, options.family,options.name);
                }
            }

        };

        FlowManager.unregister = function (type) {
            ChartViewRegistry.unregister(type);
        };

        return FlowManager;
    });
define('sap/viz/extapi/Flow',['sap/viz/framework/common/util/TypeUtils', 'sap/viz/framework/common/log/Logger',
    'sap/viz/framework/common/lang/langManager', 'sap/viz/framework/flow/FlowManager', 'exports'
], function Setup(TypeUtils, Logger, langManager, FlowManager) {

    /**
     * sap.viz.extapi.Flow
     * @namespace sap.viz.extapi.Flow
     */
    var FlowApi = {};
    /* jshint ignore:start */
    /**
     * Create visualization Flow.
     * @function createFlow
     * @memberof sap.viz.extapi.Flow
     * @static
     * @param {Object}flowParams Parameters for the visualization flow.<br>
     * e.g.<br>
     * <pre>
     *      {
     *          'id':"flowId", //the flow id. You can use this id to create visualization.
     *          'name': "flowName", //the flow name.
     *          'type': flow type, //currently we have: "DIV", "BorderDIVFlow", "BorderSVGFlow".
     *          'dataModel': dataModel, //the dataModel visulization will use. Currently CVOM support : "sap.viz.api.data.CrosstableDatasetâ , âsap.viz.api.data.FlatTableDataset". Default is none which means no specific data model defined.
     *      }
     * </pre>
     * @returns {Object}
     *                 return a flow instance.<br><br>
     *              With this instance, you can add an element into flow by calling it's method :addElement.
     * <br>
     *<div class="name" id="flowInstance.addElement" style="margin:20px,font-size:12px;color:black;font-weight:bold">
     *     <a name="createFlow"></a><br>method:</div>
     * <div style="font-family:''Open Sans' sans-serif';font-weight:bold;font-size:12px;color:gray;padding-left:10px;">flowInstance.addElement</div>
     * <div style="color:black;font-weight:bold"><br>Parameters:<br></div>
     * <div style="padding-left:25px;"><li><span style="font-family:''Open Sans' sans-serif';font-weight:bold;font-size:12px;color:#7f7f7f;">elementParam:</span><span style="margin-left:5px;">Object</span></li></div>
     * <div style="margin-left:25px;">Element and it's properties.<div>e.g.</div></div>
     * <pre>
     *          {
     *              element:elementInstance, //element instance which is created by sap.viz.extapi.Flow.createElement.
     *              propertyCategory: property category, //you can use this category to set property for the element in createViz.
     *              place:  position for the element. //Currently we support five positions: "center", "top", "right", "bottom", "left".
     *          }
     * </pre>
     * @example <caption>How to add element into flow:</caption>
     *  var element1 = sap.viz.extapi.Flow.createElement({
     *     id:elementId,
     * });
     *  var flow = sap.viz.extapi.Flow.createFlow({
     *     id:flowId,
     *     name:flowName
     * });
     * //add element1 into flow.
     *  flow.addElement({
     *     element:element1
     *     propertyCategory: "plot",
     *     place: "center"
     * });
     */
    /* jshint ignore:end */

    FlowApi.createFlow = function (options) {
        return FlowManager.createFlow(options);
    };
    /* jshint ignore:start */
    /**
     * Create visualization element.
     * @function createElement
     * @memberof sap.viz.extapi.Flow
     * @static
     * @param {Object}elmParams Parameters for the visualization element:<br>
     * e.g.<br>
     * <pre>
     *      {
     *          'id':"elementId", //the element id
     *          'name':"elementName", //the element name
                'dimensionIndex': dimensionIndex, //optional, the index of dimension which is needed by your element. Currently is used by CVOM legend to set the correct dimensions to the legend element only. 
     *      }
     * </pre>
     * CVOM enable you to reuse internal elements to create flow, you can refer to: /viz/wiki/ProductGuides/Tutorials/ReusingVizElements
     * @returns {Object}
     *                 return an element instance. 
     *
     * <br>With this instance you can add it's implementation by using method: implement();
     * <br>With this instance you can add it's property by using method: addProperty();
     * <br>With this instance you can add it's feed definition by using method: addFeed();
     * <br>
     *<div class="name" id="implement" style="margin:20px,font-size:12px;color:black;font-weight:bold"><a name="implement"></a><br>method:</div>
     *<div style="font-family:''Open Sans' sans-serif';font-weight:bold;font-size:12px;color:gray;padding-left:10px;">elementInstance.implement</div>
     * <div style="color:black;font-weight:bold"><br>Parameters:<br></div>
     * <div style="padding-left:25px;">
     *         <li><span style="font-family:''Open Sans' sans-serif';font-weight:bold;font-size:12px;color:#7f7f7f;">baseElementPath:</span><span style="margin-left:5px;">String</span></li>
     *              <div>base element path. We currently only support:'sap.viz.elements.common.BaseGraphic'. refer to /viz/wiki/ProductGuides/Tutorials/UnderstandingTheBaseGraphicClass"</div>
     *         <br>
     *         <li><span style="font-family:''Open Sans' sans-serif';font-weight:bold;font-size:12px;color:#7f7f7f;">implementFunction:</span><span style="margin-left:5px;">Object</span></li>
     *              <div>element implementation class</div>
     * </div>
     * <br>
     *<div class="name" id="implement" style="margin:20px,font-size:12px;color:black;font-weight:bold"><a name="implement"></a><br>method:</div>
     * <div style="font-family:''Open Sans' sans-serif';font-weight:bold;font-size:12px;color:gray;padding-left:10px;">elementInstance.addProperty</div>
     * <div style="color:black;font-weight:bold"><br>Parameters:<br></div>
     * <div style="padding-left:25px;"><li><span style="font-family:''Open Sans' sans-serif';font-weight:bold;font-size:12px;color:#7f7f7f;">propertyObject:</span><span style="margin-left:5px;">Object</span></li></div>
     * <div style="margin-left:25px;">Properties for the element:</div>
     * <pre style="margin-left:50px;">
     * {
     *     name:propName, //must have. The property name.
     *     type:String, //must have. The property type.
     *     supportedValues:[value1, value2] //must have. The supportedValues array.
     * }
     * </pre>
     * <br>
     *<div class="name" id="implement" style="margin:20px,font-size:12px;color:black;font-weight:bold"><a name="implement"></a><br>method:</div>
     * <div style="font-family:''Open Sans' sans-serif';font-weight:bold;font-size:12px;color:gray;padding-left:10px;">elementInstance.addFeed</div>
     * <div style="margin:20px,font-size:12px;color:black;font-weight:bold"><br>Parameters:<br></div>
     * <div style="padding-left:25px;"><li><span style="font-family:''Open Sans' sans-serif';font-weight:bold;font-size:12px;color:#7f7f7f;">feedObject:</span><span style="margin-left:5px;">Object</span></li></div>
     * <div style="margin-left:25px;">feed for the element: refer to /viz/wiki/ProductGuides/Tutorials/ChartFeed</div>
     * <br>
     * <br>
     *
     * @example <caption>How to add implementation class into element:</caption>
     *  var element1 = sap.viz.extapi.Flow.createElement({
     *     id:elementId,
     * });
     * 
     *  var DimfeedingInfo = [{
     * 'id' : 'regionColor',
     * 'name' : 'IDS_REGIONCOLOR',
     *       'type' : 'Dimension', //Cannot access constants.Type.Dimension,
     *       'min' : 0,
     *       'max' : 2,
     *       'aaIndex' : 2,
     *       'acceptMND' : 1
     *   }, {
     *       'id' : 'axisLabels',
     *       'name' : 'IDS_AXISLABELS',
     *       'type' : 'Dimension',
     *       'min' : 1,
     *       'max' : 2,
     *       'acceptMND' : 0,
     *       'aaIndex' : 1
     *   }];
     *   var MeasureFeedingInfo = {
     *       'id' : 'primaryValues',
     *       'name' : 'IDS_PRIMARYVALUES',
     *       'type' : 'Measure',
     *       'min' : 1,
     *      'max' : Number.POSITIVE_INFINITY,
     *       'mgIndex' : 1
     *  };
     * 
     * element1.addFeed(DimfeedingInfo);//addFeed by using arrary of feeding definition.
     * element1.addFeed(MeasureFeedingInfo);//addFeed by single feeding definition.
     * 
     * var chartFn = {
     *      render : function(){
     *     //do your rendering works here...
     *      }
     * };
     * //add visualization implement functions into element1.
     *  element1.implement('sap.viz.elements.common.BaseGraphic',chartFn);
     * refer to /viz/wiki/ProductGuides/Tutorials/UnderstandingTheBaseGraphicClass"
     */
    /* jshint ignore:end */
    FlowApi.createElement = function (options) {
        return FlowManager.createElement(options);
    };

    /* jshint ignore:start */
    /**
     * Register flow into CVOM. <br>
     * After registering, you can use sap.viz.api.core.createViz to create registered visualization
     * <br>by using flow's id as the visualization id
     * @function registerFlow
     * @memberof sap.viz.extapi.Flow
     * @static
     * @param {flowInstance}flowInstance Flow Instance.
     * @example <caption>How to register and create visualization flow</caption>
     *  //Create Flow steps:
     *  var element1 = sap.viz.extapi.Flow.createElement({
     *     id:elementId,
     *  });
     *  var chartFn = {
     *      render : function(){
     *     //do your rendering works here...
     *      }
     *  };
     *  //add visualization implementation functions into element1.
     *  element1.implement('sap.viz.elements.common.BaseGraphic',chartFn);
     *
     *  //create visualization flow.
     * var chartFlow = sap.viz.extapi.Flow.createFlow({
     *     id:flowId,
     *  });
     *
     *  //add element into flow.
     *  chartFlow.addElement({
     *     element:element1
     *  });
     *
     *  //Register flow into CVOM.
     *  sap.viz.extapi.Flow.registerFlow(flow);
     *
     *  //Create visualization flow:
     *  var chartInstance = sap.viz.api.core.createViz({
     *    type : flowId,
     *     data : {}//visualization dataset
     *     container :{} //visualization plotting jquery HTMLDivElement
     *     options : {}//visualization options.
     * });
     * refer to /viz/wiki/ProductGuides/Tutorials/UnderstandingTheBaseGraphicClass"
     */
    /* jshint ignore:end */

    FlowApi.registerFlow = function (flow) {
        FlowManager.register(flow);
    };

    /**
     * UnRegister flow from CVOM.
     * @function unregisterFlow
     * @memberof sap.viz.extapi.Flow
     * @static
     * @param {String}flowId The flow id you want to unregister.
     *
     */
    FlowApi.unregisterFlow = function (flowId) {
        FlowManager.unregister(flowId);
    };

    /* jshint ignore:start */
    /**
     * This class is a reference for basic graphic for you to extend and implement element.
     * <br>You can not get this class through global namespace.<br>
     * You can use basic graphic path:<br> <div style="font-weight:bold;">'sap.viz.elements.common.BaseGraphic'</div><br>
     * as base class to create element implementation function.<br>
     * You car refer {sap.viz.extapi.Flow#createElement} for more information.
     * @example <caption>How to use base graphic</caption>
     * var elementInstance = sap.viz.extapi.Flow.createElement({id:'sampleChart'});
     * elementInstance.implement('sap.viz.elements.common.BaseGraphic',{<br>    render:<bar>function(){},<br>    size:<bar>function(){},<br>    other function definitions...});
     *
     * @Class sap.viz.elements.common.BaseGraphic
     * @ignore
     */

    /**
     * Function for visualization to get/set visualization size.<br><br>
     * You can resize the visualization by overriding this method.<br><br>
     * You can override this by using:<br>
     * <pre> elementInstance.implement('sap.viz.elements.common.BaseGraphic',
     *     {
     *         size:function(parameters){Implementation code}
     *     });
     * </pre>
     * @method sap.viz.elements.common.BaseGraphic.size
     * @param {object}sizeObject size object with width&height.
     * <br>e.g.<br>
     * <pre>
     * {
     *     width:300,
     *     height:400
     * }
     * </pre>
     * @return {object}sizeObject size of the set width&height
     * <br>e.g.<br>
     * <pre>
     * {
     *     width:300,
     *     height:400
     * }
     * </pre>
     */
    /**
     * Rendering function for element to create visualization.<br>
     * <br><div style="font-weight:bold">You must override this function to do your visualization rendering.<br>
     * @method sap.viz.elements.common.BaseGraphic.render
     * @param {object}selection The d3 selection object. It's the dom's div/svg selection for you to render visualization.
     * @example <caption>How to override rendering function</caption>
     *
     * //Create element
     * var elementInstance = sap.viz.extapi.Flow.createElement({id:'sampleChart'});
     *
     * //Create function object.
     * var renderFn = {};
     * renderFunctionObject.render = function(parameters){Implementation code};
     *
     * //Add function object with base class into element.
     * elementInstance.implement('sap.viz.elements.common.BaseGraphic',renderFn);
     */
    /**
     * Function for visualization to get/set dom width.<br><br>
     * You can resize the visualization by overriding this method.<br><br>
     * You can override this by using:<br>
     * <pre> elementInstance.implement('sap.viz.elements.common.BaseGraphic',
     *      {
     *          width:function(parameters){Implementation code}
     *      });
     * </pre>
     * @method sap.viz.elements.common.BaseGraphic.width
     * @param {Number|undefined}width Width of rendering area.
     *
     * @return {Number}height Height of rendering area.
     */
    /**
     * Function for visualization to get/set dom height.<br><br>
     * You can resize the visualization by overriding this method.<br><br>
     * You can override this by using:<br>
     * <pre> elementInstance.implement('sap.viz.elements.common.BaseGraphic',
     *      {
     *          height:function(parameters){Implementation code}
     *      });
     * </pre>
     * @method sap.viz.elements.common.BaseGraphic.height
     * @param {Number|undefined}height Height of rendering area.
     *
     * @return {Number}height Height of rendering area.
     */
    /**
     * Function for visualization to get dataset.<br><br>
     * You can change the dataset by overriding this method.<br><br>
     *
     * You can override this by using:<br>
     * <pre> elementInstance.implement('sap.viz.elements.common.BaseGraphic',
     *      {
     *          data:function(parameters){Implementation code}
     *      });
     * </pre>
     * @method sap.viz.elements.common.BaseGraphic.data
     * @param {Object|undefined}data Dataset
     * <br>e.g.<br>
     * <pre>
     * {
     *    dataset: Dataset,// Dataset which is set in createViz's data option.
     *    feeding: Feeding// Feeding which is set in createViz's feeding option.
     * }
     * </pre>
     * For more dataset and feeding information, please refer {@link sap.viz.api.core#createViz}.
     *
     * @return{Object}data Dataset
     */

    /**
     * Function for visualization to destory itself.<br><br>
     * You can change the destroy logic by overriding this method.<br><br>
     * You can override this by using:<br>
     * <pre> elementInstance.implement('sap.viz.elements.common.BaseGraphic',
     *      {
     *          destroy:function(parameters){Implementation code}
     *      });
     * </pre>
     * @method sap.viz.elements.common.BaseGraphic.destroy
     */

    /* jshint ignore:end */

    return FlowApi;
});
define('sap/viz/extapi/core',['sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/log/Logger',
    'sap/viz/framework/common/lang/LangManager',
    'exports'
], function Setup(TypeUtils, Logger, langManager) {

    /**
     * sap.viz.extapi.core
     * @namespace sap.viz.extapi.core
     */
    var coreExtAPi = {};
    /**
     * @ignore
     */

    /**
     * Register extension's bundle
     * @function registerBundle
     * @memberof sap.viz.extapi.core
     * @static
     * @param {Object} bundle The bundle description defined in extension's -bundle.js
     * Sample:
     * <pre>
     * (function() {
     *		var viz   = {...};
     *		var chart = {...};
     *
     *		var vizExtImpl = {
     *			"viz": [viz],
     *			"module": [chart],
     *			"feeds": []
     *		};
     *
     *		var vizExtBundle = {
     *			id : "com.company.vizext",
     *			loadAfter : ["sap.viz.aio"],
     *			components : [{
     *				id : "comp.company.vizext"
     *				provide : "sap.viz.impls",
     *				instance : vizExtImpl
     *			}]
     *		};
     *
     *		if (sap.bi.framework.getService("sap.viz.aio", "sap.viz.extapi")) {
     *			sap.bi.framework.getService("sap.viz.aio", "sap.viz.extapi").registerBundle(vizExtBundle);
     *		} else {
     *			define(function() {
     *				return vizExtBundle;
     *			});
     *		}
     *	})();
     * </pre>
     */
    coreExtAPi.registerBundle = function(bundle) {
        var def = define;
        var names = bundle.id.split(".");
        var moduleName = names[names.length - 1] + "-bundle";
        def(moduleName, function() {
            return bundle;
        });
        return bundle;
    };


    return coreExtAPi;

    /**
     * sap.viz.extapi.VERSION
     * @namespace sap.viz.extapi.VERSION
     *
     */



    /**
     * Constant, the current version of sap.viz.extapi.
     * @member VERSION
     * @memberof sap.viz.extapi.VERSION
     * @static
     * @example
     * var verion = sap.viz.extapi.VERSION;
     */

});
define('sap/viz/extapi/env/Language',['sap/viz/framework/common/lang/LangManager', 'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/log/Logger', 'exports'
], function Setup(langManager, TypeUtils, Logger) {

    //var _listeners = new LinkedHashMap();
    var _listeners = {};
    var language =
        /**
         * sap.viz.extapi.env.Language
         * @namespace sap.viz.extapi.env.Language
         */
        {

            /**
             * Get current language
             * @function get
             * @memberof sap.viz.extapi.env.Language
             * @static
             * @return {String} language value like en, de, fr, es, zh_CN, ja, ru, pt
             */
            get: function() {
                return langManager.current();
            },

            /**
             * @function addListener
             * @memberof sap.viz.extapi.env.Language
             * @static
             * @param {Function} listener
             *                      function(language){...} //parameter language is optional
             * @return {sap.viz.extapi.env.Language} self
             * @example <caption>Live Demo:<div class="livedemoFlag"><input style="display:none;"
             *  value="livedemo/extapi_Language_addListener.html"></caption>
             */
            addListener: function(l) {
                if (arguments.length === 1 && TypeUtils.isFunction(l)) {
                    var listener = {
                        fn: l
                    };
                    langManager.addListener(listener);
                    // _listeners.add(l, listener);
                    _listeners[l] = listener;
                    return language;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                    return;
                }

            },

            /**
             * @function removeListener
             * @memberof sap.viz.extapi.env.Language
             * @static
             * @param {Function} listener
             *                      function(language){...} //this function must be the original listener function
             * @return {sap.viz.extapi.env.Language} self
             *
             * @example <caption>Live Demo:<div class="livedemoFlag"><input style="display:none;"
             *  value="livedemo/extapi_Language_removeListener.html"></caption>
             */
            removeListener: function(l) {
                if (arguments.length === 1 && TypeUtils.isFunction(l)) {
                    // langManager.removeListener(_listeners.get(l));
                    // _listeners.remove(l);
                    langManager.removeListener(_listeners[l]);
                    delete _listeners[l];
                    return language;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                    return;
                }
            },

            /**
             * @function register
             * @memberof sap.viz.extapi.env.Language
             * @static
             * @param {Object} languagePackage
             * <pre>
             * { "id" : languageId,
             *     "value" :
             *     {
             *         "string_key" : string_value,
             *         ...
             *     },
             * }
             * </pre>
             * @return {sap.viz.extapi.env.Language} self
             */
            register: function(languagePackage) {
                if (arguments.length === 1 && TypeUtils.isPlainObject(languagePackage)) {
                    langManager.register(languagePackage);
                    return language;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                    return;
                }
            },

            /**
             * Get error message in current language by error code
             * @function getErrorMessage
             * @memberof sap.viz.extapi.env.Language
             * @static
             * @param {Number} id
             * error id
             *
             * @return {String} error message
             *
             * @example sap.viz.extapi.env.Language.getErrorMessage(50000) =
             *  "Length of dimension cannot be zero."(locale == en);
             */
            getErrorMessage: function(id) {
                return langManager.getLogMessageByID(id);
            },

            /**
             * Get user defined resourceString according to current language setting
             * @function getResourceString
             * @memberof sap.viz.extapi.env.Language
             * @static
             * @param {String} ids
             *
             * @return {String} the value of ids
             *
             * @example sap.viz.extapi.env.Language.getResourceString("TESTKEY") = "testValue"
             */
            getResourceString: function(ids) {
                return langManager.get(ids);
            }
        };
    return language;
});
define('sap/viz/extapi/env/Locale',['sap/viz/framework/common/locale/Locale', 'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/log/Logger',
    'sap/viz/framework/common/lang/LangManager', 'exports'
], function Setup(Locale, TypeUtils, Logger, langManager) {
    // var _listeners = new LinkedHashMap();
    var _listeners = {};
    var locale =
        /**
         * sap.viz.extapi.env.Locale
         * @namespace sap.viz.extapi.env.Locale
         */
        {

            /**
             * Get current locale
             * @function get
             * @memberof sap.viz.extapi.env.Locale
             * @static
             * @return {String} locale value like en, de, fr, es, zh_CN, ja, ru, pt
             */
            get: function() {
                return Locale.locale();
            },

            /**
             * @function addListener
             * @memberof sap.viz.extapi.env.Locale
             * @static
             * @param {Function}
             *            listener function(locale){...} //parameter locale is optional
             * @return {sap.viz.extapi.env.Locale} self
             * @example <caption>Live Demo:<div class="livedemoFlag"><input style="display:none;"
             *  value="livedemo/extapi_Locale_addListener.html"></caption>
             */
            addListener: function(l) {
                if (arguments.length === 1 && TypeUtils.isFunction(l)) {
                    var listener = {
                        fn: l
                    };
                    Locale.addListener(listener);
                    // _listeners.add(l, listener);
                    _listeners[l] = listener;
                    return locale;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                    return;
                }
            },

            /**
             * @function removeListener
             * @memberof sap.viz.extapi.env.Locale
             * @static
             * @param {Function} listener
             *            function(locale){...} //this function must be the original listener function
             * @return {sap.viz.extapi.env.Locale} self
             * @example <caption>Live Demo:<div class="livedemoFlag"><input style="display:none;"
             *  value="livedemo/extapi_Locale_removeListener.html"></caption>
             */
            removeListener: function(l) {
                if (arguments.length === 1 && TypeUtils.isFunction(l)) {
                    // Locale.removeListener(_listeners.get(l));
                    // _listeners.remove(l);
                    Locale.removeListener(_listeners[l]);
                    delete _listeners[l];
                    return locale;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                    return;
                }
            }
        };
    return locale;
});
define('sap/viz/extapi/env/Resource',[
    'sap/viz/api/env/Resource',
    'exports'
], function(Resource) {

    /**
     * sap.viz.extapi.env.Resource
     * @namespace sap.viz.extapi.env.Resource
     */

    /**
     * Get/Set resource path
     * @function path
     * @memberof sap.viz.extapi.env.Resource
     * @static
     * @param {String} key
     * @param {undefined|String|Array} [path]
     *     If path is undefined, this is a get path by key function, otherwise this is a set path by key function.
     * Example:
     *          Resource.path('baseURL') is to get path by key.
     *          Resource.path('baseURL', 'testurl') is to set path by key.
     * If path is Array, keep a cloned Array in the internal map.
     * Predefined Resource Paths:
     * <pre>
     *   1.  "sap.viz.api.env.Template.loadPaths":    ["../../../resources/templates"];
     *   2.  "sap.viz.api.env.Language.loadPaths":    ["../../../resources/langs/"];
     *   4.  "sap.viz.map.Resources" :                                   "../../resources"
     *
     *
     * Example:
     *
     *   Set path:
     *
     *   sap.viz.extapi.env.Resource.path("sap.viz.api.env.Template.loadPaths", ["../../../resources/templates"]);
     *   sap.viz.extapi.env.Resource.path("sap.viz.api.env.Language.loadPaths", ["../../../resources/langs/"]);
     *   sap.viz.api.env.Resource.path("sap.viz.map.Resources", "../../resources");
     *
     *   Get path:
     *
     *   sap.viz.extapi.env.Resource.path("sap.viz.api.env.Template.loadPaths") =  ["../../../resources/templates"];
     *   sap.viz.extapi.env.Resource.path("sap.viz.api.env.Language.loadPaths") =  ["../../../resources/langs/"];
     *   sap.viz.api.env.Resource.path("sap.viz.map.Resources")                 =  "../../resources";
     *
     * Or you can use customized paths:
     *         Resource.path('baseURL', 'testurl'), you can set any key-value pair which value should be a valid path.
     * @return {sap.viz.extapi.env.Resource|String|Array}
     *  return self when it is a set function and return String or Array if it is a get function.
     */

    return Resource;
});
define('sap/viz/extapi/env/Template',['sap/viz/framework/common/template/TemplateManager', 'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/log/Logger', 'sap/viz/framework/common/lang/LangManager', 'exports'
], function Setup(TemplateManager, ObjectUtils, TypeUtils, Logger, langManager) {
    // var _listeners = new LinkedHashMap();
    var _listeners = {};
    var template =
        /**
         * sap.viz.extapi.env.Template
         * @namespace sap.viz.extapi.env.Template
         */
        {

            /**
             * Get current template's unique id
             * @function get
             * @memberof sap.viz.extapi.env.Template
             * @static
             * @return {String} template's unique id
             * <pre>
             *  Example:
             *      sap.viz.extapi.env.Template.set("flashy", completeCallback, failedCallback);
             *      //set template by id
             *      sap.viz.extapi.env.Template.get() = "flashy";//Get the set template id.
             * </pre>
             */
            get: function() {
                return TemplateManager.current().id;
            },

            /**
             * Get a clone of current applied template object
             * @function current
             * @memberof sap.viz.extapi.env.Template
             * @static
             * @return {Object} templatePackage
             * <pre>
             * {
             *     "id" : templateId,
             *     "name" : templateName,
             *     "version" : version,
             *     "css" : templateCss,
             *      //such as css: ".v-m-main .v-background-body{fill:#eeeeee;}
             *      .v-m-main .v-background-body{fill:#eeeeee;}"
             *     "properties" :
             *     {
             *            "string_key" : string_value,
             *         ...
             *     },
             * }
             * </pre>
             */
            current: function() {
                var templatePackage = {};
                return ObjectUtils.extend(true, templatePackage, TemplateManager.current());
            },
            /**
             * Add or extend existing template object.
             * The api sap.viz.TemplateManager.extend which in the previous api version
             * is now replaced by this function. <br>
             *
             * If the template is not exist, it will add this template.
             * If the template is already exist, it will merge and extend the old one with the new template.
             *
             * @function register
             * @memberof sap.viz.extapi.env.Template
             * @static
             * @param {Object} templatePackage
             * <pre>
             * {
             *     "id" : templateId,
             *     "name" : templateName,
             *     "version" : version,
             *     "css" : templateCss,
             *      //such as css: ".v-m-main .v-background-body{fill:#eeeeee;}
             *      .v-m-main .v-background-body{fill:#eeeeee;}"
             *     "properties" :
             *     {
             *            "string_key" : string_value,
             *         ...
             *     },
             * }
             * </pre>
             * @return {sap.viz.extapi.env.Template} self
             * @example <caption>Live demos:<div class="livedemoFlag"><input style="display:none;"
             * value="livedemo/extapi_Template_addListener.html"></caption>
             */

            /**
             * @function addListener
             * @memberof sap.viz.extapi.env.Template
             * @static
             * @param {Function} func
             *             function(template){...} //parameter template is optional
             * @return {sap.viz.extapi.env.Template} self
             */
            addListener: function(func) {
                if (arguments.length === 1 && TypeUtils.isFunction(func)) {
                    var listener = {
                        fn: func
                    };
                    TemplateManager.addListener(listener);
                    // _listeners.add(func, listener);
                    _listeners[func] = listener;
                    return template;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                    return;
                }
            },

            /**
             * @function removeListener
             * @memberof sap.viz.extapi.env.Template
             * @static
             * @param {Function} func
             *            function(template){...} //this function must be the original listener function
             * @return {sap.viz.extapi.env.Template} self
             */
            removeListener: function(func) {
                if (arguments.length === 1 && TypeUtils.isFunction(func)) {
                    // TemplateManager.removeListener(_listeners.get(func));
                    TemplateManager.removeListener(_listeners[func]);
                    // _listeners.remove(func);
                    delete _listeners[func];
                    return template;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                    return;
                }
            }
        };
    return template;
});
define('sap/viz/framework/binding/supportBindingUtil',[], function Setup() {

    var accpetBindingChartList = [
        'info/bar',
        'info/column',
        'info/bubble'
    ];
    var supportBinding = {};

    supportBinding.isAcceptBinding = function(type) {
        if (accpetBindingChartList.indexOf(type) >= 0) {
            return true;
        }
        return false;
    };

    // feeding = {
    //     primaryValues: ['Profit'],
    //     secondaryValues: ['Revenue'],
    //     regionColor: ['MeasureNamesDimension', 'Country'],
    //     axisLabels: ['Product', 'Year']
    // };
    // bindings = {
    //     'axisLabels': {
    //         chain: 'GetCategoryFromFlatTable', //default chain
    //         bindingInfo: {
    //             fieldsName: ['Year', 'MeasureNamesDimension', 'Country']
    //         }
    //     },
    //     'primaryValues': {
    //         chain: 'GetMeasuresFromFlatTable',
    //         bindingInfo: {
    //             fieldsName: ['Profit']
    //         }
    //     },
    //     'secondaryValues': {
    //         chain: 'GetMeasuresFromFlatTable',
    //         bindingInfo: {
    //             fieldsName: ['Revenue']
    //         }
    //     },
    //     'regionColor': {
    //         chain: 'GetColorRangeFromFlatTable',
    //         bindingInfo: {
    //             fieldsName: ['Product']
    //         }
    //     }
    // };

    var createSingleFlatBindingItem = function(feedingItem) {
        var bindingItem = {};
        bindingItem.bindingInfo = {};
        bindingItem.bindingInfo.fieldsName = feedingItem;
        return bindingItem;
    };
    supportBinding.transferFeedingToBinding = function(feeding) {
        var binding = {};
        for (var i in feeding) {
            if (feeding.hasOwnProperty(i)) {
                binding[i] = createSingleFlatBindingItem(feeding[i]);
            }
        }
        return binding;
    };
    return supportBinding;
});
define('sap/viz/framework/common/util/Math',['sap/viz/framework/common/util/UADetector'],
    function Setup(UADetector) {
        var OptMath = {
            PI: Math.PI,
            E: Math.E,
            LN10: Math.LN10,
            LN2: Math.LN2,
            LOG2E: Math.LOG2E,
            LOG10E: Math.LOG10E,
            SQRT1_2: Math.SQRT1_2,
            SQRT2: Math.SQRT2,

            abs: (function() {
                if (UADetector.isSafari() || (UADetector.isIE() && parseFloat(UADetector.version()) < 9)) {
                    return function(n) {
                        return n < 0 ? -n : n;
                    };
                } else {
                    return Math.abs;
                }
            })(),

            acos: (function() {
                return Math.acos;
            })(),

            asin: (function() {
                return Math.asin;
            })(),

            atan: (function() {
                return Math.atan;
            })(),

            atan2: (function() {
                return Math.atan2;
            })(),

            /**
             * Get the ceil of a number.
             *
             * @name sap.viz.base.Math#ceil
             * @function
             * @param {n}
             *            n must not be NaN
             * @returns {Number} the ceil of number
             */
            ceil: (function() {
                // if (UADetector.isFirefox()) {
                // return function(n) {
                // var i = n | 0;
                // return n <= 0 ? i : (i == n ? i : i + 1);
                // };
                // }
                // else if (UADetector.isChrome()) {
                // return function(n) {
                // return n <= 0 ? n | 0 : Math.ceil(n);
                // };
                // }
                // else {
                return Math.ceil;
                // }
            })(),

            cos: (function() {
                return Math.cos;
            })(),

            exp: (function() {
                return Math.exp;
            })(),

            /**
             * Get the floor of a number.
             *
             * @name sap.viz.base.Math#floor
             * @function
             * @param {n}
             *            n must not be NaN
             * @returns {Number} the floor of number
             */
            floor: (function() {
                // if(UADetector.isFirefox()) {
                // return function(n) {
                // var a = n | 0;
                // return n < 0 ? (a == n ? a : a - 1) : a;
                // };
                // } else
                return Math.floor;
            })(),

            log: (function() {
                return Math.log;
            })(),

            /**
             * Get the maximum number in an array.
             *
             * @name sap.viz.base.Math#max
             * @function
             * @param {array}
             *            array must be an array of Number
             * @returns {Number} the maximum number in array
             */
            max: (function() {
                // if(UADetector.isIE() && parseFloat(UADetector.version()) < 9) {
                return Math.max;
                // } else
                // return function() {
                // var max = arguments[0];
                // var length = arguments.length;
                // for(var i = 1; i < length; i++) {
                // max = arguments[i] > max ? arguments[i] : max;
                // }
                // return max;
                // };
            })(),

            /**
             * Get the minimum number in an array.
             *
             * @name sap.viz.base.Math#min
             * @function
             * @param {array}
             *            array must be an array of Number
             * @returns {Number} the minimum number in array
             */
            min: (function() {
                // if(UADetector.isIE() && parseFloat(UADetector.version()) < 9) {
                return Math.min;
                // }
                // else return function(){
                // var min = arguments[0];
                // var length = arguments.length;
                // for (var i=1; i<length; i++){
                // min = arguments[i] > min ? min : arguments[i];
                // }
                // return min;
                // };
            })(),

            pow: (function() {
                return Math.pow;
            })(),

            random: (function() {
                return Math.random;
            })(),

            /**
             * Get the round of a number.
             *
             * @name sap.viz.base.Math#round
             * @function
             * @param {n}
             *            n must not be NaN
             * @returns {Number} the round of number
             */
            round: (function() {
                return Math.round;
                //          if(UADetector.isFirefox() || (UADetector.isIE() && parseFloat(UADetector.version()) < 9)){
                //              return function(n) {
                //                  return (n >= 0) ? (n + 0.5) | 0 : (n - 0.4999999999999999) | 0;
                //              };
                //          }
                //          else if(UADetector.isChrome()){
                //              return function(n) {
                //                  return Math.floor(n + 0.5);
                //              };
                //          }
                //          else return Math.round;
            })(),

            sin: (function() {
                return Math.sin;
            })(),

            sqrt: (function() {
                return Math.sqrt;
            })(),

            tan: (function() {
                return Math.tan;
            })()
        };
        return OptMath;
    });
define('sap/viz/framework/common/util/ColorUtils',['sap/viz/framework/common/util/TypeUtils', 'sap/viz/framework/common/util/Math'],
    function Setup(TypeUtils, Math) {
        var namedColor = {
            aliceblue: "#f0f8ff",
            antiquewhite: "#faebd7",
            aqua: "#00ffff",
            aquamarine: "#7fffd4",
            azure: "#f0ffff",
            beige: "#f5f5dc",
            bisque: "#ffe4c4",
            black: "#000000",
            blanchedalmond: "#ffebcd",
            blue: "#0000ff",
            blueviolet: "#8a2be2",
            brown: "#a52a2a",
            burlywood: "#deb887",
            cadetblue: "#5f9ea0",
            chartreuse: "#7fff00",
            chocolate: "#d2691e",
            coral: "#ff7f50",
            cornflowerblue: "#6495ed",
            cornsilk: "#fff8dc",
            crimson: "#dc143c",
            cyan: "#00ffff",
            darkblue: "#00008b",
            darkcyan: "#008b8b",
            darkgoldenrod: "#b8860b",
            darkgray: "#a9a9a9",
            darkgreen: "#006400",
            darkgrey: "#a9a9a9",
            darkkhaki: "#bdb76b",
            darkmagenta: "#8b008b",
            darkolivegreen: "#556b2f",
            darkorange: "#ff8c00",
            darkorchid: "#9932cc",
            darkred: "#8b0000",
            darksalmon: "#e9967a",
            darkseagreen: "#8fbc8f",
            darkslateblue: "#483d8b",
            darkslategray: "#2f4f4f",
            darkslategrey: "#2f4f4f",
            darkturquoise: "#00ced1",
            darkviolet: "#9400d3",
            deeppink: "#ff1493",
            deepskyblue: "#00bfff",
            dimgray: "#696969",
            dimgrey: "#696969",
            dodgerblue: "#1e90ff",
            firebrick: "#b22222",
            floralwhite: "#fffaf0",
            forestgreen: "#228b22",
            fuchsia: "#ff00ff",
            gainsboro: "#dcdcdc",
            ghostwhite: "#f8f8ff",
            gold: "#ffd700",
            goldenrod: "#daa520",
            gray: "#808080",
            green: "#008000",
            greenyellow: "#adff2f",
            grey: "#808080",
            honeydew: "#f0fff0",
            hotpink: "#ff69b4",
            indianred: "#cd5c5c",
            indigo: "#4b0082",
            ivory: "#fffff0",
            khaki: "#f0e68c",
            lavender: "#e6e6fa",
            lavenderblush: "#fff0f5",
            lawngreen: "#7cfc00",
            lemonchiffon: "#fffacd",
            lightblue: "#add8e6",
            lightcoral: "#f08080",
            lightcyan: "#e0ffff",
            lightgoldenrodyellow: "#fafad2",
            lightgray: "#d3d3d3",
            lightgreen: "#90ee90",
            lightgrey: "#d3d3d3",
            lightpink: "#ffb6c1",
            lightsalmon: "#ffa07a",
            lightseagreen: "#20b2aa",
            lightskyblue: "#87cefa",
            lightslategray: "#778899",
            lightslategrey: "#778899",
            lightsteelblue: "#b0c4de",
            lightyellow: "#ffffe0",
            lime: "#00ff00",
            limegreen: "#32cd32",
            linen: "#faf0e6",
            magenta: "#ff00ff",
            maroon: "#800000",
            mediumaquamarine: "#66cdaa",
            mediumblue: "#0000cd",
            mediumorchid: "#ba55d3",
            mediumpurple: "#9370db",
            mediumseagreen: "#3cb371",
            mediumslateblue: "#7b68ee",
            mediumspringgreen: "#00fa9a",
            mediumturquoise: "#48d1cc",
            mediumvioletred: "#c71585",
            midnightblue: "#191970",
            mintcream: "#f5fffa",
            mistyrose: "#ffe4e1",
            moccasin: "#ffe4b5",
            navajowhite: "#ffdead",
            navy: "#000080",
            oldlace: "#fdf5e6",
            olive: "#808000",
            olivedrab: "#6b8e23",
            orange: "#ffa500",
            orangered: "#ff4500",
            orchid: "#da70d6",
            palegoldenrod: "#eee8aa",
            palegreen: "#98fb98",
            paleturquoise: "#afeeee",
            palevioletred: "#db7093",
            papayawhip: "#ffefd5",
            peachpuff: "#ffdab9",
            peru: "#cd853f",
            pink: "#ffc0cb",
            plum: "#dda0dd",
            powderblue: "#b0e0e6",
            purple: "#800080",
            red: "#ff0000",
            rosybrown: "#bc8f8f",
            royalblue: "#4169e1",
            saddlebrown: "#8b4513",
            salmon: "#fa8072",
            sandybrown: "#f4a460",
            seagreen: "#2e8b57",
            seashell: "#fff5ee",
            sienna: "#a0522d",
            silver: "#c0c0c0",
            skyblue: "#87ceeb",
            slateblue: "#6a5acd",
            slategray: "#708090",
            slategrey: "#708090",
            snow: "#fffafa",
            springgreen: "#00ff7f",
            steelblue: "#4682b4",
            tan: "#d2b48c",
            teal: "#008080",
            thistle: "#d8bfd8",
            tomato: "#ff6347",
            turquoise: "#40e0d0",
            violet: "#ee82ee",
            wheat: "#f5deb3",
            white: "#ffffff",
            whitesmoke: "#f5f5f5",
            yellow: "#ffff00",
            yellowgreen: "#9acd32"
        };

        var hue2rgb = function(p, q, t) {
            if (t < 0) {
                t += 1;
            }
            if (t > 1) {
                t -= 1;
            }
            if (t < 1 / 6) {
                return p + (q - p) * 6 * t;
            }
            if (t < 1 / 2) {
                return q;
            }
            if (t < 2 / 3) {
                return p + (q - p) * (2 / 3 - t) * 6;
            }
            return p;
        };
        var hsl2rgb = function(h, s, l) {
            var r, g, b;
            if (s === 0) {
                r = g = b = l;
                // achromatic
            } else {
                var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
                var p = 2 * l - q;
                r = hue2rgb(p, q, h + 1 / 3);
                g = hue2rgb(p, q, h);
                b = hue2rgb(p, q, h - 1 / 3);
            }
            return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
        };
        var rgb2hsl = function(r, g, b) {
            r /= 255;
            g /= 255;
            b /= 255;
            var max = Math.max(r, g, b),
                min = Math.min(r, g, b);
            var h = 0,
                s, l = (max + min) / 2;

            if (max == min) {
                h = s = 0;
                // achromatic
            } else {
                var d = max - min;
                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                switch (max) {
                    case r:
                        h = (g - b) / d + (g < b ? 6 : 0);
                        break;
                    case g:
                        h = (b - r) / d + 2;
                        break;
                    case b:
                        h = (r - g) / d + 4;
                        break;
                }
                h /= 6;
            }
            return [h, s, l];
        };
        var parsePercentage = function(value) {
            return parseInt(value.substring(0, value.lastIndexOf('%'))) / 100;
        };
        var parseRGBValue = function(value) {
            if (value.lastIndexOf('%') > 0) {
                return Math.ceil(parseInt(value.substring(0, value.lastIndexOf('%'))) * 255 / 100);
            } else {
                return parseInt(value);
            }
        };
        var toHexString = function(decimal) {
            return decimal < 16 ? '0' + decimal.toString(16) : decimal.toString(16);
        };

        var RGBA = function(r, g, b, a) {
            this.r = r;
            this.g = g;
            this.b = b;
            this.a = a;
        };

        RGBA.prototype.rgb = function() {
            return this;
        };

        RGBA.lighter = function(percent) {
            if (!arguments.length || isNaN(+percent) || +percent > 1.0 || +percent < 0.0) {
                percent = 0.1;
            }
            var color = this.hsl();
            color.l = Math.max(0.1, color.l * (1 - percent));
            color = color.rgb();
            this.r = color.r;
            this.g = color.g;
            this.b = color.b;
            return this;
        };

        RGBA.prototype.darker = function(percent) {
            if (!arguments.length || isNaN(+percent) || +percent > 1.0 || +percent < 0.0) {
                percent = 0.1;
            }
            var color = this.hsl();
            color.l = Math.min(1, color.l * (1 + percent));
            color = color.rgb();
            this.r = color.r;
            this.g = color.g;
            this.b = color.b;
            return this;
        };

        RGBA.prototype.hsl = function() {
            var HSL = rgb2hsl(this.r, this.g, this.b);
            return new HSLA(HSL[0], HSL[1], HSL[2], this.a);
        };
        RGBA.prototype.toString = function(type) {
            var hsl;
            switch (type) {
                case 'rgb':
                    return 'rgb(' + Math.round(this.r) + ',' + Math.round(this.g) + ',' + Math.round(this.b) + ')';
                case 'rgba':
                    return 'rgba(' + Math.round(this.r) + ',' + Math.round(this.g) + ',' + Math.round(this.b) + ',' +
                        this.a + ')';
                case 'hsl':
                    hsl = rgb2hsl(this.r, this.g, this.b);
                    return 'hsl(' + hsl[0] * 360 + ',' + hsl[1] * 100 + '%,' + hsl[2] * 100 + '%)';
                case 'hsla':
                    hsl = rgb2hsl(this.r, this.g, this.b);
                    return 'hsla(' + hsl[0] * 360 + ',' + hsl[1] * 100 * 100 + '%,' + hsl[2] * 100 * 100 + '%,' + (this
                        .a || 1.0) + ')';
                default:
                    return '#' + toHexString(Math.round(this.r)) + toHexString(Math.round(this.g)) +
                        toHexString(Math.round(this.b));
            }
        };

        var HSLA = function(h, s, l, a) {
            this.h = h;
            this.s = s;
            this.l = l;
            this.a = a;
        };

        HSLA.prototype.rgb = function() {
            var rgb = hsl2rgb(this.h, this.s, this.l);
            return new RGBA(Math.round(rgb[0]), Math.round(rgb[1]), Math.round(rgb[2]), this.a);
        };

        HSLA.prototype.hsl = function() {
            return this;
        };

        HSLA.prototype.lighter = function(percent) {
            if (!arguments.length || isNaN(+percent) || +percent > 1.0 || +percent < 0.0) {
                percent = 0.1;
            }
            this.l = Math.max(0.1, this.l * (1 - percent));
            return this;
        };

        HSLA.prototype.darker = function(percent) {
            if (!arguments.length || isNaN(+percent) || +percent > 1.0 || +percent < 0.0) {
                percent = 0.1;
            }
            this.l = Math.min(1, this.l * (1 + percent));
            return this;
        };

        HSLA.prototype.toString = function(type) {
            var rgb;
            switch (type) {
                case 'rgb':
                    rgb = hsl2rgb(this.h, this.s, this.l);
                    return 'rgb(' + Math.round(rgb[0]) + ',' + Math.round(rgb[1]) + ',' + Math.round(rgb[2]) + ')';
                case 'rgba':
                    rgb = hsl2rgb(this.h, this.s, this.l);
                    return 'rgba(' + Math.round(rgb[0]) + ',' + Math.round(rgb[1]) + ',' + Math.round(rgb[2]) + ',' +
                        this.a + ')';
                case 'hsl':
                    return 'hsl(' + this.h + ',' + this.s + '%,' + this.l + '%)';
                case 'hsla':
                    return 'hsla(' + this.h + ',' + this.s + '%,' + this.l + '%,' + this.a + ')';
                default:
                    rgb = hsl2rgb(this.h, this.s, this.l);
                    return '#' + toHexString(Math.round(rgb[0])) + toHexString(Math.round(rgb[1])) +
                        toHexString(Math.round(rgb[2]));
            }
        };
        /**
         * Represent a color normalized from css color setting
         *
         * @name sap.viz.base.types.Color
         * @constructor
         */
        var ColorUtils = {
            random: function() {
                var letters = '0123456789ABCDEF'.split('');
                var color = '#';
                for (var i = 0; i < 6; i++) {
                    color += letters[Math.round(Math.random() * 15)];
                }
                return color;
            },
            isCSSColorString: function(cssColorString) {
                return TypeUtils.isString(cssColorString) && /^(#|rgb\(|rgba\(|hsl\(|hsla\()/i.test(cssColorString) ||
                    namedColor.hasOwnProperty(cssColorString);
            },

            isRGBColorString: function(cssColorString) {
                return TypeUtils.isString(cssColorString) && /^(#|rgb\(|rgba\()/i.test(cssColorString) ||
                    namedColor.hasOwnProperty(cssColorString);
            },

            isHSLColorString: function(cssColorString) {
                return TypeUtils.isString(cssColorString) && /^(hsl\(|hsla\()/i.test(cssColorString);
            },

            /**
             * Factory method for creating a color object from valid CSS color
             * string.
             *
             * @param cssColorString
             * @returns {sap.viz.base.types.Color}
             */
            fromCSSColor: function(cssColorString) {
                if (cssColorString.charAt(0) == '#') {
                    return this.fromRGBHexString(cssColorString);
                } else if (cssColorString.substr(0, 4).toLowerCase() == 'rgba') {
                    return this.fromRGBA(cssColorString);
                } else if (cssColorString.substr(0, 3).toLowerCase() == 'rgb') {
                    return this.fromRGB(cssColorString);
                } else if (cssColorString.substr(0, 4).toLowerCase() == 'hsla') {
                    return this.fromHSLA(cssColorString);
                } else if (cssColorString.substr(0, 3).toLowerCase() == 'hsl') {
                    return this.fromHSL(cssColorString);
                } else if (namedColor.hasOwnProperty(cssColorString)) {
                    return this.fromRGBHexString(namedColor[cssColorString]);
                }
            },
            /**
             * Factory method for creating a color object from either valid CSS rgb
             * string or seperated r,g,b components.
             *
             * @param {String|Number}
             *            rgb css rgb string or red component
             * @param {Number}
             *            [g] the green component
             * @param {Number}
             *            [b] the blue component
             * @returns {sap.viz.base.types.Color}
             */
            fromRGB: function(rgb) {
                var red = 0,
                    green = 0,
                    blue = 0;
                if (arguments.length == 1) {
                    var comps = rgb.substring(4, rgb.lastIndexOf(')')).split(',');
                    red = parseRGBValue(comps[0]);
                    green = parseRGBValue(comps[1]);
                    blue = parseRGBValue(comps[2]);
                } else if (arguments.length == 3) {
                    red = arguments[0];
                    green = arguments[1];
                    blue = arguments[2];
                }
                return new RGBA(red, green, blue, 1.0);
            },
            /**
             * Factory method for creating a color object from either valid CSS rgba
             * string or seperated r,g,b,a components.
             *
             * @param {String|Number}
             *            rgb css rgb string or red component
             * @param {Number}
             *            [g] the green component
             * @param {Number}
             *            [b] the blue component
             * @param {Number}
             *            [a] the alpha component
             * @returns {sap.viz.base.types.Color}
             */
            fromRGBA: function(rgba) {
                var red = 0,
                    green = 0,
                    blue = 0,
                    alpha = 0;
                if (arguments.length == 1) {
                    var comps = rgba.substring(5, rgba.lastIndexOf(')')).split(',');
                    red = parseRGBValue(comps[0]);
                    green = parseRGBValue(comps[1]);
                    blue = parseRGBValue(comps[2]);
                    alpha = parseFloat(comps[3]);
                } else if (arguments.length == 4) {
                    red = Math.ceil(arguments[0]);
                    green = Math.ceil(arguments[1]);
                    blue = Math.ceil(arguments[2]);
                    alpha = Math.ceil(arguments[3]);
                }
                return new RGBA(red, green, blue, alpha);
            },
            /**
             * Factory method for creating a color object from either valid CSS
             * numbering color string.
             *
             * @param {String}
             *            hexString css color string like #FFFFFF
             * @returns {sap.viz.base.types.Color}
             */
            fromRGBHexString: function(hexString) {
                var red = 0,
                    green = 0,
                    blue = 0,
                    alpha = 1.0;
                if (hexString.length === 7) {
                    red = hexString.substr(1, 2);
                    green = hexString.substr(3, 2);
                    blue = hexString.substr(5, 2);
                }
                if (hexString.length === 4) {
                    red = hexString.charAt(1);
                    red += red;
                    green = hexString.charAt(2);
                    green += green;
                    blue = hexString.charAt(3);
                    blue += blue;
                }
                return new RGBA(parseInt(red, 16), parseInt(green, 16), parseInt(blue, 16), alpha);
            },
            /**
             * Factory method for creating a color object from either valid CSS hsl
             * color string or hue, saturation, lightness component.
             *
             * @param {String|Number}
             *            hsl css hsl string or hue component
             * @param {Number}
             *            [s] saturation component
             * @param {Number}
             *            [l] lightness component
             * @returns {sap.viz.base.types.Color}
             */
            fromHSL: function(hsl) {
                if (arguments.length == 1) {
                    var comps = hsl.substring(4, hsl.lastIndexOf(')')).split(',');
                    var hue = (parseInt(comps[0]) % 360 + 360) % 360 / 360;
                    var saturation = parsePercentage(comps[1]);
                    var lightness = parsePercentage(comps[2]);
                    return new HSLA(hue, saturation, lightness, 1.0);
                } else if (arguments.length == 3) {
                    return new HSLA(arguments[0], arguments[1], arguments[2], 1.0);
                }
            },
            /**
             * Factory method for creating a color object from either valid CSS hsla
             * color string or hue, saturation, lightness, alpha component.
             *
             * @param {String|Number}
             *            hsl css hsl string or hue component
             * @param {Number}
             *            [s] saturation component
             * @param {Number}
             *            [l] lightness component
             * @param {Number}
             *            [a] alpha component
             * @returns {sap.viz.base.types.Color}
             */
            fromHSLA: function(hsla) {
                if (arguments.length == 1) {
                    var comps = hsla.substring(5, hsla.lastIndexOf(')')).split(',');
                    var hue = (parseInt(comps[0]) % 360 + 360) % 360 / 360;
                    var saturation = parsePercentage(comps[1]);
                    var lightness = parsePercentage(comps[2]);
                    var alpha = parseFloat(comps[3]);
                    return new HSLA(hue, saturation, lightness, alpha);
                } else if (arguments.length == 4) {
                    return new HSLA(arguments[0], arguments[1], arguments[2], arguments[3]);
                }
            },

            /**
             * Adjust the alpha channel of a color, the returned color is in format
             * of rgba(r,g,b,a).
             *
             * @param cssColor
             * @param opacity
             * @returns
             */
            changeOpacity: function(cssColor, opacity) {
                var color = ColorUtils.fromCSSColor(cssColor);
                if (color) {
                    color.a = +opacity;
                    return color.toString('rgba');
                }
            }
        };

        return ColorUtils;
    });
define('sap/viz/framework/common/util/DataGraphics',[],function() {
    var PROP_NAME_CTX = "__data__";
    var PROP_NAME_DATA = "__extra_data__";

    function fillContext(array) {
        var fields = array[0],
            values = array[1];
        if (Array.isArray(fields)) {
            for (var i = 0, len = fields.length; i < len; i++) {
                this[fields[i]] = values[i];
            }
        } else {
            this[fields] = values;
        }
    }

    function buildContext(data) {
        var ctx = {};
        data.forEach(fillContext, ctx);
        return ctx;
    }

    var DataGraphics = {
        buildContext: buildContext,
        setData: function(node, data) {
            node[PROP_NAME_DATA] = data;
        },
        getData: function(node) {
            return node[PROP_NAME_DATA];
        },
        setContext: function(node, data) {
            var ctx = Array.isArray(data) ? buildContext(data) : data;
            node[PROP_NAME_CTX] = ctx;
            return ctx;
        },
        getContext: function(node) {
            return node[PROP_NAME_CTX];
        }
    };

    return DataGraphics;
});
define('sap/viz/framework/common/util/PositionUtil',["sap/viz/framework/common/util/Constants"],
    function Setup(Constants) {

        var PositionUtil = {};

        var isGElement = function(selection) {
            return selection.node().nodeName.toLowerCase() === 'g';
        };
        var isSVGElement = function(selection) {
            return selection.node().nodeName.toLowerCase() === 'svg';
        };
        var isDIV = function(selection) {
            return selection.node().nodeName.toLowerCase() === 'div';
        };
        var isSVG = function(selection) {
            return isGElement(selection) || isSVGElement(selection);
        };

        var positionSVG = function(element, boundry) {
            if (element && boundry) {
                if (isSVGElement(element)) {
                    //if it's SVG element, we should use left/top to position it, instead of transform
                    element.attr('width', boundry.width)
                        .attr('height', boundry.height);
                    element.style('position', 'absolute')
                        .style('box-sizing', 'border-box')
                        .style('left', boundry.x + 'px')
                        .style('top', boundry.y + 'px');
                } else {
                    element.attr('transform', 'translate(' + boundry.x + ', ' + boundry.y + ')');
                }
            }
        };

        var positionDIV = function(element, boundry) {
            if (element && boundry) {
                element.style('position', 'absolute')
                    .style('box-sizing', 'border-box')
                    .style('overflow', 'hidden')
                    .style('width', boundry.width + 'px')
                    .style('height', boundry.height + 'px')
                    .style('left', boundry.x + 'px')
                    .style('top', boundry.y + 'px');
            }
        };

        /*
         * this function helps you to position dom elements (D3 selections) based on passed in layout boundries.
         */
        PositionUtil.positionElements = function(layouts, selections) {
            var iter;
            for (iter in selections) {
                if (selections.hasOwnProperty(iter)) {
                    if (layouts[iter]) {
                        var boundry = layouts[iter];
                        var element = selections[iter];
                        if (isSVG(element)) {
                            positionSVG(element, boundry);
                        } else if (isDIV(selections[iter])) {
                            positionDIV(element, boundry);
                        }
                    }
                }
            }
        };

        PositionUtil.isVertical = function(p) {
            return p === Constants.POSITION.LEFT || p === Constants.POSITION.RIGHT;
        };

        PositionUtil.isHorizontal = function(p) {
            return p === Constants.POSITION.TOP || p === Constants.POSITION.BOTTOM;
        };

        return PositionUtil;
    });
define('sap/viz/framework/common/util/PropertyZoneUtil',['sap/viz/framework/common/util/TypeUtils'],
    function Setup(TypeUtils) {
        var PropertyZoneUtil = {
            calcOffsetFromChart: function(root, result) {
                if (TypeUtils.isExist(root)) {
                    var rootRect = root.getBoundingClientRect();
                    var xOffset = rootRect.left;
                    var yOffset = rootRect.top;
                    var i, j, k, bound, zone, coordinate;
                    for (i = 0; i < result.length; i++) {
                        bound = result[i].bound;
                        for (j = 0; j < bound.length; j++) {
                            zone = bound[j];
                            for (k = 0; k < zone.length; k++) {
                                coordinate = zone[k];
                                coordinate[0] = Math.round(coordinate[0] - xOffset);
                                coordinate[1] = Math.round(coordinate[1] - yOffset);
                            } //zone
                        } //bound
                    } //result
                }
            },
            plot : function(that) {
                return {
                    tempPropertyZone: {
                        plot: {
                            value: [],
                            readonly: true,
                            serializable: false,
                            get: function() {
                                var result = [], node, root; 
                                if (that._selections && that._selections.plot &&
                                 that._selections.plot.node()) {
                                    node = that._selections.plot.node().querySelector(".v-plot-bound");
                                } else if (that._selection) {
                                    node = that._selection.node();//pie, donut
                                }
                                if (node) {
                                    var boundRect = node.getBoundingClientRect();
                                    if (boundRect.width > 1.5 && boundRect.height > 1.5) {
                                        var bound = [
                                            []
                                        ];
                                        bound[0].push([boundRect.left, boundRect.top]);
                                        bound[0].push([boundRect.right, boundRect.top]);
                                        bound[0].push([boundRect.right, boundRect.bottom]);
                                        bound[0].push([boundRect.left, boundRect.bottom]);
                                        result.push({
                                            "name": 'plot',
                                            "bound": bound
                                        });
                                    }
                                    root = node.ownerSVGElement;
                                }
                                PropertyZoneUtil.calcOffsetFromChart(root, result);
                                return result;
                            }
                        }
                    }
                };
            },
            getBounds: function(node, clipPath) {
                var rBound = [];
                rBound.push([node.left, node.top]);
                rBound.push([node.right, node.top]);
                rBound.push([node.right, node.bottom]);
                rBound.push([node.left, node.bottom]);
                var cBound = [];
                cBound.push([clipPath.left, clipPath.top]);
                cBound.push([clipPath.right, clipPath.top]);
                cBound.push([clipPath.right, clipPath.bottom]);
                cBound.push([clipPath.left, clipPath.bottom]);
                var result = [[]];
                result[0].push([(rBound[0][0] > cBound[0][0] ? rBound[0][0] : cBound[0][0]),
                    (rBound[0][1] > cBound[0][1] ? rBound[0][1] : cBound[0][1])]);
                result[0].push([(rBound[1][0] < cBound[1][0] ? rBound[1][0] : cBound[1][0]),
                    (rBound[1][1] > cBound[1][1] ? rBound[1][1] : cBound[1][1])]);
                result[0].push([(rBound[2][0] < cBound[2][0] ? rBound[2][0] : cBound[2][0]),
                    (rBound[2][1] < cBound[2][1] ? rBound[2][1] : cBound[2][1])]);
                result[0].push([(rBound[3][0] > cBound[3][0] ? rBound[3][0] : cBound[3][0]),
                    (rBound[3][1] < cBound[3][1] ? rBound[3][1] : cBound[3][1])]);
                return result;
            },
            top : function(node, clipPath, root) {
                var result = {};
                var xAxis2 = node.select('.v-m-xAxis2').node() ?
                    node.select('.v-m-xAxis2').node().parentNode.getBoundingClientRect() : null;
                var clip = clipPath.select('rect').node().getBoundingClientRect();
                if (TypeUtils.isExist(xAxis2)) {
                    result.valueAxis = [];
                    result.valueAxis.push({name : 'valueAxis', bound : PropertyZoneUtil.getBounds(xAxis2, clip)});
                    PropertyZoneUtil.calcOffsetFromChart(root, result.valueAxis);
                }
                return result;
            },
            bottom : function(node, clipPath, root, type) {
                var result = {};
                var xAxis = node.select('.v-m-xAxis').node() ?
                    node.select('.v-m-xAxis').node().parentNode.getBoundingClientRect() : null;
                var xAxis2 = node.select('.v-m-xAxis2').node() ?
                    node.select('.v-m-xAxis2').node().parentNode.getBoundingClientRect() : null;
                var columnAxis = node.select('.v-m-trellis-axis').node() ? 
                     node.select('.v-m-trellis-axis').node().parentNode.getBoundingClientRect() : null;
                var clip = clipPath.select('rect').node().getBoundingClientRect();
                if (TypeUtils.isExist(xAxis)) {
                    result[type] = [];
                    result[type].push({name : type, bound : PropertyZoneUtil.getBounds(xAxis, clip)});
                    PropertyZoneUtil.calcOffsetFromChart(root, result[type]);
                }
                if (TypeUtils.isExist(xAxis2)) {
                    result[type] = [];
                    result[type].push({name : type, bound : PropertyZoneUtil.getBounds(xAxis2, clip)});
                    PropertyZoneUtil.calcOffsetFromChart(root, result[type]);
                }
                if (TypeUtils.isExist(columnAxis)) {
                    result.trellisColumn = [];
                    result.trellisColumn.push({name : 'trellisColumn', 
                        bound : PropertyZoneUtil.getBounds(columnAxis, clip)});
                    PropertyZoneUtil.calcOffsetFromChart(root, result.trellisColumn);
                }
                return result;
            },
            left : function(node, clipPath, root, type) {
                var result = {};
                var yAxis = node.select('.v-m-yAxis').node() ?
                    node.select('.v-m-yAxis').node().parentNode.getBoundingClientRect() : null;
                var rowAxis = node.select('.v-m-trellis-axis').node() ? 
                     node.select('.v-m-trellis-axis').node().parentNode.getBoundingClientRect() : null;
                var clip = clipPath.select('rect').node().getBoundingClientRect();
                if (TypeUtils.isExist(yAxis)) {
                    result[type] = [];
                    result[type].push({name : type, bound : PropertyZoneUtil.getBounds(yAxis, clip)});
                    PropertyZoneUtil.calcOffsetFromChart(root, result[type]);
                }
                if (TypeUtils.isExist(rowAxis)) {
                    result.trellisRow = [];
                    result.trellisRow.push({name : 'trellisRow', bound : PropertyZoneUtil.getBounds(rowAxis, clip)});
                    PropertyZoneUtil.calcOffsetFromChart(root, result.trellisRow);
                }
                return result;
            },
            right : function(node, clipPath, root) {
                var result = {};
                var yAxis2 = node.select('.v-m-yAxis2').node() ?
                    node.select('.v-m-yAxis2').node().parentNode.getBoundingClientRect() : null;
                var clip = clipPath.select('rect').node().getBoundingClientRect();
                if (TypeUtils.isExist(yAxis2)) {
                    result.valueAxis2 = [];
                    result.valueAxis2.push({name : 'valueAxis2', bound : PropertyZoneUtil.getBounds(yAxis2, clip)});
                    PropertyZoneUtil.calcOffsetFromChart(root, result.valueAxis2);
                }
                return result;
            }
        };

        return PropertyZoneUtil;
    });

define('sap/viz/framework/common/util/SVG',[],function() {
    var svgNS = 'http://www.w3.org/2000/svg';
    return {
        create: function(tagName, refNode, insert) {
            var doc = refNode ? refNode.ownerDocument : window.document;
            var ns = refNode ? refNode.namespaceURI : svgNS;
            var node = doc.createElementNS(ns, tagName);
            return refNode ? (insert ? refNode.parentNode.insertBefore(node, refNode) : refNode.appendChild(node)) :
                node;
        }
    };
});
define('sap/viz/framework/interaction/BehaviorFactory',[
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/framework/interaction/Behavior",
    "sap/viz/framework/interaction/ActionItem"
], function(TypeUtils, Behavior, ActionItem) {

    function configBehavior(behavior, configs) {
        configs.forEach(function(c) {
            if (TypeUtils.isArray(c)) {
                c.forEach(function(e) {
                    behavior.addAction(e.id, new ActionItem(e));
                });
            }
        });
    }

    var BehaviorFactory = {
        buildBehavior: function(configs) {
            var behavior = new Behavior();
            var c = configs;
            if (!TypeUtils.isArray(configs)) {
                c = [configs];
            }
            configBehavior(behavior, c);
            return behavior;
        }
    };

    return BehaviorFactory;
});
define('sap/viz/framework/scale/OrdinalScale',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/framework/scale/BaseScale'
], function(oo, BaseScale) {

    /*
     * Used for color scale and shape scale
     */
    var OrdinalScale = function(domain, range) {
        OrdinalScale.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.scale.OrdinalScale";
    };

    oo.extend(OrdinalScale, BaseScale);

    var stringify = function(s) {
        if (s != null) {
            return "_" + s;
        } else {
            return "null";
        }
    };
    var valuesToString = function(values) {
        var ret = "";
        for (var i = 0; i < values.length; ++i) {
            if (i !== 0) {
                ret += "/";
            }
            ret += stringify(values[i]);
        }
        return ret;
    };

    OrdinalScale.prototype.scale = function(value) {
        if (this._scale === undefined) {
            this._scale = d3.scale.ordinal();
            var domain = [];
            for (var i = 0, len = this._domain.length; i < len; i++) {
                domain.push(valuesToString(this._domain[i]));
            }
            var range = this._range.concat([]);
            this._range = range.splice(0, domain.length);
            this._scale.domain(domain).range(this._range);
        }

        return this._scale(valuesToString(value));
    };

    return OrdinalScale;
});
define('sap/viz/framework/scale/SizeScaleUtil',["sap/viz/framework/common/util/NumberUtils"],
    function(NumberUtils) {
    
        var MIN_MARKER_SIZE = 4;
        var DEFAULT_MARKER_SIZE = 10;
    
        var Scaler = {
                
            build: function(minMarkerSize, maxSize, domain) {
                    
                var minSize;
                if (minMarkerSize) {
                    if (minMarkerSize < 0) {
                        minMarkerSize = DEFAULT_MARKER_SIZE;
                    }
                    minSize = minMarkerSize < maxSize ? minMarkerSize : maxSize;
                }
                
                var vMin = domain[0],
                    vMax = domain[1];
                var withNoValue = domain.withNoValue ? domain.withNoValue : false;
                
                return function(value) {
                    if (NumberUtils.isNoValue(value) || (NumberUtils.isNoValue(vMax) && NumberUtils.isNoValue(vMin))) {
                        return minSize ? minSize : MIN_MARKER_SIZE;
                    }
                    if (vMin === vMax) {
                        if (withNoValue) {
                            return maxSize;
                        } else {
                            return DEFAULT_MARKER_SIZE;
                        }
                    }
                    var r;
                    if (minSize) {
                        if (vMax > vMin && value >= vMin && value <= vMax) {
                            r = Math.pow((Math.abs(value) - vMin) / (vMax - vMin), 0.5) * (maxSize - minSize) + minSize;
                        } else {
                            r = minSize;
                        }
                    } else {
                        r = Math.pow(Math.abs(value) / vMax, 0.5) * maxSize;
                    }
                    return r > MIN_MARKER_SIZE ? r : MIN_MARKER_SIZE;
                };
            }
        };
    
        return Scaler;
    });

define('sap/bi/framework/BundleLoader/ServicePlugin',[], function() {
    

    /**
     * RequireJS plugin that loads services from the kernel.
     * Example usage: "service!sap.bi.myservice".
     */
    function ServicePlugin(kernel) {
        this._kernel = kernel;
    }

    ServicePlugin.prototype.load = function(name, parentRequire, onload, config) {
        var logger = this._kernel.getInstance("core.logger");
        if (logger) {
            logger("ServicePlugin is loading '" + name + "'");
        }
        onload(this.getService(name));
    };

    ServicePlugin.prototype.getService = function(name) {
        //parse the name
        var cardinality;
        if (name[0] === "*") {
            cardinality = "multiple";
            name = name.slice(1);
            return this._kernel.getAllInstances(name);
        }
        else {
            cardinality = "single";
            return this._kernel.getInstance(name);
        }
    };

    ServicePlugin.prototype.getServiceForBundle = function(bundle, service) {
        return this.getService(service);
    };

    ServicePlugin.load = function(name, req, onload, config) {
        onload({});
    };

    return ServicePlugin;
});
define('sap/bi/framework/BundleLoader/ServiceMetadataPlugin',[], function() {
    

    /**
     * RequireJS plugin that loads service metadata from the kernel.
     * Example usage: "serviceMetadata!sap.bi.myservice".
     */
    function ServiceMetadataPlugin(kernel) {
        this._kernel = kernel;
    }

    ServiceMetadataPlugin.prototype.load = function(name, parentRequire, onload, config) {
        var logger = this._kernel.getInstance("core.logger");
        if (logger) {
            logger("ServiceMetadataPlugin is loading '" + name + "'");
        }
        onload(this.getServiceMetadata(name));
    };

    ServiceMetadataPlugin.prototype.getServiceMetadata = function(name) {
        // Component exported metadata should always exist as this bag contains required component attributes
        if (name[0] === "*") {
            name = name.slice(1);
            return this._kernel.getAll(name).map(function(component) {
                return component.exportedMetadata;
            });
        } else {
            var service = this._kernel.get(name);
            return service ? service.exportedMetadata : undefined;
        }
    };

    ServiceMetadataPlugin.load = function(name, req, onload, config) {
        onload({});
    };

    return ServiceMetadataPlugin;
});
define('sap/bi/framework/BundleLoader/ImportPlugin',[], function() {
    

    /**
     * RequireJS plugin that loads imports from a given source bundle.
     * Example usage: "import!source.bundle.id:Some/Module".
     */
    function ImportPlugin(kernel) {
        this._kernel = kernel;
    }

    ImportPlugin.prototype.load = function(name, parentRequire, onload, config) {
        var logger = this._kernel.getInstance("core.logger");
        if (logger) {
            logger("ImportPlugin is loading '" + name + "'");
        }

        var bundleLoaderHelpers = this._kernel.getInstance("bundleLoader.getHelpers");
        var nameComponents = name.split(":");
        nameComponents[1] = bundleLoaderHelpers.stripLeading(nameComponents[1], "/");

        Q(bundleLoaderHelpers.getBundlePromise(nameComponents[0])).then(function(sourceBundleMetadata) {

            if (!sourceBundleMetadata) {
                throw new Error("Error importing " + nameComponents[1] + " from non-existent bundle " + nameComponents[0]);
            }

            if (!sourceBundleMetadata.exports ||
                !(sourceBundleMetadata.exports.some(function(exported) {
                    return bundleLoaderHelpers.startsWith(nameComponents[1], exported);
                }))) {
                throw new Error("Attempting to import " + nameComponents[1] + " which is not exported by " + nameComponents[0]);
            }

            bundleLoaderHelpers.getRequireContext(nameComponents[0])([nameComponents[1]], onload, onload.error);
        }).fail(function(err) {
            onload.error(err);
        });
    };

    ImportPlugin.load = function(name, req, onload, config) {
        onload({});
    };

    return ImportPlugin;
});
/**
 * A requirejs CSS module.
 */
define('sap/bi/framework/BundleLoader/CssPlugin',[], function() {
    
    
    function CssPlugin(resourceLoaderFunction, log) {
        this._resourceLoaderFunction = resourceLoaderFunction;
        this._log = log;
    }
    
    // Compatibility functions:

    // Gets the document head in a cross-browser manner  
    var getHead = function () {
        return document.head || document.getElementsByTagName("head")[0] || document.documentElement;
    };
    
    // Convert a url into a fully qualified url.
    var qualifyUrl = function(url) {
        if(/^http[s]?:\/\//.test(url)) {
            return url;
        } else {
            var a = document.createElement('a');
            a.href = url;
            return a.href;
        }
    };

    // Convert any relative urls within the css to absolute urls.
    var convertRelativeUrlsToAbsolute = function(log, absoluteCssUrl, css) {
        // The relative url's are all relative to the css file.  Strip the css file name
        // off of its absolute url to use as a base for building our new urls.
        // Base url should look like "http://machine:port/sap/bi/bundles/sap/bi/va/common/stylesheets/"
        var idx = absoluteCssUrl.lastIndexOf("/");
        var baseUrl = absoluteCssUrl.substring(0, idx + 1);

        // Matches something like: url('../images/foo.png')
        var URL_REGEX = /url ?\((\"|\')?([a-zA-Z0-9\.\/\-\_]*)(\"|\')?\)/gm;
        var result = css.replace(URL_REGEX, function(fullMatch, openQuote, relUrl, closeQuote, offset, fullString){
            if (relUrl && relUrl.length > 0) {
                // Should produce a full url like this:
                // "http://machine:port/sap/bi/bundles/sap/bi/va/common/stylesheets/../images/foo.png"
                log("Converting " + relUrl + " to " + (baseUrl + relUrl));
                return "url(" + baseUrl + relUrl + ")";
            }
        });
        return result;
    };

    //The RequireJS module methods
    CssPlugin.prototype.normalize = function(name, normalizer) {
        if (!/\.css$/.test(name)) {
            name = name + ".css";
        }

        return normalizer(name);
    };

    CssPlugin.prototype.load = function (name, req, load, config) {
        
        var cssUrl = (req.toUrl ? req.toUrl(name) : name);
        var originalUrl;
        if (this._resourceLoaderFunction) {
            // A resource loader function has been provided - see if it can load the content for this css url.
            var cssContent = this._resourceLoaderFunction(cssUrl);
            if(cssContent) {
                // We do have content for the css!  Make sure it doesn't have any relative urls as they will be broken.
                var absoluteCssUrl = qualifyUrl(cssUrl);
                cssContent = convertRelativeUrlsToAbsolute(this._log, absoluteCssUrl, cssContent);
                
                // Add source url to help with debugging
                cssContent += "\n/*# sourceURL="+ absoluteCssUrl + " */";
               
                // Create an object url for it so it can be linked into
                // the html doc just like it was a remote resource.
                this._log("CssPlugin.load() returning cached content for url: " + cssUrl);
                originalUrl = cssUrl;
                var URLFactory = window.URL || window.webkitURL;
                var cssBlob = new Blob([cssContent], {type: 'text/css'});
                cssUrl = URLFactory.createObjectURL(cssBlob);
            } else {
                this._log("CssPlugin.load() loading from network for url: " + cssUrl);
            }
        }
        
        var link = document.createElement("link");
        
        link.type = "text/css";
        link.rel = "stylesheet";
        link.href = cssUrl;
        
        if (originalUrl) {
            link.setAttribute("bundle_cache_src", originalUrl);
        }

        link.onload = function(e) {
            load(this.sheet);
            this.onerror = this.onload = null;
        };
        link.onerror = function(e) {
            load.error(new Error("Failed to load " + this.href));
            this.onerror = this.onload = null;
        };

        getHead().appendChild(link);

        if (window.navigator.userAgent.indexOf("PhantomJS") !== -1) {
            /*
             * PhantomJS (the headless browser we use for unit testing) is based on an old version of
             * Webkit that doesn't fire load/error events on stylesheet links. So we simulate them by
             * polling the document.styleSheets collections (which is not updated until the stylsheet
             * finishes loading).
             */
            
            var href = link.href;
            var intervalId = window.setInterval(function() {
                var stylesheets = Array.prototype.slice.call(document.styleSheets); //convert to proper array
                var matchingStylesheets = stylesheets.filter(function(styleSheet) {
                    return styleSheet.href === href;
                });
                
                if (matchingStylesheets.length > 0) {
                    window.clearInterval(intervalId);
                    link.sheet = matchingStylesheets[0];
                    if (link.onload) {
                        link.onload();
                    }
                }
            }, 10);
        }
    };
    
    CssPlugin.prototype.pluginBuilder = "cssBuilder";
        
    return CssPlugin;
});

/*
 * Override the default XMLHttpRequest object so that we can intercept outbound calls
 * going through it and try to satisfy them with resources loaded in some other way (like from RequireJS).
 */
define('sap/bi/framework/BundleLoader/XHRInterceptor',['require'],function(require) {
    

    function createInterceptor(resourceLoaderFunction, originalXmlHttpRequestConstructor, log) {

        function qualifyURL(url) {
            if(/^http[s]?:\/\//.test(url)) {
                return url;
            } else {
                var a = document.createElement('a');
                a.href = url;
                var origin = window.location.origin ? window.location.origin : (window.location.protocol + "//" + window.location.host);
                var absoluteHref = a.href.slice(origin.length);
                return absoluteHref;
            }
        }

        var XMLHttpRequest = function() {
            this.originalXHRConstructor = originalXmlHttpRequestConstructor;
            this.originalXHR = new this.originalXHRConstructor();
            var myXHR = this;
            this.originalXHR.onreadystatechange = function(){myXHR.onreadystatechangefunction();};
            return this;
        };

        XMLHttpRequest.prototype.isXHRInterceptor = true;

        XMLHttpRequest.prototype.getOriginalXmlHttpRequestConstructor = function () {
            return this.originalXHRConstructor;
        };

        XMLHttpRequest.prototype.open = function (method, url, async, user, password) {
            this.url = qualifyURL(url);
            return this.originalXHR.open(method, url, async, user, password); //send it on
        };

        XMLHttpRequest.prototype.setRequestHeader = function(header, value) {
            this.originalXHR.setRequestHeader(header, value);
        };

        XMLHttpRequest.prototype.send = function(postBody) {

            var contentForUrl = this.url && resourceLoaderFunction(this.url);

            if(contentForUrl !== undefined && contentForUrl !== null) {
                log("XHRInterceptor.send() returning cached content for url: " + this.url);
                this.wasIntercepted = true;

                this.response = contentForUrl;
                this.responseText = this.response;
                this.readyState = 4;
                this.responseXML = null;
                this.status = 200;
                this.statusText = "OK";

                if(this.onreadystatechange) {
                    this.onreadystatechange();
                }

                return;
            }

            try {
                log("XHRInterceptor.send() using original xhr for url: " + this.url);
                return this.originalXHR.send(postBody);
            } catch(e) {
// TODO - double check that this is still a problem.  Maybe I can get rid of this catch block?
                // The default XHR behaviour seemed to be to throw an error and then fire the readyStateChangedEvent.
                // This seemed to break with the interceptor so try to fix it by manually firing
                // the event here and then re-throw the error.
                this.onreadystatechangefunction();
                throw e;
            }

        };

        // overrideMimeType is not supported in IE
        if ((new originalXmlHttpRequestConstructor()).overrideMimeType) {
            XMLHttpRequest.prototype.overrideMimeType = function() {
                return this.originalXHR.overrideMimeType.call(this.originalXHR, arguments);
            };
        }

        XMLHttpRequest.prototype.getAllResponseHeaders = function() {
            if(this.wasIntercepted) {
                if(this.url.match(/\.js$/)) {
                    return "Content-Type: application/x-javascript";
                } else {
                    return "";
                }
            } else {
                return this.originalXHR.getAllResponseHeaders.call(this.originalXHR, arguments);
            }

        };

        XMLHttpRequest.prototype.getResponseHeader = function() {
            return this.originalXHR.getResponseHeader.call(this.originalXHR, arguments);
        };

        XMLHttpRequest.prototype.onreadystatechangefunction = function() {
            this.readyState = this.originalXHR.readyState;
            if (this.readyState === 4) {
                // The request has completed so we should have valid status and response values.
                this.responseText = this.originalXHR.responseText;
                this.responseXML = this.originalXHR.responseXML;
                this.status = this.originalXHR.status;
                this.statusText = this.originalXHR.statusText;
            } else {
                this.responseText = undefined;
                this.responseXML = undefined;
                this.status = undefined;
                this.statusText = undefined;
            }

            if(this.onreadystatechange) {
                this.onreadystatechange();
            }
        };

        return XMLHttpRequest;
    }

    function uninstallInterceptor() {
        var origXHR = new window.XMLHttpRequest();
        if (origXHR && origXHR.isXHRInterceptor) {
            // The default XmlHttpRequest has already been overridden by an interceptor.  We need to remove that interceptor instance
            // and restore the default XHR.
            window.XMLHttpRequest = origXHR.getOriginalXmlHttpRequestConstructor();
        }
    }

    function installInterceptor(resourceLoaderFunction, log) {
        // Try to uninstall the interceptor to remove any copies that might have previously been installed.
        uninstallInterceptor();

        log("Installing XHRInterceptor...");
        var interceptor = createInterceptor(resourceLoaderFunction, window.XMLHttpRequest, log);
        window.XMLHttpRequest = interceptor;
    }


    return {
        installInterceptor: installInterceptor,
        uninstallInterceptor: uninstallInterceptor
    };
});
/**
 * This bundle loader uses promises extensively. The overall workflow is described below where each step is 'blocked' waiting on the
 * promise provided in the previous step:
 * - Loop through the config to determine the root bundles to load. For each bundle
 *     - Construct bundle-specific require context
 *     - Attempt to load a bundle
 *         - Resolve bundle - involves loading bundle manifest with bundle-specific require to read contents
 *         - Load all the dependent bundles (a promise which blocks loading of the current bundle)
 *           ** this step (utilizing loadAfter property) is to be deprecated **
 *         - For each component in bundle, construct component factory and place into data structure
 *           that maps service ID -> factories of components implementing service
 * - Once all bundles are loaded the components need to be activated (registered with the kernel)
 *     - For each service
 *           - For each component factory for service
 *               - Activate dependent providers
 *               - Activate component by registering it's factory with kernel
 *                 (Places it into kernel datastructure that maps from service ID -> component)
 *                 If the component is provided by a 'module', its factory is constructed via
 *                 loading the module's file using requireJS.
 * - Finally call the completion callback provided
 *
 * After all this, consumers of kernel services can utilize the service plugin(s) to obtain instances
 * of component(s) providing a particular service.
 */
define('sap/bi/framework/BundleLoader/BundleLoader',["require", "./ServicePlugin", "./ServiceMetadataPlugin", "./ImportPlugin", "./CssPlugin", "./XHRInterceptor"],
function(parentRequire, ServicePlugin, ServiceMetadataPlugin, ImportPlugin, CssPlugin, XHRInterceptor) {
    

    var log = function(msg) {
        var logger = this._kernel.getInstance("core.logger");
        if (logger) {
            logger(msg);
        }
    };

    var notify = function(eventType, event) {
        var listeners = this._kernel.getAllInstances("core.listener");
        if (listeners) {
            listeners.forEach( function(listener) {
               listener(eventType, event);
            });
        }
    };

    var convertBundleIdToPath = function(bundleId) {
        return bundleId.replace(/\./g, "/");
    };

    var convertBundleIdToModuleId = function(bundleId) {
        var lastDot = bundleId.lastIndexOf(".");
        var bundleClass = bundleId.substr(lastDot + 1, bundleId.length);
        return bundleClass + "-bundle";
    };

    var processUI5Metadata = function(ui5Metadata, bundleId, bundleFullUrl) {
        // Helper to detect duplicate registrations and produce warning
        var registerUI5ModulePath = function(ui5Module, path) {
            if (this._registeredUI5ModulePaths[ui5Module]) {
                log.apply(this, ["Warning: UI5 module '" + ui5Module + "' bound to path '" + this._registeredUI5ModulePaths[ui5Module] +
                                 "' is being replaced by '" + path + "' by bundle '" + bundleId + "'"]);
            }
            window.$.sap.registerModulePath(ui5Module, path);
        }.bind(this);
        // Register UI5 module paths
        if (window.$ && window.$.sap && window.$.sap.registerModulePath) {
            // Default path to set for every bundle
            registerUI5ModulePath(bundleId, bundleFullUrl);
            // User-specified mappings
            if (ui5Metadata && ui5Metadata.moduleMapping) {
                var mappings = Object.keys(ui5Metadata.moduleMapping);
                mappings.forEach(function(key) {
                    registerUI5ModulePath(key, bundleFullUrl + "/" + ui5Metadata.moduleMapping[key]);
                });
            }
        }
    };

    /**
     * Extend a given base require config with settings from a given ext require config.
     * Settings from ext will only be applied to base if they don't already exist, OR overwirte flag is true.
     * Note: Use of user-defined require config is discouraged. There are likely ways to get around
     *       any problems you have without having to specify require config settings.
     *       If you need to specify such settings, your bundle isn't portable (and it should be),
     *       as it is now tied to the execution environment.
     */
    var extendRequireConfig = function(base, ext, overwrite) {
        if (!ext) {
            ext = this._requireConfig;
        }
        for (var key in ext) {
            if (ext.hasOwnProperty(key)) {
                if (!base[key] || overwrite === true) {
                    base[key] = ext[key];
                }
            }
        }
        return base;
    };

    var startsWith = function(str, prefix) {
        return str.indexOf(prefix) === 0;
    };

    var endsWith = function(str, suffix) {
        return str.indexOf(suffix, str.length - suffix.length) !== -1;
    };

    var stripLeading = function(str, prefix) {
        if (startsWith(str, prefix)) {
            str = str.substring(prefix.length);
        }
        return str;
    };

    var stripTrailing = function(str, suffix) {
        if (endsWith(str, suffix)) {
            str = str.substring(0, str.length - suffix.length);
        }
        return str;
    };

    /**
     * It's not clear what the best way to determine the base Url currently being used by the application.
     * However, we need that URL so we can use the same base when creating a new RequireJS context for each
     * bundle implementation being loaded. This function encapsulates the magic by which we determine the baseUrl.
     *
     * Note: only reason bundle ID is needed here is due to the potential usage of requireJS 'paths',
     *       which need the full path to the bundle root to know when to re-direct.
     */
    var getRequireJSBaseUrl = function(bundleId) {
        var url = parentRequire.toUrl("").split("?")[0];
        if (bundleId) {
            var dummyFileName = convertBundleIdToPath(bundleId) + "/foo";
            url = parentRequire.toUrl(dummyFileName).split("?")[0];
            url = stripTrailing(url, ".js");
            url = stripTrailing(url, dummyFileName);
        }
        return stripTrailing(url, "/");
    };

    /**
    * Given a bundle's require context, obtain a url (if specified) based on the bundle's root URL.
    */
    var getBundleUrl = function(requireContext, url) {
        url = url || "";
        var bundleBaseUrl = requireContext.toUrl(url).split("?")[0];
        return stripTrailing(bundleBaseUrl, "/");
    };

    /**
    * Given a bundle's require context, attempt to resolve the bundle ID.
    */
    var getBundleId = function(requireContext) {
        return this._bundlePaths[getBundleUrl(requireContext)];
    };

    /**
    * Given a bundle ID, return its promise.
    */
    var getBundlePromise = function(bundleId) {
        return this._bundles[bundleId];
    };

    /**
    * Given a bundle ID, obtain the require context.
    */
    var getRequireContext = function(bundleId) {
        return this._bundleRequires[bundleId];
    };

    /**
     * Gets full URL of a URL that is relative to bundle base.
     */
    var getFullUrl = function(bundleBaseUrl, urlRelativeToBundleBase, bundleId) {
        var fullUrl = getRequireJSBaseUrl(bundleId);
        fullUrl += (bundleBaseUrl ? "/" + bundleBaseUrl : "");
        fullUrl += (urlRelativeToBundleBase ? "/" + urlRelativeToBundleBase : "");
        return fullUrl;
    };

    /**
    * Clean-up bundle loader state that should not persist across sessions of bundle loading.
    * This includes component factories. Without cleaning this, subsequent bundle loading sessions will hit the
    * already-processed component factories for a given service and not bother loading any new components implementing said service.
    */
    var cleanupState = function() {
        this._componentFactories = {};
    };

    /**
     * Create a resource loader function that can be used by the XHRInterceptor to load resources from requirejs 
     * rather than calling out over the network.  This assumes that the resource was defined as a module in the 
     * bundle.js file which has already been loaded and defined by requirejs.
     */
    var createResourceLoaderFunction = function(bundleLoader) {
        var resourceLoaderFunction = function(url) {
            // Figure out if this url points into one of the bundles we have loaded.
            // Some example values to try to help explain what is going on...
            // incoming url="/C:/p4/dt_hanabi/src/BIFramework/test/sap/bi/framework/BundleLoader/bundles/XHRInterceptor/resources/strings_en.properties"
            // bundleLoader._config.baseurl="test/sap/bi/framework/BundleLoader/bundles"
            // bundleLoader._bundlePaths={"../../../../test/sap/bi/framework/BundleLoader/bundles/XHRInterceptor":"XHRInterceptor"}
            
            // If there is a base url (as in the examples above) we need to adjust the url to account for the requirejs configurations
            // both inside and outside the bundleloader.
            var currPath = url;
            if (bundleLoader._config.baseUrl) {
                var matchIdx = currPath.indexOf(bundleLoader._config.baseUrl);
                if (matchIdx === -1) {
                    // The url is aimed somewhere else so it must not be a bundle resource
                    return undefined;
                }
                
                if (matchIdx !== 0) {
                    // There is something in the url before the baseUrl - strip it off and build our own requirejs url.
                    currPath = url.substring(matchIdx);
                    currPath = getFullUrl(currPath);
                }
            }
            
            // At this point we should have something that looks like "../../../../test/sap/bi/framework/BundleLoader/bundles/XHRInterceptor/resources/strings_en.properties"
            // Go thru the bundlePaths to find the one that matches this path - specifically we want the LONGEST match.
            var matchingBundlePath = "";
            Object.keys(bundleLoader._bundlePaths).forEach(function(existingPath){
                if (currPath.indexOf(existingPath) === 0) {
                    // We found a match - see if it is longer than any previous matches.
                    if (existingPath.length > matchingBundlePath.length) {
                        matchingBundlePath = existingPath;
                    }
                }
            });
            
            if (matchingBundlePath.length > 0) {
                // It looks like the url is pointing into one of our bundles.  Get the requirejs context and see if the module exists.
                var matchingBundleId = bundleLoader._bundlePaths[matchingBundlePath];
                var matchingBundleRequireContextId = bundleLoader._id + "_" + matchingBundleId;
                var matchingBundleRequireContext = window.requirejs.s.contexts[matchingBundleRequireContextId];
                if (matchingBundleRequireContext) {
                    // Strip the original url to just the parts internal to the bundle and make sure it is
                    // a module that requirejs knows about.
                    var bundlePathPart = convertBundleIdToPath(matchingBundleId);
                    var bundlePathIdx = url.indexOf(bundlePathPart);
                    if (bundlePathIdx !== -1) {
                        var bundleInternalPath = "resource:" + url.substring(bundlePathIdx + bundlePathPart.length + 1); // +1 to get rid of the slash after the bundle id.

                        // Remove any url parameters if they exist.
                        var urlParamIdx = bundleInternalPath.indexOf("?");
                        if (urlParamIdx > 0) {
                            bundleInternalPath = bundleInternalPath.substring(0, urlParamIdx);
                        }
                        
                        // Check if requirejs knows about this url and if so, get the contents.
                        if (matchingBundleRequireContext.require.specified(bundleInternalPath)) {
                            // Trick the requirejs context into being synch rather than asynch and get the resource's module.
                            var origNextTick = matchingBundleRequireContext.nextTick;
                            var retVal;
                            try {
                                matchingBundleRequireContext.nextTick = function(fn) { fn(); };
                                matchingBundleRequireContext.require([bundleInternalPath], function(content){
                                    retVal = content;
                                });
                            } finally {
                                matchingBundleRequireContext.nextTick = origNextTick;
                            }
                            
                            if (retVal) {
                                return retVal;
                            }
                        }
                    }
                }
            }
            return undefined;
        };
        return resourceLoaderFunction;
    };
    
    var initializeRequirePlugins = function (bundleLoader) {
        var result = {};
        
        // Register a "service!" requirejs plugin for bundle loader instance
        var servicePlugin = new ServicePlugin(bundleLoader._kernel);
        define("service", servicePlugin);
        result.servicePlugin = servicePlugin;

        // Register a "serviceMetadata!" requirejs plugin for bundle loader instance
        var serviceMetadataPlugin = new ServiceMetadataPlugin(bundleLoader._kernel);
        define("serviceMetadata", serviceMetadataPlugin);
        result.serviceMetadataPlugin = serviceMetadataPlugin;

        // Register a "import!" requirejs plugin for bundle loader instance
        var importPlugin = new ImportPlugin(bundleLoader._kernel);
        define("import", importPlugin);
        result.importPlugin = importPlugin;

        // Register a "css!" requirejs plugin for bundle loader instance
        var resourceLoader;
        if (bundleLoader._config.enableXHRInterceptor) {
            resourceLoader = createResourceLoaderFunction(bundleLoader);
        }

        var logger = bundleLoader._kernel.getInstance("core.logger");
        var cssPlugin = new CssPlugin(resourceLoader, logger);
        define("css", cssPlugin);
        result.cssPlugin = cssPlugin;
        
        return result;
    };


    /**
     *  Constructor for the Bundle Loader
     */
    function BundleLoader(kernel, config) {
        var requireConfig = config.requireConfig || {};
        requireConfig.context = requireConfig.context || (new Date()).getTime();
        this._id = requireConfig.context;
        this._kernel = kernel;
        this._config = config;
        this._requireConfig = requireConfig;

        config.repoPath = config.repoPath || "";
        config.repoPath = startsWith(config.repoPath, "http") ? config.repoPath :
                          getFullUrl(config.baseUrl, config.repoPath);

        // Declare new require context for this instance of bundle loader
        this._require = require.config(extendRequireConfig.apply(this, [{
            baseUrl: getFullUrl(config.baseUrl)
        }]));

        // Immediately associate loader plugins to the bundle loader's require context
        var requirePlugins = initializeRequirePlugins(this);
        this._require([]);

        window.sap = window.sap || {};
        window.sap.bi = window.sap.bi || {};
        window.sap.bi.framework = window.sap.bi.framework || {};

        // Global to store bundle IDs that have been loaded into require framework.
        // Used by bundle loader afterwards to register bundles with kernel.
        window.sap.bi.framework.contexts = window.sap.bi.framework.contexts || {};

        // Register "service!" and "serviceMetadata!" as a global variables for access outside of AMD code
        // TODO: Using these global calls will fail in the case where multiple BundleLoader instances
        // exist as they will overwrite each other. These need to be deprecated and removed.
        window.sap.bi.framework.getService = window.sap.bi.framework.getService || function(bundleId, serviceId) {
            return requirePlugins.servicePlugin.getServiceForBundle(bundleId, serviceId);
        };
        window.sap.bi.framework.getServiceMetadata = window.sap.bi.framework.getServiceMetadata || function(serviceId) {
            return requirePlugins.serviceMetadataPlugin.getServiceMetadata(serviceId);
        };
        // This function is really here to make it easier to find the metadata json inside bundle.js file, especially when minified
        window.sap.bi.framework.declareBundle = window.sap.bi.framework.declareBundle || function(bundle) {
            // Just return the bundle without doing anything.
            return bundle;
        };

        // Define provided capabilities
        window.sap.bi.framework.capabilities = window.sap.bi.framework.capabilities || {};
        window.sap.bi.framework.capabilities.bundleLoading = window.sap.bi.framework.capabilities.bundleLoading || {};
        window.sap.bi.framework.capabilities.bundleLoading.hostBundle = true;

        // This holds the bundles (or promises of bundles) that have been loaded. Used to only load a bundle once.
        // This is a map from bundleID to bundle (string to bundle object)
        this._bundles = {};

        // This holds the component factories (or promises for them) that have been loaded. Used to resolve dependencies
        // before the parent factory.
        // This is a map from 'provide' id to array of component factories implementing the component.  If there are
        // multiple implementations they are ordered in reverse dependency order (activate first, then second, ...)
        this._componentFactories = {};

        // This holds a new RequireJS instance (context) for each bundle being loaded. By loading each bundle in a
        // separate context we can ensure there are no name collisions and potentially verify that bundles are not
        // attempting to load files from other bundles.
        this._bundleRequires = {};

        // Hash to track UI5 module paths that have been registered. Used to detect duplicate registrations.
        this._registeredUI5ModulePaths = {};

        // map a bundle's base path URL to the bundle's ID, to make it easier to reverse-lookup an ID from the path
        this._bundlePaths = {};
        
        // Check the config property to see if the XHRInterceptor should be enabled.
        if (this._config.enableXHRInterceptor) {
            var resourceLoaderFunction = createResourceLoaderFunction(this);
            XHRInterceptor.installInterceptor(resourceLoaderFunction, this._kernel.getInstance("core.logger"));
        }
    }
    
    // This function is used by a BundleLoader service to uninstall the interceptor for unit test cleanup.
    // Although potentially it could be used by other fwk clients.
    BundleLoader.prototype._uninstallInterceptor = function() {
        XHRInterceptor.uninstallInterceptor();
    };

    BundleLoader.prototype._loadBundles = function(bundleIds, onCompleteCallback, onErrorCallback) {
        // HACK: Clearing the component factories is a hack to enable us to reuse the bundle loader.  Without
        // it services for which an implementation already exists wil lnot be loaded (ie. new extensions to
        // an extension point won't load if one already exists).
        // We should do something more complex, like create a new BundleLoader entirely.  This method
        // is not thread safe (having 2 loads simultaneously will break!
        this._componentFactories = {};

        var bundleBaseUrl = this._config.baseUrl; // This could be undefined if no base is specified

        var getBundleContextPromises = function() {
            var bundleContextPromises = [];
            bundleIds.forEach(function(bundleId) {
                bundleContextPromises.push(this._createBundleContext(bundleId, bundleBaseUrl));
            }.bind(this));
            return Q.all(bundleContextPromises);
        }.bind(this);

        var getBundleContentPromises = function() {
            var bundleContentPromises = [];
            bundleIds.forEach(function(bundleId) {
                bundleContentPromises.push(this._loadBundle(bundleId, bundleBaseUrl));
            }.bind(this));
            return Q.all(bundleContentPromises);
        }.bind(this);

        var callback = function(promiseResult) {
            cleanupState.apply(this);
            onCompleteCallback();
        };

        getBundleContextPromises()
        .then(getBundleContentPromises.bind(this))
        .then(this._activateAllProviders.bind(this, bundleBaseUrl))
        .then(callback.bind(this))
        .fail(onErrorCallback)
        .done();
    };

    BundleLoader.prototype._createBundleContext = function(bundleId, bundleBaseUrl) {

        // If the bundle context is already created then return the promise that represents it
        if (this._bundleRequires[bundleId]) {
            log.apply(this, ["Shortcut creating context: " + bundleId]);
            return this._bundleRequires[bundleId];
        }

        log.apply(this, ["Creating context: " + bundleId]);

        var deferred = Q.defer();

        var fullBaseUrl = getFullUrl(bundleBaseUrl, convertBundleIdToPath(bundleId), bundleId);
        this._bundlePaths[fullBaseUrl] = bundleId;

        // Load the bundle in a new RequireJS context thereby creating a level of isolation for each bundle
        // so that for example, identically named modules in two bundles do not conflict.
        // The new context is uniquely identified by this bundle loader's ID plus this bundle's ID.
        var bundleRequire = require.config(extendRequireConfig.apply(this, [{
            baseUrl: fullBaseUrl,
            context: this._id + "_" + bundleId
        }]));

        initializeRequirePlugins(this);
        
        // Immediately associate loader plugins to the bundle's require context
        bundleRequire([], function() {
            // Hold onto the require context as it will be used to load implementation files for this bundle later.
            this._bundleRequires[bundleId] = bundleRequire;
            log.apply(this, ["Context created: " + bundleId]);
            deferred.resolve();
        }.bind(this), function(err) {
            log.apply(this, ["Error creating context: " + bundleId]);
            deferred.reject();
        });

        return deferred.promise;
    };

    BundleLoader.prototype._resolveBundle = function(bundleId) {

        // Load bundle contents
        var deferred = Q.defer();
        var currentBundleRequire = this._bundleRequires[bundleId];
        var currentModuleId = convertBundleIdToModuleId(bundleId);

        var boundLogger = log.bind(this);
        currentBundleRequire([currentModuleId],
           function(result) {
            deferred.resolve(result);
        }, function(result) {
            // The bundle could not be loaded.  Log an error, but resolve the promise anyways so that loading will continue
            // Failure to load a bundle should be non-fatal (only the missing bundle is skipped)
            boundLogger("Failed to load bundle with id: " + bundleId);
            deferred.resolve(undefined);
        });
        return deferred.promise;
    };

    BundleLoader.prototype._parseBundle = function(bundle, bundleBaseUrl) {
        // Hold onto the component factories so they can be resolved once all bundles are known
        var previouslyDeclaredServiceIds = [];

        // Url of bundle relative to host root
        var bundleFullUrl = getFullUrl(bundleBaseUrl, convertBundleIdToPath(bundle.id), bundle.id);

        // The framework property is reserved and bundle developers should not provide it
        var framework = {
             bundleId: bundle.id,
             bundleUrl: bundleFullUrl,
             bundleVersion: bundle.version
        };

        // Process any UI5-specific metadata in bundle manifest
        processUI5Metadata.apply(this, [bundle.ui5, bundle.id, bundleFullUrl]);

        var that = this;
        (bundle.components || []).forEach(function(component) {
            // Add framework metadata into component (will be exposed to consumers with call to get component metadata)
            component.framework = framework;
            component.bundleId = bundle.id;

            // If there is an explicit set of included dependencies declared for the component then use it, otherwise assume that this
            // component could have access to any of the dependencies declared for the bundle.  Additionally, components have
            // an implicit dependency on any component declared previously in the bundle (unless explicitly set for the component)
            component.dependencies = component.includedDependencies;
            if (!component.dependencies) {
                component.dependencies = bundle.dependencies || [];
                component.dependencies = component.dependencies.concat(previouslyDeclaredServiceIds);
            }
            previouslyDeclaredServiceIds.push(component.provide);

            // If the component lacks an ID, create a default ID using the bundle name and component provided
            component.id = component.id || bundle.id + "." + component.provide;

            that._componentFactories[component.provide] = that._componentFactories[component.provide] || [];
            that._componentFactories[component.provide].push(component);
        });

        // This allows bundles to cause code to be executed after they are loaded
        if(typeof bundle.onLoaded === "function"){
            bundle.onLoaded.apply(this);
        }
    };

    BundleLoader.prototype._loadBundle = function(bundleId, bundleBaseUrl) {
        // If the bundle is already loading then return the promise that represents it
        if (this._bundles[bundleId]) {
            log.apply(this, ["Shortcut loading: " + bundleId]);
            return this._bundles[bundleId];
        }

        log.apply(this, ["Loading: " + bundleId]);
        notify.call(this, "loadBundle", { bundleId: bundleId });

        var that = this;
        var promise = this._resolveBundle(bundleId);
        promise = promise.then(function(bundle) {
            // The bundle may not have resolved.  We don't want to abort loading entirely so the promise is resolved with 'undefined'
            // rather than rejected.  Handle the undefined bundle here, again without failure (error message was logged earlier in promise stack)
            if (!bundle) {
                return;
            }
            
            var depPromise = that._loadDependentBundles(bundle, bundleBaseUrl);

            if (bundle.imports) {
                var mapConfig = {"*": {}};
                bundle.imports.forEach(function(importMetadata) {
                    mapConfig["*"][importMetadata.localPath] = "import!" + importMetadata.bundle + ":" + (importMetadata.remotePath ? importMetadata.remotePath : "");
                });
                require.config({
                    context: that._id + "_" + bundle.id,
                    map: mapConfig
                });
            }

            // If this bundle has a host bundle then we need to reload this bundle in the correct context.
            var reloadedPromise;
            if (bundle.hostBundle) {
                // Clear the existing bundle being loaded, update the context, and reload
                // The updated context will use the 'context' of the host bundle and the baseUrl of the extension bundle
                that._bundles[bundleId] = "ReloadingInHost";

                // CVOM Hack
                var paths = {};
                if (bundleId === "sap.viz.geo.all") {
                    paths["all-bundle"] = "../../../sap/viz/geo/all/all-bundle";
                    paths["sap.viz.geo.all"] = "../../../sap/viz/geo/all/sap.viz.geo.all";
                    paths["resources/libs/jslinq"] = "../../../sap/viz/geo/all/resources/libs/jslinq";
                    paths["resources/libs/dojo.has"] = "../../../sap/viz/geo/all/resources/libs/dojo.has";
                    paths["resources/libs/dojo.i18n"] = "../../../sap/viz/geo/all/resources/libs/dojo.i18n";
                    paths["resources/styles/esri"] = "../../../sap/viz/geo/all/resources/styles/esri";
                    paths["resources/styles/map"] = "../../../sap/viz/geo/all/resources/styles/map";
                }

                var hostBundleRequire = require.config(extendRequireConfig.apply(that, [{
                    context: that._id + "_" + bundle.hostBundle,
                    paths: paths
                }]));
                that._bundleRequires[bundleId] = hostBundleRequire;
                reloadedPromise = that._resolveBundle(bundleId);
                reloadedPromise.then(function(bundle) {
                    that._parseBundle(bundle, bundleBaseUrl);
                });
                return reloadedPromise.then(function() {
                    return bundle;
                });
            } else {
                depPromise.then(function(bundleDeps) {
                    that._parseBundle(bundle, bundleBaseUrl);
                });
                return depPromise.then(function() {
                    return bundle;
                });
            }
        });
        this._bundles[bundleId] = promise;
        return promise;
    };

    /**
     * Bundle dependencies force the ordering of bundles.  This is dangerous as it leads to performance problems
     * due to the serial nature in which the bundles must be processed.
     */
    BundleLoader.prototype._loadDependentBundles = function(bundle, bundleBaseUrl) {
        var allDepPromises = [];

        notify.call(this, "loadDependentBundles", { bundleId: bundle.id, bundle: bundle });

        // The 'loadAfter' property introduces a bundle dependency
        var dependentBundles = (bundle && bundle.loadAfter) || [];
        var that = this;
        var depPromise;
        for (var i = 0; i < dependentBundles.length; i++) {
            var depBundleId = dependentBundles[i];
            log.apply(that, ["Loading dep '" + depBundleId + "' for '" + bundle.id + "'"]);
            if (!this._bundleRequires[depBundleId]) {
                var bundleCtxtPromise = this._createBundleContext(depBundleId, bundleBaseUrl);
                depPromise = bundleCtxtPromise.then(that._loadBundle.bind(this, depBundleId));
            }
            else {
                depPromise = that._loadBundle(depBundleId);
            }
            allDepPromises.push(depPromise);
        }

        // The 'hostBundle' indirectly introduces a bundle dependency as the host bundle must be loaded first
        // The specific workflow is when the host is minified.  The host bundle must be loaded as a single request
        // for the minified bundle, not as individual files as would be referenced by the 'extension' bundle.
        if (bundle.hostBundle) {
            // Check that the hostBundle is one of the bundles the loader knows about.  It's an error if the host doesn't exist.
            if (!that._bundleRequires[bundle.hostBundle]) {
                throw "Bundle '" + bundle.id + "' specified an invalid hostBundle of '" + bundle.hostBundle + "'";
            }

            log.apply(that, ["Loading host bundle '" + bundle.hostBundle + "' for '" + bundle.id + "'"]);
            depPromise = that._loadBundle(bundle.hostBundle);
            allDepPromises.push(depPromise);
        }

        return Q.all(allDepPromises);
    };

    var GOVERNATOR_PROVIDER_NAME = "sap.bi.gdd.governator";
    BundleLoader.prototype._activateAllProviders = function(bundleBaseUrl) {
        var govProviderPromise = (this._componentFactories[GOVERNATOR_PROVIDER_NAME] !== undefined)
                               ? this._activateProvider(GOVERNATOR_PROVIDER_NAME, bundleBaseUrl)
                               : undefined;

        // activate governator provider first, so that we can use it to govern activation of other components
        var that = this;
        return Q(govProviderPromise).then(function() {
            var providerPromises = [];
            for (var provideId in that._componentFactories) {
                if (that._componentFactories.hasOwnProperty(provideId) && provideId !== GOVERNATOR_PROVIDER_NAME) {
                    providerPromises.push(that._activateProvider(provideId, bundleBaseUrl));
                }
            }

            return Q.all(providerPromises);
        });
    };


    BundleLoader.prototype._activateProvider = function(provideId, bundleBaseUrl) {
        // Strip off the leading '*' used to indicate dependency on all implementations rather than last implementation
        if (provideId[0] === "*") {
            provideId = provideId.slice(1);
        }

        // If there are no providers (this is a valid case that occurs when a dependency is expressed but no
        // implementation of the dependency is present in the current deployment) then return
        if (!this._componentFactories[provideId]) {
            return;
        }

        // If the provider has already been resolved then return
        if (this._componentFactories[provideId].activatedProviders) {
            return this._componentFactories[provideId].activatedProviders;
        }

        // Should we add a check for infinite loops?
        if (this._componentFactories[provideId].activateInProgress) {
            throw "Infinity and beyond!";
        }
        this._componentFactories[provideId].activateInProgress = true;

        // Ensure all the dependencies have been resolved
        var activatedDeps = [];
        var that = this;
        var components = this._componentFactories[provideId];
        // Loop over components that provide service
        components.forEach(function(component) {
            (component.dependencies || []).forEach(function(dep) {
                // Components can depend on 'themselves' which just means that the previously provided implementation
                // must be evaluated before this one.  In this case the components are activated in the order they
                // exist in the _componentFactories array and there is no need to recurse (which would lead to an infinite loop)
                if (dep !== provideId) {
                    activatedDeps.push(that._activateProvider(dep, bundleBaseUrl));
                }
            });
        });

        // Once the dependencies have been activated, activate this factory
        var providers = Q.all(activatedDeps).then(function() {
            // Components need to be activated in order to preserve dependencies in the ordering
            var activationPromise;
            components.map(function(component) {
                if (activationPromise) {
                    activationPromise = activationPromise.then(function() {
                        return that._activateComponent(component, bundleBaseUrl);
                    });
                } else {
                    activationPromise = that._activateComponent(component, bundleBaseUrl);
                }
            });
            return activationPromise;
        });
        this._componentFactories[provideId].activatedProviders = providers;
        this._componentFactories[provideId].activateInProgress = false;
        return providers;
    };

    var REQUIRE_KEY = "require:";

    var getRequireDependencies = function(instance, dependencies) {
        dependencies = dependencies || [];
        if (typeof instance === "string") {
            if (instance.indexOf(REQUIRE_KEY) === 0) {
                dependencies.push(instance.substring(REQUIRE_KEY.length));
            }
        } else if (typeof instance === "object" && instance !== null) {
            if (Array.isArray(instance)) {
                instance.forEach(function(arrayElement) {
                    getRequireDependencies(arrayElement, dependencies);
                });
            } else {
                Object.keys(instance).forEach(function(key) {
                    getRequireDependencies(instance[key], dependencies);
                });
            }
        }
        return dependencies;
    };

    var replaceRequireDepencencies = function(instance, dependencyMap) {
        if (typeof instance === "string") {
            if (instance.indexOf(REQUIRE_KEY) === 0) {
                var moduleId = instance.substring(REQUIRE_KEY.length);
                return dependencyMap[moduleId];
            }
        } else if (typeof instance === "object") {
            if (Array.isArray(instance)) {
                return instance.map(function(arrayElement) {
                    return replaceRequireDepencencies(arrayElement, dependencyMap);
                });
            } else {
                Object.keys(instance).forEach(function(key) {
                    instance[key] = replaceRequireDepencencies(instance[key], dependencyMap);
                });
            }
        }
        return instance;
    };

    BundleLoader.prototype._registerComponent = function(component) {
        log.apply(this, ["Registering: " + component.provide + " | " + component.id]);
        this._kernel.register(component);
        if (component.provide === GOVERNATOR_PROVIDER_NAME) {
            var governator = sap.bi.framework.getService(null, GOVERNATOR_PROVIDER_NAME);
            return governator.init();
        }
    };

    BundleLoader.prototype._activateComponent = function(component, bundleBaseUrl) {
        var governator = sap.bi.framework.getService(null, GOVERNATOR_PROVIDER_NAME);
        if (governator && !governator.isComponentEnabled(component)) {
            return;
        }
        
        log.apply(this, ["Activating: " + component.provide + " | " + component.id]);
        if (component.module) {
            component.instance = REQUIRE_KEY + component.module;
        }

        if (component.instance) {
            var requireDependencies = getRequireDependencies(component.instance);
            if (requireDependencies.length > 0) {
                var deferred = Q.defer();
                var onSuccess = function() {
                    deferred.resolve(Array.prototype.slice.call(arguments));
                };
                var onFailure = function(result) {
                    deferred.reject(result);
                };

                var bundleRequire = this._bundleRequires[component.bundleId];
                bundleRequire(requireDependencies, onSuccess, onFailure);

                var that = this;
                var activatedComponent = deferred.promise.then(function(modules) {
                    var dependencyMap = {};
                    requireDependencies.forEach(function(dep, index) {
                        dependencyMap[requireDependencies[index]] = modules[index];
                    });
                    component.instance = replaceRequireDepencencies(component.instance, dependencyMap);
                    return that._registerComponent(component);
                });
                return activatedComponent;
            }
        }

        if (component.factory || component.instance){
            return this._registerComponent(component);
        } else {
            var id = component.id || "unknown";
            throw new Error("component " + id + " cannot be registered - valid module, factory, or instance not provided");
        }
    };

    BundleLoader.prototype._getMetadata = function() {
        return {
            id: this._id,
            config: this._config,
            require: this._require
        };
    };

    BundleLoader.prototype._getHelpers = function() {
        return {
            getBundleUrl: getBundleUrl.bind(this),
            getBundleId: getBundleId.bind(this),
            getBundlePromise: getBundlePromise.bind(this),
            getRequireContext: getRequireContext.bind(this),
            extendRequireConfig: extendRequireConfig.bind(this),
            startsWith: startsWith,
            endsWith: endsWith,
            stripLeading: stripLeading,
            stripTrailing: stripTrailing
        };
    };

    return {
        init: function (kernel, config) {
            var bundleLoader = new BundleLoader(kernel, config);

            kernel.register({
                provide: "bundleLoader.loadBundles",
                instance: bundleLoader._loadBundles.bind(bundleLoader)
            });

            kernel.register({
                provide: "bundleLoader.getMetadata",
                instance: bundleLoader._getMetadata.apply(bundleLoader)
            });

            kernel.register({
                provide: "bundleLoader.getHelpers",
                instance: bundleLoader._getHelpers.apply(bundleLoader)
            });

            kernel.register({
                provide: "bundleLoader.uninstallInterceptor",
                instance: bundleLoader._uninstallInterceptor.bind(bundleLoader)
            });
        }
    };
});

define('sap/bi/framework/kernel/DIKernel',[], function() {
    

    function DIKernel() {
        this._componentsByService = {};

        var kernel = this;
        this.register({
            provide: "kernel",
            instance: kernel
        });
    }

    DIKernel.prototype._getComponentsForService = function(service) {
        var components = this._componentsByService[service];
        if (components === undefined) {
            components = [];
            this._componentsByService[service] = components;
        }

        return components;
    };

    DIKernel.prototype.register = function(component) {
        var service = component.provide;
        var componentToRegister = {service: service};

        if (component.factory) {
            componentToRegister.factory = component.factory;
        } else if (component.instance) {
            componentToRegister.instance = component.instance;
        }

        if (!componentToRegister.factory && !componentToRegister.instance) {
            throw new Error("component " + component.id + " cannot be registered - valid instance or factory not provided");
        }

        componentToRegister.dependencies = (component.dependencies || []).map(function(dependency) {
            if (dependency[0] === "*") {
                return {
                    service: dependency.slice(1),
                    cardinality: "multiple"
                };
            }
            else {
                return {
                    service: dependency,
                    cardinality: "single"
                };
            }
        });

        componentToRegister.exportedMetadata = {
            id: component.id,
            framework: component.framework,
            customProperties: component.customProperties
        };

        this._getComponentsForService(service).push(componentToRegister);
    };

    DIKernel.prototype._getDependency = function(dependency) {
        if (dependency.cardinality === "single") {
            return this.getInstance(dependency.service);
        } else if (dependency.cardinality === "multiple") {
            return this.getAllInstances(dependency.service);
        } else {
            throw new Exception("Unrecognized cardinality: " + dependency.cardinality);
        }
    };

    DIKernel.prototype._getInstance = function(component) {
        var instance = component.instance;

        if (instance === undefined) {
            component.constructing = true;

            var resolvedDependecies = component.dependencies.map(this._getDependency.bind(this));

            instance = component.factory.apply(null, resolvedDependecies);

            component.instance = instance;

            delete component.constructing;
        }

        return instance;
    };

    DIKernel.prototype.get = function(service) {
        var components = this._getComponentsForService(service);

        var validComponents = components.filter(function(component) {
            return !component.constructing;
        });

        if (validComponents.length === 0) {
            return undefined;
        }

        return validComponents[validComponents.length - 1];
    };

    DIKernel.prototype.getAll = function(service) {
        var components = this._getComponentsForService(service);

        return components.filter(function(component) {
            return !component.constructing;
        });
    };

    DIKernel.prototype.getInstance = function(service) {
        var component = this.get(service);
        return component ? this._getInstance(component) : component;
    };

    DIKernel.prototype.getAllInstances = function(service) {
        var components = this.getAll(service);
        return components ? components.map(this._getInstance.bind(this)) : components;
    };

    return DIKernel;
});

// only included in sap.viz.js standalone mode

// fake sap.viz.aio for sap.viz.aio-bundle in sap.viz.js standalone mode
// because sap.viz.js already includes all the contents of sap.viz.aio
define("export.bi", [], function(){return {};});

// TODO workaround here for ONLY standalone mode
// to provide sap.bi.framework.declareBundle for sap.viz.aio-bundle instead of waiting BundleLoader.init()
window.sap = window.sap || {};
window.sap.bi = window.sap.bi || {};
window.sap.bi.framework = window.sap.bi.framework || {};
window.sap.bi.framework.declareBundle = function(bundle) {
    // Just return the bundle without doing anything.
    // This function is really here to make it easier to find the metadata json inside bundle.js file.
    return bundle;
};

// for release version
define('sap.viz.core-bundle',["export.bi"], function() {
    return sap.bi.framework.declareBundle( {
        "id" : "sap.viz.core",
        "components" : [ {
            "id" : "sap.viz.api",
            "provide" : "sap.viz.api",
            "instance" : sap.viz.api
        }, {
            "id" : "sap.viz.extapi",
            "provide" : "sap.viz.extapi",
            "instance" : sap.viz.extapi
        }
    ]});
});

define('sap.viz.core-bundleloader',[
    "sap/bi/framework/BundleLoader/BundleLoader",
    "sap/bi/framework/kernel/DIKernel",
    "sap.viz.core-bundle",
    'require'
], function(BundleLoader, DIKernel, aioBundle) {
    if (sap === undefined || sap.bi === undefined || sap.bi.framework === undefined || sap.bi.framework.getService === undefined) {
        if(!window._cvom_kernel) {
            window._cvom_kernel = new DIKernel();
        }
        BundleLoader.init(window._cvom_kernel, {});
    }

    aioBundle.components.forEach(function(component) {
        if (!component.instance) {
            component.instance = {};
        }
    });

    (aioBundle.components || []).forEach(window._cvom_kernel.register.bind(window._cvom_kernel));

    window.sap = window.sap || {};
    window.sap.viz = window.sap.viz || {};
    window.sap.viz.extapi = window.sap.viz.extapi || {};
    window.sap.viz.extapi.core = window.sap.viz.extapi.core || {};
    window.sap.viz.extapi.core.registerBundle = function(bundle) {
        (bundle.components || []).forEach(window._cvom_kernel.register.bind(window._cvom_kernel));
    };
    require(["sap/bi/framework/BundleLoader/CssPlugin"], function(CssPlugin) {
         define("css", new CssPlugin());
    });
    return null;
});

define('sap/viz/chart/layout/BaseLayout',[
    'sap/viz/framework/property/PropertyManager'
], function(PropertyManager){

    /**
     * The base class for all layout algorithms.
     * @constructor
     * @abstract
     * @param {sap.viz.chart.components.container.UIContainer} [container]
     */
    function BaseLayout(container){
        this.config = new PropertyManager();
        this.config.add({
            container: container,
            totalWidth: 0,
            totalHeight: 0
        });
    }

    var prot = BaseLayout.prototype;

    /**
     * Calculate layout position and size for every component
     * @param {Association Array} components
     * @return: {Association Array} - an association array of layout result for every item
     * Each layout result is: 
     * {
     *    width: ...
     *    height: ...
     *    x: ...
     *    y: ...
     * }
     */
    prot.layout = function(components){
    };

    prot._dictToArray = function(dict){
        var arr = [];
        for(var key in dict){
            if(dict.hasOwnProperty(key)){
                arr.push(dict[key]);
            }
        }
        return arr;
    };

    prot.destroy = function() {
        this.config.destroy();
        this.config = null;
    };
    
    return BaseLayout;
});

define('sap/viz/chart/layout/DockLayout',[
    "sap/viz/framework/common/util/oo",
    'sap/viz/framework/common/util/Constants',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/NumberUtils',
    'sap/viz/framework/common/util/PositionUtil',
    "sap/viz/chart/layout/BaseLayout"
], function(oo, Constants, TypeUtils, NumberUtils, PositionUtils, BaseLayout) {

    var DockLayout = function() {
        DockLayout.superclass.constructor.apply(this, arguments);
        this.config.add({
            padding: null,
            paddingLeft: null,
            paddingRight: null,
            paddingTop: null,
            paddingBottom: null
        });
    };

    oo.extend(DockLayout, BaseLayout);

    DockLayout.Position = {
        top: "top",
        bottom: "bottom",
        left: "left",
        right: "right"
    };

    var MIN_WIDTH_HEIGHT_LIMITATION_FOR_PADDING = 108;
    var MIN_PADDING_WHEN_LIMITATION = 2;
    
    function hasEnoughSpace(bound, preferredSize, maxSize, isHorizontal) {

        var minWidth = preferredSize.minWidth || 0;
        var minHeight = preferredSize.minHeight || 0;

        if (bound.width < minWidth || bound.height < minHeight) {
            return false;
        }

        if (preferredSize.width && preferredSize.height) {
            if (preferredSize.width < preferredSize.minWidth ||
                preferredSize.height < preferredSize.minHeight) {
                return false;
            }
        }

        if (isHorizontal === false && maxSize.maxWidth && maxSize.maxWidth < preferredSize.minWidth) {
            return false;
        }

        if (isHorizontal === true && maxSize.maxHeight && maxSize.maxHeight < preferredSize.minHeight) {
            return false;
        }

        return true;
    }

    function getMaxSizeValue(width, height, layoutInfo) {

        var result = {};

        if (layoutInfo == null) {
            return result;
        }

        if (layoutInfo.maxWidth) {
            result.maxWidth = NumberUtils.getSizeValue(layoutInfo.maxWidth, width);
        }

        if (layoutInfo.maxHeight) {
            result.maxHeight = NumberUtils.getSizeValue(layoutInfo.maxHeight, height);
        }

        return result;
    }

    function calculatePadding(config, width, height) {
        
        var getPositiveInt = NumberUtils.getPositiveInt;
        var constantPaddingInPX = Constants.PADDING.DEFAULT;
        if(constantPaddingInPX < 1 && constantPaddingInPX > 0){
            constantPaddingInPX = constantPaddingInPX * Math.min(width, height);
        }
        
        // if padding is not set, default value is 24
        var padding = getPositiveInt(config.get("padding"), constantPaddingInPX);
        var paddingTop = getPositiveInt(config.get("paddingTop"), padding);
        var paddingRight = getPositiveInt(config.get("paddingRight"), padding);
        var paddingBottom = getPositiveInt(config.get("paddingBottom"), padding);
        var paddingLeft = getPositiveInt(config.get("paddingLeft"), padding);
        
        if (width <= MIN_WIDTH_HEIGHT_LIMITATION_FOR_PADDING || 
            height <= MIN_WIDTH_HEIGHT_LIMITATION_FOR_PADDING) {
            paddingTop = Math.min(MIN_PADDING_WHEN_LIMITATION, paddingTop);
            paddingRight = Math.min(MIN_PADDING_WHEN_LIMITATION, paddingRight);
            paddingBottom = Math.min(MIN_PADDING_WHEN_LIMITATION, paddingBottom);
            paddingLeft = Math.min(MIN_PADDING_WHEN_LIMITATION, paddingLeft);
        }
        
        return {
            paddingTop: paddingTop,
            paddingRight: paddingRight,
            paddingBottom: paddingBottom,
            paddingLeft: paddingLeft
        };
    }

    function stackSpacingDefault(x) {
        return x.option.spacing;
    }
    
    /*
     * modules:
     * [{
     *      module: null,
     *      priority: 1,
     *      maxHeight: 1,
     *      maxWidth: 1,
     *      position: 1
     * }]
     */
    DockLayout.prototype.layout = function(components){
        var config = this.config;
        var width = config.get('totalWidth');
        var height = config.get('totalHeight');
        var spacingFn = stackSpacingDefault;
        
        var paddingInfo = calculatePadding(config, width, height);
        
        var bounds = {
            x: paddingInfo.paddingLeft,
            y: paddingInfo.paddingTop,
            width: width - (paddingInfo.paddingLeft + paddingInfo.paddingRight),
            height: height - (paddingInfo.paddingTop + paddingInfo.paddingBottom)
        };

        var maxBoundWidth = bounds.width;
        var maxBoundHeight = bounds.height;

        var componentsArray = this._dictToArray(components);

        componentsArray.sort(function(a, b) {
            return a.option.priority - b.option.priority;
        });

        var results = {};

        for (var i = 0; i < componentsArray.length; i++) {
            var component = componentsArray[i];
            var layoutInfo = component.option;
            var module = component.module;

            var maxSize = getMaxSizeValue(maxBoundWidth, maxBoundHeight, layoutInfo);

            if (layoutInfo && layoutInfo.position) {

                var componentSize = module.getPreferredSize(bounds);

                var isHorizontal = PositionUtils.isHorizontal(layoutInfo.position);
                // if space is not enough, the module is not participated in layout phase.
                if (!hasEnoughSpace(bounds, componentSize, maxSize, isHorizontal)) {
                    results[module.alias] = {
                        x: 0,
                        y: 0,
                        width: 0,
                        height: 0
                    };
                    continue;
                }

                var result = {
                    width: componentSize.width,
                    height: componentSize.height
                };

                // set size
                if (isHorizontal) {
                    result.width = bounds.width;
                    if (maxSize.maxHeight && maxSize.maxHeight < result.height) {
                        result.height = maxSize.maxHeight;
                    }

                } else {
                    result.height = bounds.height;
                    if (maxSize.maxWidth && maxSize.maxWidth < result.width) {
                        result.width = maxSize.maxWidth;
                    }
                }

                var spacingWithMainToRough, spacingMaxInPX;
                var spacing = spacingFn(component);
                if(spacing){
                    spacingWithMainToRough = spacing.spacingWithMainToRough || 0;
                    spacingMaxInPX = spacing.spacingMaxInPX || 0;
                }else{
                    spacingWithMainToRough = 0;
                    spacingMaxInPX = 0;
                }

                if(result.width === 0 || result.height === 0){
                    spacingWithMainToRough = 0;
                    spacingMaxInPX = 0;
                }
                var position = layoutInfo.position;
                if(DockLayout.Position[position] === undefined){
                    if(layoutInfo.defaultPosition){
                        position = layoutInfo.defaultPosition;
                    }
                }
                var spacingInPX = 0;
                if (position === DockLayout.Position.top) {
                    spacingInPX = Math.min(spacingWithMainToRough * bounds.height, spacingMaxInPX);
                    result.x = bounds.x;
                    result.y = bounds.y;
                    bounds.y += (result.height + spacingInPX);
                    bounds.height -= (result.height + spacingInPX);

                } else if (position === DockLayout.Position.bottom) {
                    spacingInPX = Math.min(spacingWithMainToRough * bounds.height, spacingMaxInPX);
                    bounds.height -= result.height;
                    result.x = bounds.x;
                    result.y = bounds.y + bounds.height;
                    bounds.height -= spacingInPX;

                } else if (position === DockLayout.Position.left) {
                    spacingInPX = Math.min(spacingWithMainToRough * bounds.width, spacingMaxInPX);
                    result.x = bounds.x;
                    result.y = bounds.y;
                    bounds.x += result.width + spacingInPX;
                    bounds.width -= (result.width + spacingInPX);

                } else if (position === DockLayout.Position.right) {
                    spacingInPX = Math.min(spacingWithMainToRough * bounds.width, spacingMaxInPX);
                    bounds.width -= result.width;
                    result.x = bounds.x + bounds.width;
                    result.y = bounds.y;
                    bounds.width -= spacingInPX;
                }
                results[module.alias] = result;

            } else {
                results[module.alias] = {
                    x: bounds.x,
                    y: bounds.y,
                    width: bounds.width,
                    height: bounds.height
                };
            }
        }
        return results;
    };

    return DockLayout;
});

define('sap/viz/chart/layout/GridLayout',[
    "sap/viz/framework/common/util/oo",
    'sap/viz/framework/common/util/Constants',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/NumberUtils',
    'sap/viz/framework/common/util/PositionUtil',
    "sap/viz/chart/layout/DockLayout"
], function(oo, Constants, TypeUtils, NumberUtils, PositionUtils, DockLayout) {

    var GridLayout = function() {
        GridLayout.superclass.constructor.apply(this, arguments);
    };

    oo.extend(GridLayout, DockLayout);
    
    
    /*
     * modules:
     * [{
     *      module: null,
     *      priority: 1,
     *      maxHeight: 1,
     *      maxWidth: 1,
     *      position: 1
     * }]
     */
    GridLayout.prototype.layout = function(components) {
        
        var positionDef = DockLayout.Position;
        
        var results = GridLayout.superclass.layout.call(this, components);
        
        var centerKey = this._getCenterModuleKey(components, positionDef);
        
        if (centerKey == null) {
            
            for (var itemKey in components) {
                if (components.hasOwnProperty(itemKey)) {
                    var current = components[itemKey].module;
                    current.setSize(results[itemKey]);
                    if (current.layout) {
                        current.layout();
                    }
                }
            }
            
            return results;
        }
        
        var centerSize = results[centerKey];
        var centerModule = components[centerKey].module;
        centerModule.setSize(centerSize);
        if (centerModule.layout){
            centerModule.layout();
        }
        
        var plotX = centerSize.x;
        var plotY = centerSize.y;
        var plotWidth = centerSize.width;
        var plotHeight = centerSize.height;
        
        if (centerModule.getPlotPosition) {
            var plotPosition = centerModule.getPlotPosition();
            plotX += plotPosition.x;
            plotWidth = plotPosition.width;
            plotY += plotPosition.y;
            plotHeight = plotPosition.height;
        }
        
        for (var key in components) {
            if (components.hasOwnProperty(key)) {
                
                if (key === centerKey) {
                    continue;
                }
                
                var option = components[key].option;
                var position = option.position || option.defaultPosition;
                
                if (position === "top" || position === "bottom") {
                    results[key].x = plotX;
                    results[key].width = plotWidth;
                } else if (position === "left" || position === "right") {
                    results[key].y = plotY;
                    results[key].height = plotHeight;
                }
                
                var currentModule = components[key].module;
                currentModule.setSize(results[key]);
                if (currentModule.layout) {
                    currentModule.layout();
                }
            }
        }
        
        return results;
    };

    GridLayout.prototype._getCenterModuleKey = function(components, positionDef) {
        
        for (var key in components) {
            if (components.hasOwnProperty(key)) {
                
                var option = components[key].option;
                var position = option.position || option.defaultPosition;
                
                if (positionDef[position] == null) {
                    return key;
                }
            }
        }
        return null;
    };
    
    return GridLayout;
});

define('sap/viz/chart/components/UIComponent',[
    "sap/viz/framework/common/util/EventDispatch",
    "sap/viz/framework/core/Runtime",
    "sap/viz/framework/property/PropertyManager"
], function Setup(EventDispatch, Runtime, PropertyManager) {

    /**
     * To initialize UI component object.
     *
     * @name UIComponent
     * @constructor
     * @param {framework/core/Runtime} runtime
     * @param {Object} options
     */
    var UIComponent = function(runtime, options) {

        options = options || {};
        this._options = options;
        this._name = options.name ? options.name : null;

        this._eventDispatch = new EventDispatch();

        this._data = null;
        
        // used in UIContainer
        this.alias = null;
        
        this._renderTo = 'SVG';

        this._size = {
            width: 0,
            height: 0
        };

        this._realSize = {
            width: 0,
            height: 0
        };

        this._runtime = runtime ? runtime : Runtime._create();

        // Allow the creator to pass its PropertyManager to this module, so that
        // this module can get proxy based on it, instead of the root one.
        // TODO Jove fix the temp propertyMgr reference here
        var propertyManager = options.properties || this._runtime._propertyMgr;

        this._properties = (this._name) ? propertyManager.proxy(this._name) :
            propertyManager;

    };

    /**
     * @return {framework/core/Runtime}
     */
    UIComponent.prototype.runtime = function() {
        return this._runtime;
    };

    /**
     * @return {Boolean}
     */
    UIComponent.prototype.isVisible = function() {
        return true;
    };

    /**
     * @return {String}
     */
    UIComponent.prototype.getName = function() {
        return this._name;
    };

    /**
     * To set data.
     */
    UIComponent.prototype.setData = function(data) {
        this._data = data;
        return this;
    };

    /**
     * To set render container(DIV/SVG).
     */
    UIComponent.prototype.renderTo = function(data) {
        if(arguments.length){
            this._renderTo = data;
            return this;
        }
        return this._renderTo;
    };
    /**
     * To set visual canvas size
     
     * @param size {width: Number, height: Number}
     */
    UIComponent.prototype.setSize = function(sizeInfo) {
        if (sizeInfo.width != null) {
            this._size.width = sizeInfo.width;
            this._realSize.width = sizeInfo.width;
        }
        if (sizeInfo.height != null) {
            this._size.height = sizeInfo.height;
            this._realSize.height = sizeInfo.height;
        }
        return this;
    };

    /**
     * To set real size
     *
     * @param size {width: Number, height: Number}
     */
    UIComponent.prototype.setRealSize = function(sizeInfo) {
        if (sizeInfo.width != null) {
            this._realSize.width = sizeInfo.width;
        }
        if (sizeInfo.height != null) {
            this._realSize.height = sizeInfo.height;
        }
        return this;
    };

    /**
     * To obtain container measure size.
     *
     * @param measureInfo {width: Number, height: Number} optional the max width and height allown for this component
     *
     * @return {
     *   maxWidth: ?,
     *   maxHeight: ?,
     *   minWidth: ?,
     *   minHeight: ?,
     *   width: ?,
     *   height: ?
     *  }
     */
    UIComponent.prototype.getPreferredSize = function(measureInfo) {};

    /**
     * To render element.
     *
     * @param rootElement {D3Selection} the parent D3 selection for rendering
     */
    UIComponent.prototype.render = function(rootElement) {};

    /**
     * @return {framework/common/util/EventDispatch}
     */
    UIComponent.prototype.getDispatch = function() {
        return this._eventDispatch;
    };

    UIComponent.prototype.destroy = function() {
        if (this._eventDispatch) {
            this._eventDispatch.destroy();
        }
        
        this._runtime = null;
        this._eventDispatch = null;
        this._data = null;
        
        // only destroy proxy property manager
        // original property manager will be destroyed in ChartApp.
        if (this._properties && this._properties.origin != this._properties) {
            this._properties.destroy();
        }
        this._properties = null;
        this._size = null;
        this._name = null;
        this._options = null;
        this._renderTo = null;
        this._realSize = null;
        this.alias = null;
    };

    UIComponent.prototype._exposeMoreEvents = function() {
        this._eventDispatch.addEventTypes.apply(this._eventDispatch, arguments);
        return this;
    };

    return UIComponent;
});
define('sap/viz/chart/components/util/BoundUtil',[],
    function Setup() {
        var classname = 'v-bound';
        var BoundUtil = {
            drawBound: function(selection, width, height, css, isEventRect) {
                var rect;
                if (width < 0 || height < 0) {
                    return null;
                }
                if (selection.select('.' + classname).node() == null) {
                    rect = selection.insert('rect', ':first-child').attr('class', classname).attr('width', width).attr(
                        'height', height);
                    if (isEventRect) {
                        rect.attr("fill", "transparent");
                    } else {
                        rect.attr('visibility', 'hidden');
                    }
                } else {
                    rect = selection.select('.' + classname).attr('width', width).attr('height', height);
                }

                if (css) {
                    for (var i in css) {
                        if (css.hasOwnProperty(i)) {
                            rect.attr(i, css[i]);
                        }
                    }
                }
                return rect;
            }

        };

        return BoundUtil;
    });
define('sap/viz/chart/components/util/TextUtils',['sap/viz/framework/common/util/TypeUtils', 'sap/viz/framework/common/util/UADetector',
        "sap/viz/framework/common/util/GeometryUtils"],
    function Setup(TypeUtils, UADetector, GeometryUtils) {
        var ns = "http://www.w3.org/2000/svg";
        var node;
        var canvasNode;
        var fasterFun;
        var sensitiveStyle = ["font", "font-family", "font-size", "font-size-adjust", "font-stretch", "font-style",
            "font-variant", "font-weight", "letter-spacing", "word-spacing", "alignment-baseline", "baseline-shift",
            "dominant-baseline"
        ];
        var textSizeCache = [];
        var textSizeCacheForSuper = [];
        var textSizeCacheForCanvas = [];
        var myTextSizeCache = [];

        function getNode() {
            if (!node) {
                var svg = document.body.appendChild(document.createElementNS(ns, "svg"));
                svg.style.cssText = "position:absolute;top:-1000px;z-index:-9000;width:1px;height:1px";
                node = svg.appendChild(document.createElementNS(ns, "text"));
            }

            return node;
        }

        function applyText(text, style) {
            var node = getNode();

            if (!style) {
                node.removeAttribute("style");
            } else {
                if (!TypeUtils.isString(style)) {
                    var computedStyle = UADetector.isIE() ? style.ownerSVGElement.getComputedStyle(style) : window
                        .getComputedStyle(style);

                    var cssText = "";
                    sensitiveStyle.forEach(function(i) {
                        var s = computedStyle.getPropertyValue(i);
                        if (s !== null) {
                            cssText += i + ":" + s + ";";
                        }
                    });
                    style = cssText;
                }
                node.style.cssText = style;
            }
            if (text === undefined || text === null) {
                text = "";
            }

            node.textContent = text;
            return node;
        }

        function ellipsis(text, textNode, expectedLength, cssStyle, textApplied) {
            var index = "..." + cssStyle;
            var textStr = "";
            if (text) {
                textStr = text.toString();
            }
            if (expectedLength > 0) {
                if (myTextSizeCache[index]) {
                    if (textStr.length > 3) {
                        if (expectedLength < myTextSizeCache[index] / 3 * 4) {
                            if (textNode) {
                                textNode.textContent = "";
                            }
                            return "";
                        }
                    } else {
                        if (expectedLength < myTextSizeCache[index] / 3 * textStr.length) {
                            if (textNode) {
                                textNode.textContent = "";
                            }
                            return "";
                        }
                    }
                }
                var node, initTextLength;
                index = textStr + cssStyle;
                node = textApplied ? getNode() : applyText(textStr, cssStyle || textNode);
                initTextLength = node.getComputedTextLength();

                if (initTextLength <= expectedLength) {
                    if (textNode) {
                        textNode.textContent = textStr;
                    }
                    return textStr;
                }

                index = "..." + cssStyle;
                if (!myTextSizeCache[index]) {
                    node.textContent = "...";
                    myTextSizeCache[index] = node.getComputedTextLength();
                }

                expectedLength -= myTextSizeCache[index];
                node.textContent = textStr;
                if (expectedLength > 0) {
                    var charNumber = textStr.length;
                    var i = Math.ceil(expectedLength / initTextLength * charNumber);
                    var subStr = textStr.substring(0, i);
                    index = subStr + cssStyle;
                    var textLength;
                    var reText;
                    //Chrome can not implement function getSubStringLength well when the string contains a
                    //left-to-right language and a right-to-left language.
                    var txtcontent = node.textContent.toString();
                    if (!UADetector.isIE()) {
                        node.textContent = txtcontent.substring(0, i);
                        textLength = node.getComputedTextLength();
                    } else {
                        textLength = node.getSubStringLength(0, i);
                    }
                    if (textLength <= expectedLength) {
                        while (++i <= charNumber) {
                            subStr = textStr.substring(0, i);
                            index = subStr + cssStyle;
                            if (!UADetector.isIE()) {
                                node.textContent = txtcontent.substring(0, i);
                                textLength = node.getComputedTextLength();
                            } else {
                                textLength = node.getSubStringLength(0, i);
                            }
                            if (textLength > expectedLength) {
                                reText = textStr.substring(0, i - 1) + "...";
                                if (textNode) {
                                    textNode.textContent = reText;
                                    textNode.appendChild(document.createElementNS(textNode.namespaceURI, "title"))
                                        .textContent = textStr;
                                }
                                if (!UADetector.isIE()) {
                                    node.textContent = txtcontent;
                                }
                                return reText;
                            }
                        }
                    } else {
                        while (--i > 0) {
                            subStr = textStr.substring(0, i);
                            index = subStr + cssStyle;
                            if (!UADetector.isIE()) {
                                node.textContent = txtcontent.substring(0, i);
                                textLength = node.getComputedTextLength();
                            } else {
                                textLength = node.getSubStringLength(0, i);
                            }
                            if (textLength <= expectedLength) {
                                reText = subStr + "...";
                                if (textNode) {
                                    textNode.textContent = reText;
                                    textNode.appendChild(document.createElementNS(textNode.namespaceURI, "title"))
                                        .textContent = textStr;
                                }
                                node.textContent = txtcontent;
                                return reText;
                            }
                        }
                    }
                    if (!UADetector.isIE()) {
                        node.textContent = txtcontent;
                    }
                }
            }
            if (textNode) {
                textNode.textContent = "";
            }
            return "";
        }

        return {
            /**
             * Measure the dimension of the text in given style
             *
             * @param {String}
             *          text the text to be measured
             * @param style
             *          the style definition text or a DOM node. If it is a node, its style will be used to measure
             * text.
             * @returns {Object}
             */
            measure: function(text, style) {
                if (text === '') {
                    return {
                        width: 0,
                        height: 0,
                        x: 0,
                        y: 0
                    };
                }
                var box = GeometryUtils.getBBox(applyText(text, style));
                return {
                    width: box.width,
                    height: box.height,
                    x: box.x,
                    y: box.y
                };
            },

            /**
             * Measure text in a canvas
             *
             * @param {String}
             *          the text to be measured
             * @param {String}
             *          fontSize
             * @param {String}
             *          fontWeight
             * @param {String}
             *          fontFamily
             * @returns {Object}
             */
            measureInCanvas: function(text, tFontSize, tFontWeight, tFontFamily) {
                if (!tFontFamily || !tFontSize || !tFontWeight) {
                    //the function cannot get right value
                    return;
                }

                var strWidth = 0;
                if (!canvasNode) {
                    canvasNode = document.createElement("canvas");
                    canvasNode.style.cssText =
                    "position:absolute;top:-1000px;z-index:-9000;width:0px;height:0px;visibility:hidden";
                    document.body.appendChild(canvasNode);
                }

                if (canvasNode.getContext) {
                    var ctx = canvasNode.getContext("2d");
                    var fontString = tFontWeight + " " + tFontSize + " " + tFontFamily;
                    ctx.font = fontString;
                    strWidth = ctx.measureText(text).width;
                }

                var fontSizeFloat = parseFloat(tFontSize) * 1.2;

                return {
                    width: strWidth,
                    height: fontSizeFloat
                };
            },

            /**
             * Fast measure the dimension of the text in given fontSize, fontWeight and fontFamily
             *
             * @param {String}
             *          text the text to be measured
             * @param {String}
             *          fontSize
             * @param {String}
             *          fontWeight
             * @param {String}
             *          fontFamily
             * @returns {Object}
             */
            fastMeasure: function(text, tFontSize, tFontWeight, tFontFamily, tFontStyle) {
                var index = text + tFontSize + tFontWeight + tFontFamily;
                var cachedSize = textSizeCache[index],
                    cssStyle = "font-size:" + tFontSize + "; font-weight:" +
                        tFontWeight + "; font-family:" + tFontFamily;
                if(tFontStyle){
                    index = index + tFontStyle;
                    cssStyle = cssStyle + '; font-style: ' + tFontStyle;
                }

                if (!cachedSize) {
                    textSizeCache[index] = this.measure(text, cssStyle);
                    cachedSize = textSizeCache[index];
                }
                return cachedSize;
            },

            //find the fastest measure function for the browser.
            //measureInCanvas may be faster in Chrome, but not in Firefox.
            bestMeasureFun: function(tFontSize, tFontWeight, tFontFamily) {
                if (!fasterFun) {
                    var i;
                    var testTimes = 100;
                    var testText = "Test";
                    //test measureInCanvas
                    var startC = new Date().getTime();
                    for (i = 0; i < testTimes; i++) {
                        this.measureInCanvas(testText, tFontSize, tFontWeight, tFontFamily);
                    }
                    var endC = new Date().getTime();
                    var timeC = endC - startC;

                    //test measure
                    var startM = new Date().getTime();
                    for (i = 0; i < testTimes; i++) {
                        this.measure(testText, "font-size:" + tFontSize + "; font-weight:" + tFontWeight +
                            "; font-family:" + tFontFamily);
                    }
                    var endM = new Date().getTime();
                    var timeM = endM - startM;

                    if (timeC < timeM) {
                        fasterFun = "C";
                    } else {
                        fasterFun = "M";
                    }
                }

                return fasterFun;
            },
            /**
             * Super fast measure the dimension of the text in given fontSize, fontWeight and fontFamily
             *
             * @param {String}
             *          text the text to be measured
             * @param {String}
             *          fontSize
             * @param {String}
             *          fontWeight
             * @param {String}
             *          fontFamily
             * @returns {Object}
             */
            superFastMeasure: function(text, FontSize, FontWeight, FontFamily) {
                var index, tFontSize, tFontWeight, tFontFamily, tStyle;
                if (arguments.length === 2) {
                    tStyle = this.parseStyle(FontSize);
                    tFontSize = tStyle.FontSize;
                    tFontWeight = tStyle.FontWeight;
                    tFontFamily = tStyle.FontFamily;
                } else if (arguments.length === 4) {
                    tFontSize = FontSize;
                    tFontWeight = FontWeight;
                    tFontFamily = FontFamily;
                }
                index = text + tFontSize + tFontWeight + tFontFamily;
                var cachedSize = textSizeCacheForSuper[index];
                if (!cachedSize) {
                    if (this.bestMeasureFun(tFontSize, tFontWeight, tFontFamily) === "C") {
                        textSizeCacheForSuper[index] = this.measureInCanvas(text, tFontSize, tFontWeight, tFontFamily);
                    } else {
                        textSizeCacheForSuper[index] = this.measure(text, "font-size:" + tFontSize + "; font-weight:" +
                            tFontWeight +
                            "; font-family:" + tFontFamily);
                    }
                    cachedSize = textSizeCacheForSuper[index];
                }
                return cachedSize;
            },
            canvasMeasure: function(text, FontSize, FontWeight, FontFamily) {
                var index, tFontSize, tFontWeight, tFontFamily, tStyle;
                if (arguments.length === 2) {
                    tStyle = this.parseStyle(FontSize);
                    tFontSize = tStyle.FontSize;
                    tFontWeight = tStyle.FontWeight;
                    tFontFamily = tStyle.FontFamily;
                } else if (arguments.length === 4) {
                    tFontSize = FontSize;
                    tFontWeight = FontWeight;
                    tFontFamily = FontFamily;
                }

                //check if font size has unit
                tFontSize = tFontSize.toString();
                var lastChat = tFontSize.substring(tFontSize.length-1);
                if(!isNaN(parseFloat(lastChat))) {
                    tFontSize += "px";
                }

                index = text + tFontSize + tFontWeight + tFontFamily;
                var cachedSize = textSizeCacheForCanvas[index];
                if (!cachedSize) {
                    cachedSize = (textSizeCacheForCanvas[index] = this.measureInCanvas(text, tFontSize, tFontWeight,
                        tFontFamily));
                }
                return cachedSize;
            },

            /**
             * Ellipsis long text.
             *
             * @param {String}
             *          text the text to be processed
             * @param {Node}
             *          textNode the svg:text which will be display text
             * @param {Number}
             *          maxLength the max text length
             */
            ellipsis: function(text, textNode, maxLength, cssStyle, noSubstring) {
                return ellipsis(text, textNode, maxLength, cssStyle, false);
            },

            /**
             * Ellipsis long text in a circle area.
             *
             * @param {String}
             *          text the text to be processed
             * @param {Node}
             *          textNode the svg:text which will be display text
             * @param {Number}
             *          r the radius of circle
             * @param {Number}
             *          h the offset from center of circle
             * @param {Object}
             *          cssStyle the style object
             */
            ellipsisInCircle: function(text, textNode, r, h, cssStyle) {
                var node = applyText(text, textNode);

                var maxLength = Math.sqrt(Math.pow(r, 2) - Math.pow(h + GeometryUtils.getBBox(node).height / 2, 2)) * 2;
                ellipsis(text, textNode, maxLength, cssStyle, true);
            },

            verticalCentralOffset: function(text, textNode) {
                var tmpNode = applyText(text, textNode);
                var box = GeometryUtils.getBBox(tmpNode);
                var actualHeight = -box.y;
                var fontSize = parseInt(tmpNode.ownerSVGElement.getComputedStyle(tmpNode)["fontSize"], 0);
                return (actualHeight - (box.height - fontSize)) / 2;
            },

            parseStyle: function(style) {
                var tStyle = {};
                var temp = style.toLowerCase();
                tStyle.FontSize = this.getStyleValue(temp, "font-size");
                tStyle.FontWeight = this.getStyleValue(temp, "font-weight");
                tStyle.FontFamily = this.getStyleValue(temp, "font-family");
                return tStyle;
            },

            getStyleValue: function(style, key) {
                var result, index1, index2;
                index1 = style.indexOf(key);
                if (index1 >= 0) {
                    index1 = style.indexOf(":", index1) + 1;
                    index2 = style.indexOf(";", index1);
                    if (index2 < 0) {
                        index2 = style.length;
                    }
                    result = style.substring(index1, index2);
                }
                return result;
            },
            getTextBaselineOffset: function(styles) {
                var measureBox = this.fastMeasure("Tag", styles['fontSize'], styles['fontWeight'],
                    styles['fontFamily']);
                return measureBox.height + measureBox.y;
            },
            destroy: function() {
                if (node) {
                    //svg
                    var svg = node.parentNode;
                    if (svg) {
                        svg.parentNode.removeChild(svg);
                    }
                }
                node = null;
                textSizeCache = [];
                textSizeCacheForSuper = [];
                textSizeCacheForCanvas = [];
                myTextSizeCache = [];
                if (canvasNode) {
                    canvasNode.parentNode.removeChild(canvasNode);
                }
                canvasNode = null;
            }
        };
    });

define('sap/viz/chart/components/util/StyleUtils',[], function() {

    var cssPropsMapping = {
        color: "fill",
        fontFamily: "font-family",
        fontSize: "font-size",
        fontWeight: "font-weight",
        fontStyle: "font-style"
    };

    function convertToCss(styleObj) {

        var result = [];

        for (var name in cssPropsMapping) {

            if (styleObj[name] != null) {
                result.push(cssPropsMapping[name] + ":" + styleObj[name]);
            }
        }
        return result.join(";");
    }

    return {
        convertToCss: convertToCss
    };
});
define('sap/viz/chart/components/title/Title',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/chart/components/UIComponent',
    'sap/viz/framework/common/lang/LangManager',
    'sap/viz/chart/components/util/BoundUtil',
    'sap/viz/chart/components/util/TextUtils',
    'sap/viz/chart/components/util/StyleUtils',
    'sap/viz/framework/common/util/UADetector',
    'sap/viz/framework/common/util/PropertyZoneUtil'
], function(oo, UIComponent, langManager, BoundUtil, TextUtils, StyleUtils, UADetector, PropertyZoneUtil) {

    var Title = function(runtime, options) {
        Title.superclass.constructor.apply(this, arguments);
        
        this._wrapper = null;
        
        this._height = 0;
        this._width = 0;
        var that = this;
        runtime.zoneManager().add({
            tempPropertyZone: {
                title: {
                    value: [],
                    readonly: true,
                    serializable: false,
                    get: function() {
                        var result = [],
                            boundRect, bound;
                        if (that.isVisible()) {
                            boundRect = that._wrapper.node().getBoundingClientRect();
                            bound = [
                                []
                            ];
                            bound[0].push([boundRect.left, boundRect.top]);
                            bound[0].push([boundRect.right, boundRect.top]);
                            bound[0].push([boundRect.right, boundRect.bottom]);
                            bound[0].push([boundRect.left, boundRect.bottom]);
                            result.push({
                                "name": 'title',
                                "bound": bound
                            });
                            if (that._wrapper && that._wrapper.node()) {
                                var root = that._wrapper.node().ownerSVGElement;
                                PropertyZoneUtil.calcOffsetFromChart(root, result);
                            }
                        }
                        return result;
                    }
                }
            }
        });
    };

    oo.extend(Title, UIComponent);

    Title.prototype.setPosition = function (position) {
        this._position = position;
    };

    Title.prototype.setSize = function(value) {
        this._width = value.width;
        this._height = value.height;
    };

    Title.prototype.getSize = function() {
        return {
            width: this._width,
            height: this._height
        };
    };

    Title.prototype.getPosition = function() {
        return this._position||"top";
    };
    
    Title.prototype.getPreferredSize = function() {
        
        var result = {
            maxWidth: 0,
            maxHeight: 0,
            minWidth: 0,
            minHeight: 0,
            width: 0,
            height: 0
        };
        if (this._properties.get("visible") === true) {
            
            var titleText = this._properties.get("text");
            var fontSize = this._properties.get("style.fontSize");
            var fontWeight = this._properties.get("style.fontWeight");
            var fontFamily = this._properties.get("style.fontFamily");
            
            var text = titleText == null ? langManager.get('IDS_DEFAULTCHARTTITLE') : titleText;
            var titleSize = TextUtils.fastMeasure(text, fontSize, fontWeight, fontFamily);

            result.width = result.maxWidth = titleSize.width;
            result.height = result.maxHeight = titleSize.height;

            var minTitleSize = TextUtils.fastMeasure("...", fontSize, fontWeight, fontFamily);

            result.minWidth = minTitleSize.width;
            result.minHeight = minTitleSize.height;

            result.width = Math.max(result.minWidth, result.width);
            result.height = Math.max(result.minHeight, result.height);

            result.hideOversize = true;
            result.maxSizeConstant = 1 / 3;
        }
        return result;
    };

    Title.prototype.isVisible = function() {
        var isVisible = this._properties.get("visible");
        return isVisible === true && this._width > 0 && this._height > 0;
    };

    /**
     * To render element.
     */
    Title.prototype.render = function(rootElement) {
        
        var titleText = this._properties.get("text");
        
        var text = titleText == null ? langManager.get('IDS_DEFAULTCHARTTITLE') : titleText;
        var wrapper = rootElement.selectAll('text.v-title').data([text]);
        this._wrapper = wrapper;

        if (this.isVisible()) {
            
            var width = this._width;
            var height = this._height;
            var alignment = this._properties.get("alignment");
            
            var style = {
                color: this._properties.get("style.color"),
                fontFamily: this._properties.get("style.fontFamily"),
                fontSize: this._properties.get("style.fontSize"),
                fontWeight: this._properties.get("style.fontWeight"),
                fontStyle: this._properties.get("style.fontStyle")
            };

            BoundUtil.drawBound(rootElement, width, height, undefined, true);

            var textAlign = alignment || "center";

            var textAnchor = {
                right: 'end',
                left: 'start'
            }[textAlign] || 'middle';

            var xPos = {
                right: width,
                center: width / 2,
                left: 0
            }[textAlign];

            // invalid alignment
            if (xPos == null) {
                xPos = width / 2;
            }
            
            wrapper.exit().remove();
            wrapper.enter().append('text').attr('class', 'v-title viz-title-label');

            var fill = this.runtime().effectManager().register({
                fillColor: style.color
            });
            wrapper.attr('fill', fill).attr('font-family', style.fontFamily).attr('font-size', style.fontSize).attr(
                'font-weight', style.fontWeight).attr('font-style', style.fontStyle)
                .attr('text-anchor', textAnchor).attr('x', xPos).attr('y', height / 2).attr(
                    'dominant-baseline', 'central');

            if (UADetector.isIE()) {
                wrapper.attr('y', height).attr('dominant-baseline', 'auto');
            }

            TextUtils.ellipsis(text, wrapper.node(), width, StyleUtils.convertToCss(style));
        } else {
            rootElement.selectAll('text.v-title').remove();
        }
    };

    Title.prototype.destroy = function() {
        Title.superclass.destroy.call(this);
        if (this._wrapper) {
            this._wrapper.remove();
        }
        
        this._wrapper = null;
        
        this._height = null;
        this._width = null;
    };
    
    return Title;
});

define('sap/viz/chart/components/Background',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/chart/components/UIComponent',
    "sap/viz/framework/common/util/DataGraphics"
], function(oo, UIComponent, DataGraphics) {

    var dispatch = d3.dispatch;

    var CSSCLASS_BORDER = 'v-background-border',
        CSSCLASS_BORDER_2 = 'viz-plot-background-border';
    var CSSCLASS_BODY = 'v-background-body',
        CSSCLASS_BODY_2 = 'viz-plot-background';
    var CSSCLASS_MORPHABLEBACKGROUND = "v-morphable-background";

    /**
     * Background module
     */
    function Background(runtime, options) {
        Background.superclass.constructor.apply(this, arguments);
        this._eDispatch = new dispatch('initialized');
    }

    oo.extend(Background, UIComponent);

    var prot = Background.prototype;

    prot.render = function(selection) {
        var props = this._properties;

        if (props.get('visible') && this._size.width > 0 && this._size.height > 0) {
            var d3rect = selection.select('.' + CSSCLASS_BODY);
            if (d3rect.empty()) {
                d3rect = selection.append('svg:rect')
                    .attr('class', CSSCLASS_BODY + ' ' + CSSCLASS_BODY_2 + ' ' + CSSCLASS_MORPHABLEBACKGROUND);
            }
            var rectFillColor = (props.get('color') || 'transparent');
            DataGraphics.setData(d3rect.node(), {color:rectFillColor});
            var size = this._size;
            var height = size.height;
            var width = size.width;

            var fillID = this.runtime().effectManager().register({
                graphType: 'background',
                fillColor: rectFillColor,
                drawingEffect: props.get('drawingEffect'),
                direction: props.get('gradientDirection')
            });
            d3rect.attr('x', 0)
                .attr('y', 0)
                .attr('width', width)
                .attr('height', height)
                .attr('style', "fill:" + fillID);

            var borderData = [];
            if (props.get('border.left.visible')) {
                borderData.push({
                    x1: 0,
                    y1: 0,
                    x2: 0,
                    y2: height
                });
            }
            if (props.get('border.right.visible')) {
                borderData.push({
                    x1: width,
                    y1: 0,
                    x2: width,
                    y2: height
                });
            }
            if (props.get('border.top.visible')) {
                borderData.push({
                    x1: 0,
                    y1: 0,
                    x2: width,
                    y2: 0
                });
            }
            if (props.get('border.bottom.visible')) {
                borderData.push({
                    x1: 0,
                    y1: height,
                    x2: width,
                    y2: height
                });
            }

            var d3border = selection.selectAll("." + CSSCLASS_BORDER).data(borderData);
            d3border.enter().append('svg:line').attr('class', CSSCLASS_BORDER + ' ' + CSSCLASS_BORDER_2);
            d3border.exit().remove();
            d3border.attr('x1', function(d) {
                return d.x1;
            }).attr('y1', function(d) {
                return d.y1;
            }).attr('x2', function(d) {
                return d.x2;
            }).attr('y2', function(d) {
                return d.y2;
            });
            d3border.style("stroke", props.get('border.stroke')).
                style("stroke-width", props.get('border.strokeWidth'));
            // now we use attribute in dom element to let customer css file work.
            /*d3border.each(function(d) {
                d3.select(this).attr('shape-rendering', 'crispEdges');
                for (var key in properties.style.border) {
                    if (properties.style.border.hasOwnProperty(key)) {
                        d3.select(this).attr(key, properties.style.border[key]);
                    }
                }
            });*/
        } else {
            var temp = selection.node();
            while (temp.hasChildNodes()) {
                temp.removeChild(temp.firstChild);
            }
        }

        //currently, we do not have animation. If it has, should fire initialized event after animation complete.
        this._eDispatch.initialized();

        return this;
    };

    prot.destroy = function() {
        Background.superclass.destroy.call(this);
        this._eDispatch.on('initialized', null);
        this._eDispatch = null;
    };

    return Background;
});

define('sap/viz/chart/components/legend/BaseLegend',['sap/viz/framework/common/util/oo', 'sap/viz/chart/components/UIComponent', 
    'sap/viz/chart/components/util/BoundUtil',
    "sap/viz/framework/common/util/TypeUtils", 'sap/viz/chart/components/util/TextUtils',
    'sap/viz/framework/common/util/PropertyZoneUtil', 'sap/viz/framework/common/util/FeedingZoneUtil',
    'sap/viz/framework/common/lang/LangManager', 'sap/viz/framework/common/util/ObjectUtils'
], function(oo, UIComponent, BoundUtil, TypeUtils, TextUtils,
    PropertyZoneUtil, FeedingZoneUtil, langManager, ObjectUtils) {

    var MND = "measureNames";

    var BaseLegend = function(runtime, options) {

        BaseLegend.superclass.constructor.apply(this, arguments);

        this._title = undefined;
        this._bindingFields = null;
        this._parent = null;
        this._pos = {
            x: 0,
            y: 0
        };
        this._titleMarginBottom = 0.5;
        this._width = 0;
        this._height = 0;
        
        var that = this;
        var legendPropertyZone = {},
            legendFeedingZone = {};

        legendPropertyZone[this._name] = {
            value: [],
            readonly: true,
            serializable: false,
            get: function() {
                var result = [],
                    zonenamePrefix, boundRect, boundRect1, bound, bound1, temp, root;
                if (isSizeLegend(that._type)) {
                    zonenamePrefix = 'sizeLegend';
                } else {
                    zonenamePrefix = 'legend';
                }

                // Get legend title property zone
                if (that.isVisible() && that._properties.get('title.visible') && that._parent) {
                    boundRect = that._parent.select(".viz-legend-title.v-title").node().getBoundingClientRect();
                    if (boundRect.width > 1.5 && boundRect.height > 1.5) {
                        bound = [
                            []
                        ];
                        bound[0].push([boundRect.left, boundRect.top]);
                        bound[0].push([boundRect.right, boundRect.top]);
                        bound[0].push([boundRect.right, boundRect.bottom]);
                        bound[0].push([boundRect.left, boundRect.bottom]);
                        result.push({
                            "name": zonenamePrefix + ' title',
                            "bound": bound
                        });
                    }
                }
                if (that._parent && that._parent.select(".v-bound").node()) {
                    temp = that._parent.select(".v-bound").node().getBoundingClientRect();
                    // temp = that._parent ?
                    // that._parent.select(".v-bound").node().getBoundingClientRect()
                    // : {};
                    if (temp.width > 1.5 && temp.height > 1.5) {
                        boundRect1 = {
                            left: temp.left,
                            right: temp.right,
                            top: temp.top,
                            bottom: temp.bottom
                        };
                        if (result.length > 0) {
                            boundRect1.top = result[0].bound[0][3][1] + 1;
                        }
                        bound1 = [
                            []
                        ];
                        bound1[0].push([boundRect1.left, boundRect1.top]);
                        bound1[0].push([boundRect1.right, boundRect1.top]);
                        bound1[0].push([boundRect1.right, boundRect1.bottom]);
                        bound1[0].push([boundRect1.left, boundRect1.bottom]);

                        result.push({
                            "name": zonenamePrefix,
                            "bound": bound1
                        });
                    }
                    root = that._parent.node().ownerSVGElement;
                }
                PropertyZoneUtil.calcOffsetFromChart(root, result);
                return result;
            }
        };

        legendFeedingZone[this._name] = {
            value: [],
            readonly: true,
            serializable: false,
            get: function() {
                var result, zonenamePrefix, feeding;
                if (that._parent && !that._isDedicated) {
                    var root = d3.select(that._parent.node().ownerSVGElement);
                    if (isSizeLegend(that._type)) {
                        zonenamePrefix = 'sizeLegend';
                    } else {
                        zonenamePrefix = 'legend';
                    }
                    result = FeedingZoneUtil.buildRes(zonenamePrefix, feeding, root, true);
                }
                return result;
            }
        };
        runtime.zoneManager().add({
            tempPropertyZone: legendPropertyZone,
            tempFeedingZone: legendFeedingZone
        });

        var props = this._properties;

        this._orientation = null;

        this._titleFont = {
            'fontFamily': props.get('title.style.fontFamily'),
            'fontSize': props.get('title.style.fontSize'),
            'fontWeight': props.get('title.style.fontWeight'),
            'color': props.get('title.style.color'),
            'fontStyle': props.get('title.style.fontStyle')
        };
    };

    oo.extend(BaseLegend, UIComponent);

    BaseLegend.prototype.visible = function() {
        return this._properties.get("visible");
    };

    BaseLegend.prototype.setOrientation = function(orientation) {
        this._orientation = orientation;
    };

    BaseLegend.prototype.setDedicated = function(_isDedicated) {
        this._isDedicated = _isDedicated;
    };

    BaseLegend.prototype.isHorizontal = function() {
        return (this._orientation === 'top') || (this._orientation === 'bottom');
    };

    BaseLegend.prototype.render = function(selection) {
        this._pos = {
            x: 0,
            y: 0
        };

        var titleWrapper = selection.selectAll('text.v-title');
        if (this.isVisible() || this._isDedicated) {
            var props = this._properties;
            BoundUtil.drawBound(selection, this._width, this._height, undefined, true);

            if (this._properties.get("title.visible") === true) {
                if (titleWrapper.empty()) {
                    titleWrapper = selection.append('text').attr('class', 'v-title viz-legend-title');
                }
                var defalutTitleFont;
                defalutTitleFont = {
                    "fill": props.get('title.style.color'),
                    "font-family": props.get('title.style.fontFamily'),
                    "font-size": props.get('title.style.fontSize'),
                    "font-weight": props.get('title.style.fontWeight'),
                    "font-style": props.get('title.style.fontStyle')
                };
                var titleTextHeight = parseInt(this._titleFont.fontSize, 10);
                var titleText = this._getTitleText();
                var labelFont = "font-size:" + this._titleFont.fontSize +
                    "; font-weight:" + this._titleFont.fontWeight +
                    "; font-family:" + this._titleFont.fontFamily +
                    "; font-style:" + this._titleFont.fontStyle;
                var that = this;
                this._pos.y = this._pos.y + titleTextHeight;
                titleWrapper.text(titleText).attr('font-weight', defalutTitleFont['font-weight']).attr('fill',
                    defalutTitleFont.fill).attr('font-family', defalutTitleFont['font-family']).attr('font-size',
                    defalutTitleFont['font-size']).attr('font-style', defalutTitleFont['font-style']).attr('x',
                    this._pos.x).attr('y', this._pos.y).attr('visibility', 'visible');

                titleWrapper.each(function(d) {
                    TextUtils.ellipsis(titleText, this, that.width() - that._pos.x, labelFont);
                });
                this._pos.y = this._pos.y + titleTextHeight * this._titleMarginBottom;
            } else {
                titleWrapper.remove();
            }
        } else {
            BoundUtil.drawBound(selection, 0, 0);
            titleWrapper.remove();
        }
        return this;
    };

    BaseLegend.prototype.width = function(width) {
        if (!arguments.length) {
            return this._width;
        }
        this._width = width;
        return this;
    };

    BaseLegend.prototype.height = function(height) {
        if (!arguments.length) {
            return this._height;
        }
        this._height = height;
        return this;
    };

    BaseLegend.prototype.setSize = function(size) {
        this._width = size.width;
        this._height = size.height;
    };

    BaseLegend.prototype.setBindingFields = function(_) {
        this._bindingFields = _;
        return this;
    };

    BaseLegend.prototype.parent = function(parent) {
        if (!arguments.length) {
            return this._parent;
        }
        this._parent = parent;
        return this;
    };

    BaseLegend.prototype.getParent = function() {
        return this._parent;
    };

    BaseLegend.prototype._getTitleText = function() {
        var text = "";
        var userInputTitle = this._properties.get("title.text");

        if (TypeUtils.isString(userInputTitle)) {
            text = userInputTitle;
        } else if (this._bindingFields) {
            text = this._constructTitle(this._bindingFields);
        } else {
            text = langManager.get('IDS_ISNOVALUE');
        }
        return text;
    };

    BaseLegend.prototype._constructTitle = function(header) {
        var toDraw = header.map(function(o) {

            if (o.id === MND) {
                return o.name || langManager.get("IDS_DEFAULTMND") || o.id;
            }

            return o.name || o.id;
        });

        var toDrawItems = [];

        for (var i = 0; i < toDraw.length; i++) {
            if (header && header.length > 1 && header[i].id === MND && header[i].values.length === 1) {
                // only one measure and one or more dimensions.
                // We ignore the measure name.
                continue;
            }

            toDrawItems.push(toDraw[i]);
        }

        return toDrawItems.join(" / ");
    };

    BaseLegend.prototype._getTitlePreferredSize = function() {
        this._getThemeStyleDef();
        var preSize = {
            maxWidth: 0,
            maxHeight: 0,
            minWidth: 0,
            minHeight: 0
        };
        if (this._properties.get("title.visible")) {
            var titleTextHeight = parseInt(this._titleFont.fontSize, 10);

            var fontSize = this._titleFont.fontSize;
            var fontWeight = this._titleFont.fontWeight;
            var fontFamily = this._titleFont.fontFamily;
            var fontStyle = this._titleFont.fontStyle;

            var titleText = this._getTitleText();
            preSize = {
                maxWidth: TextUtils.fastMeasure(titleText, fontSize, fontWeight, fontFamily, fontStyle).width,
                maxHeight: titleTextHeight * (1 + this._titleMarginBottom),
                minWidth: TextUtils.fastMeasure("M...", fontSize, fontWeight, fontFamily, fontStyle).width,
                minHeight: titleTextHeight * (1 + this._titleMarginBottom)
            };
        }
        return preSize;
    };

    BaseLegend.prototype.getData = function() {
        return this._data;
    };

    BaseLegend.prototype.setData = function(value) {
        this._data = value;
        return this;
    };

    BaseLegend.prototype.data = function(value) {
        if (!arguments.length) {
            return this.getData();
        }
        return this.setData(value);
    };

    BaseLegend.prototype.destroy = function() {
        this._properties = null;
        this._title = null;
        this._parent = null;
        
        this._bindingFields = null;
        this._pos = null;
        this._titleMarginBottom = null;
        this._width = null;
        this._height = null;
        this._titleFont = null;
        this._orientation = null;
        this._isDedicated = null;
        BaseLegend.superclass.destroy.call(this);
    };

    BaseLegend.prototype.getPreferredSize = function(bound) {
        var bounds = ObjectUtils.extend(false, bound);
        var result = {
            width: 0,
            height: 0,
            maxWidth: 0,
            maxHeight: 0,
            minWidth: 0,
            minHeight: 0
        };
        if (this.visible() || this._isDedicated) {
            // currently, we always disable title of legend.
            var titleSize = this._getTitlePreferredSize(bounds);
            bounds.height -= titleSize.maxHeight;
            var bodySize = this._getBodyPreferredSize(bounds);

            result = {
                width: (titleSize.maxWidth > bodySize.maxWidth ? titleSize.maxWidth : bodySize.maxWidth),
                height: titleSize.maxHeight + bodySize.maxHeight,
                maxWidth: (titleSize.maxWidth > bodySize.maxWidth ? titleSize.maxWidth : bodySize.maxWidth),
                maxHeight: titleSize.maxHeight + bodySize.maxHeight,
                minWidth: (titleSize.minWidth > bodySize.minWidth ? titleSize.minWidth : bodySize.minWidth),
                minHeight: titleSize.minHeight + bodySize.minHeight
            };

            if (this._isDedicated) {
                this._width = result.maxWidth;
                this._height = result.maxHeight;
            }
        }
        return result;
    };

    BaseLegend.prototype.isVisible = function() {
        return this.visible() && this._width > 0 && this._height > 0;
    };

    BaseLegend.prototype._getThemeStyleDef = function() {

        var props = this._properties.proxy('title.style');

        var titleStyle;
        titleStyle = {
            "fill": props.get('color'),
            "font-family": props.get('fontFamily'),
            "font-size": props.get('fontSize'),
            "font-weight": props.get('fontWeight'),
            "font-style": props.get('fontStyle')
        };
        if (titleStyle) {
            if (titleStyle.fill) {
                this._titleFont.color = titleStyle.fill;
            }
            if (titleStyle['font-family']) {
                this._titleFont.fontFamily = titleStyle['font-family'];
            }
            if (titleStyle['font-size']) {
                this._titleFont.fontSize = titleStyle['font-size'];
            }
            if (titleStyle['font-weight']) {
                this._titleFont.fontWeight = titleStyle['font-weight'];
            }
            if (titleStyle['font-style']) {
                this._titleFont.fontStyle = titleStyle['font-style'];
            }
        }
    };

    var isSizeLegend = function(legendType) {
        var result = false;
        if (legendType === 'SizeLegend') {
            result = true;
        }
        return result;
    };

    return BaseLegend;
});
define('sap/viz/chart/components/util/DrawUtil',['sap/viz/framework/common/util/TypeUtils'],

    function Setup(TypeUtils) {
        /*jshint bitwise:false */
        var DrawUtil = {

        };

        /**
         *  props = {
         *    type:
         *    rx:
         *    ry:
         *  }
         *  @return path "d" for D3
         */
        DrawUtil.createMarkerData = function(props) {
            // TODO Maybe we can use hashmap to cache here
            //if(symbolMap[props]) return symbolMap[props];
            var result;
            var temp = props.borderWidth / 2;
            switch (props.type) {
                case "circle":
                    result = "M" + (-props.rx - temp) + ",0 A" + (props.rx + temp) + "," + (props.ry + temp) +
                        " 0 1,0 " + (props.rx + temp) + ",0 A";
                    result += (props.rx + temp) + "," + (props.ry + temp) + " 0 1,0 " + (-props.rx - temp) + ",0z";
                    break;
                case "cross":
                    result = "M" + (-props.rx - temp) + "," + (-props.ry / 3 - temp) + "H" + (-props.rx / 3 - temp) +
                        "V" + (-props.ry - temp) + "H" + (props.rx / 3 + temp);
                    result += "V" + (-props.ry / 3 - temp) + "H" + (props.rx + temp) + "V" + (props.ry / 3 + temp) +
                        "H" + (props.rx / 3 + temp);
                    result += "V" + (props.ry + temp) + "H" + (-props.rx / 3 - temp) + "V" + (props.ry / 3 + temp) +
                        "H" + (-props.rx - temp) + "Z";
                    break;
                case "diamond":
                    result = "M0," + (-props.ry - temp) + "L" + (props.rx + temp) + ",0" + " 0," + (props.ry + temp) +
                        " " + (-props.rx - temp) + ",0" + "Z";
                    break;
                case "square":
                    result = "M" + (-props.rx - temp) + "," + (-props.ry - temp) + "L" + (props.rx + temp) + ",";
                    result += (-props.ry - temp) + "L" + (props.rx + temp) + "," + (props.ry + temp) + "L" +
                        (-props.rx - temp) + "," + (props.ry + temp) + "Z";
                    break;
                case "rectangle":
                    result = "M" + (-props.rx - temp) + "," + (-props.ry/2 - temp) + "L" + (props.rx + temp) + ",";
                    result += (-props.ry/2 - temp) + "L" + (props.rx + temp) + "," + (props.ry/2 + temp) + "L" +
                        (-props.rx - temp) + "," + (props.ry/2 + temp) + "Z";
                    break;
                case "triangle-down": //TODO: remove duplicate
                case "triangleDown":
                    result = "M0," + (props.ry + temp) + "L" + (props.rx + temp) + "," + -(props.ry + temp) + " " + -(
                        props.rx + temp) + "," + -(props.ry + temp) + "Z";
                    break;
                case "triangle-up": //TODO: remove duplicate
                case "triangleUp":
                    result = "M0," + -(props.ry + temp) + "L" + (props.rx + temp) + "," + (props.ry + temp) + " " + -(
                        props.rx + temp) + "," + (props.ry + temp) + "Z";
                    break;
                case "triangle-left": //TODO: remove duplicate
                case "triangleLeft":
                    result = "M" + -(props.rx + temp) + ",0L" + (props.rx + temp) + "," + (props.ry + temp) + " " + (
                        props.rx + temp) + "," + -(props.ry + temp) + "Z";
                    break;
                case "triangle-right": //TODO: remove duplicate
                case "triangleRight":
                    result = "M" + (props.rx + temp) + ",0L" + -(props.rx + temp) + "," + (props.ry + temp) + " " + -(
                        props.rx + temp) + "," + -(props.ry + temp) + "Z";
                    break;
                case "intersection":
                    result = "M" + (props.rx + temp) + "," + (props.ry + temp) + "L" + (props.rx / 3 + temp) + ",0L" +
                        (props.rx + temp) + "," + -(props.ry + temp) + "L";
                    result += (props.rx / 2 - temp) + "," + -(props.ry + temp) + "L0," + (-props.ry / 3 - temp) + "L" +
                        (-props.rx / 2 + temp) + "," + -(props.ry + temp) + "L";
                    result += -(props.rx + temp) + "," + -(props.ry + temp) + "L" + -(props.rx / 3 + temp) + ",0L" + -(
                        props.rx + temp) + "," + (props.ry + temp) + "L";
                    result += (-props.rx / 2 + temp) + "," + (props.ry + temp) + "L0," + (props.ry / 3 + temp) + "L" +
                        (props.rx / 2 - temp) + "," + (props.ry + temp) + "Z";
                    break;
                case 'squareWithRadius':
                    var r = props.rx;
                    var radius = r - 3;
                    result = "M0," + -r + "L" + -radius + "," + -r + "Q" + -r + "," + -r + " " + -r + "," + -radius +
                        "L" + -r + "," + radius + "Q" + -r + "," + r + " " + -radius + "," + r;
                    result += "L" + radius + "," + r + "Q" + r + "," + r + " " + r + "," + radius + "L" + r + "," + -
                        radius + "Q" + r + "," + -r + " " + radius + "," + -r + "Z";
                    break;
                case "vbar":
                    result = "M" + (-props.rx / 3) + "," + (-props.ry) + "H" + (props.rx / 3) + "V" + (props.ry) + 
                        "H" + (-props.rx / 3) + "Z";
                    break;
            }
            //symbolMap[props] = result;
            return result;

        };

        function getAnimationInitData(props) {
            var result;
            switch (props.type) {
                case "circle":
                    result = "M0,0A0,0 0 1,0 0,0A0,0 0 1,0 0,0z";
                    break;
                case "cross":
                    result = "M0,0H0V0H0V0H0V0H0V0H0V0H0Z";
                    break;
                case "diamond":
                    result = "M0,0L0,0 0,0 0,0Z";
                    break;

                case "triangle-down": //TODO: remove duplicate
                case "triangle-up": //TODO: remove duplicate
                case "triangle-left": //TODO: remove duplicate
                case "triangle-right": //TODO: remove duplicate
                case "triangleDown":
                case "triangleUp":
                case "triangleLeft":
                case "triangleRight":
                    result = "M0,0L0,0 0,0Z";
                    break;
                case "intersection":
                    result = "M0,0L0,0L0,0L0,0L0,0L0,0L0,0L0,0L0,0L0,0L0,0L0,0Z";
                    break;
                case 'squareWithRadius':
                    result = "M0,0L0,0Q0,0 0,0L0,0Q0,0 0,0L0,0Q0,0 0,0L0,0Q0,0 0,0Z";
                    break;
                case "square":
                    result = "M0,0L0,0L0,0L0,0Z";
                    break;
                default:
                    result = "M0,0L0,0L0,0L0,0Z";
                    break;
            }
            return result;
        }

        DrawUtil.createElements = function(d3Enter, props) {
            return d3Enter.append("path").attr("class", props.className);
        };

        DrawUtil.createElement = function(d3Parent, props, effectManager) {
            var d3Element = d3Parent.append("path").attr("class", props.className);
            props.node = d3Element;
            DrawUtil.drawGraph(props, effectManager);
            return d3Element;
        };

        /**
         * props = {
         *   node: current d3 svg element,
         *  graphType : marker type
         *  drawingEffect: drawingEffect
         *  direction : direction
         *   rx : size
         *  ry: size
         *  fillColor: color
         *  borderWidth:
         *  borderColor,
         *  visibility: "visible" or "hidden"
         *  animateTime: total time for animation in ms
         *  strokeOpacity: opacity for border line
         *  endFunc: callback function, when animation complete, it will be called
         * }
         *  effectManager: current effectManager
         */
        DrawUtil.drawGraph = function(props, effectManager, a) {
            return DrawUtil.updateGraph(props, effectManager, a, DrawUtil.createGraph(props));
        };

        DrawUtil.createGraph = function(props) {
            var para = {
                    type: props.graphType,
                    rx: Math.round(props.rx),
                    ry: Math.round(props.ry),
                    borderWidth: props.borderWidth ? Math.round(props.borderWidth) : 0
                },
                result = DrawUtil.createMarkerData(para);
            if (!result && props.defaultShape) {
                para.type = props.defaultShape;
                result = DrawUtil.createMarkerData(para);
            }
            return result;
        };


        DrawUtil.updateGraph = function(props, effectManager, a, data) {
            var para = {
                type: props.graphType,
                rx: Math.round(props.rx),
                ry: Math.round(props.ry),
                borderWidth: props.borderWidth ? Math.round(props.borderWidth) : 0
            };
            var tempOpacity;
            if (props.visibility === 'hidden') {
                tempOpacity = 0;
            } else {
                tempOpacity = 1;
            }

            var fillId;
            if (props.fillId) {
                fillId = props.fillId;
            } else {
                fillId = effectManager ? effectManager.register(props, a) : props.fillColor;
            }

            var borderColor = effectManager && props.borderColor ? effectManager.register({
                fillColor: props.borderColor
            }) : props.borderColor;

            if (props.animateTime && props.animateTime > 0) {
                props.node.each(function() {
                    this.setAttribute("class", props.className);
                    if (!this.getAttribute("fill")) {
                        this.setAttribute("fill", fillId);
                    }
                    this.setAttribute("stroke-width", props.borderWidth);
                    this.setAttribute("stroke", borderColor);
                    this.setAttribute("opacity", tempOpacity);
                    this.setAttribute("stroke-opacity", props.strokeOpacity);
                    if (!this.getAttribute("d")) {
                        this.setAttribute("d", getAnimationInitData(para));
                    }
                });
                var t = props.node.transition().duration(props.animateTime).attr("fill", fillId).each('end',
                    props.endFunc);
                if (data) {
                    t.attr("d", data);
                }
            } else {
                props.node.each(function() {
                    this.setAttribute("class", props.className);
                    this.setAttribute("fill", fillId);
                    if (fillId !== "transparent") {
                        this.setAttribute("stroke-width", props.borderWidth);
                        this.setAttribute("stroke", borderColor);
                        if (!a) {
                            this.setAttribute("opacity", tempOpacity);
                        }
                        if (props.fillOpacity !== undefined) {
                            this.setAttribute("fill-opacity", props.fillOpacity);
                        }
                    }
                    this.setAttribute("stroke-opacity", props.strokeOpacity);
                    if (data) {
                        this.setAttribute("d", data);
                    }
                });
            }
            return props.node;
        };

        DrawUtil.rgb2Hex = function(rgb) {
            return "#" + ((1 << 24) + (rgb.r << 16) + (rgb.g << 8) + rgb.b).toString(16).slice(1);
        };

        DrawUtil.hex2Rgb = function(color) {
            var rgb = parseInt(color.slice(1), 16);
            return {
                r: rgb >> 16,
                g: rgb >> 8 & 0xff,
                b: rgb & 0xff
            };
        };

        DrawUtil.highlightProperties = {
            attributeOpacityName: 'fill-opacity',
            attributeColorName: 'fill',
            strokeWidth: 1,
            selectedOpacity: 1,
            unSelectedOpacity: 0.4,
            recoveryOldAttributes: false
        };

        DrawUtil.resetHighlightProperties = function() {
            DrawUtil.highlightProperties = {};
            DrawUtil.highlightProperties.attributeOpacityName = 'fill-opacity';
            DrawUtil.highlightProperties.attributeColorName = 'fill';
            DrawUtil.highlightProperties.strokeWidth = 1;
            DrawUtil.highlightProperties.selectedOpacity = 1;
            DrawUtil.highlightProperties.unSelectedOpacity = 0.4;
            DrawUtil.highlightProperties.recoveryOldAttributes = false;
        };

        DrawUtil.getNodeAttributeValue = function(node, attrName) {
            return node.getAttribute(attrName);
        };

        DrawUtil.getColorString = function(node, attributeColorName) {
            var colorName = (attributeColorName) ? attributeColorName : DrawUtil.highlightProperties.attributeColorName;
            var color = node.getAttribute(colorName);
            if (color.indexOf('url') !== -1) {
                var urlSelector = color.substring(color.indexOf('#'), color.indexOf(')'));
                var urlDefs = d3.selectAll(urlSelector);
                if (!urlDefs.empty()) {
                    var colorTable = urlDefs.selectAll('stop');
                    if (!colorTable.empty()) {
                        color = colorTable[0][colorTable[0].length - 1].getAttribute('stop-color');
                    }
                }
            }
            return color;
        };

        DrawUtil.colorLinerTransform = function(rgbHelperFun, linerVariable, colorString) {
            var oldRGB = rgbHelperFun.color2rgba(colorString);
            var factor = 1,
                constant = 0;
            factor = linerVariable.factor;
            constant = linerVariable.constant;
            return {
                r: Math.min(255, Math.round(oldRGB.r * factor + constant)),
                g: Math.min(255, Math.round(oldRGB.g * factor + constant)),
                b: Math.min(255, Math.round(oldRGB.b * factor + constant))
            };
        };

        DrawUtil.nodeDecoration = function(node, decorationBag) {
            if (node && decorationBag) {
                for (var prop in decorationBag) {
                    if (decorationBag.hasOwnProperty(prop)) {
                        node.setAttribute(prop, decorationBag[prop]);
                    }
                }
            }
        };

        DrawUtil.nodeHighlight = function(node, linerVariable, borderWidth, rgbHelperFun, hovered) {
            var colorString = DrawUtil.getColorString(node, DrawUtil.highlightProperties.attributeColorName);
            if (rgbHelperFun) {
                if (!DrawUtil.highlightProperties.hoverBorderColor &&
                    !DrawUtil.highlightProperties.selectedBorderColor) {
                    var newRGB = DrawUtil.colorLinerTransform(rgbHelperFun, linerVariable, colorString);
                    node.setAttribute('stroke', DrawUtil.rgb2Hex(newRGB));
                } else {
                    if (hovered) {
                        node.setAttribute('stroke', DrawUtil.highlightProperties.hoverBorderColor);
                    } else {
                        node.setAttribute('stroke', DrawUtil.highlightProperties.selectedBorderColor);
                    }
                }
                node.setAttribute('stroke-width', borderWidth);

                if (!hovered) {
                    node.setAttribute(DrawUtil.highlightProperties.attributeOpacityName,
                        DrawUtil.highlightProperties.selectedOpacity);
                }
            }
        };

        DrawUtil.nodesHighlight = function(nodes, linerVariable, rgbHelperFun, hovered) {
            if (!TypeUtils.isArray(nodes)) {
                nodes = [nodes];
            }

            for (var i = 0; i < nodes.length; i++) {
                if (hovered) {
                    DrawUtil.nodeHighlight(nodes[i], linerVariable, DrawUtil.highlightProperties.strokeWidth * 2,
                        rgbHelperFun, hovered);
                } else {
                    DrawUtil.nodeHighlight(nodes[i], linerVariable, DrawUtil.highlightProperties.strokeWidth,
                        rgbHelperFun, hovered);
                }
            }
        };

        DrawUtil.nodesUnhighlight = function(nodes, selected, normalMode) {
            if (!TypeUtils.isArray(nodes)) {
                nodes = [nodes];
            }

            for (var i = 0; i < nodes.length; i++) {
                if (selected) {
                    nodes[i].setAttribute('stroke-width', DrawUtil.highlightProperties.strokeWidth);
                    if (DrawUtil.highlightProperties.selectedBorderColor) {
                        nodes[i].setAttribute('stroke', DrawUtil.highlightProperties.selectedBorderColor);
                    }
                } else {
                    if (DrawUtil.highlightProperties.recoveryOldAttributes &&
                        DrawUtil.highlightProperties.recoveryPropsBag) {
                        for (var prop in DrawUtil.highlightProperties.recoveryPropsBag) {
                            if (DrawUtil.highlightProperties.recoveryPropsBag.hasOwnProperty(prop)) {
                                nodes[i].setAttribute(prop, DrawUtil.highlightProperties.recoveryPropsBag[prop]);
                            }
                        }
                    } else {
                        nodes[i].setAttribute('stroke', 'none');
                        if (normalMode) {
                            nodes[i].setAttribute(DrawUtil.highlightProperties.attributeOpacityName,
                                DrawUtil.highlightProperties.selectedOpacity);
                        } else {
                            nodes[i].setAttribute(DrawUtil.highlightProperties.attributeOpacityName,
                                DrawUtil.highlightProperties.unSelectedOpacity);
                        }
                    }
                }
            }
        };

        return DrawUtil;
    });

define('sap/viz/chart/components/scrollbar/Scrollbar',[
    "sap/viz/framework/common/util/Constants",
    'sap/viz/framework/common/util/oo',
    'sap/viz/chart/components/UIComponent',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/UADetector',
    'sap/viz/framework/common/util/PositionUtil'
], function Setup(Constants, oo, UIComponent, ObjectUtils, TypeUtils, UADetector, PositionUtil) {
    /*
     * min_ScrollBar_Size = style.thumbSize + style.padding * 2
     */
    var Scrollbar = function(runtime, options) {
        Scrollbar.superclass.constructor.apply(this, arguments);

        this._props = {
            contentSize: 0,
            trackSize: 0,
            vertical: true,
            visibility: 'visible',
            isExist: false,
            style: {
                thumbSize: UADetector.isMobile() ? 8 : 12,
                opacity: 1,
                padding: 0,
                trackVisible: true,
                isRoundCorner: false
            },
            onScroll: function() {}
        };
        this._thumbProps = {
            opacity: 1
        };
        this._trackProps = {
            opacity: 1
        };
        this._thumbPosition = 0;
        this._scrollbarThumb = null;
        this._scrollbarTrack = null;
        this._startPos = null;
        this._maxThumbPosition = 0;
        this._contentStartPos = 0;
        this._selection = null;
        this._isPressed = false;
        this._thumbSize = null;
        this._pageDistance = 0;
        this._contentRatio = null;
        this._trackRatio = null;
        this._position = null;
        this._trackSize = 0;
        this._isDomNodeEmpty = false;
        this._minThumbSize = 0;
    };

    oo.extend(Scrollbar, UIComponent);

    Scrollbar.prototype.render = function(selection) {
        if(selection) {
            this._selection = selection;
        }
        if (!this._props.isExist) {
            return;
        }
        var props = this._properties;
        var isVertical = this._isVertical();
        var trackSize = this._props.trackSize || (isVertical ? this._size.height : this._size.width);
        var contentSize = this._props.contentSize || (isVertical ? this._realSize.height :
            this._realSize.width);
        this._trackSize = trackSize;
        this._props.trackSize = trackSize;
        this._props.contentSize = contentSize;
        if (this._props.behaviorMode === 'scroll' && trackSize >= contentSize) {
            this._isDomNodeEmpty = true;
            return;
        } else {
            this._isDomNodeEmpty = false;
        }

        var wrapper = this._selection.selectAll('g');
        var thumbWidth = this._props.style.thumbSize;
        if (wrapper.empty()) {
            wrapper = this._selection.append('g');
        }
        var scrollbarThumb = wrapper.selectAll('rect.v-m-scrollbarThumb');
        var scrollbarTrack = wrapper.selectAll('rect.v-m-scrollbarTrack');
        if (this._props.style.trackVisible && scrollbarTrack.empty()) {
            scrollbarTrack = wrapper.append('rect')
                .attr('class', 'v-m-scrollbarTrack')
                .attr('opacity', this._trackProps.opacity);
        }
        scrollbarTrack.attr('visibility', this._props.visibility)
            .attr('fill', props.get('track.fill'));

        if (isVertical) {
            scrollbarTrack.attr('width', thumbWidth).attr('height', trackSize);
        } else {
            scrollbarTrack.attr('width', trackSize).attr('height', thumbWidth);
        }
        this._scrollbarTrack = scrollbarTrack;
        if (scrollbarThumb.empty()) {
            scrollbarThumb = wrapper.append('rect')
                .attr('class', 'v-m-scrollbarThumb')
                .attr('opacity', this._thumbProps.opacity);

            if (this._props.style.isRoundCorner) {
                scrollbarThumb.attr('rx', thumbWidth / 2).attr('ry', thumbWidth / 2);
            }
        }
        scrollbarThumb.attr('visibility', this._props.visibility)
            .attr('fill', props.get('thumb.fill'));
        this._scrollbarThumb = scrollbarThumb;
        this._contentRatio = trackSize / contentSize;
        this._trackRatio = contentSize / trackSize;
        var thumbSize = this._contentRatio * trackSize;
        this._pageDistance = thumbSize;
        this._maxThumbPosition = trackSize - thumbSize;

        this._minThumbSize = this._props.style.thumbSize * 2 + this._props.style.padding * 2;
        if (thumbSize < this._minThumbSize) {
            thumbSize = this._minThumbSize;
            this._maxThumbPosition = trackSize - thumbSize;
            this._trackRatio = (contentSize - trackSize) / (trackSize - thumbSize);
        }

        this._thumbSize = thumbSize;
        if (isVertical) {
            scrollbarThumb.attr('width', thumbWidth).attr('height', thumbSize).attr(
                'transform', 'translate(' +
                this._props.style.padding + ',' + this._thumbPosition + ')');
        } else {
            scrollbarThumb.attr('width', thumbSize).attr('height', thumbWidth).attr(
                'transform', 'translate(' +
                this._thumbPosition + ',' + this._props.style.padding + ')');
        }

        if (UADetector.isWindowsSurface() || 
            UADetector.isMobile() || 
            this._runtime._effectMgr._enableGhostEffect) {
            return wrapper;
        }

        //build event
        var that = this;

        var moveHandler = function(e) {
            _mousemoveHandler.call(that, e);
            e.preventDefault();
            e.stopPropagation();
        };

        var upHandler = function(e) {
            _mouseupHandler.call(that, e);
            if (window.removeEventListener !== undefined) {
                window.removeEventListener("mousemove", moveHandler);
                window.removeEventListener("mouseup", upHandler, true);
            } else {
                document.body.removeEventListener("mousemove", moveHandler);
                document.body.removeEventListener("mouseup", upHandler, true);
            }
        };

        scrollbarThumb.on('mousedown', function() {
            _mousedownHandler.call(that, d3.event);
            if (window.addEventListener !== undefined) {
                window.addEventListener('mousemove', moveHandler);
                window.addEventListener('mouseup', upHandler, true);
            } else {
                document.body.addEventListener("mousemove", moveHandler);
                document.body.addEventListener("mouseup", upHandler, true);
            }
        }).on('mouseover', function() {
            _mouseoverHandler.call(that);
        }).on('mouseleave', function() {
            _mouseleaveHandler.call(that);
        });

        scrollbarTrack.on('click', function() {
            _mouseclickHandler.call(that, d3.event);
        });

        var _mouseclickHandler = function(event) {
            this._startPos = 0;
            var offset = this._pageDistance;
            var trackBoudingBox = this._scrollbarTrack.node().getBoundingClientRect();
            if (this._isVertical()) {
                if (event.clientY < (trackBoudingBox.top + this._thumbPosition)) {
                    offset = -offset;
                }
            } else {
                if (event.clientX < (trackBoudingBox.left + this._thumbPosition)) {
                    offset = -offset;
                }
            }
            _scrollTo.call(this, offset);
        };

        var _mousedownHandler = function(e) {
            if (this._isVertical()) {
                this._startPos = e.clientY;
            } else {
                this._startPos = e.clientX;
            }
            this._scrollbarThumb.attr('fill', this._properties.get('thumb.hoverFill'));
            this._isPressed = true;
        };

        var _mouseupHandler = function(e) {
            this._startPos = undefined;
            this._isPressed = false;
            if (e.target !== this._scrollbarThumb.node()) {
                this._scrollbarThumb.attr('fill', this._properties.get('thumb.fill'));
            }
        };

        var _mousemoveHandler = function(event) {
            if (this._startPos !== undefined) {
                if (this._isVertical()) {
                    _scrollTo.call(this, event.clientY - this._startPos);
                    this._startPos = event.clientY;
                } else {
                    _scrollTo.call(this, event.clientX - this._startPos);
                    this._startPos = event.clientX;
                }
                this._scrollbarThumb.attr('visibility', 'visible');
            }
        };

        var _mouseoverHandler = function() {
            this._scrollbarThumb.attr('fill', this._properties.get('thumb.hoverFill'));
        };

        var _mouseleaveHandler = function() {
            if (!this._isPressed) {
                this._scrollbarThumb.attr('fill', this._properties.get('thumb.fill'));
            }
        };

        return wrapper;
    };

    Scrollbar.prototype.show = function() {
        this.setProperties({
            visibility:"visible"
        });
        if (this._scrollbarThumb) {
            this._scrollbarThumb.attr("visibility", "visible");
        }
        if (this._scrollbarTrack) {
            this._scrollbarTrack.attr("visibility", "visible");
        }
    };

    Scrollbar.prototype.hide = function() {
        this.setProperties({
            visibility:"hidden"
        });
        if (this._scrollbarThumb) {
            this._scrollbarThumb.attr("visibility", "hidden");
        }
        if (this._scrollbarTrack) {
            this._scrollbarTrack.attr("visibility", "hidden");
        }
    };

    Scrollbar.prototype.moveTo = function(ratio) {
        this.setThumbPosition((this._maxThumbPosition + this._thumbSize) * ratio);
    };

    Scrollbar.prototype.adjustThumbPosition = function(offset){
        this.setThumbPosition(this._computeThumbPosition(offset));
    };

    Scrollbar.prototype.computePlotPosition = function() {
        var position = -Math.round(this._thumbPosition * this._trackRatio);
        if (this._thumbPosition === 0) {
            position = 0;
        }
        return position;
    };

    Scrollbar.prototype.getPercentage = function(){
        return ((this._thumbPosition + this._thumbSize) / this._trackSize);
    };

    Scrollbar.prototype.computeThumbOffset = function(ratio) {
        var offset = this._thumbSize;
        offset *= ratio;
        return offset;
    };

    Scrollbar.prototype.getTrackRatio = function(){
        return this._trackRatio;
    };

    Scrollbar.prototype.setThumbPosition = function(thumbPosition) {
        this._thumbPosition = thumbPosition;
        if (this._isDomNodeEmpty) {
            return;
        }

        if (this._isVertical()) {
            this._scrollbarThumb.attr('transform', 'translate(' + this._props.style.padding +
                ',' + thumbPosition + ')');
        } else {
            this._scrollbarThumb.attr('transform', 'translate(' + thumbPosition +
                ', ' + this._props.style.padding + ')');
        }
    };

    Scrollbar.prototype.setProperties = function(props) {
        ObjectUtils.extendByRepalceArray(true, this._props, props);
        return this;
    };

    Scrollbar.prototype.getProperties = function() {
        return this._props;
    };

    Scrollbar.prototype.destroy = function() {
        
        Scrollbar.superclass.destroy.call(this);
        
        if (this._scrollbarThumb) {
            this._scrollbarThumb.remove();
        }

        if (this._scrollbarTrack) {
            this._scrollbarTrack.remove();
        }
        
        this._props = null;
        this._thumbProps = null;
        this._trackProps = null;
        this._thumbPosition = null;
        this._scrollbarThumb = null;
        this._scrollbarTrack = null;
        this._startPos = null;
        this._maxThumbPosition = null;
        this._contentStartPos = null;
        this._selection = null;
        this._isPressed = null;
        this._thumbSize = null;
        this._pageDistance = null;
        this._contentRatio = null;
        this._trackRatio = null;
        this._position = null;
        this._trackSize = null;
        this._isDomNodeEmpty = null;
        this._minThumbSize = null;
    };

    Scrollbar.prototype.setVisibility = function(visibility) {
        this._scrollbarThumb.attr('visibility', visibility);
        if (this._scrollbarTrack) {
            this._scrollbarTrack.attr('visibility', visibility);
        }
    };

    Scrollbar.prototype.resetPos = function() {
        this._startPos = undefined;
    };

    Scrollbar.prototype.thumbOverTrack = function(offset) {
        var isOver = false;
        if (this._thumbPosition === 0 && (this._thumbPosition + offset) < 0) {
            isOver = true;
        }

        if (Math.floor(this._thumbPosition) === Math.floor(this._maxThumbPosition) &&
            (this._thumbPosition + offset) > this._maxThumbPosition) {
            isOver = true;
        }
        return isOver;
    };

    Scrollbar.prototype.thumbFull = function() {
        return this._props.contentSize === this._props.trackSize;
    };

    Scrollbar.prototype.getPreferredSize = function(sizeInfo) {
        var result = {
            maxWidth: 0,
            maxHeight: 0,
            minWidth: 0,
            minHeight: 0,
            width: 0,
            height: 0,
            spacings: [{
                "interval": 0,
                "type": Constants.SPACING_TYPE.STEP
            }]
        };
        if (this._props.isExist) {
            if (this._isVertical()) {
                result.maxWidth = result.width = this._props.style.thumbSize;
            } else {
                result.maxHeight = result.height = this._props.style.thumbSize;
            }
            result.spacings[0].interval = this._props.style.thumbSize;
        }
        return result;
    };

    Scrollbar.prototype.setPosition = function(pos) {
        this._position = pos;
        return this;
    };

    var _scrollTo = function(offset) {
        this.adjustThumbPosition(offset);
        _callbacks.call(this, 'onScroll');
    };

    var _callbacks = function(type) {
        var position = -Math.ceil(this._thumbPosition * this._trackRatio);
        var option = {
            'position' : position,
            'startPct' : ((this._thumbPosition + this._thumbSize) / this._trackSize),
            'direction' : this._isVertical()? 'Y' : 'X'
        };

        this._props[type].call(this, option);
    };

    Scrollbar.prototype._isVertical = function() {
        return PositionUtil.isVertical(this._position);
    };

    Scrollbar.prototype._isHorizontal = function() {
        return PositionUtil.isHorizontal(this._position);
    };

    Scrollbar.prototype._computeThumbPosition = function(offset) {
        var currentPos = Math.min((this._trackSize - this._thumbSize),
            Math.max(0, this._thumbPosition + offset));
        if (currentPos < 0) {
            currentPos = 0;
        } else if (currentPos > this._maxThumbPosition) {
            currentPos = this._maxThumbPosition;
        }
        return currentPos;
    };

    return Scrollbar;
});
define('sap/viz/chart/components/legend/ColorShapeScaleMerger',['sap/viz/framework/common/lang/LangManager',
    'sap/viz/framework/common/mark/MarkManager',
    "sap/viz/framework/common/util/TypeUtils",
    'sap/viz/framework/common/util/DataUtils',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/chartmodel/ContextBuilder'
], function(langManager, MarkManager, TypeUtils, DataUtils, ObjectUtils, ContextBuilder) {

    

    var MND = "measureNames";
    /*
     * Only used by Color Legend. Merge color and shape scales. If no shape
     * feeding, shapeScale should be a shape string. like 'rect'
     */
    var ColorShapeScaleMerger = function(markMgr) {
        this.__className = "sap.viz.scale.ColorShapeScale";

        this._defaultShape = 'squareWithRadius';
        this._defaultColor = '#748cb2';
        this._colorScales = [];
        this._shapeScale = null;
        this._semanticColorScale = null;
        this._bindingFields = null;
        this._items = [];
        this._markMgr = markMgr;
    };

    /**
     * Add color scale needing merge.
     *
     * @param scale Color scale data model
     */
    ColorShapeScaleMerger.prototype.addColorScale = function(scale) {
        this._colorScales.push(scale);
    };

    /**
     * Set semantic color scale needing merge.
     *
     * @param scale Color scale
     */
    ColorShapeScaleMerger.prototype.setSemanticColorScale = function(scale) {
        this._semanticColorScale = scale;
    };

    /**
     * Set shape scale needing merge.
     *
     * @param scale shape scale
     */
    ColorShapeScaleMerger.prototype.setShapeScale = function(scale) {
        this._shapeScale = scale;
    };

    /**
     * Obtain the item count of merge result.
     *
     * @return count
     */
    ColorShapeScaleMerger.prototype.getLength = function() {
        return this._items.length;
    };

    /**
     * Obtain the item of merge result by index.
     *
     * @param i index
     * @return item
     */
    ColorShapeScaleMerger.prototype.getItem = function(i) {
        return this._items[i];
    };

    ColorShapeScaleMerger.prototype.items = function() {
        return this._items;
    };

    /**
     * Obtain binding fields to build legend title.
     *
     * @return meta data of color scale data model
     */
    ColorShapeScaleMerger.prototype.getBindingFields = function() {
        return this._bindingFields;
    };

    /**
     * To execute merging.
     */
    ColorShapeScaleMerger.prototype.merge = function() {

        var items = null;

        if (this._semanticColorScale) {
            items = this._mergeSemanticStyleShape();
        } else {
            items = this._mergeColorShape();
        }

        this._items = items;
    };

    ColorShapeScaleMerger.prototype._mergeColorShape = function() {

        var shapeScale = this._shapeScale == null ? null : this._shapeScale.scale;
        var shapeScaleDomain = shapeScale == null ? [] : shapeScale.getDomain();
        var hasShapeFeed = shapeScaleDomain.length !== 0;

        if (hasShapeFeed === false && this._colorScales.length === 0) {
            return [];
        }

        var tmpDomain = [],
            tmpRange = [],
            range = [],
            contextArr = [],
            mndIndex = null;

        var i, len;
        for (var scaleIndex = 0; scaleIndex < this._colorScales.length; scaleIndex++) {

            var colorScaleData = this._colorScales[scaleIndex];

            var hasColorFeed = true;
            var colorScaleDomain = [];

            if (colorScaleData == null ||
                colorScaleData.scale == null) {
                hasColorFeed = false;
            } else {
                // when customer don't bind color scale, ScaleManager will add a ColorScale without domain
                // to render in plot. But because we delete auto MND feature, legend will disappear.
                colorScaleDomain = DataUtils.getDomain(colorScaleData);

                if (colorScaleDomain.length === 0) {
                    hasColorFeed = false;
                }
            }

            if (!hasColorFeed && !hasShapeFeed) {
                continue;
            }
            // bubble & scatter
            if (hasColorFeed && hasShapeFeed) {
                tmpDomain = tmpDomain.concat(_getCartesian(colorScaleDomain,
                    shapeScaleDomain, function(a, b) {
                        return a.concat(b);
                    }));

                range = range.concat(_getCartesian(_getRange(colorScaleData.scale),
                    _getRange(shapeScale), function(a, b) {
                        return {
                            color: a,
                            shape: b
                        };
                    }));

                var colorContextArr = ContextBuilder.getBindingContext(colorScaleData);
                var shapeContextArr = ContextBuilder.getBindingContext(this._shapeScale);
                contextArr = contextArr.concat(_getCartesian(colorContextArr, shapeContextArr, function(a, b) {

                    var result = {};
                    var key;
                    for (key in a) {
                        if (a.hasOwnProperty(key)) {
                            result[key] = a[key];
                        }
                    }

                    for (key in b) {
                        if (b.hasOwnProperty(key)) {
                            result[key] = b[key];
                        }
                    }
                    return result;
                }));

            } else if (hasColorFeed && !hasShapeFeed) {

                // some simple chart as column/bar/line and so on
                tmpDomain = tmpDomain.concat(colorScaleDomain);
                tmpRange = _getRange(colorScaleData.scale);
                var defaultShapeRange;
                if(this._shapeScale && this._shapeScale.scale){
                    defaultShapeRange = this._shapeScale.scale.getRange();
                }
                var defaultShape = (defaultShapeRange && defaultShapeRange.length > 0) ?
                            defaultShapeRange[0] : this._defaultShape;
                for (i = 0, len = colorScaleDomain.length; i < len; i++) {

                    mndIndex = colorScaleData.rowArray[i].mndIndex;

                    range.push({
                        color: tmpRange[i],
                        shape: this._markMgr.getShape(mndIndex, scaleIndex) ||  defaultShape
                    });
                }

                contextArr = contextArr.concat(ContextBuilder.getBindingContext(colorScaleData));

            } else {

                // bubble & scatter can draw without color scale
                tmpDomain = tmpDomain.concat(shapeScaleDomain);
                tmpRange = _getRange(shapeScale);
                for (i = 0, len = shapeScaleDomain.length; i < len; i++) {
                    range.push({
                        color: this._defaultColor,
                        shape: tmpRange[i]
                    });
                }

                contextArr = contextArr.concat(ContextBuilder.getBindingContext(this._shapeScale));
            }
        }

        // not dual & only one mnd & have dimension item, delete mnd item
        var result = checkMndStatus(this._colorScales, hasShapeFeed, tmpDomain);

        if (result.isOnlyOneMndValue) {
            for (i = 0; i < tmpDomain.length; i++) {
                tmpDomain[i].splice(result.mndIndex, 1);
            }
        }

        this._createBindingField(result);

        return tmpDomain.map(function(domainData, index) {
            var ret = range[index];
            var context = contextArr[index];
            return {
                data: domainData,
                color: ret.color,
                shape: ret.shape,
                context: context
            };
        });
    };

    function makeUnique(arr){
        var dict = {};
        var result = [];
        for(var i = 0; i < arr.length; ++i){
            var item = arr[i];
            if(!dict[item.id]){
                dict[item.id] = item;
                result.push(item);
            }
        }
        return result;
    }

    /**
     * Create title information for non-semantic style.
     *
     * @param result {mndIndex, isOnlyOneMndValue}
     */
    ColorShapeScaleMerger.prototype._createBindingField = function(result) {

        var bindingFields = [], len, domain;

        if (this._colorScales != null && this._colorScales.length !== 0 ) {
            var mndValues = [];
            var metadata, i, j, item;
            for(i = 0; i < this._colorScales.length; ++i){
                metadata = this._colorScales[i].metaData;
                if(metadata){
                    len = metadata.length;
                    domain = DataUtils.getDomain(this._colorScales[i]);
                    if(domain.length > 0 && len > domain[0].length){
                        len = domain[0].length;
                    }
                    for (j = 0; j < len; ++j) {
                        item = metadata[j];
                        if (item.id === MND) {
                            // Make a copy since we need to change it.
                            item = ObjectUtils.extend({}, item);
                            mndValues = mndValues.concat(item.values);
                        }
                        bindingFields.push(item);
                    }
                }
            }
            bindingFields = makeUnique(bindingFields);

            for(i = bindingFields.length - 1; i >= 0; --i){
                item = bindingFields[i];
                if(item.id === MND){
                    // if has only one mnd value, delete title "All Measure"
                    if (result.isOnlyOneMndValue) {
                        bindingFields.splice(i, 1);
                    }else{
                        item.values = mndValues;
                    }
                    break;
                }
            }
        }

        if (this._shapeScale != null &&
            this._shapeScale.length !== 0 &&
            this._shapeScale.metaData != null) {
            len = this._shapeScale.metaData.length;
            domain = DataUtils.getDomain(this._shapeScale);
            if(domain.length > 0 && len > domain[0].length){
                len = domain[0].length;
            }
            bindingFields = bindingFields.concat(this._shapeScale.metaData.slice(0, len));
        }

        this._bindingFields = bindingFields;
    };

    function getSemanticContext(rules, additionalRule, isOther){
        var context = rules;
        if(isOther){
            context = {
                'not': context
            };
        }
        if(additionalRule){
            context = {
                'and': [
                    additionalRule,
                    context
                ]
            };
        }
        return context;
    }


    ColorShapeScaleMerger.prototype._mergeSemanticStyleShape = function() {

        var shapeScale = this._shapeScale == null ? null : this._shapeScale.scale;

        var shapeScaleDomain = shapeScale == null ? [] : shapeScale.getDomain();
        var hasShapeFeed = shapeScaleDomain.length !== 0;

        var domain = null;
        var range = [];

        // create binding field
        this._bindingFields = [{
            name: langManager.get("IDS_SEMANTIC_DEFAULT_TITLE")
        }];

        var rules, hasOthers;
        // bubble & scatter
        if (hasShapeFeed) {
            domain = _getCartesian(this._semanticColorScale.getDomain(), shapeScaleDomain, function(a, b) {
                return a + " / " + b;
            });

            range = _getCartesian(_getRange(this._semanticColorScale),
                _getRange(shapeScale), function(a, b) {
                    return {
                        color: a,
                        shape: b
                    };
                });

            rules = this._semanticColorScale.getRules();
            var shapeContextArr = ContextBuilder.getBindingContext(this._shapeScale);

            // cross multiply rule
            var cartesianRules = _getCartesian(rules, shapeContextArr, function(a, b) {

                return {
                    rule: a,
                    additionalRule: b
                };
            });


            hasOthers = this._semanticColorScale.hasOthers();

            var shapeIndex = 0;

            return domain.map(function(domainItem, index) {

                var ret = range[index];

                if (hasOthers && index >= domain.length - shapeContextArr.length) {
                    return {
                        data: domainItem,
                        color: ret.color,
                        shape: ret.shape,
                        context: getSemanticContext(rules, shapeContextArr[shapeIndex++], true)
                    };
                } else {
                    return {
                        data: domainItem,
                        color: ret.color,
                        shape: ret.shape,
                        context: getSemanticContext(cartesianRules[index].rule, cartesianRules[index].additionalRule)
                    };
                }
            });

        } else {
            domain = this._semanticColorScale.getDomain();
            var tmpRange = _getRange(this._semanticColorScale);

            for (var i = 0, len = tmpRange.length; i < len; i++) {
                range.push({
                    color: tmpRange[i],
                    shape: this._defaultShape
                });
            }

            rules = this._semanticColorScale.getRules();
            hasOthers = this._semanticColorScale.hasOthers();

            return domain.map(function(domainItem, index) {

                var ret = range[index];

                if (hasOthers && index === domain.length - 1) {
                    return {
                        data: domainItem,
                        color: ret.color,
                        shape: ret.shape,
                        context: getSemanticContext(rules, null, true)
                    };
                } else {
                    return {
                        data: domainItem,
                        color: ret.color,
                        shape: ret.shape,
                        context: getSemanticContext(rules[index])
                    };
                }
            });
        }
    };

    function checkMndStatus(colorScaleDatas, hasShapeFeed, tmpDomain) {

        var result = {isOnlyOneMndValue: false, mndIndex: -1};

        // if dual, return false
        if (colorScaleDatas.length !== 1 || hasShapeFeed === true || tmpDomain.length === 0) {
            return result;
        }

        var metaData = colorScaleDatas[0].metaData;
        // if only have measure, skip
        if (metaData == null || metaData.length === 0 || metaData.length === 1) {
            return result;
        }

        // check whether has mnd
        var mndIndex = DataUtils.getMNDIndex(metaData);

        if (mndIndex === -1) {
            return result;
        }

        // check if has only one mnd value
        var firstMnd = tmpDomain[0][mndIndex];
        for (var i = 1; i < tmpDomain.length; i++) {
            if (firstMnd !== tmpDomain[i][mndIndex]) {
                return result;
            }
        }

        return {isOnlyOneMndValue: true, mndIndex: mndIndex};
    }

    var _getCartesian = function(base, target, mergeFunc) {

        var result = [];

        for (var i = 0; i < base.length; i++) {
            for (var j = 0; j < target.length; j++) {
                result.push(mergeFunc(base[i], target[j]));
            }
        }
        return result;
    };

    var _getRange = function(scale) {
        var tmpRange = scale.getRange();
        var range = tmpRange.concat([]);
        var domain = scale.getDomain();
        var i, len;
        if (range.length < domain.length) {
            len = tmpRange.length;
            for (i = len; i < domain.length; i++) {
                range.push(tmpRange[i % len]);
            }
        }
        return range.splice(0, domain.length);
    };

    return ColorShapeScaleMerger;
});

define('sap/viz/chart/components/legend/ColorLegend',['sap/viz/framework/common/util/oo',
        'sap/viz/chart/components/legend/BaseLegend',
        'sap/viz/chart/components/util/TextUtils',
        'sap/viz/chart/components/util/DrawUtil',
        'sap/viz/framework/common/util/NameColorUtils',
        'sap/viz/chart/components/scrollbar/Scrollbar',
        'sap/viz/framework/common/util/TypeUtils',
        'sap/viz/chart/components/util/StyleUtils',
        'sap/viz/framework/common/util/UADetector',
        'sap/viz/framework/common/util/ObjectUtils',
        'sap/viz/framework/common/util/Constants',
        'sap/viz/framework/common/util/DataUtils',
        'sap/viz/chart/components/legend/ColorShapeScaleMerger'
    ],
    function(oo, BaseLegend, TextUtils, DrawUtil, NameColorUtils, ScrollBar, TypeUtils, StyleUtils,
            UADetector, ObjectUtils, Constants, DataUtils, ColorShapeScaleMerger) {

        

        var INTERACTION_CLASS =  Constants.CSS.CLASS.LEGENDITEM,
            ID_CLASS = "v-legend-element";

        var ColorLegend = function(runtime, options) {

            ColorLegend.superclass.constructor.apply(this, arguments);

            this._labelFont = {
                'fontFamily': null,
                'fontSize': null,
                'fontWeight': null,
                'color': null,
                'fontStyle': null
            };

            var semanticMgr = this.runtime().semanticManager();
            semanticMgr.addDataPointChangeCallback(this._onDataPointChange.bind(this));


            var marginRatio = parseFloat(this._properties.get("itemMargin")),
                colorLA_markerMargin = {
                    right: 0.5,
                    bottom: marginRatio,
                    left: 1,
                    top: 0
                };

            this._properties.watch("itemMargin", function(newValue, oldValue, propName) {
                colorLA_markerMargin.bottom = parseFloat(newValue);
            });

            this._colorLA_colorLabelSize = 1;
            this._colorLA_markerMargin = colorLA_markerMargin;
            this._maxItemsNum = 12;
            this._maxItemTextWidth = 80; // For Horizontal layout

            this._colorScale = null;
            this._shapeScale = null;
            this._colorShapeScale = null;
            this._scrollBar = undefined;
            this._eachItemWidth = undefined;
            this._type = "ColorLegend";

            this._scrollBarStyle = {
                thumbSize: UADetector.isMobile() ? 8 : 12,
                padding: 0,
                trackVisible: true,
                isRoundCorner: false
            };

            this._contentSize = 0;
            this._pageCount = 2;
            this._domID = ObjectUtils.guid();
            this._isOverflow = false;
            this._panStartPos = undefined;
            this._scrollBarTimer = undefined;
        };

        oo.extend(ColorLegend, BaseLegend);

        function createScaleAndBinding(colorLegend, dataModel) {

            var colorScales = [];

            var keys = Object.keys(dataModel).sort();
            for (var i = 0; i < keys.length; i++) {

                var data = dataModel[keys[i]];

                if (data === undefined || data.scale === undefined) {
                    continue;
                }

                if (data.scale._type === "color") {
                    colorScales.push(data);
                } else if (data.scale._type === "shape") {
                    colorLegend.setShapeScale(data);
                }
            }
            colorLegend.setColorScale(colorScales);
        }

        ColorLegend.prototype._onDataPointChange = function() {
            this._colorShapeScale = null;
        };

        ColorLegend.prototype.setData = function(value) {

            this._data = value;

            createScaleAndBinding(this, value);
            return this;
        };

        ColorLegend.prototype.setColorScale = function(colorScale) {

            if (TypeUtils.isArray(colorScale)) {
                this._colorScale = colorScale;
            } else {
                this._colorScale = [colorScale];
            }

            this._colorShapeScale = null;

            return this;
        };

        ColorLegend.prototype.setShapeScale = function(shapeScale) {
            this._shapeScale = shapeScale;
            return this;
        };

        ColorLegend.prototype.isVisible = function() {
            return ColorLegend.superclass.isVisible.apply(this, arguments) && this.hasContent();
        };

        ColorLegend.prototype.panStart = function(target){
            if(this._properties.get("isScrollable") && this._scrollBar){
                //console.log('pan start: ', JSON.stringify(target));
                this._panStartPos = (this.isHorizontal()) ? target.x : target.y;
                clearTimeout(this._scrollBarTimer);
            }
        };

        ColorLegend.prototype.panMove = function(target){
            if (this._panStartPos === undefined) {
                return;
            }
            if(this._properties.get("isScrollable") && this._scrollBar){
                var offset = 0;
                if(this.isHorizontal()){
                    offset = this._panStartPos - target.x;
                    this._panStartPos = target.x;
                }else{
                    offset = this._panStartPos- target.y;
                    this._panStartPos = target.y;
                }
                this._scrollBar.adjustThumbPosition(offset);
                var position = this._scrollBar.computePlotPosition();
                var startPct = this._scrollBar.getPercentage();
                if (startPct === 1) {
                    this._pageCount += 2;
                    this.render(this._parent, true);
                }
                if(this.isHorizontal()){
                    this._parent.selectAll('.v-groups').attr('transform',
                                    'translate(' + position + ', 0)');
                }else{
                    this._parent.selectAll('.v-groups').attr('transform',
                                    'translate(0, ' + position + ')');
                }
                this._scrollBar.show();
            }
        };

        ColorLegend.prototype.panEnd = function(target){
            if(this._properties.get("isScrollable") && this._scrollBar){
                this._panStartPos = undefined;
                if(this._scrollBar){
                    var that = this;
                    this._scrollBarTimer = setTimeout(
                        function(){
                            that._scrollBar.hide();
                        },1000);
                }
            }
        };

        ColorLegend.prototype.render = function(selection, loadMore) {

            var props = {
                drawingEffect: this._properties.get("drawingEffect"),
                width: this._width,
                height: this._height,
                isScrollable: this._properties.get("isScrollable")
            };

            ColorLegend.superclass.render.apply(this, arguments);

            var parent = this._parent = selection;
            if ((!this.isVisible() && !this._isDedicated )|| !this._colorShapeScale) {
                selection.selectAll('g.v-content').remove();
                return this;
            }

            var that = this;

            var textHeight = parseInt(this._labelFont.fontSize, 10);
            var defaultMarkerShape = null;
            if (this._options && this._options.options) {
                defaultMarkerShape = this._options.options.defaultMarkerShape;
            }

            var labelFont = StyleUtils
                .convertToCss(this._labelFont),
                markerSize = this._colorLA_colorLabelSize * textHeight;

            var colorMarkerSize = parseFloat(this._properties.get("marker.size"));
            if(colorMarkerSize) {
                markerSize = colorMarkerSize;
            }
            var overallHeight = Math.max(markerSize, textHeight);

            // append container
            var legendContent = parent.selectAll('g.v-content').data(['content']);
            legendContent.enter().append('g').classed('v-content', true);
            legendContent.exit().remove();
            legendContent.attr('transform', 'translate(0, ' + this._pos.y + ')');

            // append content groups
            var groups = legendContent.selectAll('g.v-groups').data(['groups']);

            groups.enter().append('g').classed('v-groups', true).classed('v-label', true).classed(
                'viz-legend-valueLabel', true);
            groups.exit().remove();
            groups.attr('transform', 'translate(0, 0)');
            legendContent.attr('font-size', this._labelFont.fontSize).attr(
                'font-family', this._labelFont.fontFamily).attr('font-weight', this._labelFont.fontWeight)
                .attr('fill', this._labelFont.color).attr('font-style', this._labelFont.fontStyle);

            var allCDomainLength = this._colorShapeScale.getLength(),
                eachRowHeight = this._eachRowHeight,
                cDomain = this._getAvailableDomain();

            var groupItems = groups.selectAll('g.' + ID_CLASS).data(cDomain);
            groupItems.enter().append('g');
            groupItems.exit().remove();
            var bottom = this._colorLA_markerMargin.bottom * textHeight / 2;
            var horizontalOffset = 5;
            groupItems.classed(ID_CLASS, true).attr('transform', function(d, i) {
                return 'translate (' + (d.pos.x - horizontalOffset) + ',' + d.pos.y + ')';
            });
            groupItems.classed(INTERACTION_CLASS, true);

            // assign global variable into local variable
            var eventLayers = groupItems.selectAll('rect').data(['rect']);
            eventLayers.enter().append('rect');
            eventLayers.exit().remove();

            var shapes = groupItems.selectAll('path').data(['shape']);
            shapes.enter().append('path');
            shapes.exit().remove();
            shapes.attr('transform', function(d, i, j) {
                var o = cDomain[j];
                if(o.color && o.color.indexOf("url") === -1) {
                    o.color = NameColorUtils.convertColor(o.color);
                }
                DrawUtil.drawGraph({
                    drawingEffect: props.drawingEffect,
                    borderWidth: 0,
                    rx: markerSize / 2,
                    ry: markerSize / 2,
                    direction: 'vertical',
                    fillId: o.color && o.color.indexOf("url") === 0 ? o.color : null,
                    fillColor: o.color,
                    graphType: o.shape,
                    defaultShape: defaultMarkerShape,
                    borderColor: "transparent",
                    node: d3.select(this)
                }, that.runtime().effectManager());
                return 'translate(' + (markerSize / 2 + horizontalOffset) + ',' + (overallHeight/2 + bottom) + ')';
            });

            var texts = groupItems.selectAll('text').data(['text']);
            if (!this.isHorizontal()) {
                if (this._isScrollable() && this._isOverflow) {
                    this._eachItemWidth = props.width - this._scrollBarStyle.thumbSize;
                } else {
                    this._eachItemWidth = props.width;
                }
            }else{
                if((!this._isScrollable()) && (this._eachItemWidth > props.width)){
                    this._eachItemWidth = props.width;
                }
            }
            var expectedWidth = this._eachItemWidth - (markerSize + this._colorLA_markerMargin.right * textHeight),
                dx = markerSize + this._colorLA_markerMargin.right * textHeight,
                dy = textHeight;
            if (this.isHorizontal()) {
                expectedWidth = expectedWidth - this._colorLA_markerMargin.left * textHeight;
                expectedWidth = Math.min(expectedWidth, props.width);
            }
            texts.enter().append('text');
            texts.exit().remove();
            texts.attr('x', (dx + horizontalOffset)).attr('y', ((overallHeight - textHeight)/2 +bottom));
            /** vertical align legend item in the center, since dominant-baseline isn't implemented in IE & Firefox
             * we have to use the dy hack, the dy value could be adjusted later */
            // texts.attr("dominant-baseline", "central");
            texts.attr("dy", "0.85em");
            texts.each(function(d, i, j) {
                if (that.isHorizontal() && that._isScrollable() && that._isOverflow) {
                    expectedWidth = cDomain[j].width;
                }
                TextUtils.ellipsis(_toString.call(that, cDomain[j].val), this, expectedWidth, labelFont);
            });

            eventLayers.attr(
                'width',
                function(d, i, j) {
                    if (that.isHorizontal()) {
                        if(that._isOverflow){
                            return horizontalOffset + cDomain[j].width + markerSize +
                                    (that._colorLA_markerMargin.right +
                                        that._colorLA_markerMargin.left / 2) * textHeight;
                        }else{
                            return that._eachItemWidth + horizontalOffset -
                                that._colorLA_markerMargin.right * textHeight;
                        }
                    } else {
                        return that._eachItemWidth + horizontalOffset;
                    }
                }).attr('height', eachRowHeight).attr('fill', 'transparent');

            // Although function TextUtils.ellipsis has added title tag,
            // eventLayer will overlap on text node.
            // So below code archived function that move title tag from text
            // node to event layer.
            eventLayers.each(function() {
                var textNodes = this.parentNode.getElementsByTagName("text");

                if (textNodes.length === 0) {
                    return;
                }

                var textNode = textNodes[0];

                while (this.childNodes.length !== 0) {
                    this.removeChild(this.childNodes[0]);
                }

                var titleNode = textNode.getElementsByTagName("title")[0];

                if (titleNode !== undefined && titleNode.textContent !== "") {
                    textNode.appendChild(titleNode);
                }
            });

            // Handle overflow
            var overflowIndicator = legendContent.selectAll('.v-overflow');
            if (this._isOverflow === true) {
                // Overflow
                if(overflowIndicator.empty()){
                    overflowIndicator = legendContent.append('g').attr('class', 'v-overflow');
                }
                if (!props.isScrollable) {
                    //remove scrollable legend
                    if (!overflowIndicator.selectAll('g').empty()) {
                        legendContent.selectAll('defs').remove();
                        legendContent.attr('clip-path', null);
                        overflowIndicator.selectAll('g').remove();
                        overflowIndicator.attr('transform', 'translate(0, 0)');
                    }
                    // Show '...' to indicate that there is some hidden
                    // items
                    if (cDomain.length !== 0) {
                        var overflowText = legendContent.selectAll('.v-overflow text');                    
                        if (overflowText.empty()) {
                            overflowText = overflowIndicator.append('text').text('...');
                        }
    
                        var bottomOffset = textHeight;
                        if(colorMarkerSize && colorMarkerSize > textHeight) {
                            bottomOffset = this._eachRowHeight;
                        }
                        overflowText.attr('x', props.width / 2).attr(
                            'y',
                            cDomain[cDomain.length - 1].pos.y + 2 * textHeight +
                            this._colorLA_markerMargin.bottom * bottomOffset);                        
                    }
                } else {
                    if (!overflowIndicator.selectAll('text').empty()) {
                        //remove '...' for scrollable legend
                        overflowIndicator.selectAll('text').remove();
                    }
                    if (!loadMore) {
                        // reset scrollbar
                        this._scrollBar = undefined;
                    }
                    if(this._scrollBar === undefined){
                        this._scrollBar = new ScrollBar(this.runtime(), {
                            name: 'legend.scrollbar'
                        });
                    }

                    // Append clipPath for Scrollable legend
                    if (legendContent.selectAll('.legend-clip-rect').empty()) {
                        legendContent.insert('svg:defs', ":first-child").append('svg:clipPath').attr('id',
                            'legend_' + this._domID).append('rect').attr('class', 'legend-clip-rect').attr(
                            'width', function() {
                                return that.isHorizontal() ? (props.width + 'px') : ((props.width + 5) + 'px');
                            }).attr(
                            'height',
                            function() {
                                return that.isHorizontal() ? ((props.height - that._pos.y + 5) + 'px') :
                                    ((props.height - that._pos.y) + 'px');
                            }).attr('x', function() {
                            return that.isHorizontal() ? 0 : -5;
                        }).attr('y', function() {
                            return that.isHorizontal() ? -5 : 0;
                        }).attr('style', 'stroke: blue; fill: none;');
                    } else {
                        legendContent.selectAll('.legend-clip-rect').attr('width', function() {
                            return that.isHorizontal() ? (props.width + 'px') : ((props.width + 5) + 'px');
                        }).attr(
                            'height',
                            function() {
                                return that.isHorizontal() ? ((props.height - that._pos.y + 5) + 'px') :
                                    ((props.height - that._pos.y) + 'px');
                            }).attr('y', function() {
                            return that.isHorizontal() ? -5 : 0;
                        });
                    }
                    legendContent.attr('clip-path', 'url(#' + 'legend_' + this._domID + ')');

                    this._scrollBar.setPosition(this._orientation);
                    if (this.isHorizontal()) {
                        this._scrollBar.setProperties({
                            trackSize: props.width - this._pos.x,
                            contentSize: this._contentSize,
                            isExist: true,
                            style: this._scrollBarStyle,
                            onScroll: function(options) {
                                if (options.startPct === 1) {
                                    that._pageCount += 2;
                                    that.render(that._parent, true);
                                }
                                that._parent.selectAll('.v-groups').attr('transform',
                                    'translate(' + options.position + ', 0)');
                            }
                        }).render(overflowIndicator);
                        overflowIndicator.attr('transform',
                            'translate(0, ' + this._eachRowHeight + ')');
                    } else {
                        this._scrollBar.setProperties({
                            trackSize: props.height - this._pos.y,
                            contentSize: this._contentSize,
                            isExist: true,
                            style: this._scrollBarStyle,
                            onScroll: function(options) {
                                if (options.startPct === 1) {
                                    that._pageCount += 2;
                                    that.render(that._parent, true);
                                }
                                that._parent.selectAll('.v-groups').attr('transform',
                                    'translate(0, ' + options.position + ')');
                            }
                        }).render(overflowIndicator);
                        overflowIndicator.attr('transform',
                            'translate(' + (props.width - this._scrollBarStyle.thumbSize) + ', 0)');
                    }

                    if(UADetector.isMobile() && this._scrollBar){
                        clearTimeout(this._scrollBarTimer);
                        this._scrollBar.show();
                        this._scrollBarTimer = setTimeout(
                        function(){
                            that._scrollBar.hide();
                        },2000);
                    }
                }
            } else {
                // Not Overflow
                if (!overflowIndicator.empty()) {
                    legendContent.selectAll('defs').remove();
                    overflowIndicator.remove();
                    this._scrollBar = undefined;
                }
                legendContent.attr('clip-path', null);
            }
            return this;
        };

        ColorLegend.prototype._getAvailableDomain = function() {
            var colorShapeScale = this._colorShapeScale;
            var props = {
                width: this._width,
                height: this._height,
                isScrollable: this._properties.get("isScrollable")
            };

            var textHeight = parseInt(this._labelFont.fontSize, 10),
                paddingBottom = this._colorLA_markerMargin.bottom * textHeight,
                eachRowHeight = this._eachRowHeight,
                eachRowItemCount = 0,
                colorMarkerSize = parseFloat(this._properties.get("marker.size"));
                
            var cDomain = [],
                xPos = 0,
                yPos = 0,
                colIndex = 0,
                item,
                val,
                bindingField,
                color,
                shape,
                textSize,
                fontSize = this._labelFont.fontSize,
                fontWeight = this._labelFont.fontWeight,
                fontFamily = this._labelFont.fontFamily,
                fontStyle = this._labelFont.fontStyle,
                markerSize = (this._colorLA_colorLabelSize + this._colorLA_markerMargin.right) * textHeight;

            if(colorMarkerSize && colorMarkerSize > textHeight) {
                paddingBottom = this._colorLA_markerMargin.bottom * colorMarkerSize;
                markerSize = colorMarkerSize;
            }

            if (this.isHorizontal()) {
                eachRowItemCount = Math.max(Math.floor(props.width / this._eachItemWidth), 1);
            }

            // Reset isOverflow
            this._isOverflow = false;

            var items = [];

            for (var j = 0, len = colorShapeScale.getLength(); j < len; j++) {
                items.push(colorShapeScale.getItem(j));
            }

            items = this._sort(items);

            for (var i = 0; i < items.length; i++) {
                item = items[i];
                val = item.data;

                bindingField = item.context;

                color = item.color;
                shape = item.shape;

                if (this.isHorizontal()) {
                    // Horizontal Legend
                    if (!props.isScrollable) {
                        // Horizontal - unScrollable
                        if (colIndex === eachRowItemCount) {
                            // New Row
                            xPos = 0;
                            colIndex = 0;
                            yPos = yPos + eachRowHeight;
                        }
                        if ((len - i > eachRowItemCount) &&
                            (yPos + eachRowHeight + textHeight > props.height - this._pos.y)) {
                            this._isOverflow = true;
                            break;
                        } else {
                            cDomain.push({
                                val: val,
                                ctx: bindingField,
                                pos: {
                                    x: xPos,
                                    y: yPos
                                },
                                color: color,
                                shape: shape,
                                width: this._maxItemTextWidth
                            });

                            colIndex++;
                            xPos = xPos + this._eachItemWidth;
                        }
                    } else {
                        // Horizontal - scrollable
                        textSize = TextUtils.fastMeasure(_toString.call(this, val), fontSize, fontWeight,
                            fontFamily, fontStyle);
                        var maxWidth = props.width - this._pos.x,
                            itemWidth = markerSize + this._colorLA_markerMargin.right *
                            textHeight + textSize.width +
                            this._colorLA_markerMargin.left * textHeight;
                        if (xPos + itemWidth > props.width - this._pos.x) {
                            this._isOverflow = true;
                        }
                        if (props.isScrollable) {
                            maxWidth = props.width * this._pageCount - this._pos.x;
                        }

                        cDomain.push({
                            val: val,
                            ctx: bindingField,
                            pos: {
                                x: xPos,
                                y: yPos
                            },
                            color: color,
                            shape: shape,
                            width: textSize.width
                        });

                        xPos = xPos + itemWidth;

                        if (xPos > maxWidth) {
                            break;
                        }
                    }
                } else {
                    // Vertical
                    var maxHeight = props.height - this._pos.y;

                    if (eachRowHeight * (i + 1) - paddingBottom > props.height - this._pos.y) {
                        this._isOverflow = true;
                    }
                    if(this._isOverflow){
                        if (props.isScrollable) {
                            maxHeight = props.height * this._pageCount - this._pos.y;
                        }else {
                            maxHeight = maxHeight - textHeight;
                        }
                    }
                    if (eachRowHeight * (i + 1) - paddingBottom > maxHeight) {
                        // pop up one legend item
                        if (!props.isScrollable) {
                            cDomain.pop();
                        }
                        break;
                    } else {
                        cDomain.push({
                            val: val,
                            ctx: bindingField,
                            pos: {
                                x: 0,
                                y: eachRowHeight * i
                            },
                            color: color,
                            shape: shape
                        });
                    }
                }
            }

            // Update Content Size
            if (props.isScrollable) {
                if (this.isHorizontal()) {
                    this._contentSize = xPos;
                } else {
                    this._contentSize = eachRowHeight * cDomain.length;
                }
            }
            return cDomain;
        };

        ColorLegend.prototype.getPreferredSize = function(bound) {

            if (!this.hasContent()) {
                return {
                    width: 0,
                    height: 0,
                    minWidth: 0,
                    minHeight: 0,
                    maxWidth: 0,
                    maxHeight: 0
                };
            }
            return ColorLegend.superclass.getPreferredSize.apply(this, arguments);
        };

        ColorLegend.prototype._getBodyPreferredSize = function(bound) {

            var contentHeight = bound.height;
            var contentWidth = bound.width;

            this._getThemeStyleDef();

            var maxHeight = 0,
                maxWidth = 0,
                minWidth = 0,
                minHeight = 0;

            var labelsCount = this._colorShapeScale.getLength();

            if (labelsCount > 0) {
                var fontSize = this._labelFont.fontSize;
                var fontWeight = this._labelFont.fontWeight;
                var fontFamily = this._labelFont.fontFamily;
                var fontStyle = this._labelFont.fontStyle;

                var textHeight = parseInt(this._labelFont.fontSize, 10);

                var markerSize = (this._colorLA_colorLabelSize + this._colorLA_markerMargin.right) * textHeight;
                var eachRowHeight = textHeight * (1 + this._colorLA_markerMargin.bottom);

                var colorMarkerSize = parseFloat(this._properties.get("marker.size"));
                if(colorMarkerSize && colorMarkerSize > textHeight) {
                    markerSize = (this._colorLA_colorLabelSize + this._colorLA_markerMargin.right) * colorMarkerSize;
                    eachRowHeight = colorMarkerSize * (1 + this._colorLA_markerMargin.bottom);
                }

                this._eachRowHeight = eachRowHeight;

                var maxTextItemWidth, i, size;

                if (this.isHorizontal()) {
                    // horizontal layout
                    maxTextItemWidth = 0;
                    // Measure max text size
                    for (i = 0; i < labelsCount; i++) {

                        if (i > this._maxItemsNum) {
                            break;
                        }

                        size = TextUtils.fastMeasure(_toString.call(this, this._colorShapeScale.getItem(i).data),
                            fontSize, fontWeight, fontFamily, fontStyle);
                        if (size.width > maxTextItemWidth) {
                            maxTextItemWidth = size.width;
                        }
                    }
                    if (maxTextItemWidth > this._maxItemTextWidth) {
                        maxTextItemWidth = this._maxItemTextWidth;
                    }

                    var eachItemWidth = markerSize + maxTextItemWidth + this._colorLA_markerMargin.left * eachRowHeight,
                        eachRowItemCount = Math.max(Math.floor(contentWidth / eachItemWidth), 1),
                        maxRowCount = Math.ceil(labelsCount / eachRowItemCount);

                    this._eachItemWidth = eachItemWidth;

                    // maxWidth = (eachRowItemCount > labelsCount) ? (labelsCount * eachItemWidth) : (eachRowItemCount *
                    //     eachItemWidth);
                    maxWidth = contentWidth;
                    minWidth = markerSize +
                        Math.min(TextUtils.fastMeasure('M...', fontSize, fontWeight, fontFamily, fontStyle).width,
                            maxTextItemWidth) +
                            this._colorLA_markerMargin.left * eachRowHeight;
                    if (this._isScrollable()) {
                        maxHeight = eachRowHeight +
                            this._scrollBarStyle.thumbSize +
                            eachRowHeight * this._colorLA_markerMargin.bottom;
                        minHeight = maxHeight;
                    } else {
                        maxHeight = maxRowCount * eachRowHeight +
                            (maxRowCount - 1) * eachRowHeight * this._colorLA_markerMargin.bottom;
                        if (labelsCount > eachRowItemCount) {
                            // minHeight = one item row + '...'
                            minHeight = eachRowHeight * 2 + eachRowHeight * this._colorLA_markerMargin.bottom;
                        } else {
                            minHeight = eachRowHeight;
                        }
                    }
                } else {
                    //vertical layout
                    var tempAvaliableLableCount = Math.floor(contentHeight * 2 / eachRowHeight);
                    var avaliablelableCount = tempAvaliableLableCount < labelsCount ? tempAvaliableLableCount :
                        labelsCount;

                    maxTextItemWidth = 0;
                    //Measure max text size
                    for (i = 0; i < avaliablelableCount; i++) {
                        size = TextUtils.fastMeasure(_toString.call(this, this._colorShapeScale.getItem(i).data),
                            fontSize, fontWeight, fontFamily, fontStyle);
                        if (size.width > maxTextItemWidth) {
                            maxTextItemWidth = size.width;
                        }
                    }

                    if (this._isScrollable()) {
                        maxWidth = markerSize + maxTextItemWidth + this._scrollBarStyle.thumbSize;
                        minWidth = markerSize +
                            Math.min(TextUtils.fastMeasure('M...', fontSize, fontWeight, fontFamily, fontStyle).width,
                                maxTextItemWidth) + this._scrollBarStyle.thumbSize;
                    } else {
                        maxWidth = markerSize + maxTextItemWidth;
                        minWidth = markerSize +
                            Math.min(TextUtils.fastMeasure('M...', fontSize, fontWeight, fontFamily, fontStyle).width,
                                maxTextItemWidth);
                    }

                    minHeight = eachRowHeight + (labelsCount > 1 ? textHeight : 0);
                    maxHeight = eachRowHeight * labelsCount;

                    this._eachItemWidth = maxWidth;
                }
            }

            return {
                maxWidth: maxWidth,
                maxHeight: maxHeight,
                minWidth: minWidth,
                minHeight: minHeight
            };
        };

        ColorLegend.prototype._sort = function(items) {
            var orderFn = this.getOrderByFunc();
            if (orderFn) {
                items.sort(orderFn);
            }
            return items;
        };

        ColorLegend.prototype.getOrderByFunc = function() {
            var orderBy = this._properties.get("order"),
                textify = _toString.bind(this);
            if (typeof orderBy === "function") {
                return function(m, n) {
                    return orderBy(textify(m.data), textify(n.data));
                };
            } else {
                return undefined;
            }
        };

        ColorLegend.prototype._initColorShapeScale = function() {
            if (!this._colorShapeScale) {
                if (this._colorScale) {
                    var merger = this._buildColorShapeScale(this._colorScale);
                    this._colorShapeScale = merger;
                    this.setBindingFields(merger.getBindingFields());
                }
            }
        };

        ColorLegend.prototype._buildColorShapeScale = function(colorScales) {
            var semanticMgr = this.runtime().semanticManager(),
                markMgr = this.runtime().markManager(),
                defaultMarkerShape = this._properties.get('marker.shape'),
                colorShapeScaleMerger;
            if (defaultMarkerShape) {
                //if defaultMarkerShape is set, we have to update restricts.
                if (!markMgr.getDefaultRestrict()) {
                    // once we reach this part, it means the shape property has not been
                    // handled anywhere else, we need to take care of it here for updates
                    this._properties.watch("marker.shape", function(val) {
                        markMgr.setDefaultRestrict(val);
                    });
                    markMgr.setDefaultRestrict(defaultMarkerShape);
                }
            }

            colorShapeScaleMerger = new ColorShapeScaleMerger(markMgr);

            this._hasOnlyOneMeasure = false;
            if (semanticMgr.hasDataPointColorStyle()) {
                colorShapeScaleMerger.setSemanticColorScale(semanticMgr.getDataPointColorScale());
            } else {
                for (var index = 0; index < colorScales.length; index++) {
                    colorShapeScaleMerger.addColorScale(colorScales[index]);
                }

            }

            if (this._shapeScale !== null) {
                colorShapeScaleMerger.setShapeScale(this._shapeScale);
            }

            colorShapeScaleMerger.merge();

            return colorShapeScaleMerger;
        };

        ColorLegend.prototype._getThemeStyleDef = function() {

            ColorLegend.superclass._getThemeStyleDef.apply(this, arguments);

            this._labelFont.color = this._properties.get("label.style.color");
            this._labelFont.fontFamily = this._properties.get("label.style.fontFamily");
            // add a "px" suffix to fontSize, otherwise IE & Firefox will incorrectly measures texts
            this._labelFont.fontSize = parseFloat(this._properties.get("label.style.fontSize")) + "px";
            this._labelFont.fontWeight = this._properties.get("label.style.fontWeight");
            this._labelFont.fontStyle = this._properties.get("label.style.fontStyle");
        };

        ColorLegend.prototype._isScrollable = function() {
            return this._properties.get('isScrollable');
        };

        ColorLegend.prototype.setBindingFields = function(_) {
            ColorLegend.superclass.setBindingFields.apply(this, arguments);
            this._displayTextsConverter = DataUtils.getDisplayTextsConverter(this._bindingFields, this._mndIndex);
            return this;
        };

        ColorLegend.prototype.destroy = function() {
            ColorLegend.superclass.destroy.apply(this, arguments);

            this._colorScale = null;
            this._shapeScale = null;
            this._colorShapeScale = null;
            this._displayTextsConverter = null;
            this._properties = null;

            this._colorLA_colorLabelSize = null;
            this._colorLA_markerMargin = null;
            this._maxItemsNum = null;
            this._maxItemTextWidth = null; // For Horizontal layout

            if (this._scrollBar) {
                this._scrollBar.destroy();
            }

            this._scrollBar = null;
            this._eachItemWidth = null;
            this._eachRowHeight = null;
            this._hasOnlyOneMeasure = null;
            this._labelFont = null;
            this._type = null;

            this._scrollBarStyle = null;

            this._contentSize = null;
            this._pageCount = null;
            this._domID = null;
            this._isOverflow = null;
            this._panStartPos = null;
            this._scrollBarTimer = null;
        };

        var _toString = function(values) {

            if (!TypeUtils.isArray(values)) {
                return values;
            }
            var texts = this._displayTextsConverter(values);

            return texts.join(" / ");
        };

        ColorLegend.prototype.hasContent = function() {
            this._initColorShapeScale();
            return this._colorShapeScale && this._colorShapeScale.getLength() > 0;
        };

        return ColorLegend;
    });

define('sap/viz/chart/components/container/UIContainer',[
    "sap/viz/framework/common/util/Constants",
    "sap/viz/framework/common/util/oo",
    "sap/viz/chart/components/UIComponent",
    'sap/viz/framework/common/lang/LangManager',
    'sap/viz/framework/common/util/FunctionUtils'
], function (Constants, oo, UIComponent, LangManager, FunctionUtils) {
    var UIContainer = function (runtime, options) {
        UIContainer.superclass.constructor.apply(this, arguments);
        this._renderType = (options && options.renderType != null) ? options.renderType : null;
        this._children = {};
        this._layoutAlgorithm = null;
        this._selections = null;
    };
    oo.extend(UIContainer, UIComponent);

    UIContainer.prototype.setLayoutAlgorithm = function (la) {
        this._layoutAlgorithm = la;
        return this;
    };

    UIContainer.prototype.setChild = function (key, module, option) {
        if (key && module instanceof UIComponent) {
            module.alias = key;
            if (!this._children[key]) {
                this._children[key] = {};
            }
            this._children[key].module = module;
            this._children[key].option = option ? option : {};
        }
        return this;
    };

    UIContainer.prototype.getChild = function (key) {
        if (key && this._children[key]) {
            return this._children[key];
        }
        return null;
    };

    UIContainer.prototype.layout = function () {

    };

    UIContainer.prototype._initRenderBase = function (parentNode) {

        if (this._selections == null) {
            this._selections = {};
        }
        
        var node = parentNode.node();
        for (var key in this._children) {
            if (this._children.hasOwnProperty(key)) {
                
                if (this._selections[key] != null) {
                    continue;
                }
                var renderTo = this._children[key].module.renderTo();
                if (renderTo === 'DIV' || renderTo === 'BorderDIVFlow') {
                    if (node.tagName !== 'DIV') {
                        FunctionUtils.error(LangManager.getLogMessage('IDS_ERROR_NODE_DIV_IN_SVG'));
                    }
                    this._selections[key] = parentNode.append("div").attr('class', 'v-m-' + key);
                } else {
                    if (node.tagName === 'DIV') {
                        this._selections[key] = parentNode.append("svg").style({
                            'position':'absolute',
                            'width':'100%',
                            'height':'100%'
                        }).append(
                            "g").attr('class', 'v-m-' + key);
                    } else {
                        this._selections[key] = parentNode.append("g").attr('class', 'v-m-' + key);
                    }
                }
            }
        }
    };

    UIContainer.prototype.supportExportToContentType = function (options) {
        var length = this._children.length;
        for (var i = 0; i < length; i++) {
            if (this._children.supportExportToContentType) {
                return this._children.supportExportToContentType(options);
            }
        }
    };

    UIContainer.prototype.exportContent = function (options) {
        var length = this._children.length;
        for (var i = 0; i < length; i++) {
            if (this._children.exportContent) {
                return this._children.exportContent(options);
            }
        }
    };


    UIContainer.prototype.destroy = function () {
        UIContainer.superclass.destroy.call(this);

        var key;
        for (key in this._selections) {
            if (this._selections.hasOwnProperty(key)) {
                this._selections[key].remove();
            }
        }
        
        for (key in this._children) {
            if (this._children.hasOwnProperty(key)) {
                
                if (this._children[key] == null) {
                    continue;
                }
                
                var child = this._children[key].module;
                
                if (child && child.destroy) {
                    child.destroy();
                }
                this._children[key] = null;
            }
        }
        
        this._selections = null;
        this._renderType = null;
        this._children = null;
        
        if (this._layoutAlgorithm && this._layoutAlgorithm.destroy) {
            this._layoutAlgorithm.destroy();
        }
        
        this._layoutAlgorithm = null;
    };

    UIContainer.prototype.calculatePaddingInPX = function(prop, width, height){
        var constantPaddingInPX, propertyPaddingInPX;
        var propertyPaddingTopInPX, propertyPaddingRightInPX;
        var propertyPaddingBottomInPX, propertyPaddingLeftInPX;

        var minEdge = Math.min(width, height);
        constantPaddingInPX = Constants.PADDING.DEFAULT;
        if(constantPaddingInPX < 1 && constantPaddingInPX > 0){
            constantPaddingInPX = constantPaddingInPX * minEdge;
        }
        propertyPaddingInPX = prop.get("general.layout.padding");
        if(propertyPaddingInPX < 1 && propertyPaddingInPX > 0){
            propertyPaddingInPX = propertyPaddingInPX * minEdge;
        }
        propertyPaddingTopInPX = prop.get("general.layout.paddingTop");
        if(propertyPaddingTopInPX < 1 && propertyPaddingTopInPX > 0){
            propertyPaddingTopInPX = propertyPaddingTopInPX * minEdge;
        }
        propertyPaddingRightInPX = prop.get("general.layout.paddingRight");
        if(propertyPaddingRightInPX < 1 && propertyPaddingRightInPX > 0){
            propertyPaddingRightInPX = propertyPaddingRightInPX * minEdge;
        }
        propertyPaddingBottomInPX = prop.get("general.layout.paddingBottom");
        if(propertyPaddingBottomInPX < 1 && propertyPaddingBottomInPX > 0){
            propertyPaddingBottomInPX = propertyPaddingBottomInPX * minEdge;
        }
        propertyPaddingLeftInPX = prop.get("general.layout.paddingLeft");
        if(propertyPaddingLeftInPX < 1 && propertyPaddingLeftInPX > 0){
            propertyPaddingLeftInPX = propertyPaddingLeftInPX * minEdge;
        }

        return {
            constantPaddingInPX: constantPaddingInPX,
            propertyPaddingInPX: propertyPaddingInPX,
            propertyPaddingTopInPX: propertyPaddingTopInPX,
            propertyPaddingRightInPX: propertyPaddingRightInPX,
            propertyPaddingBottomInPX: propertyPaddingBottomInPX,
            propertyPaddingLeftInPX: propertyPaddingLeftInPX
        };
    };

    return UIContainer;

});
define('sap/viz/chart/layout/LegendLayout',[
    "sap/viz/framework/common/util/oo",
    'sap/viz/framework/common/util/PositionUtil',
    "sap/viz/chart/layout/BaseLayout"
], function(oo, PositionUtil, BaseLayout) {

    function LegendLayout(){
        LegendLayout.superclass.constructor.apply(this, arguments);
        this.config.add({
            position: '',
            spacing: 12,
            //TODO: this should be a part of the algorithm, instead of a config
            legendPreferSizes: null
        });
    }

    oo.extend(LegendLayout, BaseLayout);

    LegendLayout.prototype.layout = function(components) {
        var results = {},
            isEnough = false,
            config = this.config,
            width = config.get('totalWidth'),
            height = config.get('totalHeight'),
            legendPreferSizes = config.get('legendPreferSizes'),
            position = config.get('position'),
            spacing = config.get('spacing'),
            isHorizontal = PositionUtil.isHorizontal(position),
            componentsArray = this._dictToArray(components),
            preSizeInfo = _setSizeInfoByOrientation(componentsArray, width, height, legendPreferSizes, isHorizontal);

        var start = 0,
            _finalSize,
            _availableSize = preSizeInfo.availableSize,
            _referenceSize = preSizeInfo.referenceSize,
            _referenceMinSizes = preSizeInfo.referenceMinSizes,
            _maxSizes = preSizeInfo.maxSizes,
            _minSizes = preSizeInfo.minSizes;

        if (d3.sum(_maxSizes) <= _availableSize) {
            isEnough = true;
        }

        for (var index = 0, len = componentsArray.length; index < len; index++) {

            var module = componentsArray[index].module;

            var anchor = {
                x: 0,
                y: 0
            };

            var _maxSize = _maxSizes[index];
            var _minSize = _minSizes[index];

            if (isHorizontal) {
                anchor.x = start;
            } else {
                anchor.y = start;
            }

            if (isEnough && _referenceMinSizes[index] < _referenceSize) {
                start = start + _maxSize;
                _finalSize = _maxSize;
            } else {
                // No enough
                if (_availableSize < _minSize || _referenceMinSizes[index] > _referenceSize) {
                    anchor.width = anchor.height = 0;
                    results[module.alias] = anchor;
                    continue;
                } else if (_availableSize > _maxSize) {
                    start = start + _maxSize;
                    _finalSize = _maxSize;
                    _availableSize = _availableSize - _maxSize;
                } else {
                    start = start + _availableSize;
                    _finalSize = _availableSize;
                    _availableSize = 0;
                }
            }

            //Set module size
            if (isHorizontal) {
                anchor.width = _finalSize;
                anchor.height = height;
            } else {
                anchor.width = width;
                anchor.height = _finalSize;
            }

            start += spacing;
            
            results[module.alias] = anchor;
        }

        return results;

    };

    function _setSizeInfoByOrientation(components, width, height, legendPreferSizes, isHorizontal) {
        var availableSize, refSize, maxSizes = [],
            minSizes = [],
            refMinSizes = [];

        if (isHorizontal) {
            //Horizontal layout
            availableSize = width;
            refSize = height;

            components.forEach(function(component) {
                var preSize = legendPreferSizes[component.module.alias];
                maxSizes.push(preSize.maxWidth);
                minSizes.push(preSize.minWidth);
                refMinSizes.push(preSize.minHeight);
            });
        } else {
            //Vertical layout
            availableSize = height;
            refSize = width;

            components.forEach(function(component) {
                var preSize = legendPreferSizes[component.module.alias];
                maxSizes.push(preSize.maxHeight);
                minSizes.push(preSize.minHeight);
                refMinSizes.push(preSize.minWidth);
            });
        }
        return {
            'availableSize': availableSize,
            'referenceSize': refSize,
            'maxSizes': maxSizes,
            'minSizes': minSizes,
            'referenceMinSizes': refMinSizes
        };
    }

    return LegendLayout;
});

define('sap/viz/chart/components/legend/LegendGroup',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/chart/components/container/UIContainer',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/PositionUtil',
    'sap/viz/chart/layout/LegendLayout',
    "sap/viz/framework/common/util/NumberUtils"
], function(oo, UIContainer, TypeUtils, PositionUtils, LegendLayout, NumberUtils) {

    var LegendGroup = function(runtime, options) {
        LegendGroup.superclass.constructor.apply(this, arguments);

        this._subSelection = {};
        this._position = null;
        this._legendPreferSizes = null;
        this.setLayoutAlgorithm(new LegendLayout());

        // when having renderTo property, its value is true
        this._isDedicated = false;
        this._maxSize = {
            width: 0,
            height: 0
        };

        this._height = 0;
        this._width = 0;
        this._spacing = 12;
        
    };
    oo.extend(LegendGroup, UIContainer);

    var VALID_POSITIONS = ["right", "left", "top", "bottom"];
    LegendGroup.prototype.getPosition = function () {
        var propId = "layout.position",
            pos = this._position || this._properties.get(propId);
        return VALID_POSITIONS.indexOf(pos) !== -1 ? pos : this._properties.getDefault(propId);
    };

    LegendGroup.prototype.setPosition = function (position) {
        this._position = position;
    };

    LegendGroup.prototype.visible = function() {
        var childModules = this._children;
        for (var key in childModules) {
            if (childModules.hasOwnProperty(key)) {
                var child = childModules[key].module;
                if (child.visible()) {
                    return true;
                }
            }
        }
        return false;
    };

    LegendGroup.prototype.isVisible = function() {
        var childModules = this._children;
        for (var key in childModules) {
            if (childModules.hasOwnProperty(key)) {
                var child = childModules[key].module;
                if (child.isVisible()) {
                    return true;
                }
            }
        }
        return false;
    };

    function layout(layoutAlgorithm, childModules, props, legendPreferSizes, sizeInfo, settings) {
        var components = {};
        for (var key in childModules) {
            if (childModules.hasOwnProperty(key)) {
                var child = childModules[key];
                var module = child.module;
                if (module.visible() || settings.isDedicated) {
                    components[key] = child;
                }
            }
        }

        layoutAlgorithm.config.set({
            totalWidth: sizeInfo.width,
            totalHeight: sizeInfo.height,
            position: this._position||props.layout.position,
            spacing : settings.spacing,
            legendPreferSizes: legendPreferSizes
        });

        var results = layoutAlgorithm.layout(components);
        var layoutInfos = {};
        for (key in components) {
            if (components.hasOwnProperty(key)) {
                var legend = components[key].module;
                var size = results[key];
                if (size) {
                    legend.width(size.width).height(size.height);
                    layoutInfos[key] = size;
                }
            }
        }
        return layoutInfos;
    }

    function getRenderBase(props, rootElement) {
        if (props.renderTo === undefined || props.renderTo === null || 
            (TypeUtils.isFunction(props.renderTo) && !props.renderTo())) {
            return rootElement;
        }

        var renderBase = d3.select(props.renderTo());

        if (renderBase.empty()) {
            return rootElement;
        }
        return renderBase;
    }

    LegendGroup.prototype.render = function(rootElement) {
        var props = this._properties.get();

        var size = null;
        
        //Check legendGroup has renderTo function
        var renderToNewDom, dedicatedHeight = 0;

        if (this._isDedicated) {
            renderToNewDom = d3.select(props.renderTo());
            size = {
                width: this._maxSize.width,
                height: this._maxSize.height + this._spacing
            };
        } else {
            size = {
                height: this._height,
                width: this._width
            };
        }

        var childModules = this._children;

        rootElement = getRenderBase(props, rootElement);

        var layoutInfos = layout(this._layoutAlgorithm, childModules, props, 
            this._legendPreferSizes, size, {
                isDedicated : this._isDedicated,
                spacing : this._spacing
            });

        for (var key in childModules) {
            if (childModules.hasOwnProperty(key)) {
                var child = childModules[key].module;
                var wrapper = null;

                if (renderToNewDom && !renderToNewDom.empty()) {
                    wrapper = renderToNewDom.selectAll('.v-m-' + key);
                    if (wrapper.empty()) {
                        wrapper = renderToNewDom.append('g').attr('class', 'v-m-' + key);
                    }
                    rootElement.selectAll('.v-m-' + key).selectAll('*').remove();
                } else {
                    if (this._subSelection[key]) {
                        wrapper = rootElement.selectAll('.v-m-' + key);
                    } else {
                        this._subSelection[key] = rootElement.append('g').attr('class', 'v-m-' + key);
                        wrapper = this._subSelection[key];
                    }
                }

                if (layoutInfos[key] && layoutInfos[key].x !== undefined && layoutInfos[key].y !== undefined) {
                    wrapper.attr('transform', 'translate(' + layoutInfos[key].x + ',' + layoutInfos[key].y + ')');
                }

                child.render(wrapper);
                if (dedicatedHeight > 0) {
                    dedicatedHeight += this._spacing; // 12 is spacing of legend group
                }
                dedicatedHeight = child.height() + dedicatedHeight;

                if (this._isDedicated && renderToNewDom) {
                    renderToNewDom.attr('height', dedicatedHeight).attr('width', this._maxSize.width);
                }
            }
        }
        this._properties.set("computedVisibility", this.isVisible(), true);
    };

    LegendGroup.prototype.setSize = function(size) {
        var childModules = this._children;

        this._height = size.height;
        this._width = size.width;
        
        for (var key in childModules) {
            if (childModules.hasOwnProperty(key)) {
                var child = childModules[key].module;
                if (child.visible()) {
                    child.setSize({
                        height: size.height,
                        width: size.width
                    });
                }
            }
        }
        return this;
    };

    LegendGroup.prototype.getPreferredSize = function(bound) {
        var props = this._properties.get();

        var maxHeight = NumberUtils.getSizeValue(props.layout.maxHeight, bound.height);
        var maxWidth = NumberUtils.getSizeValue(props.layout.maxWidth, bound.width);

        var minWidths = [],
            maxWidths = [],
            minHeights = [],
            maxHeights = [];

        var childModules = this._children;

        var results = {
            width: 0,
            height: 0,
            minWidth: 0,
            maxWidth: 0,
            minHeight: 0,
            maxHeight: 0
        };

        var currentWidth = 0;
        var currentHeight = 0;

        this._legendPreferSizes = {};

        if (props.renderTo !== undefined && props.renderTo !== null && 
            TypeUtils.isFunction(props.renderTo) && props.renderTo()) {
            this._isDedicated = true;
        } else {
            this._isDedicated = false;
        }

        for (var key in childModules) {
            if (childModules.hasOwnProperty(key)) {
                var child = childModules[key].module;
                child.setDedicated(this._isDedicated);

                if (child.visible() || this._isDedicated) {
                    if (this._isDedicated) {
                        //Set legend properties
                        child.setOrientation('right');
                    } else {
                        child.setOrientation(this._position||props.layout.position);
                    }

                    var size = child.getPreferredSize(bound);
                    
                    this._legendPreferSizes[key] = size;
                    
                    if(!this._isDedicated){
                        if (child.isHorizontal()) {
                            
                            if (size.minHeight > maxHeight || size.minWidth > bound.width) {
                                continue;
                            }
                        } else {
                            if (size.minWidth > maxWidth || size.minHeight > bound.height) {
                                continue;
                            }
                        }
                    }
                    
                    minWidths.push(size.minWidth);
                    minHeights.push(size.minHeight);
                    maxWidths.push(size.maxWidth);
                    maxHeights.push(size.maxHeight);
                }
            }
        }
        
        var minimums = {
                width: d3.min(minWidths),
                height: d3.min(minHeights)
            },
            maximums = {
                width: d3.max(maxWidths),
                height: d3.max(maxHeights)
            };

        if (minimums.width > 0 || minimums.height > 0 || maximums.width > 0 || maximums.height > 0) {
            
            if (this.isHorizontal()) {
                currentHeight = maxHeight > maximums.height ? maximums.height : maxHeight;
                currentWidth = maximums.width;

                this._maxSize.width = d3.sum(maxWidths);
                this._maxSize.height = maximums.height;
            } else {
                currentWidth = maxWidth > maximums.width ? maximums.width : maxWidth;
                currentHeight = maximums.height;

                this._maxSize.height = d3.sum(maxHeights);
                this._maxSize.width = maximums.width;
            }
        }

        if (this._isDedicated) {
            return results;
        } else {
            return {
                width: currentWidth,
                height: currentHeight,
                minWidth: minimums.width,
                maxWidth: maximums.width,
                minHeight: minimums.height,
                maxHeight: maximums.height
            };
        }
    };

    LegendGroup.prototype.isHorizontal = function() {
        var position = this._properties.get("layout.position");
        return PositionUtils.isHorizontal(position);
    };
    
    LegendGroup.prototype.setData = function(data) {

        var childModules = this._children;

        for (var key in childModules) {
            if (childModules.hasOwnProperty(key)) {
                var child = childModules[key].module;
                child.setData(data);
            }
        }
    };
    
    LegendGroup.prototype.destroy = function() {
        LegendGroup.superclass.destroy.call(this);
        
        for (var key in this._subSelection) {
            if (this._subSelection.hasOwnProperty(key)) {
                this._subSelection[key].remove();
                this._subSelection[key] = null;
            }
        }
        
        this._position = null;
        this._subSelection = null;
        this._legendPreferSizes = null;

        this._isDedicated = null;
        this._maxSize = null;

        this._height = null;
        this._width = null;
    };

    return LegendGroup;
});

define('propertyDefs',[], function(){
return {
    "": {
        "feedingZone": {
            "defaultValue": [
                {
                    "bindDef": [
                        {
                            "id": null
                        }
                    ],
                    "bound": [
                        [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                0
                            ]
                        ]
                    ],
                    "name": null
                }
            ],
            "readonly": true,
            "serializable": false
        },
        "general.background.border.bottom.visible": false,
        "general.background.border.left.visible": false,
        "general.background.border.right.visible": false,
        "general.background.border.stroke": "#d8d8d8",
        "general.background.border.strokeWidth": 1,
        "general.background.border.top.visible": false,
        "general.background.color": "transparent",
        "general.background.drawingEffect": "normal",
        "general.background.gradientDirection": "vertical",
        "general.background.visible": true,
        "general.layout.padding": 24,
        "general.layout.paddingBottom": null,
        "general.layout.paddingLeft": null,
        "general.layout.paddingRight": null,
        "general.layout.paddingTop": null,
        "general.tabIndex": -1,
        "interaction.behaviorType": null,
        "interaction.selectability.axisLabelSelection": true,
        "interaction.selectability.mode": "INCLUSIVE",
        "interaction.selectability.plotLassoSelection": true,
        "interaction.selectability.plotStdSelection": true,
        "legend.drawingEffect": "normal",
        "legend.formatString": null,
        "legend.label.style.color": "#000000",
        "legend.label.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "legend.label.style.fontSize": "12px",
        "legend.label.style.fontStyle": "normal",
        "legend.label.style.fontWeight": "normal",
        "legend.title.style.color": "#000000",
        "legend.title.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "legend.title.style.fontSize": "14px",
        "legend.title.style.fontStyle": "normal",
        "legend.title.style.fontWeight": "bold",
        "legend.title.text": null,
        "legend.title.visible": false,
        "legend.visible": true,
        "legendGroup.computedVisibility": {
            "defaultValue": true,
            "readonly": true,
            "serializable": false
        },
        "legendGroup.layout.maxHeight": "0.25",
        "legendGroup.layout.maxWidth": "0.25",
        "legendGroup.layout.position": "right",
        "legendGroup.renderTo": null,
        "plotArea.background.border.bottom.visible": true,
        "plotArea.background.border.left.visible": true,
        "plotArea.background.border.right.visible": true,
        "plotArea.background.border.stroke": "#d8d8d8",
        "plotArea.background.border.strokeWidth": 1,
        "plotArea.background.border.top.visible": true,
        "plotArea.background.color": "transparent",
        "plotArea.background.drawingEffect": "normal",
        "plotArea.background.gradientDirection": "vertical",
        "plotArea.background.visible": true,
        "propertyZone": {
            "defaultValue": null,
            "readonly": true,
            "serializable": false
        },
        "title.alignment": "center",
        "title.layout.maxHeight": 0.2,
        "title.style.color": "#333333",
        "title.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "title.style.fontSize": "16px",
        "title.style.fontStyle": "normal",
        "title.style.fontWeight": "bold",
        "title.text": null,
        "title.visible": false,
        "tooltip.background.borderColor": "#cccccc",
        "tooltip.background.color": "#ffffff",
        "tooltip.bodyDimensionLabel.color": "#666666",
        "tooltip.bodyDimensionValue.color": "#666666",
        "tooltip.bodyMeasureLabel.color": "#666666",
        "tooltip.bodyMeasureValue.color": "#000000",
        "tooltip.closeButton.backgroundColor": "#ffffff",
        "tooltip.closeButton.borderColor": "#cccccc",
        "tooltip.drawingEffect": "normal",
        "tooltip.footerLabel.color": "#000000",
        "tooltip.formatString": null,
        "tooltip.layinChart": true,
        "tooltip.postRender": null,
        "tooltip.preRender": null,
        "tooltip.separationLine.color": "#a7a9ac",
        "tooltip.visible": true
    },
    "_bullet": {
        "categoryAxis.axisLine.size": 1,
        "categoryAxis.axisLine.visible": true,
        "categoryAxis.axisTick.visible": true,
        "categoryAxis.color": "#6c6c6c",
        "categoryAxis.hoverShadow.color": "#cccccc",
        "categoryAxis.label.style.color": "#333333",
        "categoryAxis.label.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "categoryAxis.label.style.fontSize": "12px",
        "categoryAxis.label.style.fontStyle": "normal",
        "categoryAxis.label.style.fontWeight": "normal",
        "categoryAxis.label.visible": true,
        "categoryAxis.labelRenderer": null,
        "categoryAxis.layout.maxHeight": 0.3,
        "categoryAxis.layout.maxWidth": 0.3,
        "categoryAxis.mouseDownShadow.color": "#808080",
        "categoryAxis.title.applyAxislineColor": false,
        "categoryAxis.title.style.color": "#000000",
        "categoryAxis.title.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "categoryAxis.title.style.fontSize": "14px",
        "categoryAxis.title.style.fontStyle": "normal",
        "categoryAxis.title.style.fontWeight": "bold",
        "categoryAxis.title.text": null,
        "categoryAxis.title.visible": false,
        "categoryAxis.visible": true,
        "legend.isScrollable": false,
        "legend.itemMargin": 0.5,
        "legend.label.text.negativeGap": "Below is Bad",
        "legend.label.text.positiveGap": "Above is Good",
        "legend.marker.size": null,
        "legend.order": {
            "defaultValue": null,
            "readonly": false,
            "serializable": false
        },
        "legend.scrollbar.thumb.fill": "#e5e5e5",
        "legend.scrollbar.thumb.hoverFill": "#dedede",
        "legend.scrollbar.track.fill": "#f7f7f7",
        "plotArea.background.border.right.visible": false,
        "plotArea.colorPalette": [
            "#748CB2",
            "#9CC677"
        ],
        "plotArea.dataPointStyle": null,
        "plotArea.defaultOthersStyle.color": "#000000",
        "plotArea.forecastColor": [
            "#D5DADC"
        ],
        "plotArea.gap.negativeColor": "#e34352",
        "plotArea.gap.positiveColor": "#87c27e",
        "plotArea.gap.type": "both",
        "plotArea.gap.visible": false,
        "plotArea.gridline.color": "#d8d8d8",
        "plotArea.gridline.size": 1,
        "plotArea.gridline.type": "line",
        "plotArea.gridline.visible": false,
        "plotArea.markerRenderer": null,
        "plotArea.primaryScale.autoMaxValue": {
            "defaultValue": null,
            "readonly": true,
            "serializable": false
        },
        "plotArea.primaryScale.autoMinValue": {
            "defaultValue": null,
            "readonly": true,
            "serializable": false
        },
        "plotArea.primaryScale.maxValue": {
            "defaultValue": null,
            "readonly": false,
            "serializable": false
        },
        "plotArea.primaryScale.minValue": {
            "defaultValue": null,
            "readonly": false,
            "serializable": false
        },
        "plotArea.scrollbar.thumb.fill": "#e5e5e5",
        "plotArea.scrollbar.thumb.hoverFill": "#dedede",
        "plotArea.scrollbar.track.fill": "#f7f7f7",
        "plotArea.target.shadowColor": "",
        "plotArea.target.valueColor": "#333333",
        "valueAxis.axisLine.size": 1,
        "valueAxis.axisLine.visible": true,
        "valueAxis.axisTick.visible": true,
        "valueAxis.color": "#6c6c6c",
        "valueAxis.label.formatString": null,
        "valueAxis.label.style.color": "#333333",
        "valueAxis.label.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "valueAxis.label.style.fontSize": "12px",
        "valueAxis.label.style.fontStyle": "normal",
        "valueAxis.label.style.fontWeight": "normal",
        "valueAxis.label.unitFormatType": "FinancialUnits",
        "valueAxis.label.visible": true,
        "valueAxis.layout.maxHeight": 0.25,
        "valueAxis.layout.maxWidth": 0.25,
        "valueAxis.title.applyAxislineColor": false,
        "valueAxis.title.style.color": "#000000",
        "valueAxis.title.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "valueAxis.title.style.fontSize": "14px",
        "valueAxis.title.style.fontStyle": "normal",
        "valueAxis.title.style.fontWeight": "bold",
        "valueAxis.title.text": null,
        "valueAxis.title.visible": false,
        "valueAxis.visible": true
    },
    "_dual": {
        "categoryAxis.axisLine.size": 1,
        "categoryAxis.axisLine.visible": true,
        "categoryAxis.axisTick.visible": true,
        "categoryAxis.color": "#6c6c6c",
        "categoryAxis.hoverShadow.color": "#cccccc",
        "categoryAxis.label.hideSubLevels": false,
        "categoryAxis.label.style.color": "#333333",
        "categoryAxis.label.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "categoryAxis.label.style.fontSize": "12px",
        "categoryAxis.label.style.fontStyle": "normal",
        "categoryAxis.label.style.fontWeight": "normal",
        "categoryAxis.label.visible": true,
        "categoryAxis.labelRenderer": null,
        "categoryAxis.layout.maxHeight": 0.3,
        "categoryAxis.layout.maxWidth": 0.3,
        "categoryAxis.mouseDownShadow.color": "#808080",
        "categoryAxis.title.applyAxislineColor": false,
        "categoryAxis.title.style.color": "#000000",
        "categoryAxis.title.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "categoryAxis.title.style.fontSize": "14px",
        "categoryAxis.title.style.fontStyle": "normal",
        "categoryAxis.title.style.fontWeight": "bold",
        "categoryAxis.title.text": null,
        "categoryAxis.title.visible": false,
        "categoryAxis.visible": true,
        "interaction.selectability.legendSelection": true,
        "legend.hoverShadow.color": "#cccccc",
        "legend.isScrollable": false,
        "legend.itemMargin": 0.5,
        "legend.marker.size": null,
        "legend.mouseDownShadow.color": "#808080",
        "legend.order": {
            "defaultValue": null,
            "readonly": false,
            "serializable": false
        },
        "legend.scrollbar.thumb.fill": "#e5e5e5",
        "legend.scrollbar.thumb.hoverFill": "#dedede",
        "legend.scrollbar.track.fill": "#f7f7f7",
        "plotArea.dataLabel.formatString": null,
        "plotArea.dataLabel.hideWhenOverlap": false,
        "plotArea.dataLabel.renderer": null,
        "plotArea.dataLabel.style.color": "#333333",
        "plotArea.dataLabel.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "plotArea.dataLabel.style.fontSize": "12px",
        "plotArea.dataLabel.style.fontStyle": "normal",
        "plotArea.dataLabel.style.fontWeight": "normal",
        "plotArea.dataLabel.visible": false,
        "plotArea.dataPointStyle": null,
        "plotArea.defaultOthersStyle.color": "#000000",
        "plotArea.drawingEffect": "normal",
        "plotArea.gridline.color": "#d8d8d8",
        "plotArea.gridline.size": 1,
        "plotArea.gridline.type": "line",
        "plotArea.gridline.visible": true,
        "plotArea.gridline.zeroLine.color": null,
        "plotArea.gridline.zeroLine.highlight": true,
        "plotArea.gridline.zeroLine.unhighlightAxis": true,
        "plotArea.markerRenderer": null,
        "plotArea.primaryScale.autoMaxValue": {
            "defaultValue": null,
            "readonly": true,
            "serializable": false
        },
        "plotArea.primaryScale.autoMinValue": {
            "defaultValue": null,
            "readonly": true,
            "serializable": false
        },
        "plotArea.primaryScale.fixedRange": {
            "defaultValue": false,
            "readonly": false,
            "serializable": false
        },
        "plotArea.primaryScale.maxValue": {
            "defaultValue": null,
            "readonly": false,
            "serializable": false
        },
        "plotArea.primaryScale.minValue": {
            "defaultValue": null,
            "readonly": false,
            "serializable": false
        },
        "plotArea.primaryValuesColorPalette": {
            "defaultValue": [
                "#8FBADD",
                "#B8D4E9",
                "#7AAED6",
                "#A3C7E3",
                "#3D88C4",
                "#66A1D0",
                "#297CBE",
                "#5295CA",
                "#005BA3",
                "#146FB7",
                "#005395",
                "#0063B1"
            ],
            "readonly": false,
            "serializable": false
        },
        "plotArea.referenceLine.defaultStyle.color": "#666666",
        "plotArea.referenceLine.defaultStyle.label.background": "#ffffff",
        "plotArea.referenceLine.defaultStyle.label.color": "#333333",
        "plotArea.referenceLine.defaultStyle.label.fontFamily": "\"Open Sans\", Arial, Helvetica, sans-serif",
        "plotArea.referenceLine.defaultStyle.label.fontSize": "12px",
        "plotArea.referenceLine.defaultStyle.label.fontStyle": "normal",
        "plotArea.referenceLine.defaultStyle.label.fontWeight": "normal",
        "plotArea.referenceLine.defaultStyle.size": 1,
        "plotArea.referenceLine.defaultStyle.type": "dotted",
        "plotArea.referenceLine.line": null,
        "plotArea.scrollbar.thumb.fill": "#e5e5e5",
        "plotArea.scrollbar.thumb.hoverFill": "#dedede",
        "plotArea.scrollbar.track.fill": "#f7f7f7",
        "plotArea.secondaryScale.autoMaxValue": {
            "defaultValue": null,
            "readonly": true,
            "serializable": false
        },
        "plotArea.secondaryScale.autoMinValue": {
            "defaultValue": null,
            "readonly": true,
            "serializable": false
        },
        "plotArea.secondaryScale.fixedRange": {
            "defaultValue": false,
            "readonly": false,
            "serializable": false
        },
        "plotArea.secondaryScale.maxValue": {
            "defaultValue": null,
            "readonly": false,
            "serializable": false
        },
        "plotArea.secondaryScale.minValue": {
            "defaultValue": null,
            "readonly": false,
            "serializable": false
        },
        "plotArea.secondaryValuesColorPalette": {
            "defaultValue": [
                "#F6A09B",
                "#F9C3C0",
                "#F58E88",
                "#F8B1AD",
                "#F05B52",
                "#F37D76",
                "#EE4A40",
                "#F16C64",
                "#D92419",
                "#ED382D",
                "#C52117",
                "#EB271B"
            ],
            "readonly": false,
            "serializable": false
        },
        "valueAxis.axisLine.size": 1,
        "valueAxis.axisLine.visible": true,
        "valueAxis.axisTick.visible": true,
        "valueAxis.color": "#8FBADD",
        "valueAxis.label.formatString": null,
        "valueAxis.label.style.color": "#333333",
        "valueAxis.label.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "valueAxis.label.style.fontSize": "12px",
        "valueAxis.label.style.fontStyle": "normal",
        "valueAxis.label.style.fontWeight": "normal",
        "valueAxis.label.unitFormatType": "FinancialUnits",
        "valueAxis.label.visible": true,
        "valueAxis.layout.maxHeight": 0.25,
        "valueAxis.layout.maxWidth": 0.25,
        "valueAxis.title.applyAxislineColor": true,
        "valueAxis.title.style.color": "#000000",
        "valueAxis.title.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "valueAxis.title.style.fontSize": "14px",
        "valueAxis.title.style.fontStyle": "normal",
        "valueAxis.title.style.fontWeight": "bold",
        "valueAxis.title.text": null,
        "valueAxis.title.visible": false,
        "valueAxis.visible": true,
        "valueAxis2.axisLine.size": 1,
        "valueAxis2.axisLine.visible": true,
        "valueAxis2.axisTick.visible": true,
        "valueAxis2.color": "#F6A09B",
        "valueAxis2.label.formatString": null,
        "valueAxis2.label.style.color": "#333333",
        "valueAxis2.label.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "valueAxis2.label.style.fontSize": "12px",
        "valueAxis2.label.style.fontStyle": "normal",
        "valueAxis2.label.style.fontWeight": "normal",
        "valueAxis2.label.unitFormatType": "FinancialUnits",
        "valueAxis2.label.visible": true,
        "valueAxis2.layout.maxHeight": 0.25,
        "valueAxis2.layout.maxWidth": 0.25,
        "valueAxis2.title.applyAxislineColor": true,
        "valueAxis2.title.style.color": "#000000",
        "valueAxis2.title.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "valueAxis2.title.style.fontSize": "14px",
        "valueAxis2.title.style.fontStyle": "normal",
        "valueAxis2.title.style.fontWeight": "bold",
        "valueAxis2.title.text": null,
        "valueAxis2.title.visible": false,
        "valueAxis2.visible": true
    },
    "_pie": {
        "interaction.selectability.legendSelection": true,
        "legend.hoverShadow.color": "#cccccc",
        "legend.isScrollable": false,
        "legend.itemMargin": 0.5,
        "legend.marker.size": null,
        "legend.mouseDownShadow.color": "#808080",
        "legend.order": {
            "defaultValue": null,
            "readonly": false,
            "serializable": false
        },
        "legend.scrollbar.thumb.fill": "#e5e5e5",
        "legend.scrollbar.thumb.hoverFill": "#dedede",
        "legend.scrollbar.track.fill": "#f7f7f7",
        "plotArea.colorPalette": {
            "defaultValue": [
                "#748CB2",
                "#9CC677",
                "#EACF5E",
                "#F9AD79",
                "#D16A7C",
                "#8873A2",
                "#3A95B3",
                "#B6D949",
                "#FDD36C",
                "#F47958",
                "#A65084",
                "#0063B1",
                "#0DA841",
                "#FCB71D",
                "#F05620",
                "#B22D6E",
                "#3C368E",
                "#8FB2CF",
                "#95D4AB",
                "#EAE98F",
                "#F9BE92",
                "#EC9A99",
                "#BC98BD",
                "#1EB7B2",
                "#73C03C",
                "#F48323",
                "#EB271B",
                "#D9B5CA",
                "#AED1DA",
                "#DFECB2",
                "#FCDAB0",
                "#F5BCB4"
            ],
            "readonly": false,
            "serializable": false
        },
        "plotArea.dataLabel.formatString": "0.0%",
        "plotArea.dataLabel.hideWhenOverlap": false,
        "plotArea.dataLabel.renderer": null,
        "plotArea.dataLabel.style.color": "#333333",
        "plotArea.dataLabel.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "plotArea.dataLabel.style.fontSize": "12px",
        "plotArea.dataLabel.style.fontStyle": "normal",
        "plotArea.dataLabel.style.fontWeight": "normal",
        "plotArea.dataLabel.visible": false,
        "plotArea.dataPointStyle": null,
        "plotArea.defaultOthersStyle.color": "#000000",
        "plotArea.drawingEffect": "normal",
        "plotArea.highlight.centerName.style.color": null,
        "plotArea.highlight.centerName.style.fontFamily": "Arial, Helvetica, sans-serif",
        "plotArea.highlight.centerName.style.fontSize": "14px",
        "plotArea.highlight.centerName.style.fontStyle": "normal",
        "plotArea.highlight.centerName.style.fontWeight": "normal",
        "plotArea.highlight.centerName.visible": true,
        "plotArea.highlight.centerValue.style.color": null,
        "plotArea.highlight.centerValue.style.fontFamily": "Arial, Helvetica, sans-serif",
        "plotArea.highlight.centerValue.style.fontSize": "22px",
        "plotArea.highlight.centerValue.style.fontStyle": "normal",
        "plotArea.highlight.centerValue.style.fontWeight": "normal",
        "plotArea.highlight.centerValue.visible": true,
        "plotArea.highlight.contextInfos": [],
        "plotArea.highlight.highlightContext": [],
        "plotArea.highlight.unhighlightSliceColor": "#dddddd",
        "plotArea.innerRadiusRatio": 0.5,
        "plotArea.markerRenderer": null,
        "plotArea.sliceRenderer": null
    },
    "_scatter": {
        "interaction.selectability.legendSelection": true,
        "legend.hoverShadow.color": "#cccccc",
        "legend.isScrollable": false,
        "legend.itemMargin": 0.5,
        "legend.marker.size": null,
        "legend.mouseDownShadow.color": "#808080",
        "legend.order": {
            "defaultValue": null,
            "readonly": false,
            "serializable": false
        },
        "legend.scrollbar.thumb.fill": "#e5e5e5",
        "legend.scrollbar.thumb.hoverFill": "#dedede",
        "legend.scrollbar.track.fill": "#f7f7f7",
        "plotArea.colorPalette": {
            "defaultValue": [
                "#748CB2",
                "#9CC677",
                "#EACF5E",
                "#F9AD79",
                "#D16A7C",
                "#8873A2",
                "#3A95B3",
                "#B6D949",
                "#FDD36C",
                "#F47958",
                "#A65084",
                "#0063B1",
                "#0DA841",
                "#FCB71D",
                "#F05620",
                "#B22D6E",
                "#3C368E",
                "#8FB2CF",
                "#95D4AB",
                "#EAE98F",
                "#F9BE92",
                "#EC9A99",
                "#BC98BD",
                "#1EB7B2",
                "#73C03C",
                "#F48323",
                "#EB271B",
                "#D9B5CA",
                "#AED1DA",
                "#DFECB2",
                "#FCDAB0",
                "#F5BCB4"
            ],
            "readonly": false,
            "serializable": false
        },
        "plotArea.dataLabel.formatString": null,
        "plotArea.dataLabel.hideWhenOverlap": false,
        "plotArea.dataLabel.renderer": null,
        "plotArea.dataLabel.style.color": "#333333",
        "plotArea.dataLabel.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "plotArea.dataLabel.style.fontSize": "12px",
        "plotArea.dataLabel.style.fontStyle": "normal",
        "plotArea.dataLabel.style.fontWeight": "normal",
        "plotArea.dataLabel.type": "bubbleWidth",
        "plotArea.dataLabel.visible": false,
        "plotArea.dataPointStyle": null,
        "plotArea.defaultOthersStyle.color": "#000000",
        "plotArea.drawingEffect": "normal",
        "plotArea.gridline.color": "#d8d8d8",
        "plotArea.gridline.size": 1,
        "plotArea.gridline.type": "line",
        "plotArea.gridline.visible": true,
        "plotArea.markerRenderer": null,
        "plotArea.primaryScale.autoMaxValue": {
            "defaultValue": null,
            "readonly": true,
            "serializable": false
        },
        "plotArea.primaryScale.autoMinValue": {
            "defaultValue": null,
            "readonly": true,
            "serializable": false
        },
        "plotArea.primaryScale.fixedRange": {
            "defaultValue": false,
            "readonly": false,
            "serializable": false
        },
        "plotArea.primaryScale.maxValue": {
            "defaultValue": null,
            "readonly": false,
            "serializable": false
        },
        "plotArea.referenceLine.defaultStyle.color": "#666666",
        "plotArea.referenceLine.defaultStyle.label.background": "#ffffff",
        "plotArea.referenceLine.defaultStyle.label.color": "#333333",
        "plotArea.referenceLine.defaultStyle.label.fontFamily": "\"Open Sans\", Arial, Helvetica, sans-serif",
        "plotArea.referenceLine.defaultStyle.label.fontSize": "12px",
        "plotArea.referenceLine.defaultStyle.label.fontStyle": "normal",
        "plotArea.referenceLine.defaultStyle.label.fontWeight": "normal",
        "plotArea.referenceLine.defaultStyle.size": 1,
        "plotArea.referenceLine.defaultStyle.type": "dotted",
        "plotArea.referenceLine.line": null,
        "plotArea.scrollbar.thumb.fill": "#e5e5e5",
        "plotArea.scrollbar.thumb.hoverFill": "#dedede",
        "plotArea.scrollbar.track.fill": "#f7f7f7",
        "plotArea.secondaryScale.autoMaxValue": {
            "defaultValue": null,
            "readonly": true,
            "serializable": false
        },
        "plotArea.secondaryScale.autoMinValue": {
            "defaultValue": null,
            "readonly": true,
            "serializable": false
        },
        "plotArea.secondaryScale.fixedRange": {
            "defaultValue": false,
            "readonly": false,
            "serializable": false
        },
        "plotArea.secondaryScale.maxValue": {
            "defaultValue": null,
            "readonly": false,
            "serializable": false
        },
        "plotArea.secondaryScale.minValue": {
            "defaultValue": null,
            "readonly": false,
            "serializable": false
        },
        "plotArea.shapePalette": {
            "defaultValue": [
                "circle",
                "square",
                "diamond",
                "triangleUp",
                "triangleDown",
                "triangleLeft",
                "triangleRight",
                "cross",
                "intersection"
            ],
            "readonly": false,
            "serializable": false
        },
        "valueAxis.axisLine.size": 1,
        "valueAxis.axisLine.visible": true,
        "valueAxis.axisTick.visible": true,
        "valueAxis.color": "#6c6c6c",
        "valueAxis.label.formatString": null,
        "valueAxis.label.style.color": "#333333",
        "valueAxis.label.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "valueAxis.label.style.fontSize": "12px",
        "valueAxis.label.style.fontStyle": "normal",
        "valueAxis.label.style.fontWeight": "normal",
        "valueAxis.label.visible": true,
        "valueAxis.layout.maxHeight": 0.25,
        "valueAxis.layout.maxWidth": 0.25,
        "valueAxis.title.applyAxislineColor": false,
        "valueAxis.title.style.color": "#000000",
        "valueAxis.title.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "valueAxis.title.style.fontSize": "14px",
        "valueAxis.title.style.fontStyle": "normal",
        "valueAxis.title.style.fontWeight": "bold",
        "valueAxis.title.text": null,
        "valueAxis.title.visible": false,
        "valueAxis.visible": true,
        "valueAxis2.axisLine.size": 1,
        "valueAxis2.axisLine.visible": true,
        "valueAxis2.axisTick.visible": true,
        "valueAxis2.color": "#6c6c6c",
        "valueAxis2.label.formatString": null,
        "valueAxis2.label.style.color": "#333333",
        "valueAxis2.label.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "valueAxis2.label.style.fontSize": "12px",
        "valueAxis2.label.style.fontStyle": "normal",
        "valueAxis2.label.style.fontWeight": "normal",
        "valueAxis2.label.unitFormatType": "FinancialUnits",
        "valueAxis2.label.visible": true,
        "valueAxis2.layout.maxHeight": 0.25,
        "valueAxis2.layout.maxWidth": 0.25,
        "valueAxis2.title.applyAxislineColor": false,
        "valueAxis2.title.style.color": "#000000",
        "valueAxis2.title.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "valueAxis2.title.style.fontSize": "14px",
        "valueAxis2.title.style.fontStyle": "normal",
        "valueAxis2.title.style.fontWeight": "bold",
        "valueAxis2.title.text": null,
        "valueAxis2.title.visible": false,
        "valueAxis2.visible": true
    },
    "_trellis": {
        "columnAxis.axisLine.visible": false,
        "columnAxis.hoverShadow.color": "#cccccc",
        "columnAxis.hoverShadowMouseDown.color": "#808080",
        "columnAxis.label.style.color": "#333333",
        "columnAxis.label.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "columnAxis.label.style.fontSize": "12px",
        "columnAxis.label.style.fontStyle": "normal",
        "columnAxis.label.style.fontWeight": "normal",
        "columnAxis.label.visible": true,
        "columnAxis.layout.maxHeight": 0.3,
        "columnAxis.mouseDownShadow.color": "#808080",
        "columnAxis.title.applyAxislineColor": false,
        "columnAxis.title.style.color": "#000000",
        "columnAxis.title.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "columnAxis.title.style.fontSize": "14px",
        "columnAxis.title.style.fontStyle": "normal",
        "columnAxis.title.style.fontWeight": "bold",
        "columnAxis.title.text": null,
        "columnAxis.title.visible": true,
        "columnAxis.visible": true,
        "plotArea.background.border.bottom.visible": false,
        "plotArea.background.border.left.visible": false,
        "plotArea.background.border.right.visible": false,
        "plotArea.background.border.top.visible": false,
        "plotArea.cellGrid.color": "#d8d8d8",
        "plotArea.cellGrid.size": 1,
        "plotArea.cellGrid.visible": true,
        "plotArea.gridline.visible": false,
        "rowAxis.axisLine.visible": false,
        "rowAxis.hiddenTitle.color": "#a6a6a6",
        "rowAxis.hoverShadow.color": "#cccccc",
        "rowAxis.hoverShadowMouseDown.color": "#808080",
        "rowAxis.label.disableAutoHide": true,
        "rowAxis.label.style.color": "#333333",
        "rowAxis.label.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "rowAxis.label.style.fontSize": "12px",
        "rowAxis.label.style.fontStyle": "normal",
        "rowAxis.label.style.fontWeight": "normal",
        "rowAxis.label.visible": true,
        "rowAxis.layout.maxWidth": 0.3,
        "rowAxis.mouseDownShadow.color": "#808080",
        "rowAxis.title.applyAxislineColor": false,
        "rowAxis.title.style.color": "#000000",
        "rowAxis.title.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "rowAxis.title.style.fontSize": "14px",
        "rowAxis.title.style.fontStyle": "normal",
        "rowAxis.title.style.fontWeight": "bold",
        "rowAxis.title.text": null,
        "rowAxis.title.visible": true,
        "rowAxis.visible": true
    },
    "_xy": {
        "categoryAxis.axisLine.size": 1,
        "categoryAxis.axisLine.visible": true,
        "categoryAxis.axisTick.visible": true,
        "categoryAxis.color": "#6c6c6c",
        "categoryAxis.hoverShadow.color": "#cccccc",
        "categoryAxis.label.hideSubLevels": false,
        "categoryAxis.label.style.color": "#333333",
        "categoryAxis.label.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "categoryAxis.label.style.fontSize": "12px",
        "categoryAxis.label.style.fontStyle": "normal",
        "categoryAxis.label.style.fontWeight": "normal",
        "categoryAxis.label.visible": true,
        "categoryAxis.labelRenderer": null,
        "categoryAxis.layout.maxHeight": 0.3,
        "categoryAxis.layout.maxWidth": 0.3,
        "categoryAxis.mouseDownShadow.color": "#808080",
        "categoryAxis.title.applyAxislineColor": false,
        "categoryAxis.title.style.color": "#000000",
        "categoryAxis.title.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "categoryAxis.title.style.fontSize": "14px",
        "categoryAxis.title.style.fontStyle": "normal",
        "categoryAxis.title.style.fontWeight": "bold",
        "categoryAxis.title.text": null,
        "categoryAxis.title.visible": false,
        "categoryAxis.visible": true,
        "interaction.selectability.legendSelection": true,
        "legend.hoverShadow.color": "#cccccc",
        "legend.isScrollable": false,
        "legend.itemMargin": 0.5,
        "legend.marker.size": null,
        "legend.mouseDownShadow.color": "#808080",
        "legend.order": {
            "defaultValue": null,
            "readonly": false,
            "serializable": false
        },
        "legend.scrollbar.thumb.fill": "#e5e5e5",
        "legend.scrollbar.thumb.hoverFill": "#dedede",
        "legend.scrollbar.track.fill": "#f7f7f7",
        "plotArea.colorPalette": {
            "defaultValue": [
                "#748CB2",
                "#9CC677",
                "#EACF5E",
                "#F9AD79",
                "#D16A7C",
                "#8873A2",
                "#3A95B3",
                "#B6D949",
                "#FDD36C",
                "#F47958",
                "#A65084",
                "#0063B1",
                "#0DA841",
                "#FCB71D",
                "#F05620",
                "#B22D6E",
                "#3C368E",
                "#8FB2CF",
                "#95D4AB",
                "#EAE98F",
                "#F9BE92",
                "#EC9A99",
                "#BC98BD",
                "#1EB7B2",
                "#73C03C",
                "#F48323",
                "#EB271B",
                "#D9B5CA",
                "#AED1DA",
                "#DFECB2",
                "#FCDAB0",
                "#F5BCB4"
            ],
            "readonly": false,
            "serializable": false
        },
        "plotArea.dataLabel.formatString": null,
        "plotArea.dataLabel.hideWhenOverlap": false,
        "plotArea.dataLabel.renderer": null,
        "plotArea.dataLabel.style.color": "#333333",
        "plotArea.dataLabel.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "plotArea.dataLabel.style.fontSize": "12px",
        "plotArea.dataLabel.style.fontStyle": "normal",
        "plotArea.dataLabel.style.fontWeight": "normal",
        "plotArea.dataLabel.visible": false,
        "plotArea.dataPointStyle": null,
        "plotArea.defaultOthersStyle.color": "#000000",
        "plotArea.drawingEffect": "normal",
        "plotArea.gridline.color": "#d8d8d8",
        "plotArea.gridline.size": 1,
        "plotArea.gridline.type": "line",
        "plotArea.gridline.visible": true,
        "plotArea.gridline.zeroLine.color": null,
        "plotArea.gridline.zeroLine.highlight": true,
        "plotArea.gridline.zeroLine.unhighlightAxis": true,
        "plotArea.markerRenderer": null,
        "plotArea.primaryScale.autoMaxValue": {
            "defaultValue": null,
            "readonly": true,
            "serializable": false
        },
        "plotArea.primaryScale.autoMinValue": {
            "defaultValue": null,
            "readonly": true,
            "serializable": false
        },
        "plotArea.primaryScale.fixedRange": {
            "defaultValue": false,
            "readonly": false,
            "serializable": false
        },
        "plotArea.primaryScale.maxValue": {
            "defaultValue": null,
            "readonly": false,
            "serializable": false
        },
        "plotArea.primaryScale.minValue": {
            "defaultValue": null,
            "readonly": false,
            "serializable": false
        },
        "plotArea.referenceLine.defaultStyle.color": "#666666",
        "plotArea.referenceLine.defaultStyle.label.background": "#ffffff",
        "plotArea.referenceLine.defaultStyle.label.color": "#333333",
        "plotArea.referenceLine.defaultStyle.label.fontFamily": "\"Open Sans\", Arial, Helvetica, sans-serif",
        "plotArea.referenceLine.defaultStyle.label.fontSize": "12px",
        "plotArea.referenceLine.defaultStyle.label.fontStyle": "normal",
        "plotArea.referenceLine.defaultStyle.label.fontWeight": "normal",
        "plotArea.referenceLine.defaultStyle.size": 1,
        "plotArea.referenceLine.defaultStyle.type": "dotted",
        "plotArea.referenceLine.line": null,
        "plotArea.scrollbar.thumb.fill": "#e5e5e5",
        "plotArea.scrollbar.thumb.hoverFill": "#dedede",
        "plotArea.scrollbar.track.fill": "#f7f7f7",
        "valueAxis.axisLine.size": 1,
        "valueAxis.axisLine.visible": true,
        "valueAxis.axisTick.visible": true,
        "valueAxis.color": "#6c6c6c",
        "valueAxis.label.formatString": null,
        "valueAxis.label.style.color": "#333333",
        "valueAxis.label.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "valueAxis.label.style.fontSize": "12px",
        "valueAxis.label.style.fontStyle": "normal",
        "valueAxis.label.style.fontWeight": "normal",
        "valueAxis.label.unitFormatType": "FinancialUnits",
        "valueAxis.label.visible": true,
        "valueAxis.layout.maxHeight": 0.25,
        "valueAxis.layout.maxWidth": 0.25,
        "valueAxis.title.applyAxislineColor": false,
        "valueAxis.title.style.color": "#000000",
        "valueAxis.title.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "valueAxis.title.style.fontSize": "14px",
        "valueAxis.title.style.fontStyle": "normal",
        "valueAxis.title.style.fontWeight": "bold",
        "valueAxis.title.text": null,
        "valueAxis.title.visible": false,
        "valueAxis.visible": true
    },
    "_xySimple": {
        "plotArea.isFixedDataPointSize": false
    },
    "info/100_dual_stacked_bar": {
        "legend.marker.shape": "squareWithRadius",
        "plotArea.background.gradientDirection": "horizontal",
        "plotArea.dataPointSize.max": 96,
        "plotArea.dataPointSize.min": 24,
        "tooltip.formatString": "0.00%"
    },
    "info/100_dual_stacked_column": {
        "categoryAxis.label.angle": 45,
        "categoryAxis.label.rotation": "auto",
        "categoryAxis.label.truncatedLabelRatio": 0.2,
        "legend.marker.shape": "squareWithRadius",
        "plotArea.dataPointSize.max": 96,
        "plotArea.dataPointSize.min": 24,
        "tooltip.formatString": "0.00%"
    },
    "info/100_stacked_bar": {
        "legend.marker.shape": "squareWithRadius",
        "plotArea.background.gradientDirection": "horizontal",
        "plotArea.dataPointSize.max": 96,
        "plotArea.dataPointSize.min": 24,
        "tooltip.formatString": "0.00%"
    },
    "info/100_stacked_column": {
        "categoryAxis.label.angle": 45,
        "categoryAxis.label.rotation": "auto",
        "categoryAxis.label.truncatedLabelRatio": 0.2,
        "legend.marker.shape": "squareWithRadius",
        "plotArea.dataPointSize.max": 96,
        "plotArea.dataPointSize.min": 24,
        "tooltip.formatString": "0.00%"
    },
    "info/DEFAULT": {
        "interaction.selectability.legendSelection": true,
        "legend.hoverShadow.color": "#cccccc",
        "legend.isScrollable": false,
        "legend.itemMargin": 0.5,
        "legend.marker.size": null,
        "legend.mouseDownShadow.color": "#808080",
        "legend.order": {
            "defaultValue": null,
            "readonly": false,
            "serializable": false
        },
        "plotArea.background.border.bottom.visible": null,
        "plotArea.background.border.left.visible": null,
        "plotArea.background.border.right.visible": null,
        "plotArea.background.border.top.visible": null,
        "plotArea.background.gradientDirection": null,
        "plotArea.dataPointStyle": null,
        "plotArea.defaultOthersStyle.color": "#000000",
        "plotArea.drawingEffect": "normal",
        "plotArea.markerRenderer": null,
        "plotArea.scrollbar.thumb.fill": "#e5e5e5",
        "plotArea.scrollbar.thumb.hoverFill": "#dedede",
        "plotArea.scrollbar.track.fill": "#f7f7f7"
    },
    "info/bar": {
        "legend.marker.shape": "squareWithRadius",
        "plotArea.background.gradientDirection": "horizontal",
        "plotArea.dataPointSize.max": 96,
        "plotArea.dataPointSize.min": 24
    },
    "info/bubble": {
        "plotArea.dataLabel.respectShapeWidth": false,
        "plotArea.minMarkerSize": null,
        "plotArea.primaryScale.minValue": {
            "defaultValue": null,
            "readonly": false,
            "serializable": false
        },
        "plotArea.showNegativeValues": true,
        "sizeLegend.drawingEffect": "normal",
        "sizeLegend.formatString": null,
        "sizeLegend.height": {
            "defaultValue": 0,
            "readonly": false,
            "serializable": false
        },
        "sizeLegend.label.style.color": "#000000",
        "sizeLegend.label.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "sizeLegend.label.style.fontSize": "12px",
        "sizeLegend.label.style.fontStyle": "normal",
        "sizeLegend.label.style.fontWeight": "normal",
        "sizeLegend.title.style.color": "#000000",
        "sizeLegend.title.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "sizeLegend.title.style.fontSize": "14px",
        "sizeLegend.title.style.fontStyle": "normal",
        "sizeLegend.title.style.fontWeight": "bold",
        "sizeLegend.title.text": null,
        "sizeLegend.title.visible": false,
        "sizeLegend.visible": true,
        "sizeLegend.width": {
            "defaultValue": 0,
            "readonly": false,
            "serializable": false
        },
        "valueAxis.label.unitFormatType": "FinancialUnits"
    },
    "info/bullet": {
        "plotArea.background.border.bottom.visible": false,
        "plotArea.dataPointSize.max": 96,
        "plotArea.dataPointSize.min": 24,
        "plotArea.isFixedDataPointSize": false
    },
    "info/column": {
        "categoryAxis.label.angle": 45,
        "categoryAxis.label.rotation": "auto",
        "categoryAxis.label.truncatedLabelRatio": 0.2,
        "legend.marker.shape": "squareWithRadius",
        "plotArea.dataPointSize.max": 96,
        "plotArea.dataPointSize.min": 24
    },
    "info/combination": {
        "categoryAxis.label.angle": 45,
        "categoryAxis.label.rotation": "auto",
        "categoryAxis.label.truncatedLabelRatio": 0.2,
        "legend.groupByShape": false,
        "legend.marker.shape": "squareWithRadius",
        "plotArea.dataPointSize.max": 96,
        "plotArea.dataPointSize.min": 24,
        "plotArea.dataShape.primaryAxis": [
            "bar",
            "line",
            "line"
        ],
        "plotArea.line.lineRenderer": null,
        "plotArea.line.marker.shape": "circle",
        "plotArea.line.marker.size": 6,
        "plotArea.line.marker.visible": true,
        "plotArea.line.style": null,
        "plotArea.line.visible": true,
        "plotArea.line.width": 2
    },
    "info/donut": {
        "plotArea.background.border.bottom.visible": false,
        "plotArea.background.border.left.visible": false,
        "plotArea.background.border.right.visible": false,
        "plotArea.background.border.top.visible": false
    },
    "info/dual_bar": {
        "legend.marker.shape": "squareWithRadius",
        "plotArea.background.gradientDirection": "horizontal",
        "plotArea.dataPointSize.max": 96,
        "plotArea.dataPointSize.min": 24
    },
    "info/dual_column": {
        "categoryAxis.label.angle": 45,
        "categoryAxis.label.rotation": "auto",
        "categoryAxis.label.truncatedLabelRatio": 0.2,
        "legend.marker.shape": "squareWithRadius",
        "plotArea.dataPointSize.max": 96,
        "plotArea.dataPointSize.min": 24
    },
    "info/dual_horizontal_line": {
        "plotArea.lineRenderer": null,
        "plotArea.lineStyle": null,
        "plotArea.lineVisible": true,
        "plotArea.marker.shape": "circle",
        "plotArea.marker.size": 6,
        "plotArea.marker.visible": true,
        "plotArea.width": 2
    },
    "info/dual_horizontal_stacked_combination": {
        "legend.groupByShape": false,
        "legend.marker.shape": "squareWithRadius",
        "plotArea.background.gradientDirection": "horizontal",
        "plotArea.colorPalette": {
            "defaultValue": [
                "#748CB2",
                "#9CC677",
                "#EACF5E",
                "#F9AD79",
                "#D16A7C",
                "#8873A2",
                "#3A95B3",
                "#B6D949",
                "#FDD36C",
                "#F47958",
                "#A65084",
                "#0063B1",
                "#0DA841",
                "#FCB71D",
                "#F05620",
                "#B22D6E",
                "#3C368E",
                "#8FB2CF",
                "#95D4AB",
                "#EAE98F",
                "#F9BE92",
                "#EC9A99",
                "#BC98BD",
                "#1EB7B2",
                "#73C03C",
                "#F48323",
                "#EB271B",
                "#D9B5CA",
                "#AED1DA",
                "#DFECB2",
                "#FCDAB0",
                "#F5BCB4"
            ],
            "readonly": false,
            "serializable": false
        },
        "plotArea.dataPointSize.max": 96,
        "plotArea.dataPointSize.min": 24,
        "plotArea.dataShape.primaryAxis": [
            "bar",
            "line",
            "line"
        ],
        "plotArea.dataShape.secondaryAxis": [
            "bar",
            "line",
            "line"
        ],
        "plotArea.line.lineRenderer": null,
        "plotArea.line.marker.shape": "circle",
        "plotArea.line.marker.size": 6,
        "plotArea.line.marker.visible": true,
        "plotArea.line.style": null,
        "plotArea.line.visible": true,
        "plotArea.line.width": 2,
        "valueAxis.color": "#6c6c6c",
        "valueAxis.title.applyAxislineColor": false
    },
    "info/dual_line": {
        "categoryAxis.label.angle": 45,
        "categoryAxis.label.rotation": "auto",
        "categoryAxis.label.truncatedLabelRatio": 0.2,
        "plotArea.lineRenderer": null,
        "plotArea.lineStyle": null,
        "plotArea.lineVisible": true,
        "plotArea.marker.shape": "circle",
        "plotArea.marker.size": 6,
        "plotArea.marker.visible": true,
        "plotArea.width": 2
    },
    "info/dual_stacked_bar": {
        "legend.marker.shape": "squareWithRadius",
        "plotArea.background.gradientDirection": "horizontal",
        "plotArea.dataPointSize.max": 96,
        "plotArea.dataPointSize.min": 24
    },
    "info/dual_stacked_column": {
        "categoryAxis.label.angle": 45,
        "categoryAxis.label.rotation": "auto",
        "categoryAxis.label.truncatedLabelRatio": 0.2,
        "legend.marker.shape": "squareWithRadius",
        "plotArea.dataPointSize.max": 96,
        "plotArea.dataPointSize.min": 24
    },
    "info/dual_stacked_combination": {
        "categoryAxis.label.angle": 45,
        "categoryAxis.label.rotation": "auto",
        "categoryAxis.label.truncatedLabelRatio": 0.2,
        "legend.groupByShape": false,
        "legend.marker.shape": "squareWithRadius",
        "plotArea.colorPalette": {
            "defaultValue": [
                "#748CB2",
                "#9CC677",
                "#EACF5E",
                "#F9AD79",
                "#D16A7C",
                "#8873A2",
                "#3A95B3",
                "#B6D949",
                "#FDD36C",
                "#F47958",
                "#A65084",
                "#0063B1",
                "#0DA841",
                "#FCB71D",
                "#F05620",
                "#B22D6E",
                "#3C368E",
                "#8FB2CF",
                "#95D4AB",
                "#EAE98F",
                "#F9BE92",
                "#EC9A99",
                "#BC98BD",
                "#1EB7B2",
                "#73C03C",
                "#F48323",
                "#EB271B",
                "#D9B5CA",
                "#AED1DA",
                "#DFECB2",
                "#FCDAB0",
                "#F5BCB4"
            ],
            "readonly": false,
            "serializable": false
        },
        "plotArea.dataPointSize.max": 96,
        "plotArea.dataPointSize.min": 24,
        "plotArea.dataShape.primaryAxis": [
            "bar",
            "line",
            "line"
        ],
        "plotArea.dataShape.secondaryAxis": [
            "bar",
            "line",
            "line"
        ],
        "plotArea.line.lineRenderer": null,
        "plotArea.line.marker.shape": "circle",
        "plotArea.line.marker.size": 6,
        "plotArea.line.marker.visible": true,
        "plotArea.line.style": null,
        "plotArea.line.visible": true,
        "plotArea.line.width": 2,
        "valueAxis.color": "#6c6c6c",
        "valueAxis.title.applyAxislineColor": false
    },
    "info/horizontal_combination": {
        "legend.groupByShape": false,
        "legend.marker.shape": "squareWithRadius",
        "plotArea.background.gradientDirection": "horizontal",
        "plotArea.dataPointSize.max": 96,
        "plotArea.dataPointSize.min": 24,
        "plotArea.dataShape.primaryAxis": [
            "bar",
            "line",
            "line"
        ],
        "plotArea.line.lineRenderer": null,
        "plotArea.line.marker.shape": "circle",
        "plotArea.line.marker.size": 6,
        "plotArea.line.marker.visible": true,
        "plotArea.line.style": null,
        "plotArea.line.visible": true,
        "plotArea.line.width": 2
    },
    "info/horizontal_line": {
        "plotArea.background.gradientDirection": "horizontal",
        "plotArea.lineRenderer": null,
        "plotArea.lineStyle": null,
        "plotArea.lineVisible": true,
        "plotArea.marker.shape": "circle",
        "plotArea.marker.size": 6,
        "plotArea.marker.visible": true,
        "plotArea.width": 2
    },
    "info/horizontal_stacked_combination": {
        "legend.groupByShape": false,
        "legend.marker.shape": "squareWithRadius",
        "plotArea.background.gradientDirection": "horizontal",
        "plotArea.dataPointSize.max": 96,
        "plotArea.dataPointSize.min": 24,
        "plotArea.dataShape.primaryAxis": [
            "bar",
            "line",
            "line"
        ],
        "plotArea.line.lineRenderer": null,
        "plotArea.line.marker.shape": "circle",
        "plotArea.line.marker.size": 6,
        "plotArea.line.marker.visible": true,
        "plotArea.line.style": null,
        "plotArea.line.visible": true,
        "plotArea.line.width": 2
    },
    "info/line": {
        "categoryAxis.label.angle": 45,
        "categoryAxis.label.rotation": "auto",
        "categoryAxis.label.truncatedLabelRatio": 0.2,
        "plotArea.lineRenderer": null,
        "plotArea.lineStyle": null,
        "plotArea.lineVisible": true,
        "plotArea.marker.shape": "circle",
        "plotArea.marker.size": 6,
        "plotArea.marker.visible": true,
        "plotArea.width": 2
    },
    "info/pie": {
        "plotArea.background.border.bottom.visible": false,
        "plotArea.background.border.left.visible": false,
        "plotArea.background.border.right.visible": false,
        "plotArea.background.border.top.visible": false
    },
    "info/scatter": {
        "plotArea.markerSize": 10,
        "plotArea.primaryScale.minValue": {
            "defaultValue": null,
            "readonly": false,
            "serializable": false
        },
        "valueAxis.label.unitFormatType": "FinancialUnits"
    },
    "info/stacked_bar": {
        "legend.marker.shape": "squareWithRadius",
        "plotArea.background.gradientDirection": "horizontal",
        "plotArea.dataPointSize.max": 96,
        "plotArea.dataPointSize.min": 24
    },
    "info/stacked_column": {
        "categoryAxis.label.angle": 45,
        "categoryAxis.label.rotation": "auto",
        "categoryAxis.label.truncatedLabelRatio": 0.2,
        "legend.marker.shape": "squareWithRadius",
        "plotArea.dataPointSize.max": 96,
        "plotArea.dataPointSize.min": 24
    },
    "info/stacked_combination": {
        "categoryAxis.label.angle": 45,
        "categoryAxis.label.rotation": "auto",
        "categoryAxis.label.truncatedLabelRatio": 0.2,
        "legend.groupByShape": false,
        "legend.marker.shape": "squareWithRadius",
        "plotArea.dataPointSize.max": 96,
        "plotArea.dataPointSize.min": 24,
        "plotArea.dataShape.primaryAxis": [
            "bar",
            "line",
            "line"
        ],
        "plotArea.line.lineRenderer": null,
        "plotArea.line.marker.shape": "circle",
        "plotArea.line.marker.size": 6,
        "plotArea.line.marker.visible": true,
        "plotArea.line.style": null,
        "plotArea.line.visible": true,
        "plotArea.line.width": 2
    },
    "info/time_bubble": {
        "plotArea.dataLabel.respectShapeWidth": false,
        "plotArea.minMarkerSize": null,
        "plotArea.showNegativeValues": true,
        "sizeLegend.drawingEffect": "normal",
        "sizeLegend.formatString": null,
        "sizeLegend.height": {
            "defaultValue": 0,
            "readonly": false,
            "serializable": false
        },
        "sizeLegend.label.style.color": "#000000",
        "sizeLegend.label.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "sizeLegend.label.style.fontSize": "12px",
        "sizeLegend.label.style.fontStyle": "normal",
        "sizeLegend.label.style.fontWeight": "normal",
        "sizeLegend.title.style.color": "#000000",
        "sizeLegend.title.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "sizeLegend.title.style.fontSize": "14px",
        "sizeLegend.title.style.fontStyle": "normal",
        "sizeLegend.title.style.fontWeight": "bold",
        "sizeLegend.title.text": null,
        "sizeLegend.title.visible": false,
        "sizeLegend.visible": true,
        "sizeLegend.width": {
            "defaultValue": 0,
            "readonly": false,
            "serializable": false
        },
        "valueAxis.axisTick.fixedTicks": null
    },
    "info/treemap": {
        "interaction.selectability.legendSelection": true,
        "legend.hoverShadow.color": "#cccccc",
        "legend.mouseDownShadow.color": "#808080",
        "plotArea.border.visible": true,
        "plotArea.colorPalette": {
            "defaultValue": [],
            "readonly": false,
            "serializable": false
        },
        "plotArea.dataLabel.formatString": "0.0",
        "plotArea.dataLabel.hideWhenOverlap": false,
        "plotArea.dataLabel.renderer": null,
        "plotArea.dataLabel.style.color": "white",
        "plotArea.dataLabel.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "plotArea.dataLabel.style.fontSize": "12px",
        "plotArea.dataLabel.style.fontStyle": "normal",
        "plotArea.dataLabel.style.fontWeight": "normal",
        "plotArea.dataLabel.visible": false,
        "plotArea.dimensionLabel.renderer": null,
        "plotArea.dimensionLabel.style.color": null,
        "plotArea.dimensionLabel.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "plotArea.dimensionLabel.style.fontSize": "12px",
        "plotArea.dimensionLabel.style.fontStyle": "normal",
        "plotArea.dimensionLabel.style.fontWeight": "normal",
        "plotArea.dimensionLabel.visible": true,
        "plotArea.endColor": {
            "defaultValue": "#73C03C",
            "readonly": false,
            "serializable": false
        },
        "plotArea.legendValues": {
            "defaultValue": [],
            "readonly": false,
            "serializable": false
        },
        "plotArea.startColor": {
            "defaultValue": "#C2E3A9",
            "readonly": false,
            "serializable": false
        }
    },
    "info/trellis_100_dual_stacked_bar": {
        "categoryAxis.color": "#d8d8d8",
        "columnAxis.title.applyAxislineColor": true,
        "legend.marker.shape": "squareWithRadius",
        "plotArea.background.gradientDirection": "horizontal",
        "plotArea.gridline.zeroLine.color": "#f6f6f6",
        "rowAxis.title.applyAxislineColor": true,
        "tooltip.formatString": "0.00%"
    },
    "info/trellis_100_dual_stacked_column": {
        "categoryAxis.color": "#d8d8d8",
        "columnAxis.title.applyAxislineColor": true,
        "legend.marker.shape": "squareWithRadius",
        "plotArea.gridline.zeroLine.color": "#f6f6f6",
        "rowAxis.title.applyAxislineColor": true,
        "tooltip.formatString": "0.00%"
    },
    "info/trellis_100_stacked_bar": {
        "categoryAxis.color": "#d8d8d8",
        "legend.marker.shape": "squareWithRadius",
        "plotArea.background.gradientDirection": "horizontal",
        "plotArea.gridline.zeroLine.color": "#f6f6f6",
        "tooltip.formatString": "0.00%",
        "valueAxis.color": "#d8d8d8"
    },
    "info/trellis_100_stacked_column": {
        "categoryAxis.color": "#d8d8d8",
        "legend.marker.shape": "squareWithRadius",
        "plotArea.gridline.zeroLine.color": "#f6f6f6",
        "tooltip.formatString": "0.00%",
        "valueAxis.color": "#d8d8d8"
    },
    "info/trellis_bar": {
        "categoryAxis.color": "#d8d8d8",
        "legend.marker.shape": "squareWithRadius",
        "plotArea.background.gradientDirection": "horizontal",
        "plotArea.gridline.zeroLine.color": "#f6f6f6",
        "valueAxis.color": "#d8d8d8"
    },
    "info/trellis_bubble": {
        "plotArea.dataLabel.respectShapeWidth": false,
        "plotArea.minMarkerSize": null,
        "plotArea.primaryScale.minValue": {
            "defaultValue": null,
            "readonly": false,
            "serializable": false
        },
        "plotArea.showNegativeValues": true,
        "sizeLegend.drawingEffect": "normal",
        "sizeLegend.formatString": null,
        "sizeLegend.height": {
            "defaultValue": 0,
            "readonly": false,
            "serializable": false
        },
        "sizeLegend.label.style.color": "#000000",
        "sizeLegend.label.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "sizeLegend.label.style.fontSize": "12px",
        "sizeLegend.label.style.fontStyle": "normal",
        "sizeLegend.label.style.fontWeight": "normal",
        "sizeLegend.title.style.color": "#000000",
        "sizeLegend.title.style.fontFamily": "'Open Sans', Arial, Helvetica, sans-serif",
        "sizeLegend.title.style.fontSize": "14px",
        "sizeLegend.title.style.fontStyle": "normal",
        "sizeLegend.title.style.fontWeight": "bold",
        "sizeLegend.title.text": null,
        "sizeLegend.title.visible": false,
        "sizeLegend.visible": true,
        "sizeLegend.width": {
            "defaultValue": 0,
            "readonly": false,
            "serializable": false
        },
        "valueAxis.color": "#d8d8d8",
        "valueAxis.label.unitFormatType": "FinancialUnits",
        "valueAxis2.color": "#d8d8d8"
    },
    "info/trellis_bullet": {
        "categoryAxis.color": "#d8d8d8",
        "columnAxis.title.applyAxislineColor": null,
        "plotArea.background.border.bottom.visible": null,
        "plotArea.background.border.left.visible": null,
        "plotArea.background.border.right.visible": null,
        "plotArea.background.border.top.visible": null,
        "plotArea.background.gradientDirection": null,
        "plotArea.gridline.visible": null,
        "rowAxis.title.applyAxislineColor": null
    },
    "info/trellis_column": {
        "categoryAxis.color": "#d8d8d8",
        "legend.marker.shape": "squareWithRadius",
        "plotArea.gridline.zeroLine.color": "#f6f6f6",
        "valueAxis.color": "#d8d8d8"
    },
    "info/trellis_combination": {
        "categoryAxis.color": "#d8d8d8",
        "legend.groupByShape": false,
        "legend.marker.shape": "squareWithRadius",
        "plotArea.dataShape.primaryAxis": [
            "bar",
            "line",
            "line"
        ],
        "plotArea.dataShape.secondaryAxis": [
            "line",
            "line",
            "line"
        ],
        "plotArea.gridline.zeroLine.color": "#f6f6f6",
        "plotArea.line.lineRenderer": null,
        "plotArea.line.marker.shape": "circle",
        "plotArea.line.marker.size": 6,
        "plotArea.line.marker.visible": true,
        "plotArea.line.style": null,
        "plotArea.line.visible": true,
        "plotArea.line.width": 2,
        "valueAxis.color": "#d8d8d8"
    },
    "info/trellis_donut": {
        "columnAxis.title.applyAxislineColor": null,
        "plotArea.scrollbar.thumb.fill": "#e5e5e5",
        "plotArea.scrollbar.thumb.hoverFill": "#dedede",
        "plotArea.scrollbar.track.fill": "#f7f7f7",
        "rowAxis.title.applyAxislineColor": null,
        "valueAxis.title.visible": false
    },
    "info/trellis_dual_bar": {
        "categoryAxis.color": "#d8d8d8",
        "columnAxis.title.applyAxislineColor": true,
        "legend.marker.shape": "squareWithRadius",
        "plotArea.background.gradientDirection": "horizontal",
        "plotArea.gridline.zeroLine.color": "#f6f6f6",
        "rowAxis.title.applyAxislineColor": true
    },
    "info/trellis_dual_column": {
        "categoryAxis.color": "#d8d8d8",
        "columnAxis.title.applyAxislineColor": true,
        "legend.marker.shape": "squareWithRadius",
        "plotArea.gridline.zeroLine.color": "#f6f6f6",
        "rowAxis.title.applyAxislineColor": true
    },
    "info/trellis_dual_horizontal_line": {
        "categoryAxis.color": "#d8d8d8",
        "columnAxis.title.applyAxislineColor": true,
        "plotArea.gridline.zeroLine.color": "#f6f6f6",
        "plotArea.lineRenderer": null,
        "plotArea.lineStyle": null,
        "plotArea.lineVisible": true,
        "plotArea.marker.shape": "circle",
        "plotArea.marker.size": 6,
        "plotArea.marker.visible": true,
        "plotArea.width": 2,
        "rowAxis.title.applyAxislineColor": true
    },
    "info/trellis_dual_line": {
        "categoryAxis.color": "#d8d8d8",
        "columnAxis.title.applyAxislineColor": true,
        "plotArea.gridline.zeroLine.color": "#f6f6f6",
        "plotArea.lineRenderer": null,
        "plotArea.lineStyle": null,
        "plotArea.lineVisible": true,
        "plotArea.marker.shape": "circle",
        "plotArea.marker.size": 6,
        "plotArea.marker.visible": true,
        "plotArea.width": 2,
        "rowAxis.title.applyAxislineColor": true
    },
    "info/trellis_dual_stacked_bar": {
        "categoryAxis.color": "#d8d8d8",
        "columnAxis.title.applyAxislineColor": true,
        "legend.marker.shape": "squareWithRadius",
        "plotArea.background.gradientDirection": "horizontal",
        "plotArea.gridline.zeroLine.color": "#f6f6f6",
        "rowAxis.title.applyAxislineColor": true
    },
    "info/trellis_dual_stacked_column": {
        "categoryAxis.color": "#d8d8d8",
        "columnAxis.title.applyAxislineColor": true,
        "legend.marker.shape": "squareWithRadius",
        "plotArea.gridline.zeroLine.color": "#f6f6f6",
        "rowAxis.title.applyAxislineColor": true
    },
    "info/trellis_horizontal_combination": {
        "categoryAxis.color": "#d8d8d8",
        "legend.groupByShape": false,
        "legend.marker.shape": "squareWithRadius",
        "plotArea.background.gradientDirection": "horizontal",
        "plotArea.dataShape.primaryAxis": [
            "bar",
            "line",
            "line"
        ],
        "plotArea.dataShape.secondaryAxis": [
            "line",
            "line",
            "line"
        ],
        "plotArea.gridline.zeroLine.color": "#f6f6f6",
        "plotArea.line.lineRenderer": null,
        "plotArea.line.marker.shape": "circle",
        "plotArea.line.marker.size": 6,
        "plotArea.line.marker.visible": true,
        "plotArea.line.style": null,
        "plotArea.line.visible": true,
        "plotArea.line.width": 2,
        "valueAxis.color": "#d8d8d8"
    },
    "info/trellis_horizontal_line": {
        "categoryAxis.color": "#d8d8d8",
        "plotArea.background.gradientDirection": "horizontal",
        "plotArea.gridline.zeroLine.color": "#f6f6f6",
        "plotArea.lineRenderer": null,
        "plotArea.lineStyle": null,
        "plotArea.lineVisible": true,
        "plotArea.marker.shape": "circle",
        "plotArea.marker.size": 6,
        "plotArea.marker.visible": true,
        "plotArea.width": 2,
        "valueAxis.color": "#d8d8d8"
    },
    "info/trellis_line": {
        "categoryAxis.color": "#d8d8d8",
        "plotArea.gridline.zeroLine.color": "#f6f6f6",
        "plotArea.lineRenderer": null,
        "plotArea.lineStyle": null,
        "plotArea.lineVisible": true,
        "plotArea.marker.shape": "circle",
        "plotArea.marker.size": 6,
        "plotArea.marker.visible": true,
        "plotArea.width": 2,
        "valueAxis.color": "#d8d8d8"
    },
    "info/trellis_pie": {
        "columnAxis.title.applyAxislineColor": null,
        "plotArea.scrollbar.thumb.fill": "#e5e5e5",
        "plotArea.scrollbar.thumb.hoverFill": "#dedede",
        "plotArea.scrollbar.track.fill": "#f7f7f7",
        "rowAxis.title.applyAxislineColor": null,
        "valueAxis.title.visible": false
    },
    "info/trellis_scatter": {
        "plotArea.markerSize": 10,
        "plotArea.primaryScale.minValue": {
            "defaultValue": null,
            "readonly": false,
            "serializable": false
        },
        "valueAxis.color": "#d8d8d8",
        "valueAxis.label.unitFormatType": "FinancialUnits",
        "valueAxis2.color": "#d8d8d8"
    },
    "info/trellis_stacked_bar": {
        "categoryAxis.color": "#d8d8d8",
        "legend.marker.shape": "squareWithRadius",
        "plotArea.background.gradientDirection": "horizontal",
        "plotArea.gridline.zeroLine.color": "#f6f6f6",
        "valueAxis.color": "#d8d8d8"
    },
    "info/trellis_stacked_column": {
        "categoryAxis.color": "#d8d8d8",
        "legend.marker.shape": "squareWithRadius",
        "plotArea.gridline.zeroLine.color": "#f6f6f6",
        "valueAxis.color": "#d8d8d8"
    },
    "info/trellis_vertical_bullet": {
        "categoryAxis.color": "#d8d8d8",
        "columnAxis.title.applyAxislineColor": null,
        "plotArea.background.border.bottom.visible": null,
        "plotArea.background.border.left.visible": null,
        "plotArea.background.border.right.visible": null,
        "plotArea.background.border.top.visible": null,
        "plotArea.background.gradientDirection": null,
        "plotArea.gridline.visible": null,
        "rowAxis.title.applyAxislineColor": null
    },
    "info/vertical_bullet": {
        "categoryAxis.label.angle": 45,
        "categoryAxis.label.rotation": "auto",
        "categoryAxis.label.truncatedLabelRatio": 0.2,
        "plotArea.background.border.top.visible": false,
        "plotArea.dataPointSize.max": 96,
        "plotArea.dataPointSize.min": 24,
        "plotArea.isFixedDataPointSize": false
    }
};
});
define('sap/viz/chart/metadata/properties/PropertyLoader',[
    'propertyDefs',
    'sap/viz/framework/common/util/ObjectUtils'
], function(propertyDefs, ObjectUtils){

    function extend(chartType, props, category, checker){
        if((!checker || checker(chartType)) && propertyDefs[category]){
            ObjectUtils.extend(true, props, propertyDefs[category]);
        }
        return props;
    }

    function getProperties(type){
        if(!propertyDefs[type]) {
            type = "info/DEFAULT";
        }
        var props = {};
        extend(type, props, '');
        extend(type, props, '_xy', function(type){
            return (/bar|column|line|combination/).test(type) && !(/dual/).test(type);
        });
        extend(type, props, '_xySimple', function(type){
            return (/bar|column|line|combination/).test(type) && !(/trellis/).test(type);
        });
        extend(type, props, '_dual', function(type){
            return (/dual/).test(type);
        });
        extend(type, props, '_trellis', function(type){
            return (/trellis/).test(type);
        });
        extend(type, props, '_scatter', function(type){
            return (/scatter|bubble/).test(type);
        });
        extend(type, props, '_pie', function(type){
            return (/pie|donut/).test(type);
        });
        extend(type, props, '_bullet', function(type){
            return (/bullet/).test(type);
        });
        return extend(type, props, type);
    }

    return {
        getProperties: getProperties
    };
});

define('sap/viz/chart/components/util/DataPointUtils',[
    'sap/viz/framework/common/util/SVG',
    'sap/viz/framework/common/util/DOM',
    'sap/viz/framework/common/util/Constants',
    "sap/viz/framework/common/util/DataGraphics",
    "sap/viz/framework/common/util/TypeUtils"
], function(SVG, DOM, Constants, DataGraphics, TypeUtils) {
    var CLASSDATAPOINT = Constants.CSS.CLASS.DATAPOINT,
        TAG_DATAPOINT = "g",
        SELECTOR_DATAPOINT = TAG_DATAPOINT + "." + CLASSDATAPOINT,
        CLASSDATAPOINT_DEFAULT = Constants.CSS.CLASS.DATAPOINTDEFAULT;
    var DATA_ATTR_HIGHLIGHTED = "data-highlighted";
    var DATA_ATTR_DATAID = "data-id";
    var DATA_ATTR_DATAPOINTID = "data-datapoint-id";

    var DataPoints = {
        findAll: function(parent) {
            return parent.querySelectorAll(SELECTOR_DATAPOINT);
        },
        find: function(parent, id) {
            return parent.querySelector("[" + DATA_ATTR_DATAID + "='" + id + "']");
        },
        findByDataPointIds: function(parentNode, ids){
            if(!TypeUtils.isArray(ids)){
                ids = [ids];
            }
            var results = [];
            var idMap = {};
            var nodes = parentNode.querySelectorAll(SELECTOR_DATAPOINT);
            var i, len;
            for(i = 0, len = ids.length; i < len; ++i){
                idMap[ids[i]] = 1;
            }
            for(i = 0, len = nodes.length; i < len; ++i){
                var node = nodes[i];
                if(idMap[node.getAttribute(DATA_ATTR_DATAPOINTID)]){
                    results.push(node);
                }
            }
            return results;
        },
        isDataPoint: function(node) {
            return DOM.matches(node, SELECTOR_DATAPOINT);
        },
        setDataId: function(node, dataId) {
            node.setAttribute(DATA_ATTR_DATAID, dataId);
        },
        getDataId: function(node) {
            return node.getAttribute(DATA_ATTR_DATAID);
        },
        setDataPointId: function(node, id){
            node.setAttribute(DATA_ATTR_DATAPOINTID, id);
        },
        getDataPointId: function(node){
            return node.getAttribute(DATA_ATTR_DATAPOINTID);
        },
        highlight: function(node) {
            node.setAttribute(DATA_ATTR_HIGHLIGHTED, "true");
        },
        unhighlight: function(node) {
            node.removeAttribute(DATA_ATTR_HIGHLIGHTED);
        },
        isHighlighted: function(node) {
            return node.getAttribute(DATA_ATTR_HIGHLIGHTED) === "true";
        },
        create: function(parent, dataId) {
            var dataPointNode = SVG.create(TAG_DATAPOINT, parent);
            dataPointNode.setAttribute("class", CLASSDATAPOINT + ' ' +
                CLASSDATAPOINT_DEFAULT + ' ' + Constants.CSS.CLASS.MORPHABLEDATAPOINT);
            dataPointNode.setAttribute(DATA_ATTR_DATAID, dataId);
            return dataPointNode;
        },
        setContext: function(node, data) {
            return DataGraphics.setContext(node, data);
        },
        getContext: function(node) {
            return DataGraphics.getContext(node);
        }
    };

    return DataPoints;
});

define('sap/viz/chart/components/behavior/config/SelectionUtil',[
    'sap/viz/framework/chartmodel/DataSelector',
    'sap/viz/chart/components/util/DataPointUtils'
], function(DataSelector, DataPointUtils){

    function getDataPointNodes(condition, service){
        var dataModel = service.getChartView().getData().dataModel;
        var selector = new DataSelector(condition, dataModel);
        var dpIds = selector.getDataPoints().map(function(dp){
            return dp.id;
        });
        var targets = DataPointUtils.findByDataPointIds(service.getRootNode().node(), dpIds);
        // Ensure targets is a normal array
        return [].slice.apply(targets);
    }

    return {
        getDataPointNodes: getDataPointNodes
    };
});

define('sap/viz/chart/components/behavior/config/AxisBehaviorConfig',[
    'sap/viz/framework/common/util/Constants',
    'sap/viz/framework/interaction/Constants',
    "sap/viz/framework/common/util/UADetector",
    "sap/viz/framework/common/util/ObjectUtils",
    "sap/viz/framework/common/util/DOM",
    "sap/viz/chart/components/util/DataPointUtils",
    "sap/viz/chart/components/behavior/config/SelectionUtil"
], function(Constants, SDKConstants, UADetector, ObjectUtils, DOM, DataPointUtils, SelectionUtil) {
    var BehaviorConstants = SDKConstants.BEHAVIOR;
    var axisItemPattern = "v-axis-item";
    var CSS_CLASS = Constants.CSS.CLASS;

    function isTriggerable(service) {
        var selectability = service.getProperties().get("interaction.selectability");
        var selectionMode = selectability.mode.toUpperCase();
        var axisNode = service.getRootNode().selectAll("." + CSS_CLASS.AXIS.CONTAINER);
        if (!selectability.axisLabelSelection || selectionMode === SDKConstants.SELECTION_MODE.NONE ||
            selectionMode === SDKConstants.SELECTION_MODE.SINGLE || !axisNode.node()) {
            return false;
        } else {
            return true;
        }
    }
    
    function getAxisRoot(axisItem){
        var axisRoot = axisItem; // find axis container
        while (axisRoot && axisRoot.getAttribute) {
            if (DOM.hasClass(axisRoot, CSS_CLASS.AXIS.CONTAINER)) {
                break;
            }
            axisRoot = axisRoot.parentNode;
        }
        
        return axisRoot;
    }
    
    function getAxisName(event){
        var axisItem = event.data.currentTarget;
        var axisRoot = getAxisRoot(axisItem);
        var rootCtx = DataPointUtils.getContext(axisRoot);
        if(rootCtx && rootCtx.name){
            return rootCtx.name;
        } else{
            return "categoryAxis";
        }
    }

    return [{
        "id": "hover_on_axis_label",
        "triggerEvent": {
            "name": "hover",
            "targets": axisItemPattern
        },
        "handler": function(event, service) {
            if (!isTriggerable(service)) {
                return;
            }
            service.fireEvent("cleanAxisHoverEffect");
            var axisName = getAxisName(event);
            var color = service.getProperties().get(axisName + ".hoverShadow.color");
            if (color) {
                d3.select(event.data.currentTarget).select("rect")
                    .attr("fill", color)
                    .classed(CSS_CLASS.HOVER_SHADOW, true);
            }
        }
    }, {
        "id": "hover_on_non_axis_label",
        "triggerEvent": {
            "name": "hover",
            "excludeTargets": axisItemPattern
        },
        "handler": function(event, service) {
            if (!isTriggerable(service)) {
                return;
            }
            service.fireEvent("cleanAxisHoverEffect");
        }
    }, {
        "id": "cleanAxisHoverEffect",
        "triggerEvent": {
            "name": "cleanAxisHoverEffect"
        },
        "handler": function(event, service) {
            service.getRootNode()//.selectAll("." + CSS_CLASS.AXIS.CONTAINER)
                .selectAll("." + CSS_CLASS.AXIS.BACKGROUND_RECT)
                .attr("fill", "transparent")
                .classed(CSS_CLASS.HOVER_SHADOW, false)
                .classed(CSS_CLASS.FOCUS_SHADOW, false);
        }
    }, {
        "id": "click_on_axis_label",
        "triggerEvent": {
            "name": "click",
            "targets": axisItemPattern
        },
        "handler": function(event, service) {
            if (!isTriggerable(service)) {
                return;
            }
            var axisItem = event.data.currentTarget;
            var axisRoot = getAxisRoot(axisItem); // find axis container

            var ctx1 = ObjectUtils.extendByRepalceArray({}, DataPointUtils.getContext(axisItem).ctx);
            if (axisRoot) {
                //special handling for trellis chart: attach axis container's context if available
                var rootCtx = DataPointUtils.getContext(axisRoot);
                if (rootCtx) {
                    ObjectUtils.extendByRepalceArray(ctx1, rootCtx.ctx);
                }
            }

            var targets = SelectionUtil.getDataPointNodes(ctx1, service);

            service.fireEvent("processSelection", {
                targets: targets,
                deselectable: true,
                ctrlKeyPressed: event.data.ctrlKey
            });
            service.fireEvent("processMultipleSelectionTooltip", {
                targets: targets,
                point: event.data.point
            });
        }
    }, {
        "id": "down_on_axis_label",
        "triggerEvent": {
            "name": "down",
            "targets": axisItemPattern
        },
        "handler": function(event, service) {
            if (!isTriggerable(service)) {
                return;
            }
            service.getRootNode().selectAll("." + CSS_CLASS.AXIS.CONTAINER)
                .selectAll("." + CSS_CLASS.AXIS.BACKGROUND_RECT)
                .attr("fill", "transparent")
                .classed(CSS_CLASS.HOVER_SHADOW, false);
            var axisName = getAxisName(event);
            var color = service.getProperties().get(axisName+".mouseDownShadow.color");
            if (color) {
                d3.select(event.data.currentTarget).select("rect")
                    .attr("fill", color)
                    .classed(CSS_CLASS.FOCUS_SHADOW, true);
            }
        }
    }, {
        "id": "up_on_axis_label",
        "triggerEvent": {
            "name": "up",
            "targets": axisItemPattern
        },
        "handler": function(event, service) {
            if (!isTriggerable(service)) {
                return;
            }
            var axisNode = service.getRootNode().selectAll("." + CSS_CLASS.AXIS.CONTAINER);
            axisNode.selectAll("." + CSS_CLASS.AXIS.BACKGROUND_RECT)
                .attr("fill", "transparent")
                .classed(CSS_CLASS.FOCUS_SHADOW, false);

            if (UADetector.isMobile()) {
                axisNode.selectAll("." + CSS_CLASS.AXIS.BACKGROUND_RECT)
                    .classed(CSS_CLASS.HOVER_SHADOW, false);
            } else {
                var axisName = getAxisName(event);
                var color = service.getProperties().get(axisName + ".hoverShadow.color");
                if (color) {
                    d3.select(event.data.currentTarget).select("rect")
                        .attr("fill", color)
                        .classed(CSS_CLASS.HOVER_SHADOW, true);
                }
            }
        }
    }];

});

define('sap/viz/chart/components/behavior/config/HighlightHelper',[
    "sap/viz/chart/components/util/DrawUtil",
    "sap/viz/framework/common/util/DataGraphics",
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/chart/components/util/DataPointUtils",
    "sap/viz/framework/common/util/RuleUtil"
], function(DrawUtil, DataGraphics, TypeUtils, DataPointUtils, RuleUtil) {

    function transformColor(effectMgr, colorString, ratio) {
        return DrawUtil.rgb2Hex(DrawUtil.colorLinerTransform(effectMgr, {
            constant: 0,
            factor: ratio ? ratio : 1
        }, colorString));
    }

    function matchCtx(targetCtx, ctx) {
        var isMatch = true;
        for (var key in targetCtx) {
            if (targetCtx.hasOwnProperty(key)) {
                if (!ctx.hasOwnProperty(key) || ctx[key] !== targetCtx[key]) {
                    isMatch = false;
                    break;
                }
            }
        }
        return isMatch;
    }

    function matchSemanticCtx(targetCtx, ctx) {

        if (!targetCtx.isSemanticContext) {
            return false;
        }

        // bubble & scatter
        if (targetCtx.additionalRule && RuleUtil.matchCondition(ctx, targetCtx.additionalRule) === false) {
            return false;
        }

        var rules = targetCtx.rule;

        if (targetCtx.isOther === true) {
            for (var index = 0; index < rules.length; index++) {
                if (RuleUtil.matchCondition(ctx, rules[index])) {
                    return false;
                }
            }
            return true;
        } else {
            return RuleUtil.matchCondition(ctx, rules);
        }
    }

    function matchContext(targetCtx, ctx) {
        return matchSemanticCtx(targetCtx, ctx) || matchCtx(targetCtx, ctx);
    }

    function turnToArray(elem) {
        return TypeUtils.isArray(elem) ? elem : [elem];
    }

    function findDataPointByContext(ctx, allDataPoints) {
        for (var i = 0, len = allDataPoints.length; i < len; i++) {
            if (helper.matchCtx(ctx, DataPointUtils.getContext(allDataPoints[i]))) {
                return allDataPoints[i];
            }
        }
        return null;
    }

    var helper = {
        transformColor: transformColor,
        matchCtx: matchContext,
        turnToArray: turnToArray,
        findDataPointByContext: findDataPointByContext
    };

    return helper;
});
define('sap/viz/chart/components/behavior/config/ContextualDataConfig',[
    "sap/viz/framework/common/util/Constants",
    'sap/viz/framework/interaction/Constants',
    "sap/viz/framework/common/util/UADetector",
    "sap/viz/framework/common/util/ObjectUtils",
    "sap/viz/framework/common/util/DOM",
    "sap/viz/framework/common/util/DataGraphics",
    "sap/viz/chart/components/util/DataPointUtils",
    "sap/viz/chart/components/behavior/config/HighlightHelper",
    "sap/viz/chart/components/behavior/config/SelectionUtil"
], function(Constants, SDKConstants, UADetector, ObjectUtils, DOM, DataGraphics,
    DataPointUtils, HighlightHelper, SelectionUtil) {

    var BehaviorConstants = SDKConstants.BEHAVIOR;
    var axisLabelPattern = "v-axis-item",
        valueAxisPattern = "v-m-valueAxis",
        valueAxis2Pattern = "v-m-valueAxis2",
        categoryAxisPattern = "v-m-categoryAxis";
    var legendPattern = "v-m-legend",
        sizeLegendPattern = "v-m-sizeLegend";
    var titlePattern = "v-m-title";
    var dataPointPattern = "v-datapoint",
        dataLabelPattern = "v-datalabel";
    var plotPattern = "v-m-plot",
        plotBoundPattern = "v-m-plot-bound";
    var backgroundPattern = "v-m-background",
        subtitlePattern = "v-subtitle";

    var CSS_CLASS = Constants.CSS.CLASS;

    function fireContextualDataEvent(shapes, type, event) {
        var selectData = [];
        for (var i = 0, len = shapes.length; i < len; i++) {
            selectData.push({
                target: shapes[i],
                data: DataGraphics.getContext(shapes[i])
            });
        }
        this.dispatchEvent("contextualData", {
            name: Constants.Event.ContextualData.name,
            type: type,
            data: selectData,
            point: event.data.point
        });
    }

    return [{
        "id": "right_click_on_axis",
        "declaredEvents": "contextualData",
        "triggerEvent": {
            "name": "contextmenu",
            "targets": [valueAxisPattern, valueAxis2Pattern, categoryAxisPattern],
            "excludeTargets": axisLabelPattern
        },
        "handler": function(event, service) {
            var type;
            if (DOM.hasClass(event.data.currentTarget, 'v-m-valueAxis')) {
                type = 'valueAxis';
            } else if (DOM.hasClass(event.data.currentTarget, 'v-m-valueAxis2')) {
                type = 'valueAxis2';
            } else if (DOM.hasClass(event.data.currentTarget, 'v-m-categoryAxis')) {
                type = 'categoryAxis';
            }
            fireContextualDataEvent.call(this, [], type, event);
        }
    }, {
        "id": "right_click_on_axis_label",
        "declaredEvents": "contextualData",
        "triggerEvent": {
            "name": "contextmenu",
            "targets": axisLabelPattern
        },
        "handler": function(event, service) {
            var axisItem = event.data.currentTarget;

            var axisRoot = axisItem; // find axis container
            while (axisRoot && axisRoot.getAttribute) {
                if (DOM.hasClass(axisRoot, CSS_CLASS.AXIS.CONTAINER)) {
                    break;
                }
                axisRoot = axisRoot.parentNode;
            }
            var ctx1 = ObjectUtils.extendByRepalceArray({}, DataPointUtils.getContext(
                axisItem).ctx);
            if (axisRoot) {
                // special handling for trellis chart: attach axis container's
                // context if available
                var rootCtx = DataPointUtils.getContext(axisRoot);
                if (rootCtx) {
                    ObjectUtils.extendByRepalceArray(ctx1, rootCtx.ctx);
                }
            }

            var targets = SelectionUtil.getDataPointNodes(ctx1, service);
            fireContextualDataEvent.call(this, targets, 'axisLabel', event);
        }
    }, {
        "id": "right_click_on_axis_label_treemap",
        "declaredEvents": "contextualData",
        "triggerEvent": {
            "name": "contextmenu",
            "targets": axisLabelPattern,
            "supportedChartTypes": "info/treemap"
        },
        "handler": function (event, service) {
            var axisItem = event.data.currentTarget;
            var ctx1 = DataPointUtils.getContext(axisItem);
            var targets = SelectionUtil.getDataPointNodes(ctx1, service);
            fireContextualDataEvent.call(this, targets, 'axisLabel', event);
        }
    }, {
        "id": "right_click_on_legend",
        "declaredEvents": "contextualData",
        "triggerEvent": {
            "name": "contextmenu",
            "targets": [legendPattern, sizeLegendPattern]
        },
        "handler": function(event, service) {
            fireContextualDataEvent.call(this, [], 'legend', event);
        }
    }, {
        "id": "right_click_on_title",
        "declaredEvents": "contextualData",
        "triggerEvent": {
            "name": "contextmenu",
            "targets": titlePattern
        },
        "handler": function(event, service) {
            fireContextualDataEvent.call(this, [], 'title', event);
        }
    }, {
        "id": "right_click_on_chartarea",
        "declaredEvents": "contextualData",
        "triggerEvent": {
            "name": "contextmenu",
            "targets": [backgroundPattern, subtitlePattern]
        },
        "handler": function(event, service) {
            fireContextualDataEvent.call(this, [], 'chartArea', event);
        }
    }, {
        "id": "right_click_on_datapoint",
        "declaredEvents": "contextualData",
        "triggerEvent": {
            "name": "contextmenu",
            "targets": [dataPointPattern, dataLabelPattern]
        },
        "handler": function(event, service) {
            var targets = event.data.currentTarget;
            targets = HighlightHelper.turnToArray(targets);
            fireContextualDataEvent.call(this, targets, 'datapoint', event);
        }
    }, {
        "id": "right_click_on_plot",
        "declaredEvents": "contextualData",
        "triggerEvent": {
            "name": "contextmenu",
            "targets": [plotPattern, plotBoundPattern],
            "excludeTargets": [dataPointPattern, dataLabelPattern, axisLabelPattern]
        },
        "handler": function(event, service) {
            fireContextualDataEvent.call(this, [], 'plot', event);
        }
    }];
});

define('sap/viz/chart/components/behavior/config/AxisBehaviorConfigForTreeMap',[
    'sap/viz/framework/common/util/Constants',
    'sap/viz/framework/interaction/Constants',
    "sap/viz/framework/common/util/UADetector",
    "sap/viz/framework/common/util/ObjectUtils",
    "sap/viz/framework/common/util/DOM",
    "sap/viz/chart/components/util/DataPointUtils",
    "sap/viz/chart/components/behavior/config/SelectionUtil"
], function (Constants, SDKConstants, UADetector, ObjectUtils, DOM, DataPointUtils, SelectionUtil) {
    var BehaviorConstants = SDKConstants.BEHAVIOR,
        axisItemPattern = "v-axis-item",
        nonLeafDimensionLabel = "v-nonLeafDimensionLabel",
        CSS_CLASS = Constants.CSS.CLASS,
        treeType = "info/treemap",
        treeItemClass = "v-treemapitem",
        HOVER_SHADOW_COLOR = "#cccccc",
        HOVER_SHADOW_MOUSE_DOWN_COLOR = "#808080";

    function isTriggerable(service) {
        var selectability = service.getProperties().get("interaction.selectability");
        var selectionMode = selectability.mode.toUpperCase();
        var axisNode = service.getRootNode().selectAll("." + treeItemClass);
        if (!selectability.axisLabelSelection || selectionMode === SDKConstants.SELECTION_MODE.NONE ||
            selectionMode === SDKConstants.SELECTION_MODE.SINGLE || !axisNode.node()) {
            return false;
        } else {
            return true;
        }
    }

    return [{
        "id": "hover_on_axis_label_treemap",
        "triggerEvent": {
            "name": "hover",
            "targets": axisItemPattern,
            "supportedChartTypes": treeType
        },
        "handler": function (event, service) {
            if (!isTriggerable(service)) {
                return;
            }
            service.fireEvent("cleanAxisHoverEffect");
            d3.select(event.data.currentTarget).attr("fill", HOVER_SHADOW_COLOR).attr("opacity", 1)
                .classed(CSS_CLASS.HOVER_SHADOW, true);
        }
    }, {
        "id": "hover_on_non_axis_label_treemap",
        "triggerEvent": {
            "name": "hover",
            "excludeTargets": axisItemPattern,
            "supportedChartTypes": treeType
        },
        "handler": function (event, service) {
            if (!isTriggerable(service)) {
                return;
            }
            service.fireEvent("cleanAxisHoverEffect");
        }
    }, {
        "id": "hover_on_non_leaf_dimension_label_treemap",
        "triggerEvent": {
            "name": "hover",
            "targets": nonLeafDimensionLabel,
            "supportedChartTypes": treeType
        },
        "handler": function (event, service) {
            if (!isTriggerable(service)) {
                return;
            }
            service.fireEvent("cleanAxisHoverEffect");
            d3.select(event.data.currentTarget.previousElementSibling)
                .attr("fill", HOVER_SHADOW_COLOR).attr("opacity", 1)
                .classed(CSS_CLASS.HOVER_SHADOW, true);
        }
    },{
        "id": "click_on_non_leaf_dimension_label_treemap",
        "triggerEvent": {
            "name": "click",
            "targets": nonLeafDimensionLabel,
            "supportedChartTypes": treeType
        },
        "handler": function (event, service) {
            if (!isTriggerable(service)) {
                return;
            }
            var ctx1 = DataPointUtils.getContext(event.data.currentTarget.previousElementSibling);
            // level is required for design-time behavior, however it will block selection
            ctx1 = ObjectUtils.extend({}, ctx1);
            delete ctx1.level;
            delete ctx1.levelNum;

            var targets = SelectionUtil.getDataPointNodes(ctx1, service);
            service.fireEvent("processSelection", {
                targets: targets,
                deselectable: true,
                ctrlKeyPressed: event.data.ctrlKey
            });
            service.fireEvent("processMultipleSelectionTooltip", {
                targets: targets,
                point: event.data.point
            });
        }
    },{
        "id": "cleanAxisHoverEffect_treemap",
        "triggerEvent": {
            "name": "cleanAxisHoverEffect",
            "supportedChartTypes": treeType
        },
        "handler": function (event, service) {
            service.getRootNode().selectAll("." + axisItemPattern)
                .attr("opacity", "0")
                .classed(CSS_CLASS.HOVER_SHADOW, false)
                .classed(CSS_CLASS.FOCUS_SHADOW, false);
        }
    }, {
        "id": "click_on_axis_label_treemap",
        "triggerEvent": {
            "name": "click",
            "targets": axisItemPattern,
            "supportedChartTypes": treeType
        },
        "handler": function (event, service) {
            if (!isTriggerable(service)) {
                return;
            }
            var ctx1 = DataPointUtils.getContext(event.data.currentTarget);
            // level is required for design-time behavior, however it will block selection
            ctx1 = ObjectUtils.extend({}, ctx1);
            delete ctx1.level;
            delete ctx1.levelNum;

            var targets = SelectionUtil.getDataPointNodes(ctx1, service);
            service.fireEvent("processSelection", {
                targets: targets,
                deselectable: true,
                ctrlKeyPressed: event.data.ctrlKey
            });
            service.fireEvent("processMultipleSelectionTooltip", {
                targets: targets,
                point: event.data.point
            });
        }
    }, {
        "id": "down_on_axis_label_treemap",
        "triggerEvent": {
            "name": "down",
            "targets": axisItemPattern,
            "supportedChartTypes": treeType
        },
        "handler": function (event, service) {
            if (!isTriggerable(service)) {
                return;
            }
            
            d3.select(event.data.currentTarget).attr("fill", HOVER_SHADOW_MOUSE_DOWN_COLOR)
                .attr("opacity", 1)
                .classed(CSS_CLASS.FOCUS_SHADOW, true).classed(CSS_CLASS.HOVER_SHADOW, false);
        }
    }, {
        "id": "down_on_non_leaf_dimension_label_treemap",
        "triggerEvent": {
            "name": "down",
            "targets": nonLeafDimensionLabel,
            "supportedChartTypes": treeType
        },
        "handler": function (event, service) {
            if (!isTriggerable(service)) {
                return;
            }
            
            d3.select(event.data.currentTarget.previousElementSibling).attr("fill", HOVER_SHADOW_MOUSE_DOWN_COLOR)
                .attr("opacity", 1)
                .classed(CSS_CLASS.FOCUS_SHADOW, true).classed(CSS_CLASS.HOVER_SHADOW, false);            
        }
    }, {
        "id": "up_on_axis_label_treemap",
        "triggerEvent": {
            "name": "up",
            "targets": axisItemPattern,
            "supportedChartTypes": treeType
        },
        "handler": function (event, service) {
            if (!isTriggerable(service)) {
                return;
            }
            if(UADetector.isMobile()){
                d3.select(event.data.currentTarget).attr("fill", HOVER_SHADOW_COLOR)
                    .attr("opacity", 0)
                    .classed(CSS_CLASS.HOVER_SHADOW, true).classed(CSS_CLASS.FOCUS_SHADOW, false);
            }else{
                d3.select(event.data.currentTarget).attr("fill", HOVER_SHADOW_COLOR)
                    .attr("opacity", 1)
                    .classed(CSS_CLASS.HOVER_SHADOW, true).classed(CSS_CLASS.FOCUS_SHADOW, false);
            }

        }
    }, {
        "id": "up_on_non_leaf_dimension_label_treemap",
        "triggerEvent": {
            "name": "up",
            "targets": nonLeafDimensionLabel,
            "supportedChartTypes": treeType
        },
        "handler": function (event, service) {
            if (!isTriggerable(service)) {
                return;
            }
            if(UADetector.isMobile()){
                d3.select(event.data.currentTarget.previousElementSibling).attr("fill", HOVER_SHADOW_COLOR)
                    .attr("opacity", 0)
                    .classed(CSS_CLASS.HOVER_SHADOW, true).classed(CSS_CLASS.FOCUS_SHADOW, false);
            }else{
                d3.select(event.data.currentTarget.previousElementSibling).attr("fill", HOVER_SHADOW_COLOR)
                .attr("opacity", 1)
                .classed(CSS_CLASS.HOVER_SHADOW, true).classed(CSS_CLASS.FOCUS_SHADOW, false);
            }
        }
    }];

});

define('sap/viz/chart/components/behavior/config/LegendBehaviorConfig',[
    'sap/viz/framework/common/util/Constants',
    'sap/viz/framework/interaction/Constants',
    "sap/viz/framework/common/util/UADetector",
    "sap/viz/chart/components/util/DataPointUtils",
    "sap/viz/chart/components/behavior/config/SelectionUtil"
], function(Constants, SDKConstants, UADetector, DataPoints, SelectionUtil) {
    var BehaviorConstants = SDKConstants.BEHAVIOR;
    var CLASS_LEGEND_ITEM = "v-legend-item";
    var legendItemPattern = CLASS_LEGEND_ITEM;
    var CSS_CLASS = Constants.CSS.CLASS;

    function isTriggerable(service) {
        var selectability = service.getProperties().get("interaction.selectability");
        var selectionMode = selectability.mode.toUpperCase();
        var legendNode = service.getRootNode().selectAll("." + CLASS_LEGEND_ITEM);
        if (!selectability.legendSelection || selectionMode === SDKConstants.SELECTION_MODE.NONE ||
            selectionMode === SDKConstants.SELECTION_MODE.SINGLE || !legendNode.node()) {
            return false;
        } else {
            return true;
        }
    }

    return [
        {
            "id": "panstart_on_legend",
            "triggerEvent": {
                "name": "dragstart",
                "targets": legendItemPattern
            },
            "handler": function(event, service) {
                var module = service.getModule('legendGroup.legend');
                if (module && module.panStart) {
                    module.panStart(event.data.point);
                }
                service.fireEvent("hideDetail", {
                    mode: "infoMode"
                }).fireEvent("hideDetail", {
                    mode: "actionMode"
                });
            }
        }, {
            "id": "panmove_on_legend",
            "triggerEvent": {
                "name": "dragmove",
                "targets": legendItemPattern
            },
            "handler": function(event, service) {
                var module = service.getModule('legendGroup.legend');
                if (module && module.panMove) {
                    module.panMove(event.data.point);
                }
            }
        }, {
            "id": "panend_on_legend",
            "triggerEvent": {
                "name": "dragend",
                "targets": legendItemPattern
            },
            "handler": function(event, service) {
                var module = service.getModule('legendGroup.legend');
                if (module && module.panEnd) {
                    module.panEnd(event.data.point);
                }
            }
        },
        {
            "id": "hover_on_legend_label",
            "triggerEvent": {
                "name": "hover",
                "targets": legendItemPattern
            },
            "handler": function(event, service) {
                if (!isTriggerable(service)) {
                    return;
                }
                service.fireEvent("cleanLegendHoverEffect");
                d3.select(event.data.currentTarget)
                    .select("rect")
                    .attr("fill", service.getProperties().get("legend.hoverShadow.color"))
                    .classed(CSS_CLASS.HOVER_SHADOW, true);
            }
        }, {
            "id": "hover_on_non_legend_label",
            "triggerEvent": {
                "name": "hover",
                "excludeTargets": legendItemPattern
            },
            "handler": function(event, service) {
                if (!isTriggerable(service)) {
                    return;
                }
                service.fireEvent("cleanLegendHoverEffect");
            }
        }, {
            "id": "cleanLegendHoverEffect",
            "triggerEvent": {
                "name": "cleanLegendHoverEffect"
            },
            "handler": function(event, service) {
                service.getRootNode().selectAll("." + CLASS_LEGEND_ITEM)
                    .selectAll("rect")
                    .attr("fill", "transparent")
                    .classed(CSS_CLASS.HOVER_SHADOW, false)
                    .classed(CSS_CLASS.FOCUS_SHADOW, false);
            }
        }, {
            "id": "click_on_legend_label",
            "triggerEvent": {
                "name": "click",
                "targets": legendItemPattern
            },
            "handler": function(event, service) {
                if (!isTriggerable(service)) {
                    return;
                }
                var ctx1 = DataPoints.getContext(event.data.currentTarget).ctx;
                var targets = SelectionUtil.getDataPointNodes(ctx1, service);
                service.fireEvent("processSelection", {
                    targets: targets,
                    deselectable: true,
                    ctrlKeyPressed: event.data.ctrlKey
                });
                service.fireEvent("processMultipleSelectionTooltip", {
                    targets: targets,
                    point: event.data.point,
                    isAnchored: true
                });
            }
        }, {
            "id": "down_on_legend_label",
            "triggerEvent": {
                "name": "down",
                "targets": legendItemPattern
            },
            "handler": function(event, service) {
                if (!isTriggerable(service)) {
                    return;
                }
                service.getRootNode().selectAll("." + CLASS_LEGEND_ITEM)
                    .selectAll("rect")
                    .attr("fill", "transparent")
                    .classed(CSS_CLASS.HOVER_SHADOW, false);
                d3.select(event.data.currentTarget).select("rect")
                    .attr("fill", service.getProperties().get("legend.mouseDownShadow.color"))
                    .classed(CSS_CLASS.FOCUS_SHADOW, true);
            }
        }, {
            "id": "up_on_legend_label",
            "triggerEvent": {
                "name": "up",
                "targets": legendItemPattern
            },
            "handler": function(event, service) {
                if (!isTriggerable(service)) {
                    return;
                }
                var legendNode = service.getRootNode().selectAll("." + CLASS_LEGEND_ITEM);
                legendNode.selectAll("rect")
                    .attr("fill", "transparent")
                    .classed(CSS_CLASS.FOCUS_SHADOW, false);

                if (UADetector.isMobile()) {
                    legendNode.selectAll("rect")
                        .classed(CSS_CLASS.HOVER_SHADOW, false);
                } else {
                    d3.select(event.data.currentTarget).select("rect")
                        .attr("fill", service.getProperties().get("legend.hoverShadow.color"))
                        .classed(CSS_CLASS.HOVER_SHADOW, true);
                }
            }
        }
    ];
});

define('sap/viz/chart/components/behavior/config/MBCLegendBehaviorConfig',[
    'sap/viz/framework/common/util/Constants',
    'sap/viz/framework/interaction/Constants',
    "sap/viz/framework/common/util/UADetector",
    "sap/viz/framework/common/util/ObjectUtils",
    "sap/viz/framework/common/util/DOM",
    "sap/viz/chart/components/util/DataPointUtils",
    "sap/viz/chart/components/behavior/config/SelectionUtil"
], function(Constants, SDKConstants, UADetector, ObjectUtils, DOM, DataPoints, SelectionUtil) {
    var BehaviorConstants = SDKConstants.BEHAVIOR,
        mbcItemPattern = "v-mbc-legend-item",
        CSS_CLASS = Constants.CSS.CLASS,
        HOVER_SHADOW_COLOR = "#cccccc",
        HOVER_SHADOW_MOUSE_DOWN_COLOR = "#808080";

    function isTriggerable(service) {
        var selectability = service.getProperties().get("interaction.selectability");
        var selectionMode = selectability.mode.toUpperCase();
        var legendNode = service.getRootNode().selectAll("." + mbcItemPattern);
        if (!selectability.legendSelection || selectionMode === SDKConstants.SELECTION_MODE.NONE ||
            selectionMode === SDKConstants.SELECTION_MODE.SINGLE || !legendNode.node()) {
            return false;
        } else {
            return true;
        }
    }

    function getColorProperty(service, propertyName, defaultValue) {
        var prop = service.getProperties().get(propertyName);
        var color;
        if (prop && prop.color) {
            color = prop.color;
        } else {
            color = defaultValue;
        }
        return color;
    }

    return [{
        "id": "hover_on_mbc_legend_label",
        "triggerEvent": {
            "name": "hover",
            "targets": mbcItemPattern
        },
        "handler": function(event, service) {
            if (!isTriggerable(service)) {
                return;
            }
            service.fireEvent("cleanMBCHoverEffect");
            var shadowColor = getColorProperty(service, "legend.hoverShadow", HOVER_SHADOW_COLOR);
            d3.select(event.data.currentTarget).attr("stroke", shadowColor).attr("stroke-width", 3)
                .classed(CSS_CLASS.HOVER_SHADOW, true);
        }
    }, {
        "id": "hover_on_non_mbc_legend_label",
        "triggerEvent": {
            "name": "hover",
            "excludeTargets": mbcItemPattern
        },
        "handler": function(event, service) {
            if (!isTriggerable(service)) {
                return;
            }
            service.fireEvent("cleanMBCHoverEffect");
        }
    }, {
        "id": "cleanMBCHoverEffect",
        "triggerEvent": {
            "name": "cleanMBCHoverEffect",
            "excludeTargets": mbcItemPattern
        },
        "handler": function(event, service) {
            service.getRootNode().selectAll("." + mbcItemPattern)
                .classed(CSS_CLASS.HOVER_SHADOW, false)
                .classed(CSS_CLASS.FOCUS_SHADOW, false)
                .attr("stroke-width", 0);
        }
    }, {
        "id": "click_on_mbc_legend_label",
        "triggerEvent": {
            "name": "click",
            "targets": mbcItemPattern
        },
        "handler": function(event, service) {
            if (!isTriggerable(service)) {
                return;
            }
            var context = ObjectUtils.extend({}, DataPoints.getContext(event.data.currentTarget).ctx);
            delete context.measureName;
            var targets = SelectionUtil.getDataPointNodes(context, service);
            service.fireEvent("processSelection", {
                targets: targets,
                deselectable: true,
                ctrlKeyPressed: event.data.ctrlKey
            });
            service.fireEvent("processMultipleSelectionTooltip", {
                targets: targets,
                point: event.data.point,
                isAnchored: true
            });
        }
    }, {
        "id": "mouse_down_on_mbc_legend",
        "triggerEvent": {
            "name": "down",
            "targets": mbcItemPattern
        },
        "handler": function(event, service) {
            if (!isTriggerable(service)) {
                return;
            }
            var shadowColor = getColorProperty(service, "legend.mouseDownShadow", HOVER_SHADOW_MOUSE_DOWN_COLOR);
            d3.select(event.data.currentTarget).attr("stroke", shadowColor).attr("stroke-width", 3)
                .classed(CSS_CLASS.FOCUS_SHADOW, true);
        }
    }, {
        "id": "mouse_up_on_mbc_legend",
        "triggerEvent": {
            "name": "up",
            "targets": mbcItemPattern
        },
        "handler": function(event, service) {
            if (!isTriggerable(service)) {
                return;
            }
            var shadowColor = getColorProperty(service, "legend.hoverShadow", HOVER_SHADOW_COLOR);
            if (UADetector.isMobile()) {
                d3.select(event.data.currentTarget).attr("stroke", null).attr("stroke-width", null)
                    .classed(CSS_CLASS.FOCUS_SHADOW, false);
            }else{
                d3.select(event.data.currentTarget).attr("stroke", shadowColor).attr("stroke-width", 3)
                    .classed(CSS_CLASS.FOCUS_SHADOW, false);
            }

        }
    }];

});

define('sap/viz/chart/components/behavior/config/LassoDecoration',['sap/viz/framework/common/util/UADetector'], function(UADetector) {
    var LassoDecoration = function(parent) {
        this._shape = null;
        this._shapeContainer = null; //if parent is div
        this._startPoint = null;
    };

    LassoDecoration.prototype.start = function(parent, point) {
        if (this._shape) {
            this._shape.remove();
            if (this._shapeContainer) {
                this._shapeContainer.remove();
            }
        }
        var dParent = d3.select(parent);
        if (parent.tagName === 'DIV') { //for trellis charts
            dParent = this._shapeContainer = dParent.append('svg')
                .style("position", "absolute")
                .style("left", "0px")
                .style("top", "0px")
                .style("width", dParent.style("width"))
                .style("height", dParent.style("height"));
        }
        this._shape = dParent.append('rect')
            .attr('x', 0)
            .attr('y', 0)
            .attr('width', 0)
            .attr('height', 0)
            .attr('pointer-events', 'none')
            .attr('fill', 'rgba(64,176,240, 0.4)')
            .style('stroke-width', '2px')
            .attr('stroke', 'rgb(64, 176, 240)');
        this._startPoint = convertPointToParentCoordination(parent, point);
        this._shape.attr('x', this._startPoint.x).attr('y', this._startPoint.y);
    };

    function convertPointToParentCoordination(parent, point) {
        if (UADetector.isFirefox()) {
            parent = parent.querySelector('.v-m-background');
        }
        var rect = parent.getBoundingClientRect();
        var x = point.x - rect.left;
        var y = point.y - rect.top;
        return {
            'x': x,
            'y': y
        };
    }

    LassoDecoration.prototype.moveTo = function(parent, point) {
        if (this._startPoint && this._shape) {
            var startPoint = this._startPoint;
            var convertedPoint = convertPointToParentCoordination(parent, point);
            var x = Math.min(convertedPoint.x, startPoint.x);
            var y = Math.min(convertedPoint.y, startPoint.y);
            var w = Math.abs(convertedPoint.x - startPoint.x);
            var h = Math.abs(convertedPoint.y - startPoint.y);
            this._shape.attr('x', x).attr('y', y).attr('width', w).attr('height', h);
        }
    };

    LassoDecoration.prototype.end = function(parent, point) {
        this._shape.remove();
        if (this._shapeContainer) {
            this._shapeContainer.remove();
        }
    };

    LassoDecoration.prototype.getNode = function() {
        return this._shape.node();
    };

    LassoDecoration.prototype.destroy = function() {
        this._shape = null;
        this._startPoint = null;
    };

    return LassoDecoration;
});
define('sap/viz/chart/components/util/BoundingBoxUtils',[],

    function Setup() {
        var boundingbox = {};

        // return true if the two boxes intersect
        boundingbox.intersects = function(a, b) {
            return (a.x <= (b.x + b.width) &&
                b.x <= (a.x + a.width) &&
                a.y <= (b.y + b.height) &&
                b.y <= (a.y + a.height));
        };

        // returns a box representing the intersection of box1 and box2 if it exists, otherwise null
        boundingbox.intersection = function(box1, box2) {
            if (boundingbox.intersects(box1, box2)) {
                var x1 = Math.max(box1.x, box2.x),
                    x2 = Math.min(box1.x + box1.width, box2.x + box2.width),
                    y1 = Math.max(box1.y, box2.y),
                    y2 = Math.min(box1.y + box1.height, box2.y + box2.height);

                return {
                    x: x1,
                    y: y1,
                    width: x2 - x1,
                    height: y2 - y1
                };
            }

            return null;
        };

        boundingbox.contains = function(box, point) {
            /*jshint laxbreak:true*/
            return point.x >= box.x && point.x <= (box.x + box.width) && point.y >= box.y &&
                point.y <= (box.y + box.height);
        };

        return boundingbox;
    });

define('sap/viz/chart/components/behavior/config/LassoBehaviorConfig',[
    "sap/viz/framework/interaction/Constants",
    "sap/viz/chart/components/behavior/config/LassoDecoration",
    "sap/viz/chart/components/util/DataPointUtils",
    "sap/viz/chart/components/util/BoundingBoxUtils",
    "sap/viz/framework/common/util/DOM"
], function(Constants, LassoDecoration, DataPoints, BoundingBox, DOM) {

    var eventLayerPattern = "v-m-root";

    function getBoundingBox(node) {
        var rect = node.getBoundingClientRect();
        return {
            x: rect.left,
            y: rect.top,
            height: rect.height,
            width: rect.width
        };
    }

    function findLassoCoveredDataPoints(lassoDecorationNode, rootNode) {
        // find the intersection of the plot rectangle with the lasso rectangle
        var lassoBBox = getBoundingBox(lassoDecorationNode);
        var res = [];
        var plotBoundRects = [];
        var boundSelection = rootNode.selectAll(".v-trellis-plot-bound");
        if(boundSelection.empty()){
            boundSelection = rootNode.selectAll(".v-plot-bound");
        }
        boundSelection.each(function() {
            var plotBoundRect = BoundingBox.intersection(lassoBBox, getBoundingBox(this));
            if (plotBoundRect) {
                plotBoundRects.push(plotBoundRect);
            }
        });
        var allDataPoints = DataPoints.findAll(rootNode.node());
        [].slice.call(allDataPoints).forEach(function(dataPoint) {
            var rect = getBoundingBox(dataPoint);
            for (var i = -1; ++i < plotBoundRects.length;) {
                if (BoundingBox.intersects(rect, plotBoundRects[i])) {
                    res.push(dataPoint);
                    return;
                }
            }
        });
        return res;
    }

    return [{
        "id": "initialized_lasso",
        "triggerEvent": {
            "name": "afterBehaviorLoaded"
        },
        "handler": function(event, service) {
            this._lassoDecoration = new LassoDecoration();
            service.setStatus("lassoStartPoint", null);
            service.setStatus("lassoEndPoint", null);
            service.setStatus("lassoCoveredDataPoints", []);
        }
    }, {
        "id": "unloaded_clear_lasso",
        "triggerEvent": {
            "name": "beforeBehaviorUnloaded"
        },
        "handler": function(event, service) {
            var lassoDecoration = this._lassoDecoration;
            if (lassoDecoration) {
                lassoDecoration.destroy();
            }
            delete this._lassoDecoration;
            service.removeStatus("lassoStartPoint");
            service.removeStatus("lassoEndPoint");
            service.removeStatus("lassoCoveredDataPoints");
        }
    }, {
        "id": "lasso_start_on_eventLayer",
        "triggerEvent": {
            "name": "lassostart",
            "targets": eventLayerPattern,
            "excludeTargets": "v-m-scrollbarThumb"
        },
        "handler": function(event, service) {
            var lassoDecoration = this._lassoDecoration;
            if (!lassoDecoration) {
                return;
            }
            var selectability = service.getProperties().get("interaction.selectability");
            var selectionMode = selectability.mode.toUpperCase();
            if (!selectability.plotLassoSelection || selectionMode === Constants.SELECTION_MODE.NONE ||
                selectionMode === Constants.SELECTION_MODE.SINGLE) {
                return;
            }
            var point = event.data.point;
            var rootNode = service.getRootNode();
            var bbox = getBoundingBox(rootNode.node());
            if (!BoundingBox.contains(bbox, point)) {
                return;
            }
            //event.data.originalEvent.preventDefault();
            //start lasso
            service.setStatus("lassoStartPoint", point);
            lassoDecoration.start(rootNode.node(), point);
            service.fireEvent("hideDetail", {
                mode: "infoMode"
            }).fireEvent("hideDetail", {
                mode: "actionMode"
            }).fireEvent("cleanLegendHoverEffect")
                .fireEvent("cleanAxisHoverEffect");
        }
    }, {
        "id": "lasso_move_on_eventLayer",
        "triggerEvent": {
            "name": "lassomove",
            "targets": eventLayerPattern
        },
        "handler": function(event, service) {
            var lassoDecoration = this._lassoDecoration;
            if (!lassoDecoration) {
                return;
            }
            var selectability = service.getProperties().get("interaction.selectability");
            var selectionMode = selectability.mode.toUpperCase();
            if (!selectability.plotLassoSelection || selectionMode === Constants.SELECTION_MODE.NONE ||
                selectionMode === Constants.SELECTION_MODE.SINGLE || !service.getStatus("lassoStartPoint")) {
                return;
            }
            event.data.originalEvent.preventDefault();
            lassoDecoration.moveTo(service.getRootNode().node(), event.data.point);
        }
    }, {
        "id": "lasso_end_on_eventLayer",
        "triggerEvent": {
            "name": "lassoend",
            "targets": eventLayerPattern
        },
        "handler": function(event, service) {
            var lassoDecoration = this._lassoDecoration;
            if (!lassoDecoration) {
                return;
            }
            var selectability = service.getProperties().get("interaction.selectability");
            var selectionMode = selectability.mode.toUpperCase();
            if (!selectability.plotLassoSelection || selectionMode === Constants.SELECTION_MODE.NONE ||
                selectionMode === Constants.SELECTION_MODE.SINGLE || !service.getStatus("lassoStartPoint")) {
                return;
            }
            //event.data.originalEvent.preventDefault();
            var point = event.data.point;
            service.setStatus("lassoEndPoint", point);
            var includedTargets = findLassoCoveredDataPoints(this._lassoDecoration.getNode(), service.getRootNode());
            service.fireEvent("processSelection", {
                targets: includedTargets,
                deselectable: false,
                ctrlKeyPressed: event.data.ctrlKey
            });
            lassoDecoration.end(event.data.currentTarget, point);
            var selectedDataPoints = service.getStatus("selectedDataPoints");
            if (selectedDataPoints.length && includedTargets.length) {
                var dpTarget = event.data.target;
                while (dpTarget) {
                    if (dpTarget.getAttribute) {
                        if (DOM.hasClass(dpTarget, "v-datapoint")) {
                            service.setStatus("hoveringDataPoint", dpTarget);
                            break;
                        }
                        dpTarget = dpTarget.parentNode;
                    } else {
                        dpTarget = undefined;
                    }
                }
                if (!dpTarget && selectedDataPoints.length === 1) {
                    dpTarget = selectedDataPoints[0];
                }
                service.fireEvent("showDetail", {
                    target: dpTarget,
                    mode: "actionMode",
                    point: point
                });
            } else {
                service.fireEvent("hideDetail", {
                    mode: "actionMode"
                });
            }
            service.setStatus("lassoStartPoint", null);
        }
    }];
});
define('sap/viz/chart/components/behavior/config/DataPointBehaviorConfig',[
    "sap/viz/framework/common/util/Constants",
    'sap/viz/framework/interaction/Constants',
    "sap/viz/framework/common/util/UADetector",
    "sap/viz/chart/components/util/DataPointUtils",
    "sap/viz/chart/components/behavior/config/HighlightHelper",
    "sap/viz/framework/common/util/TypeUtils"
], function(Constants, SDKConstants, UADetector, DataPointUtils, HighlightHelper, TypeUtils) {
    var BehaviorConstants = SDKConstants.BEHAVIOR;
    var dataPointPattern = "v-datapoint";
    var dataLabelPattern = "v-datalabel";
    var CSS_CLASS = Constants.CSS.CLASS;

    function dataPointClickHandler(event, service, target) {
        var selectability = service.getProperties().get("interaction.selectability");
        var selectionMode = selectability.mode.toUpperCase();
        if (!selectability.plotStdSelection || selectionMode === SDKConstants.SELECTION_MODE.NONE || !target) {
            return;
        }
        var config = event.data;
        var selectedBefore = service.getStatus("selectedDataPoints").indexOf(target) >= 0;
        service.fireEvent("processSelection", {
            targets: target,
            deselectable: true,
            ctrlKeyPressed: config.ctrlKey
        });
        if (service.getStatus("selectedDataPoints").indexOf(target) >= 0) {
            service.fireEvent("showDetail", {
                target: target,
                mode: "actionMode",
                point: config.point
            });
        } else {
            service.fireEvent("hideDetail", {
                mode: "actionMode"
            }).setStatus("isHoveringDeselectedDataPoint", selectedBefore);
        }
    }

    function dataPointHoverHandler(event, service, target) {
        var point = event.data.point;
        var hoveringDataPoint = service.getStatus("hoveringDataPoint");
        var selected = (service.getStatus("selectedDataPoints").indexOf(target) > -1);
        if (hoveringDataPoint) {
            if (hoveringDataPoint === target) {
                if (!selected && !service.getStatus("isHoveringDeselectedDataPoint")) {
                    service.fireEvent("showDetail", {
                        target: target,
                        mode: "infoMode",
                        point: point
                    });
                }
                return;
            }
            service.fireEvent("unhoverOnDataPoint", {
                targets: hoveringDataPoint
            });
        }
        if (hoveringDataPoint !== target) {
            service.setStatus("isHoveringDeselectedDataPoint", false);
        }
        hoveringDataPoint = target;
        service.fireEvent("hoverOnDataPoint", {
            targets: hoveringDataPoint
        }).fireEvent("showDetail", {
            target: target,
            mode: selected ? "actionMode" : "infoMode",
            point: point
        }).setStatus("hoveringDataPoint", hoveringDataPoint);
    }

    function getDataPointByDataLabel(event, service){
        var dpId = DataPointUtils.getDataPointId(event.data.currentTarget);
        return DataPointUtils.findByDataPointIds(service.getRootNode().node(), dpId)[0];
    }

    return [{
        "id": "initialized_datapoint",
        "triggerEvent": {
            "name": "afterBehaviorLoaded"
        },
        "handler": function(event, service) {
            service.setStatus("hoveringDataPoint", null);
            service.setStatus("isHoveringDeselectedDataPoint", false);
        }
    }, {
        "id": "click_on_datapoint",
        "triggerEvent": {
            "name": "click",
            "targets": dataPointPattern
        },
        "handler": function(event, service) {
            dataPointClickHandler(event, service, event.data.currentTarget);
        }
    }, {
        "id": "hover_on_datapoint",
        "triggerEvent": {
            "name": "hover",
            "targets": dataPointPattern
        },
        "handler": function(event, service) {
            dataPointHoverHandler(event, service, event.data.currentTarget);
        }
    }, {
        "id": "click_on_datalabel",
        "triggerEvent": {
            "name": "click",
            "targets": dataLabelPattern
        },
        "handler": function(event, service) {
            dataPointClickHandler(event, service, getDataPointByDataLabel(event, service));
        }
    }, {
        "id": "hover_on_datalabel",
        "triggerEvent": {
            "name": "hover",
            "targets": dataLabelPattern
        },
        "handler": function(event, service) {
            dataPointHoverHandler(event, service, getDataPointByDataLabel(event, service));
        }
    }, {
        "id": "hover_on_non_datapoint",
        "triggerEvent": {
            "name": "hover",
            "excludeTargets": [dataPointPattern, dataLabelPattern]
        },
        "handler": function(event, service) {
            service.setStatus("isHoveringDeselectedDataPoint", false);
            var hoveringDataPoint = service.getStatus("hoveringDataPoint");
            if (hoveringDataPoint) {
                service.fireEvent("unhoverOnDataPoint", {
                    targets: hoveringDataPoint
                }).setStatus("hoveringDataPoint", null);
            }
            service.fireEvent("hideDetail", {
                mode: "infoMode"
            });
        }
    }, {
        "id": "selectDataPoint_default",
        "triggerEvent": {
            "name": "selectDataPoint"
        },
        "handler": function(event, service) {
            var elements = HighlightHelper.turnToArray(event.data.targets);
            elements.forEach(function(e) {
                var d3Node = d3.select(e);
                d3Node.classed(CSS_CLASS.DATAPOINTDEFAULT, false);
                d3Node.classed(CSS_CLASS.DATAPOINTSELECTED, true);
            });
        }
    }, {
        "id": "deselectDataPoint_default",
        "triggerEvent": {
            "name": "deselectDataPoint"
        },
        "handler": function(event, service) {
            var elements = HighlightHelper.turnToArray(event.data.targets);
            elements.forEach(function(e) {
                var d3Node = d3.select(e);
                d3Node.classed(CSS_CLASS.DATAPOINTSELECTED, false);
                if (!d3Node.classed(CSS_CLASS.DATAPOINTHOVER)) {
                    d3Node.classed(CSS_CLASS.DATAPOINTDEFAULT, true);
                }
            });
        }
    }, {
        "id": "hoverOnDataPoint_default",
        "triggerEvent": {
            "name": "hoverOnDataPoint"
        },
        "handler": function(event, service) {
            var elements = HighlightHelper.turnToArray(event.data.targets);
            elements.forEach(function(e) {
                var d3Node = d3.select(e);
                d3Node.classed(CSS_CLASS.DATAPOINTDEFAULT, false);
                d3Node.classed(CSS_CLASS.DATAPOINTHOVER, true);
            });
        }
    }, {
        "id": "unhoverOnDataPoint_default",
        "triggerEvent": {
            "name": "unhoverOnDataPoint"
        },
        "handler": function(event, service) {
            var elements = HighlightHelper.turnToArray(event.data.targets);
            elements.forEach(function(e) {
                var d3Node = d3.select(e);
                d3Node.classed(CSS_CLASS.DATAPOINTHOVER, false);
                if (!d3Node.classed(CSS_CLASS.DATAPOINTSELECTED)) {
                    d3Node.classed(CSS_CLASS.DATAPOINTDEFAULT, true);
                }
            });
        }
    }, {
        "id": "clearPlot_default",
        "triggerEvent": {
            "name": "clearPlot"
        },
        "handler": function(event, service) {
            var mainNode = service.getRootNode().selectAll(".v-plot-main").select("." + CSS_CLASS.DATAPOINT_GROUP);

            function setGray() {
                mainNode.each(function() {
                    this.setAttribute("fill-opacity", "0.4");
                    this.setAttribute("stroke-opacity", "0.4");
                });
            }

            function removeGray() {
                mainNode.each(function() {
                    this.removeAttribute("fill-opacity");
                    this.removeAttribute("stroke-opacity");
                });
            }
            var gray = event.data.isGray;
            if (UADetector.isIE() && UADetector.version() <= 9) {
                //IE9 need refresh if you want to change an attribute on parent node and affect its childnodes. 
                //Bad pratice but we need to support.
                if (gray) {
                    window.setTimeout(setGray, 0);
                } else {
                    window.setTimeout(removeGray, 0);
                }
            } else {
                if (gray) {
                    setGray();
                } else {
                    removeGray();
                }
            }
        }
    }];
});

define('sap/viz/chart/components/util/ChartTypeUtils',[], function Setup() {
    var chartTypes = {
        addTrellisType: function(chartType) {
            var TrellisType = [];
            for (var i = 0; i < chartType.length; ++i) {
                if (chartType[i].indexOf("info/") >= 0) {
                    var type = chartType[i].replace("info/", "info/trellis_");
                    TrellisType.push(type);
                }
            }
            return [].concat(chartType, TrellisType);
        }
    };

    return chartTypes;
});
define('sap/viz/chart/components/behavior/config/DataPointBehaviorConfigForBar',[
    'sap/viz/framework/common/util/Constants',
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/chart/components/behavior/config/HighlightHelper",
    "sap/viz/framework/common/util/DataGraphics",
    "sap/viz/chart/components/util/ChartTypeUtils"
], function(Constants, TypeUtils, HighlightHelper, DataGraphics, ChartTypeUtils) {
    var barType = [
        "info/bar", "info/column", "info/dual_bar", "info/dual_column",
        "info/stacked_bar", "info/stacked_column", "info/dual_stacked_bar", "info/dual_stacked_column",
        "info/100_stacked_bar", "info/100_stacked_column", "info/100_dual_stacked_bar",
        "info/100_dual_stacked_column", "info/stacked_combination", "info/horizontal_stacked_combination",
        "info/dual_stacked_combination", "info/dual_horizontal_stacked_combination"
    ];
    barType = ChartTypeUtils.addTrellisType(barType);
    var CSS_CLASS = Constants.CSS.CLASS;

    return [{
        "id": "selectDataPoint_bar",
        "triggerEvent": {
            "name": "selectDataPoint",
            "supportedChartTypes": barType
        },
        "handler": function(event, service) {
            service.fireEvent(event, true);
            var effectMgr = service.runtime().effectManager();
            var elements = HighlightHelper.turnToArray(event.data.targets);
            elements.forEach(function(e) {
                e.setAttribute("stroke", HighlightHelper.transformColor(effectMgr, DataGraphics.getData(e).color,
                    0.7));
                e.setAttribute("fill-opacity", "1");
                e.setAttribute("stroke-opacity", "1");
                e.firstChild.setAttribute("stroke-width", "1px");
            });
        }
    }, {
        "id": "deselectDataPoint_bar",
        "triggerEvent": {
            "name": "deselectDataPoint",
            "supportedChartTypes": barType
        },
        "handler": function(event, service) {
            service.fireEvent(event, true);
            var elements = HighlightHelper.turnToArray(event.data.targets);
            elements.forEach(function(e) {
                e.removeAttribute("stroke");
                e.removeAttribute("fill-opacity");
                e.removeAttribute("stroke-opacity");
                e.firstChild.removeAttribute("stroke-width");
            });
        }
    }, {
        "id": "hoverOnDataPoint_bar",
        "triggerEvent": {
            "name": "hoverOnDataPoint",
            "supportedChartTypes": barType
        },
        "handler": function(event, service) {
            service.fireEvent(event, true);
            var effectMgr = service.runtime().effectManager();
            var elements = HighlightHelper.turnToArray(event.data.targets);
            elements.forEach(function(e) {
                e.setAttribute("stroke", HighlightHelper.transformColor(effectMgr, DataGraphics.getData(e).color,
                    0.7));
                e.setAttribute("fill-opacity", "1");
                e.setAttribute("stroke-opacity", "1");
                e.firstChild.setAttribute("stroke-width", "2px");
            });
        }
    }, {
        "id": "unhoverOnDataPoint_bar",
        "triggerEvent": {
            "name": "unhoverOnDataPoint",
            "supportedChartTypes": barType
        },
        "handler": function(event, service) {
            service.fireEvent(event, true);
            var elements = HighlightHelper.turnToArray(event.data.targets);
            elements.forEach(function(e) {
                if (d3.select(e).classed(CSS_CLASS.DATAPOINTSELECTED)) {
                    e.firstChild.setAttribute("stroke-width", "1px");
                } else {
                    e.removeAttribute("stroke");
                    e.removeAttribute("fill-opacity");
                    e.removeAttribute("stroke-opacity");
                    e.firstChild.removeAttribute("stroke-width");
                }
            });
        }
    }];
});
define('sap/viz/chart/components/behavior/config/DataPointBehaviorConfigForBullet',[
    'sap/viz/framework/common/util/Constants',
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/chart/components/behavior/config/HighlightHelper",
    "sap/viz/framework/common/util/DataGraphics",
    "sap/viz/chart/components/util/DataPointUtils",
    "sap/viz/framework/common/util/SVG",
    "sap/viz/framework/common/util/ColorUtils"
], function(Constants, TypeUtils, HighlightHelper, DataGraphics, DataPoints, SVG, ColorUtils) {
    var bulletType = ["info/bullet", "info/vertical_bullet", "info/trellis_bullet", "info/trellis_vertical_bullet"];
    var CSS_CLASS = Constants.CSS.CLASS;

    var changeBulletEffect = function(node, props) {

        var color = DataGraphics.getData(node).color;
        var forecastNode = node.querySelector(".v-forecast");
        var effectNode, i;

        if (props.bShow) {
            if (forecastNode) {
                forecastNode.setAttribute("stroke", "#999999");
                forecastNode.setAttribute("stroke-width", props.bSelected ? 1 : 2);
            }
            for (i in color) {
                if (color.hasOwnProperty(i)) {
                    effectNode = node.querySelector("." + i);
                    if(effectNode){
                        var effectColor = ColorUtils.fromCSSColor(color[i]);
                        effectColor.r = parseInt(effectColor.r * 0.7, 10);
                        effectColor.g = parseInt(effectColor.g * 0.7, 10);
                        effectColor.b = parseInt(effectColor.b * 0.7, 10);
                        effectNode.setAttribute("stroke", effectColor.toString());
                        effectNode.setAttribute("stroke-width", props.bSelected ? 1 : 2);
                    }
                }
            }

        } else {
            if (forecastNode) {
                forecastNode.removeAttribute("stroke");
                forecastNode.removeAttribute("stroke-width");
            }

            for (i in color) {
                if (color.hasOwnProperty(i)) {
                    effectNode = node.querySelector("." + i);
                    if(effectNode){
                        effectNode.setAttribute("stroke", "#ffffff");
                        effectNode.setAttribute("stroke-width", 1);
                    }
                }
            }
        }

    };

    return [{
        "id": "selectDataPoint_bullet",
        "triggerEvent": {
            "name": "selectDataPoint",
            "supportedChartTypes": bulletType
        },
        "handler": function(event, service) {
            service.fireEvent(event, true);
            var elements = HighlightHelper.turnToArray(event.data.targets);
            elements.forEach(function(e) {
                e.setAttribute("fill-opacity", 1);
                e.setAttribute("stroke-opacity", 1);
                changeBulletEffect(e, {
                    bShow: true,
                    bSelected: true
                });
            });
        }
    }, {
        "id": "deselectDataPoint_bullet",
        "triggerEvent": {
            "name": "deselectDataPoint",
            "supportedChartTypes": bulletType
        },
        "handler": function(event, service) {
            service.fireEvent(event, true);
            var elements = HighlightHelper.turnToArray(event.data.targets);
            elements.forEach(function(e) {
                e.removeAttribute("fill-opacity");
                e.removeAttribute("stroke-opacity");
                changeBulletEffect(e, {
                    bShow: false,
                    bSelected: true
                });
            });
        }
    }, {
        "id": "hoverOnDataPoint_bullet",
        "triggerEvent": {
            "name": "hoverOnDataPoint",
            "supportedChartTypes": bulletType
        },
        "handler": function(event, service) {
            service.fireEvent(event, true);
            var elements = HighlightHelper.turnToArray(event.data.targets);
            elements.forEach(function(e) {
                e.setAttribute("fill-opacity", 1);
                e.setAttribute("stroke-opacity", 1);
                changeBulletEffect(e, {
                    bShow: true,
                    bSelected: false
                });
            });
        }
    }, {
        "id": "unhoverOnDataPoint_bullet",
        "triggerEvent": {
            "name": "unhoverOnDataPoint",
            "supportedChartTypes": bulletType
        },
        "handler": function(event, service) {
            service.fireEvent(event, true);
            var elements = HighlightHelper.turnToArray(event.data.targets);
            elements.forEach(function(e) {
                var d3Node = d3.select(e);
                if (d3Node.classed(CSS_CLASS.DATAPOINTSELECTED)) {
                    changeBulletEffect(e, {
                        bShow: true,
                        bSelected: true
                    });
                } else {
                    e.removeAttribute("fill-opacity");
                    e.removeAttribute("stroke-opacity");
                    changeBulletEffect(e, {
                        bShow: false,
                        bSelected: true
                    });
                }
            });
        }
    }];
});
define('sap/viz/chart/components/behavior/config/PieBehaviorHelper',[
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/framework/common/util/DataGraphics"
], function(TypeUtils, DataGraphics) {

    var calcTranslate = function(decoras, dx, dy) {
        var dx_decoras = dx;
        var dy_decoras = dy;

        if (d3.select(decoras).attr('transform')) {
            var transformString = d3.select(decoras).attr('transform');
            if (transformString.indexOf('translate') > -1) {
                var transformObj = d3.transform(transformString);
                if (transformObj && transformObj.translate && transformObj.translate.length === 2) {
                    dx_decoras = transformObj.translate[0] + dx;
                    dy_decoras = transformObj.translate[1] + dy;
                }
            }
        }
        if (decoras) {
            d3.select(decoras).transition().attr('transform', "translate(" + dx_decoras + "," + dy_decoras +
                ")");
        }

    };
    var PieBehaviorHelper = {
        selectDataPoint: function(elements) {
            if (!TypeUtils.isArray(elements)) {
                elements = [elements];
            }
            elements.forEach(function(e) {
                if (e.parentNode.childNodes.length > 1) {
                    var d3Node = d3.select(e);
                    var d = DataGraphics.getData(d3Node.node());
                    if (d) {
                        var decoras = d.decoras;
                        var dx = 0,
                            dy = 0;
                        var a = d.midAngle;
                        var r = d.r;
                        var sectorMoveOffset;

                        sectorMoveOffset = 0.08 * r;

                        dx = sectorMoveOffset * Math.sin(a);
                        dy = -sectorMoveOffset * Math.cos(a);
                        d3Node.attr('transform', "translate(" + dx + "," + dy + ")");
                        d3Node.attr('translateOffsetX', dx);
                        d3Node.attr('translateOffsetY', dy);
                        if (decoras && (!d3Node.attr('offsetDone') || d3Node.attr('offsetDone') === "false")) {
                            calcTranslate(decoras, dx, dy);
                        }
                        d3Node.attr('offsetDone', true);
                    }
                }
            });

        },
        deselectDataPoint: function(elements) {
            if (!TypeUtils.isArray(elements)) {
                elements = [elements];
            }
            elements.forEach(function(e) {
                var d3Node = d3.select(e);
                if (d3Node) {
                    if (d3Node.attr('offsetDone') === "true") {
                        d3Node.attr('transform', "translate(0,0)");
                        var offsetX = d3Node.attr('translateOffsetX');
                        var offsetY = d3Node.attr('translateOffsetY');

                        var d = DataGraphics.getData(d3Node.node());
                        var decoras = d.decoras;
                        if (decoras && offsetX && offsetY) {
                            if (TypeUtils.isNumber(offsetX) && TypeUtils.isNumber(offsetY)) {
                                calcTranslate(decoras, -Number(offsetX), -Number(offsetY));
                            }
                        }
                        d3Node.attr('offsetDone', false);
                    }

                }
            });
        }
    };
    return PieBehaviorHelper;
});
define('sap/viz/chart/components/behavior/config/DataPointBehaviorConfigForPie',[
    'sap/viz/framework/common/util/Constants',
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/chart/components/behavior/config/HighlightHelper",
    "sap/viz/framework/common/util/DataGraphics",
    "sap/viz/chart/components/behavior/config/PieBehaviorHelper",
    "sap/viz/chart/components/util/ChartTypeUtils"
], function(Constants, TypeUtils, HighlightHelper, DataGraphics, PieBehaviorHelper, ChartTypeUtils) {
    var pieType = [
        "info/pie", "info/donut"
    ];
    pieType = ChartTypeUtils.addTrellisType(pieType);
    var CSS_CLASS = Constants.CSS.CLASS;

    return [{
        "id": "selectDataPoint_pie",
        "triggerEvent": {
            "name": "selectDataPoint",
            "supportedChartTypes": pieType
        },
        "handler": function(event, service) {
            service.fireEvent(event, true);
            var effectMgr = service.runtime().effectManager();
            var elements = HighlightHelper.turnToArray(event.data.targets);
            elements.forEach(function(e) {
                e.setAttribute("stroke", HighlightHelper.transformColor(effectMgr, DataGraphics.getData(e).color,
                    0.7));
                e.setAttribute("fill-opacity", "1");
                e.setAttribute("stroke-opacity", "1");
                e.firstChild.setAttribute("stroke-width", "1px");
            });

            PieBehaviorHelper.selectDataPoint(elements);
        }
    }, {
        "id": "deselectDataPoint_pie",
        "triggerEvent": {
            "name": "deselectDataPoint",
            "supportedChartTypes": pieType
        },
        "handler": function(event, service) {
            service.fireEvent(event, true);
            var elements = HighlightHelper.turnToArray(event.data.targets);
            elements.forEach(function(e) {
                e.removeAttribute("stroke");
                e.removeAttribute("fill-opacity");
                e.removeAttribute("stroke-opacity");
                e.firstChild.removeAttribute("stroke-width");
            });

            PieBehaviorHelper.deselectDataPoint(elements);
        }
    }, {
        "id": "hoverOnDataPoint_pie",
        "triggerEvent": {
            "name": "hoverOnDataPoint",
            "supportedChartTypes": pieType
        },
        "handler": function(event, service) {
            service.fireEvent(event, true);
            var effectMgr = service.runtime().effectManager();
            var elements = HighlightHelper.turnToArray(event.data.targets);
            elements.forEach(function(e) {
                e.setAttribute("stroke", HighlightHelper.transformColor(effectMgr, DataGraphics.getData(e).color,
                    0.7));
                e.setAttribute("fill-opacity", "1");
                e.setAttribute("stroke-opacity", "1");
                e.firstChild.setAttribute("stroke-width", "2px");
            });
        }
    }, {
        "id": "unhoverOnDataPoint_pie",
        "triggerEvent": {
            "name": "unhoverOnDataPoint",
            "supportedChartTypes": pieType
        },
        "handler": function(event, service) {
            service.fireEvent(event, true);
            var elements = HighlightHelper.turnToArray(event.data.targets);
            elements.forEach(function(e) {
                if (d3.select(e).classed(CSS_CLASS.DATAPOINTSELECTED)) {
                    e.firstChild.setAttribute("stroke-width", "1px");
                } else {
                    e.removeAttribute("stroke");
                    e.removeAttribute("fill-opacity");
                    e.removeAttribute("stroke-opacity");
                    e.firstChild.removeAttribute("stroke-width");
                }
            });
        }
    }];
});
define('sap/viz/chart/components/renderers/LineRenderer',["sap/viz/framework/common/util/SVG"],function(SVG) {
    var LineRender = function(config) {

        var graphic = config.graphic;

        var path = SVG.create("path");

        path.setAttribute("d", outputPath(config.points));
        path.setAttribute("fill", "none");
        path.setAttribute("stroke-width", graphic.width);
        path.setAttribute("stroke", graphic.color);
        path.setAttribute("stroke-linejoin", "round");
        path.setAttribute("stroke-dasharray", graphic.dash);
        return path;
    };

    LineRender.update = function(node, config) {
        node.setAttribute("d", outputPath(config.points));
    };

    function outputPath(points) {

        var d = "";
        var restart = true;
        points.forEach(function(point, index) {
            if (!point) {
                restart = true;
            } else {
                d = d && !restart ? d + "L" : d + "M";

                d += point[0] + "," + point[1];
                restart = false;
            }

        });
        return d;
    }

    return LineRender;
});
define('sap/viz/chart/components/behavior/config/DataPointBehaviorConfigForLine',[
    'sap/viz/framework/common/util/Constants',
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/chart/components/behavior/config/HighlightHelper",
    'sap/viz/chart/components/renderers/LineRenderer',
    "sap/viz/chart/components/util/DataPointUtils",
    "sap/viz/framework/common/util/DataGraphics",
    'sap/viz/framework/common/util/SVG',
    "sap/viz/chart/components/util/ChartTypeUtils"
], function(Constants, TypeUtils, HighlightHelper,
    LineRenderer, DataPoints, DataGraphics, SVG, ChartTypeUtils) {
    var lineType = [
        "info/line", "info/horizontal_line", "info/dual_line", "info/dual_horizontal_line",
        "info/combination", "info/horizontal_combination", "info/dual_combination",
        "info/dual_horizontal_combination", "info/stacked_combination", "info/horizontal_stacked_combination",
        "info/dual_stacked_combination", "info/dual_horizontal_stacked_combination"
    ];
    lineType = ChartTypeUtils.addTrellisType(lineType);
    var CLASS_LIGHT_LINE = "v-lightLine";
    var DATA_ATTR_FROM = "data-from";
    var DATA_ATTR_TO = "data-to";

    var CSS_CLASS = Constants.CSS.CLASS;

    function lightLine(node, before, flag) {
        var data = DataGraphics.getData(node);

        var anotherNodeId = data[before ? "next" : "prev"];

        if (!anotherNodeId) {
            return;
        }

        var parentNode = node.parentNode;
        var anotherNode = DataPoints.find(parentNode, anotherNodeId);

        var nodeId = DataPoints.getDataId(node);
        var ids = before ? [anotherNodeId, nodeId] : [nodeId, anotherNodeId];

        var lightLineNode = parentNode.querySelector("." + CLASS_LIGHT_LINE +
            "[" + DATA_ATTR_FROM + "='" + ids[0] + "'][" + DATA_ATTR_TO + "='" +
            ids[1] + "']");

        if (flag && DataPoints.isHighlighted(anotherNode)) {
            if (!lightLineNode) {

                var lineNode = parentNode.querySelector(".v-lines, .v-combination-lines");
                var lineData = DataGraphics.getData(lineNode);

                var lightLineContent = LineRenderer({
                    graphic: {
                        color: lineData.color,
                        width: lineData.width
                    },
                    points: [
                        data.translate,
                        DataGraphics.getData(anotherNode).translate
                    ]
                });

                if (lightLineContent) {
                    lightLineNode = SVG.create("g");
                    lightLineNode.setAttribute("class", CLASS_LIGHT_LINE);
                    lightLineNode.setAttribute(DATA_ATTR_FROM, ids[0]);
                    lightLineNode.setAttribute(DATA_ATTR_TO, ids[1]);
                    lightLineNode.setAttribute("fill-opacity", "1");
                    lightLineNode.setAttribute("stroke-opacity", "1");
                    lightLineNode.appendChild(lightLineContent);
                    parentNode.insertBefore(lightLineNode, parentNode.firstChild);
                }
            }
        } else {
            if (lightLineNode) {
                parentNode.removeChild(lightLineNode);
            }
        }
    }

    function renderLightLine(node, flag) {
        lightLine(node, true, flag);
        lightLine(node, false, flag);
    }

    return [{
        "id": "selectDataPoint_line",
        "triggerEvent": {
            "name": "selectDataPoint",
            "supportedChartTypes": lineType
        },
        "handler": function(event, service) {
            service.fireEvent(event, true);
            var effectMgr = service.runtime().effectManager();
            var elements = HighlightHelper.turnToArray(event.data.targets);
            elements.forEach(function(e) {
                DataPoints.highlight(e);
                renderLightLine(e, true);
                e.setAttribute("stroke", HighlightHelper.transformColor(effectMgr, DataGraphics.getData(e).color,
                    0.7));
                e.setAttribute("fill-opacity", "1");
                e.setAttribute("stroke-opacity", "1");
                var child = e.firstChild;
                child.setAttribute("stroke-width", "1px");
                child.removeAttribute("fill-opacity");
                child.removeAttribute("stroke-opacity");
            });
        }
    }, {
        "id": "deselectDataPoint_line",
        "triggerEvent": {
            "name": "deselectDataPoint",
            "supportedChartTypes": lineType
        },
        "handler": function(event, service) {
            service.fireEvent(event, true);
            var elements = HighlightHelper.turnToArray(event.data.targets);
            var props = service.getProperties().get("plotArea");
            var markerVisible = props.line ? props.line.marker.visible : props.marker.visible;

            elements.forEach(function(e) {
                DataPoints.unhighlight(e);
                renderLightLine(e, false);
                e.removeAttribute("stroke");
                e.removeAttribute("fill-opacity");
                e.removeAttribute("stroke-opacity");
                var child = e.firstChild;
                child.removeAttribute("stroke-width");
                if (!markerVisible && DataGraphics.getData(e).type === "line") {
                    child.setAttribute("fill-opacity", "0");
                    child.setAttribute("stroke-opacity", "0");
                }
            });
        }
    }, {
        "id": "hoverOnDataPoint_line",
        "triggerEvent": {
            "name": "hoverOnDataPoint",
            "supportedChartTypes": lineType
        },
        "handler": function(event, service) {
            service.fireEvent(event, true);
            var effectMgr = service.runtime().effectManager();
            var elements = HighlightHelper.turnToArray(event.data.targets);
            elements.forEach(function(e) {
                e.setAttribute("stroke", HighlightHelper.transformColor(effectMgr, DataGraphics.getData(e).color,
                    0.7));
                e.setAttribute("fill-opacity", "1");
                e.setAttribute("stroke-opacity", "1");
                var child = e.firstChild;
                child.setAttribute("stroke-width", "2px");
                child.removeAttribute("fill-opacity");
                child.removeAttribute("stroke-opacity");
            });
        }
    }, {
        "id": "unhoverOnDataPoint_line",
        "triggerEvent": {
            "name": "unhoverOnDataPoint",
            "supportedChartTypes": lineType
        },
        "handler": function(event, service) {
            service.fireEvent(event, true);
            var elements = HighlightHelper.turnToArray(event.data.targets);
            var props = service.getProperties().get("plotArea");
            var markerVisible = props.line ? props.line.marker.visible : props.marker.visible;

            elements.forEach(function(e) {
                var child = e.firstChild;
                if (d3.select(e).classed(CSS_CLASS.DATAPOINTSELECTED)) {
                    child.setAttribute("stroke-width", "1px");
                } else {
                    e.removeAttribute("stroke");
                    e.removeAttribute("fill-opacity");
                    e.removeAttribute("stroke-opacity");
                    child.removeAttribute("stroke-width");
                    if (!markerVisible && DataGraphics.getData(e).type === "line") {
                        child.setAttribute("fill-opacity", "0");
                        child.setAttribute("stroke-opacity", "0");
                    }
                }
            });
        }
    }];
});

define('sap/viz/chart/components/util/ColorUtil',["sap/viz/framework/common/util/DataGraphics"], function(DataGraphics) {

    //refer to sapjira /secure/attachment/119796/2014-06-18%20Coloring%20of%20Data%20Labels.pdf
    //and http://www.w3.org/TR/AERT#color-contrast 
    var DARK_LABEL_COLOR = "#333333";
    var LIGHT_LABEL_COLOR = "#f0f0f0";
    var DEFAULT_LABEL_COLOR = DARK_LABEL_COLOR;
    var DARK_FLAG = 137.5;

    var STROKECOLORADJUST_FOR_DARK = 1.2;
    var STROKECOLORADJUST_FOR_LIGHT = 0.7;

    var ColorUtil = {};

    var getColorObj = function(color) {
        //we may need to NamedColorUtils.convertColor(color);
        var reColor = color;
        reColor = reColor.toLowerCase();
        reColor = d3.rgb(reColor);
        return reColor;
    };

    ColorUtil.getMixedColor = function(frontColor, backColor, frontColorOpacity) {
        var mixedColor = frontColor;
        if(frontColorOpacity !== 1)
        {
            if(backColor.toLowerCase() === "transparent") {
                backColor = "#ffffff";
            }
            var rgbFrontColor = getColorObj(frontColor);
            var rgbBackColor = getColorObj(backColor);
            var mixedRGBColor = d3.rgb(rgbFrontColor.r * frontColorOpacity + 
                                    rgbBackColor.r * ( 1 - frontColorOpacity),
                                    rgbFrontColor.g * frontColorOpacity + rgbBackColor.g * ( 1 - frontColorOpacity),
                                    rgbFrontColor.b * frontColorOpacity + rgbBackColor.b * ( 1 - frontColorOpacity));

            mixedColor = mixedRGBColor.toString();
        }

        return mixedColor;
    };

    ColorUtil.getReferenceColorValue = function(refColor) {
        var rgb = getColorObj(refColor);
        var reValue = ((rgb.r * 299) + (rgb.g * 587) + (rgb.b * 114)) / 1000;
        return reValue;
    };

    ColorUtil.getDataLabelColor = function(backColor, isUseDefaultColor) {
        var labelColor = DARK_LABEL_COLOR;
        if(isUseDefaultColor) {
            labelColor = DEFAULT_LABEL_COLOR;
        }
        else {
            if(backColor)
            {
                if(backColor.toLowerCase() === "transparent") {
                    backColor = "#ffffff";
                }
                var reValue = ColorUtil.getReferenceColorValue(backColor);

                if(reValue <= DARK_FLAG) {
                    labelColor = LIGHT_LABEL_COLOR;
                }
            }
        }
        return labelColor;
    };

    ColorUtil.getStrokeColorAdjustValue = function(refNode) {
        var backgroundColor = ColorUtil.getBackgroundColor(refNode);
        if(backgroundColor.toLowerCase() === "transparent") {
            backgroundColor = "#ffffff";
        }
        var reValue = ColorUtil.getReferenceColorValue(backgroundColor);
        
        var adjustValue = STROKECOLORADJUST_FOR_LIGHT;
        if(reValue <= DARK_FLAG) {
            adjustValue = STROKECOLORADJUST_FOR_DARK;
        }

        return adjustValue;
    };

    ColorUtil.getBackgroundColor = function(refNode) {
        var backgroundColor = "transparent";
        var backgroundClassName = "v-background-body";

        //refNode is a DOM element
        var plotNode;
        var tempNode;
        for(tempNode = refNode;tempNode;tempNode = tempNode.parentNode)
        {
            if(!d3.select(tempNode).select("." + backgroundClassName).empty())
            {
                //find plotNode
                plotNode = tempNode;
                break;
            }
        }

        if(plotNode)
        {
            var plotBackgroundNode = d3.select(plotNode).select("." + backgroundClassName).node();

            var backgroundData;
            if(plotBackgroundNode)
            {
                backgroundData = DataGraphics.getData(plotBackgroundNode);
                if (backgroundData) {
                    backgroundColor = backgroundData.color;
                }
            }
            //we ignore opacity here.
            if(!backgroundColor || 
                backgroundColor.toLowerCase() === "transparent")
            {
                var rootBackgroundNode = d3.select(plotNode.parentNode.parentNode)
                                        .select("." + backgroundClassName).node();
                if(rootBackgroundNode)
                {
                    backgroundData = DataGraphics.getData(rootBackgroundNode);
                    if (backgroundData) {
                        backgroundColor = backgroundData.color;
                    }
                }
            }

            if(!backgroundColor) {
                backgroundColor = "transparent";
            }
        }
        return backgroundColor;
    };

    return ColorUtil;
});

define('sap/viz/chart/components/behavior/config/DataPointBehaviorConfigForScatter',[
    'sap/viz/framework/common/util/Constants',
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/chart/components/behavior/config/HighlightHelper",
    "sap/viz/framework/common/util/DataGraphics",
    "sap/viz/chart/components/util/ColorUtil",
    "sap/viz/chart/components/util/ChartTypeUtils"
], function(Constants, TypeUtils, HighlightHelper, DataGraphics, ColorUtil, ChartTypeUtils) {
    var scatterType = ["info/bubble", "info/scatter", "info/time_bubble"];
    scatterType = ChartTypeUtils.addTrellisType(scatterType);
    var CSS_CLASS = Constants.CSS.CLASS;

    return [{
        "id": "selectDataPoint_scatter",
        "triggerEvent": {
            "name": "selectDataPoint",
            "supportedChartTypes": scatterType
        },
        "handler": function(event, service) {
            service.fireEvent(event, true);
            var effectMgr = service.runtime().effectManager();
            var elements = HighlightHelper.turnToArray(event.data.targets);
            var refNode;
            if(elements.length >= 0) {
                refNode = elements[0];
            }
            var adjustValue = ColorUtil.getStrokeColorAdjustValue(refNode);
            elements.forEach(function(e) {
                e.firstChild.setAttribute("stroke", HighlightHelper.transformColor(effectMgr, 
                        DataGraphics.getData(e).color,
                    adjustValue));
                e.setAttribute("fill-opacity", "1");
                e.setAttribute("stroke-opacity", "1");
                e.firstChild.setAttribute("stroke-width", "1px");
            });
        }
    }, {
        "id": "deselectDataPoint_scatter",
        "triggerEvent": {
            "name": "deselectDataPoint",
            "supportedChartTypes": scatterType
        },
        "handler": function(event, service) {
            service.fireEvent(event, true);
            var elements = HighlightHelper.turnToArray(event.data.targets);
            elements.forEach(function(e) {
                e.firstChild.setAttribute("stroke", DataGraphics.getData(e).color);
                e.removeAttribute("fill-opacity");
                e.removeAttribute("stroke-opacity");
                e.firstChild.setAttribute("stroke-width", "1px");
            });
        }
    }, {
        "id": "hoverOnDataPoint_scatter",
        "triggerEvent": {
            "name": "hoverOnDataPoint",
            "supportedChartTypes": scatterType
        },
        "handler": function(event, service) {
            service.fireEvent(event, true);
            var effectMgr = service.runtime().effectManager();
            var elements = HighlightHelper.turnToArray(event.data.targets);

            var refNode;
            if(elements.length >= 0) {
                refNode = elements[0];
            }
            var adjustValue = ColorUtil.getStrokeColorAdjustValue(refNode);
            elements.forEach(function(e) {
                e.firstChild.setAttribute("stroke", HighlightHelper.transformColor(effectMgr,
                    DataGraphics.getData(e).color,
                    adjustValue));
                e.setAttribute("fill-opacity", "1");
                e.setAttribute("stroke-opacity", "1");
                e.firstChild.setAttribute("stroke-width", "2px");
            });
        }
    }, {
        "id": "unhoverOnDataPoint_scatter",
        "triggerEvent": {
            "name": "unhoverOnDataPoint",
            "supportedChartTypes": scatterType
        },
        "handler": function(event, service) {
            service.fireEvent(event, true);
            var elements = HighlightHelper.turnToArray(event.data.targets);
            elements.forEach(function(e) {
                var d3Node = d3.select(e);
                if (d3Node.classed(CSS_CLASS.DATAPOINTSELECTED)) {
                    e.firstChild.setAttribute("stroke-width", "1px");
                } else {
                    e.firstChild.setAttribute("stroke", DataGraphics.getData(e).borderColor);
                    e.removeAttribute("fill-opacity");
                    e.removeAttribute("stroke-opacity");
                    e.firstChild.setAttribute("stroke-width", "1px");
                }
            });
        }
    }];
});
define('sap/viz/chart/components/behavior/config/DataPointBehaviorConfigForTreeMap',[
    'sap/viz/framework/common/util/Constants',
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/chart/components/behavior/config/HighlightHelper",
    "sap/viz/framework/common/util/DataGraphics", 
    "sap/viz/framework/common/util/UADetector",
    "sap/viz/chart/components/util/ChartTypeUtils"
], function(Constants, TypeUtils, HighlightHelper, DataGraphics, UADetector, ChartTypeUtils) {
    var treeType = [
        "info/treemap"
    ];
    treeType = ChartTypeUtils.addTrellisType(treeType);
    var CSS_CLASS = Constants.CSS.CLASS;

    return [{
        "id": "selectDataPoint_tree",
        "triggerEvent": {
            "name": "selectDataPoint",
            "supportedChartTypes": treeType
        },
        "handler": function(event, service) {
            service.fireEvent(event, true);
            var effectMgr = service.runtime().effectManager();
            var elements = HighlightHelper.turnToArray(event.data.targets);
            elements.forEach(function(e) {
                e.firstChild.setAttribute("stroke", HighlightHelper.transformColor(effectMgr,
                    DataGraphics.getData(e).color,
                    0.7));
                e.firstChild.setAttribute("fill-opacity", "1");
                e.firstChild.setAttribute("stroke-opacity", "1");
                e.firstChild.setAttribute("stroke-width", "1px");
            });
        }
    }, {
        "id": "deselectDataPoint_tree",
        "triggerEvent": {
            "name": "deselectDataPoint",
            "supportedChartTypes": treeType
        },
        "handler": function(event, service) {
            service.fireEvent(event, true);
            var elements = HighlightHelper.turnToArray(event.data.targets);
            elements.forEach(function(e) {
                e.firstChild.removeAttribute("stroke");
                e.firstChild.removeAttribute("fill-opacity");
                e.firstChild.removeAttribute("stroke-opacity");
                e.firstChild.removeAttribute("stroke-width");
            });
        }
    }, {
        "id": "hoverOnDataPoint_tree",
        "triggerEvent": {
            "name": "hoverOnDataPoint",
            "supportedChartTypes": treeType
        },
        "handler": function(event, service) {
            service.fireEvent(event, true);
            var effectMgr = service.runtime().effectManager();
            var elements = HighlightHelper.turnToArray(event.data.targets);
            elements.forEach(function(e) {
                e.firstChild.setAttribute("stroke", HighlightHelper.transformColor(effectMgr,
                    DataGraphics.getData(e).color,
                    0.7));
                e.firstChild.setAttribute("stroke-opacity", "1");
                e.firstChild.setAttribute("stroke-width", "2px");
            });
        }
    }, {
        "id": "unhoverOnDataPoint_tree",
        "triggerEvent": {
            "name": "unhoverOnDataPoint",
            "supportedChartTypes": treeType
        },
        "handler": function(event, service) {
            service.fireEvent(event, true);
            var elements = HighlightHelper.turnToArray(event.data.targets);
            elements.forEach(function(e) {
                if (d3.select(e).classed(CSS_CLASS.DATAPOINTSELECTED)) {
                    e.firstChild.setAttribute("stroke-width", "1px");
                } else {
                    e.firstChild.removeAttribute("stroke");
                    e.firstChild.removeAttribute("stroke-opacity");
                    e.firstChild.removeAttribute("stroke-width");
                }
            });
        }
    }];
});
define('sap/viz/chart/components/behavior/config/RuntimeSelectionHelperConfig',[
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/chart/components/behavior/config/HighlightHelper",
    "sap/viz/chart/components/util/DataPointUtils",
    "sap/viz/framework/common/util/Constants",
    'sap/viz/framework/interaction/Constants'
], function(TypeUtils, HighlightHelper, DataPointUtils, Constants, SDKConstants) {

    var SELECTION_MODE = SDKConstants.SELECTION_MODE;

    var helperConfig = [{
        "id": "initialized_clear_selection",
        "triggerEvent": {
            "name": "afterBehaviorLoaded",
        },
        "handler": function(event, service) {
            service.setStatus("selectedDataPoints", []);
        }
    }, {
        "id": "unloaded_clear_selection",
        "triggerEvent": {
            "name": "beforeBehaviorUnloaded"
        },
        "handler": function(event, service) {
            var selectedDataPoints = service.getStatus("selectedDataPoints");
            if (selectedDataPoints.length) {
                service.fireEvent("clearPlot", {
                    isGray: false
                });
            }
            service.removeStatus("selectedDataPoints");
        }
    }, {
        "id": "refreshed_keep_selection",
        "triggerEvent": {
            "name": "afterChartRendered"
        },
        "handler": function(event, service) {
            var selectionMode = service.getProperties().get(
                "interaction.selectability.mode").toUpperCase();
            var selectedDataPoints = service.getStatus("selectedDataPoints");
            if (!service.runtime().statusManager().get("interaction.holdSelection") ||
                selectionMode === SELECTION_MODE.NONE
            ) {
                if (selectedDataPoints.length) {
                    service.fireEvent("clearPlot", {
                        isGray: false
                    });
                }
                service.setStatus("selectedDataPoints", []);
            } else if (selectedDataPoints.length) {
                var dpIds = selectedDataPoints.map(function(node){
                    return DataPointUtils.getDataPointId(node);
                });
                var targets = DataPointUtils.findByDataPointIds(service.getRootNode().node(), dpIds);
                targets = [].slice.apply(targets);
                service.fireEvent("clearPlot", {
                    isGray: true
                }).fireEvent("selectDataPoint", {
                    targets: targets
                }).setStatus("selectedDataPoints", targets);
            }
        }
    }, {
        "id": "deselect_all",
        "triggerEvent": {
            "name": "click",
            "excludeTargets": ['v-datapoint', 'v-legend-item', 'v-axis-item',
                'v-datalabel', 'v-mbc-legend-item', 'v-m-scrollbarTrack'
            ]
        },
        "handler": function(event, service) {
            var selectedDataPoints = service.getStatus("selectedDataPoints");
            service.fireEvent("clearPlot")
                .fireEvent("deselectDataPoint", {
                    targets: selectedDataPoints,
                    isAnyOtherSelected: false
                }).fireEvent("hideDetail", {
                    mode: "actionMode"
                })
                .setStatus("selectedDataPoints", []);
            if (selectedDataPoints.length) {
                service.fireEvent("dispatchDataEvent", {
                    targets: selectedDataPoints,
                    isSelected: false
                });
            }
        }
    }, {
        "id": "processMultipleSelectionTooltip",
        "triggerEvent": {
            "name": "processMultipleSelectionTooltip"
        },
        "handler": function(event, service) {
            var selectedDataPoints = service.getStatus("selectedDataPoints");
            if (selectedDataPoints.length && selectedDataPoints.indexOf(event.data.targets[
                0]) > -1) {
                service.fireEvent("showDetail", {
                    target: null,
                    mode: "actionMode",
                    point: event.data.point,
                    isAnchored: event.data.isAnchored
                });
            } else {
                service.fireEvent("hideDetail", {
                    mode: "actionMode"
                });
            }
        }
    }, {
        "id": "processSelection",
        "triggerEvent": {
            "name": "processSelection"
        },
        "handler": function(event, service) {
            var config = event.data;
            var mode = config.mode;
            if (mode == null || [
                SELECTION_MODE.SINGLE,
                SELECTION_MODE.MULTIPLE,
                SELECTION_MODE.EXCLUSIVE,
                SELECTION_MODE.INCLUSIVE
            ].indexOf(mode.toString().toUpperCase()) < 0) {
                mode = service.getProperties().get("interaction.selectability.mode").toUpperCase();
            } else {
                mode = mode.toString().toUpperCase();
            }

            function concatByPush(arr1, arr2) {
                Array.prototype.push.apply(arr1, arr2);
            }
            var targets = HighlightHelper.turnToArray(config.targets);

            //handle the single mode
            if (mode === SELECTION_MODE.SINGLE) {
                targets.splice(1, targets.length);
            }

            var lastSelected = service.getStatus("selectedDataPoints");
            if (!lastSelected) {
                return;
            }
            if (!lastSelected.length) {
                service.fireEvent("clearPlot", {
                    isGray: true
                });
            }

            var selectDatas = [],
                deselectDatas = [],
                pureLastSelection = [],
                pureNewSelection = [],
                interSelection = [],
                i;
            for (i = -1; ++i < lastSelected.length;) {
                var find = false;
                for (var j = -1; ++j < targets.length;) {
                    if (targets[j] === lastSelected[i]) {
                        find = true;
                        break;
                    }
                }
                (find ? interSelection : pureLastSelection).push(lastSelected[i]);
            }

            for (i = -1; ++i < targets.length;) {
                if (interSelection.indexOf(targets[i]) < 0) {
                    pureNewSelection.push(targets[i]);
                }
            }

            lastSelected.splice(0, lastSelected.length);

            //handle pure new: always into new selection and selectDatas
            concatByPush(lastSelected, pureNewSelection);
            concatByPush(selectDatas, pureNewSelection);
            //handle inter and pure last
            //handle single mode first: it is not affected by ctrl key
            if (mode === SELECTION_MODE.SINGLE) {
                concatByPush(deselectDatas, interSelection);
                concatByPush(deselectDatas, pureLastSelection);
            } else if (!config.ctrlKeyPressed) { //not press ctrl
                switch (mode) {
                    case SELECTION_MODE.EXCLUSIVE:
                        concatByPush(lastSelected, interSelection);
                        concatByPush(deselectDatas, pureLastSelection);
                        break;
                    case SELECTION_MODE.INCLUSIVE:
                        concatByPush(lastSelected, interSelection);
                        concatByPush(lastSelected, pureLastSelection);
                        break;
                    case SELECTION_MODE.MULTIPLE:
                        if (!config.deselectable) {
                            concatByPush(lastSelected, interSelection);
                        } else {
                            concatByPush((pureNewSelection.length ? lastSelected :
                                deselectDatas), interSelection);
                        }
                        concatByPush(lastSelected, pureLastSelection);
                        break;
                }
            } else {
                //inter: decided by clicklike
                if (!config.deselectable) { //lasso: into new selection
                    concatByPush(lastSelected, interSelection);
                } else { //click: decided by whether selected points are all in inter
                    //has new points: into new selection
                    //no new points: into deselectDatas
                    concatByPush((pureNewSelection.length ? lastSelected :
                        deselectDatas), interSelection);
                }
                //pure last: always into new selection
                concatByPush(lastSelected, pureLastSelection);
            }

            if (deselectDatas.length) {
                service.fireEvent("deselectDataPoint", {
                    targets: deselectDatas,
                    isAnyOtherSelected: lastSelected.length === 0
                });
            }
            if (lastSelected.length) {
                service.fireEvent("selectDataPoint", {
                    targets: lastSelected
                });
            } else {
                service.fireEvent("clearPlot", {
                    isGray: false
                });
            }
            [selectDatas, deselectDatas].forEach(function(data, i) {
                if (data.length) {
                    service.fireEvent("dispatchDataEvent", {
                        targets: data,
                        isSelected: i === 0
                    });
                }
            });
            service.setStatus("selectedDataPoints", lastSelected);
        }
    }, {
        "id": "dispatchDataEvent",
        "declaredEvents": ["selectData", "deselectData"],
        "triggerEvent": {
            "name": "dispatchDataEvent"
        },
        "handler": function(event, service) {
            var selectData = [];
            var selectedShapes = event.data.targets;
            for (var i = 0, len = selectedShapes.length; i < len; i++) {
                selectData.push({
                    target: selectedShapes[i],
                    data: DataPointUtils.getContext(selectedShapes[i])
                });
            }
            var eventName, eventIdentifier;
            if (event.data.isSelected) {
                eventName = Constants.Event.SelectData.name;
                eventIdentifier = "selectData";
            } else {
                eventName = Constants.Event.DeSelectData.name;
                eventIdentifier = "deselectData";
            }
            this.dispatchEvent(eventIdentifier, {
                name: eventName,
                data: selectData
            });
        }
    }];
    return helperConfig;
});

define('sap/viz/chart/components/behavior/config/SelectionAPIConfig',[
    'sap/viz/framework/interaction/Constants',
    "sap/viz/chart/components/util/DataPointUtils",
    "sap/viz/framework/common/util/ObjectUtils",
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/chart/components/behavior/config/SelectionUtil"
], function(Constants, DataPointUtils, ObjectUtils, TypeUtils, SelectionUtil) {

    function setSelection(config, service) {
        service.fireEvent("hideDetail", {
            mode: "infoMode"
        });
        service.fireEvent("hideDetail", {
            mode: "actionMode"
        });

        var currentSelectionMode = service.getProperties().get("interaction.selectability.mode").toUpperCase();

        var options = config.options || {};
        var selectionMode;
        if (options.selectionMode) {
            selectionMode = String(options.selectionMode).toUpperCase();
        }

        var valid = false;
        for (var validMode in Constants.SELECTION_MODE) {
            if (Constants.SELECTION_MODE.hasOwnProperty(validMode) && validMode === selectionMode) {
                valid = true;
                break;
            }
        }

        if (!valid) {
            if (options.hasOwnProperty('clearSelection') && currentSelectionMode !== Constants.SELECTION_MODE.NONE) {
                selectionMode = options.clearSelection ?
                    Constants.SELECTION_MODE.EXCLUSIVE : Constants.SELECTION_MODE.INCLUSIVE;
            } else {
                selectionMode = currentSelectionMode;
            }
        }
        
        if (selectionMode === Constants.SELECTION_MODE.NONE) {
            config.success = false;
            return;
        }

        var items = config.items;
        var targets = [];
        var isSuccessful = true;

        if (TypeUtils.isArray(items) && items.length) {
            var conditions = items.map(function(item){
                return item.data;
            });
            targets = SelectionUtil.getDataPointNodes(conditions, service);
            isSuccessful = targets.length > 0;
        }
        if (isSuccessful) {
            service.fireEvent("processSelection", {
                targets: targets,
                mode: selectionMode
            });
        }
        config.success = isSuccessful;
    }

    function getSelection(service) {
        var ret = [];
        var selected = service.getStatus("selectedDataPoints");
        if (TypeUtils.isArray(selected) && selected.length) {
            for (var i = 0, len = selected.length; i < len; ++i) {
                var data = ObjectUtils.extend(true, {}, DataPointUtils.getContext(selected[i]));
                delete data["measureNames"];
                delete data["_id"];
                ret.push({
                    data: data
                });
            }
        }
        return ret;
    }

    return [{
        "id": "initialize_selection_api",
        "triggerEvent": {
            "name": "afterBehaviorLoaded"
        },
        "handler": function(event, service) {
            service.runtime().statusManager().add("interaction.selectedDataPoints", {
                serializable: false,
                set: function(config) {
                    setSelection(config || {}, service);
                },
                get: function() {
                    return getSelection(service);
                }
            });
        }
    }];
});

define('sap/viz/chart/components/util/ScrollbarUtil',[], function Setup() {
    var PIE = "pie";
    var DONUT = "donut";
    return {
        showScrollbar : function(service, timeout) {
            var xyContainer = service.getModule("main");
            var renderType = service.getChartView()._renderType;
            if (renderType === PIE || renderType === DONUT) {
                xyContainer = service.getModule("plot");
            }
            if (xyContainer) {
                if (xyContainer.getVScrollbar && xyContainer.getVScrollbar()) {
                    xyContainer.getVScrollbar().show();
                }
                if (xyContainer.getHScrollbar && xyContainer.getHScrollbar()) {
                    xyContainer.getHScrollbar().show();
                }
                var timeOutId = service.getStatus("hideScrollBarTimeOutId");
                if (timeOutId) {
                    window.clearTimeout(timeOutId);
                }
                timeOutId = window.setTimeout(function() {
                    service.removeStatus("hideScrollBarTimeOutId");
                    if (xyContainer.getVScrollbar && xyContainer.getVScrollbar()) {
                        xyContainer.getVScrollbar().hide();
                    }
                    if (xyContainer.getHScrollbar && xyContainer.getHScrollbar()) {
                        xyContainer.getHScrollbar().hide();
                    }
                }, timeout);
                service.setStatus("hideScrollBarTimeOutId", timeOutId);
            }
        }
    };
});
define('sap/viz/chart/components/behavior/config/PinchBehaviorConfig',[
    "sap/viz/chart/components/util/DataPointUtils",
    "sap/viz/chart/components/util/ScrollbarUtil",
    "sap/viz/framework/common/util/DataGraphics",
    "sap/viz/framework/common/util/UADetector",
    'sap/viz/chart/components/renderers/LineRenderer'
], function(DataPointUtils, ScrollbarUtil, DataGraphics, UADetector, LineRenderer) {
    var csvChartTypes = [
        "info/bar", "info/column", "info/dual_bar", "info/dual_column",
        "info/stacked_bar", "info/stacked_column", "info/dual_stacked_bar",
        "info/dual_stacked_column",
        "info/100_stacked_bar", "info/100_stacked_column", "info/100_dual_stacked_bar",
        "info/100_dual_stacked_column",
        "info/line", "info/horizontal_line", "info/dual_line", "info/dual_horizontal_line",
        "info/combination", "info/horizontal_combination",
        "info/stacked_combination", "info/horizontal_stacked_combination",
        "info/dual_stacked_combination", "info/dual_horizontal_stacked_combination",
        "info/bullet","info/vertical_bullet"
    ];

    var bubbleChartTypes = ["info/bubble", "info/scatter", "info/time_bubble"];


    var CLASS_LIGHT_LINE = "v-lightLine";
    var DATA_ATTR_FROM = "data-from";
    var DATA_ATTR_TO = "data-to";

    function getRelativePoint(clientPoint, clientRect) {
        var point = {
            x: clientPoint.x - clientRect.left,
            y: clientPoint.y - clientRect.top
        };
        if (point.x > clientRect.width) {
            point.x = clientRect.width;
        }
        if (point.x < 0) {
            point.x = 0;
        }
        if (point.y > clientRect.height) {
            point.y = clientRect.height;
        }
        if (point.y < 0) {
            point.y = 0;
        }
        return point;
    }

    function adjustTranslate(viewBBox, scale, translate) {
        var realSize = {
            width: viewBBox.width * scale,
            height: viewBBox.height * scale
        };
        if (translate.x > 0) {
            translate.x = 0;
        }
        if (translate.x < viewBBox.width - realSize.width) {
            translate.x = viewBBox.width - realSize.width;
        }
        if (translate.y > 0) {
            translate.y = 0;
        }
        if (translate.y < viewBBox.height - realSize.height) {
            translate.y = viewBBox.height - realSize.height;
        }
    }

    function zoomAxis(service, scale) {
        ["valueAxis", "valueAxis2", "categoryAxis"].forEach(function(e) {
            var module = service.getModule("main." + e);
            if (module && module.zoom) {
                module.zoom(scale);
            }
        });
    }

    function translateAxis(service, translate) {
        ["v-m-xAxis", "v-m-xAxis2", "v-m-yAxis", "v-m-yAxis2"].forEach(function(e, i) {
            var node = service.getRootNode().select("." + e);
            if (!node.node()) {
                return;
            }
            if (i < 2) { //horizontal axis
                node.select(".v-tick-group").attr("transform", "translate(" + translate.x +
                    ", 0)");
                node.select(".v-label-group").attr("transform", "translate(" + translate.x +
                    ", 0)");
            } else { //vertical axis
                node.select(".v-tick-group").attr("transform", "translate(0, " + translate
                    .y + ")");
                node.select(".v-label-group").attr("transform", "translate(0, " +
                    translate.y + ")");
            }
        });
    }

    function adjustScrollbar(service, originalBox, scale) {
        var xyContainer = service.getModule("main");
        if (xyContainer) {
            var scrollbar;
            if (xyContainer.getVScrollbar && xyContainer.getVScrollbar()) {
                scrollbar = xyContainer.getVScrollbar();
                scrollbar.setProperties({
                    contentSize: originalBox.height * scale
                });
                scrollbar.render();
            }
            if (xyContainer.getHScrollbar && xyContainer.getHScrollbar()) {
                scrollbar = xyContainer.getHScrollbar();
                scrollbar.setProperties({
                    contentSize: originalBox.width * scale
                });
                scrollbar.render();
            }
        }
    }

    function moveScrollbar(service, originalBox, scale, translate) {
        var xyContainer = service.getModule("main");
        if (xyContainer) {
            var scrollbar;
            if (xyContainer.getVScrollbar && xyContainer.getVScrollbar()) {
                scrollbar = xyContainer.getVScrollbar();
                scrollbar.moveTo(Math.abs(translate.y / (originalBox.height * scale)));
            }
            if (xyContainer.getHScrollbar && xyContainer.getHScrollbar()) {
                scrollbar = xyContainer.getHScrollbar();
                scrollbar.moveTo(Math.abs(translate.x / (originalBox.width * scale)));
            }
        }
    }

    function showScrollbar(service) {
        ScrollbarUtil.showScrollbar(service, 800);
    }

    function pinchHandlerCSV(event, service) {
        if (service.getProperties().get("plotArea.isFixedDataPointSize") || !UADetector.isMobile()) {
            return;
        }
        var scale = event.data.scale;
        var zoomLevel = service.getStatus("zoomLevel");
        var maxZoomLevel = service.getStatus("maxZoomLevel");
        var updatedScale = scale / service.getStatus("lastZoomLevel");
        var actualScale = scale * zoomLevel;
        if (actualScale < 1) {
            actualScale = 1;
        }
        if (actualScale > maxZoomLevel) {
            actualScale = maxZoomLevel;
            updatedScale = 1;
        }
        scale = actualScale / zoomLevel;
        service.setStatus("lastZoomLevel", scale);

        if (event.name === "pinchstart") {
            updatedScale = scale;
        }
        var plotMainNode = service.getRootNode().select(".v-plot-main").node();
        var centerPoint = getRelativePoint(event.data.point, plotMainNode.getBoundingClientRect());
        var matrix = plotMainNode.getTransformToElement(plotMainNode.parentNode);
        var translate = {
            x: matrix.e - centerPoint.x * (updatedScale - 1),
            y: matrix.f - centerPoint.y * (updatedScale - 1)
        };

        var canvasBBox = service.getStatus("canvasBBox");
        adjustTranslate(canvasBBox, actualScale, translate);
        var transformString = "translate(" + translate.x + ", " + translate.y + ")";
        if (event.name === "pinchend") {
            service.setStatus("zoomLevel", actualScale);
            service.getModule("main.plot").zoom(actualScale);
            service.fireEvent("updateLightLine");
        } else {
            transformString += " scale(" + scale + ")";
        }

        plotMainNode.setAttribute("transform", transformString);

        zoomAxis(service, actualScale);
        translateAxis(service, translate);

        adjustScrollbar(service, canvasBBox, actualScale);
        moveScrollbar(service, canvasBBox, actualScale, translate);
        showScrollbar(service);
    }

    function zoom(event, service) {
        var plotMainNode = service.getRootNode().select(".v-plot-main").node();
        var centerPoint = getRelativePoint(event.data.point, plotMainNode.getBoundingClientRect());
        var matrix = plotMainNode.getTransformToElement(plotMainNode.parentNode);
        var scale = event.data.scale;
        if (scale * service.getStatus("zoomLevel") < 1) {
            scale = 1 / service.getStatus("zoomLevel");
        }

        var maxZoomLevel = service.getStatus("maxZoomLevel");

        if (scale * service.getStatus("zoomLevel") > maxZoomLevel) {
            scale = maxZoomLevel / service.getStatus("zoomLevel");
        }


        var updatedScale = scale / service.getStatus("lastZoomLevel");
        var translate = {
            x: matrix.e - centerPoint.x * (updatedScale - 1),
            y: matrix.f - centerPoint.y * (updatedScale - 1)
        };
        var realscale = scale * service.getStatus("zoomLevel");
        var canvasBBox = service.getStatus("canvasBBox");
        adjustTranslate(canvasBBox, realscale, translate);
        //service.setStatus('lastTranslate', translate);

        service.getModule("main.plot").zoom(realscale);

        plotMainNode.setAttribute("transform", "translate(" + translate.x + ", " +
            translate.y + ")");
        zoomAxis(service, realscale);
        translateAxis(service, translate);

        adjustScrollbar(service, canvasBBox, realscale);
        moveScrollbar(service, canvasBBox, realscale, translate);
        showScrollbar(service);

        service.setStatus("lastZoomLevel", scale);
        return realscale;
    }

    return [{
        "id": "initialized_pinch",
        "triggerEvent": {
            "name": "afterChartRendered",
            "supportedChartTypes": [].concat(csvChartTypes, bubbleChartTypes)
        },
        "handler": function(event, service) {
            service.fireEvent(event, true);
            if (service.getProperties().get("plotArea.isFixedDataPointSize") || !
                UADetector.isMobile()) {
                return;
            }
            var maxZoomLevel = Number.MAX_VALUE;
            service.setStatus("zoomLevel", 1);
            var plotBoundNode = service.getRootNode().select(".v-plot-bound").node();
            if (plotBoundNode) {
                var plotBBox = {
                    width: plotBoundNode.getAttribute("width"),
                    height: plotBoundNode.getAttribute("height")
                };
                service.setStatus("canvasBBox", plotBBox);
                var xyContainer = service.getModule("main");
                if (xyContainer) {
                    var scrollbar;
                    if (xyContainer.getVScrollbar && xyContainer.getVScrollbar()) {
                        scrollbar = xyContainer.getVScrollbar();
                        scrollbar.setProperties({
                            trackSize: plotBBox.height,
                            contentSize: plotBBox.height,
                            visibility: "hidden"
                        });
                        scrollbar.render();
                    }
                    if (xyContainer.getHScrollbar && xyContainer.getHScrollbar()) {
                        scrollbar = xyContainer.getHScrollbar();
                        scrollbar.setProperties({
                            trackSize: plotBBox.width,
                            contentSize: plotBBox.width,
                            visibility: "hidden"
                        });
                        scrollbar.render();
                    }

                    var isHorizontal;
                    if (service.getModule("main.plot").isHorizontal) {
                        isHorizontal = service.getModule("main.plot").isHorizontal();
                    } else {
                        isHorizontal = false;
                    }
                    var categoryAxisModule = service.getModule("main.categoryAxis");
                    var valueAxisModule = service.getModule("main.valueAxis");
                    var valueAxis2Module = service.getModule("main.valueAxis2");

                    var categoryMaxZoomLevel = Number.MAX_VALUE;
                    var valueAxisMaxZoomLevel = Number.MAX_VALUE;
                    var valueAxis2MaxZoomLevel = Number.MAX_VALUE;

                    if (categoryAxisModule) { //we are csv charts
                        var categoryCellWidth = categoryAxisModule.getRangeInterval();
                        if (categoryCellWidth) {
                            categoryMaxZoomLevel = (isHorizontal ? plotBBox.height :
                                plotBBox.width) / categoryCellWidth;
                        }

                        valueAxisMaxZoomLevel = valueAxisModule.getMaxZoomRatio();
                        if (valueAxis2Module) {
                            valueAxis2MaxZoomLevel = valueAxis2Module.getMaxZoomRatio();
                        }
                    } else { //we are bubble and scatter

                        valueAxisMaxZoomLevel = valueAxisModule.getMaxZoomRatio();
                        valueAxis2MaxZoomLevel = valueAxis2Module.getMaxZoomRatio();
                    }
                    maxZoomLevel = Math.min(categoryMaxZoomLevel,
                        valueAxisMaxZoomLevel, valueAxis2MaxZoomLevel);
                }
            }
            service.setStatus("maxZoomLevel", maxZoomLevel);
            // service.setStatus('lastTranslate', {
            //     x: 0,
            //     y: 0
            // });
        }
    }, {
        "id": "pinchstart_on_eventLayer_csv",
        "triggerEvent": {
            "name": "pinchstart",
            "targets": "v-m-root",
            "supportedChartTypes": csvChartTypes
        },
        "handler": pinchHandlerCSV
    }, {
        "id": "pinchmove_on_eventLayer_csv",
        "triggerEvent": {
            "name": "pinchmove",
            "targets": "v-m-root",
            "supportedChartTypes": csvChartTypes
        },
        "handler": pinchHandlerCSV
    }, {
        "id": "pinchend_on_eventLayer_csv",
        "triggerEvent": {
            "name": "pinchend",
            "targets": "v-m-root",
            "supportedChartTypes": csvChartTypes
        },
        "handler": pinchHandlerCSV
    }, {
        "id": "update_light_line_after_pinch",
        "triggerEvent": {
            "name": "updateLightLine",
        },
        "handler": function(event, service) {
            var plotMainNode = service.getRootNode().select(".v-plot-main").node();
            var lightLines = plotMainNode.querySelectorAll("." + CLASS_LIGHT_LINE);

            [].forEach.call(lightLines, function(lineNode) {
                var config = {
                    points: [
                        DataGraphics.getData(DataPointUtils.find(plotMainNode,
                            lineNode.getAttribute(DATA_ATTR_FROM))).translate,
                        DataGraphics.getData(DataPointUtils.find(plotMainNode,
                            lineNode.getAttribute(DATA_ATTR_TO))).translate
                    ]
                };
                LineRenderer.update(lineNode.querySelector("path.v-lines"), config);
            });
        }
    }, {
        "id": "2Xfingertouch_show_indicator_csv",
        "triggerEvent": {
            "name": "2xtouchstart",
            "targets": "v-m-root",
            "supportedChartTypes": [].concat(csvChartTypes, bubbleChartTypes)
        },
        "handler": function(event, service) {
            if (service.getProperties().get("plotArea.isFixedDataPointSize") || !
                UADetector.isMobile()) {
                return;
            }
            service.fireEvent("hideDetail", {
                mode: "actionMode"
            });
            showScrollbar(service);
        }
    }, {
        "id": "pan_start_on_plot_pinch_csv",
        "triggerEvent": {
            "name": "dragstart",
            "targets": "v-m-plot",
            "supportedChartTypes": [].concat(csvChartTypes, bubbleChartTypes)
        },
        "handler": function(event, service) {
            if (service.getProperties().get("plotArea.isFixedDataPointSize") || !
                UADetector.isMobile()) {
                return;
            }
            service.fireEvent("hideDetail", {
                mode: "actionMode"
            });
            service.setStatus("panLastPoint", event.data.point);
            if (service.getStatus("needToPreventDefault")) {
                event.data.originalEvent.preventDefault();
            }
            showScrollbar(service);
        }
    }, {
        "id": "pan_move_on_plot_pinch_csv",
        "triggerEvent": {
            "name": "dragmove",
            "targets": "v-m-plot",
            "supportedChartTypes": [].concat(csvChartTypes, bubbleChartTypes)
        },
        "handler": function(event, service) {
            if (service.getProperties().get("plotArea.isFixedDataPointSize") || !
                UADetector.isMobile()) {
                return;
            }
            var startPoint = service.getStatus("panLastPoint");
            if (!startPoint) {
                return;
            }
            var currentPoint = event.data.point;
            var offsetX = currentPoint.x - startPoint.x;
            var offsetY = currentPoint.y - startPoint.y;

            service.setStatus("panLastPoint", currentPoint);

            var plotMainNode = service.getRootNode().select(".v-plot-main").node();
            var matrix = plotMainNode.getTransformToElement(plotMainNode.parentNode);
            var translate = {
                x: matrix.e + offsetX,
                y: matrix.f + offsetY
            };

            var canvasBBox = service.getStatus("canvasBBox");
            adjustTranslate(canvasBBox, service.getStatus("zoomLevel"), translate);
            plotMainNode.setAttribute("transform", "translate(" + translate.x + ", " +
                translate.y + ")");
            translateAxis(service, translate);

            moveScrollbar(service, canvasBBox, service.getStatus("zoomLevel"),
                translate);

            var xOver = service.getModule("main").getHScrollbar().thumbOverTrack(-offsetX),
                yOver = service.getModule("main").getVScrollbar().thumbOverTrack(-offsetY),
                needToPreventDefault = !(xOver && yOver);

            if (needToPreventDefault) {
                event.data.originalEvent.preventDefault();
            } else if (UADetector.isWindowsSurface() || UADetector.isWindowsPhone()) {
                window.scrollBy(-offsetX, -offsetY);
            }

            service.setStatus("needToPreventDefault", needToPreventDefault);

            showScrollbar(service);
        }
    }, {
        "id": "pan_end_on_plot_pinch_csv",
        "triggerEvent": {
            "name": "dragend",
            "targets": "v-m-plot",
            "supportedChartTypes": [].concat(csvChartTypes, bubbleChartTypes)
        },
        "handler": function(event, service) {
            if (service.getProperties().get("plotArea.isFixedDataPointSize") || !
                UADetector.isMobile()) {
                return;
            }
            if (service.getStatus("needToPreventDefault")) {
                event.data.originalEvent.preventDefault();
            }
            service.removeStatus("panLastPoint");
        }
    }, {
        "id": "pinchstart_on_eventLayer_bubble",
        "triggerEvent": {
            "name": "pinchstart",
            "targets": "v-m-root",
            "supportedChartTypes": bubbleChartTypes
        },
        "handler": function(event, service) {
            if (service.getProperties().get("plotArea.isFixedDataPointSize") || !
                UADetector.isMobile()) {
                return;
            }
            service.setStatus("lastZoomLevel", 1);
            var scale = event.data.scale;
            if (scale !== 1) {
                zoom(event, service);
            }
            showScrollbar(service);
        }
    }, {
        "id": "pinchmove_on_eventLayer_bubble",
        "triggerEvent": {
            "name": "pinchmove",
            "targets": "v-m-root",
            "supportedChartTypes": bubbleChartTypes
        },
        "handler": function(event, service) {
            if (service.getProperties().get("plotArea.isFixedDataPointSize") || !
                UADetector.isMobile()) {
                return;
            }
            zoom(event, service);
        }
    }, {
        "id": "pinchend_on_eventLayer_bubble",
        "triggerEvent": {
            "name": "pinchend",
            "targets": "v-m-root",
            "supportedChartTypes": bubbleChartTypes
        },
        "handler": function(event, service) {
            if (service.getProperties().get("plotArea.isFixedDataPointSize") || !
                UADetector.isMobile()) {
                return;
            }
            var scale = event.data.scale / service.getStatus("lastZoomLevel");
            if (scale !== 1) {
                service.setStatus("zoomLevel", zoom(event, service));
            } else {
                scale = service.getStatus("lastZoomLevel") * service.getStatus(
                    "zoomLevel");
                service.setStatus("zoomLevel", scale);
            }
        }
    }];
});

define('sap/viz/chart/components/behavior/config/tooltip/Tooltip',[
    "sap/viz/framework/common/format/FormatManager",
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/framework/common/util/ObjectUtils",
    "sap/viz/framework/common/lang/LangManager",
    "sap/viz/framework/common/util/UADetector",
    "sap/viz/framework/property/PropertyManager",
    "sap/viz/framework/common/log/Logger"
], function Setup(FormatManager, TypeUtils, ObjectUtils, langManager, UADetector,
    PropertyManager, Logger) {
    var INFO_MODE = "infoMode",
        ACTION_MODE = "actionMode",
        DEFAULT_SELECTED_NOTIFICATION = "values selected";

    var DEFAULT_DISPLAY_CONFIG = {
        padding: "10px",
        paddingBottom: "10",
        horizontalLine: {
            borderBottom: "solid 1px",
            marginTop: "10px"
        },
        dimensionName: {
            fontSize: "12px",
            fontFamily: "Arial",
            paddingBottom: "8px",
            whiteSpace: "nowrap",
            textOverflow: "ellipsis",
            overflow: "hidden"
        },
        dimensionValue: {
            fontSize: "13px",
            fontFamily: "Arial",
            fontWeight: "bold",
            paddingBottom: "8px",
            paddingLeft: "7px",
            whiteSpace: "nowrap",
            textOverflow: "ellipsis",
            overflow: "hidden"
        },
        measureName: {
            fontSize: "12px",
            fontFamily: "Arial",
            paddingBottom: "8px",
            whiteSpace: "nowrap",
            textOverflow: "ellipsis",
            overflow: "hidden"
        },
        measureValue: {
            fontSize: "13px",
            fontFamily: "Arial",
            fontWeight: "bold",
            paddingBottom: "8px",
            paddingLeft: "7px",
            whiteSpace: "nowrap",
            textOverflow: "ellipsis",
            overflow: "hidden"
        },
        selectedText: {
            fontSize: "12px",
            fontFamily: "Arial",
            fontWeight: "bold",
            marginTop: "8px"
        },
        closeButton: {
            size: 20,
            borderSize: 2,
            borderStyle: "solid",
            forkSize: 10
        },
        mouseMarginTop: 3,
        truncatedWidth: 140,
        contentMaxSize: "42px",
        truncatedHeight: 12,
        borderWidth: "1px",
        borderStyle: "solid",
        borderRadius: "3px",
        boxShadow: "1px 1px #AFAFAF"
    };


    function setRendererFunc(value, config) {
        if (TypeUtils.isFunction(value)) {
            return value;
        } else {
            return config.defaultValue;
        }
    }

    var Tooltip = function(properties) {
        this._properties = properties;
        this._properties.add({
            "tooltip": {
                "preRender": {
                    //defaultValue: null,
                    set: setRendererFunc
                },
                "postRender": {
                    //defaultValue: null,
                    set: setRendererFunc
                },
                "formatString": {
                    //defaultValue: null,
                    set: function(value, config) {
                        if (TypeUtils.isString(value) || TypeUtils.isPlainObject(value)) {
                            return value;
                        } else {
                            return config.defaultValue;
                        }
                    }
                }
            }
        });
        //this._properties = manifest.props(null);
        this._display = ObjectUtils.extend(true, {}, DEFAULT_DISPLAY_CONFIG);

        this._defaultToolTipColors = {
            backgroundColor: "",
            borderTopColor: "",
            borderBottomColor: "",
            borderLeftColor: "",
            borderRightColor: "",
            dimensionName: "",
            dimensionValue: "",
            measureName: "",
            measureValue: "",
            separationLineSingleColor: "",
            footerLabelColor: "",
            closeButtonBackground: "",
            closeButtonBorderColor: "#cccccc"
        };

        this._div = null;
        this._borderDiv = null;
        this._mainDiv = null;
        this._isShown = false;
        this._closeButtonDiv = null;
        this._extensionDiv = null;
        this._mode = null;
        this._dimensionOrMeasureTitles = [];

        this._parentNodeRect = null;    
        this._isAnchored = false;

        if (UADetector.isWindowsSurface()) {
            this._touchEvent = {
                touchstart: "pointerdown",
                touchend: "pointerup"
            };
        } else {
            this._touchEvent = {
                touchstart: "touchstart",
                touchend: "touchend"
            };
        }
    };

    function handleNull(_) {
        if (_ == null) {
            return langManager.get("IDS_ISNOVALUE");
        } else {
            return _;
        }
    }

    Tooltip.prototype.onClose = function(cb){
        this._onClose = cb;
    };

    Tooltip.prototype._clearGlobalValues = function() {
        this._dimensionOrMeasureTitles = [];
    };

    Tooltip.prototype.render = function(selection) {
        if (selection !== null && selection !== undefined) {
            var sel = d3.select(selection);
            this._div = sel.select(".v-m-tooltip");
            if (this._div.node() === null) {
                this._div = sel.append("div").attr("class", "v-m-tooltip"); //.attr("id", "v-m-tooltip");
            }
        }
        return this;
    };

    Tooltip.prototype._formatTooltipData = function(data) {
        if (data && data.data && data.data.timeMeasure !== undefined && data.data.timeMeasure >=
            0) {
            var dateFormat = function(val) {
                return FormatManager.format(new Date(val), "dd/mm/yyyy hh:mm");
            };
            for (var j = 0, k = 0; j < data.data.length; j++) {
                if (data.data[j].type === "Measure") {
                    if (data.data.timeMeasure === k) {
                        data.data[j].value = dateFormat(new Date(parseInt(data.data[j].value)));
                        break;
                    }
                    k++;
                }
            }
        }

        if (TypeUtils.isArray(data.data)) {
            var body = data.data;
            var formatString, measureNum, measureItem;
            formatString = this._properties.get("tooltip.formatString");
            measureNum = 0;
            for (var i = -1; ++i < body.length;) {
                if (i === body.timeMeasure) {
                    continue;
                }
                measureItem = body[i];
                if (measureItem.type !== "Measure" || measureItem.value === null) {
                    continue;
                }
                if (!TypeUtils.isExist(formatString)) {
                    measureItem.value = FormatManager.format(measureItem.value, formatString);
                } else if (TypeUtils.isString(formatString)) {
                    measureItem.value = FormatManager.format(measureItem.value, formatString);
                } else if (!TypeUtils.isEmptyObject(formatString)) {
                    var measureItemName = formatString[measureItem.id];
                    if (measureItemName) {
                        measureItem.value = FormatManager.format(measureItem.value,
                            measureItemName);
                    }
                }
            }
        }
        return data;
    };

    var triggerCallback = function(callback, vis, eventData) {
        if (callback) {
            try {
                callback(vis, eventData);
            } catch (e) {
                Logger.error("ERROR in Tooltip callback");
            }
        }
    };

    Tooltip.prototype.showTooltip = function(eventData) {
        if (!this._div) {
            this.render(eventData.container);
        }

        this._mode = eventData.mode;
        var data = eventData;
        data = this._formatTooltipData(data);
        if (this._borderDiv !== null) {
            this._borderDiv.remove();
        }
        if (this._properties.get("tooltip.visible")) {         
            this._borderDiv = this._div.append("div").attr("class", "v-background");
            this._mainDiv = this._borderDiv.append("div").attr("class", "v-tooltip-mainDiv")
                .style("position", "relative").style("direction", "ltr");

            if (UADetector.isMobile()) {
                this._closeButtonDiv = this._borderDiv.append("div").attr("class",
                    "v-closeButton")
                    .style("position", "absolute").style("direction", "ltr");
                var that = this;
                this._closeButtonDiv.on(this._touchEvent.touchstart, function() {
                    d3.event.stopPropagation();
                    d3.event.preventDefault();
                }, true).on(this._touchEvent.touchend, function() {
                    if (that._onClose && TypeUtils.isFunction(that._onClose)){
                        that._onClose.call(that);
                    }
                    that.hideTooltip(that._mode);
                    d3.event.stopPropagation();
                    d3.event.preventDefault();
                }, true);
            }

            this._extensionDiv = this._borderDiv.append("div").attr("class",
                "v-tooltip-extension")
                .style("position", "relative").style("display", "block").style("margin-top",
                    "10px");
            this._updateTooltipStyle();
            if (data.mode && data.mode === ACTION_MODE) { // show action bottom in action mode
                triggerCallback(this._properties.get("tooltip.preRender"), this._extensionDiv);
            }
            this._renderTooltip(data);
            triggerCallback(this._properties.get("tooltip.postRender"), this._borderDiv);
            this._isShown = true;
        }

        this._parentNodeRect = this._div.node().parentNode.getBoundingClientRect();
        this._isAnchored = eventData.isAnchored;
    };

    Tooltip.prototype.isShown = function(){
        return this._isShown;
    };

    Tooltip.prototype.hideTooltip = function(mode) {
        if (mode == null || mode === this._mode) {
            if (this._borderDiv) {
                this._borderDiv.remove();
                this._borderDiv = null;
            }
            if (this._mainDiv) {
                this._mainDiv = null;
            }
            if (this._extensionDiv) {
                this._extensionDiv = null;
            }

            if (this._closeButtonDiv) {
                this._closeButtonDiv.on(this._touchEvent.touchend, null);
                this._closeButtonDiv.on(this._touchEvent.touchstart, null);
                this._closeButtonDiv = null;
            }
            this._defaultToolTipColors.background = "";
            this._defaultToolTipColors.border = "";
            this._defaultToolTipColors.dimensionName = "";
            this._defaultToolTipColors.dimensionValue = "";
            this._defaultToolTipColors.measureName = "";
            this._defaultToolTipColors.measureValue = "";
            this._defaultToolTipColors.separationLineSingleColor = "";
            if (this._div) {
                this._div.attr("visibility", "hidden")
                    .style("padding", "0px")
                    .style("max-height", "")
                    .style("top", "-65535px")
                    .style("left", "-65535px");
            }
            this._clearGlobalValues();
            this._isShown = false;
        }
    };

    var calculateDesktopPos = function(limit, position) {
        var x = position.x;
        var y = position.y;

        var paddingBottom = this._display.paddingBottom;
        var mouseMarginTop = this._display.mouseMarginTop;

        var divNode = this._div.node();
        var offsetWidth = divNode.offsetWidth;
        var offsetHeight = divNode.offsetHeight;

        if ((x + offsetWidth / 2) > limit.right) {
            x = limit.right - offsetWidth;
        } else if (x - offsetWidth / 2 < limit.left) {
            x = limit.left;
        } else {
            x = x - offsetWidth / 2;
        }
        if (this._mode !== INFO_MODE && (y - mouseMarginTop - offsetHeight) < limit.top) {
            y = y + 13;
        } else if (this._mode === INFO_MODE && (y - paddingBottom - mouseMarginTop -
            offsetHeight) < limit.top) {
            //remove to size of mouse, it is a estimation value not the actual value. comes from UX evian zhang.
            y = y + 13;
        } else {
            y = y - mouseMarginTop - offsetHeight;
            if (this._mode === INFO_MODE) {
                y = y - paddingBottom;
            }
        }
        if (y + offsetHeight > limit.bottom) {
            //handle the case chart height is very limited
            if (position.y <= (limit.bottom + limit.top) / 2) {
                y = position.y + 13;
            } else {
                y = position.y - mouseMarginTop - offsetHeight;
                if (this._mode === INFO_MODE) {
                    y = y - paddingBottom;
                }
            }
        }

        return {
            "x": x,
            "y": y
        };
    };

    var calculateMobilePos = function(limit, position) {
        var x = position.x;
        var y = position.y;

        var closeButtonSize = this._display.closeButton.size;
        var mouseMarginTop = this._display.mouseMarginTop;

        var divNode = this._div.node();
        var offsetWidth = divNode.offsetWidth;
        var offsetHeight = divNode.offsetHeight;

        if ((x + offsetWidth / 2 + closeButtonSize / 2) > limit.right) {
            x = limit.right - offsetWidth - closeButtonSize / 2;
        } else if (x - offsetWidth / 2 < limit.left) {
            x = limit.left;
        } else {
            x = x - offsetWidth / 2 - closeButtonSize / 2;
        }
        if ((y - mouseMarginTop - offsetHeight - closeButtonSize / 2) < limit.top) {
            y = y + 13 + closeButtonSize / 2; //remove to bottom of mouse
        } else {
            y = y - mouseMarginTop - offsetHeight;
        }

        if (y + offsetHeight + closeButtonSize / 2 > limit.bottom) {
            if (position.y <= (limit.bottom + limit.top) / 2) {
                y = position.y + 13 + closeButtonSize / 2;
            } else {
                y = position.y - mouseMarginTop - offsetHeight;
            }
        }

        return {
            "x": x,
            "y": y
        };
    };

    Tooltip.prototype._calculatePos = function(position) {
        var limit;
        var boundRect = this._div.node().parentNode.getBoundingClientRect();
        if (this._properties.get("tooltip.layinChart")) {
            limit = {
                top: boundRect.top,
                left: boundRect.left,
                bottom: boundRect.bottom,
                right: boundRect.right
            };
        } else {
            var winWidthHeight = [0, 0];
            ["clientWidth", "clientHeight"].forEach(function(e, i) {
                if (document.documentElement[e]) {
                    winWidthHeight[i] = document.documentElement[e];
                } else if ((document.body) && (document.body[e])) {
                    winWidthHeight[i] = document.body[e];
                }
            });
            limit = {
                top: 0,
                left: 0,
                bottom: winWidthHeight[1],
                right: winWidthHeight[0]
            };
        }
        var calcFunc = UADetector.isMobile() ? calculateMobilePos : calculateDesktopPos;
        var res = calcFunc.call(this, limit, position);
        return {
            "x": res.x - boundRect.left,
            "y": res.y - boundRect.top
        };

    };

    Tooltip.prototype._adjustTooltipWidth = function() {
        for (var i = 0; i < this._dimensionOrMeasureTitles.length; i++) {
            if (this._dimensionOrMeasureTitles[i].node().offsetWidth > this._display.truncatedWidth) {
                // if content size is bigger than truncatedWidth, set max width for content div
                this._dimensionOrMeasureTitles[i].style("max-width", this._display.contentMaxSize);
            }
        }
    };

    Tooltip.prototype._adjustTooltipHeight = function(winHeight) {
        this._div.style("max-height", (winHeight / 2 - this._display.truncatedHeight) + "px");
    };

    Tooltip.prototype._renderTooltip = function(data) {
        if (!this._extensionDiv.node() || this._extensionDiv.node().childNodes.length === 0) {
            this._extensionDiv.remove();
        }
        this._drawContent(data);

        this._borderDiv.style("background", this._defaultToolTipColors.backgroundColor);
        this._borderDiv.style("border-color", this._defaultToolTipColors.border);
        if (this._defaultToolTipColors.borderTopColor !== "") {
            this._borderDiv.style("border-top-color", this._defaultToolTipColors.borderTopColor);
        }
        if (this._defaultToolTipColors.borderBottomColor !== "") {
            this._borderDiv.style("border-bottom-color", this._defaultToolTipColors.borderBottomColor);
        }
        if (this._defaultToolTipColors.borderLeftColor !== "") {
            this._borderDiv.style("border-left-color", this._defaultToolTipColors.borderLeftColor);
        }
        if (this._defaultToolTipColors.borderRightColor !== "") {
            this._borderDiv.style("border-right-color", this._defaultToolTipColors.borderRightColor);
        }
        this._div.style("position", "absolute")
            .style("left", "0px")
            .style("top", "0px")
            .style("width", "auto")
            .style("height", "auto")
            .style("float", "left")
            .style("visibility", "hidden")
            .style("line-height", "normal");
        if (data.mode === ACTION_MODE) {
            this._div.style("padding-bottom", this._display.paddingBottom + "px");
        }
        this._borderDiv.style("border-style", this._display.borderStyle)
            .style("border-width", this._display.borderWidth)
            .style("border-radius", this._display.borderRadius)
            .style("box-shadow", this._display.boxShadow)
            .style("overflow-x", "hidden")
            .style("overflow-y", "auto")
            .style("padding", this._display.padding);
        var winWidth, winHeight;
        if (document.documentElement.clientWidth) {
            winWidth = document.documentElement.clientWidth;
        } else if ((document.body) && (document.body.clientWidth)) {
            winWidth = document.body.clientWidth;
        }
        if (document.documentElement.clientHeight) {
            winHeight = document.documentElement.clientHeight;
        } else if ((document.body) && (document.body.clientHeight)) {
            winHeight = document.body.clientHeight;
        }
        if (this._div.node().offsetWidth > winWidth) {
            // if div size is bigger than browser width, adjust tooltip size
            this._adjustTooltipWidth();
        }
        if (this._div.node().offsetHeight > winHeight) {
            this._adjustTooltipHeight(winHeight);
        }
        var tooltipPos = this._calculatePos(data.position);
        var divNode = this._div.node();
        this._div.style("left", tooltipPos.x + "px")
            .style("top", tooltipPos.y + "px")
            .style("visibility", "visible")
            .style("white-space", "nowrap");

        if (UADetector.isMobile()) {
            //the goal of the line is to avoid the incorrect display of the closeButton when zoom out the page on pad.
            var offw = divNode.offsetWidth;
            var closeButtonSize = this._display.closeButton.size,
                closeButtonRadius = closeButtonSize / 2;
            var forkSize = this._display.closeButton.forkSize,
                forkRadius = forkSize / 2;
            var borderSize = this._display.closeButton.borderSize;
            var forkX = closeButtonRadius - forkRadius;
            var forkY = closeButtonRadius - borderSize / 2;
            var transformName = "-webkit-transform";
            if (UADetector.isWindowsSurface()) {
                transformName = "transform";
            }

            var styleObj = {
                "position": "absolute",
                "height": this._display.closeButton.borderSize,
                "width": forkSize + "px",
                "border-bottom-color": this._defaultToolTipColors.closeButtonBorderColor,
                "border-bottom-width": this._display.closeButton.borderSize + "px",
                "border-bottom-style": this._display.closeButton.borderStyle,
                "top": forkY + "px",
                "left": forkX + "px"
            };
            styleObj[transformName] = "rotate(-45deg)";
            this._closeButtonDiv.append("div").style(styleObj);
            styleObj[transformName] = "rotate(45deg)";
            this._closeButtonDiv.append("div").style(styleObj);

            this._closeButtonDiv.style("left", offw - closeButtonRadius - this._display.closeButton.borderSize+'px')
                .style("top", -closeButtonRadius + "px")
                .style("width", closeButtonSize + "px")
                .style("height", closeButtonSize + "px")
                .style("border-width", this._display.closeButton.borderSize + "px")
                .style("border-radius", closeButtonSize + "px")
                .style("border-style", this._display.closeButton.borderStyle)
                .style("border-color", this._defaultToolTipColors.closeButtonBorderColor)
                .style("background", this._defaultToolTipColors.closeButtonBackground);
        }
    };

    Tooltip.prototype._drawContent = function(data) {
        // draw body
        this._drawDimensionAndMeasure(data.data);
        if (data.selectedNumber && data.selectedNumber > 1 && data.data && data.mode ===
            ACTION_MODE) {
            // draw separate line
            var line = this._mainDiv.append("div").attr("class", "v-separationline")
                .style("margin-top", this._display.horizontalLine.marginTop)
                .style("border-bottom-width", "1px")
                .style("border-bottom-style", "solid");
            if (this._defaultToolTipColors.separationLineSingleColor !== "") {
                line.style("border-bottom-color", this._defaultToolTipColors.separationLineSingleColor);
            }
        }
        if (data.mode === ACTION_MODE && data.selectedNumber && (data.data && data.selectedNumber >
            1 || !data.data)) {
            // draw selected text if selected number > 1
            var style = this._getStyle(this._display.selectedText);
            if (this._defaultToolTipColors.footerLabelColor !== "") {
                style += ";color:" + this._defaultToolTipColors.footerLabelColor;
            }
            if (!data.data) { // set margin top to zero if no info
                style = style.replace(/margin-top:[0-9]+px/, "margin-top:0px");
            }
            var valuesSelectedText = langManager.get("IDS_VALUES_SELECTED");
            if (!valuesSelectedText) {
                valuesSelectedText = DEFAULT_SELECTED_NOTIFICATION;
            }
            this._mainDiv.append("div").attr("style", style)
                .attr("class", "v-footer-label tooltipfooterlabel")
                .text(data.selectedNumber + " " + valuesSelectedText);
        }
    };


    Tooltip.prototype._drawDimensionAndMeasure = function(data) {
        if (data && data.length) {
            var table = this._mainDiv.append("table").attr("class",
                    "v-tooltip-dimension-measure")
                .style("border-collapse", "collapse");
            var nameStyle, valueStyle, style, key, tr, td;
            var dims = [],
                measures = [],
                otherInfos = [];
            for (var i = -1; ++i < data.length;) {
                if (data[i].type === "Dimension") {
                    dims.push(data[i]);
                } else if (data[i].type === "Measure") {
                    measures.push(data[i]);
                } else {
                    otherInfos.push(data[i]);
                }
            }

            for (i = -1; ++i < dims.length;) {
                if (i === dims.length - 1 && measures.length === 0 && otherInfos.length === 0) {
                    // padding bottom of last dimension or measure is zero
                    nameStyle = ObjectUtils.extend(true, {}, this._display.dimensionName);
                    nameStyle.paddingBottom = "0px";
                    valueStyle = ObjectUtils.extend(true, {}, this._display.dimensionValue);
                    valueStyle.paddingBottom = "0px";
                } else {
                    nameStyle = this._display.dimensionName;
                    valueStyle = this._display.dimensionValue;
                }
                tr = table.append("tr");
                //Dimension name
                style = this._getStyle(nameStyle);
                if (this._defaultToolTipColors.dimensionName !== "") {
                    style += ";color:" + this._defaultToolTipColors.dimensionName;
                }

                td = tr.append("td").attr("style", style)
                    .text(handleNull(dims[i].name) + ":")
                    .attr("class", "v-body-dimension-label");
                this._dimensionOrMeasureTitles.push(td);
                //Dimension value
                style = this._getStyle(valueStyle);
                if (this._defaultToolTipColors.dimensionValue !== "") {
                    style += ";color:" + this._defaultToolTipColors.dimensionValue;
                }

                tr.append("td").attr("style", style)
                    .text(handleNull(dims[i].value))
                    .attr("class", "v-body-dimension-value");
            }

            for (i = -1; ++i < measures.length;) {
                if (i === measures.length - 1 && otherInfos.length === 0) {
                    nameStyle = ObjectUtils.extend(true, {}, this._display.measureName);
                    nameStyle.paddingBottom = "0px";
                    valueStyle = ObjectUtils.extend(true, {}, this._display.measureValue);
                    valueStyle.paddingBottom = "0px";
                } else {
                    nameStyle = this._display.dimensionName;
                    valueStyle = this._display.dimensionValue;
                }
                tr = table.append("tr");
                //Meansure name
                style = this._getStyle(nameStyle);
                if (this._defaultToolTipColors.measureName !== "") {
                    style += ";color:" + this._defaultToolTipColors.measureName;
                }

                td = tr.append("td").attr("style", style)
                    .text(handleNull(measures[i].name) + ":")
                    .attr("class", "v-body-measure-label");
                this._dimensionOrMeasureTitles.push(td);
                //Meansure value
                style = this._getStyle(valueStyle);
                if (this._defaultToolTipColors.measureValue !== "") {
                    style += ";color:" + this._defaultToolTipColors.measureValue;
                }

                tr.append("td").attr("style", style)
                    .text(handleNull(measures[i].value))
                    .attr("class", "v-body-measure-value");
            }
        }
    };

    Tooltip.prototype._getStyle = function(inputStyle) {
        var style = "";
        if (inputStyle.color) {
            style += ";color:" + inputStyle.color;
        }
        if (inputStyle.fontFamily) {
            style += ";font-family:" + inputStyle.fontFamily;
        }
        if (inputStyle.fontSize) {
            style += ";font-size:" + inputStyle.fontSize;
        }
        if (inputStyle.fontWeight) {
            style += ";font-weight:" + inputStyle.fontWeight;
        }
        if (inputStyle.paddingButtom) {
            style += ";padding-bottom:" + inputStyle.paddingButtom;
        }
        if (inputStyle.whiteSpace) {
            style += ";white-space:" + inputStyle.whiteSpace;
        }
        if (inputStyle.textOverflow) {
            style += ";text-overflow:" + inputStyle.textOverflow;
        }
        if (inputStyle.overflow) {
            style += ";overflow:" + inputStyle.overflow;
        }
        if (inputStyle.paddingLeft) {
            style += ";padding-left:" + inputStyle.paddingLeft;
        }
        if (inputStyle.paddingBottom) {
            style += ";padding-bottom:" + inputStyle.paddingBottom;
        }
        if (inputStyle.marginTop) {
            style += ";margin-top:" + inputStyle.marginTop;
        }
        if (style.substr(0, 1) === ";") {
            style = style.substr(1);
        }
        return style;
    };

    Tooltip.prototype.destroy = function() {
        this._extensionDiv = null;
        this._mainDiv = null;
        this._properties = null;
        this._display = null;
        this._defaultToolTipColors = null;
    };

    var isOverBound = function(rect) {
        var boundRect = null,
            isOver = false;
        if (this._parentNodeRect) {
            boundRect = this._parentNodeRect;
        } else {
            boundRect = this._div.node().parentNode.getBoundingClientRect();
        }

        if (rect.isVertical) {
            if ((rect.clientRect.top < boundRect.top) || (rect.clientRect.bottom >
                boundRect.bottom)) {
                isOver = true;
            }
        } else {
            if ((rect.clientRect.left < boundRect.left || rect.clientRect.right >
                boundRect.right)) {
                isOver = true;
            }
        }
        return isOver;
    };

    Tooltip.prototype.moveTo = function(moveInfo) {
        if (!this._div || this._isAnchored) {
            return;
        }

        var rect = {
            clientRect: {},
            isVertical: true
        };

        var offset = 0;
        if (moveInfo.direction === "Y") {
            offset = parseInt(this._div.style("top")) + moveInfo.offset.y;
            this._div.style("top", offset + "px");
        } else if (moveInfo.direction === "X") {
            offset = parseInt(this._div.style("left")) + moveInfo.offset.x;
            rect.isVertical = false;
            this._div.style("left", offset + "px");
        }

        rect.clientRect = this._div.node().getBoundingClientRect();
        if (isOverBound.call(this, rect)) {
            this._div.style("visibility", "hidden");
        } else {
            this._div.style("visibility", "visible");
        }
    };

    Tooltip.prototype._updateTooltipStyle = function() {
        var props = this._properties.get("tooltip");
        var defaultToolTipColors = this._defaultToolTipColors;
        defaultToolTipColors.backgroundColor = props.background.color;
        defaultToolTipColors.border = props.background.borderColor;
        defaultToolTipColors.dimensionName = props.bodyDimensionLabel.color;
        defaultToolTipColors.dimensionValue = props.bodyDimensionValue.color;
        defaultToolTipColors.measureName = props.bodyMeasureLabel.color;
        defaultToolTipColors.measureValue = props.bodyMeasureValue.color;
        defaultToolTipColors.separationLineSingleColor = props.separationLine.color;
        defaultToolTipColors.footerLabelColor = props.footerLabel.color;
        defaultToolTipColors.closeButtonBackground = props.closeButton.backgroundColor;
        defaultToolTipColors.closeButtonBorderColor = props.closeButton.borderColor;
    };

    return Tooltip;
});

define('sap/viz/chart/components/behavior/config/TooltipBehaviorConfig',[
    "sap/viz/chart/components/behavior/config/tooltip/Tooltip",
    "sap/viz/framework/common/util/DataGraphics",
    "sap/viz/framework/common/util/Constants",
    'sap/viz/framework/common/util/DataUtils'
], function(Tooltip, DataGraphics, Constants, DataUtils) {

    var MND_ID = "measureNames";
    //var DATA_ID = DataConstants.DATA_ID;

    function constructEventData(tooltipData, plotNode) {
        var evtData = {
            body: [],
            footer: [],
            point: tooltipData.position,
            selectedValues: tooltipData.selectedNumber
        };
        //plot area
        var node = plotNode.node();
        if (node) {
            var bbox = node.getBoundingClientRect();
            evtData.plotArea = {
                x: bbox.left,
                y: bbox.top,
                width: bbox.width,
                height: bbox.height
            };
        }
        //data
        var datum = tooltipData.data;
        if (datum && datum.length) {
            for (var i = -1; ++i < datum.length;) {
                var item = datum[i];
                if (item.type === "Measure") {
                    evtData.body.push({
                        name: item.name,
                        val: [{
                            value: item.value
                        }]
                    });
                } else if (item.type === "Dimension") {
                    evtData.footer.push({
                        label: {
                            val: item.name
                        },
                        value: {
                            val: item.value
                        }
                    });
                }
            }
        }
        return evtData;
    }

    function hideTooltip(tooltipModule, service){
        if(tooltipModule.isShown()){
            tooltipModule.hideTooltip();
            service.setStatus("tooltipMode", null);
            this.dispatchEvent("hideTooltip", {
                name: Constants.Event.TooltipHide.name
            });
        }
    }

    //Sync with DataUtils.getDisplayText() if do some change
    function getDisplayText(context, key) {
        if (context[key + DataUtils.DIMENSION_DISPLAYNAME_SUFFIX] === "" ||
            context[key + DataUtils.DIMENSION_DISPLAYNAME_SUFFIX]) {
            return context[key + DataUtils.DIMENSION_DISPLAYNAME_SUFFIX];
        } else if (context[key] === "" || context[key]) {
            return context[key];
        } else {
            return null;
        }
    }

    return [{
        "id": "loaded_create_tooltip",
        "triggerEvent": {
            "name": "afterBehaviorLoaded"
        },
        "handler": function(event, service) {
            this._tooltipModule = new Tooltip(service.getProperties());
            this._tooltipModule.onClose((function(){
                this.dispatchEvent("hideTooltip", {
                    name: Constants.Event.TooltipHide.name
                });
            }).bind(this));
            service.setStatus("tooltipMode", null);
        }
    }, {
        "id": "unloaded_clear_tooltip",
        "triggerEvent": {
            "name": "beforeBehaviorUnloaded"
        },
        "handler": function(event, service) {
            var tooltipModule = this._tooltipModule;
            if (tooltipModule) {
                hideTooltip.call(this, tooltipModule, service);
                tooltipModule.destroy();
            }
            delete this._tooltipModule;
            service.removeStatus("tooltipMode");
        }
    }, {
        "id": "refreshed_tooltip",
        "triggerEvent": {
            "name": "afterChartRendered"
        },
        "handler": function(event, service) {
            var tooltipModule = this._tooltipModule;
            if (!tooltipModule) {
                return;
            }

            hideTooltip.call(this, tooltipModule, service);
            //tooltipModule.resetDiv();
            //tooltipModule.properties(service.getProperties().tooltip);
        }
    }, {
        "id": "showDetail",
        "declaredEvents": "showTooltip",
        "triggerEvent": {
            "name": "showDetail"
        },
        "handler": function(event, service) {
            var tooltipModule = this._tooltipModule;
            if (!tooltipModule) {
                return;
            }
            var data;
            if (event.data.target) {
                service.fireEvent("extractTooltipData", {
                    target: event.data.target
                });
                data = service.getStatus("tooltipData");
            }
            var rootDiv = service.getRootNode().node().parentNode;
            // while (!d3.select(rootDiv).classed("v-m-root") && rootDiv.parentNode) {
            //   rootDiv = rootDiv.parentNode;
            // }
            var mode = event.data.mode;
            var tooltipData = {
                "data": data,
                "container": rootDiv,
                "selectedNumber": service.getStatus("selectedDataPoints").length,
                "mode": mode,
                "position": event.data.point,
                "isAnchored": !!event.data.isAnchored
            };
            tooltipModule.showTooltip(tooltipData);
            service.setStatus("tooltipMode", mode);
            var evtData = constructEventData(tooltipData, service.getRootNode().select(".v-m-plot"));
            this.dispatchEvent("showTooltip", {
                name: Constants.Event.TooltipShow.name,
                data: evtData
            });
        }
    }, {
        "id": "hideDetail",
        "declaredEvents": "hideTooltip",
        "triggerEvent": {
            "name": "hideDetail"
        },
        "handler": function(event, service) {
            var tooltipModule = this._tooltipModule;
            if (!tooltipModule) {
                return;
            }
            var mode = service.getStatus("tooltipMode");
            if (!mode || event.data.mode !== mode) {
                return;
            }
            hideTooltip.call(this, tooltipModule, service);

        }
    }, {
        "id": "extractTooltipData",
        "triggerEvent": {
            "name": "extractTooltipData"
        },
        "handler": function(event, service) {
            var bindingMetaData = service.getBindingMetaData(),
                data = DataGraphics.getContext(event.data.target),
                dims = [],
                meas = [];

            function getMetaDataByKey(key) {
                for (var fieldName in bindingMetaData) {
                    if(bindingMetaData.hasOwnProperty(fieldName)){
                        for (var j = 0; j < bindingMetaData[fieldName].length; ++j) {
                            var metaData = bindingMetaData[fieldName][j];
                            if (metaData.id === key) {
                                return metaData;
                            }
                        }
                    }
                }

                return null;
            }

            for (var key in data) {
                if (data.hasOwnProperty(key)) {
                    if (key === MND_ID) {
                        continue;
                    }
                    var fieldMeta = getMetaDataByKey(key);
                    if (!fieldMeta) {
                        continue;
                    }
                    var arr, type, semanticType = fieldMeta.type, value;
                    type = semanticType;
                    if (semanticType === "Dimension") {
                        arr = dims;
                        // use display name first
                        value = getDisplayText(data, key);
                    } else if (semanticType === "Measure") {
                        arr = meas;
                        value = data[key];
                    }

                    if (arr) {
                        arr.push({
                            "id": key,
                            "name": fieldMeta.name || key,
                            "value": value,
                            "type": type
                        });
                    }
                }
            }
            service.setStatus("tooltipData", dims.concat(meas));
        }
    }, {
        "id": "extractTooltipData_percentage",
        "triggerEvent": {
            "name": "extractTooltipData",
            "supportedChartTypes": ["info/100_stacked_bar", "info/100_stacked_column",
                "info/100_dual_stacked_bar", "info/100_dual_stacked_column",
                "info/trellis_100_stacked_bar", "info/trellis_100_stacked_column",
                "info/trellis_100_dual_stacked_bar", "info/trellis_100_dual_stacked_column"
            ]
        },
        "handler": function(event, service) {
            service.fireEvent(event, true);
            var res = service.getStatus("tooltipData");
            res.forEach(function(e) {
                if (e.type === "Measure") {
                    e.value = DataGraphics.getData(event.data.target).percentageValue;
                }
            });
            service.setStatus("tooltipData", res);
        }
    }, {
        "id": "extractTooltipData_timebubble",
        "triggerEvent": {
            "name": "extractTooltipData",
            "supportedChartTypes": "info/time_bubble"
        },
        "handler": function(event, service) {
            service.fireEvent(event, true);
            var res = service.getStatus("tooltipData");
            res.timeMeasure = 0;
            service.setStatus("tooltipData", res);
        }
    }];

});

define('sap/viz/chart/components/behavior/config/PlotScrollBehaviorConfig',["sap/viz/framework/common/util/UADetector",
        "sap/viz/chart/components/util/ScrollbarUtil"
], function(UADetector, ScrollbarUtil) {

    var supportedChartTypes = [
        "info/bar", "info/column", "info/dual_bar", "info/dual_column",
        "info/stacked_bar", "info/stacked_column", "info/dual_stacked_bar",
        "info/dual_stacked_column",
        "info/100_stacked_bar", "info/100_stacked_column", "info/100_dual_stacked_bar",
        "info/100_dual_stacked_column",
        "info/line", "info/horizontal_line", "info/dual_line", "info/dual_horizontal_line",
        "info/combination", "info/horizontal_combination",
        "info/bullet", "info/vertical_bullet",
        "info/stacked_combination", "info/horizontal_stacked_combination",
        "info/dual_stacked_combination", "info/dual_horizontal_stacked_combination"
    ];

    var offsetThreshold = 2;

    var getOffsetRatio = function(event) {
        var ratio = 0;
        switch (event.name) {
            case "wheelmove":
                ratio = 0.1;
                if (event.data.wheelDelta > 0) {
                    ratio = -ratio;
                }
                break;
            case "leftarrow":
            case "uparrow":
                ratio = -0.06;
                break;
            case "rightarrow":
            case "downarrow":
                ratio = 0.06;
                break;
        }
        return ratio;
    };

    var plotAndAxisMoveTo = function(rootNode, position, isHorizontal) {
        var axisArray = [];
        var transform;
        if (isHorizontal) {
            transform = 'translate(0,' + position + ')';
            axisArray.push(rootNode.select('.v-m-yAxis'));
            axisArray.push(rootNode.select('.v-m-yAxis2'));
        } else {
            transform = 'translate(' + position + ',0)';
            axisArray.push(rootNode.select('.v-m-xAxis'));
        }
        var dataPointGroup = rootNode.select('.v-plot-main');
        if (dataPointGroup && !dataPointGroup.empty()) {
            dataPointGroup.attr('transform', transform);
        }

        var effect = rootNode.select('.v-effect-group');
        effect.attr('transform', transform);


        for (var i = 0; i < axisArray.length; i++) {
            if (axisArray[i] && !axisArray[i].empty()) {
                var tickGroup = axisArray[i].select('.v-tick-group');
                if (tickGroup && !tickGroup.empty()) {
                    tickGroup.attr('transform', transform);
                }
                var labelGroup = axisArray[i].select('.v-label-group');
                if (labelGroup && !labelGroup.empty()) {
                    labelGroup.attr('transform', transform);
                }
            }
        }
    };


    //This is a callback generator for scrollbar property OnScroll, so pointer 'this' is scrollbar instance.
    var getOnScrollCallBack = function(rootNode, tooltipInst, service) {
        return function(scrollInfo) {
            plotAndAxisMoveTo(rootNode, scrollInfo.position, this._isVertical());
            tooltipMoveTo(tooltipInst, (scrollInfo.position - service.getStatus("plotPosition")), 
                scrollInfo.direction);
            service.setStatus("plotPosition", scrollInfo.position);
        };
    };

    var tooltipMoveTo = function(tooltipInst, offset, direction) {
        var moveInfo = {};
        moveInfo['direction'] = direction;
        moveInfo['offset'] = {'x' : 0, 'y' : 0};
        if (direction === 'Y') {
            moveInfo['offset']['y'] = offset; 
        } else {
            moveInfo['offset']['x'] = offset; 
        }
        tooltipInst.moveTo(moveInfo);
    };

    var plotScrollHandler = function(event, service) {
        if (UADetector.isMobile()) {
            return;
        }

        var plotModule = service.getModule("main.plot");
        if (!plotModule || !service.getProperties().get("plotArea.isFixedDataPointSize")) {
            return;
        }
        var isHorizontal = plotModule.isHorizontal();

        var eventName = event.name;
        if (isHorizontal) {
            if (["leftarrow", "rightarrow"].indexOf(eventName) > -1) {
                return;
            }
        } else {
            if (["wheelmove", "uparrow", "downarrow"].indexOf(eventName) > -1) {
                return;
            }
        }
        var rootNode = service.getRootNode();
        var scrollbarInst = getScrollbarInstance(service);

        if (scrollbarInst) {
            var offset = scrollbarInst.computeThumbOffset(getOffsetRatio(event));
            if (!scrollbarInst.thumbOverTrack(offset)) {
                event.data.originalEvent.preventDefault();
                scrollbarInst.adjustThumbPosition(offset);
                var plotCurrentPos = scrollbarInst.computePlotPosition();
                var plotPrePos = service.getStatus("plotPosition");
                plotAndAxisMoveTo(rootNode, plotCurrentPos, isHorizontal);
                var tooltipMoveDirection = isHorizontal ? 'Y' : 'X';
                tooltipMoveTo(this._tooltipModule, 
                    (plotCurrentPos - plotPrePos), tooltipMoveDirection);
                service.setStatus("plotPosition", plotCurrentPos);
            }

        }
    };

    var getScrollbarInstance = function(service) {
        var plotModule = service.getModule("main.plot");
        if (!plotModule || !plotModule.isHorizontal) {
            return null;
        }
        var isHorizontal = plotModule.isHorizontal();
        var scrollbarInst = null;
        if (!isHorizontal) {
            scrollbarInst = service.getModule("main").getHScrollbar();
        } else {
            scrollbarInst = service.getModule("main").getVScrollbar();
        }
        return scrollbarInst;
    };

    var dragOnPlotHandler = function(event, service) {
        var rootNode = service.getRootNode();
        var plotModule = service.getModule("main.plot");
        if (!plotModule || !service.getProperties().get("plotArea.isFixedDataPointSize")) {
            return;
        }
        var scrollbarInst = getScrollbarInstance(service);
        if (!scrollbarInst) {
            return;
        }

        if (!(UADetector.isWindowsSurface() || UADetector.isWindowsPhone()) &&
            scrollbarInst.thumbFull()) {
            return;
        }
        var isHorizontal = plotModule.isHorizontal();
        var size = plotModule._size;
        var realSize = plotModule._realSize;
        var boundaryMax = 0;
        var boundaryMin = 0;
        if (isHorizontal) {
            boundaryMax = realSize.height - size.height;
        } else {
            boundaryMax = realSize.width - size.width;
        }
        switch (event.name) {
            case "dragstart":
                service.setStatus("isDraggingOnPlot", true);
                service.setStatus("plotDragPoint", event.data.point);

                if (service.getStatus("needToPreventDefault")) {
                    event.data.originalEvent.preventDefault();
                }
                if (UADetector.isMobile()) {
                    ScrollbarUtil.showScrollbar(service, 1600);
                }
                break;
            case "dragmove":
                if (!service.getStatus("isDraggingOnPlot")) {
                    return;
                }
                var transform = service.getStatus("plotTransform");
                var prePosition = service.getStatus("plotDragPoint");
                var offset = {
                    x: event.data.point.x - prePosition.x,
                    y: event.data.point.y - prePosition.y
                };

                var plotPrePos = service.getStatus("plotPosition");
                var plotPosition;
                if (isHorizontal) {
                    transform.y += offset.y;
                    if (transform.y > boundaryMin) {
                        transform.y = 0;
                    } else if (transform.y < -boundaryMax) {
                        transform.y = -boundaryMax;
                    }
                    plotPosition = transform.y;
                } else {
                    transform.x += offset.x;
                    if (transform.x > boundaryMin) {
                        transform.x = 0;
                    } else if (transform.x < -boundaryMax) {
                        transform.x = -boundaryMax;
                    }
                    plotPosition = transform.x;
                }

                if ((UADetector.isWindowsSurface() || UADetector.isWindowsPhone()) && 
                    scrollbarInst.thumbFull()) {
                    window.scrollBy(-offset.x, -offset.y);
                    service.setStatus("needToPreventDefault", true);
                    service.setStatus("plotTransform", transform);
                    service.setStatus("plotDragPoint", event.data.point);
                    service.setStatus("plotPosition", plotPosition); 
                    return; 
                }
                plotAndAxisMoveTo(rootNode, isHorizontal ? transform.y : transform.x,
                    isHorizontal);
                scrollbarInst.setThumbPosition(-plotPosition / scrollbarInst.getTrackRatio());
                var tooltipMoveDirection = isHorizontal ? 'Y' : 'X';
                tooltipMoveTo(this._tooltipModule, 
                    (plotPosition - plotPrePos), tooltipMoveDirection);
                service.setStatus("plotTransform", transform);
                service.setStatus("plotDragPoint", event.data.point);
                service.setStatus("plotPosition", plotPosition);
                var needToPreventDefault = false;
                if (!isHorizontal) {
                    if (!scrollbarInst.thumbOverTrack(-offset.x)) {
                        needToPreventDefault = true;
                    }
                    if(needToPreventDefault) {
                        if (Math.abs(offset.x) < offsetThreshold && offset.y !== 0) {
                            needToPreventDefault = false;
                        } 
                    }
                } else {
                    if (!scrollbarInst.thumbOverTrack(-offset.y)) {
                        needToPreventDefault = true;
                    }
                    if(needToPreventDefault) {
                        if (Math.abs(offset.y) < offsetThreshold && offset.x !== 0) {
                            needToPreventDefault = false;
                        }
                    }
                } 

                if (needToPreventDefault) {
                    event.data.originalEvent.preventDefault();
                } else if (UADetector.isWindowsSurface() || UADetector.isWindowsPhone()) {
                    window.scrollBy(-offset.x, -offset.y);  
                }

                service.setStatus("needToPreventDefault", needToPreventDefault);   
                if (UADetector.isMobile()) {
                    ScrollbarUtil.showScrollbar(service, 1600);
                }
                break;
            case "dragend":
                if (service.getStatus("needToPreventDefault")) {
                    event.data.originalEvent.preventDefault();
                }
                service.setStatus("isDraggingOnPlot", false);
                service.setStatus("plotDragPoint", {
                    x: 0,
                    y: 0
                });
                break;
        }
    };

    return [{
        "id": "initialized_srollbarcallback",
        "triggerEvent": {
            "name": "afterChartRendered"
        },
        "handler": function(event, service) {
            if (!service.getProperties().get("plotArea.isFixedDataPointSize")) {
                return;
            }

            service.setStatus("plotTransform", {
                x: 0,
                y: 0
            }).setStatus("plotDragPoint", {
                x: 0,
                y: 0
            }).setStatus("plotPosition", 0);

            var scrollbarInst = getScrollbarInstance(service);
            if (scrollbarInst.thumbFull()) {
                return;
            }
            if (scrollbarInst) {
                scrollbarInst.setProperties({
                    onScroll: getOnScrollCallBack(service.getRootNode(), this._tooltipModule, service)
                });
                if (UADetector.isMobile()) {
                    ScrollbarUtil.showScrollbar(service, 1600);
                    service.setStatus("needToPreventDefault", false);
                } else {
                    scrollbarInst.show();
                }
            }
        }
    }, {
        "id": "initialized_plotscrollbehavior",
        "triggerEvent": {
            "name": "afterBehaviorLoaded"
        },
        "handler": function(event, service) {
            service.setStatus("isDraggingOnPlot", false);
        }
    }, {
        "id": "up_arrow_on_eventLayer",
        "triggerEvent": {
            "name": "uparrow",
            "targets": "*",
            "supportedChartTypes": supportedChartTypes
        },
        "handler": plotScrollHandler
    }, {
        "id": "down_arrow_on_eventLayer",
        "triggerEvent": {
            "name": "downarrow",
            "targets": "*",
            "supportedChartTypes": supportedChartTypes
        },
        "handler": plotScrollHandler
    }, {
        "id": "left_arrow_on_eventLayer",
        "triggerEvent": {
            "name": "leftarrow",
            "targets": "*",
            "supportedChartTypes": supportedChartTypes
        },
        "handler": plotScrollHandler
    }, {
        "id": "right_arrow_on_eventLayer",
        "triggerEvent": {
            "name": "rightarrow",
            "targets": "*",
            "supportedChartTypes": supportedChartTypes
        },
        "handler": plotScrollHandler
    }, {
        "id": "wheel_move_on_eventLayer",
        "triggerEvent": {
            "name": "wheelmove",
            "targets": "v-m-plot",
            "supportedChartTypes": supportedChartTypes
        },
        "handler": plotScrollHandler
    }, {
        "id": "drag_start_on_plot",
        "triggerEvent": {
            "name": "dragstart",
            "targets": "v-m-plot",
            "supportedChartTypes": supportedChartTypes
        },
        "handler": dragOnPlotHandler
    }, {
        "id": "drag_move_on_plot",
        "triggerEvent": {
            "name": "dragmove",
            "targets": "v-m-plot",
            "supportedChartTypes": supportedChartTypes
        },
        "handler": dragOnPlotHandler
    }, {
        "id": "drag_end_on_plot",
        "triggerEvent": {
            "name": "dragend",
            "targets": "v-m-plot",
            "supportedChartTypes": supportedChartTypes
        },
        "handler": dragOnPlotHandler
    }];
});
define('sap/viz/chart/components/behavior/config/TrellisPanBehaviorConfig',['sap/viz/framework/common/util/UADetector',
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/chart/components/util/ChartTypeUtils",
    "sap/viz/chart/components/util/ScrollbarUtil"
], function(UADetector, TypeUtils, ChartTypeUtils, ScrollbarUtil) {

    var targets = "v-m-trellis-plot";
    var statusKey = "isDraggingOnTrellisPlot";
    var infoKey = "trellisPlotDragInfo";
    
    var dragOnPlotHandler = function(event, service) {
        if (!UADetector.isMobile()) {
            return;
        }
        var plotArea = service.getModule("main") || service.getModule("plot");
        if (!plotArea || !TypeUtils.isFunction(plotArea.scroll)) {
            return;
        }

        switch (event.name) {
            case "dragstart":
                service.setStatus(statusKey, true);
                service.setStatus(infoKey, {
                    point: event.data.point
                });
                if (UADetector.isMobile()) {
                    ScrollbarUtil.showScrollbar(service, 1600);
                }
                break;
            case "dragmove":
                if (!service.getStatus(statusKey)) {
                    return;
                }

                var prePosition = service.getStatus(infoKey);
                var offset = {
                    x: event.data.point.x - prePosition.point.x,
                    y: event.data.point.y - prePosition.point.y
                };
                plotArea.scroll(offset);
                service.setStatus(infoKey, {
                    point: event.data.point
                });
                if (UADetector.isMobile()) {
                    ScrollbarUtil.showScrollbar(service, 1600);
                }
                break;
            case "dragend":
                service.setStatus(statusKey, false);
                service.setStatus(infoKey, {
                    point: {}
                });
                break;
        }
    };

    return [{
        "id": "initialized_trellisScrollbar",
        "triggerEvent": {
            "name": "afterChartRendered"
        },
        "handler": function(event, service) {
            if (UADetector.isMobile()) {
                ScrollbarUtil.showScrollbar(service, 1600);
            }
        }
    }, {
        "id": "initialized_trellisPanbehavior",
        "triggerEvent": {
            "name": "afterBehaviorLoaded"
        },
        "handler": function(event, service) {
            service.setStatus(statusKey, false);
        }
    }, {
        "id": "drag_start_on_trellis",
        "triggerEvent": {
            "name": "dragstart",
            "targets": targets
        },
        "handler": dragOnPlotHandler
    }, {
        "id": "drag_move_on_trellis",
        "triggerEvent": {
            "name": "dragmove",
            "targets": targets
        },
        "handler": dragOnPlotHandler
    }, {
        "id": "drag_end_on_trellis",
        "triggerEvent": {
            "name": "dragend",
            "targets": targets
        },
        "handler": dragOnPlotHandler
    }];
});
define('sap/viz/chart/components/behavior/RuntimeBehaviorRegistry',[
    "sap/viz/framework/interaction/Constants",
    "sap/viz/framework/interaction/BehaviorFactory",
    "sap/viz/framework/interaction/BehaviorManager",
    "sap/viz/chart/components/behavior/config/AxisBehaviorConfig",
    "sap/viz/chart/components/behavior/config/ContextualDataConfig",
    "sap/viz/chart/components/behavior/config/AxisBehaviorConfigForTreeMap",
    "sap/viz/chart/components/behavior/config/LegendBehaviorConfig",
    "sap/viz/chart/components/behavior/config/MBCLegendBehaviorConfig",
    "sap/viz/chart/components/behavior/config/LassoBehaviorConfig",
    "sap/viz/chart/components/behavior/config/DataPointBehaviorConfig",
    "sap/viz/chart/components/behavior/config/DataPointBehaviorConfigForBar",
    "sap/viz/chart/components/behavior/config/DataPointBehaviorConfigForBullet",
    "sap/viz/chart/components/behavior/config/DataPointBehaviorConfigForPie",
    "sap/viz/chart/components/behavior/config/DataPointBehaviorConfigForLine",
    "sap/viz/chart/components/behavior/config/DataPointBehaviorConfigForScatter",
    "sap/viz/chart/components/behavior/config/DataPointBehaviorConfigForTreeMap",
    "sap/viz/chart/components/behavior/config/RuntimeSelectionHelperConfig",
    "sap/viz/chart/components/behavior/config/SelectionAPIConfig",
    "sap/viz/chart/components/behavior/config/PinchBehaviorConfig",
    "sap/viz/chart/components/behavior/config/TooltipBehaviorConfig",
    "sap/viz/chart/components/behavior/config/PlotScrollBehaviorConfig",
    "sap/viz/chart/components/behavior/config/TrellisPanBehaviorConfig"
], function(Constants, BehaviorFactory, BehaviorManager) {
    return BehaviorManager.register(Constants.BEHAVIOR.DEFAULT_BEHAVIOR_ID,
        BehaviorFactory.buildBehavior([].slice.call(arguments, 3)));
});

define('sap/viz/chart/components/behavior/SFinBehaviorRegistry',[
    "sap/viz/framework/common/util/Constants",
    "sap/viz/chart/components/util/DataPointUtils",
    "sap/viz/framework/common/util/DataGraphics",
    "sap/viz/chart/components/util/BoundingBoxUtils",
    "sap/viz/chart/components/behavior/config/HighlightHelper",
    "sap/viz/framework/interaction/BehaviorManager",
    "sap/viz/chart/components/behavior/RuntimeBehaviorRegistry"
], function(Constants, DataPoints, DataGraphics,
    BoundingBox, HighlightHelper,
    BehaviorManager, RuntimeBehaviorRegistry) {

    function getBoundingBox(node) {
        var rect = node.getBoundingClientRect();
        return {
            x: rect.left,
            y: rect.top,
            height: rect.height,
            width: rect.width,
            right: rect.right,
            bottom: rect.bottom
        };
    }

    function getCoveredTarget(elements, container) {
        var selectedDataPoints = elements,
            dataPoint, dataPointRect;
        var plotBoundNode = container.select(".v-bound").node(),
            plotBoundRect = null;
        if (!plotBoundNode) {
            plotBoundNode = container.select(".v-plot-bound").node();
        }
        if (plotBoundNode) {
            plotBoundRect = getBoundingBox(plotBoundNode);
        }
        if (plotBoundRect) {
            for (var i = 0, len = selectedDataPoints.length; i < len; i++) {
                dataPoint = selectedDataPoints[i];
                dataPointRect = getBoundingBox(dataPoint);
                if (dataPointRect && BoundingBox.intersects(dataPointRect, plotBoundRect)) {
                    return selectedDataPoints[i];
                }
            }
        }
    }

    var sFinBehavior = BehaviorManager.get("default").clone();

    sFinBehavior.getActionById("processMultipleSelectionTooltip")
        .setHandler(function(event, service) {
            if (service.getStatus("selectedDataPoints").length) {
                service.fireEvent("showDetail");
            } else {
                service.fireEvent("hideDetail");
            }
        });

    sFinBehavior.getActionById("click_on_datapoint")
        .setHandler(function(event, service) {
            if (!service.getProperties().get("interaction.selectability.plotStdSelection")) {
                return;
            }
            var config = event.data;
            var target = config.currentTarget;
            var selectedBefore = service.getStatus("selectedDataPoints").indexOf(target) >=
                0;
            service.fireEvent("processSelection", {
                targets: target,
                deselectable: true,
                ctrlKeyPressed: config.ctrlKey
            });
            var selectedDataPoints = service.getStatus("selectedDataPoints");
            if (selectedDataPoints.indexOf(target) >= 0) {
                service.fireEvent("showDetail", {
                    target: target
                });
            } else {
                if (selectedBefore) {
                    target = getCoveredTarget(selectedDataPoints, service.getRootNode().select(
                        ".v-m-plot"));
                    if (target) {
                        service.fireEvent("showDetail", {
                            target: target
                        });
                    }
                } else {
                    service.fireEvent("hideDetail");
                }
                service.setStatus("isHoveringDeselectedDataPoint", selectedBefore);
            }
        });

    sFinBehavior.getActionById("click_on_datalabel")
        .setHandler(function(event, service) {
            if (!service.getProperties().get("interaction.selectability.plotStdSelection")) {
                return;
            }
            var allDataPoints = DataPoints.findAll(service.getRootNode().node());
            var config = event.data;
            var target, ctx = DataPoints.getContext(config.currentTarget);
            for (var i = 0, len = allDataPoints.length; i < len; i++) {
                if (HighlightHelper.matchCtx(ctx, DataPoints.getContext(allDataPoints[i]))) {
                    target = allDataPoints[i];
                    break;
                }
            }
            var selectedBefore = service.getStatus("selectedDataPoints").indexOf(target) >=
                0;
            service.fireEvent("processSelection", {
                targets: target,
                deselectable: true,
                ctrlKeyPressed: config.ctrlKey
            });
            var selectedDataPoints = service.getStatus("selectedDataPoints");
            if (selectedDataPoints.indexOf(target) >= 0) {
                service.fireEvent("showDetail", {
                    target: target
                });
            } else {
                if (selectedBefore) {
                    target = getCoveredTarget(selectedDataPoints, service.getRootNode().select(
                        ".v-m-plot"));
                    if (target) {
                        service.fireEvent("showDetail", {
                            target: target
                        });
                    }
                } else {
                    service.fireEvent("hideDetail");
                }
            }
        });

    var dataLabelMapToDatapoint = function(event, service) {
        var allDataPoints = DataPoints.findAll(service.getRootNode().node());
        var target, ctx = DataPoints.getContext(event.data.currentTarget);
        for (var i = 0, len = allDataPoints.length; i < len; i++) {
            if (HighlightHelper.matchCtx(ctx, DataPoints.getContext(allDataPoints[i]))) {
                target = allDataPoints[i];
                break;
            }
        }
        return target;
    };


    function sFinHoverOnDataPointHandler(event, service, target) {
        //var target = event.data.currentTarget;
        var point = event.data.point;
        var hoveringDataPoint = service.getStatus("hoveringDataPoint");
        var selected = (service.getStatus("selectedDataPoints").indexOf(target) > -1);
        if (hoveringDataPoint) {
            if (hoveringDataPoint === target) {
                return;
            }
            service.fireEvent("unhoverOnDataPoint", {
                targets: hoveringDataPoint
            });
        }
        if (hoveringDataPoint !== target) {
            service.setStatus("isHoveringDeselectedDataPoint", false);
        }
        hoveringDataPoint = target;
        service.fireEvent("hoverOnDataPoint", {
            targets: hoveringDataPoint
        }).setStatus("hoveringDataPoint", hoveringDataPoint);
    }


    sFinBehavior.getActionById("hover_on_datapoint")
        .setHandler(function(event, service) {
            sFinHoverOnDataPointHandler(event, service, event.data.currentTarget);
        });

    sFinBehavior.getActionById("hover_on_datalabel")
        .setHandler(function(event, service) {
            sFinHoverOnDataPointHandler(event, service, dataLabelMapToDatapoint(event,
                service));
        });


    sFinBehavior.getActionById("hover_on_non_datapoint")
        .setHandler(function(event, service) {
            service.setStatus("isHoveringDeselectedDataPoint", false);
            var hoveringDataPoint = service.getStatus("hoveringDataPoint");
            if (hoveringDataPoint) {
                service.fireEvent("unhoverOnDataPoint", {
                    targets: hoveringDataPoint
                }).setStatus("hoveringDataPoint", null);
            }
        });

    sFinBehavior.removeActionById("refreshed_tooltip");

    sFinBehavior.getActionById("showDetail")
        .setHandler(function(event, service) {
            var data;
            var target = event.data.target;
            if (target) {
                service.fireEvent("extractTooltipData", {
                    target: event.data.target
                });
                data = service.getStatus("tooltipData");
            }
            var selectedDataPoints = service.getStatus("selectedDataPoints");
            var evtData = {
                data: {
                    val: data
                },
                selectedValues: selectedDataPoints.length
            };

            if (target) {
                evtData.target = target;
                var extraData = DataGraphics.getData(target);
                if (extraData) {
                    if (extraData.color) {
                        evtData.data.color = extraData.color;
                    }
                    if (extraData.shape) {
                        evtData.data.shape = extraData.shape;
                    }
                }
            } else {
                //No target means legend / axis label / lasso selection.
                //Set targe with the last selected datapoint.
                evtData.target = getCoveredTarget(selectedDataPoints, service.getRootNode()
                    .select(".v-m-plot"));
            }

            this.dispatchEvent("showTooltip", {
                name: Constants.Event.TooltipShow.name,
                data: evtData
            });

        });

    sFinBehavior.getActionById("hideDetail")
        .setHandler(function(event, service) {
            this.dispatchEvent("hideTooltip", {
                name: Constants.Event.TooltipHide.name
            });
        });


    BehaviorManager.register("sFinBehavior", sFinBehavior);
});
define('sap/viz/chart/views/ChartView',[
    "sap/viz/framework/common/util/Constants",
    'sap/viz/framework/common/util/oo',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/template/TemplateManager',
    "sap/viz/chart/layout/GridLayout",
    'sap/viz/chart/components/title/Title',
    'sap/viz/chart/components/Background',
    'sap/viz/chart/components/legend/ColorLegend',
    'sap/viz/chart/components/legend/LegendGroup',
    'sap/viz/chart/components/container/UIContainer',
    'sap/viz/chart/metadata/properties/PropertyLoader',
    "sap/viz/chart/components/behavior/RuntimeBehaviorRegistry",
    "sap/viz/chart/components/behavior/SFinBehaviorRegistry"
], function(Constants, oo, TypeUtils, TemplateManager, GridLayout, Title, Background,
        ColorLegend, LegendGroup, UIContainer, PropertyLoader) {


    var ChartView = function (runtime, option) {
        ChartView.superclass.constructor.apply(this, arguments);
        var props = PropertyLoader.getProperties(option.chartType, this._isTrellis());
        this._properties.add(props);

        this._exposeMoreEvents("ready");
        this._exposeMoreEvents("renderComplete");
        this._exposeMoreEvents("initialized");

        var LayoutClazz = this._getLayoutDefinition();

        this.setLayoutAlgorithm(new LayoutClazz());
        this._outline = {
            visible: false
        };
        this._background = null;
        this._backgroundNode = null;

        this._createChildren();
    };

    oo.extend(ChartView, UIContainer);

    /**
     * Create child components: title, legend, plot...
     */
    ChartView.prototype._createChildren = function () {
        this._createBackground();
        this._createTitle();
        this._createLegendGroup();
    };

    ChartView.prototype._createTitle = function (position) {
        var moduleKey = this._getTitleModuleKey();
        var ModuleClazz = this._getTitleDefinition();
        var moduleInstance = new ModuleClazz(this.runtime(), {
            name: moduleKey
        });

        if (TypeUtils.isFunction(moduleInstance.setPosition)) {
            moduleInstance.setPosition(position);
        }
        this.setChild(moduleKey, moduleInstance, {
            priority: 1,
            spacing: {
                spacingWithMainToRough : Constants.TITLE.SPACING_WITH_MAIN_TO_ROUGH,
                spacingMaxInPX : Constants.TITLE.SPACING_MAX_IN_PX
            }
        });
    };

    ChartView.prototype._createLegendGroup = function (position) {

        var legendGroupModuleKey = this._getLegendGroupModuleKey();
        var LegendGroupClazz = this._getLegendGroupDefinition();
        var legendGroup = new LegendGroupClazz(this.runtime(), {
            name: legendGroupModuleKey
        });
        if (TypeUtils.isFunction(legendGroup.setPosition)) {
            legendGroup.setPosition(position);
        }

        var legendDefinitions = this._getLegendDefinition();
        var legendInitOpts = this._getLegendInitOptions();
        var legendModuleKey = this._getLegendModuleKey();

        // multi-legend
        var legendInstance;
        if (TypeUtils.isArray(legendDefinitions)) {
            for (var index = 0; index < legendDefinitions.length; index++) {
                var LegendClazz = legendDefinitions[index];
                var key = legendModuleKey[index];
                legendInstance = new LegendClazz(this.runtime(), {
                    name: key,
                    options: legendInitOpts[index]
                });
                legendGroup.setChild(key, legendInstance);
            }
        } else {
            legendInstance = new legendDefinitions(this.runtime(), {
                name: legendModuleKey,
                options: legendInitOpts
            });
            legendGroup.setChild(legendModuleKey, legendInstance);
        }

        this.setChild(legendGroupModuleKey, legendGroup, {
            priority: 2,
            spacing: {
                spacingWithMainToRough : Constants.LEGEND_GROUP.SPACING_WITH_MAIN_TO_ROUGH,
                spacingMaxInPX : Constants.LEGEND_GROUP.SPACING_MAX_IN_PX
            }
        });
    };

    ChartView.prototype._createBackground = function () {
        this._background = new Background(this.runtime(), {
            name: 'general.background'
        });
    };

    ChartView.prototype._resetPlotContainer = function () {
        if (this._plotArea) {
            if (this._selections) {
                this._selections[this._plotArea.alias].remove();
                this._selections[this._plotArea.alias] = null;
            }

            this._plotArea.destroy();
            this._plotArea = null;
        }
    };

    ChartView.prototype._createPlotContainer = function (isTrellis) {};

    ChartView.prototype._getLegendGroupDefinition = function () {
        return LegendGroup;
    };

    ChartView.prototype._getLegendGroupModuleKey = function () {
        return "legendGroup";
    };

    ChartView.prototype._getTitleDefinition = function () {
        return Title;
    };

    ChartView.prototype._getTitleModuleKey = function () {
        return "title";
    };

    ChartView.prototype._getLegendDefinition = function () {
        return [ColorLegend];
    };

    ChartView.prototype._getLegendInitOptions = function() {
        return [null];
    };

    ChartView.prototype._getLegendModuleKey = function () {
        return ["legend"];
    };

    ChartView.prototype._getLayoutDefinition = function () {
        return GridLayout;
    };

    /**
     * To render element.
     *
     * @param rootElement {D3Selection} the parent D3 selection for rendering
     */
    ChartView.prototype.render = function (rootElement) {
        if (!this._size.width || !this._size.height) {
            return;
        }

        var divNode = rootElement.node().parentNode;
        if (divNode) {
            divNode.setAttribute("tabIndex", this._properties.get('general.tabIndex'));
            if (this._outline.visible) {
                divNode.style.outline = null;
            } else {
                divNode.style.outline = "none";
            }
        }
        var defsNode = rootElement.select("defs");
        if (!defsNode.node()) {
            defsNode = rootElement.append('svg:defs');
        }
        this.runtime().effectManager().container(defsNode);
        if (this._background) {
            this._background.setSize(this._size);
            this._backgroundNode = this._backgroundNode || rootElement.append('g').attr('class', 'v-m-background');
            this._background.render(this._backgroundNode);
        }
        this._initRenderBase(rootElement);
        this.layout();

        // execute module drawing logics
        for (var key in this._children) {
            if (this._children.hasOwnProperty(key)) {
                this.getChild(key).module.render(this._selections[key]);
            }
        }

        if (this._eventDispatch) {
            this._eventDispatch.ready(); //an inner event used only by modules inside like interaction.
        }
        // to support chart.on("initialized")
        window.setTimeout((function () {
            if (this._eventDispatch) {
                this._eventDispatch.initialized();
                // Incase the chart is destroyed in the "initialized" event
                if (this._eventDispatch) {
                    this._eventDispatch.renderComplete();
                }
            }
        }).bind(this), 0);

    };

    /**
     * To layout children elements
     *
     */
    ChartView.prototype.layout = function () {
        // execute layout
        var components = this._getLayoutComponents();
        var paddingInfo = this.calculatePaddingInPX(this._properties.origin, this._size.width, this._size.height);

        var padding = paddingInfo.propertyPaddingInPX;
        var paddingTop = paddingInfo.propertyPaddingTopInPX;
        var paddingRight = paddingInfo.propertyPaddingRightInPX;
        var paddingBottom = paddingInfo.propertyPaddingBottomInPX;
        var paddingLeft = paddingInfo.propertyPaddingLeftInPX;

        this._layoutAlgorithm.config.set({
            totalWidth: this._size.width,
            totalHeight: this._size.height,
            padding: padding,
            paddingTop: paddingTop,
            paddingRight: paddingRight,
            paddingBottom: paddingBottom,
            paddingLeft: paddingLeft
        });
        var results = this._layoutAlgorithm.layout(components);

        for (var key in components) {
            if (components.hasOwnProperty(key)) {
                var selection = this._selections[key];
                if (selection.node().tagName === 'DIV') {
                    selection.style({
                        position: 'absolute',
                        left: results[key].x + 'px',
                        top: results[key].y + 'px'
                    });
                } else {
                    selection.attr('transform', 'translate(' + results[key].x + ', ' + results[key].y + ')');
                }

            }
        }
    };

    ChartView.prototype._getLayoutComponents = function () {
        for (var key in this._children) {
            if (this._children.hasOwnProperty(key)) {
                var child = this.getChild(key);
                var option = child.option;

                var position = null,
                    defaultPosition = null;

                // for title only because no property of position of title is defined in metadata so far
                if (child.module.getPosition) {
                    position = child.module.getPosition();
                } else {
                    position = this._properties.get(key + ".layout.position");
                    defaultPosition = this._properties.getDefault(key + ".layout.position");
                }

                var maxWidth = this._properties.get(key + ".layout.maxWidth");
                var maxHeight = this._properties.get(key + ".layout.maxHeight");

                if (position) {
                    option.position = position;
                }

                if (defaultPosition) {
                    option.defaultPosition = defaultPosition;
                }

                if (maxWidth) {
                    option.maxWidth = maxWidth;
                }

                if (maxHeight) {
                    option.maxHeight = maxHeight;
                }
            }
        }
        return this._children;
    };

    ChartView.prototype.getSize = function () {
        return {
            'width': this._size.width,
            'height': this._size.height
        };
    };

    /**
     * To set size
     * @param size {width: Number, height: Number}
     */
    ChartView.prototype.setSize = function () {
        ChartView.superclass.setSize.apply(this, arguments);
        if (this._rawData) {
            this._updateData();
        }
    };

    ChartView.prototype.getData = function () {
        return this._rawData;
    };

    /**
     * Set DataModel and Scales
     * @param {dataModel: framework/chartmodel/DataModel, scales: {key, framework/scale/BaseScale}} data
     */
    ChartView.prototype.setData = function (data) {
        this._rawData = data;
        this._updateData();
    };

    ChartView.prototype._updateData = function () {
        var data = this._rawData;
        var items = this._getDataItems();
        this._data = {};
        for (var i = 0; i < items.length; i++) {
            var item = items[i];
            if (!data.dataModel[item]) {
                continue;
            }
            this._data[item] = data.dataModel[item]();
            if (data.scales.hasOwnProperty(item)) {
                this._data[item].scale = data.scales[item];
            }
        }
        if (TypeUtils.isFunction(data.dataModel.context)) {
            var context = data.dataModel.context();
            this._data['context'] = context;
        }
        this._data._dataPoints = data.dataModel._dataPoints;
        this._data._seriesType = data.dataModel._seriesType;
        this._dataChanged();
    };

    ChartView.prototype.getBindingMetaData = function () {
        var bindingMetaData = {},
            items = this._getDataItems();

        for (var i = 0; i < items.length; ++i) {
            var item = this._data[items[i]];
            if (item == null) {
                continue;
            }
            var metaData = item.metaData;
            if (metaData == null) {
                continue;
            }
            bindingMetaData[items[i]] = metaData;
        }

        return bindingMetaData;
    };

    /**
     * @return {Array[String]}
     */
    ChartView.prototype._getDataItems = function () {
        return [];
    };

    ChartView.prototype._isTrellis = function () {
        return !!(this._data && (this._data.trellisRow || this._data.trellisColumn));
    };

    ChartView.prototype._dataChanged = function () {
        this._resetPlotContainer();
        this._createPlotContainer(this._isTrellis());
        if (this._data) {
            for (var key in this._children) {
                if (this._children.hasOwnProperty(key)) {
                    this.getChild(key).module.setData(this._data);
                }
            }
        }
    };

    /**
     * @return {JSON}
     */
    ChartView.prototype.properties = function (properties) {
        if (!arguments.length) {
            return this._properties.get();
        }

        this._properties.set(properties);

        return this;
    };

    /**
     * @return {String}
     */
    ChartView.prototype.chartType = function (chartType) {
        if (!arguments.length) {
            return this._chartType;
        }
        this._chartType = chartType;
        return this;
    };

    /**
     * To destroy children elements and its own memebers
     *
     */
    ChartView.prototype.destroy = function () {
        // release all properties which hold dom instances
        ChartView.superclass.destroy.call(this);

        if (this._backgroundNode) {
            this._backgroundNode.remove();
        }
        this._backgroundNode = null;
        if (this._background && TypeUtils.isFunction(this._background.destroy)) {
            this._background.destroy();
        }

        this._background = null;

        this._chartType = null;
        this._properties = null;
        this._plotArea = null;
        this._data = null;

        if (this._rawData) {

            if (this._rawData.dataModel) {
                var dataModel = this._rawData.dataModel;
                if(TypeUtils.isFunction(dataModel.destroy)){
                    dataModel.destroy();
                }
                
            }

            if (this._rawData.scales) {

                var scales = this._rawData.scales;
                for (var key in scales) {
                    if (scales.hasOwnProperty(key) && scales[key] && TypeUtils.isFunction(scales[key].destroy)) {
                        scales[key].destroy();
                        scales[key] = null;
                    }
                }

            }
        }

        this._rawData = null;

        this._outline = null;
    };
    return ChartView;
});

define('sap/viz/chart/layout/XYLayout',[
    "sap/viz/framework/common/util/NumberUtils",
    'sap/viz/framework/common/util/TypeUtils',
    "sap/viz/framework/common/util/oo",
    "sap/viz/chart/layout/BaseLayout"
], function Setup(NumberUtils, TypeUtils, oo, BaseLayout) {

    // var VERTICALSEQUENCELAYOUTMODULE = ['left', 'right', 'bottom', 'top'];
    // var HORIZONTALSEQUENCELAYOUTMODULE = ['bottom', 'top', 'left', 'right'];
    // var VERTICALSEQUENCE = ['width', 'width', 'height', 'height'];
    // var HORIZONTALSEQUENCE = ['height', 'height', 'width', 'width'];
    var layoutNameMapping = {
        'height': 'maxHeight',
        'width': 'maxWidth'
    };
    var position2SizeField = {
        left: "width",
        right: "width",
        top: "height",
        bottom: "height"
    };
    var position2RefSizeField = {
        left: "height",
        right: "height",
        top: "width",
        bottom: "width"
    };

    var TOPPADDINGINDEX = 0;
    var LEFTPADDINGINDEX = 1;
    var BOTTOMPADDINGINDEX = 2;
    var RIGHTPADDINGINDEX = 3;

    var DEFAULT_MAX_WIDTH = 1 / 3;
    var DEFAULT_MAX_HEIGHT = 1 / 3;


    function XYLayout(){
        XYLayout.superclass.constructor.apply(this, arguments);
        this.config.add({
            padding: [0, 0, 0, 0],
            rootWidth: 0,
            rootHeight: 0,
            layoutSequence: []
        });
    }

    oo.extend(XYLayout, BaseLayout);

    /*
     * items:
     * [{
     *      maxHeight: 1,
     *      maxWidth: 1,
     *      module: null,
     *      padding: [],
     *      position: ''
     * }]
     */
    XYLayout.prototype.layout = function(components){
        // var layoutSequence = isHorizontal ? HORIZONTALSEQUENCE : VERTICALSEQUENCE;
        // var refSequence = isHorizontal ? VERTICALSEQUENCE : HORIZONTALSEQUENCE;
        // var layoutModule = isHorizontal ? HORIZONTALSEQUENCELAYOUTMODULE : VERTICALSEQUENCELAYOUTMODULE;
        var results = {};
        var config = this.config;
        var i = 0;
        var width = config.get('totalWidth');
        var height = config.get('totalHeight');
        var rootWidth = config.get('rootWidth');
        var rootHeight = config.get('rootHeight');
        var rootSize = {
            width: config.get("rootWidth"),
            height: config.get("rootHeight")
        };
        var padding = config.get('padding');
        var layoutSequence = config.get('layoutSequence');

        var totalWidth = width - (padding[LEFTPADDINGINDEX] + padding[RIGHTPADDINGINDEX]);
        var totalHeight = height - (padding[TOPPADDINGINDEX] + padding[BOTTOMPADDINGINDEX]);
        totalWidth = totalWidth > 0 ? totalWidth : 0;
        totalHeight = totalHeight > 0 ? totalHeight : 0;

        var component;
        var item, o;
        var option;
        var pos;
        var componentsByPosition = {};
        for (var key in components) {
            if (components.hasOwnProperty(key)) {
                component = components[key];
                option = component.option;
                pos = option.position;

                componentsByPosition[pos] = {
                    module: component.module,
                    option: {
                        position: pos,
                        padding: {
                            paddingTop: getFloatValueOrZero(option.paddingTop),
                            paddingBottom: getFloatValueOrZero(option.paddingBottom),
                            paddingLeft: getFloatValueOrZero(option.paddingLeft),
                            paddingRight: getFloatValueOrZero(option.paddingRight)
                        },
                        maxWidth: isValidSize(option.maxWidth) ? option.maxWidth : DEFAULT_MAX_WIDTH,
                        maxHeight: isValidSize(option.maxHeight) ? option.maxHeight : DEFAULT_MAX_HEIGHT
                    }
                };
            }
        }

        var items = [];
        for(i = 0; i < layoutSequence.length; ++i){
            pos = layoutSequence[i];
            if (TypeUtils.isFunction(pos)) {
                items.push(pos);
                continue;
            }
            component = componentsByPosition[pos];
            if(component){
                items.push(component);
            }
        }
        items.push(componentsByPosition.center);
        if (!componentsByPosition.center) {
            throw "Cannot solve layout without plot";
        }

        var total = {
            width: rootWidth ? rootWidth : totalWidth,
            height: rootHeight ? rootHeight : totalHeight
        };
        var availableRegion = {
            width: totalWidth,
            height: totalHeight,
            x: padding[RIGHTPADDINGINDEX],
            y: padding[TOPPADDINGINDEX]
        };
        var hasOneModule = {
            center: false
        };
        var length = items.length;
        for (i = 0; i < length; i++) {
            item = items[i];
            if (TypeUtils.isFunction(item)) {
                item(results, availableRegion);
                continue;
            }
            o = {};
            results[item.module.alias] = o;
            option = item.option;
            var module = item.module;
            pos = option.position;
            if(pos === 'center'){
                continue;
            }
            var measureValueName = position2SizeField[pos];
            var refValueName = position2RefSizeField[pos];
            o.padding = option.padding;
            var modulePadding = {
                width: 0,
                height: 0
            };
            modulePadding.height += o.padding.paddingTop + o.padding.paddingBottom;
            modulePadding.width += o.padding.paddingLeft + o.padding.paddingRight;

            var preferredSize;
            var refSize = {};
            if (TypeUtils.isFunction(module.getPreferredSize)) {
                var sizeValue = NumberUtils.getSizeValue(option[layoutNameMapping[measureValueName]],
                        total[measureValueName]);
                sizeValue = sizeValue > availableRegion[measureValueName] ?
                        availableRegion[measureValueName] :
                        sizeValue;
                refSize[refValueName] = availableRegion[refValueName];
                refSize[measureValueName] = sizeValue;
                preferredSize = module.getPreferredSize(refSize)[measureValueName] +
                        modulePadding[measureValueName];
                sizeValue = preferredSize > sizeValue ? sizeValue : preferredSize;

                availableRegion[measureValueName] = availableRegion[measureValueName] - sizeValue;
                o[measureValueName] = sizeValue;
            } else {
                o[measureValueName] = 0;
            }
            // if (i === 1) {
            //   config.plot.module.setSize({
            //     width: availableRegion.width,
            //     height: availableRegion.height
            //   });
            //   //relayoutEvent();
            // }
        }

        for (i = 0; i < length; i++) {

            item = items[i];
            if (!item) {
                continue;
            } else if (TypeUtils.isFunction(item)) {
                item(results, availableRegion);
                continue;
            }
            o = results[item.module.alias];
            if (!o.hasOwnProperty('width')) {
                o.width = availableRegion.width;
            } else if (!o.hasOwnProperty('height')) {
                o.height = availableRegion.height;
            }
            switch (item.option.position) {
                case "top":
                    availableRegion.y = availableRegion.y + o.height;
                    break;
                case "left":
                    availableRegion.x = availableRegion.x + o.width;
                    break;
            }
        }

        for (i = 0; i < length; i++) {
            item = items[i];
            if (TypeUtils.isFunction(item)) {
                item(results, availableRegion);
                continue;
            }
            else if(item) {
                option = item.option;
                o = results[item.module.alias];
                switch (option.position) {
                    case "top":
                        o.x = availableRegion.x;
                        o.y = availableRegion.y - o.height;
                        break;
                    case "left":
                        o.x = availableRegion.x - o.width;
                        o.y = availableRegion.y;
                        break;
                    case "bottom":
                        o.x = availableRegion.x;
                        o.y = availableRegion.y + availableRegion.height;
                        break;
                    case "right":
                        o.x = availableRegion.x + availableRegion.width;
                        o.y = availableRegion.y;
                        break;
                    case "center":
                        o = results[item.module.alias] = {};
                        o.x = availableRegion.x;
                        o.y = availableRegion.y;
                        o.width = availableRegion.width;
                        o.height = availableRegion.height;
                        break;
                }

                if (!TypeUtils.isPlainObject(o.padding)) {
                    o.padding = option.padding;
                }
                if (option.position === 'top') {
                    o.y += o.padding.paddingTop;
                }
                if (option.position === 'left') {
                    o.x += o.padding.paddingLeft;
                }
                o.height -= o.padding.paddingTop + o.padding.paddingBottom;
                o.width -= o.padding.paddingLeft + o.padding.paddingRight;

                availableRegion.height = availableRegion.height > 0 ? availableRegion.height : 0;
                availableRegion.width = availableRegion.width > 0 ? availableRegion.width : 0;
            }
        }

        return results;
    };

    // Utility -----------------------------------------------

    function getLayoutInfomation(layout) {
        return {
            paddingTop: parseFloat(layout.paddingTop),
            paddingBottom: parseFloat(layout.paddingBottom),
            paddingLeft: parseFloat(layout.paddingLeft),
            paddingRight: parseFloat(layout.paddingRight)
        };
    }

    function getFloatValueOrZero(v) {
        var ret = parseFloat(v);
        if (isNaN(ret)) {
            ret = 0;
        }
        return ret;
    }

    function isValidSize(v){
        
        var value = parseFloat(v);
        
        return TypeUtils.isNumber(value) && value >= 0;
    }

    return XYLayout;
});

define('sap/viz/chart/components/container/XYContainer',[
    "sap/viz/framework/common/util/oo",
    "sap/viz/chart/components/container/UIContainer",
    "sap/viz/framework/common/util/PositionUtil",
    'sap/viz/framework/common/util/TypeUtils',
    "sap/viz/chart/layout/XYLayout",
    'sap/viz/framework/common/util/PropertyZoneUtil',
    'sap/viz/framework/common/util/NumberUtils',
    'sap/viz/framework/common/util/Constants',
    'sap/viz/framework/common/util/FeedingZoneUtil'
], function(oo, UIContainer, PositionUtil, TypeUtils, 
        XYLayout, PropertyZoneUtil, NumberUtils, Constants, FeedingZoneUtil) {
    var XYContainer = function(runtime, options) {
        XYContainer.superclass.constructor.apply(this, arguments);
        this.setLayoutAlgorithm(new XYLayout());
        this._layoutSequence = null;
        this._layoutResult = null;
        this._roughSize = {
            width: 0,
            height: 0
        };
        runtime.zoneManager().add(PropertyZoneUtil.plot(this));
        runtime.zoneManager().add(FeedingZoneUtil.plot(this));
    };
    oo.extend(XYContainer, UIContainer);

    XYContainer.prototype.setRoughSize = function(value) {
        if (value.width != null) {
            this._roughSize.width = value.width;
        }
        if (value.height != null) {
            this._roughSize.height = value.height;
        }
        this.updateValueScale();
        for (var key in this._children) {
            if (this._children.hasOwnProperty(key)) {
                if(this._children[key].module && this._children[key].module.setRoughSize){
                    this._children[key].module.setRoughSize(value);
                }
            }
        }
        return this;
    };

    XYContainer.prototype.updateValueScale = function(value) {};

    XYContainer.prototype.setLayoutSequence = function(value) {
        this._layoutSequence = value;
        return this;
    };

    XYContainer.prototype.render = function(rootElement) {
        XYContainer.superclass.render.apply(this, arguments);
        if (this._size.width > 0 && this._size.height > 0 && this._layoutResult) {
            this._initRenderBase(rootElement);
            PositionUtil.positionElements(this._layoutResult, this._selections);
            this._renderSub();
        }
    };

    XYContainer.prototype.setChild = function(key, module, option) {
        XYContainer.superclass.setChild.apply(this, arguments);
        if (module.setPosition && option.position) {
            module.setPosition(option.position);
        }
    };

    XYContainer.prototype.removeChild = function(key){
        delete this._children[key];
    };

    // Only used for legend group to align with plot instead of plotArea.
    // See ChartView.layout
    XYContainer.prototype.getPlotPosition = function() {
        return this._layoutResult.plot;
    };

    XYContainer.prototype.layout = function() {
        var getPositiveInt = NumberUtils.getPositiveInt;
        var originProp = this._properties.origin;
        var paddingInfo = this.calculatePaddingInPX(originProp, this._roughSize.width, this._roughSize.height);

        var padding = getPositiveInt(paddingInfo.propertyPaddingInPX, paddingInfo.constantPaddingInPX);
        var paddingTop = getPositiveInt(paddingInfo.propertyPaddingTopInPX, padding);
        var paddingRight = getPositiveInt(paddingInfo.propertyPaddingRightInPX, padding);
        var paddingBottom = getPositiveInt(paddingInfo.propertyPaddingBottomInPX, padding);
        var paddingLeft = getPositiveInt(paddingInfo.propertyPaddingLeftInPX, padding);
        
        this._layoutAlgorithm.config.set({
            totalWidth: this._size.width,
            totalHeight: this._size.height,
            rootWidth: this._roughSize.width - (paddingRight + paddingLeft),
            rootHeight: this._roughSize.height - (paddingTop + paddingBottom),
            layoutSequence: this._layoutSequence
        });

        //Set layout info
        var key;
        for ( key in this._children) {
            if (this._children.hasOwnProperty(key)) {
                var child = this.getChild(key);
                var option = child.option;
                
                var maxWidth = this._properties.get(key + ".layout.maxWidth");
                var maxHeight = this._properties.get(key + ".layout.maxHeight");
                
                if (maxWidth) {
                    option.maxWidth = maxWidth;
                }
                
                if (maxHeight) {
                    option.maxHeight = maxHeight;
                }
            }
        }

        var results = this._layoutAlgorithm.layout(this._children);
        this._layoutResult = {};
        for(key in this._children){
            if(this._children.hasOwnProperty(key)){
                var module = this._children[key].module;
                var size = this._layoutResult[key] = results[key];
                module.setSize(size);
            }
        }
    };

    XYContainer.prototype._renderSub = function() {
        for (var key in this._children) {
            if (this._children.hasOwnProperty(key)) {
                this._children[key].module.render(this._selections[key]);
            }
        }
    };

    XYContainer.prototype._initRenderBase = function(parentNode) {
        if (this._selections) {
            return;
        }
        this._selections = {};
        for (var key in this._children) {
            if (this._children.hasOwnProperty(key)) {
                if (this._selections[key] == null) {
                    if (this._children[key].option.position === "center") {
                        this._selections[key] = parentNode.insert("g", ":first-child").attr('class', 'v-m-' + key);
                    } else {
                        this._selections[key] = parentNode.append("g").attr('class', 'v-m-' + key);
                    }
                }
            }
        }
    };

    XYContainer.prototype.destroy = function() {
        XYContainer.superclass.destroy.call(this);
        this._layoutSequence = null;
        this._layoutResult = null;
        this._roughSize = null;
    };
    
    return XYContainer;
});

define('sap/viz/chart/components/axis/sub/AxisComponent',[
    "sap/viz/framework/common/util/oo",
    "sap/viz/framework/common/util/Constants",
    "sap/viz/chart/components/UIComponent",
    "sap/viz/framework/common/util/NumberUtils",
    "sap/viz/chart/components/util/TextUtils",
    "sap/viz/framework/common/util/PositionUtil"
], function(oo, Constants, UIComponent, NumberUtils, TextUtils, PositionUtils) {

    var AXIS_VCLASS = Constants.CSS.CLASS.AXIS;

    var AxisComponent = function(runtime, options) {
        AxisComponent.superclass.constructor.apply(this, arguments);
        this._position = null;
        this._formerProperties = null;
        this._preferredSize = {
            minWidth: 0,
            minHeight: 0
        };
    };

    oo.extend(AxisComponent, UIComponent);

    AxisComponent.prototype.setPosition = function(pos) {
        this._position = pos;
        return this;
    };

    AxisComponent.prototype._isVertical = function() {
        return PositionUtils.isVertical(this._position);
    };

    AxisComponent.prototype._isHorizontal = function() {
        return PositionUtils.isHorizontal(this._position);
    };

    AxisComponent.prototype._measureTextSize = function(text, style) {
        var size = TextUtils.canvasMeasure(text, style['fontSize'], style['fontWeight'], style['fontFamily']);
        return NumberUtils.preciseObject(size);
    };

    AxisComponent.prototype._updatePfdSize = function(size) {
        if (size.minWidth != null) {
            this._preferredSize.minWidth = size.minWidth;
        }
        if (size.minHeight != null) {
            this._preferredSize.minHeight = size.minHeight;
        }
    };

    AxisComponent.prototype._isSpaceEnough = function() {
        if (this._realSize.width === 0 || this._realSize.height === 0) {
            return false;
        }
        var pfdSize = this._preferredSize;
        return Math.ceil(pfdSize.minWidth) <= Math.ceil(this._realSize.width) && 
            Math.ceil(pfdSize.minHeight) <= Math.ceil(this._realSize.height);
    };

    AxisComponent.prototype.destroy = function() {
        AxisComponent.superclass.destroy.call(this);
        this._position = null;
        this._formerProperties = null;
        this._preferredSize = null;
    };
    
    return AxisComponent;

});
define('sap/viz/chart/components/axis/sub/AxisTitle',[
    "sap/viz/framework/common/util/Constants",
    "sap/viz/framework/common/util/oo",
    "sap/viz/chart/components/axis/sub/AxisComponent",
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/framework/common/util/NumberUtils",
    "sap/viz/chart/components/util/StyleUtils",
    "sap/viz/chart/components/util/TextUtils",
    "sap/viz/framework/common/util/NameColorUtils"
], function(Constants, oo, AxisComponent, TypeUtils, NumberUtils, StyleUtils, TextUtils, NameColorUtils) {

    var AXIS_CLASS_NAMES = Constants.CSS.CLASS.AXIS;

    var AxisTitle = function() {
        AxisTitle.superclass.constructor.apply(this, arguments);

        var _this = this;
        this._properties.add('title.style.color', {
            get: function(value){
                if(_this._isApplyAxisLineColor()){
                    value = _this._properties.get('color');
                }
                return _this._isAllHidden() ? Constants.AXIS.HIDDEN_TITLE.COLOR : value;
            },
            set: function(value){
                _this._properties.set('title.applyAxislineColor', false);
                return value;
            }
        });

        this.visibleItemsNumber = -1;
    };
    oo.extend(AxisTitle, AxisComponent);

    function adjustTitleItems(items, layerNumber) {
        var i;
        for (i = 0; i < items.length; i++) {
            if (i >= layerNumber) {
                items[i].isHidden = true;
            } else {
                items[i].isHidden = false;
            }
        }
    }
    
    AxisTitle.prototype._isApplyAxisLineColor = function() {
        return this._properties.get('title.applyAxislineColor') === true;
    };
    
    AxisTitle.prototype.render = function(selection) {
        selection.select("g." + AXIS_CLASS_NAMES.TITLE).remove();
        selection.selectAll(".v-m-axisTitleEventLayer").remove();
        var properties = this._properties;
        if (TypeUtils.isString(this._data.text) &&
            this._isSpaceEnough() &&
            properties.get('visible') && properties.get('title.visible')) {
            //      selection.append('rect').attr('class', 'v-bound')
            //        .attr('width', this._size.width).attr('height', this._size.height)
            //        .attr('x', 0).attr('y', 0)
            //        .attr('fill', 'transparent');
            var text = this._data.text;
            var className = AXIS_CLASS_NAMES.TITLE + " " + AXIS_CLASS_NAMES.TITLE_BACKWORD;
            var hiddenClassName = AXIS_CLASS_NAMES.TITLE_HIDDEN;
            var styles = properties.get('title.style');
            if(styles && styles.color){
                styles.color = NameColorUtils.convertColor(styles.color);
            }
            
            var textOffset = TextUtils.getTextBaselineOffset(styles);
            var styleColor = this.runtime().effectManager().register({
                fillColor: (this._isApplyAxisLineColor()) ? NameColorUtils.convertColor(properties.get('color')) :
                    styles.color
            });
            var hiddenStyleColor = this.runtime().effectManager().register({
                fillColor: Constants.AXIS.HIDDEN_TITLE.COLOR
            });
            var titleText = selection.append("g")
                .attr("class", className)
                .attr("fill", styleColor)
                .attr("font-size", styles['fontSize'])
                .attr("font-weight", styles['fontWeight'])
                .attr("font-family", styles['fontFamily'])
                .attr("font-style", styles['fontStyle'])
                .append("text")
                .text(text)
                .attr("text-anchor", "middle")
                .attr("dominant-baseline", "auto");

            var eTitleText = "";
            var cssString = StyleUtils.convertToCss(styles);
            if (this._isVertical()) {
                titleText.attr("x", this._size.width - textOffset)
                    .attr("y", this._size.height / 2)
                    .attr("transform", "rotate(-90," + (this._size.width - textOffset) + "," + (this._size.height /
                        2) + ")");
                eTitleText = TextUtils.ellipsis(text, titleText.node(), this._size.height, cssString);
            } else {
                titleText.attr("x", this._size.width / 2)
                    .attr("y", this._size.height - textOffset);
                eTitleText = TextUtils.ellipsis(text, titleText.node(), this._size.width, cssString);
            }
            var useCustomColor = properties.has('title.style.color', 'value');
            //var eTitleText = text;
            var titleObj = this._data;
            if (!titleObj.isCustomized) {
                adjustTitleItems(titleObj.items, this.visibleItemsNumber);

                titleText.text("");
                if (eTitleText !== text && titleText.select("title").empty()) {
                    titleText.append("title").text(text);
                }

                var iItemIndex;
                for (iItemIndex = 0; iItemIndex < titleObj.items.length; iItemIndex++) {
                    var tItem = titleText.append("tspan");
                    tItem.attr("class", className);
                    tItem.attr("dominant-baseline", "auto");

                    if (titleObj.items[iItemIndex].isHidden && !this._isApplyAxisLineColor() && !useCustomColor) {
                        //note: you have to set v-hidden-title css after v-title (because of css rules)
                        tItem.attr("class", className + " " + hiddenClassName);
                        tItem.attr("fill", hiddenStyleColor);
                    }
                    if (eTitleText.length > titleObj.items[iItemIndex].text.length) {
                        if (((eTitleText.length - 3) < titleObj.items[iItemIndex].text.length) &&
                            eTitleText.substring(eTitleText.length - 3) === "...") {
                            tItem.text(eTitleText);
                            break;
                        } else {
                            tItem.text(titleObj.items[iItemIndex].text);
                            eTitleText = eTitleText.substring(titleObj.items[iItemIndex].text.length);
                        }
                    } else {
                        tItem.text(eTitleText);
                        break;
                    }
                }
            } else {
                //for dual charts, we may set titleObj.isCustomizedColor to keep customized color.
                if (!titleObj.isCustomizedColor && this.visibleItemsNumber === 0 && !useCustomColor) {
                    titleText.attr("class", className + " " + hiddenClassName);
                    titleText.attr("fill", hiddenStyleColor);
                }
            }
        }
    };

    AxisTitle.prototype._isAllHidden = function() {
        var useCustomColor = this._properties.has('title.style.color', 'value');
        var titleObj = this._data;
        if(titleObj){
            if(!useCustomColor && titleObj.isCustomized && !titleObj.isCustomizedColor &&
                    this.visibleItemsNumber === 0){
                return true;
            }
            if(!useCustomColor && !titleObj.isCustomized && !this._isApplyAxisLineColor()){
                var len = titleObj.items.length;
                for(var i = 0; i < len; ++i){
                    if(!titleObj.items[i].isHidden){
                        return false;
                    }
                }
                return true;
            }
        }
        return false;
    };

    AxisTitle.prototype.setTitleHiddenItems = function(_items) {
        this.visibleItemsNumber = _items;
    };

    AxisTitle.prototype.getPreferredSize = function() {
        var pfdSize = {
            minWidth: 0,
            maxWidth: 0,
            minHeight: 0,
            maxHeight: 0,
            spacings: [{
                "interval": 0,
                "type": Constants.SPACING_TYPE.STEP
            }]
        };
        var props = this._properties;
        if (TypeUtils.isString(this._data.text) &&
                props.get('visible') &&
                props.get('title.visible')) {
            var titleStyle = props.get('title.style');
            var size = this._measureTextSize(this._data.text, titleStyle);
            var minTextWidth = this._getMinTextWidth(this._data.text, titleStyle);
            if (this._isVertical()) {
                pfdSize.minWidth = size.height;
                pfdSize.maxWidth = size.height;
                pfdSize.minHeight = minTextWidth;
                pfdSize.maxHeight = size.width;
            } else {
                pfdSize.minWidth = minTextWidth;
                pfdSize.maxWidth = size.width;
                pfdSize.minHeight = size.height;
                pfdSize.maxHeight = size.height;
            }
            pfdSize.spacings[0].interval = size.height;
        }
        var precisedSize = NumberUtils.preciseObject(pfdSize);
        this._updatePfdSize(precisedSize);
        return precisedSize;
    };

    AxisTitle.prototype._getMinTextWidth = function(text, style) {
        var size = this._measureTextSize(text, style);
        var minTextWidth = size.width;
        if (minTextWidth > 0 && text.length) {
            var minSize = this._measureTextSize(text[0] + "...", style);
            if (minTextWidth > minSize.width) {
                minTextWidth = minSize.width;
            }
        }
        return minTextWidth;
    };

    AxisTitle.prototype.destroy = function() {
        AxisTitle.superclass.destroy.call(this);
        this.visibleItemsNumber = null;
    };
    
    return AxisTitle;

});

define('sap/viz/chart/layout/AxisLayout',[
    "sap/viz/framework/common/util/oo",
    "sap/viz/framework/common/util/Constants",
    "sap/viz/framework/common/util/NumberUtils",
    "sap/viz/framework/common/util/PositionUtil",
    "sap/viz/chart/layout/BaseLayout"
], function(oo, Constants, NumberUtils, PositionUtil, BaseLayout) {

    var STACK_DIRECTION_HORIZONTAL = Constants.DIRECTION.HORIZONTAL;
    var STACK_DIRECTION_VERTICAL = Constants.DIRECTION.VERTICAL;
    var SPACING_TO_ROUGH = Constants.AXIS.SPACING_TO_ROUGH;
    var SPACING_MAX_IN_PX = Constants.AXIS.SPACING_MAX_IN_PX;

    function stack_sortOrderDefault(a, b) {
        return a.option.order - b.option.order;
    }

    function stack_sortPriorityDefault(a, b) {
        return a.option.priority - b.option.priority;
    }

    function stack_sizeDefault(x, refSize) {
        return x.module.getPreferredSize(refSize);
    }

//    function stack_orderDefault(x) {
//        return x.order;
//    }

//    function stack_priorityDefault(x) {
//        return x.priority;
//    }

    function stack_offsetDefault(x) {
        return x.option.offset;
    }

    var AxisLayout = function() {
        AxisLayout.superclass.constructor.apply(this, arguments);
        this.config.add({
//            orderFn: stack_orderDefault,
//            priorityFn: stack_priorityDefault,
            sortOrderFn: stack_sortOrderDefault,
            sortPriorityFn: stack_sortPriorityDefault,
            offsetFn: stack_offsetDefault,
            sizeFn: stack_sizeDefault,
            rootWidth: 0,
            rootHeight: 0,
            roughWidth: 0,
            roughHeight: 0,
            position: ''
        });
    };

    oo.extend(AxisLayout, BaseLayout);

    /*
     * components: 
     * [{
     *     module: null,
     *     offset: 1,
     *     order: 1,
     *     priority: 1
     * }]
     */
    AxisLayout.prototype.layout = function(components){
        var config = this.config;
        var totalWidth = config.get('totalWidth');
        var totalHeight = config.get('totalHeight');
        var axisPosition = config.get('position');
        var offsetFn = config.get('offsetFn');
        var sizeFn = config.get('sizeFn');
        var rootWidth = config.get('rootWidth');
        var rootHeight = config.get('rootHeight');
        var roughWidth = config.get('roughWidth');
        var roughHeight = config.get('roughHeight');

        var refSize = getRefSize(axisPosition, totalWidth, totalHeight);
        var spaceLimit = getSpaceLimit(axisPosition, totalWidth, totalHeight);
        var gravity = getGravity(axisPosition);
        var direction = getDirection(axisPosition);

        var componentsArray = this._dictToArray(components);
        var componentsPriority = getComponentsPriority(componentsArray, config);
        var componentsOrder = getComponentsOrder(componentsArray, config);

        var isStackHorizontal = direction === STACK_DIRECTION_HORIZONTAL;
        var sizeField, refSizeField, coordField, minSizeField, maxSizeField, minRefSizeField, rootField, roughField;

        roughField = Math.min(roughWidth, roughHeight);
        if (isStackHorizontal) {
            minSizeField = "minWidth";
            maxSizeField = "maxWidth";
            minRefSizeField = "minHeight";
            sizeField = "width";
            refSizeField = "height";
            coordField = "x";
            rootField = rootWidth;
        } else {
            minSizeField = "minHeight";
            maxSizeField = "maxHeight";
            minRefSizeField = "minWidth";
            sizeField = "height";
            refSizeField = "width";
            coordField = "y";
            rootField = rootHeight;
        }

        //judge whether component has enough space by "priority"
        var limit = spaceLimit; //+ 0.00001; //eliminate precision loss of javascript float
        var i = 0,
            length = componentsPriority.length,
            component, moduleSize, offset;
        var hideRest = false;
        var rootOffsetInPX = 0;
        var roughOffsetInPX = SPACING_TO_ROUGH * roughField;
        for (; i < length; ++i) {
            component = componentsPriority[i];
            if (hideRest) {
                component.isEnough = false;
                continue;
            }
            moduleSize = sizeFn(component);
            rootOffsetInPX = offsetFn(component) * rootField;
            offset = Math.min(rootOffsetInPX, roughOffsetInPX);
            offset = Math.min(offset, SPACING_MAX_IN_PX);
            if (moduleSize[maxSizeField] &&
                    NumberUtils.preciseSimple(limit - offset - moduleSize[minSizeField]) >= 0 &&
                    Math.ceil(moduleSize[minRefSizeField]) <= Math.ceil(refSize)) {
                component.isEnough = true;
                limit = NumberUtils.preciseSimple(limit - offset);
                if (limit >= moduleSize[maxSizeField]) {
                    component[sizeField] = moduleSize[maxSizeField];
                    limit = NumberUtils.preciseSimple(limit - moduleSize[maxSizeField]);
                } else {
                    component[sizeField] = getFitSize(limit, moduleSize.spacings);
                    limit = 0;
                }
            } else {
                component.isEnough = false;
                if (moduleSize[maxSizeField]) {
                    hideRest = true;
                }
            }
            limit = NumberUtils.preciseSimple(limit);
        }

        //calculate position for components which has enough space by "order"
        i = 0;
        length = componentsOrder.length; // reset temporary variables
        var anchorResult = {};
        var anchor, start;
        if (gravity < 0) {
            start = 0;
            for (; i < length; ++i) {
                anchor = {
                    x: 0,
                    y: 0,
                    width: 0,
                    height: 0
                };
                component = componentsOrder[i];
                if (component.isEnough) {
                    rootOffsetInPX = offsetFn(component) * rootField;
                    offset = Math.min(rootOffsetInPX, roughOffsetInPX);
                    offset = Math.min(offset, SPACING_MAX_IN_PX);
                    start += offset;
                    anchor[coordField] = start;
                    start += (anchor[sizeField] = component[sizeField]);
                    anchor[refSizeField] = refSize;
                }
                anchorResult[component.module.alias] = anchor;
            }
        } else {
            start = spaceLimit;
            for (; i < length; ++i) {
                anchor = {
                    x: 0,
                    y: 0,
                    width: 0,
                    height: 0
                };
                component = componentsOrder[i];
                if (component.isEnough) {
                    rootOffsetInPX = offsetFn(component) * rootField;
                    offset = Math.min(rootOffsetInPX, roughOffsetInPX);
                    offset = Math.min(offset, SPACING_MAX_IN_PX);
                    start -= offset;
                    start -= (anchor[sizeField] = component[sizeField]);
                    anchor[refSizeField] = refSize;
                }
                anchor[coordField] = start;
                anchorResult[component.module.alias] = anchor;
            }
        }
        return anchorResult;
    };

    AxisLayout.prototype.getPreferredSize = function(components) {
        var config = this.config;

        var totalWidth = config.get('totalWidth');
        var totalHeight = config.get('totalHeight');
        var axisPosition = config.get('position');
        var sizeFn = config.get('sizeFn');
        var offsetFn = config.get('offsetFn');
        var componentsArray = this._dictToArray(components);
        var rootWidth = config.get('rootWidth');
        var rootHeight = config.get('rootHeight');
        var roughWidth = config.get('roughWidth');
        var roughHeight = config.get('roughHeight');

        var spacings = [];
        var i = 0;
        var size = 0;
        var componentsPriority = getComponentsPriority(componentsArray, config);
        var length = componentsPriority.length;
        var direction = getDirection(axisPosition);
        var isStackHorizontal = direction === STACK_DIRECTION_HORIZONTAL;
        var majorSizeName = isStackHorizontal ? 'height' : 'width';
        var minorSizeName = isStackHorizontal ? 'width' : 'height';
        var refSize = getRefSize(axisPosition, totalWidth, totalHeight);
        var sizeLimit = PositionUtil.isVertical(axisPosition) ? totalWidth : totalHeight;
        var component, moduleSize, spacing, offset, maxSizeField, minRefSizeField, rootField, roughField;

        roughField = Math.min(roughWidth, roughHeight);
        if (isStackHorizontal) {
            maxSizeField = "maxWidth";
            minRefSizeField = "minHeight";
            rootField = rootWidth;
        } else {
            maxSizeField = "maxHeight";
            minRefSizeField = "minWidth";
            rootField = rootHeight;
        }
        var hideRest = false;
        for (; i < length && !hideRest; ++i) {
            component = componentsPriority[i];
            var rootOffsetInPX = offsetFn(component) * rootField;
            var roughOffsetInPX = SPACING_TO_ROUGH * roughField;
            offset = Math.min(rootOffsetInPX, roughOffsetInPX);
            offset = Math.min(offset, SPACING_MAX_IN_PX);
            var componentRefSize = {};
            componentRefSize[minorSizeName] = sizeLimit - size - offset;
            componentRefSize[majorSizeName] = refSize;
            moduleSize = sizeFn(component, componentRefSize);
            if (Math.ceil(moduleSize[minRefSizeField]) <= Math.ceil(refSize) && moduleSize[maxSizeField] &&
                NumberUtils.preciseSimple(size + offset + moduleSize[maxSizeField]) <=
                NumberUtils.preciseSimple(sizeLimit)) {
                size += offset + moduleSize[maxSizeField];
                // spacing = moduleSize.spacings;
                // if (spacing && spacing.length) {
                //   spacing[spacing.length - 1].interval += offset;
                // }
                // spacings = spacings.concat(spacing);
            } else if (moduleSize[maxSizeField] !== 0) {
                hideRest = true;
            }

        }
        var width = 0,
            height = 0;
        if (isStackHorizontal) {
            width = size;
            height = refSize;
        } else {
            width = refSize;
            height = size;
        }
        return {
            width: width,
            height: height
            //        spacings: spacings
        };
    };

    function getFitSize(limit, spacings) {
        var size = 0;
        var spacing;
        if (!spacings) { //it's true when chart is resized to very small
            return size;
        }
        for (var i = 0, length = spacings.length; i < length; ++i) {
            spacing = spacings[i];
            size += spacing.interval;
            if (size > limit) {
                switch (spacing.type) {
                    case Constants.SPACING_TYPE.STEP:
                        size -= spacing.interval;
                        break;
                    case Constants.SPACING_TYPE.RANGE:
                        size = limit;
                        break;
                }
            }
        }
        return size;
    }

    function getGravity(position) {
        if (position === Constants.POSITION.TOP || position === Constants.POSITION.LEFT) {
            return 1;
        } else {
            return -1;
        }
    }

    function getDirection(position) {
        if (position === Constants.POSITION.TOP || position === Constants.POSITION.BOTTOM) {
            return STACK_DIRECTION_VERTICAL;
        } else {
            return STACK_DIRECTION_HORIZONTAL;
        }
    }

    function getRefSize(position, width, height){
        return PositionUtil.isVertical(position) ? height : width;
    }

    function getSpaceLimit(position, width, height){
        return PositionUtil.isVertical(position) ? width : height;
    }

    function getComponentsPriority(components, config){
        return components.slice().sort(config.get('sortPriorityFn'));
    }

    function getComponentsOrder(components, config){
        return components.slice().sort(config.get('sortOrderFn'));
    }

    return AxisLayout;
});

define('sap/viz/chart/components/axis/AxisContainer',[
    "sap/viz/framework/common/util/Constants",
    "sap/viz/framework/common/util/oo",
    "sap/viz/chart/components/container/UIContainer",
    "sap/viz/framework/common/util/NumberUtils",
    'sap/viz/framework/common/util/TypeUtils',
    "sap/viz/framework/common/util/PositionUtil",
    'sap/viz/chart/components/util/BoundUtil',
    "sap/viz/chart/components/axis/sub/AxisTitle",
    "sap/viz/chart/layout/AxisLayout",
    'sap/viz/framework/common/util/PropertyZoneUtil',
    'sap/viz/framework/common/util/FeedingZoneUtil'
], function(Constants, oo, UIContainer,
    NumberUtils, TypeUtils, PositionUtils, BoundUtil,
    AxisTitle, AxisLayout, PropertyZoneUtil, FeedingZoneUtil) {
    var DEFAULT_TITLE_TEXT = "Axis Title";

    var POSITION_CLASS_MAPPING = {
        'left': 'v-m-yAxis',
        'top': 'v-m-xAxis2',
        'right': 'v-m-yAxis2',
        'bottom': 'v-m-xAxis'
    };

    var AxisContainer = function(runtime, options) {
        AxisContainer.superclass.constructor.apply(this, arguments);

        this._disableTitle = !!options.disableTitle;
        this.categoryTitleXoffset = null;
        this.categoryTitleYoffset = null;
        this._roughSize = {
            width: 0,
            height: 0
        };
        var properties = this._properties;

        if (!options.isTrellis) {
            var that = this;
            var axisPropertyZone = {},
                axisFeedingZone = {};
            axisPropertyZone[this._name] = {
                value: [],
                readonly: true,
                serializable: false,
                get: function() {
                    var result = [],
                        zonenamePrefix, boundRect, boundRect1, bound, bound1, temp, root;
                    var categoryTitleXoffset = that.categoryTitleXoffset || 0;
                    var categoryTitleYoffset = that.categoryTitleYoffset || 0;
                    if (that._properties.get('title.visible') &&
                        that._selections && that._selections["axisTitle"] &&
                        that._selections["axisTitle"].length > 0) {
                        boundRect = that._selections["axisTitle"].node().getBoundingClientRect();
                        if (boundRect.width > 1.5 && boundRect.height > 1.5) {
                            bound = [
                                []
                            ];
                            bound[0].push([boundRect.left, boundRect.top]);
                            bound[0].push([boundRect.right, boundRect.top]);
                            bound[0].push([boundRect.right, boundRect.bottom]);
                            bound[0].push([boundRect.left, boundRect.bottom]);
                            result.push({
                                "name": that._name + ' title',
                                "bound": bound
                            });
                        }
                    }
                    if (that._parent && that._parent.select(".v-m-axisBody").node()) {
                        //if .v-m-axisBody has covered by clippath, we have to use BoundingClientRect of clippath.
                        var axisBodyVisibleElement = that._parent.select(".v-m-axisBody").node();
                        
                        var axisBodyClipPath = axisBodyVisibleElement.getAttribute('clip-path');
                        if(axisBodyClipPath && axisBodyClipPath.length > 0) {
                            //remove all spaces
                            axisBodyClipPath = axisBodyClipPath.replace(/\s/g, "");
                             
                            //remove prefix
                            var prefixStr = /^url\(/;
                            axisBodyClipPath = axisBodyClipPath.replace(prefixStr, "");
                             
                            //remove suffix
                            axisBodyClipPath = axisBodyClipPath.replace(/\)$/, "");

                            //fix BITSDC1-5040, filter "" because IE will automatically add "" in URL()
                            axisBodyClipPath = axisBodyClipPath.replace(/^\"/, "");
                            axisBodyClipPath = axisBodyClipPath.replace(/\"$/, "");

                            //select clippath
                            axisBodyVisibleElement = that._parent.select(axisBodyClipPath).node();
                        }

                        temp = axisBodyVisibleElement.getBoundingClientRect();
                        if (temp.width > 1.5 || temp.height > 1.5) {
                            boundRect1 = {
                                left: temp.left,
                                right: temp.right,
                                top: temp.top,
                                bottom: temp.bottom
                            };

                            bound1 = [
                                []
                            ];
                            bound1[0].push([boundRect1.left + categoryTitleXoffset, 
                                boundRect1.top + categoryTitleYoffset]);
                            bound1[0].push([boundRect1.right + categoryTitleXoffset, 
                                boundRect1.top + categoryTitleYoffset]);
                            bound1[0].push([boundRect1.right + categoryTitleXoffset, 
                                boundRect1.bottom + categoryTitleYoffset]);
                            bound1[0].push([boundRect1.left + categoryTitleXoffset, 
                                boundRect1.bottom + categoryTitleYoffset]);
    
                            result.push({
                                "name": that._name,
                                "bound": bound1
                            });
                        }
                        root = that._parent.node().ownerSVGElement;
                    }
                    PropertyZoneUtil.calcOffsetFromChart(root, result);
                    return result;
                }
            };

            axisFeedingZone[this._name] = {
                value: [],
                readonly: true,
                serializable: false,
                get: function() {
                    var result, zonenamePrefix, feeding;
                    if (that._parent) {
                        var root = d3.select(that._parent.node().ownerSVGElement);
                        result = FeedingZoneUtil.buildRes(that._name, feeding, root, that.isByBound());
                    }
                    return result;
                }
            };

            runtime.zoneManager().add({
                tempPropertyZone: axisPropertyZone,
                tempFeedingZone: axisFeedingZone
            });
        }

        this.setLayoutAlgorithm(new AxisLayout());
        this._scale = null;
        this._bindingFields = [];
        if (!this._disableTitle) {
            this.setChild("axisTitle", new AxisTitle(runtime, options), {
                order: 3,
                priority: 1,
                offset: Constants.AXIS.SPACING_TO_ROOT
            });
        }

        this._position = null;
        this._parent = null;
    };
    oo.extend(AxisContainer, UIContainer);

    AxisContainer.prototype.setData = function(data) {
        if (data.metaData) {
            var metaData = data.metaData;
            this._bindingFields = [];
            for (var i = 0, len = metaData.length; i < len; ++i) {
                
                var bindingField = {
                    id: metaData[i].id,
                    name: metaData[i].name
                };
                
                // measureNames
                if (metaData[i].values) {
                    var mapping = {};
                    metaData[i].values.forEach(function(item) {
                        mapping[item.id] = item.name;
                    });
                    bindingField.values = mapping;
                }
                
                this._bindingFields.push(bindingField);
            }
        }
    };
    AxisContainer.prototype.setPosition = function(pos) {
        this._position = pos;
        for (var key in this._children) {
            if (this._children.hasOwnProperty(key)) {
                var module = this.getChild(key).module;
                module.setPosition(this._position);
            }
        }
        return this;
    };

    AxisContainer.prototype._isVertical = function() {
        return PositionUtils.isVertical(this._position);
    };

    AxisContainer.prototype._isHorizontal = function() {
        return PositionUtils.isHorizontal(this._position);
    };


    AxisContainer.prototype._updateData = function() {
        if (!this._disableTitle) {
            this.getChild("axisTitle").module.setData(this._getTitle());
        }
    };

    // AxisContainer.prototype._updateProperties = function() {
    //     var props = this._properties.get();
    //     for (var key in this._children) {
    //         if (this._children.hasOwnProperty(key)) {
    //             var module = this.getChild(key).module;
    //             module.setPropertiesChanged(props);
    //         }
    //     }
    // };

    AxisContainer.prototype._getTitle = function() {
        //we cannot just return title text. Axis Title should be an object.
        var titleObj = {};
        titleObj.text = "";
        titleObj.isCustomized = false;
        titleObj.items = [];
        //an item is an obj as {text: "abc", isHidden: false}

        var text = "";

        var titleText = this._properties.get('title.text');

        if (TypeUtils.isString(titleText)) {
            text = titleText;
            titleObj.isCustomized = true;
        } else if (this._bindingFields) {
            //we should build the items of axis title. _constructTitle will change
            //titleObj.items
            text = this._constructTitle(this._bindingFields, titleObj.items);
        } else {
            text = DEFAULT_TITLE_TEXT;
            titleObj.isCustomized = true;
        }

        titleObj.text = text;
        return titleObj;
    };

    AxisContainer.prototype._constructTitle = function(header, titleItems) {
        return "";
    };

    AxisContainer.prototype.getParent = function() {
        if (this._parent) {
            return this._parent.select("g." + Constants.CSS.CLASS.AXIS.CONTAINER);
        } else {
            return null;
        }
    };

    AxisContainer.prototype.render = function(rootElement) {
        this._parent = rootElement;
        AxisContainer.superclass.render.apply(this, arguments);
        BoundUtil.drawBound(rootElement, this._size.width, this._size.height, undefined, true);
        var parent = rootElement.select("g." + Constants.CSS.CLASS.AXIS.CONTAINER);
        if (this._size.width > 0 || this._size.height > 0) {
            if (!parent.node()) {
                delete this._selections;
                this._selections = null;
                parent = rootElement.append("g").attr("class", Constants.CSS.CLASS.AXIS.CONTAINER);
            }
            this._initRenderBase(parent);
            this.layout();
            if (this.getChild("axisBody")) {
                var bodyLayersNumber = this.getChild("axisBody").module.getAvailableLayersNumber();
                if (!this._disableTitle) {
                    this.getChild("axisTitle").module.setTitleHiddenItems(bodyLayersNumber);
                }
            }
            this._renderSub();
        }

        var synonymClass = POSITION_CLASS_MAPPING[this._position];
        rootElement.classed(synonymClass, true);
    };


    AxisContainer.prototype.setChild = function(key, module, option) {
        AxisContainer.superclass.setChild.apply(this, arguments);
        if (module.setPosition && option.position) {
            module.setPosition(option.position);
        }
    };

    AxisContainer.prototype._setupLayout = function(info) {
        this._updateData(info);
        // this._updateProperties();
        var getPositiveInt = NumberUtils.getPositiveInt;
        var originProp = this._properties.origin;
        var paddingInfo = this.calculatePaddingInPX(originProp, this._roughSize.width, this._roughSize.height);

        var padding = getPositiveInt(paddingInfo.propertyPaddingInPX, paddingInfo.constantPaddingInPX);
        var paddingTop = getPositiveInt(paddingInfo.propertyPaddingTopInPX, padding);
        var paddingRight = getPositiveInt(paddingInfo.propertyPaddingRightInPX, padding);
        var paddingBottom = getPositiveInt(paddingInfo.propertyPaddingBottomInPX, padding);
        var paddingLeft = getPositiveInt(paddingInfo.propertyPaddingLeftInPX, padding);

        var layoutConfig = this._layoutAlgorithm.config;
        layoutConfig.set({
            position: this._position,
            rootWidth: this._roughSize.width - (paddingRight + paddingLeft),
            rootHeight: this._roughSize.height - (paddingTop + paddingBottom),
            roughWidth: this._roughSize.width,
            roughHeight: this._roughSize.height
        });
        if (info.hasOwnProperty('width')) {
            layoutConfig.set('totalWidth', info.width);
        }
        if (info.hasOwnProperty('height')) {
            layoutConfig.set('totalHeight', info.height);
        }
    };

    AxisContainer.prototype._getSizeInfo = function(info) {
        var sizeInfo = {
            width: this._size.width,
            height: this._size.height
        };

        if (info) {
            if (info.width) {
                sizeInfo.width = info.width;
            }
            if (info.height) {
                sizeInfo.height = info.height;
            }
        }
        var useRealSize = false;
        if (this._realSize.width !== this._size.width ||
            this._realSize.height !== this._size.height) {
            useRealSize = true;
        }

        if (useRealSize) {
            if (this._isHorizontal()) {
                sizeInfo.width = this._realSize.width;
            } else {
                sizeInfo.height = this._realSize.height;
            }
        }
        return sizeInfo;
    };

    AxisContainer.prototype.layout = function() {

        this._setupLayout(this._getSizeInfo());

        var results = this._layoutAlgorithm.layout(this._children);

        var selections = this._selections;
        for (var key in this._children) {
            if (this._children.hasOwnProperty(key)) {
                var module = this._children[key].module;
                var selection = selections ? selections[key] : null;
                var anchor = results[key];
                if (this._isHorizontal()) {
                    module.setSize({
                        width: this._size.width,
                        height: anchor.height
                    });
                } else {
                    module.setSize({
                        width: anchor.width,
                        height: this._size.height
                    });
                }
                module.setRealSize({
                    width: anchor.width,
                    height: anchor.height
                });
                if (module.layout) { //force category axis body to layout with new size
                    module.layout();
                }
                if (selection) {
                    selection.attr("transform", "translate(" + anchor.x + "," + anchor.y + ")");
                    if (this._name == "categoryAxis" && key == "axisBody" ){
                        this.categoryTitleXoffset = anchor.x;
                        this.categoryTitleYoffset = anchor.y;
                    }
                }
            }
        }
    };

    AxisContainer.prototype.getPreferredSize = function(info) {

        this._setupLayout(this._getSizeInfo(info));

        var layoutSize = this._layoutAlgorithm.getPreferredSize(this._children);
        return NumberUtils.preciseObject(layoutSize);
    };

    AxisContainer.prototype._renderSub = function() {
        for (var key in this._children) {
            if (this._children.hasOwnProperty(key)) {
                this.getChild(key).module.render(this._selections[key]);
            }
        }
    };

    function eraseRectangle(b1, b2, position) {
        var br = {
            left: b1.left,
            right: b1.right,
            top: b1.top,
            bottom: b1.bottom
        };
        if (position === 'left') {
            br.left = b2[0][1][0] + 1;
        } else if (position === 'right') {
            br.right = b2[0][0][0] - 1;
        } else if (position === 'top') {
            br.top = b2[0][3][1] + 1;
        } else if (position === 'bottom') {
            br.bottom = b2[0][0][1] - 1;
        }
        return br;
    }

    AxisContainer.prototype.appendSynonymClass = function(element, synonym) {

        var synonymClass = POSITION_CLASS_MAPPING[this._position];
        element.classed(synonymClass, true);
    };

    AxisContainer.prototype.destroy = function() {
        AxisContainer.superclass.destroy.call(this);
        this._bindingFields = null;
        this._disableTitle = null;
        this._parent = null;
        this._position = null;
        this.categoryTitleXoffset = null;
        this.categoryTitleYoffset = null;
    };
    
    AxisContainer.prototype.setRoughSize = function(value) {
        if (value.width != null) {
            this._roughSize.width = value.width;
        }
        if (value.height != null) {
            this._roughSize.height = value.height;
        }
    };

    AxisContainer.prototype.isByBound = function(data) {
        return false;
    };

    return AxisContainer;
});

define('sap/viz/chart/components/util/ValueAxisUtils',[
    "sap/viz/framework/common/util/ArrayUtils",
    "sap/viz/framework/common/util/NumberUtils",
    "sap/viz/framework/scale/ValueScale",
    "sap/viz/framework/scale/ValueScaleUtil"
], function(ArrayUtils, NumberUtils, ValueScale, ValueScaleUtil) {
    var defalutDomian = [0, 1];
    function removeNoValues(values){
        var result = [];
        for(var i=0; i<values.length; i++){
            if(!NumberUtils.isNoValue(values[i])){
                result.push(values[i]);
            }
        }
        return result;
    }
    function domainConfig(scale, values) {
        if (scale && values) {
            var vals = removeNoValues(values);
            var domain = scale.getDomain().slice(),
                domainFixed = scale.getDomainFixed().slice(),
                min = Math.min.apply(null, vals),
                max = Math.max.apply(null, vals),
                minValue = domainFixed[0] ? parseFloat(domain[0]) : min,
                maxValue = domainFixed[1] ? parseFloat(domain[1]) : max;
            if (min > max) {
                domainFixed = [false, false];
                minValue = min;
                maxValue = max;
            }

            return {
                domain: [minValue, maxValue],
                domainFixed: domainFixed
            };
        } else {
            return null;
        }
    }

    function padDomain(domainCfg, bScale) {
        var domain = domainCfg.domain.slice(),
            domainFixed = domainCfg.domainFixed.slice();

        if (!domainFixed[0]) {
            domain[0] = domain[0] < 0 ? domain[0] * (1 + bScale) : 0;
        }
        if (!domainFixed[1]) {
            domain[1] = domain[1] < 0 ? 0 : domain[1] * (1 + bScale);
        }
        return {
            domain: ValueScaleUtil.correctNoValueDomain(domain),
            domainFixed: domainFixed
        };
    }

    function padTimeDomain(domainCfg, bScale) {
        var domain = domainCfg.domain.slice(),
            domainFixed = domainCfg.domainFixed.slice(),
            buffer = domain[0] === domain[1] ? 1 : Math.floor((domain[1] - domain[0]) * bScale);

        domain[0] -= domainFixed[0] ? 0 : buffer;
        domain[1] += domainFixed[1] ? 0 : buffer;

        return {
            domain: ValueScaleUtil.correctNoValueDomain(domain),
            domainFixed: domainFixed
        };
    }

    function isOverLapped(item1, item2) {
        return (item1.start >= item2.start && item1.start <= item2.end) ||
            (item1.end >= item2.start && item1.end <= item2.end) ||
            (item2.start >= item1.start && item2.start <= item1.end) ||
            (item2.end >= item1.start && item2.end <= item1.end);
    }

    function calculateLabelsToDrawHelper(allTicksLabels) {
        //allTicksLabels:
        //[0, X]
        //[-X, 0]
        //[X1, X2] (X1>0, X2>0)
        //[X1, X2] (X1<0, X2<0)

        //now we should decide which label to draw.
        //iBeyond = 0:0,1,2,3,4,5,6,...
        //iBeyond = 1:0, ,2, ,4, ,6,...
        //iBeyond = 2:0, , ,3, , ,6,...
        //...
        //iBeyond = (allTicksLabels.length - 1):0
        var allTicksLength = allTicksLabels.length;
        var ticksLabelsToDraw = [];
        for (var iBeyond = 0; iBeyond <= (allTicksLength - 1); iBeyond++) {
            var isDrawable = true;
            for (var i = 0; i < allTicksLength - 1; i += (iBeyond + 1)) {
                var item = allTicksLabels[i];
                if (i !== 0) {
                    var previousItem = ticksLabelsToDraw[ticksLabelsToDraw.length - 1];
                    if (isOverLapped(item, previousItem)) {
                        //for [0.9,1,2,3....], if cannot draw second axis label, just ignore second, then continue
                        if (ticksLabelsToDraw.length > 1) {
                            isDrawable = false;
                            break;
                        }
                    } else {
                        ticksLabelsToDraw.push(item);
                    }
                } else {
                    //add the first axis tick label
                    ticksLabelsToDraw.push(item);
                }
            }
            //for [.....5,5.1], always draw the last axis tick label
            if (allTicksLabels.length && ticksLabelsToDraw.length) {
                var lastItem = allTicksLabels[allTicksLength - 1];
                var lastToDraw = ticksLabelsToDraw[ticksLabelsToDraw.length - 1];
                if (isOverLapped(lastItem, lastToDraw)) {
                    ticksLabelsToDraw.pop();
                }
                ticksLabelsToDraw.push(lastItem);
            }
            if (isDrawable) { //find the labels
                break;
            } else {
                ticksLabelsToDraw = [];
            }
        }
        return ticksLabelsToDraw;
    }
    
    var ValueAxisUtils = {
        isOverLapped: isOverLapped,
        calculateLabelsToDrawHelper: calculateLabelsToDrawHelper,
        
        calcScale: function(scale, range, options) {
            var domain = scale.getDomain().slice();
            var domainFixed = scale.getDomainFixed();
            var autoDomain = scale.getAutoDomain();
            var isFixed = scale.isFixed();
            if (domain[0] > 0 && !(isFixed && domainFixed[0])) {
                domain[0] = 0;
            }
            if (domain[1] < 0 && !(isFixed && domainFixed[1])) {
                domain[1] = 0;
            }
            if (autoDomain[0] > 0) {//autoDomain is used for auto scale props
                autoDomain[0] = 0;
            }
            if (autoDomain[1] < 0) {
                autoDomain[1] = 0;
            }
            if(options.domain){
                if(!(isFixed && domainFixed[0]) && options.domain[0] != null){
                    domain[0] = options.domain[0];
                }
                if(!(isFixed && domainFixed[1]) && options.domain[1] != null){
                    domain[1] = options.domain[1];
                }
            }
            if (options.isLineChart) {
                var offset = Math.abs((domain[1] - domain[0]) * 5 / (range[1] - range[0]));
                if (domain[0] !== 0 && !(isFixed && domainFixed[0])) {
                    domain[0] -= offset;
                }
                if (domain[1] !== 0 && !(isFixed && domainFixed[1])) {
                    domain[1] += offset;
                }
                var autoOffset = Math.abs((autoDomain[1] - autoDomain[0]) * 5 / (range[1] - range[0]));
                if (autoDomain[0] !== 0) {
                    autoDomain[0] -= autoOffset;
                }
                if (autoDomain[1] !== 0) {
                    autoDomain[1] += autoOffset;
                }
            }
            var helpScale = new ValueScale([domain[0], domain[1]], range, domainFixed);
            var autoScale = new ValueScale([autoDomain[0], autoDomain[1]], range, [false, false]);
            var tickHint = ValueScaleUtil.perfectTicks(helpScale);
            ValueScaleUtil.perfectTicks(autoScale);
            helpScale.setAutoDomain(autoScale.getDomain());
            return {
                scale: helpScale,
                tickHint: tickHint
            };
        },

        calcPercentageScale: function(range) {
            var helpScale = new ValueScale([0, 1], range);
            var tickHint = ValueScaleUtil.perfectTicks(helpScale);
            return {
                scale: helpScale,
                tickHint: tickHint
            };
        },
        
        updateScatterValueAxis : function(data, range, sizeRatio, isTimeBased){
            var padFn = isTimeBased ? padTimeDomain : padDomain,
                perfectFn = isTimeBased ? ValueScaleUtil.perfectTimeTicks : ValueScaleUtil.perfectTicks,
                scale = data.scale,
                vals = ArrayUtils.deepFlat(data.values),
                domainCfg = padFn(domainConfig(scale, vals), sizeRatio);
            var domain = domainCfg.domain;
            if(0 === domain[0] && 0 === domain[1]) {
                domain = [0, 1];
            }
            var helpScale = new ValueScale(domain, range, domainCfg.domainFixed),
            tickHint = perfectFn(helpScale);

            var autoDomain = scale.getAutoDomain();
            var autoScale = new ValueScale([autoDomain[0], autoDomain[1]], range, [false, false]);
            autoDomain = padFn(domainConfig(autoScale, vals), sizeRatio).domain;
            if(0 === autoDomain[0] && 0 === autoDomain[1]) {
                autoDomain = [0, 1];
            }
            autoScale = new ValueScale(autoDomain, range, [false, false]);
            perfectFn(autoScale);
            helpScale.setAutoDomain(autoScale.getDomain());
            return {
                scale: helpScale,
                tickHint: tickHint
            };
        },
        
        getTrellisBaseValueIndex : function(start, end) {
            if(start === 0) {
                return 0;
            } else if(end === 0) {
                return 1;
            } else if(start < 0 && end < 0) {
                return (start > end) ? 0 : 1;
            } else if(start > 0 && end > 0){
                return (start < end) ? 0 : 1;
            } else {
                return -1;
            }
        }

    };

    return ValueAxisUtils;
});

define('sap/viz/chart/components/axis/renderer/ValueBodyRenderer',["sap/viz/framework/common/util/Constants",
    "sap/viz/framework/common/util/NumberUtils",
    "sap/viz/framework/common/util/PositionUtil",
    "sap/viz/chart/components/util/TextUtils",
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/framework/common/util/SVG",
    'sap/viz/chart/components/util/ValueAxisUtils',
    "sap/viz/framework/common/util/NameColorUtils"
], function(Constants, NumberUtils, PositionUtil, TextUtils, TypeUtils, SVG, ValueAxisUtils, NameColorUtils) {

    var AXIS_CLASS_NAMES = Constants.CSS.CLASS.AXIS;

    var SMALLEST_TICK_INTERVAL = 6;

    var TICK_SIZE = 5;
    var LABEL_OFFSET = 6;
    var TRELLIS_VALUEAXIS_PADDING = 3;

    var ret = {};

    ret.drawLines = function(selection, range, width, height, position, props, effectManager,
        isUpdate) {
        var lineClass = props.isAxisLineColorFromPlot ? AXIS_CLASS_NAMES.FIXED_PERIMETER :
            AXIS_CLASS_NAMES.PERIMETER;
        lineClass = lineClass + " " + AXIS_CLASS_NAMES.LINE;
        var x1 = 0,
            y1 = 0,
            x2 = 0,
            y2 = 0;
        var stroke = effectManager.register({
            fillColor: NameColorUtils.convertColor(props.color)
        });
        var strokeWidth = props.axisLine.size;
        var start, end;
        if (range[0] < range[1]) {
            start = range[0] - strokeWidth / 2;
            end = range[1] + strokeWidth / 2;
        } else {
            start = range[1] - strokeWidth / 2;
            end = range[0] + strokeWidth / 2;
        }

        switch (position) {
            case Constants.POSITION.LEFT:
                x1 = width;
                y1 = start;
                x2 = width;
                y2 = end;
                break;
            case Constants.POSITION.RIGHT:
                x1 = 0;
                y1 = start;
                x2 = 0;
                y2 = end;
                break;
            case Constants.POSITION.TOP:
                x1 = start;
                y1 = height;
                x2 = end;
                y2 = height;
                break;
            case Constants.POSITION.BOTTOM:
                x1 = start;
                y1 = 0;
                x2 = end;
                y2 = 0;
                break;
        }
        var line;
        if (isUpdate) {
            line = selection.select("."+AXIS_CLASS_NAMES.LINE);
        } else {
            line = selection.append("line")
                .attr("class", lineClass)
                .attr("stroke", stroke)
                .attr("stroke-width", strokeWidth)
                .attr("shape-rendering", "crispEdges");
        }
        line.attr("x1", x1).attr("y1", y1)
            .attr("x2", x2).attr("y2", y2);
    };

    ret.drawTicks = function(selection, ticks, width, height, position, props, effectManager,
        force, isUpdate) {
        var tickClass = props.isAxisLineColorFromPlot ? AXIS_CLASS_NAMES.FIXED_PERIMETER :
            AXIS_CLASS_NAMES.PERIMETER;
        tickClass = tickClass + " " + AXIS_CLASS_NAMES.TICK;
        var stroke = effectManager.register({
            fillColor: NameColorUtils.convertColor(props.color)
        });
        var strokeWidth = props.axisLine.size;

        var ticksToDraw = [];
        if (ticks && TypeUtils.isArray(ticks)) {
            if (force) {
                ticksToDraw = ticks;
            } else if (ticks.length >= 2) {
                if (Math.abs(ticks[0] - ticks[1]) < SMALLEST_TICK_INTERVAL) {
                    ticksToDraw = [ticks[0], ticks[ticks.length - 1]];
                } else {
                    ticksToDraw = ticks;
                }
            }
        }
        var i = 0,
            length = ticksToDraw.length;
        var x1s = [],
            y1s = [],
            x2s = [],
            y2s = [];
        switch (position) {
            case Constants.POSITION.LEFT:
                for (; i < length; ++i) {
                    x1s[i] = width;
                    y1s[i] = ticksToDraw[i];
                    x2s[i] = width - TICK_SIZE;
                    y2s[i] = ticksToDraw[i];
                }
                break;
            case Constants.POSITION.RIGHT:
                for (; i < length; ++i) {
                    x1s[i] = 0;
                    y1s[i] = ticksToDraw[i];
                    x2s[i] = TICK_SIZE;
                    y2s[i] = ticksToDraw[i];
                }
                break;
            case Constants.POSITION.TOP:
                for (; i < length; ++i) {
                    x1s[i] = ticksToDraw[i];
                    y1s[i] = height;
                    x2s[i] = ticksToDraw[i];
                    y2s[i] = height - TICK_SIZE;
                }
                break;
            case Constants.POSITION.BOTTOM:
                for (; i < length; ++i) {
                    x1s[i] = ticksToDraw[i];
                    y1s[i] = 0;
                    x2s[i] = ticksToDraw[i];
                    y2s[i] = TICK_SIZE;
                }
                break;
        }
        var tickSelections = selection.selectAll("." + AXIS_CLASS_NAMES.TICK).data(ticksToDraw);
        //if (!isUpdate) {
        tickSelections.enter().append("line");
        tickSelections.exit().remove();
        //}

        tickSelections.each(function(d, i) {
            if (!isUpdate) {
                this.setAttribute("class", tickClass);
                this.setAttribute("stroke", stroke);
                this.setAttribute("stroke-width", strokeWidth);
                this.setAttribute("shape-rendering", "crispEdges");
            }
            this.setAttribute("x1", x1s[i]);
            this.setAttribute("y1", y1s[i]);
            this.setAttribute("x2", x2s[i]);
            this.setAttribute("y2", y2s[i]);
        });
    };

    ret.getTrellisBaseValueIndex = function(labels) {
        var lastIndex = labels.length - 1;
        var firstValue = labels[0].value,
            lastValue = labels[lastIndex].value;
        var index = ValueAxisUtils.getTrellisBaseValueIndex(firstValue, lastValue);
        return (index === 1) ? lastIndex : index;
    };

    ret.drawLabels = function(selection, scale, labels, width, height, position, props,
        options, effectManager, isUpdate) {
        var labelClass = AXIS_CLASS_NAMES.LABEL + " " + AXIS_CLASS_NAMES.MORPHABLE_LABEL + " " +
            AXIS_CLASS_NAMES.LABEL_BACKWORD;
        var styles = props.label.style;
        var offset = TextUtils.getTextBaselineOffset(styles);
        var i = 0,
            length = labels.length;
        var label;
        var inTrellis = !!options.applyTrellisBehavior;
        var trellisBaseValueIndex = ret.getTrellisBaseValueIndex(labels);
        if (PositionUtil.isVertical(position)) {
            var x = TICK_SIZE + LABEL_OFFSET;
            var textAnchor = "start";
            if (position === Constants.POSITION.LEFT) {
                x = width - x;
                textAnchor = "end";
            }
            for (; i < length; ++i) {
                label = labels[i];
                label.textAnchor = textAnchor;
                label.x = x;
                label.y = scale.scale(label.value) - offset;
                label.y += (inTrellis && i === trellisBaseValueIndex) ?
                    -TRELLIS_VALUEAXIS_PADDING : label.height / 2;
            }
        } else {
            for (; i < length; ++i) {
                label = labels[i];
                label.textAnchor = "middle";
                label.x = scale.scale(label.value);
                if (inTrellis && i === trellisBaseValueIndex) {
                    label.textAnchor = "start";
                    label.x += TRELLIS_VALUEAXIS_PADDING;
                }
                if (position === Constants.POSITION.TOP) {
                    label.y = height - TICK_SIZE - LABEL_OFFSET - offset;
                } else {
                    label.y = TICK_SIZE + LABEL_OFFSET + label.height - offset;
                }
            }
        }

        var labelSelections = selection.selectAll("." + AXIS_CLASS_NAMES.LABEL).data(labels);
        labelSelections.enter().append("g");
        labelSelections.exit().remove();


        var fill = effectManager.register({
            fillColor: NameColorUtils.convertColor(styles.color)
        });
        var fontSize = styles['fontSize'];
        var fontWeight = styles['fontWeight'];
        var fontFamily = styles['fontFamily'];
        var fontStyle = styles['fontStyle'];

        labelSelections.each(function(d, i) {
            var text;
            if (isUpdate) {
                text = this.querySelector('text');
            } else {
                this.setAttribute("class", labelClass);
                this.setAttribute("fill", fill);
                this.setAttribute("font-size", fontSize);
                this.setAttribute("font-weight", fontWeight);
                this.setAttribute("font-family", fontFamily);
                this.setAttribute("font-style", fontStyle);
                text = SVG.create("text");
                this.appendChild(text);
            }
            text.textContent = d.text;
            text.setAttribute("text-anchor", d.textAnchor);
            text.setAttribute("x", d.x);
            text.setAttribute("y", d.y);
        });
    };

    return ret;
});
define('sap/viz/chart/components/util/ClippathUtil',['sap/viz/framework/common/util/ObjectUtils', 'sap/viz/framework/common/util/Constants'], function Setup(
    ObjectUtils, Constants) {
    var className = Constants.CSS.CLASS.CLIPPATH;

    var ClipPathUtil = {
        drawClippath: function(selection, width, height, x, y, postfix) {
            var clazz = className;
            if (postfix){
                clazz = clazz + "-" + postfix;
            }
            if (width < 0) {
                width = 0;
            }
            if (height < 0) {
                height = 0;
            }
            if (selection.select('.' + clazz).node() === null) {
                var id = 'clip-path-' + ObjectUtils.guid();
                var clipath = selection.insert('clipPath', ':first-child')
                    .attr('class', clazz)
                    .attr('id', id);
                clipath.append('rect')
                    .attr('x', x)
                    .attr('y', y)
                    .attr('width', width)
                    .attr('height', height);
                return id;
            } else {
                selection.select('.' + clazz)
                    .select('rect')
                    .attr('width', width)
                    .attr('height', height)
                    .attr('x', x)
                    .attr('y', y);
                return selection.select('.' + clazz)
                    .attr('id');
            }
        }
    };

    return ClipPathUtil;

});
define('sap/viz/chart/components/axis/sub/ValueAxisBody',[
    "sap/viz/framework/common/util/oo",
    "sap/viz/chart/components/axis/sub/AxisComponent",
    "sap/viz/framework/common/util/Constants",
    "sap/viz/framework/common/util/NumberUtils",
    "sap/viz/chart/components/util/BoundUtil",
    "sap/viz/chart/components/axis/renderer/ValueBodyRenderer",
    "sap/viz/framework/scale/ValueScale",
    "sap/viz/framework/scale/ValueScaleUtil",
    "sap/viz/chart/components/util/ValueAxisUtils",
    "sap/viz/framework/common/format/UnitFormat",
    'sap/viz/framework/common/util/ObjectUtils',
    "sap/viz/chart/components/util/ClippathUtil",
    'sap/viz/framework/common/util/SVG'
], function(oo, AxisComponent, Constants, NumberUtils, BoundUtil,
    ValueBodyRenderer, ValueScale, ValueScaleUtil, ValueAxisUtils, UnitFormat, ObjectUtils,
    ClippathUtil, SVG) {

    var TICK_SIZE = 5;
    var LABEL_OFFSET = 6;
    var VALUEAXIS_DEFAULT_PADDING = 5;
    var VALUEAXIS_PADDING = 3;

    var AXIS_CLASS_NAMES = Constants.CSS.CLASS.AXIS;

    var ValueAxisBody = function() {
        ValueAxisBody.superclass.constructor.apply(this, arguments);
        this._isPercentageMode = false;
    };
    oo.extend(ValueAxisBody, AxisComponent);

    ValueAxisBody.prototype.setPercentageMode = function(_) {
        this._isPercentageMode = !!_;
        return this;
    };

    ValueAxisBody.prototype.update = function(selection) {

        var props = this._properties.get();
        if (props.visible && this._data) {
            var width = this._size.width;
            var height = this._size.height;
            var position = this._position;
            var scale = this._data;
            var group = null;
            if (this._isSpaceEnough()) {
                var ticks = this._getTicksToRender();
                var ticksPosition = ValueScaleUtil.getTicksPosition(ticks, scale);
                var labels = this._getAllLabels(ticks, scale);

                if (props.axisTick.visible) {
                    group = selection.select("." + AXIS_CLASS_NAMES.TICK_GROUP);
                    this.drawTicks(group, ticksPosition, width, height, position, props,
                        this.runtime().effectManager(), true);
                }
                if (props.label.visible && labels.length) {
                    group = selection.select("." + AXIS_CLASS_NAMES.LABEL_GROUP);
                    this.drawLabels(group, scale, labels, width, height, position, props, this
                        ._options, this.runtime().effectManager(), true);
                }
            }

        }
    };

    ValueAxisBody.prototype.render = function(selection) {

        var props = this._properties.get();

        var width = this._size.width;
        var height = this._size.height;
        BoundUtil.drawBound(selection, width, height, null, true);
        selection.select("g." + AXIS_CLASS_NAMES.LINE_GROUP).remove();
        selection.select("g." + AXIS_CLASS_NAMES.TICK_GROUP).remove();
        selection.select("g." + AXIS_CLASS_NAMES.LABEL_GROUP).remove();
        if (this._data && props.visible) {
            var position = this._position;

            var scale = this._data;
            var range = scale.getRange();

            var group = null;

            if (this._isSpaceEnough()) {
                if (props.axisLine.visible) {
                    group = selection.append("g").attr("class", AXIS_CLASS_NAMES.LINE_GROUP);
                    this.drawLines(group, range, width, height, position, props,
                    this.runtime().effectManager());
                }
                var ticks = this._getTicksToRender();

                var ticksPosition = ValueScaleUtil.getTicksPosition(ticks, scale);
                var labels = this._getAllLabels(ticks, scale);

                var clippathid;
                if (props.axisTick.visible) {
                    clippathid = ClippathUtil.drawClippath(selection, this._size.width + 2,
                        this._size.height + 2, -1, -1, "ticks");
                    group = selection.append("g").attr('clip-path', 'url(#' + clippathid + ')');
                    group = group.append("g").attr("class", AXIS_CLASS_NAMES.TICK_GROUP);
                    this.drawTicks(group, ticksPosition, width, height, position, props,
                        this.runtime().effectManager());
                }
                if (props.label.visible && labels.length) {
                    var padding = this.getPadding(this._data);
                    var clipPathConfig = {
                        x: 0,
                        y: 0,
                        width: this._size.width,
                        height: this._size.height
                    };
                    if (this._isVertical()) {
                        clipPathConfig.y -= padding.start;
                        clipPathConfig.height += padding.start + padding.end;
                    } else {
                        clipPathConfig.x -= padding.start;
                        clipPathConfig.width += padding.start + padding.end;
                    }
                    clippathid = ClippathUtil.drawClippath(selection, clipPathConfig.width + 2,
                        clipPathConfig.height + 2, clipPathConfig.x - 1, clipPathConfig.y - 1,
                        "labels");
                    group = selection.append("g").attr('clip-path', 'url(#' + clippathid + ')');
                    group = group.append("g").attr("class", AXIS_CLASS_NAMES.LABEL_GROUP);
                    this.drawLabels(group, scale, labels, width, height, position, props, this
                        ._options, this.runtime().effectManager());
                }
            }
        }
    };

    ValueAxisBody.prototype._getTicksToRender = function() {
        return ValueScaleUtil.getTicks(this._data);
    };

    ValueAxisBody.prototype.drawLines = ValueBodyRenderer.drawLines;
    ValueAxisBody.prototype.drawTicks = function(grp, ticksPos, w, h, pos, props, effectMgr,
        isUpdate) {
        return ValueBodyRenderer.drawTicks(grp, ticksPos, w, h, pos, props, effectMgr, false,
            isUpdate);
    };
    ValueAxisBody.prototype.drawLabels = ValueBodyRenderer.drawLabels;

    ValueAxisBody.prototype.getPreferredSize = function() {
        var pfdSize = {
            minWidth: 0,
            maxWidth: 0,
            minHeight: 0,
            maxHeight: 0,
            spacings: [{
                "interval": 0,
                "type": Constants.SPACING_TYPE.STEP
            }]
        };
        var props = this._properties;
        if (this._data && props.get('visible')) {
            var scale = this._data;
            var range = scale.getRange();
            var rangeLong = Math.abs(range[0] - range[1]);
            var spacing = LABEL_OFFSET + TICK_SIZE;
            var ticks = [],
                labels = [];
            if (props.get('label.visible')) {
                ticks = ValueScaleUtil.getTicks(scale);
                labels = this._getAllLabels(ticks, scale);
            }
            if (this._isVertical()) {
                spacing += this._getWidestLabel(labels);
                //var labelStyle = this._styles.realStyle.label;
                //var preserveSpace = this._measureTextSize("0", labelStyle).width; //for scaling layout
                pfdSize.minWidth = spacing;
                pfdSize.maxWidth = spacing; // + preserveSpace;
                pfdSize.minHeight = rangeLong;
                pfdSize.maxHeight = rangeLong;
            } else { //position === Constants.POSITION.TOP || position === Constants.POSITION.BOTTOM
                spacing += this._getHighestLabel(labels);
                pfdSize.minWidth = rangeLong;
                pfdSize.maxWidth = rangeLong;
                pfdSize.minHeight = spacing;
                pfdSize.maxHeight = spacing;
            }
            pfdSize.spacings = [{
                "interval": spacing,
                "type": Constants.SPACING_TYPE.STEP
            }];
        }
        var precisedSize = NumberUtils.preciseObject(pfdSize);
        this._updatePfdSize(precisedSize);
        return precisedSize;
    };

    ValueAxisBody.prototype.getAvailableLayersNumber = function() {
        var layers = 0;
        if (this._data && this._properties.get('visible') && this._isSpaceEnough()) {
            layers = 1;
        }
        return layers;
    };

    ValueAxisBody.prototype.getPadding = function(scale) {
        var domain = scale.getDomain();
        var axisVisible = this._properties.get("visible");
        var labelProperties = this._properties.get("label");
        if (!axisVisible || !labelProperties.visible) {
            return {
                start: VALUEAXIS_DEFAULT_PADDING,
                end: VALUEAXIS_DEFAULT_PADDING
            };
        }
        var formatString = labelProperties.formatString;
        var isPercentMode = this._isPercentageMode;

        function formatVal(val) {
            if (formatString) {
                return UnitFormat.format(val, formatString, labelProperties.unitFormatType);
            } else if (isPercentMode) {
                return NumberUtils.preciseSimple(val * 100).toString();
            } else {
                return NumberUtils.preciseSimple(val).toString();
            }
        }
        var padding = {
            start: VALUEAXIS_PADDING,
            end: VALUEAXIS_PADDING
        };
        padding.start += this._getPadding(formatVal(domain[0]), labelProperties.style);
        padding.end += this._getPadding(formatVal(domain[1]), labelProperties.style);
        return padding;
    };

    ValueAxisBody.prototype._getPadding = function(text, style) {
        var padding = 0;
        var size = this._measureTextSize(text, style);
        if (this._isVertical()) {
            padding = size.height / 2;
        } else { //if (this._isHorizontal(position)) { //TOP || BOTTOM
            padding = size.width / 2;
        }
        return padding;
    };

    ValueAxisBody.prototype._getAllLabels = function(ticks, scale) {

        var props = this._properties;

        var isPercentMode = this._isPercentageMode;
        var formatString = props.get('label.formatString');
        var unitFormatType = props.get('label.unitFormatType');

        var labels = [];
        var tickLength = ticks.length;
        for (var i = 0; i < tickLength; i++) {
            var tickItem = {};
            var tick = ticks[i];
            tickItem.value = tick;
            if (formatString) {
                tickItem.text = UnitFormat.format(tick, formatString, unitFormatType);
            } else if (isPercentMode) {
                tickItem.text = NumberUtils.preciseSimple(tick * 100).toString();
            } else {
                tickItem.text = NumberUtils.preciseSimple(tick).toString();
                tickItem.text = UnitFormat.format(tickItem.text, formatString, unitFormatType);
            }
            labels.push(tickItem);
        }

        this._setLabelsPosition(labels, scale);
        return this._filterLabels(labels);
    };

    ValueAxisBody.prototype._setLabelsPosition = function(labels, scale) {
        var labelsLength = labels.length;
        var props = this._properties;
        var labelStyle = props.get('label.style');
        var inTrellis = this._options && this._options.applyTrellisBehavior;
        var trellisBaseValueIndex = inTrellis ? ValueBodyRenderer.getTrellisBaseValueIndex(
            labels) : -1;
        for (var i = 0; i < labelsLength; ++i) {
            var label = labels[i];
            if (!NumberUtils.isNoValue(label.value)) {
                var size = this._measureTextSize(label.text, labelStyle);
                var width = size.width,
                    height = size.height;
                label.width = width;
                label.height = height;
                var center = scale.scale(label.value);
                if (this._isVertical()) {
                    if (trellisBaseValueIndex === i) {
                        if (i === 0) {
                            label.start = center;
                            label.end = center + height;
                        } else {
                            label.start = center - height;
                            label.end = center;
                        }
                    } else {
                        label.start = center - height / 2;
                        label.end = center + height / 2;
                    }
                } else { //TOP || BOTTOM
                    if (trellisBaseValueIndex === i) {
                        if (i === 0) {
                            label.start = center;
                            label.end = center + width;
                        } else {
                            label.start = center - width;
                            label.end = center;
                        }
                    } else {
                        label.start = center - width / 2;
                        label.end = center + width / 2;
                    }
                }
            }
        }
    };

    ValueAxisBody.prototype._getWidestLabel = function(labels) {
        var temp = 0;
        var length = labels.length;
        for (var i = 0; i < length; ++i) {
            if (temp < labels[i].width) {
                temp = labels[i].width;
            }
        }
        return temp;
    };

    ValueAxisBody.prototype._getHighestLabel = function(labels) {
        var temp = 0;
        var length = labels.length;
        for (var i = 0; i < length; ++i) {
            if (temp < labels[i].height) {
                temp = labels[i].height;
            }
        }
        return temp;
    };

    //Copying original axis' code here
    ValueAxisBody.prototype._filterLabels = function(allTicksLabels) {

        var labelsToDraw = [];

        if (allTicksLabels.length > 0) {
            //split allTicksLabels if it is required.
            var ticksLength = allTicksLabels.length;
            if ((allTicksLabels[0].value < 0 || allTicksLabels[ticksLength - 1].value < 0) &&
                (allTicksLabels[0].value > 0 || allTicksLabels[ticksLength - 1].value > 0)) {
                var negativeArray = [];
                var positiveArray = [];
                for (var i = 0; i < allTicksLabels.length; i++) {
                    if (allTicksLabels[i].value <= 0) {
                        negativeArray.push(allTicksLabels[i]);
                    }
                    if (allTicksLabels[i].value >= 0) {
                        positiveArray.push(allTicksLabels[i]);
                    }
                }
                var head;
                var nal = negativeArray.length;
                if (negativeArray[0].value <= negativeArray[nal - 1].value) {
                    head = negativeArray[0];
                } else {
                    head = negativeArray[nal - 1];
                }
                var tail;
                var pal = positiveArray.length;
                if (positiveArray[0].value <= positiveArray[pal - 1].value) {
                    tail = positiveArray[pal - 1];
                } else {
                    tail = positiveArray[0];
                }
                negativeArray = ValueAxisUtils.calculateLabelsToDrawHelper(negativeArray);
                positiveArray = ValueAxisUtils.calculateLabelsToDrawHelper(positiveArray);
                if (negativeArray[0].value > negativeArray[negativeArray.length - 1].value) {
                    negativeArray.reverse();
                }
                if (positiveArray[0].value > positiveArray[positiveArray.length - 1].value) {
                    positiveArray.reverse();
                }
                if (negativeArray[negativeArray.length - 1].value === 0 && positiveArray[0].value ===
                    0) {
                    negativeArray.pop();
                }
                var labelsToDrawTemp = negativeArray.concat(positiveArray);
                if (head.value !== labelsToDrawTemp[0].value) {
                    labelsToDrawTemp.splice(0, 0, head);
                }
                if (tail.value !== labelsToDrawTemp[labelsToDrawTemp.length - 1].value) {
                    labelsToDrawTemp.push(tail);
                }
                if (labelsToDrawTemp[0].start > labelsToDrawTemp[labelsToDrawTemp.length - 1].start) {
                    labelsToDrawTemp.reverse();
                }
                labelsToDraw = ValueAxisUtils.calculateLabelsToDrawHelper(labelsToDrawTemp);
            } else {
                labelsToDraw = ValueAxisUtils.calculateLabelsToDrawHelper(allTicksLabels);
            }
            //When the height/width of vertical/horizontal axis is small that can only hold one axis label, 
            //the label should be hidden.
            if (labelsToDraw.length <= 1 || (labelsToDraw.length === 2 && ValueAxisUtils.isOverLapped(
                labelsToDraw[0],
                labelsToDraw[1]))) {
                labelsToDraw = [];
            }
        }
        return labelsToDraw;
    };

    ValueAxisBody.prototype.destroy = function() {
        ValueAxisBody.superclass.destroy.call(this);
        this._isPercentageMode = null;
    };
    
    return ValueAxisBody;
});
define('sap/viz/chart/components/axis/ValueAxis',[
    "sap/viz/framework/common/util/oo",
    "sap/viz/chart/components/axis/AxisContainer",
    "sap/viz/chart/components/axis/sub/ValueAxisBody",
    "sap/viz/framework/scale/ValueScale"
], function(oo, AxisContainer, ValueAxisBody, ValueScale) {

    var ValueAxis = function(runtime, options) {
        ValueAxis.superclass.constructor.apply(this, arguments);

        this.setChild("axisBody", new ValueAxisBody(runtime, options), {
            order: 1,
            priority: 2,
            offset: 0
        });
        this._isPercentageMode = false;
        var that = this;
        var autoMin, autoMax, min, max, scaleName, fixedRange;
        if (this._name === 'valueAxis') {
            scaleName = 'primaryScale';
        }
        if (this._name === 'valueAxis2') {
            scaleName = 'secondaryScale';
        }
        autoMin = 'plotArea.' + scaleName + '.autoMinValue';
        autoMax = 'plotArea.' + scaleName + '.autoMaxValue';
        min = 'plotArea.' + scaleName + '.minValue';
        max = 'plotArea.' + scaleName + '.maxValue';

        this._properties.origin.add(autoMin, {
            value : [],
            readonly : true,
            serializable: false,
            get : function() {
                return (that._scale.getAutoDomain() ? that._scale.getAutoDomain()[0] : 
                    that._scale.getDomain()[0]);
            }
        });
        this._properties.origin.add(autoMax, {
            value : [],
            readonly : true,
            serializable: false,
            get : function() {
                return (that._scale.getAutoDomain() ? that._scale.getAutoDomain()[1] : 
                    that._scale.getDomain()[1]);
            }
        });
        
        this._properties.origin.add(min, {
            value : [],
            readonly : true,
            serializable: false,
            get : function() {
                return that._scale.getDomain()[0];
            }
        });
        this._properties.origin.add(max, {
            value : [],
            readonly : true,
            serializable: false,
            get : function() {
                return that._scale.getDomain()[1];
            }
        });
    };

    oo.extend(ValueAxis, AxisContainer);
    
    ValueAxis.prototype.zoom = function (scale){
        this._realSize.width = this._size.width * scale;
        this._realSize.height = this._size.height * scale;
        this._updateData(this._getSizeInfo());
        this.getChild("axisBody").module.update(this._selections["axisBody"]);
    };

    ValueAxis.prototype.setPercentageMode = function(_) {
        this._isPercentageMode = !!_;
        return this;
    };
    
    ValueAxis.prototype.setPosition = function(pos) {
        ValueAxis.superclass.setPosition.apply(this, arguments);
        return this;
    };

    ValueAxis.prototype.getMaxZoomRatio = function(){
        var ratio = this._scale.getTickHint();
        if (ratio >= 1){
            return ratio;
        } else {
            return Number.MAX_VALUE;
        }
    };

    ValueAxis.prototype.setData = function(data) {
        ValueAxis.superclass.setData.apply(this, arguments);
        if (data.scale) {
            this._scale = new ValueScale(data.scale.getDomain(), [0, 1], data.scale.getDomainFixed());
            this._scale.setAutoDomain(data.scale.getAutoDomain());
            this._scale.setTickHint(data.tickHint);
        }
    };
    
    ValueAxis.prototype.getPadding = function(scale){
        var axisBody = this.getChild("axisBody");
        if(!axisBody || !scale){
            return {
                start: 0,
                end:0
            };
        }
        return axisBody.module.getPadding(scale);
    };

    ValueAxis.prototype._updateData = function(info) {
        ValueAxis.superclass._updateData.apply(this, arguments);
        if (this._isVertical()) {
            this._scale.setRange([info.height, 0]);
        } else {
            this._scale.setRange([0, info.width]);
        }
        this.getChild("axisBody").module.setData(this._scale).setPercentageMode(this._isPercentageMode);
    };

    ValueAxis.prototype._constructTitle = function(header, titleItems) {
        var titleText = header.map(function(o) {
            return o.name || o.id;
        }).join(" & ");

        var itemObj = {};
        itemObj.isHidden = false;
        itemObj.text = titleText;

        titleItems.push(itemObj);
        return titleText;
    };

    ValueAxis.prototype.destroy = function() {
        ValueAxis.superclass.destroy.call(this);
        this._scale = null;
        this._isPercentageMode = null;
    };
    
    return ValueAxis;
});

define('sap/viz/chart/components/axis/ValueScrollbarAxis',[
    "sap/viz/framework/common/util/oo",
    "sap/viz/chart/components/axis/ValueAxis",
    "sap/viz/chart/components/scrollbar/Scrollbar"
], function(oo, ValueAxis, Scrollbar) {

    var ValueScrollbarAxis = function(runtime, options) {
        ValueScrollbarAxis.superclass.constructor.apply(this, arguments);
        this.setChild("axisScrollbar", new Scrollbar(runtime, {
            name: 'plotArea.scrollbar'
        }), {
            order: 2,
            priority: 0,
            offset: 0
        });
    };

    oo.extend(ValueScrollbarAxis, ValueAxis);

    return ValueScrollbarAxis;

});

define('sap/viz/chart/components/axis/renderer/DefaultCategoryLabelRenderer',["sap/viz/framework/common/util/Constants",
    "sap/viz/framework/common/util/SVG",
    "sap/viz/framework/common/util/NumberUtils",
    "sap/viz/chart/components/util/StyleUtils",
    "sap/viz/chart/components/util/TextUtils"
], function(Constants, SVG, NumberUtils, StyleUtils, TextUtils) {

    function defaultLabelRenderer(config) {
        var VERTICAL_ANGLE = 90;
        var TICK_SIZE = 5;
        var LABEL_OFFSET = 6;
        var textOffset = LABEL_OFFSET;
        var textNode = SVG.create("text");
        var text = config.text,
            style = config.styles;
        textNode.textContent = text;
        var offset = TextUtils.getTextBaselineOffset({
            fontSize: style['fontSize'],
            fontWeight: style['fontWeight'],
            fontFamily: style['fontFamily']
        });
        var needRowAxisOffset = config.needRowAxisOffset;
        var labelOffset = config.labelOffset;
        var size = config.size,
            textHeight = TextUtils.canvasMeasure(text, style['fontSize'], style['fontWeight'],
                style['fontFamily']).height;
        textHeight = NumberUtils.preciseSimple(textHeight);
        var x, y, textAnchor;
        switch (config.position) {
            case Constants.POSITION.LEFT:
            case Constants.POSITION.RIGHT:
                y = textHeight / 2 - offset;
                if (needRowAxisOffset) {
                    y += textHeight / 2 - offset + labelOffset;                
                } else {
                    if (config.childCells && config.childCells.length) {
                        y += config.childCells[0].cellHeight / 2;
                    } else {
                        y += size.height / 2;
                    }                   
                }

                if (config.position === Constants.POSITION.LEFT) {
                    x = size.width - textOffset;
                    textAnchor = "end";
                } else {
                    x = textOffset;
                    textAnchor = "start";
                }
                break;
            case Constants.POSITION.TOP:
                if (config.rotated) {
                    textAnchor = "start";
                    x = size.width / 2 + textHeight / 2 - offset;
                    y = size.height - textOffset;
                } else {
                    textAnchor = "middle";
                    x = size.width / 2;
                    y = size.height - textOffset - offset;
                }
                break;
            case Constants.POSITION.BOTTOM:
                if (config.rotated) {
                    textAnchor = "end";
                    x = size.width / 2 + textHeight / 2 - offset;
                    y = textOffset;
                } else {
                    textAnchor = "middle";
                    x = size.width / 2;
                    y = textOffset + textHeight - offset;
                }
                break;
        }
        if (config.sizeLimit >= 0) {
            TextUtils.ellipsis(config.text, textNode, config.sizeLimit, StyleUtils.convertToCss(style));
        }

        textNode.setAttribute("x", x);
        textNode.setAttribute("y", y);
        textNode.setAttribute("text-anchor", textAnchor);
        if (config.rotated) {
            var textHeightOffset = getRotatedTextHeightOffset(textHeight, config.rotationAngle);
            textNode.setAttribute("transform", 
                "translate(0," + textHeightOffset + ") rotate(-" + config.rotationAngle + "," + x + "," + y + ")");
        }
        return textNode;
    }

    var getRotatedTextHeightOffset = function(textHeight, textAngle) {
        return (textHeight * Math.cos(textAngle * Math.PI/180) * 0.7);
    };

    defaultLabelRenderer.update = function(node, config) {
        var textNode = node.querySelector("text");
        if (!textNode){
            return;
        }
        var VERTICAL_ANGLE = 90;
        var TICK_SIZE = 5;
        var LABEL_OFFSET = 6;
        var textOffset = LABEL_OFFSET;
        var text = config.text,
            style = config.styles;
        textNode.innerHTML = text;
        textNode.textContent = text;
        var offset = TextUtils.getTextBaselineOffset({
            fontSize: style['fontSize'],
            fontWeight: style['fontWeight'],
            fontFamily: style['fontFamily']
        });
        var needRowAxisOffset = config.needRowAxisOffset;
        var labelOffset = config.labelOffset;
        var size = config.size,
            textHeight = TextUtils.canvasMeasure(text, style['fontSize'], style['fontWeight'],
                style['fontFamily']).height;
        textHeight = NumberUtils.preciseSimple(textHeight);
        var x, y, textAnchor;
        switch (config.position) {
            case Constants.POSITION.LEFT:
            case Constants.POSITION.RIGHT:
                y = textHeight / 2 - offset;
                if (needRowAxisOffset) {
                    y += textHeight / 2 - offset + labelOffset;                
                } else {
                    if (config.childCells && config.childCells.length) {
                        y += config.childCells[0].cellHeight / 2;
                    } else {
                        y += size.height / 2;
                    }                   
                }
                if (config.position === Constants.POSITION.LEFT) {
                    x = size.width - textOffset;
                    textAnchor = "end";
                } else {
                    x = textOffset;
                    textAnchor = "start";
                }
                break;
            case Constants.POSITION.TOP:
                if (config.rotated) {
                    textAnchor = "start";
                    x = size.width / 2 + textHeight / 2 - offset;
                    y = size.height - textOffset;
                } else {
                    textAnchor = "middle";
                    x = size.width / 2;
                    y = size.height - textOffset - offset;
                }
                break;
            case Constants.POSITION.BOTTOM:
                if (config.rotated) {
                    textAnchor = "end";
                    x = size.width / 2 + textHeight / 2 - offset;
                    y = textOffset;
                } else {
                    textAnchor = "middle";
                    x = size.width / 2;
                    y = textOffset + textHeight - offset;
                }
                break;
        }
        if (config.sizeLimit >= 0) {
            TextUtils.ellipsis(config.text, textNode, config.sizeLimit, StyleUtils.convertToCss(style));
        }

        textNode.setAttribute("x", x);
        textNode.setAttribute("y", y);
        textNode.setAttribute("text-anchor", textAnchor);
        if (config.rotated) {
            var textHeightOffset = getRotatedTextHeightOffset(textHeight, config.rotationAngle);
            textNode.setAttribute("transform", 
                "translate(0," + textHeightOffset + ") rotate(-" + config.rotationAngle + "," + x + "," + y + ")");
        } else {
            textNode.removeAttribute("transform");
        }
    };

    function measureTextSize(text, style) {
        var textSize = TextUtils.canvasMeasure(text, style['fontSize'], style['fontWeight'],
            style['fontFamily']);
        textSize = NumberUtils.preciseObject(textSize);
        return textSize;
    }

    defaultLabelRenderer.getPreferredSize = function(config) {
        var VERTICAL_ANGLE = 90;
        var LABEL_OFFSET = 6;
        var text = config.text,
            style = config.styles;

        var MIN_TEXT_WIDTH = measureTextSize("M...", style).width;
        var textSize = measureTextSize(text, style);

        var textHeight = textSize.height;
        var textHeightOffset = getRotatedTextHeightOffset(textHeight, config.rotationAngle);
        var cellHeight = textSize.height,
            cellWidth = textSize.width,
            rotated;
        if ((config.rotated || textSize.width > config.size) &&
            (config.position === Constants.POSITION.TOP || config.position === Constants.POSITION
                .BOTTOM)) {
            if(!config.rotated && config.disableAutoRotation) {
                //keep horizontal, but update cellWidth
                rotated = false;
                cellWidth = config.size;
            }
            else {
                //rotation
                rotated = true;
                cellWidth = textSize.height;
                if(config.rotationAngle === VERTICAL_ANGLE) {
                    cellHeight = textSize.width;
                }
                else {
                    var labelLocation = config.cellWidth/2 + config.cellStart;
                    var labelSize = labelLocation/(Math.cos(config.rotationAngle * Math.PI/180));
                    if(textSize.width < labelSize) {
                        labelSize = textSize.width;
                    }

                    cellHeight = labelSize * (Math.sin(config.rotationAngle * Math.PI/180));
                    cellHeight += textHeightOffset;

                    //cellWidth should consider rotation angle
                    var cellWidthPlusRotation = (cellWidth / Math.sin(config.rotationAngle * Math.PI/180)) * 0.9;
                    if(cellWidthPlusRotation > cellWidth) {
                        cellWidth = cellWidthPlusRotation;
                    }
                }
                if (cellWidth > config.size && config.layer > 0) {
                    cellHeight = 0;
                }
            }
        }
        var ret = {
            cellWidth: cellWidth,
            cellHeight: cellHeight,
            rotated: rotated
        };
        if (config.position === Constants.POSITION.TOP || config.position === Constants.POSITION
            .BOTTOM) { //horizontal
            if(rotated) {
                ret['minCellHeight'] = Math.min(MIN_TEXT_WIDTH, textSize.width);
                if(config.rotationAngle !== VERTICAL_ANGLE) {
                    ret['minCellHeight'] = ret['minCellHeight'] * 
                                           Math.sin(config.rotationAngle * Math.PI/180);
                    ret['minCellHeight'] += (2*textHeightOffset - 2*LABEL_OFFSET + 1);
                }
            }
            else {
                ret['minCellHeight'] = textSize.height;
                if(ret.cellWidth < Math.min(MIN_TEXT_WIDTH, textSize.width)) {
                    ret.noLabelSpace = true;
                }
            }
        } else { //vertical
            ret['minCellWidth'] = Math.min(MIN_TEXT_WIDTH, textSize.width);
        }
        return ret;
    };

    defaultLabelRenderer.autoHide = function(isVertical, layer) {
        return true;
    };

    return defaultLabelRenderer;
});

define('sap/viz/chart/components/axis/renderer/CategoryBodyRenderer',["sap/viz/framework/common/util/Constants",
    "sap/viz/framework/common/util/NumberUtils",
    "sap/viz/chart/components/util/TextUtils",
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/chart/components/axis/renderer/ValueBodyRenderer",
    "sap/viz/chart/components/axis/renderer/DefaultCategoryLabelRenderer",
    "sap/viz/framework/common/util/SVG",
    "sap/viz/framework/common/util/PositionUtil"
], function(Constants, NumberUtils, TextUtils, TypeUtils, ValueBodyRenderer,
    DefaultCategoryLabelRenderer, SVG,
    PositionUtils) {
    var AXIS_CLASS_NAMES = Constants.CSS.CLASS.AXIS;

    var TICK_SIZE = 5;
    var LABEL_OFFSET = 6;
    var VERTICAL_ANGLE = 90;

    var LONG_TICK_STROKE = "#B3B3B3";

    function getLayersBand(layers, depth) {
        var ret = 0;
        for (var i = 0; i < depth; ++i) {
            ret += layers[i].layerBand;
        }
        return ret;
    }

    var calculateSizeLimit = function(config) {
        var spacing = TICK_SIZE + LABEL_OFFSET - 1;

        var text = config.text;
        var style = config.styles;

        //the function try to calculate the actual text length as sizeLimit
        var sizeLimit = -1;
        if (config.position === Constants.POSITION.TOP || config.position === Constants.POSITION
            .BOTTOM) {
            if (config.rotated) {
                sizeLimit = config.size.height;

                if(config.rotationAngle !== VERTICAL_ANGLE) {
                    var textHeight = TextUtils.canvasMeasure(text, style['fontSize'], style['fontWeight'],
                                    style['fontFamily']).height;
                    textHeight = NumberUtils.preciseSimple(textHeight);

                    var textLengthOffset = (textHeight / Math.tan(config.rotationAngle * Math.PI/180));

                    sizeLimit = sizeLimit/(Math.sin(config.rotationAngle * Math.PI/180));
                    sizeLimit -= textLengthOffset;

                    var labelLocation = config.cellWidth/2 + config.cellStart;
                    var labelSize = labelLocation/(Math.cos(config.rotationAngle * Math.PI/180));

                    if(sizeLimit > labelSize) {
                        sizeLimit = labelSize;
                    }

                    sizeLimit += spacing;
                }
            }
            else {
                //horizontal labels does not need spacing, because they may
                //need to be truncated
                sizeLimit = config.size.width + spacing;
            }
        } else {
            sizeLimit = config.size.width;
        }

        if (sizeLimit >= 0) {
            sizeLimit -= spacing;
        }

        return sizeLimit;
    };

    var ret = {};

    ret.drawLines = function(selection, layers, range, width, height, position, props,
        effectManager) {
        ValueBodyRenderer.drawLines(selection, range, width, height, position, props,
            effectManager);
    };

    ret.drawTicks = function(selection, layers, ticks, width, height, position, props,
        effectManager, isUpdate) {

        function getTicksLength(layers, ticks) {
            var ticksNumber = ticks[0].length;
            var ticksLength = [];
            var tick, depth, layersNumber = layers.length;
            for (var i = 0; i < ticksNumber; ++i) {
                depth = 0;
                tick = ticks[depth][i];
                while (depth < layersNumber && ticks[depth].indexOf(tick) > -1) {
                    depth++;
                }
                var tickLength = TICK_SIZE;
                var isLongTick = false;
                if (depth > 1) {
                    tickLength = getLayersBand(layers, depth);
                    isLongTick = true;
                }
                ticksLength.push({
                    length: tickLength,
                    isLongTick: isLongTick
                });
            }
            return ticksLength;
        }

        var layersLength = layers.length;
        if (layersLength === 1) {
            ValueBodyRenderer.drawTicks(selection, ticks[0], width, height, position, props,
                effectManager, false, isUpdate);
        } else if (layersLength > 1) {
            var ticksReversed = ticks.slice().reverse();
            var layersReversed = layers.slice().reverse();
            var ticksLength = getTicksLength(layersReversed, ticksReversed);
            ret._drawTicks(selection, ticksReversed[0], width, height, position, ticksLength,
                props, effectManager, props.axisLine.size, isUpdate);
        }
    };

    ret._drawTicks = function(selection, ticksToDraw, width, height, position, ticksLength,
        props, effectManager, strokeWidth, isUpdate) {
        var commonClassPrefix = props.isAxisLineColorFromPlot ? AXIS_CLASS_NAMES.FIXED_PERIMETER :
            AXIS_CLASS_NAMES.PERIMETER;
        var tickClass = commonClassPrefix + " " + AXIS_CLASS_NAMES.TICK;
        var longTickClass = commonClassPrefix + " " + AXIS_CLASS_NAMES.LONGTICK;
        var stroke = effectManager.register({
            fillColor: props.color
        });

        var i = 0,
            length = ticksToDraw.length;
        var x1s = [],
            y1s = [],
            x2s = [],
            y2s = [];
        switch (position) {
            case Constants.POSITION.LEFT:
                for (; i < length; ++i) {
                    x1s[i] = width;
                    y1s[i] = ticksToDraw[i];
                    x2s[i] = width - ticksLength[i].length;
                    y2s[i] = ticksToDraw[i];
                }
                break;
            case Constants.POSITION.RIGHT:
                for (; i < length; ++i) {
                    x1s[i] = 0;
                    y1s[i] = ticksToDraw[i];
                    x2s[i] = ticksLength[i].length;
                    y2s[i] = ticksToDraw[i];
                }
                break;
            case Constants.POSITION.TOP:
                for (; i < length; ++i) {
                    x1s[i] = ticksToDraw[i];
                    y1s[i] = height;
                    x2s[i] = ticksToDraw[i];
                    y2s[i] = height - ticksLength[i].length;
                }
                break;
            case Constants.POSITION.BOTTOM:
                for (; i < length; ++i) {
                    x1s[i] = ticksToDraw[i];
                    y1s[i] = 0;
                    x2s[i] = ticksToDraw[i];
                    y2s[i] = ticksLength[i].length;
                }
                break;
        }
        var tickSelections = selection.selectAll("." + commonClassPrefix).data(ticksToDraw);
        tickSelections.enter().append("line");
        tickSelections.exit().remove();
        tickSelections.each(function(d, i) {
            if (!isUpdate) {
                var className = tickClass;
                if (ticksLength[i].isLongTick) {
                    className = longTickClass;
                }
                this.setAttribute("class", className);
                this.setAttribute("stroke", stroke);
                this.setAttribute("stroke-width", strokeWidth);
                this.setAttribute("shape-rendering", "crispEdges");
            }
            this.setAttribute("x1", x1s[i]);
            this.setAttribute("y1", y1s[i]);
            this.setAttribute("x2", x2s[i]);
            this.setAttribute("y2", y2s[i]);
        });
    };

    ret.drawGridTicks = function(selection, layers, ticks, width, height, position, props,
        effectManager) {
        var layersLength = layers.length;
        if (layersLength === 0) {
            return;
        }

        function getTicksLength(layers, ticks) {
            var ticksNumber = ticks[0].length;
            var ticksLength = [];
            var tick, depth, layersNumber = layers.length;
            for (var i = 0; i < ticksNumber; ++i) {
                depth = 0;
                tick = ticks[depth][i];
                while (depth < layersNumber && ticks[depth].indexOf(tick) > -1) {
                    depth++;
                }
                var tickLength = getLayersBand(layers, depth);
                var isLongTick = false;
                if (depth > 1) {
                    isLongTick = true;
                }
                ticksLength.push({
                    length: tickLength,
                    isLongTick: isLongTick
                });
            }
            return ticksLength;
        }

        var ticksReversed = ticks.slice().reverse();
        var layersReversed = layers.slice().reverse();
        var ticksLength = getTicksLength(layersReversed, ticksReversed);

        ret._drawTicks(selection, ticksReversed[0], width, height, position, ticksLength, props,
            effectManager, props.size);
    };

    ret.drawLabels = function(selection, layers, width, height, position, props, effectManager,
        isUpdate, needRowAxisOffset, labelOffset) {

        var layersLength = layers.length;
        if (layersLength === 1) {
            this.drawSingleLayerLabels(selection, layers[0], width, height, position, props, 0, -
                1, null, effectManager, isUpdate, needRowAxisOffset, labelOffset);
        } else if (layersLength > 1) {
            var layersReversed = layers.slice().reverse();
            var baseline = 0;
            for (var i = 0; i < layersReversed.length; ++i) {
                baseline = getLayersBand(layersReversed, i);
                this.drawSingleLayerLabels(selection, layersReversed[i], width, height,
                    position, props, baseline, i, layersReversed, effectManager, isUpdate,
                    needRowAxisOffset, labelOffset);
            }
        }
    };

    var addRectMargin = function(rect, rotationAngle, xOffset, yOffset) {
        var MARGIN_SIZE = 2;
        var x = parseFloat(rect.getAttribute("x"));
        var y = parseFloat(rect.getAttribute("y"));
        var width = parseFloat(rect.getAttribute("width"));
        var height = parseFloat(rect.getAttribute("height"));
        //add margin
        rect.setAttribute("width", width + 2 * MARGIN_SIZE);
        rect.setAttribute("height", height + 2 * MARGIN_SIZE);
        
        //adjust x and y
        var realXOffset = xOffset;
        var realYOffset = yOffset;

        var baseYOffset = Math.sqrt(2) * MARGIN_SIZE;
        var refAngle;
        if(rotationAngle === VERTICAL_ANGLE/2) {
            realYOffset = yOffset - baseYOffset;
        }
        else if(rotationAngle < VERTICAL_ANGLE/2) {
            refAngle = 2*VERTICAL_ANGLE - (VERTICAL_ANGLE-rotationAngle) - (VERTICAL_ANGLE/2);
            realYOffset = yOffset - baseYOffset * Math.sin(refAngle * Math.PI/180);
            realXOffset = xOffset + baseYOffset * Math.cos(refAngle * Math.PI/180);
        }
        else {
            refAngle = (VERTICAL_ANGLE-rotationAngle) + (VERTICAL_ANGLE/2);
            realYOffset = yOffset - baseYOffset * Math.sin(refAngle * Math.PI/180);
            realXOffset = xOffset - baseYOffset * Math.cos(refAngle * Math.PI/180);
        }

        rect.setAttribute("transform",
           "translate(" + realXOffset + "," + realYOffset + ")");
    };

    ret.drawSingleLayerLabels = function(selection, layer, width, height, position, props,
        baseline, index, layers, effectManager, isUpdate, needRowAxisOffset, labelOffset) {
        var labelClass = AXIS_CLASS_NAMES.LABEL + " " + AXIS_CLASS_NAMES.MORPHABLE_LABEL +
            " " + AXIS_CLASS_NAMES.LABEL_BACKWORD + " " + AXIS_CLASS_NAMES.LABEL_SELECTION;

        var labelRenderer = props.labelRenderer;
        var isCustomizedRenderer = true;
        if (!TypeUtils.isFunction(labelRenderer)) {
            labelRenderer = DefaultCategoryLabelRenderer;
            isCustomizedRenderer = false;
        }
        var propStyle = props.label.style;

        var fill = effectManager.register({
            fillColor: propStyle.color
        });
        var fontSize = propStyle['fontSize'];
        var fontWeight = propStyle['fontWeight'];
        var fontFamily = propStyle['fontFamily'];
        var fontStyle = propStyle['fontStyle'];

        var labels = layer.cells.slice().filter(function(e) {
            return e.isVisible;
        });
        var rotated = layer.rotated;
        var offset = index === -1 ? LABEL_OFFSET : TICK_SIZE;

        this._setLabelParameters(labels, position, baseline, width, height, offset,
            isCustomizedRenderer, layer);

        var labelSelections = selection.selectAll(".index_" + index).data(labels);
        labelSelections.enter().append("g");
        labelSelections.exit().remove();
        labelSelections.each(function(d, i) {
            if (!isUpdate) {
                this.setAttribute("class", labelClass + " index_" + index);
                this.setAttribute("fill", fill);
                this.setAttribute("font-size", fontSize);
                this.setAttribute("font-weight", fontWeight);
                this.setAttribute("font-family", fontFamily);
                this.setAttribute("font-style", fontStyle);
            }
            this.setAttribute("transform", "translate(" + d.x + "," + d.y + ")");


            var childCells = getLeafChildCells(layers, index, i);

            var isVertical = PositionUtils.isVertical(position);
            var cellSizeField = isVertical ? "cellHeight" : "cellWidth";
            var psize = d._preferredSize;
            var refSize = Math.max(d[cellSizeField], psize[cellSizeField]);
            var size = isVertical ? {
                width: d.cellWidth,
                height: refSize
            } : {
                width: refSize,
                height: d.cellHeight
            };

            var config = {
                cellStart: d.cellStart,
                cellWidth: d.cellWidth,
                size: size,
                position: position,
                text: d.text,
                ctx: d.ctx,
                rotated: rotated,
                rotationAngle: layer.rotationAngle,
                styles: propStyle,
                childCells: childCells,
                needRowAxisOffset: needRowAxisOffset,
                labelOffset: labelOffset
            };
            //here we need to calculate the real label length
            var sizeLimit = calculateSizeLimit(config);
            config.sizeLimit = sizeLimit;

            var fullTextSize = measureTextLength(d.text, propStyle);
            var MIN_TEXT_WIDTH = 0;
            if(d.text.length > 0) {
                MIN_TEXT_WIDTH = measureTextLength(d.text[0] + "...", propStyle);
            }

            if(sizeLimit >= Math.min(MIN_TEXT_WIDTH, fullTextSize)) {
                //the axis can display the label text. we draw the rect.
                var rect;
                if (isUpdate) {
                    rect = this.querySelector("." + AXIS_CLASS_NAMES.BACKGROUND_RECT);
                } else {
                    rect = SVG.create("rect");
                    this.appendChild(rect);
                    rect.setAttribute("class", AXIS_CLASS_NAMES.BACKGROUND_RECT);
                    rect.setAttribute("fill", "transparent");
                }
                rect.setAttribute("x", d.rectX);
                rect.setAttribute("y", d.rectY);
                rect.setAttribute("width", d.rectWidth);
                rect.setAttribute("height", d.rectHeight);
                
                if(layer.rotated && layer.rotationAngle !== VERTICAL_ANGLE && layer.rotationAngle !== 0) {
                    if(!d.isEventRectLimited) {
                        rect.setAttribute("transform", "skewX(-" + (90-layer.rotationAngle) + ")");

                        var refRectWidth = d.contentWidth * 3;
                        if(refRectWidth < d.cellWidth) {
                            rect.setAttribute("width", refRectWidth);
                            rect.setAttribute("x", d.rectX + d.cellWidth/2 - refRectWidth/2);
                        }
                    }
                    else {
                        var textSize = TextUtils.canvasMeasure(d.text, propStyle['fontSize'], propStyle['fontWeight'],
                                        propStyle['fontFamily']);
                        var textHeight = NumberUtils.preciseSimple(textSize.height);
                        var textWidth = NumberUtils.preciseSimple(textSize.width);

                        var rectHeight = Math.min(sizeLimit, textWidth);

                        rect.setAttribute("width", textHeight);
                        rect.setAttribute("height", rectHeight);

                        var rectOffset = textHeight/4 * Math.sin(config.rotationAngle * Math.PI/180);
                        rect.setAttribute("transform",
                            "translate(" + (-rectOffset) + "," + TICK_SIZE + ")" );

                        //enlarge rect size to add margin                            
                        addRectMargin(rect, config.rotationAngle, -rectOffset, TICK_SIZE);

                        var transformStr = rect.getAttribute("transform") + " ";
                        rect.setAttribute("transform",
                            transformStr + 
                            "rotate(" + (90 - config.rotationAngle) + "," + d.rectX + "," + d.rectY + ") " );
                    }
                }
            }
           
            var gNode, offset;
            if (isUpdate) {
                gNode = this.querySelector(".v-axis-label-wrapper");
                if (gNode) {
                    if (labelRenderer.update && TypeUtils.isFunction(labelRenderer.update)) {
                        labelRenderer.update(gNode, config);
                    }
                    offset = d[cellSizeField] - psize[cellSizeField];
                    if (offset < 0) { //content needs bigger space
                        gNode.setAttribute("transform", "translate(" + (isVertical ? (
                            "0, " + offset / 2) : (offset / 2 + ",0")) + ")");
                    } else {
                        gNode.removeAttribute("transform");
                    }
                }
            } else {
                var textNode = labelRenderer(config);

                if (textNode === undefined) {
                    textNode = DefaultCategoryLabelRenderer(config);
                }

                if (textNode) {
                    gNode = SVG.create("g");
                    gNode.setAttribute("class", "v-axis-label-wrapper");
                    gNode.appendChild(textNode);
                    this.appendChild(gNode);
                    offset = d[cellSizeField] - psize[cellSizeField];
                    if (offset < 0) { //content needs bigger space
                        gNode.setAttribute("transform", "translate(" + (isVertical ? (
                            "0, " + offset / 2) : (offset / 2 + ",0")) + ")");
                    }
                }
            }
        });
    };

    var measureTextLength = function(text, style) {
        var textLength = TextUtils.canvasMeasure(text, style['fontSize'], style['fontWeight'],
            style['fontFamily']).width;
        textLength = NumberUtils.preciseObject(textLength);
        return textLength;
    };

    function getLeafChildCells(layers, layerIndex, cellIndex) {
        if (!layers || layerIndex < 1) {
            return null;
        }
        var lastLayerCells = layers[0].cells;
        var currentCellCtx = layers[layerIndex].cells[cellIndex].ctx;
        var childCells = [];
        for (var i = 0, length = lastLayerCells.length; i < length; ++i) {
            if (matchCtx(currentCellCtx, lastLayerCells[i].ctx)) {
                childCells.push(lastLayerCells[i]);
            }
        }
        return childCells;
    }

    function matchCtx(targetCtx, ctx) {
        var isMatch = true;
        for (var key in targetCtx) {
            if (targetCtx.hasOwnProperty(key)) {
                if (!ctx.hasOwnProperty(key) || ctx[key] !== targetCtx[key]) {
                    isMatch = false;
                    break;
                }
            }
        }
        return isMatch;
    }

    ret._setLabelParameters = function(labels, position, baseline, width, height, textOffset,
        noForceRect, layer) {
        var i = 0,
            length = labels.length,
            label;
        switch (position) {
            case Constants.POSITION.LEFT:
                for (i = 0; i < length; ++i) {
                    label = labels[i];
                    label.x = width - baseline - label.cellWidth;
                    label.y = label.cellStart;
                }
                break;
            case Constants.POSITION.RIGHT:
                for (i = 0; i < length; ++i) {
                    label = labels[i];
                    label.x = baseline;
                    label.y = label.cellStart;
                }
                break;
            case Constants.POSITION.TOP:
                for (i = 0; i < length; ++i) {
                    label = labels[i];
                    label.x = label.cellStart;
                    label.y = height - baseline - label.cellHeight;
                }
                break;
            case Constants.POSITION.BOTTOM:
                for (i = 0; i < length; ++i) {
                    label = labels[i];
                    label.x = label.cellStart;
                    label.y = baseline;
                }
                break;
        }

        var isEventRectLimited = false;
        if (!noForceRect && labels.length) {
            switch (position) {
                case Constants.POSITION.LEFT:
                case Constants.POSITION.RIGHT:
                    if (labels[0].cellHeight - 2 < labels[0].contentHeight) {
                        isEventRectLimited = true;
                    }
                    break;
                case Constants.POSITION.TOP:
                case Constants.POSITION.BOTTOM:
                    if(!layer.rotated || layer.rotationAngle === 0) {
                        isEventRectLimited = false;
                    }
                    else {
                        if (labels[0].cellWidth - 2 < labels[0].contentWidth) {
                            isEventRectLimited = true;
                        }
                        if(layer.rotated && layer.rotationAngle !== VERTICAL_ANGLE &&
                            labels[0].cellWidth < (labels[0].contentWidth * 3)) {
                            isEventRectLimited = true;
                        }
                    }
                    break;
            }
        }
        if (isEventRectLimited) {
            switch (position) {
                case Constants.POSITION.LEFT:
                    for (i = 0; i < length; ++i) {
                        label = labels[i];
                        label.rectX = label.cellWidth - label.contentWidth - textOffset;
                        label.rectY = (label.cellHeight - label.contentHeight) / 2;
                        label.rectWidth = label.contentWidth;
                        label.rectHeight = label.contentHeight;
                        label.isEventRectLimited = true;
                    }
                    break;
                case Constants.POSITION.RIGHT:
                    for (i = 0; i < length; ++i) {
                        label = labels[i];
                        label.rectX = textOffset;
                        label.rectY = (label.cellHeight - label.contentHeight) / 2;
                        label.rectWidth = label.contentWidth;
                        label.rectHeight = label.contentHeight;
                        label.isEventRectLimited = true;
                    }
                    break;
                case Constants.POSITION.TOP:
                    for (i = 0; i < length; ++i) {
                        label = labels[i];
                        label.rectX = (label.cellWidth - label.contentWidth) / 2;
                        label.rectWidth = label.contentWidth;
                        label.rectHeight = label.contentHeight;
                        label.rectY = label.cellHeight - label.contentHeight - textOffset;
                        label.isEventRectLimited = true;
                    }
                    break;
                case Constants.POSITION.BOTTOM:
                    for (i = 0; i < length; ++i) {
                        label = labels[i];

                        label.rectX = (label.cellWidth - label.contentWidth) / 2;
                        label.rectY = textOffset;
                        label.rectWidth = label.contentWidth;
                        label.rectHeight = label.contentHeight;
                        label.isEventRectLimited = true;
                    }
                    break;
            }

            if(position === Constants.POSITION.BOTTOM || position === Constants.POSITION.TOP) {
                for (i = 0; i < length; ++i) {
                    if(layer.rotated && layer.rotationAngle !== VERTICAL_ANGLE) {
                        labels[i].rectY = 0;
                        labels[i].rectX = label.cellWidth / 2;
                    }
                }
            }
        } else {
            for (i = 0; i < length; ++i) {
                label = labels[i];
                label.rectX = 1;
                label.rectY = 1;
                label.rectWidth = label.cellWidth - 2 < 0 ? 0 : label.cellWidth - 2;
                label.rectHeight = label.cellHeight - 2 < 0 ? 0 : label.cellHeight - 2;
            }
        }
    };

    return ret;
});
define('sap/viz/chart/components/axis/sub/CategoryAxisBody',[
    "sap/viz/framework/common/util/Constants",
    "sap/viz/framework/common/util/oo",
    "sap/viz/chart/components/axis/sub/AxisComponent",
    "sap/viz/framework/common/util/NumberUtils",
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/chart/components/util/BoundUtil",
    "sap/viz/chart/components/axis/renderer/CategoryBodyRenderer",
    "sap/viz/chart/components/axis/renderer/DefaultCategoryLabelRenderer",
    "sap/viz/chart/components/util/ClippathUtil",
    'sap/viz/framework/common/util/DataUtils'
], function(Constants, oo, AxisComponent, NumberUtils, TypeUtils,
    BoundUtil, CategoryBodyRenderer,
    DefaultCategoryLabelRenderer, ClippathUtil, DataUtils) {

    var TICK_SIZE = 5;
    var LABEL_OFFSET = 6;
    var VERTICAL_ANGLE = 90;

    var AXIS_CLASS_NAMES = Constants.CSS.CLASS.AXIS;

    var CategoryAxisBody = function() {
        CategoryAxisBody.superclass.constructor.apply(this, arguments);
        //this.__className = "sap.viz.chart.elements.axis.sub.CategoryAxisBody";
        this._layers = null;
        this._domainChanged = true;
        this._rawLayers = null;
        this._bindingFieldIds = null;
        this._hasNegativeValue = false;
        this._styleChanged = true;
        //Default offset for trellis axis label is 5.
        this._labelOffset = 5;
        var styleChangeCallBack = function() {
            this._styleChanged = true;
        };
        ["fontFamily", "fontSize", "fontWeight", "fontStyle"].forEach(function(e) {
            this[e + "PW"] = this._properties.watch("label.style." + e, styleChangeCallBack.bind(this));
        }, this);
        this._isInTrellis = false;
    };
    oo.extend(CategoryAxisBody, AxisComponent);

    CategoryAxisBody.prototype.setData = function(_) {
        var data = this._data;
        if (!data || JSON.stringify(data.getDomain()) !== JSON.stringify(_.getDomain())) {
            this._domainChanged = true;
        }
        return CategoryAxisBody.superclass.setData.apply(this, arguments);
    };

    CategoryAxisBody.prototype.setInTrellis = function(_inTrellis) {
        this._isInTrellis = _inTrellis;
    };

    CategoryAxisBody.prototype.setBindingFields = function(_) {
        var bindingFieldIds = _.map(function(o) {
            return o.id;
        });
        if (JSON.stringify(this._bindingFieldIds) !== JSON.stringify(bindingFieldIds)) {
            this._domainChanged = true;
        }
        this._bindingFieldIds = bindingFieldIds;
        this._bindingFields = _;

        return this;
    };

    CategoryAxisBody.prototype.setHasNegativeValue = function(value) {
        value = value || false;
        this._hasNegativeValue = value;
        return this;
    };

    CategoryAxisBody.prototype.update = function(selection) {
        var properties = this._properties.get();
        if (this._data && properties.visible) {
            var width = this._size.width;
            var height = this._size.height;
            var position = this._position;

            this._layers = this._buildLayers(this._data);
            var layers = this._getAvailableLayers();

            var group = null;

            var originProps = this._properties.origin;
            var unhighlightAxis = originProps.get("plotArea.gridline.zeroLine.unhighlightAxis");

            if (this._hasNegativeValue === true && unhighlightAxis === true) {
                properties.color = originProps.get("plotArea.gridline.color");
            }

            if (this._isSpaceEnough()) {
                if (properties.axisTick.visible) {
                    group = selection.select("." + AXIS_CLASS_NAMES.TICK_GROUP);
                    CategoryBodyRenderer.drawTicks(group, layers, this._getTicks(layers),
                        width, height,
                        position, properties, this.runtime().effectManager(), true);
                }
                var needRowAxisOffset = this._needRowAxisOffset();
                if (properties.label && properties.label.visible) {
                    group = selection.select("." + AXIS_CLASS_NAMES.LABEL_GROUP);
                    CategoryBodyRenderer.drawLabels(group, layers, width, height, position,
                        properties, this.runtime().effectManager(), true, needRowAxisOffset, this._labelOffset);
                }
            }
        }
    };

    CategoryAxisBody.prototype.render = function(selection) {
        selection.select("g." + AXIS_CLASS_NAMES.LINE_GROUP).remove();
        selection.select("g." + AXIS_CLASS_NAMES.TICK_GROUP).remove();
        selection.select("g." + AXIS_CLASS_NAMES.LABEL_GROUP).remove();
        var clippathid = ClippathUtil.drawClippath(d3.select(selection.node().parentNode),
            this._size.width + 2, this._size.height + 2, -1, -1);
        selection.attr('clip-path', 'url(#' + clippathid + ')');
        var properties = this._properties.get();
        if (this._data && properties.visible) {
            var width = this._size.width;
            var height = this._size.height;
            var position = this._position;

            var scale = this._data;
            var range = scale.getRange();
            var layers = this._getAvailableLayers();

            var group = null;

            var originProps = this._properties.origin;
            var unhighlightAxis = originProps.get("plotArea.gridline.zeroLine.unhighlightAxis");

            if (this._hasNegativeValue === true && unhighlightAxis === true) {
                properties.color = originProps.get("plotArea.gridline.color");
            }



            if (this._isSpaceEnough()) {
                if (properties.axisLine && properties.axisLine.visible) {
                    group = selection.append("g").attr("class", AXIS_CLASS_NAMES.LINE_GROUP);
                    CategoryBodyRenderer.drawLines(group, layers, range, width, height, position,
                        properties, this.runtime().effectManager());
                }

                var ticks = this._getTicks(layers);

                if (properties.axisTick && properties.axisTick.visible) {
                    group = selection.append("g").attr("class", AXIS_CLASS_NAMES.TICK_GROUP);
                    CategoryBodyRenderer.drawTicks(group, layers, ticks, width, height,
                        position, properties, this.runtime().effectManager());
                }

                var needRowAxisOffset = this._needRowAxisOffset();
                if (properties.label && properties.label.visible) {
                    group = selection.append("g").attr("class", AXIS_CLASS_NAMES.LABEL_GROUP);
                    CategoryBodyRenderer.drawLabels(group, layers, width, height, position,
                        properties, this.runtime().effectManager(), undefined, needRowAxisOffset, this._labelOffset);
                }
            }
        }
    };

    CategoryAxisBody.prototype.getPreferredSize = function(refSize) {
        var layers;
        if (this._data && this._properties.get('visible')) {
            layers = (this._layers = this._buildLayers(this._data));
        }
        var pfdSize = {
            minWidth: 0,
            maxWidth: 0,
            minHeight: 0,
            maxHeight: 0,
            spacings: [{
                "interval": 0,
                "type": Constants.SPACING_TYPE.STEP
            }]
        };
        // Set a nonzeron value to make sure the axis line is always drawn
        if (this._isVertical()) {
            pfdSize.minWidth = pfdSize.maxWidth = 0.1;
        } else {
            pfdSize.minHeight = pfdSize.maxHeight = 0.1;
        }
        if (layers) {
            var range = this._data.getRange();
            var rangeLong = Math.abs(range[0] - range[1]);
            var i, length = layers.length;
            var minSize, maxSize, spacings, layer;
            if (length) {
                spacings = (pfdSize.spacings = []);
                for (i = 0; i < length; ++i) {
                    layer = layers[i];
                    if (i === 0 && //(this._isVertical() || (!this._isVertical() && layer.rotated)) &&
                        layer.minLayerBand < layer.layerBand) {
                        spacings.push({
                            "interval": layer.minLayerBand,
                            "type": Constants.SPACING_TYPE.STEP
                        });
                        spacings.push({
                            "interval": layer.layerBand - layer.minLayerBand,
                            "type": Constants.SPACING_TYPE.RANGE
                        });
                    } else {
                        spacings.push({
                            "interval": layer.layerBand,
                            "type": Constants.SPACING_TYPE.STEP
                        });
                    }
                }
                minSize = this._getMinLayersSize(spacings);
                var sizeLimit = refSize && refSize[this._isVertical() ? 'width' : 'height'];
                maxSize = this._getMaxLayersSize(spacings, sizeLimit);
                if (this._isVertical()) {
                    pfdSize.minWidth = minSize;
                    pfdSize.maxWidth = maxSize;
                    pfdSize.minHeight = rangeLong;
                    pfdSize.maxHeight = rangeLong;
                } else { //position === Constants.POSITION.TOP || position === Constants.POSITION.BOTTOM
                    pfdSize.minWidth = rangeLong;
                    pfdSize.maxWidth = rangeLong;
                    pfdSize.minHeight = minSize;
                    pfdSize.maxHeight = maxSize;
                }
            }
        }
        var precisedSize = NumberUtils.preciseObject(pfdSize);
        this._updatePfdSize(precisedSize);
        return precisedSize;
    };
    CategoryAxisBody.prototype.destroy = function() {

        //remove watchers
        ["fontFamily", "fontSize", "fontWeight", "fontStyle"].forEach(function(e) {
            if (this[e + "PW"] == null) {
                return;
            }
            this[e + "PW"].remove();
            this[e + "PW"] = null;
        }, this);

        CategoryAxisBody.superclass.destroy.apply(this, arguments);
        this._layers = null;
        this._rawLayers = null;
        this._bindingFieldIds = null;
        this._bindingFields = null;
        this._domainChanged = null;
        this._hasNegativeValue = null;
        this._styleChanged = null;
    };

    CategoryAxisBody.prototype._getMinLayersSize = function(spacings) {
        return spacings[0].interval;
    };

    CategoryAxisBody.prototype._getMaxLayersSize = function(spacings, sizeLimit) {
        var sum = 0;
        for (var i = 0, length = spacings.length; i < length; ++i) {
            if (typeof sizeLimit !== 'number' || sum + spacings[i].interval <= sizeLimit) {
                sum += spacings[i].interval;
            } else {

                if (spacings[i].type === Constants.SPACING_TYPE.RANGE) {
                    sum = Math.min(sum + spacings[i].interval, sizeLimit);
                }
                break;
            }
        }
        return sum;
    };

    CategoryAxisBody.prototype._getTicks = function(layers) {
        var ticksArray = [];
        var cellTickSizeField;
        if (this._isVertical()) {
            cellTickSizeField = "cellHeight";
        } else {
            cellTickSizeField = "cellWidth";
        }
        var ticks, cursor, cells;
        for (var i = 0, length = layers.length; i < length; ++i) {
            ticks = [];
            cursor = 0;
            cells = layers[i].cells;
            for (var j = 0; j < cells.length; ++j) {
                if (j === 0) {
                    ticks.push(cursor);
                }
                cursor += cells[j][cellTickSizeField];
                ticks.push(cursor);
            }
            ticksArray.push(ticks);
        }
        return NumberUtils.preciseObject(ticksArray);
    };

    CategoryAxisBody.prototype.getAvailableLayersNumber = function() {
        var layers = this._getAvailableLayers();
        return layers.length;
    };

    CategoryAxisBody.prototype._getAvailableLayers = function() {
        var spaceLimit;
        if (this._isVertical()) {
            spaceLimit = NumberUtils.preciseSimple(this._size.width);
        } else {
            spaceLimit = NumberUtils.preciseSimple(this._size.height);
        }
        var layers = this._layers;
        var layer;
        var availableLayers = [];
        if (layers) {
            for (var i = 0, length = layers.length; i < length; ++i) {
                layer = layers[i];
                spaceLimit -= layer.layerBand;
                if (spaceLimit < 0) {
                    if (i === 0 && //(this._isVertical() || (!this._isVertical() && layer.rotated)) &&
                        spaceLimit + layer.layerBand - layer.minLayerBand >= 0) {
                        availableLayers.push(layer);
                    }
                    break;
                } else {
                    availableLayers.push(layer);
                }
            }
        }
        return availableLayers;
    };

    CategoryAxisBody.prototype._buildLayers = function(scale) {
        if (this._domainChanged || this._styleChanged) {
            //scale change or style change will affect the result of label layer merging
            this._domainChanged = false;
            this._styleChanged = false;
            this._rawLayers = _buildUtils.mergeLabels.call(this, scale.getDomain());
        }
        var labelLayers = this._rawLayers;
        _buildUtils.assignCellSize.call(this, labelLayers, scale.getRangeInterval());
        _buildUtils.layoutCells.call(this, labelLayers, scale.getRange());
        return _buildUtils.getVisibleLayers.call(this, labelLayers);
    };

    CategoryAxisBody.prototype.layout = function() {
        if (!(this._layers && this._layers.length)) { //even first layer is hidden
            return;
        }
        //change layer band regarding to width/height
        var bandTotal = this._isVertical() ? this._size.width : this._size.height;
        var layer0 = this._layers[0],
            cells, cell, i;
        if (bandTotal < layer0.layerBand && bandTotal >= layer0.minLayerBand) {
            cells = layer0.cells;
            for (i = -1; ++i < cells.length;) {
                cell = cells[i];
                if (this._isVertical()) {
                    if (cell.cellWidth > 0) {
                        cell.cellWidth = bandTotal;
                    }
                } else {
                    if (cell.cellHeight > 0) {
                        cell.cellHeight = bandTotal;
                    }
                }
            }
        }
    };

    CategoryAxisBody.prototype._needRowAxisOffset = function() {
        return false;
    };


    /****************************************************************************/
    /****************************************************************************/
    /* utilities for _buildLayers
     * context should be this (i.e. instance of CategoryAxisBody)
     */
    var _buildUtils = {};

    _buildUtils.mergeLabels = function(domain) {
        var bindingFieldIds = this._bindingFieldIds;

        function getLayerslength(domain) {
            var ret = 0;
            if (domain.length && domain[0].length) {
                ret = domain[0].length;
            }
            return ret;
        }

        function mergeCtx(ctx, depth) {
            var length = depth === undefined ? ctx[0].length : depth;
            var ret = {};
            var value;
            for (var i = 0; i < length; ++i) {
                value = ctx[0][i];
                if (!DataUtils.isPlainValue(value)) {
                    ret[bindingFieldIds[i]] = DataUtils.getDimensionValue(value);
                    ret[bindingFieldIds[i] + DataUtils.DIMENSION_DISPLAYNAME_SUFFIX] =
                        DataUtils.getDimensionDisplayName(value);
                } else {
                    ret[bindingFieldIds[i]] = value;
                }
            }
            return ret;
        }

        function setCellProperties(cell, text) {
            //cell.val = domainItem;
            cell.text = text;
        }

        function domainIsEqual(a, b) {
            if (DataUtils.getDimensionValue(a) === DataUtils.getDimensionValue(b)) {
                return true;
            }

            return false;
        }

        var layers = [],
            layer, cell, ctx;
        var i, j, iLength, jLength, domainItem;
        var spaceCount, spaceCountHelper, formerLayerIndex;
        var layersLength = getLayerslength(domain);

        var displayTexts = domain.map(DataUtils.getDisplayTextsConverter(this._bindingFields));

        for (i = 0, iLength = layersLength; i < iLength; ++i) {
            layer = {
                cells: []
            };
            spaceCount = 0;
            spaceCountHelper = 0;
            formerLayerIndex = 0;
            ctx = [];
            for (j = 0, jLength = domain.length; j < jLength; ++j) {
                cell = {};
                domainItem = domain[j][i];
                var displayText = displayTexts[j][i];
                ctx.push(domain[j]);
                if (i === iLength - 1) {
                    //If last layer, don't merge.
                    setCellProperties(cell, displayText);
                    cell.ctx = mergeCtx([domain[j]]);
                    cell.space = 1;
                } else {
                    ++spaceCount;
                    ++spaceCountHelper;
                    if (i > 0 && spaceCountHelper >= layers[i - 1].cells[formerLayerIndex].space) {
                        //if item's space is larger than upper layer's corresponding cell's space, it's a matching
                        //point.
                        //Because if upper cells are seperated, lower cells must be seperated
                        //whether their values are the same or not.
                        setCellProperties(cell, displayText);
                        cell.ctx = mergeCtx(ctx, i + 1);
                        cell.space = spaceCount;
                        spaceCount = 0;
                        spaceCountHelper = 0;
                        ++formerLayerIndex;
                    } else {
                        if (j + 1 < jLength && domainIsEqual(domainItem, domain[j + 1][i])) {
                            //if j is in length limition and this item's value equals to next item's,
                            //go on until there is a difference.
                            continue;
                        } else {
                            //Match a difference, save it as a cell.
                            setCellProperties(cell, displayText);
                            cell.ctx = mergeCtx(ctx, i + 1);
                            cell.space = spaceCount;
                            spaceCount = 0;
                        }
                    }
                }
                layer.cells.push(cell);
                ctx = [];
            }
            layers.push(layer);
        }
        return layers;
    };

    _buildUtils.assignCellSize = function(layers, rangeInterval) {
        var layer, cells, cell, spaceCount;
        var i, iLength, j, jLength, info, middle, halfRange;
        var rotatedCursor;

        if (this._isVertical()) {
            for (i = 0, iLength = layers.length; i < iLength; ++i) {
                layer = layers[i];
                spaceCount = 0;
                cells = layer.cells;
                for (j = 0, jLength = cells.length; j < jLength; ++j) {
                    cell = cells[j];
                    info = _misc.getRangeInfo(rangeInterval, spaceCount, cell.space);
                    cell.cellHeight = info.rangeLong;
                    cell.middle = (middle = info.middle);
                    cell.cellStart = info.start;
                    cell.cellEnd = info.end;
                    spaceCount += cell.space;
                }
            }
        } else {
            for (i = 0, iLength = layers.length; i < iLength; ++i) {
                layer = layers[i];
                spaceCount = 0;
                cells = layer.cells;
                rotatedCursor = -1;
                for (j = 0, jLength = cells.length; j < jLength; ++j) {
                    cell = cells[j];
                    info = _misc.getRangeInfo(rangeInterval, spaceCount, cell.space);
                    cell.cellWidth = info.rangeLong;
                    cell.middle = (middle = info.middle);
                    cell.cellStart = info.start;
                    cell.cellEnd = info.end;
                    spaceCount += cell.space;
                }
            }
        }
    };

    _buildUtils.layoutCells = function(layers, range) {
        var properties = this._properties;
        var propStyle = properties.get('label.style');
        var labelVisible = properties.get('label.visible');

        var truncatedLabelRatioSetting = parseFloat(properties.get("label.truncatedLabelRatio"));
        if(isNaN(truncatedLabelRatioSetting)) {
            truncatedLabelRatioSetting = 0.2;
        }

        if(truncatedLabelRatioSetting < 0) {
            truncatedLabelRatioSetting = 0;
        }

        if(truncatedLabelRatioSetting > 1) {
            truncatedLabelRatioSetting = 1;
        }

        //the rotationAngle may be set to 0, 30, 45, 60, 90,
        var defaultRotationAngle = 45;

        var autoRotateSetting = properties.get("label.rotation");
        if(autoRotateSetting !== "auto" && autoRotateSetting !== "fixed") {
            autoRotateSetting = "auto";
        }

        var rotationAngleSetting = parseInt(properties.get("label.angle"));
        var supportedRotationAngleList = [0, 30, 45, 60, 90];
        if(supportedRotationAngleList.indexOf(rotationAngleSetting) < 0) {
            rotationAngleSetting = defaultRotationAngle;
        }

        if(autoRotateSetting === "auto") {
            rotationAngleSetting = defaultRotationAngle;
        }

        var labelRenderer = properties.get('labelRenderer') || DefaultCategoryLabelRenderer,
            psize;
        var getPreferredSize = (function(renderer, isVertical, style, position) {
            return function(cell, layer, rotated, disableAutoRotation, rotationAngle) {
                return _misc.fillPreferredSize(renderer, isVertical, cell, style,
                    layer, position,
                    rotated, disableAutoRotation, rotationAngle);
            };
        })(labelRenderer, this._isVertical(), propStyle, this._position);

        var offset = LABEL_OFFSET + TICK_SIZE;
        var rangeBound = range.slice();
        if (rangeBound[0] > rangeBound[1]) {
            rangeBound.reverse();
        }
        var layer, cells, cell;
        var i, iLength, j, jLength, maxRefSize, refSize;

        var cellSizeField, minCellBandField, cellRefSizeField;
        if (this._isVertical()) {
            cellSizeField = "cellHeight";
            minCellBandField = "minCellWidth";
            cellRefSizeField = "cellWidth";
        } else {
            cellSizeField = "cellWidth";
            minCellBandField = "minCellHeight";
            cellRefSizeField = "cellHeight";
        }

        var isOnlyOneLayer = function(layers) {
            //we may need to update the function to return whether 
            //there is only one visible layer. To implement it, the first layer
            //rotation angle must be fixed.
            var onlyOne = true;
            if(layers.length !== 1) {
                onlyOne = false;
            }
            return onlyOne;
        };

        var isUsedByTrellis = function(objectInstance) {
            return objectInstance._isTrellisAxis || objectInstance._isInTrellis;
        };

        iLength = layers.length;
        for (i = iLength - 1; i >= 0; --i) {
            var noAutoHide = !labelRenderer.autoHide || !labelRenderer.autoHide(this._isVertical(),
                i);
            layer = layers[i];
            layer.isVisible = true;
            layer.rotated = false;
            cells = layer.cells;
            maxRefSize = 0;

            if (labelVisible === false) {
                layer.isVisible = false;
                continue;
            }

            if (i === 0) {
                var availableCells, minLayerBand, maxMinLayerBand = 0;

                var truncatedLabelRatio = truncatedLabelRatioSetting;

                //these variables are just used as input auguments in getPreferredSize.
                var rotated = false;
                var rotationAngle = rotationAngleSetting;
                var disableAutoRotation = false;
                if(rotationAngleSetting === 0) {
                    disableAutoRotation = true;
                }

                var onlyOneLayer = isOnlyOneLayer(layers);
                var isTrellis = isUsedByTrellis(this);
                if(!onlyOneLayer || isTrellis) {
                    //if there are two or more layers, the 1st layer has to follow the "default" behavior
                    truncatedLabelRatio = 0;
                    rotationAngle = VERTICAL_ANGLE;
                }

                var getPreferredSizeFn = function(cell) {
                    return getPreferredSize(cell, 0, rotated, disableAutoRotation, rotationAngle);
                };

                var filteredCells = cells.slice();
                //the function will check if the layer is rotation, and
                //change the step (the variable will be used to calculate size)
                var step;
                var isLayerRotated = function(onlyOneLayer) {
                    var previousCell;
                    var allRotate = false;

                    if (!noAutoHide) {
                        _misc.excludeCrossBoundCells(filteredCells, rangeBound,
                            getPreferredSizeFn);
                    }

                    //determine initial step value
                    var len = filteredCells.length;
                    step = noAutoHide ? 1 : _misc.getStep(filteredCells, 0, getPreferredSizeFn);
                    var prevIdx = 0;
                    var rotateLabelNumber = 0;
                    var labelNumber = 0;
                    for (j = 0; j < len; j += step) {
                        cell = filteredCells[j];
                        if (step === undefined) { //even one label can't be fully-drawn
                            allRotate = true;
                            break;
                        }
                        psize = getPreferredSize(cell, 0, rotated, disableAutoRotation, rotationAngle);

                        //account numbers
                        labelNumber++;
                        if(psize.rotated) {
                            rotateLabelNumber++;
                        }

                        if(truncatedLabelRatio === 0 && rotateLabelNumber > 0) {
                            allRotate = true;
                            break;
                        }

                        if (!noAutoHide && j !== 0 && cell.start < previousCell.end - 0.001) { //overlapped
                            rotateLabelNumber = 0;
                            labelNumber = 0;
                            j = -step;
                            //step changed
                            step = _misc.getStep(filteredCells, prevIdx, getPreferredSizeFn);
                            continue;
                        }
                        prevIdx = j;
                        previousCell = cell;
                    }

                    if(rotationAngle === 0 || (truncatedLabelRatio === 1 && autoRotateSetting !== "fixed")) {
                        allRotate = false;
                    }
                    else {
                        if(onlyOneLayer) {
                            if(autoRotateSetting === "fixed") {
                                allRotate = true;
                            }
                            if(rotateLabelNumber > 0 && labelNumber > 0) {
                                if(NumberUtils.preciseSimple(rotateLabelNumber/labelNumber) >
                                   NumberUtils.preciseSimple(truncatedLabelRatio)) {
                                    allRotate = true;
                                }
                            }
                        }
                    }
                    return allRotate;
                };

                //for the only one layer, we will need to check the rotation using a ratio
                layer.rotated = isLayerRotated(onlyOneLayer);
                if(layer.rotated) {
                    layer.rotationAngle = rotationAngle;
                }
                rotated = layer.rotated;
                disableAutoRotation = true;

                if (!noAutoHide) {
                    _misc.excludeCrossBoundCells(filteredCells, rangeBound,
                        getPreferredSizeFn);
                }

                //Go go all cells to build availableCells, and calculate size
                availableCells = [];
                maxRefSize = maxMinLayerBand = 0;
                for (j = 0; j < filteredCells.length; j += step) {
                    cell = filteredCells[j];
                    if (step === undefined) { //even one label can't be fully-drawn
                        if(layer.rotated && layer.rotationAngle !== VERTICAL_ANGLE) {
                            //we do not add the special cell for rotated cells
                            break;
                        }
                        else {
                            if(!cell._preferredSize.noLabelSpace) {
                                availableCells.push(cell);
                                psize = cell._preferredSize;
                                maxRefSize = psize[cellRefSizeField];
                                maxMinLayerBand = psize[minCellBandField];
                            }
                            break;
                        }
                    }
                    psize = getPreferredSize(cell, 0, rotated, disableAutoRotation, rotationAngle);
                    if(!psize.noLabelSpace) {
                        availableCells.push(cell);
                    }

                    psize = cell._preferredSize;
                    if (maxRefSize < psize[cellRefSizeField]) {
                        maxRefSize = psize[cellRefSizeField];
                    }
                    minLayerBand = psize[minCellBandField];
                    if (minLayerBand && maxMinLayerBand < minLayerBand) {
                        maxMinLayerBand = minLayerBand;
                    }
                }

                if (availableCells.length === 0) {
                    layer.isVisible = false;
                    maxRefSize = -offset;
                    maxMinLayerBand = -offset;
                }
                refSize = NumberUtils.preciseSimple(maxRefSize + offset);
                for (j = 0, jLength = cells.length; j < jLength; ++j) {
                    cell = cells[j];
                    cell.isVisible = false;
                }
                for (j = 0, jLength = availableCells.length; j < jLength; ++j) {
                    cell = availableCells[j];
                    cell[cellRefSizeField] = refSize;
                    cell.isVisible = true;
                }
                layer.layerBand = refSize;
                layer.minLayerBand = NumberUtils.preciseSimple(maxMinLayerBand + offset);
            } else {
                for (j = 0, jLength = cells.length; j < jLength; ++j) {
                    cell = cells[j];
                    cell.isVisible = true;
                    psize = getPreferredSize(cell, i, layer.rotated);
                    if (psize.rotated && !layer.rotated) {
                        layer.rotated = true;
                        layer.rotationAngle = VERTICAL_ANGLE;
                        j = -1;
                        continue;
                    }
                    if (maxRefSize < psize[cellRefSizeField]) {
                        maxRefSize = psize[cellRefSizeField];
                    }
                    if (!noAutoHide && psize[cellSizeField] > cell[cellSizeField]) {
                        layer.isVisible = false;
                        maxRefSize = -offset;
                        break;
                    }
                }
                refSize = NumberUtils.preciseSimple(maxRefSize + offset);
                for (j = 0, jLength = cells.length; j < jLength; ++j) {
                    cells[j][cellRefSizeField] = refSize;
                }
                layer.layerBand = refSize;
            }
        }
    };

    _buildUtils.getVisibleLayers = function(layers) {
        var visibleLayers = [];
        if (this._properties.get('label.hideSubLevels')) {
            if (layers.length) {
                visibleLayers = [layers[0]];
            }
        } else {
            for (var i = 0, length = layers.length; i < length; ++i) {
                if (layers[i].isVisible) {
                    visibleLayers.push(layers[i]);
                }
            }
        }
        return visibleLayers;
    };



    /****************************************************************************/
    /****************************************************************************/
    /* misc utilities
     * context should NOT be changed, i.e. it should always be _misc itself
     */
    var _misc = {};

    _misc.defaultLabelGetPreferredSize = function(config) {
        return {
            cellWidth: config.size,
            cellHeight: config.size
        };
    };

    _misc.getRangeInfo = function(rangeInterval, offset, length) {
        var ret = 0;
        var range;
        var start, end;
        for (var i = 0; i < length; ++i) {
            range = rangeInterval[i + offset];
            ret += Math.abs(range[0] - range[1]);
            if (i === 0) {
                start = range[0];
            }
            if (i === length - 1) {
                end = range[1];
            }
        }
        return {
            rangeLong: ret,
            start: start,
            end: end,
            middle: (start + end) / 2
        };
    };

    _misc.fillPreferredSize = function(renderer, isVertical, cell, style, layer, position,
        rotated, disableAutoRotation, rotationAngle) {
        var cellSizeField, minCellBandField;
        if (isVertical) {
            cellSizeField = "cellHeight";
            minCellBandField = "minCellWidth";
        } else {
            cellSizeField = "cellWidth";
            minCellBandField = "minCellHeight";
        }
        var labelGetPreferredSize = renderer.getPreferredSize || _misc.defaultLabelGetPreferredSize,
            psize;

        if(rotationAngle === undefined) {
            rotationAngle = VERTICAL_ANGLE;
        }
        //get psize
        var config = {
            ctx: cell.ctx,
            styles: style,
            text: cell.text,
            layer: layer,
            size: cell[cellSizeField],
            position: position,
            rotated: rotated,
            rotationAngle: rotationAngle,
            cellWidth: cell.cellWidth,
            cellStart: cell.cellStart,
            disableAutoRotation: disableAutoRotation
        };
        psize = labelGetPreferredSize.call(renderer, config);
        if (!psize) { //custom renderer doesn't want to draw this cell, default renderer will do it
            psize = DefaultCategoryLabelRenderer.getPreferredSize(config);
        }
        if (psize[minCellBandField] === undefined) {
            psize[minCellBandField] = 0;
        }
        cell._preferredSize = psize;
        cell.contentWidth = psize.cellWidth;
        cell.contentHeight = psize.cellHeight;
        //calculate start/end
        var middle = cell.middle;
        var halfRange = psize[cellSizeField] / 2;
        cell.start = middle - halfRange;
        cell.end = middle + halfRange;
        return psize;
    };


    _misc.isCellOutOfBound = function(cell, bound) {
        var cellBound = [cell.start, cell.end];
        if (cellBound[0] > cellBound[1]) {
            cellBound.reverse();
        }
        return cellBound[0] < bound[0] || cellBound[1] > bound[1];
    };

    //  _misc.isOverLapped = function(item1, item2) {
    //    return (item1.start > item2.start && item1.start < item2.end) ||
    //      (item1.end > item2.start && item1.end < item2.end);
    //  };

    _misc.findBoundaryBinary = function(cells, rangeBound, getPreferredSizeFn, start, end) { //start is out, end is in
        if (end - start === 1) {
            return start;
        }
        var mid = Math.floor((end + start) / 2);
        getPreferredSizeFn(cells[mid]);
        if (_misc.isCellOutOfBound(cells[mid], rangeBound)) { //find in right
            return _misc.findBoundaryBinary(cells, rangeBound, getPreferredSizeFn, mid, end);
        } else { //find in left
            return _misc.findBoundaryBinary(cells, rangeBound, getPreferredSizeFn, start, mid);
        }
    };

    _misc.excludeCrossBoundCells = function(cells, rangeBound, getPreferredSizeFn) {
        var boundIdx;
        //exclude left side
        var step = Math.floor(cells.length * 0.1) || 1;
        var i, inIdx = -1,
            len = cells.length;
        for (i = 0; i < len;) {
            getPreferredSizeFn(cells[i]);
            if (!_misc.isCellOutOfBound(cells[i], rangeBound)) {
                inIdx = i;
                break;
            }
            if (i === len - 1) {
                break;
            }
            i = Math.min(i + step, len - 1);
        }
        if (inIdx > 0) {
            boundIdx = _misc.findBoundaryBinary(cells, rangeBound, getPreferredSizeFn, inIdx -
                step, inIdx);
        } else if (inIdx < 0) {
            cells.splice(0);
            return;
        }
        //exclude right side
        if (boundIdx !== undefined) {
            cells.splice(0, boundIdx + 1);
            len = cells.length;
            var start = len - (boundIdx + 1);
            if (start >= 0) {
                boundIdx = undefined;
                getPreferredSizeFn(cells[start]);
                if (_misc.isCellOutOfBound(cells[start], rangeBound)) {
                    boundIdx = start;
                    for (i = start - 1; i >= 0; i--) {
                        getPreferredSizeFn(cells[i]);
                        if (!_misc.isCellOutOfBound(cells[i], rangeBound)) {
                            break;
                        }
                        boundIdx = i;
                    }
                } else {
                    for (i = start + 1; i < len; i++) {
                        getPreferredSizeFn(cells[i]);
                        if (_misc.isCellOutOfBound(cells[i], rangeBound)) {
                            boundIdx = i;
                            break;
                        }
                    }
                }
                cells.splice(boundIdx, len - boundIdx);
            }
        }
    };

    _misc.getStep = function(cells, startIdx, getPreferredSizeFn) {
        if (cells.length <= 1) {
            return 1;
        }
        var step;
        var cell0 = cells[startIdx];
        var end0 = cell0.end - 0.001; //fix javascript precision issue
        var len = cells.length;
        var cell;
        for (var j = startIdx + 1; j < len; j++) {
            cell = cells[j];
            if (cell.cellStart >= end0) { //TODO: use cell.start to compare for better space usage
                for (var k = j; k < len; k++) {
                    getPreferredSizeFn(cells[k]);
                    if (cells[k].start >= end0) {
                        step = k - startIdx;
                        break;
                    }
                }
                break;
            }
        }
        return step;
    };

    return CategoryAxisBody;
});

define('sap/viz/chart/components/axis/CategoryAxis',[
    "sap/viz/framework/common/util/oo",
    "sap/viz/chart/components/axis/AxisContainer",
    "sap/viz/framework/scale/CategoryScale",
    "sap/viz/chart/components/axis/sub/CategoryAxisBody",
    "sap/viz/chart/components/axis/renderer/DefaultCategoryLabelRenderer",
    "sap/viz/framework/common/util/DataUtils",
    "sap/viz/framework/common/lang/LangManager",
    "sap/viz/framework/common/util/NumberUtils",
    "sap/viz/chart/components/util/TextUtils"
], function(oo, AxisContainer, CategoryScale, CategoryAxisBody, DefaultCategoryLabelRenderer, DataUtils, LangManager,
    NumberUtils, TextUtils) {

    var MEASURE_NAMES = "measureNames";
    
    var CategoryAxis = function(runtime, options) {
        
        this._hasNegativeValue = null;
        
        CategoryAxis.superclass.constructor.apply(this, arguments);
        this._isInTrellis = false;
 
        this.setChild("axisBody", new CategoryAxisBody(runtime, options), {
            order: 1,
            priority: 2,
            offset: 0
        });
    };
    oo.extend(CategoryAxis, AxisContainer);
    
    CategoryAxis.prototype.zoom = function (scale){
        this._realSize.width = this._size.width * scale;
        this._realSize.height = this._size.height * scale;
        this._updateData(this._getSizeInfo());
        this.getChild("axisBody").module.update(this._selections["axisBody"]);
    };

    CategoryAxis.prototype.setInTrellis = function(_inTrellis) {
        this._isInTrellis = _inTrellis;
        this.getChild("axisBody").module.setInTrellis(_inTrellis);
    };

    CategoryAxis.prototype.setPosition = function(pos) {
        CategoryAxis.superclass.setPosition.apply(this, arguments);
        return this;
    };

    CategoryAxis.prototype.setData = function(data, hasNegativeValue) {
        CategoryAxis.superclass.setData.call(this, data);
        this._hasNegativeValue = hasNegativeValue;
        if (data.scale) {
            this._scale = new CategoryScale(data.scale.getDomain(), [0, 1]);
        }
    };

    CategoryAxis.prototype.getRangeInterval = function(){
        if (!this._scale){
            return 0;
        }

        var intervals = this._scale.getRangeInterval();
        if (intervals.length === 0){
            return 0;
        }

        return Math.abs(intervals[0][0] - intervals[0][1]);
    };

    CategoryAxis.prototype._updateData = function(info) {
        CategoryAxis.superclass._updateData.apply(this, arguments);
        if (!this._scale) {
            return;
        }
        if (this._isVertical()) {
            this._scale.setRange([0, info.height]);
        } else {
            this._scale.setRange([0, info.width]);
        }
        this.getChild("axisBody").module
            .setData(this._scale)
            .setBindingFields(this._bindingFields)
            .setHasNegativeValue(this._hasNegativeValue);
    };

    CategoryAxis.prototype._constructTitle = function(header, titleItems) {
        var toDraw = header.map(function(o) {
            var title =  o.name || o.id;
            if(title === MEASURE_NAMES){
                title = LangManager.get("IDS_DEFAULTMND");
            }
            
            return title;
        });

        titleItems.splice(0, titleItems.length);
        var allText = "";
        var itemText = "";

        for (var i = 0; i < toDraw.length; i++) {
            if (i === 0) {
                itemText = toDraw[i];
            } else {
                itemText = " / " + toDraw[i];
            }

            allText += itemText;

            var itemObj = {};
            itemObj.isHidden = false;
            itemObj.text = itemText;
            //an item is an obj as {text: "abc", isHidden: false}
            titleItems.push(itemObj);
        }
        return allText;
    };
    
    CategoryAxis.prototype.getLabelOffset = function() {
        //When axis visible is false, there are no cells in axisBody.
        //For this scenario, return 0 for labelOffset
        var layers = this._children.axisBody.module._getAvailableLayers();        
        var innerLayer = layers[layers.length-1];
        var cells;
        if (innerLayer) {
            cells = innerLayer.cells;           
        } else {
            return 0;
        }      
        var cellMiddle;
        //Get cell middle position for visible layer
        cells.some(function(e) {
            if (e.isVisible === true) {
                cellMiddle = e.middle;
                return true;
            }
        });
        var prop = this._properties.get();
        var propStyle = prop.label.style;
        var textHeight = this._getTextHeight(propStyle);
        var offset = this._getBaseLineOffset(propStyle);
        return cellMiddle - textHeight / 2 + offset;
    };
    
    CategoryAxis.prototype._getTextHeight = function(propStyle) {

        var textHeight = TextUtils.canvasMeasure('', propStyle['fontSize'], propStyle['fontWeight'],
            propStyle['fontFamily']).height;
        textHeight = NumberUtils.preciseSimple(textHeight);
        return textHeight;    
    };
    
    CategoryAxis.prototype._getBaseLineOffset = function(propStyle) {
        var offset = TextUtils.getTextBaselineOffset({
            fontSize: propStyle['fontSize'],
            fontWeight: propStyle['fontWeight'],
            fontFamily: propStyle['fontFamily']
        }); 
        return offset;   
    };
    
    CategoryAxis.prototype.isByBound = function() {
        return true;
    };
    
    CategoryAxis.prototype.destroy = function() {
        CategoryAxis.superclass.destroy.call(this);
        
        this._scale = null;
        this._hasNegativeValue = null;
    };
    
    return CategoryAxis;

});

define('sap/viz/chart/components/axis/CategoryScrollbarAxis',[
    "sap/viz/framework/common/util/oo",
    "sap/viz/chart/components/axis/CategoryAxis",
    "sap/viz/chart/components/scrollbar/Scrollbar"
], function(oo, CategoryAxis, Scrollbar) {

    var CategoryScrollbarAxis = function(runtime, options) {
        CategoryScrollbarAxis.superclass.constructor.apply(this, arguments);
        this.setChild("axisScrollbar", new Scrollbar(runtime, {
            name: 'plotArea.scrollbar'
        }), {
            order: 2,
            priority: 0,
            offset: 0
        });
    };

    oo.extend(CategoryScrollbarAxis, CategoryAxis);

    return CategoryScrollbarAxis;

});

define('sap/viz/chart/components/plots/DataHandler',[], function Setup() {
    var Handler = function() {

    };

    Handler.prototype.reset = function() {};

    Handler.prototype.getBase = function(index, value) {
        return 0;
    };

    Handler.prototype.add = function(index, value) {
        return value;
    };

    Handler.prototype.destroy = function() {
    };
    
    var StackedHandler = function() {

    };

    StackedHandler.prototype.destroy = function() {
        this._sum = null;
    };
    
    StackedHandler.prototype.reset = function(length) {
        this._sum = [];
    };

    StackedHandler.prototype.getBase = function(index, value) {
        if (this._sum[index] == null) {
            this._sum[index] = 0;
        }
        return this._sum[index];
    };

    StackedHandler.prototype.add = function(index, value) {
        return this._sum[index] += value;
    };

    var SignSensitiveHandler = function() {

    };

    SignSensitiveHandler.prototype.reset = function(length) {
        this._positiveSum = [];
        this._negativeSum = [];
    };

    SignSensitiveHandler.prototype.destroy = function() {
        this._positiveSum = null;
        this._negativeSum = null;
    };
    
    SignSensitiveHandler.prototype.getBase = function(index, value) {
        if (this._positiveSum[index] == null) {
            this._positiveSum[index] = 0;
        }
        if (this._negativeSum[index] == null) {
            this._negativeSum[index] = 0;
        }
        if (value >= 0) {
            return this._positiveSum[index];
        } else {
            return this._negativeSum[index];
        }
    };

    SignSensitiveHandler.prototype.add = function(index, value) {
        if (value >= 0) {
            return this._positiveSum[index] += value;
        } else {
            return this._negativeSum[index] += value;
        }
    };

    return {
        getHandler: function() {
            return new Handler();
        },
        getStackHandler: function(signSensitive) {
            if (signSensitive) {
                return new SignSensitiveHandler();
            } else {
                return new StackedHandler();
            }
        }
    };
});
define('sap/viz/chart/components/datalabels/DataLabels',[
    'sap/viz/framework/common/util/oo',
    "sap/viz/framework/common/util/TypeUtils",
    'sap/viz/framework/common/util/SVG',
    'sap/viz/framework/common/util/DOM',
    "sap/viz/framework/common/util/DataGraphics",
    'sap/viz/framework/common/util/Constants',
    'sap/viz/framework/common/format/FormatManager',
    'sap/viz/chart/components/UIComponent',
    "sap/viz/chart/components/util/DataPointUtils",
    "sap/viz/chart/components/util/ColorUtil",
    "sap/viz/framework/common/util/RuleUtil",
    'sap/viz/framework/common/util/ObjectUtils',
    "sap/viz/framework/common/util/GeometryUtils"
], function(oo, TypeUtils, SVG, DOM, DataGraphics, Constants, formatManager, UIComponent,
    DataPointUtils, ColorUtil, RuleUtil, ObjectUtils, GeometryUtils) {

    function defaultRenderer(config) {
        var text = SVG.create("text");
        text.textContent = config.text;
        return text;
    }

    var DATA_LABEL_CLASS = Constants.CSS.CLASS.DATALABEL + " " + Constants.CSS.CLASS.MORPHABLELABEL,
        DATA_LABELS_GROUP_CLASS = Constants.CSS.CLASS.DATALABEL_GROUP,
        DATA_LABELS_GROUP_TAG = "g";

    /**
     * Get the combined property for a data point using properties and semantic properties
     *
     * @param ctx data point context
     * @param prop property as defined in chart's properties
     * @param semantic manager
     *
     * @return property value created from using matched semantic properties to override defined properties
     */
    function combinePropWithRule(ctx, prop, semanticMgr) {

        var ruleProp = semanticMgr.analyzeDataPointDataLabel(ctx),
            combined = ObjectUtils.extend(true, {}, prop);
        if (ruleProp && ruleProp.hasOwnProperty("dataLabel")) {
            // Adopt the dataLabel config object, works but not in requirement
            // combined = Objects.extend(true, combined, ruleProp.dataLabel);
            if (ruleProp.dataLabel instanceof Object && ruleProp.dataLabel.hasOwnProperty(
                "visible")) {
                combined.visible = ruleProp.dataLabel.visible;
            } else {
                combined.visible = !!ruleProp.dataLabel;
            }
        }
        return combined;
    }


    var DataLabels = function(runtime, options) {
        DataLabels.superclass.constructor.apply(this, arguments);

        this._options = options;
        this._labelPosition = "up";

    };
    oo.extend(DataLabels, UIComponent);

    DataLabels.prototype.setDataShapesGroupNode = function(value) {
        this._dataShapesGroupNode = value;
    };

    DataLabels.prototype._getDataLabelInfo = function(node) {
        var ctx = DataPointUtils.getContext(node);
        return {
            key: ctx["measureNames"],
            value: ctx[ctx["measureNames"]]
        };
    };

    DataLabels.prototype._processDataLabelRendererConfig = function(config, node) {
        var shapeBBox = GeometryUtils.getBBox(node);
        config.dataPointWidth = shapeBBox.width;
        config.dataPointHeight = shapeBBox.height;
    };

    DataLabels.prototype._computeDataLabelPosition = function(ctm, shapeBBox, labelPosition,
        labelBBox, node) {
        var x, y;
        var nodeX = shapeBBox.x + ctm.e;
        var nodeY = shapeBBox.y + ctm.f;

        if (labelPosition === "up" || labelPosition === "down" ||
            labelPosition === "inside") {
            x = (nodeX + shapeBBox.width / 2) -
                (labelBBox.x + labelBBox.width / 2);
            if (labelPosition !== "inside") {
                y = nodeY - (labelBBox.y + labelBBox.height);
                if (labelPosition === "down") {
                    y += shapeBBox.height;
                }
            }
        }

        if (labelPosition === "left" || labelPosition === "right" ||
            labelPosition === "inside") {
            y = (nodeY + shapeBBox.height / 2) -
                (labelBBox.y + labelBBox.height / 2);
            if (labelPosition !== "inside") {
                x = nodeX - (labelBBox.x + labelBBox.width);
                if (labelPosition === "right") {
                    x += shapeBBox.width + labelBBox.width;
                }
            }
        }

        return [x, y];
    };

    DataLabels.prototype._computeDataLabelTranslate = function(node, ctm,
        labelPosition, labelBBox, config) {
        return this._computeDataLabelPosition(ctm, this._fixBBoxWhenInvisible(node),
            labelPosition, labelBBox,
            config, node);
    };

    /**
     * Fix the bug of method getBBox.
     * When container tag is invisible(eg.width is 0, but height is not 0.),
     * the return value of getBBox is not right(width&height=0).
     *
     */

    DataLabels.prototype._fixBBoxWhenInvisible = function(node) {
        var org = GeometryUtils.getBBox(node),
            shapeBBox = {
                "height": org.height,
                "width": org.width,
                "y": org.y,
                "x": org.x
            };

        //case if there exists clip path, the position of datalabel should be calculated by the bbox of clip path
        var clipPathTag = node.querySelector(".v-clippath");
        if (clipPathTag) {
            shapeBBox = GeometryUtils.getBBox(clipPathTag);
        }
        if (shapeBBox.height !== 0 || shapeBBox.width !== 0) {
            return shapeBBox;
        }

        var childNodes = node.childNodes;
        for (var index = 0, len = childNodes.length; index < len; index++) {
            var height = childNodes[index].getAttribute("height");
            var width = childNodes[index].getAttribute("width");
            if (height > shapeBBox.height) {
                shapeBBox.height = height;
            }

            if (width > shapeBBox.width) {
                shapeBBox.width = width;
            }
        }
        return shapeBBox;
    };

    DataLabels.prototype._getStyle = function(dataLabelProps) {
        var fill = this.runtime().effectManager().register({
            fillColor: dataLabelProps.style.color
        });
        return {
            "fill": fill,
            "font-family": dataLabelProps.style.fontFamily,
            "font-size": dataLabelProps.style.fontSize,
            "font-weight": dataLabelProps.style.fontWeight,
            "font-style": dataLabelProps.style.fontStyle,
            "cssString": "fill:" + fill +
                ";font-family:" + dataLabelProps.style.fontFamily +
                ";font-size:" + dataLabelProps.style.fontSize +
                ";font-weight:" + dataLabelProps.style.fontWeight +
                ";font-style:" + dataLabelProps.style.fontStyle + ";"
        };
    };

    DataLabels.prototype.respectShapeWidth = function(dataLabelInfos) {
        //Overwrite the function in sub-dataLabel classes
    };

    DataLabels.prototype.hideConditional = function(dataLabelInfos) {
        var len = dataLabelInfos.length;

        for (var k = 0; k < len; k++) {
            var info = dataLabelInfos[k];
            if (info.left < 0 || info.right > this._realSize.width || info.top < 0 || info.bottom >
                this._realSize.height) {
                info.skip = true;
            }
        }

        for (var i = 0; i < len; i++) {
            var src = dataLabelInfos[i];
            if (src.skip) {
                continue;
            }
            for (var j = i + 1; j < len; j++) {
                var dest = dataLabelInfos[j];
                if (!dest.skip) {
                    dest.skip = !((src.left >= dest.right) || (src.top >= dest.bottom) || (src
                            .right <= dest.left) ||
                        (src.bottom <= dest.top));
                }
            }
        }

        dataLabelInfos.forEach(function(info) {
            if (info.skip) {
                var node = info.node;
                node.parentNode.removeChild(node);
            }
        });
    };

    DataLabels.prototype.isDataLabelWidthOutOfDataPoint = function(dataLabelNode,
        dataPointNode) {
        var outOfDataPoint = true;
        var dataLabelBBox = dataLabelNode.getBoundingClientRect();
        var dataPointBBox = dataPointNode.getBoundingClientRect();

        if ((dataLabelBBox.left >= dataPointBBox.left) &&
            (dataLabelBBox.right <= dataPointBBox.right)
        ) {
            outOfDataPoint = false;
        }

        return outOfDataPoint;
    };

    DataLabels.prototype.isDataLabelOutOfDataPoint = function(dataLabelNode, dataPointNode) {
        var outOfDataPoint = true;
        var dataLabelBBox = dataLabelNode.getBoundingClientRect();
        var dataPointBBox = dataPointNode.getBoundingClientRect();

        if ((dataLabelBBox.left >= dataPointBBox.left) &&
            (dataLabelBBox.top >= dataPointBBox.top) &&
            (dataLabelBBox.right <= dataPointBBox.right) &&
            (dataLabelBBox.bottom <= dataPointBBox.bottom)
        ) {
            outOfDataPoint = false;
        }

        return outOfDataPoint;
    };

    DataLabels.prototype.indexOfDataLabelIntersectDataPoints = function(dataLabelBBox,
        dataPointBoxes, selfIndex) {
        var intersectIndex = -1;
        var i;
        for (i = 0; i < dataPointBoxes.length; i++) {
            var dataPointBox = dataPointBoxes[i];
            if (!(dataLabelBBox.left > dataPointBox.right ||
                dataLabelBBox.right < dataPointBox.left ||
                dataLabelBBox.top > dataPointBox.bottom ||
                dataLabelBBox.bottom < dataPointBox.top)) {
                //we may need to ignore self dataPoint
                if (selfIndex != null && i !== selfIndex) {
                    intersectIndex = i;
                    break;
                }
            }
        }
        return intersectIndex;
    };

    DataLabels.prototype.updateColor = function(dataLabelInfos, backgroundColor,
        dataLabelProps) {
        var iG;
        for (iG = 0; iG < dataLabelInfos.length; iG++) {
            var isOutOfDataPoint = false;
            //dataLabelColor may need to be calculated.
            //check if dataLabel "covers" dataPoint.
            isOutOfDataPoint = this.isDataLabelOutOfDataPoint(dataLabelInfos[iG].node,
                dataLabelInfos[iG].dataPoint);

            //backcolor is refercolor or backgroundColor
            var backColor = dataLabelInfos[iG].referColor;
            if (isOutOfDataPoint) {
                backColor = backgroundColor;
            }

            var dataLabelColor = dataLabelProps.style.color;
            if (!dataLabelColor) {
                dataLabelColor = ColorUtil.getDataLabelColor(backColor);
            }

            if (dataLabelInfos[iG].node) {
                var fill = this.runtime().effectManager().register({
                    fillColor: dataLabelColor
                });
                dataLabelInfos[iG].node.setAttribute("fill", fill);
            }
        }
    };

    DataLabels.prototype._getFormattedDataLabel = function(value, ctx, measureLabelInfo) {
        return value;
    };

    DataLabels.prototype.updatePosition = function(selection) {
        var parentNode = selection;
        var dataLabelsGroup = parentNode.select("." + DATA_LABELS_GROUP_CLASS);

        if (dataLabelsGroup.node()) {

            var dataShapesGroupNode = this._dataShapesGroupNode;
            var dataLabelProps = this._properties.get();
            var dataLabelStyle = this._getStyle(dataLabelProps);

            var dataLabelsNode = dataLabelsGroup.node().querySelectorAll(".v-datalabel");
            for (var i = 0, len = dataLabelsNode.length; i < len; i++) {
                var dataLabelGroup = dataLabelsNode[i];
                var dp = DataPointUtils.find(dataShapesGroupNode, DataGraphics.getData(dataLabelGroup).id);
                var dataLabelCtx = DataPointUtils.getContext(dp),
                    dataLabelInfo = this._getDataLabelInfo(dp),
                    dataLabelText = d3.select(dataLabelGroup).text();
                var config = {
                    val: dataLabelInfo.value,
                    text: dataLabelText,
                    ctx: dataLabelCtx,
                    styles: dataLabelStyle
                };

                if (this.getDataLabelDefaultPosition){
                    this.getDataLabelDefaultPosition(dp);
                }
                
                this._processDataLabelRendererConfig(config, dp);
                var labelBBox = GeometryUtils.getBBox(dataLabelGroup);
                
                var labelTranslate = this._computeDataLabelTranslate(dp,
                    dp.getTransformToElement(parentNode.node()), this._labelPosition,
                    labelBBox, config
                );
                var x = labelTranslate[0],
                    y = labelTranslate[1];
                dataLabelGroup.setAttribute("transform", "translate(" + x + "," + y + ")");

            }
        }
    };

    DataLabels.prototype.render = function(selection) {
        var parentNode = selection;
        var dataShapesGroupNode = this._dataShapesGroupNode;
        var size = this._size;
        var dataLabelProps = this._properties.get();


        var semanticMgr = this.runtime().semanticManager();
        var dataPoints, showDataLabel;

        if (semanticMgr.hasDataPointDataLabelStyle()) {
            dataPoints = Array.prototype.slice.call(DataPointUtils.findAll(dataShapesGroupNode))
                .filter(function(dp) {
                    return combinePropWithRule(DataPointUtils.getContext(dp),
                        dataLabelProps, semanticMgr).visible;
                });
            showDataLabel = dataLabelProps.visible || dataPoints.length > 0;
        } else {
            showDataLabel = dataLabelProps.visible;
            if (showDataLabel) {
                dataPoints = DataPointUtils.findAll(dataShapesGroupNode);
            }
        }


        if (showDataLabel) {
            var dataLabelsGroup = SVG.create(DATA_LABELS_GROUP_TAG, parentNode.node());
            dataLabelsGroup.setAttribute("class", DATA_LABELS_GROUP_CLASS);

            var labelRenderer = dataLabelProps.renderer || defaultRenderer;

            var hideWhenOverlap = dataLabelProps.hideWhenOverlap;
            var dataLabelStyle = this._getStyle(dataLabelProps);
            var defaultDataLabelStyle = this._getStyle(dataLabelProps);
            for (var j in defaultDataLabelStyle) {
                if (defaultDataLabelStyle.hasOwnProperty(j)) {
                    dataLabelsGroup.setAttribute(j, defaultDataLabelStyle[j]);
                }
            }

            var dataLabelInfos = [];
            var formatPattern;

            var backgroundColor = ColorUtil.getBackgroundColor(parentNode.node());

            for (var i = 0, len = dataPoints.length; i < len; i++) {
                var dp = dataPoints[i];
                if (TypeUtils.isExist(dataLabelProps.formatString)) {
                    formatPattern = dataLabelProps.formatString;
                }

                var dataLabelCtx = DataPointUtils.getContext(dp),
                    dataLabelInfo = this._getDataLabelInfo(dp),
                    dataLabelText = dataLabelInfo.value;
                if (dataLabelInfo.value !== null) {
                    if (formatPattern != null) {
                        if (formatPattern[0] && TypeUtils.isArray(formatPattern[0])) {
                            formatPattern = formatPattern[0][0];
                        } else if (!TypeUtils.isString(formatPattern)) {
                            formatPattern = formatPattern[dataLabelInfo.key];
                        }
                    }
                    dataLabelText = formatManager.format(dataLabelInfo.value, formatPattern);
                    // currently ONLY support Pie and Donut chart, add this function in other chart
                    //if also requires to support cumstomize data label display.
                    dataLabelText = this._getFormattedDataLabel(dataLabelText, dataLabelCtx,
                        dataLabelInfo);
                }

                var dataLabelGroup = SVG.create("g", dataLabelsGroup);
                DataPointUtils.setDataPointId(dataLabelGroup, DataPointUtils.getDataPointId(dp));
                DataGraphics.setContext(dataLabelGroup, dataLabelCtx);
                DataGraphics.setData(dataLabelGroup, {
                    "id": DataPointUtils.getDataId(dp)
                });
                dataLabelGroup.setAttribute("class", DATA_LABEL_CLASS);

                var config = {
                    val: dataLabelInfo.value,
                    text: dataLabelText,
                    ctx: dataLabelCtx,
                    styles: dataLabelStyle
                };

                this._processDataLabelRendererConfig(config, dp);

                var labelContentNode = labelRenderer(config);
                if (labelContentNode === undefined) {
                    labelContentNode = defaultRenderer(config);
                }

                if (labelContentNode) {
                    dataLabelGroup.appendChild(labelContentNode);
                    var labelBBox = GeometryUtils.getBBox(dataLabelGroup);

                    if (this.getDataLabelDefaultPosition){
                        this.getDataLabelDefaultPosition(dp);
                    }

                    var labelTranslate = this._computeDataLabelTranslate(dp,
                        dp.getTransformToElement(parentNode.node()), this._labelPosition,
                        labelBBox, config
                    );
                    if (!labelTranslate) {
                        dataLabelGroup.removeChild(labelContentNode);
                        continue;
                    }
                    var x = labelTranslate[0],
                        y = labelTranslate[1];
                    dataLabelGroup.setAttribute("transform", "translate(" + x + "," + y + ")");

                    var referColor;
                    var dataPointColor;
                    var dataPointColorOpacity = 1;
                    var eData = DataGraphics.getData(dp);
                    if (eData) {
                        dataPointColor = eData.color;
                        if (eData.fillOpacity !== undefined) {
                            dataPointColorOpacity = eData.fillOpacity;
                        }
                    }
                    referColor = ColorUtil.getMixedColor(dataPointColor, backgroundColor,
                        dataPointColorOpacity);

                    dataLabelInfos.push({
                        node: dataLabelGroup,
                        referColor: referColor,
                        dataPoint: dp,
                        left: x + labelBBox.x,
                        right: x + labelBBox.x + labelBBox.width,
                        top: y + labelBBox.y,
                        bottom: y + labelBBox.y + labelBBox.height
                    });
                }
            }

            if (hideWhenOverlap) {
                this.hideConditional(dataLabelInfos);
            }


            //change data label color according to referColor
            this.updateColor(dataLabelInfos, backgroundColor, dataLabelProps);
        }
    };

    DataLabels.prototype.destroy = function() {
        DataLabels.superclass.destroy.call(this);
        this._labelPosition = null;
        this._dataShapesGroupNode = null;
    };

    return DataLabels;
});

define('sap/viz/chart/components/renderers/ReferenceLineRenderer',['sap/viz/framework/common/util/SVG',
    'sap/viz/chart/components/util/TextUtils',
    'sap/viz/framework/common/util/Constants',
    "sap/viz/chart/components/util/StyleUtils",
    'sap/viz/framework/common/util/TypeUtils'
], function(SVG, TextUtils, Constants, StyleUtils, TypeUtils) {

    var PADDING = 4;
    var PADDING_VET = 3;
    var MIN_LABEL_WIDTH = 30;

    function combineConfig(currentSetting, defaultStyle) {

        var config = {};

        config.strokeColor = currentSetting.color ? currentSetting.color : defaultStyle.color;

        config.lineType = currentSetting.type ? currentSetting.type : defaultStyle.type;

        config.strokeWidth = currentSetting.size ? currentSetting.size : defaultStyle.size;

        if (config.strokeWidth < 1 || config.strokeWidth > 7) {
            config.strokeWidth = 1;
        }

        // label
        config.label = {};
        config.label.background = defaultStyle.label.background;

        if (currentSetting.label == null || currentSetting.label.visible === false || currentSetting.label.text ==
            null) {
            config.label.visible = false;
            return config;
        }

        var labelStyle = defaultStyle.label;
        config.label.visible = true;
        
        config.label.text = currentSetting.label.text;
        
        config.label.fontWeight = currentSetting.label.style && currentSetting.label.style.fontWeight ?
            currentSetting.label.style.fontWeight : labelStyle.fontWeight;
        config.label.fontFamily = currentSetting.label.style && currentSetting.label.style.fontFamily ?
            currentSetting.label.style.fontFamily : labelStyle.fontFamily;
        config.label.color = currentSetting.label.style && currentSetting.label.style.color ? 
            currentSetting.label.style.color : labelStyle.color;
        config.label.fontStyle = currentSetting.label.style && currentSetting.label.style.fontStyle ?
            currentSetting.label.style.fontStyle : labelStyle.fontStyle;
        config.label.fontSize = currentSetting.label.style && currentSetting.label.style.fontSize ? 
            currentSetting.label.style.fontSize : labelStyle.fontSize;

        if (!isNaN(config.label.fontSize)) {
            config.label.fontSize += 'px';
        }

        // label.textSize
        config.label.textSize = TextUtils.fastMeasure(config.label.text, config.label.fontSize,
            config.label.fontWeight,
            config.label.fontFamily);

        return config;
    }

    function drawReferenceLine(config, key, parent, pos, isHorizontal, width, height) {
        
        var currentLineGroup = SVG.create("g", parent);
        currentLineGroup.setAttribute("class", "v-referenceline-" + key);

        currentLineGroup.setAttribute("stroke", config.strokeColor);

        if (Constants.GRIDLINE_TYPE.DASHED === config.lineType) {
            currentLineGroup.setAttribute("stroke-dasharray", "3, 2");
        }

        currentLineGroup.setAttribute("stroke-width", config.strokeWidth);
        currentLineGroup.setAttribute("shape-rendering", "crispEdges");

        var currentLine = SVG.create("line", currentLineGroup);

        if (Constants.GRIDLINE_TYPE.INCISED === config.lineType) {
            currentLine.setAttribute("stroke", "#ffffff");
        }

        if (isHorizontal) {
            pos = (1 - pos) * height;
            currentLine.setAttribute("x1", 0);
            currentLine.setAttribute("y1", pos);
            currentLine.setAttribute("x2", width);
            currentLine.setAttribute("y2", pos);

        } else {
            pos *= width;
            currentLine.setAttribute("x1", pos);
            currentLine.setAttribute("y1", height);
            currentLine.setAttribute("x2", pos);
            currentLine.setAttribute("y2", 0);
        }
    }

    function drawLabel(config, key, parent, pos, isHorizontal, width, height) {
        
        var labelGroup = SVG.create("g", parent);
        labelGroup.setAttribute("class", "v-referenceline-label-group");

        var labelTextGroup = SVG.create("g", labelGroup);
        labelTextGroup.setAttribute("class", "v-referenceline-label-" + key);
        labelTextGroup.setAttribute("style", "pointer-events:none");
        labelTextGroup.setAttribute("fill", 
                config.label.color ? config.label.color : config.axisColor);
        labelTextGroup.setAttribute("font-size", config.label.fontSize);
        labelTextGroup.setAttribute("font-weight", config.label.fontWeight);
        labelTextGroup.setAttribute("font-family", config.label.fontFamily);
        labelTextGroup.setAttribute("font-style", config.label.fontStyle);
        
        var textSize = config.label.textSize;
        var rect = SVG.create("rect", labelTextGroup);
        rect.setAttribute("width", textSize.width + 2 * (isHorizontal ? PADDING : PADDING_VET));
        rect.setAttribute("height", textSize.height + PADDING);
        rect.setAttribute("fill", config.label.background);
        rect.setAttribute("opacity", 0.35);

        var text = SVG.create("text", labelTextGroup);
        text.textContent = config.label.text;

        var cssString = StyleUtils.convertToCss(config.label);    

        var ellipsisWidth;
        if (isHorizontal === false) {
            var widthPos = pos * width;
            text.setAttribute("y", PADDING / 2 - textSize.y + 1);
            rect.setAttribute("y", 1);
            if(widthPos + textSize.width + PADDING_VET * 2 + 1 <= width) {
                text.setAttribute("x", widthPos + PADDING_VET + 1);
                rect.setAttribute("x", widthPos + 1);
            }
            else if(widthPos - textSize.width - 1 >= PADDING_VET * 2) {
                text.setAttribute("x", widthPos - textSize.width - PADDING_VET - 1);
                rect.setAttribute("x", widthPos - textSize.width - PADDING_VET * 2 - 1);
            }
            else {
                ellipsisWidth = width - widthPos - PADDING_VET * 2 - 1;
                if(ellipsisWidth >= MIN_LABEL_WIDTH) {
                    text.setAttribute("x", widthPos + PADDING_VET + 1);
                    rect.setAttribute("x", widthPos + 1);
                }
                else {
                    ellipsisWidth = widthPos - PADDING_VET * 2 - 1;
                    if(ellipsisWidth >= MIN_LABEL_WIDTH) {
                        text.setAttribute("x", widthPos - ellipsisWidth - PADDING_VET - 1);
                        rect.setAttribute("x", widthPos - ellipsisWidth - PADDING_VET * 2 - 1); 
                    }
                    else {
                        ellipsisWidth = width - widthPos - PADDING_VET * 2 - 1;
                        text.setAttribute("x", widthPos + PADDING_VET + 1);
                        rect.setAttribute("x", widthPos + 1);
                    }
                }
                rect.setAttribute("width", ellipsisWidth + 2 * PADDING_VET);
                if(!TypeUtils.isNonEmptyString(TextUtils.ellipsis(config.label.text, text, ellipsisWidth, cssString))) {
                    labelTextGroup.removeChild(rect);
                }                
            }
        } else {
            var heightPos = (1 - pos) * height;
            text.setAttribute("x", PADDING);  
            rect.setAttribute("x", 0); 
            if(heightPos - textSize.height - PADDING - 1 >= 0) {
                text.setAttribute("y", heightPos - textSize.height - PADDING / 2 - textSize.y);
                rect.setAttribute("y", heightPos - textSize.height - PADDING);
            }
            else {
                text.setAttribute("y", heightPos + PADDING / 2 - textSize.y);
                rect.setAttribute("y", heightPos);
            }          
            
            if(textSize.width + PADDING * 2 > width) {
                ellipsisWidth = width - PADDING * 2;
                rect.setAttribute("width", width);
                if(!TypeUtils.isNonEmptyString(TextUtils.ellipsis(config.label.text, text, ellipsisWidth, cssString))) {
                    labelTextGroup.removeChild(rect);
                }
            }
        }

    }

    // utility
    function searchXYAxisHandler(xHandlers, yHandlers, key) {

        var axisHandler = searchAxisHandler(xHandlers, key);

        if (axisHandler) {
            return {
                handler: axisHandler,
                isHorizontal: false
            };
        }

        axisHandler = searchAxisHandler(yHandlers, key);

        if (axisHandler) {
            return {
                handler: axisHandler,
                isHorizontal: true
            };
        }
        return null;
    }

    function searchAxisHandler(handlers, key) {

        for (var i = 0; i < handlers.length; i++) {

            if (handlers[i].id === key && handlers[i].type === "value") {
                return handlers[i]._scale;
            }
        }
        return null;
    }

    return function(xHandlers, yHandlers, props, width, height, selection, isPercentage) {

        if (props.referenceLine == null) {
            return;
        }

        var referenceLine = props.referenceLine;
        var defaultStyle = referenceLine.defaultStyle;
        var lineStyles = referenceLine.line;

        var referenceLineGroup = SVG.create("g", selection);
        referenceLineGroup.setAttribute("class", "v-referenceline-group");

        for (var key in lineStyles) {
            if (lineStyles.hasOwnProperty(key)) {
                for(var i = 0; i < lineStyles[key].length; i++) {
                    var config = lineStyles[key][i];

                    if (config.visible === false) {
                        continue;
                    }

                    if (config.value == null || isNaN(config.value)) {
                        continue;
                    }

                    // obtain target axis
                    var axis = searchXYAxisHandler(xHandlers, yHandlers, key);

                    if (axis == null) {
                        continue;
                    }

                    // calculate reference line location
                    var pos = isPercentage ? config.value : axis.handler.scale(config.value);                  

                    if (pos < 0 || pos > 1) {
                        continue;
                    }

                    // combine with default style
                    config = combineConfig(config, defaultStyle);
                    config.axisColor = props[key + 'Color'];

                    // draw reference line
                    drawReferenceLine(config, key, referenceLineGroup, pos, axis.isHorizontal, width, height);

                    // draw label
                    if (config.label.visible) {
                        drawLabel(config, key, referenceLineGroup, pos, axis.isHorizontal, width, height);
                    }
                }                
            }
        }
    };


});
define('sap/viz/chart/components/plots/BasePlot',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/chart/components/UIComponent',
    'sap/viz/chart/components/plots/DataHandler',
    'sap/viz/chart/components/datalabels/DataLabels',
    'sap/viz/framework/common/util/Constants',
    "sap/viz/chart/components/util/DataPointUtils",
    "sap/viz/framework/common/util/NameColorUtils",
    "sap/viz/chart/components/Background",
    "sap/viz/framework/common/util/DataGraphics",
    "sap/viz/framework/common/util/DOM",
    'sap/viz/framework/common/util/SVG',
    'sap/viz/framework/common/util/RuleUtil',
    'sap/viz/chart/components/renderers/ReferenceLineRenderer'
], function Setup(oo, ObjectUtils, UIComponent, DataHandler, DataLabels,
    Constants, DataPointUtils, NameColorUtils, Background, DataGraphics, DOM, SVG, RuleUtil,
    referenceLineRenderer) {

    /**
     * To initialize plot object.
     *
     * @name BasePlot
     * @constructor
     */
    var BasePlot = function(runtime, options) {
        BasePlot.superclass.constructor.apply(this, arguments);
      
        this._options = options || {};

        this._needApplyChanges = false;
        //subclass will over this flag
        this._dataHandler = this._getDataHandler();
        this._dataPointRenderer = undefined; //please overwrite with default renderer in sub classes
        this._seriesRenderer = this._getSeriesRenderer();
        this._randomSuffix = ObjectUtils.guid();

        this._xHandlers = this._getXHandlers();
        this._yHandlers = this._getYHandlers();

        this._dataLabels = this._getDataLabels(this._name + '.dataLabel', runtime);

        var semanticMgr = this.runtime().semanticManager();
        semanticMgr.bindDataPointProperty(this._name + ".dataPointStyle");

        this._background = new Background(runtime, {
            name: 'background',
            properties: this._properties
        });
        this._selection = null;
        this._parent_trellis = null;
    };

    oo.extend(BasePlot, UIComponent);

    BasePlot.prototype._getXHandlers = function() {
        return [];
    };

    BasePlot.prototype._getYHandlers = function() {
        return [];
    };

    BasePlot.prototype._getDataHandler = function() {
        return {
            "valueAxis": DataHandler.getHandler()
        };
    };

    BasePlot.prototype._getSeriesRenderer = function() {};

    BasePlot.prototype._getDataLabels = function(name, runtime) {
        return new DataLabels(runtime, {
            name: name
        });
    };

    BasePlot.prototype.setData = function(data) {
        BasePlot.superclass.setData.apply(this, arguments);
        this._dataLabels.setData(data);
        this._needApplyChanges = true;
    };

    BasePlot.prototype.setSize = function(size) {
        BasePlot.superclass.setSize.apply(this, arguments);
        this._background.setSize(size);
        this._dataLabels.setSize(size);
        this._needApplyChanges = true;
    };
    
    BasePlot.prototype.destroy = function() {
        BasePlot.superclass.destroy.call(this);
        this._properties = null;

        this._options = null;

        this._needApplyChanges = null;
        if (this._dataHandler) {
            for (var key in this._dataHandler) {
                if (this._dataHandler.hasOwnProperty(key)) {
                    if (this._dataHandler[key]) {
                        this._dataHandler[key].destroy();
                    }
                    delete this._dataHandler[key];
                }
            }
        }
        
        this._dataHandler = null;
        this._dataPointRenderer = null;
        this._seriesRenderer = null;
        this._randomSuffix = null;

        if (this._xHandlers) {
            this._xHandlers.forEach(function(handler) {
                handler.destroy();
            });
        }
        this._xHandlers = null;
        
        if (this._yHandlers) {
            this._yHandlers.forEach(function(handler) {
                handler.destroy();
            });
        }
        this._yHandlers = null;

        if (this._dataLabels && this._dataLabels.destroy) {
            this._dataLabels.destroy();
        }
        this._dataLabels = null;
        this._background = null;
        
        if (this._selection) {
            this._selection.remove();
        }
        this._selection = null;
        if (this._parent_trellis) {
            this._parent_trellis.remove();
        }
        this._parent_trellis = null;
        
        this._customMarkerRenderer = null;
    };
    
    /**
     * To render element.
     */
    BasePlot.prototype.render = function(selection) {
        this._selection = selection;
        if (this._needApplyChanges) {
            this._applyChanges();
            this._needApplyChanges = false;
        }
        this._preRender();
        var selectionNode = selection.node();
        DOM.empty(selectionNode);
        this._background.render(selection);
        var parent = d3.select(this._createMainNode(selectionNode));
        this._drawGridlines(parent);
        this._drawDatapoints(parent);
    };

    BasePlot.prototype._preRender = function() {
        this._customMarkerRenderer = this._properties.get("markerRenderer");
    };

    BasePlot.prototype._postRender = function(dataPointG) {
        var referenceLine = this._properties.get('referenceLine');
        if(null == referenceLine) {
            return;
        }
        var props = {};
        props.referenceLine = referenceLine;
        var lines = referenceLine.line;
        for(var key in lines) {
            if(lines.hasOwnProperty(key)) {
                props[key+'Color'] = this._properties.origin.get(key + '.color');
            }
        }
        referenceLineRenderer(this._xHandlers, this._yHandlers, props, 
                this._size.width, this._size.height, this._selection.node(),
                this._data._seriesType === 'percentage');
    };

    BasePlot.prototype._drawDataLabels = function(parent, dataShapesGroupNode) {
        this._dataLabels.setDataShapesGroupNode(dataShapesGroupNode);
        this._dataLabels._realSize['width'] = this._realSize['width'];
        this._dataLabels._realSize['height'] = this._realSize['height'];
        this._parent_trellis = parent;
        var dataLabels = this._dataLabels;
        if (this._options.inTrellis === true) {
            //don't draw datalabel now, because parent is not append to dom yet currently.        
        } else {
            dataLabels.render(parent);
        }
    };

    BasePlot.prototype.drawTrellisDataLabels = function(){
        if(!this._parent_trellis){
            return;
        }
        var dataLabels = this._dataLabels;
        dataLabels.render(this._parent_trellis);
    };

    BasePlot.prototype._createMainNode = function(selection) {
        var width = this._size.width,
            height = this._size.height;

        var clipPathId;
        var enableClipPath = !this._options.disableClipPath;
        if(enableClipPath){
            var clipPath = SVG.create("clipPath", selection);
            clipPathId = "plot_main_clipPath_" + this._randomSuffix;
            clipPath.setAttribute("id", clipPathId);
            var rect = SVG.create("rect", clipPath);
            rect.setAttribute("y", -1);
            rect.setAttribute("width", width);
            rect.setAttribute("height", height + 1);
        }
        var plotEventLayer = SVG.create("rect", selection);
        plotEventLayer.setAttribute("class", "v-plot-bound v-bound");
        plotEventLayer.setAttribute("width", width);
        plotEventLayer.setAttribute("height", height);
        plotEventLayer.setAttribute("fill", "transparent");

         // Add a wrapper node to main node, so that scrolling can be done within it.
        var wrapper = SVG.create("g", selection);
        var mainNode = SVG.create("g", wrapper);
        mainNode.setAttribute("class", "v-plot-main");
        if(enableClipPath){
            wrapper.setAttribute("clip-path", "url(#" + clipPathId + ")");
        }
        return mainNode;
    };

    BasePlot.prototype._applyChanges = function() {
        var size = this._realSize;
        //for trellis chart, the trellisSeriesLength exists
        var seriesCount = this._data.trellisSeriesLength ? this._data.trellisSeriesLength : this._data.series.length;
        var handlers = this._xHandlers;
        var i, len, id, scale;
        for (i = 0, len = handlers.length; i < len; i++) {
            id = handlers[i].id;
            if (this._data[id] && this._data[id].scale) {
                scale = this._data[id].scale;
                handlers[i].init(scale, seriesCount, size.width);
            }
        }
        handlers = this._yHandlers;
        for (i = 0, len = handlers.length; i < len; i++) {
            id = handlers[i].id;
            if (this._data[id] && this._data[id].scale) {
                scale = this._data[id].scale;
                handlers[i].init(scale, seriesCount, size.height);
            }
        }
    };

    BasePlot.prototype._drawGridlines = function(parent) {};

    BasePlot.prototype._getSeries = function() {
        return this._data.series;
    };

    BasePlot.prototype._drawDatapoints = function(parent) {
        var series = this._getSeries();
        var seiresLength = series.length;
        var dataPointG = SVG.create("g");
        dataPointG.setAttribute("class", Constants.CSS.CLASS.DATAPOINT_GROUP);
        if (this._seriesRenderer) {
            this._seriesRenderer.init(seiresLength);
        }

        for (var dhID in this._dataHandler) {
            if (this._dataHandler[dhID].reset) {
                this._dataHandler[dhID].reset();
            }
        }
        var prevData, prevId, currentId;
        var countId = 0;
        for (var seriesIndex = 0; seriesIndex < seiresLength; seriesIndex++) {
            var seriesItem = series[seriesIndex];
            if (!seriesItem) {
                continue;
            }
            var dpRenderer = this._getDataPointRenderer(seriesIndex);
            if (!dpRenderer) {
                continue;
            }
            prevData = null;
            for (var itemIndex = 0; itemIndex < seriesItem.length; itemIndex++) {
                var data = seriesItem[itemIndex];
                if (!data) {
                    continue;
                }

                var position = this._getPosition(seriesIndex, itemIndex, data);
                if (!position) {
                    continue;
                }
                //FIXME: Use raw data id here instead of an inner id.
                currentId = countId++;
                var dpConfig = this._buildWrapperConfig(data, position, data.dp.context());
                var dpData = this._buildData(dpConfig, position, currentId, prevData, prevId);
                var dp = this._drawDataPoint(dpRenderer, dpConfig, dpData, position, currentId, data);
                prevData = dpData;
                prevId = currentId;
                if (dp) {
                    if (this._seriesRenderer) {
                        this._seriesRenderer.addDataPoint(seriesIndex, itemIndex, dpConfig,
                            position, dp);
                    } else {
                        dataPointG.appendChild(dp);
                    }
                }
            }
        }

        if (this._seriesRenderer) {
            this._seriesRenderer.render(dataPointG);
        }
        this._postRender(dataPointG);
        parent.node().appendChild(dataPointG);
        this._drawDataLabels(parent, dataPointG);
    };

    BasePlot.prototype._getAxisPosition = function(handlers, seriesIndex, itemIndex, data) {
        var dataHandler = this._dataHandler;
        for (var i = 0, length = handlers.length; i < length; i++) {
            var handler = handlers[i];
            if (data.hasOwnProperty(handler.id)) {
                return handler.scale(data[handler.id], {
                    index: itemIndex,
                    seriesIndex: seriesIndex,
                    dataHandler: dataHandler[handler.id]
                });
            }
        }
        //if value does not exist, use index. for categoryAxis
        return handlers[0].scale(null, {
            index: itemIndex,
            seriesIndex: seriesIndex,
            rawData: data
        });
    };

    BasePlot.prototype._getXPosition = function(seriesIndex, itemIndex, data) {
        return this._getAxisPosition(this._xHandlers, seriesIndex, itemIndex, data);
    };

    BasePlot.prototype._getYPosition = function(seriesIndex, itemIndex, data) {
        return this._getAxisPosition(this._yHandlers, seriesIndex, itemIndex, data);
    };

    BasePlot.prototype._getPosition = function(seriesIndex, itemIndex, data) {
        var xResult = this._getXPosition(seriesIndex, itemIndex, data);
        var yResult = this._getYPosition(seriesIndex, itemIndex, data);
        return {
            x: xResult[0],
            width: xResult[1],
            y: yResult[0],
            height: yResult[1]
        };
    };

    BasePlot.prototype._buildWrapperConfig = function(data, position, context) {

        var config = this._buildConfig(data, position, context);
        var semanticMgr = this.runtime().semanticManager();

        var result = semanticMgr.analyzeDataPoint(context);

        if (result == null) {
            if (config.graphic && config.graphic.fill) {
                config.graphic.fill = NameColorUtils.convertColor(config.graphic.fill);
            }
            if (config.graphic && config.graphic.color) {
                config.graphic.color = NameColorUtils.convertColor(config.graphic.color);
            }
            if (config.data && config.data.color) {
                config.data.color = NameColorUtils.convertColor(config.data.color);
            }
            return config;
        }

        if (result.color) {
            result.color = NameColorUtils.convertColor(result.color);
            if (config.graphic && config.graphic.fill) {
                config.graphic.fill = result.color;
            }
            if (config.graphic && config.graphic.color) {
                config.graphic.color = result.color;
            }
            if (config.data && config.data.color) {
                config.data.color = result.color;
            }
        }

        return config;
    };

    BasePlot.prototype._getColor = function(data) {
        var color = null;
        if (data.hasOwnProperty("color2") && this._data.color2) {
            color = this._data.color2.scale.scale(data.color2);
        } else if (this._data.color) {
            color = this._data.color.scale.scale(data.color);
        }
        return color;
    };

    BasePlot.prototype._buildConfig = function(data, position, context) {
        var color = this._getColor(data);
        var transparent = data.hasOwnProperty("transparent") ? data.transparent : 0;
        return {
            graphic: {
                width: position.width,
                height: position.height,
                drawingEffect: this._properties.get('drawingEffect'),
                fill: color,
                opacity: 1 - transparent
            },
            data: {
                color: color,
                width: position.width,
                height: position.height,
                translate: [position.x, position.y]
            },
            ctx: context,
            effectManager: this.runtime().effectManager()
        };
    };

    BasePlot.prototype._drawDataPoint = function(dpRenderer, dpConfig, dpData, position, currentId, data) {
        var sliceRenderer = this._properties.get('sliceRenderer');
        var node;
        if (sliceRenderer) {
            node = sliceRenderer(dpConfig, dpRenderer);
        } else {
            node = dpRenderer(dpConfig);
        }
        var dataPointG = SVG.create("g");
        DataPointUtils.setDataId(dataPointG, currentId);
        DataPointUtils.setDataPointId(dataPointG, data.dp.id);
        DataGraphics.setContext(dataPointG, dpConfig.ctx);
        DataGraphics.setData(dataPointG, dpData);
        dataPointG.setAttribute("class", Constants.CSS.CLASS.DATAPOINT + ' ' +
            Constants.CSS.CLASS.MORPHABLEDATAPOINT + ' ' + Constants.CSS.CLASS.DATAPOINTDEFAULT
        );
        if (position.hasOwnProperty("x") && position.hasOwnProperty("y")) {
            dataPointG.setAttribute("transform", 'translate(' + position.x + ', ' + position.y +
                ')');
        }

        if (!node && this._dataPointRenderer) {
            node = this._dataPointRenderer(dpConfig);
        }

        dataPointG.appendChild(node);

        return dataPointG;
    };

    BasePlot.prototype._buildData = function(dpConfig) {
        return {
            color: dpConfig.graphic.fill
        };
    };

    BasePlot.prototype._getDataPointRenderer = function(seriesIndex) {
        return this._customMarkerRenderer || this._dataPointRenderer;
    };

    return BasePlot;
});

define('sap/viz/chart/components/plots/ItemScaleHandler',['sap/viz/framework/common/util/oo',
    'sap/viz/framework/common/util/ObjectUtils'], function Setup(oo, ObjectUtils) {
    function getSpreadItemScale(seriesCount, options) {
        var result = [];
        var step = 1;
        var barWidth = 8 * step / (9 * seriesCount + 7);
        if (options && options.barWidth) {
            barWidth = options.barWidth;
        }
        var itemWidth = barWidth * 1.125;
        var gap = (step - itemWidth * seriesCount) / 2;
        for (var i = 0; i < seriesCount; i++) {
            result[i] = [gap + i * itemWidth, gap + i * itemWidth + barWidth];
        }
        return result;
    }

    var ItemScale = function(options) {
        this._result = [];
        this._options = options || {};
    };

    ItemScale.prototype.updateOptions = function(options) {
        ObjectUtils.extend(true, this._options, options);
    };

    ItemScale.prototype.init = function(seriesCount) {
        var result = this._result = [];
        var step = 1;
        var itemRange = [step * 0.25, step * 0.75];
        if (this._options && this._options.barWidth) {
            var halfBarWidth = this._options.barWidth / 2;
            itemRange = [step * (0.5 - halfBarWidth), step * (0.5 + halfBarWidth)];
        } 
        for (var i = 0; i < seriesCount; i++) {
            result[i] = itemRange;
        }
    };

    ItemScale.prototype.get = function(seriesIndex) {
        return this._result[seriesIndex];
    };

    ItemScale.prototype.updateOptions = function(options) {
        ObjectUtils.extend(true, this._options, options);
    };

    var SpreadItemScale = function(options) {
        SpreadItemScale.superclass.constructor.apply(this, arguments);
        this._options = options || {
            forBar: true
        };
    };

    oo.extend(SpreadItemScale, ItemScale);

    SpreadItemScale.prototype.init = function(seriesCount) {
        if (!this._options.forBar) {
            this._result = [];
            for (var i = 0; i < seriesCount; i++) {
                this._result[i] = [i / seriesCount, (i + 1) / seriesCount];
            }
        } else {
            this._result = getSpreadItemScale(seriesCount, this._options);
        }
    };

    SpreadItemScale.prototype.get = function(seriesIndex) {
        return this._result[seriesIndex];
    };

    var MultiItemsScale = function(items) {
        MultiItemsScale.superclass.constructor.apply(this, arguments);
        this._items = items;
    };

    oo.extend(MultiItemsScale, ItemScale);

    MultiItemsScale.prototype.init = function(seriesCount) {
        this._result = getSpreadItemScale(this._items.length, this._options);
    };

    MultiItemsScale.prototype.get = function(seriesIndex, rawData) {
        for (var i = 0; i < this._items.length; i++) {
            if (rawData && rawData.hasOwnProperty(this._items[i])) {
                return this._result[i];
            }
        }
    };


    return {
        /**
         * get Item scale for category
         * @param {Boolean} isSpread
         * @param {Boolean} options.forBar
         * @param {Array} options.valueAxis set value axis if isSpread is false. for dual stacked chart.
         */
        get: function(isSpread, options) {
            if (isSpread) {
                return new SpreadItemScale(options);
            } else if (options && options.valueAxis) {
                return new MultiItemsScale(options.valueAxis);
            } else {
                return new ItemScale();
            }
        },
    };
});
define('sap/viz/chart/components/plots/ScaleHandler',[
    'sap/viz/framework/common/util/oo'
], function Setup(oo) {
    /**
     * options : {
     *     isHorizontal : true|false,
     *     alignment : top|left|center|right,
     *     itemScaleHandler : func
     * }
     */
    var ScaleHandler = function(id, options) {
        this.id = id;
        this._options = options || {
            isHorizontal: true
        };
    };

    ScaleHandler.prototype.init = function(scale, seriesCount, range) {
        this._scale = scale;
        this._range = range;
    };

    ScaleHandler.prototype.scale = function(value, index) {
        return this._scale(value);
    };
    
    ScaleHandler.prototype.destroy = function() {
        this.id = null;
        this._options = null;
        
        this._range = null;
        this._scale = null;
        this.type = null;
    };

    var CategoryScaleHandler = function(id, options) {
        CategoryScaleHandler.superclass.constructor.apply(this, arguments);
        this.type = "category";
    };
    oo.extend(CategoryScaleHandler, ScaleHandler);

    CategoryScaleHandler.prototype.init = function(categoryScale, seriesCount) {
        CategoryScaleHandler.superclass.init.apply(this, arguments);
        if (!categoryScale) {
            this._scaleByIndex = null;
            return;
        }
        var domain = categoryScale.getDomain();
        var scale = categoryScale.scale.bind(categoryScale);
        this._scaleByIndex = [];
        for (var i = 0; i < domain.length; i++) {
            this._scaleByIndex[i] = scale(domain[i]);
        }
        this._options.itemScaleHandler.init(seriesCount);
    };

    CategoryScaleHandler.prototype.destroy = function() {
        CategoryScaleHandler.superclass.destroy.call(this);
        this._scaleByIndex = null;
    };
    
    CategoryScaleHandler.prototype.scale = function(value, options) {
        var index = options.index,
            seriesIndex = options.seriesIndex;
        var range = this._scaleByIndex ? this._scaleByIndex[index] : [0, 1];
        var itemRange = this._options.itemScaleHandler.get(seriesIndex, options.rawData) || [0, 1];
        var step = range[1] - range[0];
        var distance = step * (itemRange[1] - itemRange[0]) * this._range;
        var start = (range[0] + step * itemRange[0]) * this._range;
        if (this._options.alignment === "center") {
            return [start + distance / 2, 0];
        } else {
            return [start, distance];
        }
    };

    var ValueScaleHandler = function(id, options) {
        ValueScaleHandler.superclass.constructor.apply(this, arguments);
        this.type = "value";
    };
    oo.extend(ValueScaleHandler, ScaleHandler);

    ValueScaleHandler.prototype.scale = function(value, options) {
        var index = options.index,
            seriesIndex = options.seriesIndex,
            dataHandler = options.dataHandler;
        var start = this._scale.scale(dataHandler ? dataHandler.getBase(index, value) : 0);
        var newValue = dataHandler ? dataHandler.add(index, value) : value;
        var end = this._scale.scale(newValue);
        var distance = (end - start) * this._range;
        if (this._options.isHorizontal) {
            if (this._options.alignment === "right") {
                return [end * this._range, 0];
            } else {
                return [start * this._range, distance];
            }
        } else {
            return [(1 - end) * this._range, distance];
        }
    };

    return {
        getCategoryScaleHandler: function(id, options) {
            return new CategoryScaleHandler(id, options);
        },
        getValueScaleHandler: function(id, options) {
            return new ValueScaleHandler(id, options);
        }
    };
});
define('sap/viz/chart/components/renderers/BarRenderer',[ "sap/viz/framework/common/util/SVG" ], function(SVG) {
    var barRenderer = function(config) {
        var node = SVG.create("rect");
        var graphic = config.graphic;
        node.setAttribute("width", graphic.width < 1 && graphic.width !== 0 ? 1 : graphic.width);
        node.setAttribute("height", graphic.height < 1 && graphic.height !== 0 ? 1 : graphic.height);
        var fill = graphic.fill;
        if (config.effectManager) {

            fill = config.effectManager.register({
                drawingEffect : graphic.drawingEffect,
                fillColor : graphic.fill,
                direction : config.horizontal ? 'vertical' : 'horizontal'
            });
        }
        node.setAttribute("fill", fill);
        node.setAttribute('shape-rendering', 'crispEdges');
        return node;
    };

    barRenderer.update = function(node, config) {
        var graphic = config.graphic;
        var rect = node.querySelector("rect");
        rect.setAttribute("width", graphic.width < 1 && graphic.width !== 0 ? 1 : graphic.width);
        rect.setAttribute("height", graphic.height < 1 && graphic.height !== 0 ? 1 : graphic.height);
    };

    return barRenderer;
});
define('sap/viz/chart/components/renderers/GridlineRenderer',[
    "sap/viz/framework/common/util/NumberUtils",
    "sap/viz/framework/common/util/Constants",
    "sap/viz/framework/scale/ValueScaleUtil",
    "sap/viz/framework/common/util/SVG"
], function(NumberUtils, Constants, ValueScaleUtil, SVG) {

    var GRIDLINE_GROUP_CLASS_NAME = Constants.CSS.CLASS.GRIDLINE_GROUP;
    var GRIDLINE_CLASS_NAME = Constants.CSS.CLASS.GRIDLINE;
    var INCISED_GRIDLINE_CLASS_NAME = Constants.CSS.CLASS.GRIDLINE_INCISED;
    var INCISED_GRIDLINE_COLOR = "#ffffff";
    var CLASS_ZEROLINE = "v-zeroline";
    var MAIN_LINE = "v-gridline-mainline";
    var INCISED_LINE = "v-gridline-incisedline";

    var ret = {};

    ret.drawZeroLine = function(selection, width, height, scale, properties, direction) {
        //selection.select("." + CLASS_ZEROLINE).remove();
        var highlight = properties.get("gridline.zeroLine.highlight");
        if (!highlight) {
            return;
        }
        var ticks = ValueScaleUtil.getTicks(scale);
        var zeroIdx = ticks.indexOf(0);
        if (zeroIdx < 1) {
            return;
        }
        var color = properties.get("gridline.zeroLine.color");
        if (!color) {
            color = properties.origin.get("categoryAxis.color");
        }
        var x1, x2, y1, y2;
        var pos = NumberUtils.preciseSimple(scale.scale(0));
        if (direction === Constants.DIRECTION.HORIZONTAL) {
            x1 = 0;
            x2 = NumberUtils.preciseSimple(width);
            y1 = y2 = pos;
        } else {
            y1 = 0;
            y2 = NumberUtils.preciseSimple(height);
            x1 = x2 = pos;
        }
        var node = selection.select("." + CLASS_ZEROLINE);
        var line;
        if (!node.node()){
            node = selection.append("g").attr("class", CLASS_ZEROLINE).attr("style", "pointer-events:none");
            line = node.append("line");
        } else {
            line = node.select("line");
        }
        node.attr("stroke", color)
            .attr("stroke-width", 1)
            .attr("shape-rendering", "crispEdges");
  
        line.attr('x1', x1)
            .attr('x2', x2)
            .attr('y1', y1)
            .attr('y2', y2);
    };

    ret.drawValueGridline = function(selection, width, height, scale, props, direction) {
        var node = selection.select("." + GRIDLINE_GROUP_CLASS_NAME);
        if (props.visible) {
            var stroke = props.color;
            var strokeWidth = props.size;
            var ticks = getTicks(scale);
            var i = 0,
                length = ticks.length;
            var x1s = [],
                y1s = [],
                x2s = [],
                y2s = [];
            switch (direction) {
                case Constants.DIRECTION.HORIZONTAL:
                    for (; i < length; ++i) {
                        x1s[i] = 0;
                        y1s[i] = ticks[i];
                        x2s[i] = NumberUtils.preciseSimple(width);
                        y2s[i] = ticks[i];
                    }
                    break;
                case Constants.DIRECTION.VERTICAL:
                    for (; i < length; ++i) {
                        x1s[i] = ticks[i];
                        y1s[i] = 0;
                        x2s[i] = ticks[i];
                        y2s[i] = NumberUtils.preciseSimple(height);
                    }
                    break;
            }
            if (!node.node()) {
                node = selection.append("g").attr("class", GRIDLINE_GROUP_CLASS_NAME);
            }
            var gridlines = node.selectAll("." + GRIDLINE_CLASS_NAME).data(ValueScaleUtil.getTicks(
                scale));
            gridlines.enter().append("g");
            gridlines.exit().remove();

            gridlines.each(function(d, i) {
                this.setAttribute("class", GRIDLINE_CLASS_NAME);
                this.setAttribute("stroke", stroke);
                this.setAttribute("stroke-width", strokeWidth);
                this.setAttribute("shape-rendering", "crispEdges");
                var line = this.querySelector("line." + MAIN_LINE);
                if (!line) {
                    line = SVG.create("line");
                    line.setAttribute("class", MAIN_LINE);
                    this.appendChild(line);
                }
                line.setAttribute("x1", x1s[i]);
                line.setAttribute("y1", y1s[i]);
                line.setAttribute("x2", x2s[i]);
                line.setAttribute("y2", y2s[i]);

                // Unhighlight axis if necessary.
                if (i === 0 && d !== 0 && props.zeroLine) {
                    if (props.zeroLine.unhighlightAxis === false) {
                        line.setAttribute("stroke-opacity", 0);
                    }
                }
                // Highlight zero line if necessary.
                if (i !== 0 && d === 0 && props.zeroLine) {
                    if (props.zeroLine.highlight === true) {
                        if (typeof props.zeroLine.color === "string") {
                            line.setAttribute("stroke", props.zeroLine.color);
                        }
                    }
                }

            });
            if (props.type === Constants.GRIDLINE_TYPE.DASHED) {
                gridlines.each(function(d, i) {
                    this.setAttribute("stroke-dasharray", "3, 2");
                });
            }
            if (props.type === Constants.GRIDLINE_TYPE.INCISED) {
                switch (direction) {
                    case Constants.DIRECTION.HORIZONTAL:
                        gridlines.each(function(d, i) {
                            var line = this.querySelector("line." + INCISED_LINE);
                            if (!line) {
                                line = SVG.create("line");
                                line.setAttribute("class", INCISED_LINE);
                                this.appendChild(line);
                            }
                            line.setAttribute("stroke", INCISED_GRIDLINE_COLOR);
                            line.setAttribute("x1", x1s[i]);
                            line.setAttribute("y1", y1s[i] + 1);
                            line.setAttribute("x2", x2s[i]);
                            line.setAttribute("y2", y2s[i] + 1);
                        });
                        break;
                    case Constants.DIRECTION.VERTICAL:
                        gridlines.each(function(d, i) {
                            var line = this.querySelector("line." + INCISED_LINE);
                            if (!line) {
                                line = SVG.create("line");
                                line.setAttribute("class", INCISED_LINE);
                                this.appendChild(line);
                            }
                            line.setAttribute("stroke", INCISED_GRIDLINE_COLOR);
                            line.setAttribute("x1", x1s[i] - 1);
                            line.setAttribute("y1", y1s[i]);
                            line.setAttribute("x2", x2s[i] - 1);
                            line.setAttribute("y2", y2s[i]);
                        });
                        break;
                }
            }
        } else {
            node.remove();
        }
    };

    function getTicks(scale) {
        var ticks = ValueScaleUtil.getTicks(scale);
        return ValueScaleUtil.getTicksPosition(ticks, scale);
    }

    return ret;
});
define('sap/viz/chart/components/datalabels/ColumnDataLabels',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/framework/common/util/DataGraphics',
    'sap/viz/chart/components/datalabels/DataLabels'
], function(oo, DataGraphics, DataLabels) {
    var ColumnDataLabels = function(ctx, options) {
        ColumnDataLabels.superclass.constructor.apply(this, arguments);
        this._labelPosition = "up";
    };

    oo.extend(ColumnDataLabels, DataLabels);

    ColumnDataLabels.prototype.hideConditional = function(dataLabelInfos) {
        var i;
        var dataPointBoxes = new Array(dataLabelInfos.length);
        for (i = 0; i < dataLabelInfos.length; i++) {
            dataPointBoxes[i] = dataLabelInfos[i].dataPoint.getBoundingClientRect();
        }

        for (i = (dataLabelInfos.length - 1); i >= 0; i--) {
            var dataLabelinfo = dataLabelInfos[i];

            var dataLabelNode = dataLabelinfo.node;
            var dataLabelBBox = dataLabelNode.getBoundingClientRect();

            var iIndex = this.indexOfDataLabelIntersectDataPoints(dataLabelBBox, dataPointBoxes, i);

            if (iIndex !== -1) {
                if (dataLabelNode && dataLabelNode.parentNode) {
                    dataLabelNode.parentNode.removeChild(dataLabelNode);
                }
                dataLabelInfos.splice(i, 1);
            }
        }
        return ColumnDataLabels.superclass.hideConditional.apply(this, arguments);
    };
    
    ColumnDataLabels.prototype._computeDataLabelPosition = function(ctm, shapeBBox, labelPosition, labelBBox, 
                                                                config, node) {
        var position = ColumnDataLabels.superclass._computeDataLabelPosition.apply(this, arguments);
        if(labelPosition === "up"){
            var nodeY = shapeBBox.y + ctm.f;
            var y = nodeY - (labelBBox.y + labelBBox.height);
            if(y + labelBBox.y<0) {
                y = -labelBBox.y;
            }
           
            position[1] =y;
        }
        return position;
    };

    return ColumnDataLabels;
});
define('sap/viz/chart/components/datalabels/BarDataLabels',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/framework/common/util/DataGraphics',
    'sap/viz/chart/components/datalabels/DataLabels'
], function(oo, DataGraphics, DataLabels) {
    var BarDataLabels = function(ctx, options) {
        BarDataLabels.superclass.constructor.apply(this, arguments);
        this._labelPosition = "outside";
    };

    oo.extend(BarDataLabels, DataLabels);

    //it needs an offset because of the requirment of UX
    BarDataLabels.prototype.labelOffset = 2;

    BarDataLabels.prototype.isDataLabelOutOfDataPoint = function(dataLabelNode, dataPointNode) {
        var outOfDataPoint = true;
        var dataLabelBBox = dataLabelNode.getBoundingClientRect();
        var dataPointBBox = dataPointNode.getBoundingClientRect();

        if((dataLabelBBox.left >= dataPointBBox.left) && 
           (dataLabelBBox.top >= (dataPointBBox.top - (dataPointBBox.height)) ) && 
           (dataLabelBBox.right <= dataPointBBox.right) && 
           (dataLabelBBox.bottom <= ( dataPointBBox.bottom + (dataPointBBox.height)) )
          ) {
            outOfDataPoint = false;
        }

        return outOfDataPoint;
    };

    BarDataLabels.prototype.hideConditional = function(dataLabelInfos) {
        var i;
        for (i = (dataLabelInfos.length - 1); i >= 0; i--) {
            var dataPointNode = dataLabelInfos[i].dataPoint;
            var dataLabelNode = dataLabelInfos[i].node;
            var dataLabelLocation = DataGraphics.getData(dataPointNode).dataLabelLocation;

            if(dataLabelLocation === "inside") {
                var dataLabelBBox = dataLabelNode.getBoundingClientRect();
                var dataPointBBox = dataPointNode.getBoundingClientRect();

                if((dataLabelBBox.width + (2 * this.labelOffset)) > dataPointBBox.width) {
                    if(dataLabelNode && dataLabelNode.parentNode) {
                        dataLabelNode.parentNode.removeChild(dataLabelNode);
                    }
                    dataLabelInfos.splice(i, 1);
                }
            }
        }
        return BarDataLabels.superclass.hideConditional.apply(this, arguments);
    };

    BarDataLabels.prototype._computeDataLabelPosition = function(ctm, shapeBBox, labelPosition, labelBBox,
                                                            config, node) {
        var x, y;
        var nodeX = shapeBBox.x + ctm.e;
        var nodeY = shapeBBox.y + ctm.f;
        
        var exData = DataGraphics.getData(node);

        var labelOffset = this.labelOffset;

        // outside by default
        y = (nodeY + shapeBBox.height / 2) -
            (labelBBox.y + labelBBox.height / 2);
        if (config.val >= 0) {
            x = nodeX + shapeBBox.width + labelOffset;
            if (x + labelBBox.width > this._size.width) {
                x = nodeX + shapeBBox.width - labelBBox.width - labelOffset;
                if (x > this._size.width) {
                    x = this._size.width - labelBBox.width - labelOffset;
                }
                if (labelBBox.width > shapeBBox.width) {
                    x = nodeX; //from the start of dataPoint
                }
                exData.dataLabelLocation = "inside";
                DataGraphics.setData(node, exData);
            }
        } else {
            x = nodeX - (labelBBox.x + labelBBox.width) - labelOffset;
            if (x < 0) {
                x = nodeX + labelOffset;
                exData.dataLabelLocation = "inside";
                DataGraphics.setData(node, exData);
            }
        }

        return [x, y];
    };
    
    BarDataLabels.prototype._processDataLabelRendererConfig = function(config, node) {
        BarDataLabels.superclass._processDataLabelRendererConfig.apply(this, arguments);
        config.horizontal = true;
    };

    return BarDataLabels;
});
define('sap/viz/chart/components/plots/BaseColumnPlot',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/framework/scale/ValueScale',
    'sap/viz/framework/common/util/Constants',
    'sap/viz/chart/components/plots/BasePlot',
    'sap/viz/chart/components/plots/DataHandler',
    'sap/viz/chart/components/plots/ItemScaleHandler',
    'sap/viz/chart/components/plots/ScaleHandler',
    'sap/viz/chart/components/renderers/BarRenderer',
    'sap/viz/chart/components/renderers/GridlineRenderer',
    'sap/viz/chart/components/datalabels/ColumnDataLabels',
    'sap/viz/chart/components/datalabels/BarDataLabels',
    "sap/viz/chart/components/util/DataPointUtils",
    'sap/viz/framework/common/util/UADetector',
    'sap/viz/framework/common/util/TypeUtils'
], function Setup(oo, ValueScale, Constants, BasePlot, DataHandler,
    ItemScaleHandler, ScaleHandler, BarRenderer, GridlineRenderer, ColumnDataLabels,
    BarDataLabels, DataPointUtils, UADetector, TypeUtils
) {
    var trellisColumnSize = {
        desktop : {
            minWidth : 8,
            maxWidth : 100
        },
        mobile : {
            minWidth : 8,
            maxWidth : 100
        }
    };

    /**
     * To initialize BaseColumnPlot object.
     *
     * @name BaseColumnPlot
     * @constructor
     */
    var BaseColumnPlot = function(runtime, options) {
        options = options || {
            isHorizontal: false
        };
        BaseColumnPlot.superclass.constructor.apply(this, arguments);
        this._dataPointRenderer = BarRenderer;
        this._flipNegativeShape = true; //if need to flip shapes of negative value
        this._drawZeroLineBeforeDatapoints = true;
    };

    oo.extend(BaseColumnPlot, BasePlot);

    BaseColumnPlot.prototype.destroy = function() {
        BaseColumnPlot.superclass.destroy.call(this);
        if (this._categoryScaleHandler) {
            this._categoryScaleHandler.destroy();
        }
        this._categoryScaleHandler = null;
        
        if (this._gridlineScale) {
            this._gridlineScale.destroy();
        }
        this._gridlineScale = null;
        this._dataPointRenderer = null;
        this._flipNegativeShape = null;
        this._drawZeroLineBeforeDatapoints = null;
        this._options = null;
    };
    
    BaseColumnPlot.prototype._drawDataPoint = function(dpRenderer, dpConfig, dpData, position,
        currentId) {
        var dp = BaseColumnPlot.superclass._drawDataPoint.apply(this, arguments);
        if (!this._flipNegativeShape) {
            return dp;
        }
        var negative = dpConfig.ctx[dpConfig.ctx.measureNames] < 0;
        if (negative) { //flip
            var children = dp.childNodes;
            var g = document.createElementNS('http://www.w3.org/2000/svg', "g");
            var transform;
            Array.prototype.forEach.call(children, function(c) {
                g.appendChild(c);
            });
            /*
             * To fix bug BITSDC1-4723, we need to set the bar width/height to be 1
             * if less then 1px
             */
            if (this.isHorizontal()) {
                transform = "translate(" + 
                    (dpConfig.graphic.width > 1 ? dpConfig.graphic.width : 1) + ",0)scale(-1, 1)";
            } else {
                transform = "translate(0," + 
                (dpConfig.graphic.height > 1 ? dpConfig.graphic.height : 1) + ")scale(1, -1)";
            }
            g.setAttribute("transform", transform);
            dp.appendChild(g);
        }

        return dp;
    };

    BaseColumnPlot.prototype.isHorizontal = function() {
        return (this._options.isHorizontal === true);
    };

    BaseColumnPlot.prototype._getValueScaleHandlers = function(isHorizontal) {
        if (this._options.isDualValueAxis) {
            return [ScaleHandler.getValueScaleHandler("valueAxis", {
                isHorizontal: isHorizontal
            }), ScaleHandler.getValueScaleHandler("valueAxis2", {
                isHorizontal: isHorizontal
            })];
        } else {
            return [ScaleHandler.getValueScaleHandler("valueAxis", {
                isHorizontal: isHorizontal
            })];
        }
    };

    BaseColumnPlot.prototype._getCategoryScaleHandlers = function(isHorizontal) {
        this._categoryScaleHandler = ScaleHandler.getCategoryScaleHandler("categoryAxis", {
            isHorizontal: isHorizontal,
            itemScaleHandler: ItemScaleHandler.get(true)
        });
        return [this._categoryScaleHandler];
    };

    BaseColumnPlot.prototype._getXHandlers = function() {
        if (this.isHorizontal()) {
            return this._getValueScaleHandlers(true);
        } else {
            return this._getCategoryScaleHandlers(true);
        }
    };

    BaseColumnPlot.prototype._getYHandlers = function() {
        if (this.isHorizontal()) {
            return this._getCategoryScaleHandlers(false);
        } else {
            return this._getValueScaleHandlers(false);
        }
    };

    BaseColumnPlot.prototype._getDataHandler = function() {
        if (this._options.isDualValueAxis) {
            return {
                "valueAxis": DataHandler.getHandler(),
                "valueAxis2": DataHandler.getHandler()
            };
        } else {
            return {
                "valueAxis": DataHandler.getHandler()
            };
        }
    };

    BaseColumnPlot.prototype.render = function(selection) {
        BaseColumnPlot.superclass.render.apply(this, arguments);
        if (!this._drawZeroLineBeforeDatapoints && this._gridlineScale) {
            var isHorizontal = this.isHorizontal();
            var direction = isHorizontal ? Constants.DIRECTION.VERTICAL : Constants.DIRECTION.HORIZONTAL;
            GridlineRenderer.drawZeroLine(selection, this._size.width, this._size.height, this
                ._gridlineScale,
                this._properties, direction);
        }
    };

    BaseColumnPlot.prototype.zoom = function(scale) {
        this._realSize.width = this._size.width * scale;
        this._realSize.height = this._size.height * scale;
        this._applyChanges();
        var selection = this._selection.select(".v-plot-main");
        this._drawGridlines(selection);
        this._updateDatapoints(selection);
    };

    BaseColumnPlot.prototype._updateDatapoints = function(parent) {
        var series = this._getSeries();
        var seiresLength = series.length;
        var dataPointG = parent.select("." + Constants.CSS.CLASS.DATAPOINT_GROUP).node();

        for (var dhID in this._dataHandler) {
            if (this._dataHandler[dhID].reset) {
                this._dataHandler[dhID].reset();
            }
        }
        var currentId;
        var countId = 0;
        for (var seriesIndex = 0; seriesIndex < seiresLength; seriesIndex++) {
            var seriesItem = series[seriesIndex];
            if (!seriesItem) {
                continue;
            }
            var dpRenderer = this._getDataPointRenderer(seriesIndex);
            if (!dpRenderer) {
                continue;
            }
            for (var itemIndex = 0; itemIndex < seriesItem.length; itemIndex++) {
                var data = seriesItem[itemIndex];
                if (!data) {
                    continue;
                }
                var position = this._getPosition(seriesIndex, itemIndex, data);
                if (!position) {
                    continue;
                }
                //FIXME: Use raw data id here instead of an inner id.
                currentId = countId++;
                var currentDp = DataPointUtils.find(dataPointG, currentId);
                var context = DataPointUtils.getContext(currentDp);
                var dpConfig = this._buildWrapperConfig(data, position, context);
                this._updateDatapoint(currentDp, dpRenderer, dpConfig, position);
                if (this._seriesRenderer) {
                    this._seriesRenderer.updateDataPoint(seriesIndex, itemIndex, dpConfig,
                        position);
                }
            }
        }

        if (this._seriesRenderer) {
            this._seriesRenderer.update(dataPointG);
        }

        this._dataLabels.updatePosition(parent);
    };

    BaseColumnPlot.prototype._updateDatapoint = function(dataPointG, dpRenderer, dpConfig,
        position) {
        if (dpRenderer.update && TypeUtils.isFunction(dpRenderer.update)) {
            dpRenderer.update(dataPointG, dpConfig);
        }

        if (position.hasOwnProperty("x") && position.hasOwnProperty("y")) {
            dataPointG.setAttribute("transform", 'translate(' + position.x + ', ' + position.y +
                ')');
        }
    };

    BaseColumnPlot.prototype._drawGridlines = function(parent) {
        var size = this._realSize;
        var isHorizontal = this.isHorizontal();
        var direction = isHorizontal ? Constants.DIRECTION.VERTICAL : Constants.DIRECTION.HORIZONTAL;
        var props = this._properties.get('gridline');
        var range = isHorizontal ? [0, size.width] : [size.height, 0];
        var scale = this._gridlineScale = this._getGridLineScale(range);
        
        GridlineRenderer.drawValueGridline(parent, size.width, size.height, scale, props,
            direction);
        if (this._drawZeroLineBeforeDatapoints) {
            GridlineRenderer.drawZeroLine(parent, size.width, size.height, this._gridlineScale,
                this._properties, direction);
        }
    };

    BaseColumnPlot.prototype._getGridLineScale = function(range) {
        
        var axisKey = "valueAxis";

        if (this._options.isDualValueAxis &&
            this._data.valueAxis.tickHint < this._data.valueAxis2.tickHint) {
            axisKey = "valueAxis2";
        }
        var valueAxis = this._data[axisKey];
        var scale = new ValueScale(valueAxis.scale.getDomain(), range);
        scale.setTickHint(valueAxis.tickHint);
        
        return scale;
    };

    BaseColumnPlot.prototype._getPosition = function(seriesIndex, itemIndex, data) {
        var position = BaseColumnPlot.superclass._getPosition.apply(this, arguments);
        this._adjustPosition(position);
        return position;
    };
    BaseColumnPlot.prototype._adjustPosition = function(position) {
        if (this.isHorizontal() && position.width < 0) {
            position.width = position.width > -1 ? 1 : Math.abs(position.width);
            /*
             * To fix bug BITSDC1-4723, we need to let the bar offset 0.5px 
             * to avoid overlapped by zeroline when the width is 1
             */
            position.x -= position.width + 0.5;
        }
        if (!this.isHorizontal() && position.height < 0) {
            position.height = position.height > -1 ? 1 : Math.abs(position.height);
            /*
             * To fix bug BITSDC1-4723, we need to let the bar offset 0.5px 
             * to avoid overlapped by zeroline when the height is 1
             */
            position.y -= position.height + 0.5;
        }
    };

    BaseColumnPlot.prototype._buildConfig = function(data, position, context) {
        var config = BaseColumnPlot.superclass._buildConfig.apply(this, arguments);
        config.horizontal = this.isHorizontal();

        return config;
    };

    BaseColumnPlot.prototype._getDataLabels = function(name, runtime) {
        if (this.isHorizontal()) {
            return new BarDataLabels(runtime, {
                name: name
            });
        } else {
            return new ColumnDataLabels(runtime, {
                name: name
            });
        }
    };

    BaseColumnPlot.prototype._processDataLabelRendererConfig = function(config, node) {
        BaseColumnPlot.superclass._processDataLabelRendererConfig.apply(this, arguments);
        config.horizontal = this.isHorizontal();
    };

    BaseColumnPlot.prototype._getColumnCount = function() {
        return this._data.series.length;
    };

    BaseColumnPlot.prototype._getColumnWidth = function(columnCount, categoryCount,
        isHorizontal) {
        var step = 1;
        var categoryWidth = isHorizontal ?
            (this._size.height / categoryCount) :
            (this._size.width / categoryCount);
        return (categoryWidth * 8 * step / (9 * columnCount + 7));
    };

    BaseColumnPlot.prototype._updateRealSize = function(columnCount, categoryCount,
        columnWidth, isHorizontal) {
        var step = 1;
        this._realSize[isHorizontal ? 'height' : 'width'] =
            columnWidth * (9 * columnCount + 7) / (8 * step) * categoryCount;
    };

    BaseColumnPlot.prototype._getCategoryCount = function() {
        var cateAxis = this._data.categoryAxis;
        return cateAxis ? cateAxis.scale.getDomain().length : 0;
    };

    BaseColumnPlot.prototype.getPreferredSize = function() {
        var props = this._properties;
        var inTrellis = !!this._options.inTrellis;
        if (inTrellis || props.get('isFixedDataPointSize')) {
            var isHorizontal = this.isHorizontal();
            var categoryCount = this._getCategoryCount();
            var columnCount = this._getColumnCount();
            var columnWidth = this._getColumnWidth(columnCount, categoryCount, isHorizontal);
            var trellisSize = UADetector.isMobile() ? trellisColumnSize.mobile : trellisColumnSize.desktop;
            var minWidth = inTrellis ? trellisSize.minWidth : props.get("dataPointSize.min");
            var maxWidth = inTrellis ? trellisSize.maxWidth : props.get("dataPointSize.max");

            var minWidthChanged = false;
            var maxWidthChanged = false;
            if (columnWidth < minWidth) {
                minWidthChanged = true;
                columnWidth = minWidth;
            } else if (columnWidth > maxWidth) {
                maxWidthChanged = true;
                var categoryWidth = isHorizontal? this._size.height/categoryCount : this._size.width/categoryCount;
                var barWidth = maxWidth / categoryWidth;
                this._categoryScaleHandler._options.itemScaleHandler.updateOptions({
                    'barWidth' : barWidth
                });
            }

            if (minWidthChanged) {
                this._updateRealSize(columnCount, categoryCount, columnWidth, isHorizontal);               
            }

        }
        return this._realSize;
    };

    return BaseColumnPlot;
});

define('sap/viz/chart/components/renderers/SeriesRenderer',[
    'sap/viz/framework/common/util/SVG',
    'sap/viz/framework/common/util/TypeUtils'
], function Setup(SVG, TypeUtils) {

    var SeriesRenderer = function(itemRenderer, itemUpdater) {
        this._renderer = itemRenderer;
        this._updater = itemUpdater;
    };

    SeriesRenderer.prototype.init = function(seiresCount) {
        this._series = [];
        this._seriesGroup = [];
        for (var i = 0; i < seiresCount; i++) {
            this._seriesGroup[i] = SVG.create("g");
        }
    };

    SeriesRenderer.prototype.addDataPoint = function(seriesIndex, categoryIndex, dpConfig, position, dataPoint) {
        this._seriesGroup[seriesIndex].appendChild(dataPoint);
        this._series[seriesIndex] = this._series[seriesIndex] || [];
        this._series[seriesIndex][categoryIndex] = {
            position: position,
            dpConfig: dpConfig,
            dataPoint: dataPoint
        };

    };

    SeriesRenderer.prototype.updateDataPoint = function (seriesIndex, categoryIndex, dpConfig, position){
        if(this._series[seriesIndex]){
            this._series[seriesIndex][categoryIndex].position = position;
            this._series[seriesIndex][categoryIndex].dpConfig = dpConfig;
        }
    };

    SeriesRenderer.prototype.render = function(parent) {
        var seriesOrder = [];
        for (var i = 0; i < this._seriesGroup.length; i++) {
            if(this._series[i]){
                var order = this._renderSeries(this._seriesGroup[i], this._series[i], i);
                if( TypeUtils.isNaN(order)){
                    order = 0;
                }
                seriesOrder[order] = seriesOrder[order] || [];
                seriesOrder[order].push(this._seriesGroup[i]);
            }
        }
        for(var n=0; n<seriesOrder.length; n++){
            var group = seriesOrder[n];
            if(!group || !group.length){
                continue;
            }
            for(var m=0; m<group.length; m++){
                parent.appendChild(group[m]);
            }
        }
    };

    SeriesRenderer.prototype.update = function(parent){
        for (var i = 0; i < this._seriesGroup.length; i++) {
            if(this._series[i]){
                this._updateSeries(this._seriesGroup[i], this._series[i], i);
            }
        }
    };

    SeriesRenderer.prototype._updateSeries = function (seriesG, data, seriesIndex){
        if (this._updater){
            this._updater(seriesG, data, seriesIndex);
        }
    };

    SeriesRenderer.prototype._renderSeries = function(seriesG, data, seriesIndex) {
        if (this._renderer) {
            return this._renderer(seriesG, data, seriesIndex);
        }
        return 0;
    };

    return SeriesRenderer;
});
define('sap/viz/chart/components/renderers/PathRenderer',["sap/viz/framework/common/util/SVG"], function(SVG) {
    return function(config) {
        var node = SVG.create("path");
        var graphic = config.graphic;
        if(graphic.d){
            node.setAttribute("d", graphic.d);
        }
        var fill = config.effectManager.register({
            drawingEffect: graphic.drawingEffect,
            fillColor: graphic.fill
        });
        node.setAttribute("fill", fill);
        var opacity = (graphic.opacity >= 0 && graphic.opacity <= 1) ? graphic.opacity : 1;
        // node.setAttribute("fill-opacity", opacity);
        node.setAttribute("stroke-opacity", opacity);

        return node;
    };
});

define('sap/viz/chart/components/util/SeriesUtil',[
    'sap/viz/chart/components/util/DataPointUtils',
    'sap/viz/chart/components/renderers/LineRenderer',
    'sap/viz/framework/common/util/DataGraphics',
    'sap/viz/framework/common/util/SVG',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/NameColorUtils'
], function(DataPointUtils, LineRenderer, DataGraphics, SVG, TypeUtils, NameColorUtils) {

    function validLineWidth(value) {
        value = parseInt(value, 10);
        return (value >= 0 && value <= 7) ? value : 2;
    }

    var defaultLineRender = LineRenderer;

    return {
        drawLine: function(seriesG, data, props, semanticMgr, effectMgr, context,
            currentLineRenderer, isCombinationLine) {
            var d = null;
            var lastColor = null;
            var lineWidth = null;
            var points = [];

            for (var n = 0; n < data.length; n++) {
                if (!data[n] || !data[n].position) {
                    points.push('');
                    continue;
                }

                var currentPoint = [
                    data[n].position.x + data[n].position.width / 2, 
                    data[n].position.y
                ];
                points.push(currentPoint);

                // TODO if want to set width individually, please cancel this comment
                //var semanticProps = semanticMgr.analyzeLineStyle(data[n].dpConfig.ctx);
                var semanticProps = semanticMgr.analyzeLineStyle(context);

                var currentColor = null;
                var currentLineWidth = null;

                if (semanticMgr.hasDataPointColorStyle()) {
                    currentColor = NameColorUtils.convertColor(
                        semanticMgr.getOthersStyle().properties.color);
                } else {
                    currentColor = data[n].dpConfig.graphic.fill;
                }

                currentColor = effectMgr.register({
                    fillColor: currentColor
                });

                if (semanticProps && semanticProps.width != null) {
                    currentLineWidth = semanticProps.width;
                } else if (props.line && props.line.width != null) {
                    currentLineWidth = props.line.width;
                } else {
                    currentLineWidth = props.width;
                }

                currentLineWidth = validLineWidth(currentLineWidth);

                if (lastColor !== currentColor ||
                    lineWidth !== currentLineWidth ||
                    n === data.length - 1) {

                    if (n !== 0) {

                        var config = {
                            graphic: {
                                color: lastColor,
                                width: lineWidth
                            },
                            points: points,
                            ctx: context
                        };

                        var lineRenderer = currentLineRenderer || defaultLineRender;

                        var lineTag = lineRenderer(config) || defaultLineRender(config);

                        lineTag.setAttribute("class", "v-lines v-morphable-line");
                        
                        if(isCombinationLine === true){
                            lineTag.setAttribute("combination-line", "true");
                        }

                        DataGraphics.setData(lineTag, {
                            color: config.graphic.color,
                            width: config.graphic.width
                        });
                        DataGraphics.setContext(lineTag, context);
                        seriesG.insertBefore(lineTag, seriesG.firstChild);

                        points = [currentPoint];
                    }

                    lastColor = currentColor;
                    lineWidth = currentLineWidth;
                }
            }
        },
        updateLine: function(seriesG, data, currentLineRenderer) {
            var d = null;
            var points = [];

            for (var n = 0; n < data.length; n++) {
                if (!data[n] || !data[n].position) {
                    points.push('');
                    continue;
                }

                var currentPoint = [
                    data[n].position.x + data[n].position.width / 2,
                    data[n].position.y
                ];
                points.push(currentPoint);
            }

            var config = {
                points: points
            };

            var lineRenderer = currentLineRenderer || defaultLineRender;

            var lineTag = seriesG.querySelector(".v-lines");
            if (lineRenderer.update && TypeUtils.isFunction(lineRenderer.update)){
                lineRenderer.update(lineTag, config);
            }
        },
        linkLine: function(data) {
            
            var prevData = null;
            for (var i = 0; i < data.length; i++) {
                var curr = data[i];
                if (!curr) {
                    continue;
                }
                var ptData = DataGraphics.getData(curr.dataPoint);
                ptData.type = 'line';
                ptData.translate = curr.dpConfig.data.translate;
                if (prevData) {

                    ptData.prev = DataPointUtils.getDataId(prevData.dataPoint);
                    DataGraphics.getData(prevData.dataPoint).next = DataPointUtils.getDataId(
                        curr.dataPoint);
                }
                
                prevData = curr;
            }
        },

        getFirstItem: function(series) {
            if (!series || !series.length) {
                return null;
            }
            for (var i = 0; i < series.length; i++) {
                if (series[i]) {
                    return series[i];
                }
            }
            return null;
        }
    };

});
define('sap/viz/chart/components/datalabels/LineDataLabels',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/chart/components/datalabels/DataLabels',
    'sap/viz/chart/components/util/DataPointUtils',
    'sap/viz/framework/common/util/DataGraphics'
], function(oo, DataLabels, DataPointUtils, DataGraphics) {
    var HARD_OFFSET = 3;
    // Get the previouse and next dataPoint nodes on the same line as a given node
    function getNeighbours(node) {
        var parent = node.parentNode,
            data = DataGraphics.getData(node);

        return {
            prev: data.prev ? DataPointUtils.find(parent, data.prev) : undefined,
            next: data.next ? DataPointUtils.find(parent, data.next) : undefined
        };
    }

    // Get the x, y corrdinates from an SVG node using its "transform" attribute
    function getCorrdinates(node) {
        if (node && node.hasAttribute('transform')) {
            var pos = node.getAttribute('transform').replace(/translate|\(|\)/g, '').split(/[,| ]+/);
            return {
                x: parseFloat(pos[0]),
                y: parseFloat(pos[1])
            };
        } else {
            return null;
        }
    }

    // Determine data label position based on its neighbour DataPoints
    function posByNeighbours(node) {
        var self = this._getDataLabelInfo(node).value,
            neighbours = getNeighbours.call(this, node),
            prev = neighbours.prev ? this._getDataLabelInfo(neighbours.prev).value : undefined,
            next = neighbours.next ? this._getDataLabelInfo(neighbours.next).value : undefined;

        if (isNaN(prev) && isNaN(next)) {
            return 'up'; // lone point
        } else if (isNaN(prev)) {
            prev = next;
        } else if (isNaN(next)) {
            next = prev;
        }

        if (prev > self && self < next) { // Valley
            return 'down';
        } else if (prev <= self && self >= next) { // Peak
            return 'up';
        } else {
            return 'adjust';
        }
    }

    // adjust data label position to the left/right to avoid overlaping with the line segments
    // on the left/right of the dataPoint
    function adjust(pos, labelBBox, node) {
        var neighbours = getNeighbours(node),
            self = getCorrdinates(node),
            prev = getCorrdinates(neighbours.prev),
            next = getCorrdinates(neighbours.next),
            uphill = (prev.y >= self.y && self.y >= next.y),
            upper = uphill ? next : prev,
            basex = pos[0] + (uphill ? labelBBox.width : 0),
            refy = pos[1],
            refx, slope, offset;

        slope = (self.x - upper.x) / (self.y - upper.y);
        offset = self.x - slope * self.y;

        refx = slope * refy + offset;

        if (uphill && basex >= (refx - HARD_OFFSET)) {
            pos[0] -= (basex - refx + HARD_OFFSET);
        }

        if (!uphill && basex <= (refx + HARD_OFFSET)) {
            pos[0] += (refx + HARD_OFFSET - basex);
        }

        return pos;
    }

    var LineDataLabels = function(runtime, options) {
        LineDataLabels.superclass.constructor.apply(this, arguments);
        this.isHorizontal = options.isHorizontal;
        this._labelPosition = this.isHorizontal ? "outside" : "up";
    };

    oo.extend(LineDataLabels, DataLabels);

    LineDataLabels.prototype._computeDataLabelTranslate = function(node, ctm, labelPosition, labelBBox) {
        if (this.isHorizontal) {
            return LineDataLabels.superclass._computeDataLabelTranslate.apply(this, [node,ctm, "right", labelBBox]);
        }
        labelPosition = posByNeighbours.call(this, node);
        var pos;
        if (labelPosition === 'adjust') {
            pos = this._computeDataLabelPosition(ctm, this._fixBBoxWhenInvisible(node), 'up', labelBBox, node);
            pos = adjust(pos, labelBBox, node);
        } else {
            pos = this._computeDataLabelPosition(ctm, this._fixBBoxWhenInvisible(node), labelPosition, labelBBox, node);
            if (labelPosition === 'down') {
                pos[1] += labelBBox.height;
            }
        }
        return pos;
    };

    return LineDataLabels;
});

define('sap/viz/chart/components/plots/LinePlot',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/chart/components/util/DrawUtil',
    'sap/viz/framework/common/util/SVG',
    'sap/viz/chart/components/plots/BaseColumnPlot',
    'sap/viz/framework/chartmodel/ContextBuilder',
    'sap/viz/chart/components/plots/ScaleHandler',
    'sap/viz/chart/components/plots/DataHandler',
    'sap/viz/chart/components/plots/ItemScaleHandler',
    'sap/viz/chart/components/renderers/SeriesRenderer',
    'sap/viz/chart/components/renderers/PathRenderer',
    "sap/viz/framework/common/util/DataGraphics",
    'sap/viz/framework/common/util/RuleUtil',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/chart/components/util/SeriesUtil',
    'sap/viz/chart/components/datalabels/LineDataLabels',
    'sap/viz/framework/common/util/UADetector'
], function Setup(oo, DrawUtil, SVG, BaseColumnPlot, ContextBuilder, ScaleHandler, DataHandler, ItemScaleHandler,
    SeriesRenderer, PathRenderer, DataGraphics, RuleUtil, ObjectUtils, SeriesUtil, LineDataLabels,
    UADetector) {

    var categorySize = {
        desktop : {
            minWidth : 24
        },
        mobile : {
            minWidth : 48
        }
    };
    var trellisCategorySize = {
        desktop : {
            minWidth : 16
        },
        mobile : {
            minWidth : 16
        }
    };

    var LinePlot = function(runtime, options) {
        LinePlot.superclass.constructor.apply(this, arguments);
        
        this._dataPointRenderer = PathRenderer;
        this._flipNegativeShape = false;
        
        var semanticMgr = this.runtime().semanticManager();
        semanticMgr.bindLineStyleProperty(this._name + ".lineStyle");

        this.runtime().markManager().setDefaultRestrict("circle");
        this._attachMarkRestrict();

        //each watcher should be removed in destroy function
        this.markerShapePW = this._properties.watch("marker.shape", this._onShapeChange.bind(this));
    };

    oo.extend(LinePlot, BaseColumnPlot);

    LinePlot.prototype.destroy = function() {
        
        this.markerShapePW.remove();
        this.markerShapePW = null;
        
        LinePlot.superclass.destroy.call(this);
        this._dataPointRenderer = null;
        this._flipNegativeShape = null;
        this._markerD = null;
        this._realSize = null;
    };
    
    LinePlot.prototype._onShapeChange = function() {
        this._attachMarkRestrict();
    };

    LinePlot.prototype._attachMarkRestrict = function() {
        var markMgr = this.runtime().markManager();
        markMgr.setPrimaryAxisRestrict(this._properties.get("marker.shape"));
        if(this._options.isDualValueAxis){
            markMgr.setSecondaryAxisRestrict(this._properties.get("marker.shape"));
        }
    };

    LinePlot.prototype._preRender = function() {
        LinePlot.superclass._preRender.apply(this, arguments);

        var markerProps = this._properties.get("marker");
        if (markerProps && markerProps.visible === true) {
            var r = markerProps.size / 2;
            this._markerD = DrawUtil.createMarkerData({
                type : markerProps.shape,
                rx : r,
                ry : r,
                borderWidth : 2
            });
        }
    };

    LinePlot.prototype._getValueScaleHandlers = function(isHorizontal) {
        var options = {
            isHorizontal: isHorizontal,
            alignment: isHorizontal ? "right" : "top"
        };
        if (this._options.isDualValueAxis) {
            return [ScaleHandler.getValueScaleHandler("valueAxis", options), ScaleHandler.getValueScaleHandler(
                "valueAxis2", options)];
        } else {
            return [ScaleHandler.getValueScaleHandler("valueAxis", options)];
        }
    };

    LinePlot.prototype._getCategoryScaleHandlers = function() {
        return [ScaleHandler.getCategoryScaleHandler("categoryAxis", {
            isHorizontal: false,
            itemScaleHandler: ItemScaleHandler.get(false),
            alignment: "center"
        })];
    };

    LinePlot.prototype._getSeriesRenderer = function() {
        return new SeriesRenderer(this._drawLine.bind(this), this._updateLine.bind(this));
    };

    LinePlot.prototype._adjustPosition = function(position) {};

    LinePlot.prototype._drawLine = function(seriesG, data, seriesIndex) {
        var props = this._properties.get(),
            semanticMgr = this.runtime().semanticManager(),
            effectMgr = this.runtime().effectManager();
        if (props.lineVisible) {
            var context = ContextBuilder.buildSeriesContext(this._data, seriesIndex, ["color", "color2"]);
            SeriesUtil.drawLine(seriesG, data, props, semanticMgr, effectMgr, context, props.lineRenderer);
            SeriesUtil.linkLine(data);
        }
    };

    LinePlot.prototype._updateDatapoint = function(dataPointG, dpRenderer, dpConfig,
        position) {
        LinePlot.superclass._updateDatapoint.apply(this, arguments);

        if (position.hasOwnProperty("x") && position.hasOwnProperty("y")) {
            var translate = DataGraphics.getData(dataPointG).translate;
            if (translate){
                translate[0] = position.x;
                translate[1] = position.y;
            }
        }
    };

    LinePlot.prototype._updateLine = function(seriesG, data, seriesIndex) {
        if (this._properties.get("lineVisible")) {
            SeriesUtil.updateLine(seriesG, data, this._properties.get("lineRenderer"));
        }
    };

    LinePlot.prototype._fillArea = function(seriesG, data) {
        var fill = null;
        var n, d;
        for (n = 0; n < data.length; n++) {
            if (!data[n] || !data[n].position) {
                continue;
            }
            d = d ? d + "L" : "M";
            d += (data[n].position.x + data[n].position.width / 2) + "," + data[n].position.y;
            fill = fill || data[n].dpConfig.graphic.fill;
        }
        if (!d) {
            return;
        }
        for (n = data.length - 1; n >= 0; n--) {
            if (!data[n] || !data[n].position) {
                continue;
            }
            d += "L" + (data[n].position.x + data[n].position.width / 2) + "," + (data[n].position.y + data[n].position
                .height);
        }
        var path = SVG.create("path");
        path.setAttribute("d", d);
        path.setAttribute("fill", fill);
        path.setAttribute("stroke-width", this._properties.get("width"));
        path.setAttribute("stroke", fill);
        path.setAttribute("stroke-linejoin", "round");
        seriesG.insertBefore(path, seriesG.firstChild);
    };

    LinePlot.prototype._buildConfig = function(data, position, context) {
        var config = LinePlot.superclass._buildConfig.apply(this, arguments);
        config.graphic.d = this._markerD;
        if (!this._properties.get("marker.visible")) {
            config.graphic.opacity = 0;
        }
        return config;
    };

    LinePlot.prototype._getDataLabels = function(name, runtime) {
        var options = ObjectUtils.extend({}, this._options);
        options.name = name;
        return new LineDataLabels(runtime, options);
    };

    LinePlot.prototype.getPreferredSize = function () {
        var inTrellis = !!this._options.inTrellis;
        if (inTrellis || this._properties.get('isFixedDataPointSize')) {
            var sizeDefinition = inTrellis ? trellisCategorySize : categorySize;
            var minWidth = UADetector.isMobile()? sizeDefinition.mobile.minWidth : sizeDefinition.desktop.minWidth;
            var categoryCount = this._getCategoryCount();
            var categoryWidth = this.isHorizontal() ? 
                (this._size.height / categoryCount) : (this._size.width / categoryCount);
            var categorySizeChanged = false;
            if (categoryWidth < minWidth) {
                categorySizeChanged = true;
                categoryWidth = minWidth;
            }
            if (categorySizeChanged) {
                if (this.isHorizontal()) {
                    this._realSize.height = categoryWidth * categoryCount;
                } else {
                    this._realSize.width = categoryWidth * categoryCount;
                }
            }
        }
        return this._realSize;
    };

    return LinePlot;
});

define('sap/viz/chart/components/plots/ColumnPlot',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/chart/components/plots/BaseColumnPlot'
], function Setup(oo, BaseColumnPlot) {

    /**
     * To initialize ColumnPlot object.
     *
     * @name ColumnPlot
     * @constructor
     */
    var ColumnPlot = function(runtime, options) {
        ColumnPlot.superclass.constructor.apply(this, arguments);
        this._drawZeroLineBeforeDatapoints = false;
    };

    oo.extend(ColumnPlot, BaseColumnPlot);

    ColumnPlot.prototype.destroy = function() {
        ColumnPlot.superclass.destroy.call(this);
        this._drawZeroLineBeforeDatapoints = null;
    };
    
    return ColumnPlot;
});

define('sap/viz/chart/components/datalabels/CombinationDataLabels',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/framework/common/util/DataGraphics',
    'sap/viz/chart/components/datalabels/ColumnDataLabels',
    'sap/viz/chart/components/datalabels/LineDataLabels'
], function(oo, DataGraphics, ColumnDataLabels, LineDataLabels) {
    var Vertical = function(ctx, options) {
        Vertical.superclass.constructor.apply(this, arguments);
        this.isHorizontal = false;
        this._labelPosition = "up";
    };
    oo.extend(Vertical, ColumnDataLabels);

    Vertical.prototype._computeDataLabelTranslate = function(node) {
        var fn;
        if (DataGraphics.getData(node).type !== "line") {
            fn = ColumnDataLabels.prototype._computeDataLabelTranslate;
        } else {
            fn = LineDataLabels.prototype._computeDataLabelTranslate;
        }
        return fn.apply(this, arguments);
    };

    return Vertical;
});

define('sap/viz/chart/components/datalabels/HCombinationDataLabels',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/framework/common/util/DataGraphics',
    'sap/viz/chart/components/datalabels/BarDataLabels',
    'sap/viz/chart/components/datalabels/LineDataLabels'
], function(oo, DataGraphics, BarDataLabels, LineDataLabels) {
    var Horizontal = function(runtime, options) {
        Horizontal.superclass.constructor.apply(this, arguments);
        this.isHorizontal = true;
        this._labelPosition = "outside";
    };
    oo.extend(Horizontal, BarDataLabels);

    Horizontal.prototype._computeDataLabelTranslate = function(node) {
        var proto;
        if (DataGraphics.getData(node).type !== "line") {
            proto = BarDataLabels.prototype;
        } else {
            proto = LineDataLabels.prototype;
        }
        this._computeDataLabelPosition = proto._computeDataLabelPosition;
        return proto._computeDataLabelTranslate.apply(this, arguments);
    };

    return Horizontal;
});

define('sap/viz/chart/components/plots/CombinationPlot',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/chart/components/util/DrawUtil',
    'sap/viz/framework/common/util/SVG',
    'sap/viz/chart/components/plots/BaseColumnPlot',
    'sap/viz/framework/chartmodel/ContextBuilder',
    'sap/viz/chart/components/plots/ScaleHandler',
    'sap/viz/chart/components/plots/DataHandler',
    'sap/viz/chart/components/plots/ItemScaleHandler',
    'sap/viz/chart/components/renderers/SeriesRenderer',
    'sap/viz/chart/components/renderers/BarRenderer',
    'sap/viz/chart/components/renderers/PathRenderer',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/chart/components/util/SeriesUtil',
    "sap/viz/chart/components/util/DataPointUtils",
    "sap/viz/framework/common/util/DataGraphics",
    'sap/viz/chart/components/datalabels/CombinationDataLabels',
    'sap/viz/chart/components/datalabels/HCombinationDataLabels', 
    'sap/viz/framework/common/util/Constants'
], function Setup(oo, DrawUtil, SVG, BaseColumnPlot, ContextBuilder, ScaleHandler, DataHandler,
    ItemScaleHandler,
   SeriesRenderer, BarRenderer, PathRenderer, ObjectUtils, SeriesUtil, DataPointUtils, DataGraphics,
    CombinationDataLabels, HCombinationDataLabels, Constants) {

    var LINE = "line";
    var BAR = "bar";
    var CombinationPlot = function(runtime, options) {
        CombinationPlot.superclass.constructor.apply(this, arguments);

        this._barCategoryAxis = ScaleHandler.getCategoryScaleHandler("categoryAxis", {
            isHorizontal: false,
            itemScaleHandler: ItemScaleHandler.get(true)
        });
        this._categoryScaleHandler = this._barCategoryAxis;

        var semanticMgr = this.runtime().semanticManager();
        semanticMgr.bindLineStyleProperty([this._name + ".line.lineStyle", this._name + ".line.style"]);

        this._attachMarkManager();

        this.dataShapePrimaryAxisPW = this._properties.watch("dataShape.primaryAxis", 
            this._onDataShapeChange.bind(this));

        var isDualValueAxis = options && options.isDualValueAxis;
        if(isDualValueAxis){
            this.dataShapeSecondaryAxisPW = this._properties.watch("dataShape.secondaryAxis", 
                this._onDataShapeChange.bind(this));
        }
        
        this.lineMarkerShapePW = this._properties.watch("line.marker.shape", this._onDataShapeChange.bind(this));
    };

    oo.extend(CombinationPlot, BaseColumnPlot);

    CombinationPlot.prototype.destroy = function() {

        this.dataShapePrimaryAxisPW.remove();
        this.dataShapePrimaryAxisPW = null;
        
        if(this.dataShapeSecondaryAxisPW) {
            this.dataShapeSecondaryAxisPW.remove();
            this.dataShapeSecondaryAxisPW = null;
        }
        this.lineMarkerShapePW.remove();
        this.lineMarkerShapePW = null;

        CombinationPlot.superclass.destroy.call(this);

        this._barCategoryAxis = null;
        this._categoryScaleHandler = null;
        this._realSize = null;
        this._measureIndex = null;
        this._markerD = null;
    };
    
    CombinationPlot.prototype._attachMarkManager = function() {
        var markMgr = this.runtime().markManager();
        var primaryAxis = this._properties.get("dataShape.primaryAxis");
        var lineMark = this._properties.get("line.marker.shape");

        var propRoot = this._properties.parentLevel;
        markMgr.setDefaultRestrict(lineMark);
        markMgr.setPrimaryAxisRestrict(processMark(primaryAxis, lineMark, propRoot));
        
        if(this._options && this._options.isDualValueAxis){
            var secondaryAxis = this._properties.get("dataShape.secondaryAxis");
            markMgr.setSecondaryAxisRestrict(processMark(secondaryAxis, lineMark, propRoot));
        }
    };

    function processMark(arr, lineMark, propRoot) {
        var result = [];
        if(!arr || !arr.length){
            return result;
        }
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] === LINE) {
                result.push(lineMark);
            } else {
                //we should use default shape
                var defaultMarkerShape = propRoot.get("legend.marker.shape");
                result.push(defaultMarkerShape);
            }
        }
        return result;
    }

    CombinationPlot.prototype._onDataShapeChange = function() {
        this._attachMarkManager();
    };

    CombinationPlot.prototype._getCategoryScaleHandlers = function(isHorizontal) {
        return [ScaleHandler.getCategoryScaleHandler("categoryAxis", {
            isHorizontal: isHorizontal,
            itemScaleHandler: ItemScaleHandler.get(false),
            alignment: "center"
        })];
    };

    CombinationPlot.prototype._getSeriesRenderer = function() {
        return new SeriesRenderer(this._drawLine.bind(this), this._updateLine.bind(this));
    };

    CombinationPlot.prototype._applyChanges = function() {
        CombinationPlot.superclass._applyChanges.apply(this, arguments);

        var barCount = this._getColumnCount();
        var scale = this._data["categoryAxis"].scale;
        if (barCount) {
            var range = this.isHorizontal() ? this._realSize.height : this._realSize.width;
            this._barCategoryAxis.init(scale, barCount, range);
        }
    };

    CombinationPlot.prototype._preRender = function() {
        CombinationPlot.superclass._preRender.apply(this, arguments);

        var lineMarkerProps = this._properties.get("line.marker");
        if (lineMarkerProps && lineMarkerProps.visible === true) {
            var r = lineMarkerProps.size / 2;
            this._markerD = DrawUtil.createMarkerData({
                type: lineMarkerProps.shape,
                rx: r,
                ry: r,
                borderWidth: 2
            });
        }

        var seriesCount = this._data.series.length;
        this._measureIndex = [];
        var barIndex = 0;
        for (var seriesIndex = 0; seriesIndex < seriesCount; seriesIndex++) {
            var shape = this._getDataShape(seriesIndex);
            if (shape === BAR) {
                this._measureIndex[seriesIndex] = barIndex;
                barIndex++;
            }
        }
    };

    CombinationPlot.prototype._getDataShape = function(seriesIndex) {
        var items = this._data.series[seriesIndex];
        var item = null;
        for (var i = 0; i < items.length; i++) {
            item = items[i];
            if (item) {
                break;
            }
        }
        if (item) {
            var propKey = "dataShape.primaryAxis";
            if (!item.hasOwnProperty("valueAxis")) {
                propKey = "dataShape.secondaryAxis";
            }
            var dataShapes = this._properties.get(propKey);
            var index = item.color ? item.color.mndIndex : -1;
            return dataShapes[index] || LINE;

        }
        return LINE;
    };

    CombinationPlot.prototype._getXPosition = function(seriesIndex, itemIndex, data) {
        var isLine = this._getDataShape(seriesIndex) === LINE;
        if (this.isHorizontal()) {
            //value
            var result = CombinationPlot.superclass._getXPosition.apply(this, arguments);
            if (isLine) {
                return [result[0] + result[1], 0];
            } else {
                return result;
            }
        } else {
            //category
            if (isLine) {
                return CombinationPlot.superclass._getXPosition.apply(this, arguments);
            } else {
                seriesIndex = this._measureIndex[seriesIndex];
                return this._getAxisPosition([this._barCategoryAxis], seriesIndex, itemIndex,
                    data);
            }
        }
    };

    CombinationPlot.prototype._getYPosition = function(seriesIndex, itemIndex, data) {
        var isLine = this._getDataShape(seriesIndex) === LINE;
        if (!this.isHorizontal()) {
            //value
            var result = CombinationPlot.superclass._getYPosition.apply(this, arguments);
            if (isLine) {
                return [result[0], 0];
            } else {
                return result;
            }
        } else {
            //category
            if (isLine) {
                return CombinationPlot.superclass._getYPosition.apply(this, arguments);
            } else {
                seriesIndex = this._measureIndex[seriesIndex];
                return this._getAxisPosition([this._barCategoryAxis], seriesIndex, itemIndex,
                    data);
            }
        }
    };

    CombinationPlot.prototype._drawLine = function(seriesG, data, seriesIndex) {
        if (this._getDataShape(seriesIndex) !== LINE) {
            return 0;
        }
        var props = this._properties.get("line");
        var runtime = this.runtime();
        if (props.visible === true) {
            var context = ContextBuilder.buildSeriesContext(this._data, seriesIndex, ["color", "color2"]);
            var lineRenderer = this._properties.get("line.lineRenderer");

            SeriesUtil.drawLine(seriesG, data, this._properties.get(), runtime.semanticManager(),
                runtime.effectManager(), context, lineRenderer, true);
            SeriesUtil.linkLine(data);
        }
        return 1;
    };

    CombinationPlot.prototype._updateLine = function(seriesG, data, seriesIndex) {
        if (this._getDataShape(seriesIndex) !== LINE) {
            return;
        }
        if (this._properties.get("line.visible")) {
            SeriesUtil.updateLine(seriesG, data, this._properties.get("lineRenderer"));
        }
    };

    CombinationPlot.prototype._updateDatapoint = function(dataPointG, dpRenderer, dpConfig,
        position) {
        CombinationPlot.superclass._updateDatapoint.apply(this, arguments);
        if (position.hasOwnProperty("x") && position.hasOwnProperty("y")) {
            var translate = DataGraphics.getData(dataPointG).translate;
            if (translate) {
                translate[0] = position.x;
                translate[1] = position.y;
            }
        }
    };

    CombinationPlot.prototype._buildConfig = function(data, position, context) {
        var config = CombinationPlot.superclass._buildConfig.apply(this, arguments);
        config.graphic.d = this._markerD;

        if (!this._properties.get("line.marker.visible")) {
            config.graphic.opacity = 0;
        }
        return config;
    };

    CombinationPlot.prototype._getDataPointRenderer = function(seriesIndex) {
        if (this._getDataShape(seriesIndex) === LINE) {
            this._isLineMarker = true;
            return this._customMarkerRenderer || PathRenderer;
        } else {
            this._isLineMarker = false;
            return CombinationPlot.superclass._getDataPointRenderer.apply(this, arguments);
        }
    };


    CombinationPlot.prototype._getDataLabels = function(name, runtime) {
        var options = ObjectUtils.extend({}, this._options);
        options.name = name;
        if (options.isHorizontal) {
            return new HCombinationDataLabels(runtime, options);
        } else {
            return new CombinationDataLabels(runtime, options);
        }
    };

    CombinationPlot.prototype._getColumnCount = function() {
        var seriesCount = this._data.series.length;
        var barCount = 0;
        for (var i = 0; i < seriesCount; i++) {
            if (this._getDataShape(i) == BAR) {
                barCount++;
            }
        }
        return barCount;
    };
    
    CombinationPlot.prototype._drawDataPoint = function(dpRenderer, dpConfig, dpData, position,
        currentId, data) {
        var sliceRenderer = this._properties.get('sliceRenderer');
        var node;
        if (sliceRenderer) {
            node = sliceRenderer(dpConfig, dpRenderer);
        } else {
            dpConfig["isLineMarker"] = this._isLineMarker;
            node = dpRenderer(dpConfig);
            //delete isLineMarker in dpConfig
            delete dpConfig["isLineMarker"];
        }

        var dataPointG = SVG.create("g");
        DataPointUtils.setDataId(dataPointG, currentId);
        DataPointUtils.setDataPointId(dataPointG, data.dp.id);
        DataGraphics.setContext(dataPointG, dpConfig.ctx);
        DataGraphics.setData(dataPointG, dpData);

        dataPointG.setAttribute("class", Constants.CSS.CLASS.DATAPOINT + ' ' +
                Constants.CSS.CLASS.MORPHABLEDATAPOINT + ' ' + Constants.CSS.CLASS.DATAPOINTDEFAULT
            );

        if (this._isLineMarker === true) {
            dataPointG.setAttribute("combination-marker","true");
        }else{
            dataPointG.setAttribute("combination-column","true");
        } 

        if (position.hasOwnProperty("x") && position.hasOwnProperty("y")) {
            dataPointG.setAttribute("transform", 'translate(' + position.x + ', ' + position.y +
                ')');
        }
        if (!node && this._dataPointRenderer) {
            node = this._dataPointRenderer(dpConfig);
        }

        dataPointG.appendChild(node);

        return dataPointG;
    };
    return CombinationPlot;
});

define('sap/viz/chart/components/datalabels/StackedDataLabels',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/framework/common/util/DataGraphics',
    'sap/viz/chart/components/datalabels/DataLabels'
], function(oo, DataGraphics, DataLabels) {
    var StackedDataLabels = function(ctx, options) {
        StackedDataLabels.superclass.constructor.apply(this, arguments);
        this._labelPosition = "inside";
    };

    oo.extend(StackedDataLabels, DataLabels);

    StackedDataLabels.prototype.hideConditional = function(dataLabelInfos) {
        var i;
        for (i = (dataLabelInfos.length - 1); i >= 0; i--) {
            var dataLabelinfo = dataLabelInfos[i];

            var dataLabelNode = dataLabelinfo.node;
            var dataPointNode = dataLabelinfo.dataPoint;

            if (this.isDataLabelOutOfDataPoint(dataLabelNode, dataPointNode) && 
                DataGraphics.getData(dataPointNode).type != "line") {
                if (dataLabelNode && dataLabelNode.parentNode) {
                    dataLabelNode.parentNode.removeChild(dataLabelNode);
                }
                dataLabelInfos.splice(i, 1);
            }
        }

        return StackedDataLabels.superclass.hideConditional.apply(this, arguments);
    };

    return StackedDataLabels;
});
define('sap/viz/chart/components/renderers/StackedBarRenderer',[ "sap/viz/framework/common/util/SVG" ], function(SVG) {
    var barRenderer = function(config, position) {
        var node = SVG.create("rect");
        var graphic = config.graphic;
        node.setAttribute("width", graphic.width < 1 && graphic.width !== 0 ? 1 : graphic.width);
        node.setAttribute("height", graphic.height < 1 && graphic.height !== 0 ? 1 : graphic.height);
        node.setAttribute("x", position.x);
        node.setAttribute("y", position.y);
        var fill = graphic.fill;
        if (config.effectManager) {

            fill = config.effectManager.register({
                drawingEffect : graphic.drawingEffect,
                fillColor : graphic.fill,
                direction : config.horizontal ? 'vertical' : 'horizontal'
            });
        }
        node.setAttribute("fill", fill);
        node.setAttribute('shape-rendering', 'crispEdges');
        return node;
    };

    barRenderer.update = function(node, config, position) {
        var graphic = config.graphic;
        var rect = node.querySelector("rect");
        rect.setAttribute("width", graphic.width < 1 && graphic.width !== 0 ? 1 : graphic.width);
        rect.setAttribute("height", graphic.height < 1 && graphic.height !== 0 ? 1 : graphic.height);
        rect.setAttribute("x", position.x);
        rect.setAttribute("y", position.y);
    };

    return barRenderer;
});
define('sap/viz/chart/components/plots/StackedColumnPlot',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/chart/components/plots/ColumnPlot',
    'sap/viz/chart/components/plots/DataHandler',
    'sap/viz/chart/components/plots/ItemScaleHandler',
    'sap/viz/chart/components/plots/ScaleHandler',
    'sap/viz/chart/components/datalabels/StackedDataLabels',
    'sap/viz/framework/common/util/Constants',
    'sap/viz/framework/common/util/SVG',
    "sap/viz/chart/components/util/DataPointUtils",
    "sap/viz/framework/common/util/DataGraphics",
    'sap/viz/chart/components/renderers/StackedBarRenderer',
    "sap/viz/framework/common/util/ObjectUtils",
    "sap/viz/framework/common/util/DOM"
], function Setup(oo, ColumnPlot, DataHandler, ItemScaleHandler, ScaleHandler, StackedDataLabels, Constants, SVG, 
DataPointUtils, DataGraphics, StackedBarRenderer, ObjectUtils, DOM) {

    /**
     * To initialize StackedColumnPlot object.
     *
     * @name StackedColumnPlot
     * @constructor
     */
    var StackedColumnPlot = function(runtime, options) {
        StackedColumnPlot.superclass.constructor.apply(this, arguments);
        this._dataPointRenderer = StackedBarRenderer;
    };

    oo.extend(StackedColumnPlot, ColumnPlot);

    StackedColumnPlot.prototype._getDataHandler = function() {
        if (this._options.isDualValueAxis) {
            return {
                "valueAxis": DataHandler.getStackHandler(true),
                "valueAxis2": DataHandler.getStackHandler(true)
            };
        } else {
            return {
                "valueAxis": DataHandler.getStackHandler(true)
            };
        }
    };
    StackedColumnPlot.prototype._getCategoryScaleHandlers = function(isHorizontal) {
        this._categoryScaleHandler = ScaleHandler.getCategoryScaleHandler("categoryAxis", {
            isHorizontal: isHorizontal,
            itemScaleHandler: this._getItemScaleHandler()
        });

        return [this._categoryScaleHandler];
    };

    StackedColumnPlot.prototype._getItemScaleHandler = function() {
        if (this._options.isDualValueAxis) {
            return ItemScaleHandler.get(false, {
                valueAxis: ["valueAxis", "valueAxis2"]
            });
        } else {
            return ItemScaleHandler.get(false);
        }
    };

    StackedColumnPlot.prototype._getDataLabels = function(name, runtime) {
        return new StackedDataLabels(runtime, {
            name: name
        });
    };
    
    StackedColumnPlot.prototype._getSeries = function(){
        if(this._data.series){
            return this._data.series.slice().reverse();
        } else {
            return [];
        }
    };

    StackedColumnPlot.prototype._getColumnCount = function() {
        return this._options.isDualValueAxis ? 2 : 1;
    };
       
    StackedColumnPlot.prototype._getColumnWidth = function(columnCount, categoryCount, isHorizontal) {
        if (this._options.isDualValueAxis) {
            return StackedColumnPlot.superclass._getColumnWidth.apply(this, arguments);
        }

        var step = 1;
        var categoryWidth = isHorizontal? 
            (this._size.height / categoryCount) : (this._size.width / categoryCount);
        return categoryWidth * step * 0.5;
    };

    StackedColumnPlot.prototype._updateRealSize = function(columnCount, categoryCount, columnWidth, isHorizontal) {
        if (this._options.isDualValueAxis) {
            return StackedColumnPlot.superclass._updateRealSize.apply(this, arguments);
        }
        
        var step = 1;
        if (isHorizontal) {
            this._realSize.height = columnWidth / (step * 0.5) * categoryCount;
        } else {
            this._realSize.width = columnWidth / (step * 0.5) * categoryCount;
        }                
    };
    
    function series2Groups(series) {
        if (!series.length) {
            return [];
        }
        var categories = [], category, s;
        for (var i = 0, l = series.length; i < l; i++) {
            s = series [i];
            for (var j = 0; j < s.length; j++) {
                category = categories[j] = categories[j] || [];
                category.push(s[j]);
            }
        }
        return category;
    }
    
    StackedColumnPlot.prototype._drawDatapoints = function(parent) {
        drawDataPoints.call(this, parent);
    };  
    
    StackedColumnPlot.prototype._updateDatapoints = function(parent) {
        drawDataPoints.call(this, parent, true);
    };
    
    function drawDataPoints(parent, updateOnly) {
        var series = this._getSeries();
        var seiresLength = series.length;
        var dpGroupG;
        if (updateOnly) {
            dpGroupG = parent.select("." + Constants.CSS.CLASS.DATAPOINT_GROUP).node();
        } else {
            dpGroupG = SVG.create("g");
            dpGroupG.setAttribute("class", Constants.CSS.CLASS.DATAPOINT_GROUP);
        }
        if (!updateOnly && this._seriesRenderer) {
            this._seriesRenderer.init(seiresLength);
        }

        for (var dhID in this._dataHandler) {
            if (this._dataHandler[dhID].reset) {
                this._dataHandler[dhID].reset();
            }
        }
        var prevData, prevId, currentId;
        var countId = 0;
        var categories = [], category;
        for (var seriesIndex = 0; seriesIndex < seiresLength; seriesIndex++) {
            var seriesItem = series[seriesIndex];
            if (!seriesItem) {
                continue;
            }
            prevData = null;
            for (var itemIndex = 0; itemIndex < seriesItem.length; itemIndex++) {
                var data = seriesItem[itemIndex];
                if (!data) {
                    continue;
                }

                var position = this._getPosition(seriesIndex, itemIndex, data);
                if (!position) {
                    continue;
                }
                //FIXME: Use raw data id here instead of an inner id.
                currentId = countId++;
                var dpConfig = this._buildWrapperConfig(data, position, data.dp.context());
                var valAxisName = "valueAxis";
                if (data.hasOwnProperty("valueAxis2")) {
                    valAxisName = "valueAxis2";
                }
                categories[itemIndex] = categories[itemIndex] || {};
                category = categories[itemIndex][valAxisName] = categories[itemIndex][valAxisName] || {
                    configs: [],
                    positions: [],
                    currentIds: [],
                    dataPoints: []
                };
                if (updateOnly) {
                    if (!category.node) {
                        var dpNode = DataPointUtils.find(dpGroupG, currentId);
                        var categoryNode = dpNode;
                        while( (categoryNode = categoryNode.parentNode) && 
                            !DOM.hasClass(categoryNode, Constants.CSS.CLASS.STACK) ) {}
                        category.node = categoryNode;
                    }
                } else {
                    var dpData = this._buildData(dpConfig, position, currentId, prevData, prevId);
                    prevData = dpData;
                    category.data = category.data || [];
                    category.data.push(dpData);
                }
                category.configs.push(dpConfig);
                category.dataPoints.push(data.dp);
                category.positions.push(position);
                category.currentIds.push(currentId);
                prevId = currentId;
            }
        }
        var dpRenderer = this._getDataPointRenderer(seriesIndex);
        for (var i = 0; i < categories.length; i++) {
            for (var axis in categories[i]) {
                if (categories[i].hasOwnProperty(axis)) {
                    category = categories[i][axis];
                    if (!category) {
                        continue;
                    }
                    var cp = this._drawCategory(category.node, dpRenderer, category.configs, category.data, 
                        category.positions, category.currentIds, category.dataPoints);
                    if (cp) {
                        dpGroupG.appendChild(cp);
                    }
                }
            }
        }
        
        if (!updateOnly) {
            this._postRender(dpGroupG);
            parent.node().appendChild(dpGroupG);
            this._drawDataLabels(parent, dpGroupG);
        } else {
            this._dataLabels.updatePosition(parent);
        }
    }
   

    StackedColumnPlot.prototype._drawCategory = function(categoryG, cpRenderer, configs, data, positions, 
        currentIds, dataPoints) {
        var updateOnly = !!categoryG;
        var node;
        var config, position, ctx, stackWidth, stackHeight, x0, y0, x1, y1;
        var i;
        var isCustom = (cpRenderer !== this._dataPointRenderer);
        var stackCtx = [], origGraphic, dataPointG;

        if (isCustom) {
            for (i = 0; i < configs.length; i++) {
                config = configs[i];
                position = positions[i];
                if (i === 0) {
                    x0 = position.x;
                    y0 = position.y;
                    x1 = x0 + config.graphic.width;
                    y1 = y0 + config.graphic.height;
                } else {
                    if (config.horizontal) {
                        x0 = Math.min(x0, position.x);
                        x1 = Math.max(x1, position.x + config.graphic.width);
                    } else {
                        y0 = Math.min(y0, position.y);
                        y1 = Math.max(y1, position.y + config.graphic.height);
                    }
                }
            }
            stackWidth = x1 - x0;
            stackHeight = y1 - y0;

            if (!updateOnly) {
                categoryG = SVG.create("g");
                categoryG.setAttribute("class", Constants.CSS.CLASS.STACK);
            }

            for (i = 0; i < configs.length; i++) {
                config = configs[i];
                position = positions[i];
                origGraphic = ObjectUtils.extend({}, config.graphic);
                config.graphic.stackWidth = stackWidth;
                config.graphic.stackHeight = stackHeight;
                config.graphic.x = config.horizontal ? position.x - x0 : 0;
                config.graphic.y = config.horizontal ? 0 : position.y - y0;

                if (updateOnly) {
                    dataPointG = DataPointUtils.find(categoryG, currentIds[i]);
                    if (cpRenderer.update) {
                        cpRenderer.update(dataPointG, config);
                    }
                } else {
                    node = cpRenderer(config) || this._dataPointRenderer(config, position);

                    dataPointG = SVG.create("g");
                    DataPointUtils.setDataId(dataPointG, currentIds[i]);
                    DataPointUtils.setDataPointId(dataPointG, dataPoints[i].id);
                    ctx = config.ctx;
                    stackCtx.push(ctx);
                    DataGraphics.setContext(dataPointG, ctx);
                    DataGraphics.setData(dataPointG, data[i]);
                    dataPointG.setAttribute("class", Constants.CSS.CLASS.DATAPOINT + ' ' +
                        Constants.CSS.CLASS.MORPHABLEDATAPOINT + ' ' + Constants.CSS.CLASS.DATAPOINTDEFAULT
                    );
                    dataPointG.appendChild(node);
                    categoryG.appendChild(dataPointG);
                }

                if (x0 !== 0 || y0 !== 0) {
                    dataPointG.setAttribute("transform", 'translate(' + x0 + ', ' + y0 +
                        ')');
                }
                config.graphic = origGraphic;
            }
        } else {
            if (!updateOnly) {
                categoryG = SVG.create("g");
                categoryG.setAttribute("class", Constants.CSS.CLASS.STACK);
            }

            for (i = 0; i < configs.length; i++) {
                config = configs[i];
                position = positions[i];

                if (updateOnly) {
                    dataPointG = DataPointUtils.find(categoryG, currentIds[i]);
                    if (cpRenderer.update) {
                        cpRenderer.update(dataPointG, config, position);
                    }
                } else {
                    node = cpRenderer(config, position);

                    dataPointG = SVG.create("g");
                    DataPointUtils.setDataId(dataPointG, currentIds[i]);
                    DataPointUtils.setDataPointId(dataPointG, dataPoints[i].id);
                    ctx = config.ctx;
                    stackCtx.push(ctx);
                    DataGraphics.setContext(dataPointG, ctx);
                    DataGraphics.setData(dataPointG, data[i]);
                    dataPointG.setAttribute("class", Constants.CSS.CLASS.DATAPOINT + ' ' +
                        Constants.CSS.CLASS.MORPHABLEDATAPOINT + ' ' + Constants.CSS.CLASS.DATAPOINTDEFAULT
                    );
                    dataPointG.appendChild(node);
                    categoryG.appendChild(dataPointG);
                }
            }
        }

        if (!updateOnly) {
            DataGraphics.setData(categoryG, stackCtx);
        }
        return categoryG;
    };

    return StackedColumnPlot;
});

define('sap/viz/chart/components/plots/PercentagePlot',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/framework/scale/ValueScale',
    'sap/viz/framework/common/util/Constants',
    'sap/viz/chart/components/plots/StackedColumnPlot',
    'sap/viz/chart/components/renderers/GridlineRenderer'
], function Setup(oo, ValueScale, Constants, StackedColumnPlot, GridlineRenderer) {

    /**
     * To initialize PercentagePlot object.
     *
     * @name PercentagePlot
     * @constructor
     */
    var PercentagePlot = function(runtime, options) {
        PercentagePlot.superclass.constructor.apply(this, arguments);
    };

    oo.extend(PercentagePlot, StackedColumnPlot);

    PercentagePlot.prototype._getDataHandler = function() {
        if (this._options.isDualValueAxis) {
            return {
                "valueAxis": new StackedHandler(),
                "valueAxis2": new StackedHandler()
            };
        } else {
            return {
                "valueAxis": new StackedHandler()
            };
        }
    };

    PercentagePlot.prototype._getPosition = function(seriesIndex, itemIndex, data) {
        var valueAxis = data.hasOwnProperty("valueAxis2") ? this._data.valueAxis2 : this._data.valueAxis;
        var value = data.hasOwnProperty("valueAxis2") ? data.valueAxis2 : data.valueAxis;
        //When sum > 0 but value < 0 , skip this dataPoint
        if (value < 0 && valueAxis.categorySum[itemIndex] > 0) {
            return null;
        }
        valueAxis.scale.total(valueAxis.categorySum[itemIndex]);
        return PercentagePlot.superclass._getPosition.apply(this, arguments);
    };

    PercentagePlot.prototype._buildWrapperConfig = function(data, position, context){
        if (data.valueAxis) {
            context.percentage = Math.abs(this._data.valueAxis.scale.scale(data.valueAxis));
        } else if (data.valueAxis2) {
            context.percentage = Math.abs(this._data.valueAxis2.scale.scale(data.valueAxis2));
        }
        return PercentagePlot.superclass._buildWrapperConfig.apply(this, arguments);
    };

    PercentagePlot.prototype._buildData = function(dpConfig, position, currentId, prevData, prevId) {
        var ret = PercentagePlot.superclass._buildData.apply(this, arguments);
        ret.percentageValue = dpConfig.ctx.percentage;
        delete dpConfig.ctx.percentage;
        return ret;
    };

    PercentagePlot.prototype._drawGridlines = function(parent) {
        var size = this._realSize;
        var isHorizontal = this.isHorizontal();
        var direction = isHorizontal ? Constants.DIRECTION.VERTICAL : Constants.DIRECTION.HORIZONTAL;
        var props = this._properties.get("gridline");
        var range = isHorizontal ? [0, size.width] : [size.height, 0];
        var scale = new ValueScale([0, 1], range);
        scale.setTickHint(this._data.valueAxis.tickHint);
        GridlineRenderer.drawValueGridline(parent, size.width, size.height, scale, props, direction,
            this.runtime().effectManager());
    };

    var StackedHandler = function() {

    };

    StackedHandler.prototype.reset = function(length) {
        this._sum = [];
    };

    StackedHandler.prototype.getBase = function(index, value) {
        if (this._sum[index] == null) {
            this._sum[index] = 0;
        }
        return this._sum[index];
    };

    StackedHandler.prototype.add = function(index, value) {
        if (this._sum[index] === 0) {
            this._sum[index] = value;
        } else if (this._sum[index] < 0 && value > 0) {
            this._sum[index] = value;
        } else if (this._sum[index] * value > 0) {
            this._sum[index] += value;
        }
        return this._sum[index];
    };

    StackedHandler.prototype.destroy = function() {
        this._sum = null;
    };
    
    return PercentagePlot;
});

define('sap/viz/chart/components/datalabels/PieDataLabels',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/chart/components/datalabels/DataLabels',
    'sap/viz/framework/common/util/DataUtils'
], function Setup(oo, DataLabels, DataUtils) {

    /**
     * To initialize PieDataLabels object.
     *
     * @name PieDataLabels
     * @constructor
     */
    var PieDataLabels = function(runtime, options) {
        PieDataLabels.superclass.constructor.apply(this, arguments);
    };

    oo.extend(PieDataLabels, DataLabels);

    PieDataLabels.prototype._getDataLabelInfo = function(node) {
        var pathData = d3.select(node.childNodes[0]).datum();
        var startAngle = pathData.startAngle;
        var endAngle = pathData.endAngle;

        return {
            key: this._data.size.metaData[0].id,
            value: (endAngle - startAngle) / (2 * Math.PI)
        };
    };
    
    PieDataLabels.prototype._showProperty = function(property){
        if(!this._data || !this._data.color || !this._data.color.metaData){
            return false;
        }
        var metaData = this._data.color.metaData;
        for(var i=0; i<metaData.length; i++){
            if(property === metaData[i].id){
                return true;
            }
        }
        return false;
    };

    PieDataLabels.prototype._getDimensionDataLabelInfo = function(ctx, measureLabelInfo) {
        var ret = null;
        if(ctx && measureLabelInfo) {
            if(measureLabelInfo.key) {
                var measureKey = measureLabelInfo.key;
                if(ctx.hasOwnProperty(measureKey)) {
                    var count = 0, val;
                    for(var property in ctx) {
                        if(ctx.hasOwnProperty(property)) {
                            if(property !== measureKey && this._showProperty(property)) {
                                val = ctx[property + DataUtils.DIMENSION_DISPLAYNAME_SUFFIX] || 
                                        ctx[property];
                                if(count === 0) {
                                    ret = val;
                                } else {
                                    ret = ret + "/" + val;
                                }
                                count++;
                            }
                        }
                    }
                }
            }

        }
        return ret;
    };

    PieDataLabels.prototype._getFormattedDataLabel = function(value, ctx, measureLabelInfo) {
        var ret = value;
        if(ctx && measureLabelInfo) {
            ret = this._getDimensionDataLabelInfo(ctx, measureLabelInfo);
            if(ret) {
                ret = ret + "   (" + value + ")";
            }
        }

        return ret;
    };

    PieDataLabels.prototype._computeDataLabelTranslate = function(node, ctm, labelPosition,
        labelBBox) {
        var pathData = d3.select(node.childNodes[0]).datum();
        var startAngle = pathData.startAngle;
        var endAngle = pathData.endAngle;

        var innerRadius = pathData.innerRadius;
        var outerRadius = pathData.outerRadius;
        var mAngle = (startAngle + endAngle) / 2;
        var sinLabelAngle = Math.sin(mAngle - Math.PI / 2);
        var cosLabelAngle = Math.cos(mAngle - Math.PI / 2);
        var labelCenterX, labelCenterY;

        if (this._options.isDonut) {
            labelCenterX = (innerRadius + outerRadius) / 2 * cosLabelAngle;
            labelCenterY = (innerRadius + outerRadius) / 2 * sinLabelAngle;
        } else {
            labelCenterX = 0.5 * outerRadius * cosLabelAngle;
            labelCenterY = 0.5 * outerRadius * sinLabelAngle;
        }

        labelCenterX += ctm.e;
        labelCenterY += ctm.f;

        return [labelCenterX - (labelBBox.x + labelBBox.width / 2),
            labelCenterY - (labelBBox.y + labelBBox.height / 2)
        ];
    };

    return PieDataLabels;
});

define('sap/viz/chart/components/renderers/PieRenderer',[
    'sap/viz/framework/common/util/SVG',
    'sap/viz/framework/common/util/DataGraphics'
], function(SVG, DataGraphics) {
        return function(config) {
            var graphic = config.graphic;
            var sectors = SVG.create("path");

            var innerRadius = 0;
            if (graphic.innerRadius) {
                innerRadius = graphic.innerRadius;
            }

            var path = d3.svg.arc().innerRadius(innerRadius).outerRadius(graphic.outerRadius).
                    startAngle(graphic.startAngle).endAngle(graphic.endAngle)();

            var fill = config.effectManager.register({
                drawingEffect : graphic.drawingEffect,
                graphType : 'sector',
                direction : 'vertical',
                radius : graphic.outerRadius,
                fillColor: graphic.color
            });
            sectors.setAttribute("fill", fill);
            sectors.setAttribute("d", path);
            DataGraphics.setContext(sectors, {
                innerRadius: graphic.innerRadius,
                outerRadius: graphic.outerRadius,
                startAngle: graphic.startAngle,
                endAngle: graphic.endAngle
            });
            return sectors;
        };
    });

define('sap/viz/chart/components/util/ContextUtil',[], function Setup() {

    var ContextUtil = {

        isEqualArray: function(src, target) {
            if (!src || !target) {
                return false;
            }
            var equal = true;
            if (src.length === target.length && target.length > 0) {
                for (var i = 0; i < src.length; i++) {
                    if (src[i] !== target[i]) {
                        equal = false;
                        break;
                    }
                }

            } else {
                equal = false;
            }
            return equal;

        },
        getUniqueFieldName: function(fieldObj) {
            if (!fieldObj) {
                return null;
            }
            var fieldName = null;
            if (fieldObj.hasOwnProperty("id")) {
                fieldName = fieldObj.id;

            } else if (fieldObj.hasOwnProperty("name")) {
                fieldName = fieldObj.name;
            }
            return fieldName;
        },
        getContextObjByFieldsArray: function(contextArray, fieldsArray) {
            if (!contextArray || !fieldsArray || (contextArray && contextArray.length < 1) || (fieldsArray &&
                fieldsArray.length < 1)) {
                return null;
            }
            var contextObj = null;

            if (contextArray && fieldsArray) {
                var contextLength = contextArray.length;
                var fieldsLength = fieldsArray.length;

                if (contextLength >= fieldsLength && fieldsLength > 0) {
                    for (var i = 0; i < contextLength; i++) {
                        var context = contextArray[i];
                        if (context && context.length > 0) {
                            var found = false;
                            for (var j = 0; j < context.length; j++) {
                                var contextDetail = context[j];
                                if (contextDetail && contextDetail.length > 0 && contextDetail.length ===
                                    fieldsLength) {
                                    if (ContextUtil.isEqualArray(contextDetail, fieldsArray)) {
                                        found = true;
                                    } else {
                                        if (found) {
                                            for (var m = 0; m < fieldsLength; m++) {
                                                if (!contextObj) {
                                                    contextObj = {};
                                                }
                                                if (fieldsArray[m]) {
                                                    contextObj[fieldsArray[m]] = context[j][m];
                                                }
                                            }
                                            break;
                                        }
                                    }
                                } else {
                                    break;
                                }
                            }
                            if (found) {
                                break;
                            }

                        } else {
                            break;
                        }
                    }
                }

            }
            return contextObj;

        },
        filterDimensionContext: function(array, context) {
            if (!array || !context) {
                return null;
            }

            var ret = null;
            if (array.length > 0) {
                for (var key in context) {
                    if (context.hasOwnProperty(key)) {
                        if (!ret) {
                            ret = {};
                        }
                        var isDimension = true;
                        for (var i = 0; i < array.length; i++) {
                            if (key === array[i]) {
                                array.splice(i, 1);
                                isDimension = false;
                                break;
                            }
                        }
                        if (!isDimension) {
                            continue;
                        }
                        ret[key] = context[key];
                    }
                }
            }
            return ret;

        },

        getDimensionKeyAndValueString: function(dimensionObj) {
            if (!dimensionObj) {
                return null;
            }
            var ret = null;
            if (dimensionObj && typeof dimensionObj === 'object') {
                var count = 0;
                for (var propertyName in dimensionObj) {
                    if (dimensionObj.hasOwnProperty(propertyName)) {
                        var item = propertyName + "=" + dimensionObj[propertyName];
                        if (item) {
                            ++count;
                            if (count > 1) {
                                ret = ret + "&" + item;
                            } else {
                                ret = item;
                            }
                        }
                    }
                }
            }
            return ret;
        },

        getDimensionKeyAndValueStringFromAxes: function(axes, index) {
            if (!axes || !axes._data || !axes._fields) {
                return null;
            }
            var ret = null;
            if (axes._data.length > 0 && axes._fields.length > 0 && index < axes._data.length) {

                var fLength = axes._fields.length;
                var fields = axes._fields;
                var data = axes._data;
                if (data[index] && data[index].val) {
                    var i = 0;
                    var propertyValue = null;
                    var propertyName = null;
                    var fieldUniqueName = ContextUtil.getUniqueFieldName(fields[i]);
                    for (; i < fLength; i++) {
                        if (fields[i] && fieldUniqueName) {
                            if (!ret) {
                                ret = {};
                            }

                            propertyName = fieldUniqueName;
                            propertyValue = data[index].val[i];
                            ret[propertyName] = propertyValue;
                        }

                    }
                }
            }

            return ret;
        },

        isEmptyObj: function(obj) {
            if (!obj) {
                return true;
            }
            var ret = true;
            if (obj) {
                for (var prop in obj) {
                    if (obj.hasOwnProperty(prop)) {
                        ret = false;
                        break;
                    }
                }
            }
            return ret;
        },
        getHighlightContextIndexOfAxes: function(axes, highlightContext) {
            if (!axes || !highlightContext || ContextUtil.isEmptyObj(highlightContext)) {
                return -1;
            }
            var index = -1;
            if (axes && axes._data && axes._data.length > 0 && axes._fields && axes._fields.length > 0) {
                var fields = axes._fields;
                var fLength = fields.length;
                var i = 0;
                var data = axes._data;


                var highlightcontextString = this.getDimensionKeyAndValueString(highlightContext);

                var getContextString = function(axes, index) {
                    var ret = null;
                    for (var i = 0; i < fLength; i++) {
                        var fieldUniqueName = ContextUtil.getUniqueFieldName(axes._fields[i]);
                        if (fieldUniqueName) {
                            var tmpString = fieldUniqueName + "=" + axes._data[index].val[i];
                            if (i > 0) {
                                ret = ret + "&" + tmpString;
                            } else {
                                ret = tmpString;
                            }
                        }
                    }
                    return ret;
                };

                if (data && data.length > 0 && fLength) {
                    for (; i < data.length; i++) {
                        if (highlightcontextString === getContextString(axes, i)) {
                            index = i;
                            break;
                        }

                    }
                }

            }
            return index;
        },

        equalCtx: function(ctx1, ctx2) {
            var keys1 = Object.keys(ctx1),
                keys2 = Object.keys(ctx2);
            return (keys1.length > 0) && keys1.every(function(key) {
                return ctx1[key] === ctx2[key];
            });
        },

        match: function(configCtx, dpCtx) {
            if (!configCtx) {
                return false;
            }
            if (!Array.isArray(configCtx)) {
                configCtx = [configCtx];
            }

            return configCtx.some(function(ctx) {
                if (!ctx) {
                    return true;
                }

                return ContextUtil.equalCtx(ctx, dpCtx);
            });
        },

        getContextInfo: function(context, configs) {
            // var ctx = context.ctx;
            var ctx = context;

            if (!Array.isArray(configs)) {
                configs = [configs];
            }

            var defaultResult;
            for (var j = 0, length = configs.length; j < length; j++) {
                var configItem = configs[j],
                    configItemCtx = configItem.ctx,
                    defaultParas = configItem.paras;
                if (!configItemCtx) {
                    defaultResult = defaultParas;
                }
            }

            var currentParas = this._parameters,
                isUpdated, contextNum = -1,
                number, paraNum;
            for (var i = 0, len = configs.length; i < len; i++) {
                var config = configs[i],
                    configCtx = config.ctx,
                    paras = config.paras;
                if (!configCtx) { // Handle ctx undefined case
                    paraNum = i;
                } else if (ContextUtil.match(configCtx, ctx)) {
                    number = 0;
                    for (var m in configCtx) { // Get context key number
                        if (configCtx.hasOwnProperty(m)) {
                            number++;
                        }
                    }
                    if (contextNum < number) { // Get most detailed context
                        contextNum = number;
                        paraNum = i;
                    }
                }
            }
            if (configs[paraNum]) {
                return configs[paraNum].paras;
            }
            return defaultResult;
        }

    };
    return ContextUtil;
});
define('sap/viz/chart/components/plots/PiePlot',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/framework/common/util/SVG',
    'sap/viz/chart/components/datalabels/PieDataLabels',
    'sap/viz/chart/components/plots/BasePlot',
    'sap/viz/chart/components/plots/ScaleHandler',
    'sap/viz/chart/components/renderers/PieRenderer',
    'sap/viz/framework/common/util/Constants',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/util/NumberUtils',
    'sap/viz/framework/common/util/DataGraphics',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/chart/components/util/ContextUtil',
    "sap/viz/chart/components/util/DataPointUtils",
    'sap/viz/framework/common/format/FormatManager'
], function Setup(oo, SVG, PieDataLabels, BasePlot, ScaleHandler, PieRenderer, Constants, ObjectUtils, 
        NumberUtils, DataGraphics, TypeUtils, ContextUtil, DataPointUtils,
        FormatManager) {
    /**
     * To initialize PiePlot object.
     *
     * @name PiePlot
     * @constructor
     */
    var PiePlot = function(runtime, options) {
        PiePlot.superclass.constructor.apply(this, arguments);
        this._dataPointRenderer = PieRenderer;
        
    };

    oo.extend(PiePlot, BasePlot);

    PiePlot.prototype.destroy = function() {
        PiePlot.superclass.destroy.call(this);
        this._dataPointRenderer = null;
        this._padding = null;
        this._outerRadius = null;
        this._innerRadius = null;
        this._dataSeries = null;
        this._pieLayout = null;
    };
    
    PiePlot.prototype._getDataHandler = function () {
        return {
            "size": new PieDataHandler()
        };
    };

    PiePlot.prototype._getDataLabels = function (name, runtime) {
        var options = ObjectUtils.extend({}, this._options);
        options.name = name;
        return new PieDataLabels(runtime, options);
    };

    PiePlot.prototype._applyChanges = function () {
        var width = this._size.width,
            height = this._size.height;
        this._padding = calculatePadding(width, height);
        this._outerRadius = calculateOuterRadius(width, height, null, this._padding);
        this._innerRadius = this._options.isDonut ? 
                calculateInnerRadius(this._outerRadius, this._properties.get('innerRadiusRatio')) : 0;

        var isAllNegative = true, values = [];
        var rawValues = [];
        this._dataSeries = [];
        for(var i=0; i< this._data.series.length; i++){
            if(this._data.series[i] && this._data.series[i][0]){
                rawValues[i] = this._data.series[i][0].size;
                if(rawValues[i] > 0){
                    isAllNegative = false;
                }
            }
        }
        for(i=0; i< rawValues.length; i++) {
            var value = rawValues[i];
            if(NumberUtils.isNoValue(value) || (value < 0 && !isAllNegative)) {
                continue;
            }
            values.push(value);
            this._dataSeries.push(this._data.series[i]);
        }

        this._pieLayout = d3.layout.pie().sort(null)(values);
    };
    
    PiePlot.prototype._getSeries = function() {
        return this._dataSeries;
    };
    
    PiePlot.prototype._drawDataPoint = function(dpRenderer, dpConfig, dpData, position, currentId) {
        var dataPointG = PiePlot.superclass._drawDataPoint.apply(this, arguments);
        if (dpConfig.isMatchedHighlightContext !== undefined && dpConfig.isMatchedHighlightContext !== true) {
            dataPointG.setAttribute("fill-opacity", 1);
            dataPointG.setAttribute("class", '');
        }
        return dataPointG;
    };

    PiePlot.prototype._postRender = function (dataPointG) {
        var x = (this._size.width / 2);
        var inTrellis = this._options && this._options.inTrellis;
        var y = inTrellis ? (this._size.height / 2) : 
            (this._outerRadius * DEFAULT_OFFSET_FOR_SELECT_DATA + this._padding);
        dataPointG.setAttribute("transform", 'translate(' + x + ', ' + y + ')');
        if(this._options.isDonut && this._highlightContext) {
            var centerName = '';
            for(var key in this._highlightContext) {
                if(this._highlightContext.hasOwnProperty(key)) {
                    centerName += this._highlightContext[key] + '/';
                }
            }
            centerName = centerName.substr(0, centerName.length - 1);
            var formatPattern = this._properties.get('dataLabel.formatString');
            if(!TypeUtils.isExist(formatPattern)) {
                formatPattern = "0.0%";
            }
            else if (formatPattern[0] && TypeUtils.isArray(formatPattern[0])) {
                formatPattern = formatPattern[0][0];
            }
            else if(!TypeUtils.isString(formatPattern)) {
                formatPattern = formatPattern[this._data.size.metaData[0].id];
            }
            var centerValue = FormatManager.format((this._highlightContextPosition.endAngle - 
                    this._highlightContextPosition.startAngle) / (2 * Math.PI), formatPattern);
            var centerRendererConfig = {
                    centerName : centerName,
                    centerValue : centerValue,
                    properties : this._properties.get(),
                };
            dataPointG.appendChild(renderCenter.call(this, centerRendererConfig, this._highlightContext));
        }
    };

    PiePlot.prototype._getDataLabelInfo = function (node) {
        var pathData = d3.select(node.childNodes[0]).datum();
        var startAngle = pathData.startAngle;
        var endAngle = pathData.endAngle;

        return {
            key: this._data.size.metaData[0].id,
            value: (endAngle - startAngle) / (2 * Math.PI)
        };
    };

    PiePlot.prototype._computeDataLabelTranslate = function (node, ctm, labelPosition,
        labelBBox) {
        var pathData = d3.select(node.childNodes[0]).datum();
        var startAngle = pathData.startAngle;
        var endAngle = pathData.endAngle;

        var innerRadius = pathData.innerRadius;
        var outerRadius = pathData.outerRadius;
        var mAngle = (startAngle + endAngle) / 2;
        var sinLabelAngle = Math.sin(mAngle - Math.PI / 2);
        var cosLabelAngle = Math.cos(mAngle - Math.PI / 2);
        var labelCenterX, labelCenterY;

        if (this._options.isDonut) {
            labelCenterX = (innerRadius + outerRadius) / 2 * cosLabelAngle;
            labelCenterY = (innerRadius + outerRadius) / 2 * sinLabelAngle;
        } else {
            labelCenterX = 0.5 * outerRadius * cosLabelAngle;
            labelCenterY = 0.5 * outerRadius * sinLabelAngle;
        }

        labelCenterX += ctm.e;
        labelCenterY += ctm.f;

        return [labelCenterX - (labelBBox.x + labelBBox.width / 2),
            labelCenterY - (labelBBox.y + labelBBox.height / 2)
        ];
    };

    PiePlot.prototype._getPosition = function (seriesIndex, itemIndex, data) {
        return this._pieLayout[seriesIndex];
    };

    PiePlot.prototype._buildData = function (dpConfig) {
        var graphic = dpConfig.graphic;
        return {
            color: graphic.color,
            midAngle: graphic.startAngle / 2 + graphic.endAngle / 2,
            r: graphic.outerRadius
        };
    };

    PiePlot.prototype._buildConfig = function (data, position, context) {
        var color = this._data.color.scale.scale(data.color);
        var isMatchedHighlightContext;
        if(this._options.isDonut) {
            var highlightContext = this._properties.get('highlight.highlightContext');
            if(highlightContext && highlightContext.length > 0) {
                highlightContext = highlightContext[0];
                isMatchedHighlightContext = ContextUtil.equalCtx(highlightContext, context);
		
                if (isMatchedHighlightContext === true) {
                    this._highlightContext = highlightContext;
                    if(this._highlightContextPosition)
                    {
                        this._highlightContextPosition.data += position.data;
                        this._highlightContextPosition.value += position.value;
                        this._highlightContextPosition.endAngle = position.endAngle;
                    }
                    else
                    {
                        this._highlightContextPosition = position;
                    }
                } else {
                    color = this._properties.get('highlight.unhighlightSliceColor');
                }
            }                
        }
        return {
            graphic: {
                startAngle: position.startAngle,
                endAngle: position.endAngle,
                innerRadius: this._innerRadius,
                outerRadius: this._outerRadius,
                color: color,
                drawingEffect: this._properties.get('drawingEffect')
            },
            ctx: context,
            isMatchedHighlightContext : isMatchedHighlightContext,
            effectManager: this.runtime().effectManager()
        };
    };
    
    PiePlot.prototype.supportExportToContentType = function (arg) {
        if (arg === "svg" && 
            (!this._hasLegend() || this._positionOfLegend() === "right" || this._positionOfLegend() === "left")) {
            return true;
        }
        return false;
    };
    PiePlot.prototype._positionOfLegend = function () {
        var svg = d3.select("svg.v-m-root").node();
        var pie = d3.select(svg).select(".v-m-main .v-m-plot .v-pie").node();
        var legend = d3.select(svg).select(".v-m-legends").node();

        var rectPie = pie.getBoundingClientRect();
        var rectLegend = legend.getBoundingClientRect();
        rectPie.top = rectPie.bottom - rectPie.height;
        rectLegend.top = rectLegend.bottom - rectLegend.height;

        if (rectLegend.top > rectPie.bottom) { 
        //If legend's top is lower than Pie's bottom, it's clear that lengend is at below of Pie.
            return "down";
        } else {
            if (rectLegend.left > rectPie.right) { 
            //If legend's left side bigger than Pie's right side, it's clear that legend is at the right of Pie.
                return "right";
            }

            if (rectLegend.right > rectPie.left) { 
            //It's hard to judge whether Legend locates at above or left side of Pie, 
            //but up case is critical. If Legend's right side extends Pie's left side, it's a clear up case, 
            //other cases could be recognized as left case.
                return "up";
            } else {
                return "left";
            }
        }
    };

    PiePlot.prototype._hasLegend = function () {
        if (!d3.select("svg.v-m-root").select(".v-m-legends .v-content").empty()) {
            return true;
        }
        return false;
    };
    PiePlot.prototype.exportContent = function (arg) {
        var EMPTY_SVG = "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\"/>";
        var svgStr = EMPTY_SVG;
        var hasTitle = function () {
            if (!d3.select("svg.v-m-root").select(".v-m-title .v-title.viz-title-label").empty()) {
                return true;
            }
            return false;
        };

        if (arg && arg["type"] && arg["type"] === "svg") {
            var svg = d3.select("svg.v-m-root").node().cloneNode(true);
            var pie = d3.select(svg).select(".v-m-main .v-m-plot .v-pie").node().cloneNode(true);
            var title = d3.select(svg).select(".v-m-title").node().cloneNode(true);
            var legend = d3.select(svg).select(".v-m-legends").node().cloneNode(true);

            var legendHeight = (+d3.select(legend).select(".v-m-legend .v-bound").attr("height"));
            var legendWidth = (+d3.select(legend).select(".v-m-legend .v-bound").attr("width"));
            var titleHeight = 0;

            var headPadding = 24;
            var legendPadding = 30;

            if (hasTitle()) {
                titleHeight = (+d3.select(title).select(".v-bound").attr("height"));
                titleHeight = titleHeight + headPadding;
            }

            var pieData = this._pie_pieWrapperData(this._pie_data);
            var pieHeight;

            if (pieData.length) {
                pieHeight = pieData[0].or * 2;
            } else {
                //Logger.error("error on getting the pie data");
                return svgStr;
            }

            var pieD = pieHeight * 1.1;
            legendPadding = pieHeight * 0.1;

            var newSvg = document.createElement("svg");

            d3.select(newSvg).attr("xmlns", "http://www.w3.org/2000/svg");

            if (arg && arg.hideTitleLegend) {
                d3.select(pie).attr("transform", "translate(" + (+pieD / 2) + "," + (+pieD / 2) + ")");
                d3.select(newSvg).attr("viewBox", "0" + " " + "0" + " " + (pieD) + " " + (pieD));
            } else {
                if (!this._hasLegend()) {
                    d3.select(pie).attr("transform", "translate(" + (+pieD / 2) + "," +
                     (+pieD / 2 + titleHeight) + ")");
                    legendPadding = 0;
                } else {
                    var transPie = "";
                    var transLegend = "";
                    var ratio = pieHeight / legendHeight;
                    if (pieHeight < legendHeight) { //Scale pie              
                        pieD = pieD / ratio;
                        transPie = "scale(" + (1 / ratio) + ")";
                    }
                    if (this._positionOfLegend() === "right") {
                        transPie = "translate(" + (+pieD / 2) + "," + (+pieD / 2 + titleHeight) +
                         ")" + transPie;
                        transLegend = "translate(" + (+pieD + legendPadding) + "," + (+titleHeight + 
                            headPadding) + ")";
                    } else if (this._positionOfLegend() === "left") {
                        transPie = "translate(" + (+pieD / 2 + legendWidth + legendPadding) + "," +
                         (+pieD / 2 + titleHeight) + ")" + transPie;
                        transLegend = "translate(" + "0" + "," + (+titleHeight + headPadding) + ")";
                    }
                    d3.select(pie).attr("transform", transPie);
                    d3.select(legend).attr("transform", transLegend);
                }

                if (hasTitle()) {
                    //Translate the title to center
                    d3.select(title).attr("transform", "translate(" + ((legendWidth + pieD) / 2) + 
                        "," + headPadding + ")");
                    d3.select(title).select(".v-m-title .v-title.viz-title-label").attr("x", 0);
                    d3.select(title).select(".v-m-title .v-title.viz-title-label").attr("y", 0);
                    newSvg.appendChild(title);
                }

                newSvg.appendChild(legend);

                d3.select(newSvg).attr("viewBox", "0" + " " + "0" + " " +
                 (legendWidth + legendPadding + pieD) + " " + (pieD + titleHeight));
            }

            newSvg.appendChild(pie);
            d3.select(newSvg).attr("width", arg["width"]);
            d3.select(newSvg).attr("height", arg["height"]);
            d3.select(newSvg).attr("preserveAspectRatio", "xMidYMid meet");
            d3.select(newSvg).attr("text-rendering", "geometricPrecision");

            //Add a flag for css, to be replaced or removed.
            d3.select(newSvg).append("style").text("^@@##$$^");

            try {
                svgStr = new XMLSerializer().serializeToString(newSvg);
            } catch (e) {
                //Logger.error("error on exporting the svg document : ", e.message);
            }
            var clippath = d3.select(newSvg)[0][0].getElementsByTagName('clipPath');
            var reg;
            //Change viewbox to viewBox;
            reg = /viewbox/g;
            svgStr = svgStr.replace(reg, "viewBox");
            reg = /preserveaspectratio/g;
            svgStr = svgStr.replace(reg, "preserveAspectRatio");

            for (var num = 0; num < clippath.length; num++) {
                reg = new RegExp(clippath[num].id, "g");
                svgStr = svgStr.replace(reg, 'clipPath-' + ObjectUtils.guid());
            }
            // fix the bug in IE
            var subSvgLength = svgStr.search('>') + 1;
            var subSvgStr = svgStr.substr(0, subSvgLength);
            // Transform 'NS1:xmlns:xlink' to 'xmlns:xlink' in IE
            reg = /\w+:\w+:\w+/g;
            subSvgStr = subSvgStr.replace(reg, function (item) {
                var word = item.split(':');
                return word[1] + ':' + word[2];
            });
            // Clear empty URI of Non-default namespace declarations in IE
            reg = /\s\S*:NS\S*/g;
            subSvgStr = subSvgStr.replace(reg, '');

            svgStr = subSvgStr + svgStr.substr(subSvgLength);
            //fix the 'feMerge' bug in network chart by removing them
            reg = /<feMerge>.*<\/feMerge>/g;
            svgStr = svgStr.replace(reg, '');
        }
        return svgStr;
    };

    
    var defaultPaddingValue = 6,
        horizontalMarginRatio = 2.414;
    
    // for sectorMoveOffset in PieBehaviorHelper.js when select data point event occurs
    var DEFAULT_OFFSET_FOR_SELECT_DATA = 1.08;
    
    var calculatePadding = function(w, h) {
        var padding;
        var boundary = Math.min(w, h);
        if (boundary < defaultPaddingValue * 2) {
            if (boundary < (defaultPaddingValue / 4) * 2) {
                if (boundary < (defaultPaddingValue / 8) * 2) {
                    padding = 0;
                } else {
                    padding = defaultPaddingValue / 8;
                }
            } else {
                padding = defaultPaddingValue / 4;
            }
        } else {
            padding = defaultPaddingValue;
        }
        return padding;
    };

    var calculateOuterRadiusByHeight = function (h, padding) {
        return (h / 2 - padding) / DEFAULT_OFFSET_FOR_SELECT_DATA;
    };

    var calculateOuterRadiusByWidth = function (w, padding) {
        var rCandidate = Math.max(w / 2 / (1 + 1 / horizontalMarginRatio), padding * horizontalMarginRatio);
        return Math.min(rCandidate, w / 2 - padding);
    };

    var calculateOuterRadius = function (w, h, maxRadius, padding) {
        if (maxRadius) {
            return Math.min(h / 2, w / 2);
        }
        return Math.min(calculateOuterRadiusByHeight(h, padding), calculateOuterRadiusByWidth(w, padding));
    };

    var calculateInnerRadius = function (outerRadius, innerRadiusRatio) {
        if(!TypeUtils.isNaN(innerRadiusRatio)) {
            return outerRadius * innerRadiusRatio;
        }
        return outerRadius / horizontalMarginRatio;
    };
    
    var createHighlightTextNode = function(parent, text, property, styleName) {
        var DEFAULT_LINE_HEIGHT = 20;
        var data = document.createTextNode(text);
        var tspan = SVG.create("tspan");
        var offset = property && property.hasOwnProperty("fontSize") ? 
                parseFloat(property["fontSize"]) / 2 : DEFAULT_LINE_HEIGHT/2;
        tspan.setAttribute("class", styleName);
        tspan.appendChild(data);
        parent.appendChild(tspan);
        
        return {"node": tspan, "offset": offset};
    };
    
    var renderCenter = function(config, highlightContext) {
        var DONUT_CENTER_NAME_CLASS = "v-donut-centername",
        DONUT_CENTER_VALUE_CLASS = "v-donut-centervalue",
        DONUT_CENTER_NAME = "centerName",
        DONUT_CENTER_VALUE = "centerValue",
        DONUT_HIGHLIGHT = "highlight";
        var LINE_SPACE = 6;
        var props = config.properties;
        var text = SVG.create("text");
        var centerNameNode, centerValueNode, centerNameOffset = 0, centerValueOffset = 0;
        var ret, property;
        var customizedColor, contextInfos = props.highlight.contextInfos;
        if(contextInfos && contextInfos.length > 0) {
            for(var i = 0; i < contextInfos.length; i++) {
                if(ContextUtil.equalCtx(contextInfos[i].ctx, highlightContext)) {
                    customizedColor = contextInfos[i].paras.color;
                    break;
                }
            }
        }
    
        if (props.highlight.centerName.visible) {
            property = props[DONUT_HIGHLIGHT][DONUT_CENTER_NAME]['style'];
            ret = createHighlightTextNode(text, config.centerName, property, DONUT_CENTER_NAME_CLASS);
            if (ret) {
                centerNameNode = ret.node;
                centerNameOffset = ret.offset;
                centerNameNode.style.fill = customizedColor ? customizedColor : property["color"];
                centerNameNode.style.fontFamily =  property["fontFamily"];
                centerNameNode.style.fontSize =  property["fontSize"];
                centerNameNode.style.fontWeight =  property["fontWeight"];
                centerNameNode.style.fontStyle =  property["fontStyle"];
            }
        }
        if (props.highlight.centerValue.visible) {
            property = props[DONUT_HIGHLIGHT][DONUT_CENTER_VALUE]['style'];
            ret = createHighlightTextNode(text, config.centerValue, property, DONUT_CENTER_VALUE_CLASS);
            if (ret) {
                centerValueNode = ret.node;
                centerValueOffset = ret.offset;
                centerValueNode.style.fill = (customizedColor === null || customizedColor === undefined) ? 
                        property["color"] : customizedColor;
                centerValueNode.style.fontFamily =  property["fontFamily"];
                centerValueNode.style.fontSize =  property["fontSize"];
                centerValueNode.style.fontWeight =  property["fontWeight"];
                centerValueNode.style.fontStyle =  property["fontStyle"];
            }
        }
        if (centerNameNode) {
            centerNameNode.setAttribute("x", 0);
            centerNameNode.setAttribute("y", centerNameOffset - centerValueOffset - LINE_SPACE/2);
        }
        if (centerValueNode) {
            centerValueNode.setAttribute("x", 0);
            centerValueNode.setAttribute("y", centerNameOffset + centerValueOffset + LINE_SPACE/2);
        }
        
        text.setAttribute("text-anchor", "middle");
        return text;
    };

    var PieDataHandler = function () {};

    PieDataHandler.prototype.reset = function () {
        this._sum = 0;
    };

    PieDataHandler.prototype.getBase = function (index, value) {
        return this._sum;
    };

    PieDataHandler.prototype.add = function (index, value) {
        this._sum += value;
        return this._sum;
    };

    PieDataHandler.prototype.destroy = function() {
        this._sum = null;
    };
    return PiePlot;
});

define('sap/viz/chart/components/datalabels/ScatterDataLabels',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/chart/components/datalabels/DataLabels',
    "sap/viz/chart/components/util/DataPointUtils"
], function Setup(oo, DataLabels, DataPointUtils) {

    /**
     * To initialize ScatterDataLabels object.
     *
     * @name ScatterDataLabels
     * @constructor
     */
    var ScatterDataLabels = function(runtime, options) {
        ScatterDataLabels.superclass.constructor.apply(this, arguments);
        this._labelPosition = "up";
    };

    oo.extend(ScatterDataLabels, DataLabels);

    ScatterDataLabels.prototype._getDataLabelInfo = function(node) {
        var ctx = DataPointUtils.getContext(node);
        var key = this._data.valueAxis2.metaData[0].id;
        return {
            key: key,
            value: ctx[key]
        };
    };

    return ScatterDataLabels;
});

define('sap/viz/chart/components/renderers/ScatterRenderer',["sap/viz/framework/common/util/SVG", 'sap/viz/chart/components/util/DrawUtil'], function(SVG, DrawUtil) {
    return function(config) {
        var scatter = SVG.create("path");
        var DEFAULTMARKERSTYLE = {
            'stroke-width': 1
        };
        var graphic = config.graphic;
        var opacity = graphic && graphic.overallOpacity !== undefined ?
                graphic.overallOpacity : 0.8;
        var parameter = {
            drawingEffect: graphic.drawingEffect,
            fillColor: graphic.fill,
            graphType: graphic.shape,
            direction: 'vertical',
            rx: graphic.width / 2,
            ry: graphic.height / 2,
            borderWidth: 1,
            node: d3.select(scatter),
            visibility: "visible"
        };
        if (undefined !== graphic.fillOpacity) {
            parameter.fillOpacity = (graphic.fillOpacity >= 0 && graphic.fillOpacity <= 1) ? 
                    graphic.fillOpacity : 1;
        }
        if (undefined !== graphic.borderColor) {
            parameter.borderColor = graphic.borderColor;
        }

        DrawUtil.drawGraph(parameter, config.effectManager).attr('opacity', opacity);
        return scatter;
    };
});
define('sap/viz/chart/components/plots/ScatterPlot',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/framework/scale/ValueScale',
    'sap/viz/framework/common/util/Constants',
    'sap/viz/chart/components/util/DrawUtil',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/NumberUtils',
    'sap/viz/chart/components/datalabels/ScatterDataLabels',
    'sap/viz/chart/components/plots/BasePlot',
    'sap/viz/chart/components/plots/ScaleHandler',
    'sap/viz/chart/components/renderers/GridlineRenderer',
    'sap/viz/chart/components/renderers/ScatterRenderer',
    'sap/viz/framework/common/util/SVG',
    "sap/viz/chart/components/util/DataPointUtils"
], function Setup(oo, ValueScale, Constants, DrawUtil, TypeUtils, NumberUtils, ScatterDataLabels, BasePlot,
    ScaleHandler, GridlineRenderer, ScatterRenderer, SVG, DataPointUtils) {

    var MARK_SIZE = 10,
        MIN_MARK_SIZE = 4,
        MAX_MARK_SIZE = 32,
        DATAPOINT_BORDER_COLOR = '#ffffff';

    /**
     * To initialize ScatterPlot object.
     *
     * @name ScatterPlot
     * @constructor
     */
    var ScatterPlot = function(runtime, options) {
        ScatterPlot.superclass.constructor.apply(this, arguments);
        this._dataPointRenderer = ScatterRenderer;
    };

    oo.extend(ScatterPlot, BasePlot);

    ScatterPlot.prototype.destroy = function() {
        ScatterPlot.superclass.destroy.call(this);
        this._dataPointRenderer = null;
        this._selection = null;
    };
    
    ScatterPlot.prototype._getXHandlers = function() {
        return [ScaleHandler.getValueScaleHandler("valueAxis", {
            isHorizontal: true,
            alignment: "right"
        })];
    };

    ScatterPlot.prototype._getYHandlers = function() {
        return [ScaleHandler.getValueScaleHandler("valueAxis2", {
            isHorizontal: false
        })];
    };
    
    ScatterPlot.prototype._getDataLabels = function(name, runtime) {
        return new ScatterDataLabels(runtime, {
            name: name
        });
    };
    
    ScatterPlot.prototype._getColor = function(data){
        var color = null;
        if(this._data.color){
            var domain = data.color ? data.color.slice(0,1) : data.color;
            color = this._data.color.scale.scale(domain);
        }
        return color;
    };

    ScatterPlot.prototype.zoom = function(scale) {

        this._realSize.width = this._size.width * scale;
        this._realSize.height = this._size.height * scale;
        this._applyChanges();
        var selection = this._selection.select(".v-plot-main");
        this._drawGridlines(this._selection);
        this._updateDatapoints(selection);
    };

    ScatterPlot.prototype._updateDatapoints = function(parent) {
        var series = this._getSeries();
        var seiresLength = series.length;
        var dataPointG = parent.select("." + Constants.CSS.CLASS.DATAPOINT_GROUP).node();
        for (var dhID in this._dataHandler) {
            if (this._dataHandler[dhID].reset) {
                this._dataHandler[dhID].reset();
            }
        }
        var currentId;
        var countID=0;
        for (var seriesIndex = 0; seriesIndex < seiresLength; seriesIndex++) {
            var seriesItem = series[seriesIndex];
            if (!seriesItem) {
                continue;
            }
            var dpRenderer = this._getDataPointRenderer(seriesIndex);
            if (!dpRenderer) {
                continue;
            }
            for (var itemIndex = 0; itemIndex < seriesItem.length; itemIndex++) {
                var data = seriesItem[itemIndex];
                if (!data) {
                    continue;
                }
                var position = this._getPosition(seriesIndex, itemIndex, data);
                if (!position) {
                    continue;
                }
                //FIXME: Use raw data id here instead of an inner id.
                currentId = countID++;
                var currentDp = DataPointUtils.find(dataPointG, currentId);
                var context = DataPointUtils.getContext(currentDp);
                var dpConfig = this._buildWrapperConfig(data, position, context);
                this._updateDatapoint(currentDp, dpRenderer, dpConfig, position);
                if (this._seriesRenderer) {
                    this._seriesRenderer.updateDataPoint(seriesIndex, itemIndex, dpConfig,
                        position);
                }
            }
        }
        if (this._seriesRenderer) {
            this._seriesRenderer.update(dataPointG);
        }
        this._dataLabels.updatePosition(parent);
    };

    ScatterPlot.prototype._updateDatapoint = function(dataPointG, dpRenderer, dpConfig,
        position) {
        var showNegativeValues = this._properties.get('showNegativeValues');
        if (TypeUtils.isExist(showNegativeValues) && false === showNegativeValues && dpConfig.data.negativeValue) {
            return null;
        }
        if (TypeUtils.isExist(dpConfig.data.isNoValue) && true === dpConfig.data.isNoValue) {
            return null;
        }
        if (dpRenderer.update && TypeUtils.isFunction(dpRenderer.update)) {
            dpRenderer.update(dataPointG, dpConfig);
        }
        if (position.hasOwnProperty("x") && position.hasOwnProperty("y")) {
            dataPointG.setAttribute("transform", 'translate(' + position.x + ', ' + position.y +
                ')');
        }
    };

    ScatterPlot.prototype._drawGridlines = function(parent) {
        var size = this._realSize;
        var direction = Constants.DIRECTION.HORIZONTAL;
        var props = this._properties.get('gridline');
        var range = [size.height, 0];
        var scale = new ValueScale(this._data.valueAxis2.scale.getDomain(), range);
        scale.setTickHint(this._data.valueAxis2.tickHint);
        GridlineRenderer.drawValueGridline(parent, size.width, size.height, scale, props, direction,
            this.runtime().effectManager());
    };

    ScatterPlot.prototype._getPosition = function(seriesIndex, itemIndex, data) {
        if(NumberUtils.isNoValue(data.valueAxis) || NumberUtils.isNoValue(data.valueAxis2) ){
            return null;
        }
        return ScatterPlot.superclass._getPosition.apply(this, arguments);
    };

    ScatterPlot.prototype._buildConfig = function(data, position, context) {
        var markerSize = this._properties.get('markerSize');
        markerSize = TypeUtils.isExist(markerSize) && markerSize <= MAX_MARK_SIZE && markerSize >= MIN_MARK_SIZE ?
            markerSize : MARK_SIZE;
        var config = ScatterPlot.superclass._buildConfig.apply(this, arguments);
        config.graphic.width = markerSize;
        config.graphic.height = markerSize;
        var shapePalette = this._properties.get("shapePalette") || [];
        var shape = shapePalette[0] ? shapePalette[0] : "circle";
        if (data.hasOwnProperty("shape")) {
            shape = this._data.shape.scale.scale(data.shape ? data.shape.slice(0,1) : null);
        }
        config.graphic.borderColor = DATAPOINT_BORDER_COLOR;
        config.graphic.shape = shape;
        return config;
    };

    ScatterPlot.prototype._buildData = function(dpConfig) {
        return {
            color: dpConfig.graphic.fill,
            shape: dpConfig.graphic.shape
        };
    };

    return ScatterPlot;
});

define('sap/viz/chart/components/datalabels/BubbleDataLabels',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/chart/components/datalabels/ScatterDataLabels',
    "sap/viz/chart/components/util/DataPointUtils",
    "sap/viz/framework/common/lang/LangManager",
    "sap/viz/chart/components/util/TextUtils",
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/framework/common/format/FormatManager"
], function Setup(oo, ScatterDataLabels, DataPointUtils, LangManager, TextUtils, TypeUtils, FormatManager) {

    /**
     * To initialize BubbleDataLabels object.
     *
     * @name BubbleDataLabels
     * @constructor
     */
    var ID_PRIMARY_VALUES = "valueAxis";
    var ID_SECONDARY_VALUES = "valueAxis2";
    var ID_BUBBLE_WIDTH = "bubbleWidth";
    var ID_REGION_COLOR = "color";
    var ID_REGION_SHAPE = "shape";

    var BubbleDataLabels = function(runtime, options) {
        BubbleDataLabels.superclass.constructor.apply(this, arguments);
        this._labelPosition = "inside";
    };

    oo.extend(BubbleDataLabels, ScatterDataLabels);

    BubbleDataLabels.prototype.destroy = function() {
        BubbleDataLabels.superclass.destroy.call(this);
        this._labelPosition = null;
        this._timeBindingId = null;
        this._datalabel_type = null;
    };
    
    BubbleDataLabels.prototype.setTimeBindingId = function (val) {
        this._timeBindingId = val;
    };

    BubbleDataLabels.prototype._getDataLabelInfo = function(node) {
        var ctx = DataPointUtils.getContext(node);
        this._datalabel_type = this._properties.get("type");

        if (this._data.hasOwnProperty(this._datalabel_type) && this._data[this._datalabel_type].metaData) {
            var key = this._data[this._datalabel_type].metaData[0].id,
                value = ctx[key];
            if(value === null){
                value = undefined;
            }
            return {
                key: key,
                value: value
            };
        } else {
            return {key: null, value: undefined};
        }
    };


	BubbleDataLabels.prototype._getFormattedDataLabel = function(dataLabelText, dataLabelCtx, dataLabelInfo) {
        var text = '';
        if (this._datalabel_type === ID_PRIMARY_VALUES  && this._timeBindingId) {  
            return FormatManager.format(new Date(dataLabelInfo.value), "dd/mm/yyyy hh:mm");
        }
        var metaData, temp, len;
        if (this._data.hasOwnProperty(this._datalabel_type) && this._data[this._datalabel_type].metaData) {
            metaData = this._data[this._datalabel_type].metaData;
            len = metaData ? metaData.length : 0;
        }

        for (var i = 0; i < len; i++) {
            temp = dataLabelCtx[metaData[i].id];
            if (this._datalabel_type === ID_REGION_COLOR || this._datalabel_type === ID_REGION_SHAPE) {
                text += TypeUtils.isString(temp) || !TypeUtils.isNaN(temp) ? temp : LangManager.get('IDS_ISNOVALUE');
            } else {
                text += TypeUtils.isNaN(temp) ? LangManager.get('IDS_ISNOVALUE') : dataLabelText;
            }
            if (i < len - 1) {
                text += '-';
            }
        }
        return text;
	};

	BubbleDataLabels.prototype._processDataLabelRendererConfig = function(config, dp) {
        var shapeBBox = this._fixBBoxWhenInvisible(dp),
            style = this._properties.get("style"),
            truncatedText;
        var respectShapeWidth = this._properties.get("respectShapeWidth");
        if (respectShapeWidth) {
            if ((this._datalabel_type === ID_PRIMARY_VALUES && !this._timeBindingId) || 
                this._datalabel_type === ID_SECONDARY_VALUES || 
                this._datalabel_type === ID_BUBBLE_WIDTH) {
                var fontSize = style.fontSize;
                if(!TypeUtils.isNaN(fontSize)) {
                    fontSize += 'px';
                }
                var labelSize = TextUtils.fastMeasure(config.text, fontSize, style.fontWeight, style.fontFamily);
                if (labelSize.width > shapeBBox.width) {
                    config.text = '';
                }
                return;
            }

            truncatedText = TextUtils.ellipsis(config.text, undefined, shapeBBox.width, config.styles.cssString);
            if (truncatedText !== config.text && truncatedText.indexOf('...') >= 0 && truncatedText.length < 6) {
                truncatedText = '';      
            }
            config.text = truncatedText;
        }
	};


    return BubbleDataLabels;
});

define('sap/viz/chart/components/plots/BubblePlot',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/chart/components/util/DrawUtil',
    'sap/viz/framework/common/util/NumberUtils',
    'sap/viz/chart/components/plots/ScatterPlot',
    'sap/viz/framework/common/util/SVG',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/common/util/Constants',
    'sap/viz/chart/components/renderers/ScatterRenderer',
    'sap/viz/chart/components/datalabels/BubbleDataLabels',
    'sap/viz/framework/scale/SizeScaleUtil'
], function Setup(oo, DrawUtil, NumberUtils, ScatterPlot, SVG, TypeUtils, Constants,
    ScatterRenderer, BubbleDataLabels, SizeScaleUtil) {

    /**
     * To initialize BubblePlot object.
     *
     * @name BubblePlot
     * @constructor
     */
    var BubblePlot = function(runtime, options) {
        BubblePlot.superclass.constructor.apply(this, arguments);

    };

    oo.extend(BubblePlot, ScatterPlot);

    var MIN_MARKER_SIZE = 4;

    BubblePlot.prototype._buildConfig = function(data, position, context) {
        var config = BubblePlot.superclass._buildConfig.apply(this, arguments);
        var width = MIN_MARKER_SIZE,
            height = MIN_MARKER_SIZE;
        if (data.hasOwnProperty("bubbleWidth")) {
            if(null !== data.bubbleWidth && NumberUtils.isNoValue(data.bubbleWidth)) {
                config.data.isNoValue = true;
            }
            height = width = this._widthScale(data.bubbleWidth);
        }
        if (data.hasOwnProperty("bubbleHeight")) {
            if(null !== data.bubbleHeight && NumberUtils.isNoValue(data.bubbleHeight)) {
                config.data.isNoValue = true;
            }
            height = this._heightScale(data.bubbleHeight);
        }
        config.graphic.width = Math.max(MIN_MARKER_SIZE, width);
        config.graphic.height = Math.max(MIN_MARKER_SIZE, height);
        var negativeValue = false;
        if (data.bubbleWidth < 0) {
            config.graphic.fillOpacity = 0;
            config.graphic.overallOpacity = 1;
            config.graphic.borderColor = config.graphic.fill;
            negativeValue = true;
        }
        config.data.negativeValue = negativeValue;
        return config;
    };

    BubblePlot.prototype.destroy = function() {
        BubblePlot.superclass.destroy.call(this);
        this._widthScale = null;
    };
    
    BubblePlot.prototype._getDataLabels = function(name, runtime) {
        return new BubbleDataLabels(runtime, {
            name: name
        });
    };

    BubblePlot.prototype.setSizeScale = function(sizeScale) {
        this._widthScale = sizeScale;
    };

    BubblePlot.prototype.getWidthScale = function() {
        return this._widthScale;
    };

    BubblePlot.prototype._drawDataPoint = function(dpRenderer, dpConfig, dpData, position, currentId) {
        var showNegativeValues = this._properties.get('showNegativeValues');
        if(TypeUtils.isExist(showNegativeValues) && false === showNegativeValues && dpConfig.data.negativeValue) {
            return null;
        }
        if(TypeUtils.isExist(dpConfig.data.isNoValue) && true === dpConfig.data.isNoValue) {
            return null;
        }
        return BubblePlot.superclass._drawDataPoint.apply(this, arguments);
    };

    BubblePlot.prototype._buildData = function(dpConfig) {
        return {
            width: dpConfig.graphic.width,
            height: dpConfig.graphic.height,
            color: dpConfig.graphic.fill,
            shape: dpConfig.graphic.shape,
            fillOpacity: dpConfig.graphic.fillOpacity,
            borderColor : dpConfig.graphic.borderColor
        };
    };

    return BubblePlot;
});

define('sap/viz/chart/components/util/FillPatternUtils',[ 'sap/viz/framework/common/util/SVG','sap/viz/framework/scale/RGBA' ], function Setup(SVG, RGBA) {
    var CLASS_DEFS_CONTAINER = "v-m-root";
    var DEFS_ID = "defs-diagonalHatch";
    var PREFIX = "diagonalHatch-";
    var Utils = {};
    Utils.patternize = function(color) {
        var defs = document.getElementById(DEFS_ID);
        if (!defs) {
            var ctn = document.getElementsByClassName(CLASS_DEFS_CONTAINER)[0];
            defs = SVG.create("defs");
            defs.setAttribute("id", DEFS_ID);
            ctn.appendChild(defs);
        }

        var rgba = new RGBA();
        color = rgba.from(color).toHex();
        var patternId = PREFIX + color.replace(/#/, ""), pattern = document.getElementById(patternId);

        if (!pattern) {
            var path = SVG.create("path");
            pattern = SVG.create("pattern");

            path.setAttribute("d", "M2,0L5,0L0,5L0,2L2,0 M7,2L7,5L5,7L2,7L7,2");
            path.setAttribute("fill", color);
            path.setAttribute("fill-opacity", 1);

            pattern.setAttribute("id", patternId);
            pattern.setAttribute("patternUnits", "userSpaceOnUse");
            pattern.setAttribute("width", 7);
            pattern.setAttribute("height", 7);

            pattern.appendChild(path);
            defs.appendChild(pattern);
        }

        return "url(#" + patternId + ")";
    };

    return Utils;
});
define('sap/viz/chart/components/plots/BulletPlot',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/chart/components/util/DrawUtil',
    'sap/viz/framework/common/util/SVG',
    'sap/viz/chart/components/plots/BasePlot',
    'sap/viz/chart/components/plots/ScaleHandler',
    'sap/viz/chart/components/plots/DataHandler',
    'sap/viz/chart/components/plots/ItemScaleHandler',
    'sap/viz/chart/components/renderers/SeriesRenderer',
    'sap/viz/chart/components/renderers/PathRenderer',
    "sap/viz/framework/common/util/DataGraphics",
    "sap/viz/chart/components/util/DataPointUtils",
    'sap/viz/framework/common/util/RuleUtil',
    'sap/viz/framework/common/util/NameColorUtils',
    'sap/viz/chart/components/renderers/BarRenderer',
    'sap/viz/chart/components/util/FillPatternUtils',
    'sap/viz/framework/common/util/NumberUtils',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/util/Constants',
    'sap/viz/framework/scale/ValueScale',
    'sap/viz/chart/components/renderers/GridlineRenderer',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/chartmodel/DataPoint',
    'sap/viz/framework/common/util/ArrayUtils',
    'sap/viz/framework/common/util/UADetector'
], function Setup(oo, DrawUtil, SVG, BasePlot, ScaleHandler, DataHandler, ItemScaleHandler, SeriesRenderer,
    PathRenderer, DataGraphics, DataPointUtils, RuleUtil, NameColorUtils, BarRenderer, FillPatternUtils, NumberUtils,
    ObjectUtils, Constants, ValueScale, GridlineRenderer, TypeUtils, DataPoint, ArrayUtils, UADetector) {
        
            var BARPERCENTAGE = {
                FORECASTWIDTH : 0.6,
                PRIMARYONLY : 0.7143 * 0.6,
                TARGETWIDTH : 0.6,
                PRIMARYWIDTH : 0.5714 * 0.6
            };

            var BulletPlot = function(context, options) {
                options = options || {
                    isHorizontal: true
                };
                BulletPlot.superclass.constructor.apply(this, arguments);
                
            };

            oo.extend(BulletPlot, BasePlot);

            BulletPlot.prototype._getCategoryWidth = function() {
                return this._data.categoryAxis.scale.getRangeBand() *
                  (this.isHorizontal() ? this._realSize.height : this._realSize.width);

            };

            BulletPlot.prototype._getScaleValue = function(value) {
                return this._data.valueAxis.scale.scale(value) * 
                  (this.isHorizontal() ? this._realSize.width : this._realSize.height);
            };

            BulletPlot.prototype.isHorizontal = function() {
                return (this._options.isHorizontal === true);
            };
         
            BulletPlot.prototype.zoom = function(scale) {
                this._realSize.width = this._size.width * scale;
                this._realSize.height = this._size.height * scale;
                this._applyChanges();
                var selection = this._selection.select(".v-plot-main");
                this._drawGridlines(selection);
                this._updateDatapoints(selection);
            };

            function determineGap(type, actualVal, targetVal) {

                if (NumberUtils.isNoValue(actualVal) || NumberUtils.isNoValue(targetVal) ||
                        Math.abs(actualVal - targetVal) <= 2) {
                    return false;
                }
                if (type === 'both' && actualVal != targetVal) {
                    return true;
                } else if (type === 'positive' && actualVal > targetVal) {
                    return true;
                } else if (type === 'negative' && actualVal < targetVal) {
                    return true;
                } else {
                    return false;
                }
            }

            BulletPlot.prototype._buildWrapperConfig = function(graphic, context) {
                var semanticMgr = this.runtime().semanticManager();
                var result = semanticMgr.analyzeDataPoint(context);
                if (result == null) {
                    if (graphic) {
                        graphic.fill = NameColorUtils.convertColor(graphic.fill);
                    }
                    return graphic;
                }

                if (result.color) {
                    if (graphic) {
                        graphic.fill = NameColorUtils.convertColor(result.color);
                    }
                  
                }
                return graphic;
            };
            
            BulletPlot.prototype.getPreferredSize = function () {
                var props = this._properties;
                var isHorizontal = this.isHorizontal();
                if (props.get('isFixedDataPointSize')) {
                    var origCategroyWidth = (isHorizontal ? this._size.height : this._size.width) /
                         this._data.categoryAxis.rowArray.length * 
                        BARPERCENTAGE.TARGETWIDTH;
                    var minWidth = props.get("dataPointSize.min");
                    //maxWidth = props.get("dataPointSize.max");
                    if(origCategroyWidth < minWidth){
                        this._realSize[(isHorizontal ? 'height' : 'width')] = minWidth * 
                            this._data.categoryAxis.rowArray.length / BARPERCENTAGE.TARGETWIDTH;
                    }
                
                }
                return this._realSize;
            };

            BulletPlot.prototype._drawGridlines = function(parent) {
                var isHorizontal = this.isHorizontal();
                var direction = isHorizontal ? Constants.DIRECTION.VERTICAL : Constants.DIRECTION.HORIZONTAL;
                var props = this._properties.get('gridline');
                var range = isHorizontal ? [0, this._realSize.width] : [this._realSize.height, 0];
                var scale = this._gridlineScale = new ValueScale(this._data.valueAxis.scale.getDomain(), range);
                scale.setTickHint(this._data.valueAxis.tickHint);
                GridlineRenderer.drawValueGridline(parent, this._realSize.width, this._realSize.height,
                        scale, props, direction, this.runtime().effectManager());
                //2014-08-25 bullet does not have zeroline feature
            };

            BulletPlot.prototype._updateBulletBar = function(barNode, config) {
                barNode.setAttribute("width", config.width < 1 && config.width !== 0 ? 1 : config.width);
                barNode.setAttribute("height", config.height < 1 && config.height !== 0 ? 1 : config.height);
                barNode.setAttribute("transform", "translate(" + config.x + "," + config.y + ")");
                return barNode;
            };

            BulletPlot.prototype._updateBulletLine = function(lineNode, config) {
                lineNode.setAttribute("x1", "" + config.x1);
                lineNode.setAttribute("x2", "" + config.x2);
                lineNode.setAttribute("y1", "" + config.y1);
                lineNode.setAttribute("y2", "" + config.y2);
                lineNode.setAttribute("stroke-width", config.width);
                return lineNode;
            };
            
            BulletPlot.prototype._drawDatapoints = function (parent){
                this._renderDatapoints(parent, false);
            };

            BulletPlot.prototype._updateDatapoints = function (parent){
                this._renderDatapoints(parent, true);
            };

            BulletPlot.prototype._renderDatapoints = function(parent, isUpdate) {
                var isHorizontal = this.isHorizontal();
                var series = this._data.series;
                var categoryAxis = this._data.categoryAxis;
                var categoryLen = categoryAxis.rowArray.length;
                var gapVisible = this._properties.get("gap.visible");
                var gapType = this._properties.get("gap.type");
                var currentCategoryPos = 0;
                var categoryWidth = this._getCategoryWidth();
                var barSize = categoryWidth;
                if (this._properties.get('isFixedDataPointSize')){
                    var maxSize = this._properties.get("dataPointSize.max");
                    if(barSize * BARPERCENTAGE.TARGETWIDTH > maxSize){
                        barSize = maxSize / BARPERCENTAGE.TARGETWIDTH;
                    }
                }
                var extraSpace = (categoryWidth - barSize) / 2;

                var valueAxis = series["valueAxis"];
                var targetValues = series["targetValues"];
                var forecastValues = series["forecastValues"];

                var contextValues = this._data.context;
                var colorpalette = this._properties.get("colorPalette");
                var extra_data = { };

                var primaryPercentage = BARPERCENTAGE.PRIMARYONLY;
                if(forecastValues  && forecastValues.length > 0 ){
                    primaryPercentage = BARPERCENTAGE.PRIMARYWIDTH;
                }
                var ctxSemantic = {};
                var forecastColor = this._properties.get("forecastColor");
                if(TypeUtils.isArray(forecastColor)){
                    forecastColor = forecastColor[0];
                }
                var width;
                var dataPointGroup;
                var sematicColorMeta = this._data.valueAxis.metaData[0].id;

                if(isUpdate){
                    dataPointGroup = parent.select("." + Constants.CSS.CLASS.DATAPOINT_GROUP).node();
                }else{
                    dataPointGroup = SVG.create("g");
                    dataPointGroup.setAttribute("class", Constants.CSS.CLASS.DATAPOINT_GROUP);
                    parent.node().appendChild(dataPointGroup);
                }


                for ( var i = 0; i < categoryLen; ++i) {
                    extra_data = {};
                    var hasData = false;
                    var metaData = categoryAxis.metaData;
                    if(valueAxis[i] === undefined){
                        currentCategoryPos += categoryWidth;
                        continue;
                    }
                    for ( var j = 0; j < metaData.length; ++j) {
                        ctxSemantic[metaData[j].id] = categoryAxis.values[j][i];
                    }
                    
                    var minPos = Number.POSITIVE_INFINITY, maxPos = Number.NEGATIVE_INFINITY;

                    var currentDp;
                    if(isUpdate){
                        currentDp = DataPointUtils.find(dataPointGroup, i);
                    }else{
                        currentDp = SVG.create("g");
                        currentDp.setAttribute("class", Constants.CSS.CLASS.DATAPOINT + ' ' + 
                            Constants.CSS.CLASS.MORPHABLEDATAPOINT + ' ' +
                                Constants.CSS.CLASS.DATAPOINTDEFAULT);
                    }
                    var config = {};
                    if(isHorizontal){
                        config.x = 0;
                    } else {
                        config.y = 0;
                    }

                    //draw or update forecast value
                    if (forecastValues && forecastValues[i] &&
                            !NumberUtils.isNoValue(forecastValues[i][0])) {
                        var forecastNode;
                        hasData = true;
                        width = this._getScaleValue(forecastValues[i][0]);
                        if(isHorizontal){
                            config.width = Math.abs(width);
                            config.height= BARPERCENTAGE.FORECASTWIDTH * barSize;
                            config.x = width > 0 ? 0 : width;
                            config.y = currentCategoryPos + extraSpace + 
                               barSize * (1 - BARPERCENTAGE.FORECASTWIDTH) / 2;
                        } else{
                            config.height = Math.abs(width);
                            config.width = BARPERCENTAGE.FORECASTWIDTH * barSize;
                            config.x = currentCategoryPos + extraSpace + 
                               barSize * (1 - BARPERCENTAGE.FORECASTWIDTH) / 2;
                            config.y = this._realSize.height - width;
                        }
                      
                        maxPos = Math.max(maxPos, width);
                        minPos = Math.min(minPos, width);

                        if(isUpdate){
                            forecastNode = currentDp.querySelector(".v-forecast");
                            forecastNode = this._updateBulletBar(forecastNode, config);
                        }else{
                            config.fill = NameColorUtils.convertColor(forecastColor);
                            forecastNode = BarRenderer({
                                graphic : config,
                                effectManager : this.runtime().effectManager()
                            });
                            forecastNode.setAttribute("transform", 'translate(' + config.x + ', ' + config.y + ')');
                            forecastNode.setAttribute("class", "v-forecast");
                            currentDp.appendChild(forecastNode);
                        }
                    }

                    // darw primary and additional values
                    var actualWidth = 0;
                    var actualValue = valueAxis[i].values[0];
                    var primaryNode;
                    if(isHorizontal){
                        config.y =  currentCategoryPos + extraSpace + barSize * (1 - primaryPercentage) / 2;
                        config.height = primaryPercentage * barSize;
                        config.width = 0;
                    }else{
                        config.x =  currentCategoryPos + extraSpace + barSize * (1 - primaryPercentage) / 2;
                        config.width = primaryPercentage* barSize;
                        config.height = 0;
                    }
                    if (!NumberUtils.isNoValue(actualValue) ) {
                        hasData = true;
                        width = this._getScaleValue(actualValue);
                        ctxSemantic[sematicColorMeta] = actualValue;

                        if(isHorizontal) {
                            config.width  = Math.abs(width);
                            config.x = width > 0 ? 0 : width;
                        }else{
                            config.height = Math.abs(width);
                            config.y = this._realSize.height - width;
                        }

                        if(isUpdate){
                            primaryNode = currentDp.querySelector(".v-primary");
                            primaryNode = this._updateBulletBar(primaryNode, config);
                        }else{
                            config.fill = NameColorUtils.convertColor(colorpalette[0]);
                            this._buildWrapperConfig(config, ctxSemantic);
                            extra_data['v-primary'] = config.fill;
                            primaryNode = BarRenderer({
                                graphic : config,
                                effectManager : this.runtime().effectManager()
                            });
                            primaryNode.setAttribute("transform", 'translate(' + config.x + ', ' + config.y + ')');
                            primaryNode.setAttribute("class", "v-primary");
                            primaryNode.setAttribute("stroke", "#FFFFFF");
                            primaryNode.setAttribute("stroke-width", "1");
                            currentDp.appendChild(primaryNode);                            
                        }

                        actualWidth = width;
                        maxPos = Math.max(maxPos, width);
                        minPos = Math.min(minPos, width);
                    }

                    if (valueAxis[i].values.length > 1 && 
                            !NumberUtils.isNoValue(valueAxis[i].values[1])) {
                        var addNode;
                        hasData = true;
                        var addVal = valueAxis[i].values[1];
                        if(!NumberUtils.isNoValue(actualValue)){
                            addVal += actualValue;
                        }
                        var accWidth =  this._getScaleValue(addVal);
                        maxPos = Math.max(maxPos, accWidth);
                        minPos = Math.min(minPos, accWidth);
                     
                        if(isHorizontal){
                            config.width =  Math.abs(accWidth - actualWidth);
                            config.x = Math.min(accWidth, actualWidth);
                        }else{
                            config.height =  Math.abs(accWidth - actualWidth);
                            config.y = this._realSize.height - Math.max(accWidth, actualWidth);
                        }

                        if(isUpdate){
                            addNode = currentDp.querySelector(".v-additional");
                            addNode = this._updateBulletBar(addNode, config);
                        }else{
                            config.fill = NameColorUtils.convertColor(colorpalette[1]);
                            extra_data['v-additional'] = config.fill;
                            addNode = BarRenderer({
                                graphic : config,
                                effectManager : this.runtime().effectManager()
                            });
                            addNode.setAttribute("transform", 'translate(' + config.x + ', ' + config.y + ')');
                            addNode.setAttribute("class", "v-additional");
                            addNode.setAttribute("stroke", "#FFFFFF");
                            addNode.setAttribute("stroke-width", "1");
                            currentDp.appendChild(addNode);                        
                        }
                    }

                    // draw target related shapes

                    if (targetValues && 
                            !NumberUtils.isNoValue(targetValues[i][0])) {
                        var targetValue = targetValues[i][0];
                        hasData = true;
                        var targetPos = this._getScaleValue(targetValue);
                        maxPos = Math.max(maxPos, targetPos);
                        minPos = Math.min(minPos, targetPos);
                        //gapVisible = true;
                        var showGap = determineGap(gapType, actualWidth, targetPos);
                        //draw or update gap value
                        if (gapVisible && showGap &&!NumberUtils.isNoValue(actualValue)) {
                            var gapNode;
                            if(isHorizontal){
                                config.width = (targetValue <= actualValue) ? actualWidth - targetPos :
                                    targetPos - actualWidth - 2;
                                config.height = barSize * primaryPercentage - 1;
                                config.x = (targetValue <= actualValue ? targetPos : actualWidth + 1);
                                config.y = currentCategoryPos +  extraSpace + 
                                    barSize * (1 - primaryPercentage) / 2 + 0.5;
                            }else{
                                config.width = barSize * primaryPercentage - 1;
                                config.height = (targetValue <= actualValue) ? actualWidth - targetPos :
                                    targetPos - actualWidth - 2;
                                config.x = currentCategoryPos +  extraSpace + 
                                        barSize * (1 - primaryPercentage) / 2 + 0.5;
                                config.y = targetValue > actualValue ? this._realSize.height - targetPos :
                                    this._realSize.height - (actualWidth + 1);
                            }
                            
                            if(isUpdate){
                                gapNode = currentDp.querySelector(".v-gap");
                                gapNode = this._updateBulletBar(gapNode, config);
                            }else{
                                config.fill = targetValue > actualValue ? FillPatternUtils.patternize(
                                        NameColorUtils.convertColor(this._properties.get("gap.negativeColor"))) :
                                            NameColorUtils.convertColor(this._properties.get("gap.positiveColor"));
                             
                                gapNode = BarRenderer({
                                    graphic : config,
                                    effectManager : targetValue > actualValue ? null : this.runtime().effectManager()
                                });
                              
                                gapNode.setAttribute("transform", 'translate(' +
                                  config.x + ', ' + config.y  + ')');
                              
                                gapNode.setAttribute("class", "v-gap");
                                currentDp.appendChild(gapNode);                        
                            }
                        }

                        var lineConfig = {};
                        var lineWidth = 2;
                        var shadowWidth = 0;
                        var shadowColor = this._properties.get("target.shadowColor");
                        if(shadowColor !== "") {
                            shadowWidth = 1;
                        }
                        if(targetPos >= 0 && targetPos < (lineWidth + shadowWidth)) {
                            targetPos = (lineWidth + shadowWidth);
                        }
                        //draw or update shadow value
                        if(shadowWidth > 0){
                            var shadowNode;
                            if(isHorizontal){
                                lineConfig.x1 = targetPos - lineWidth - shadowWidth / 2;
                                lineConfig.x2 = lineConfig.x1;
                                lineConfig.y1 = currentCategoryPos + extraSpace +
                                    barSize * (1 - BARPERCENTAGE.TARGETWIDTH) / 2;
                                lineConfig.y2 = currentCategoryPos + extraSpace +
                                    barSize * (1 + BARPERCENTAGE.TARGETWIDTH) / 2;
                            }else{
                                lineConfig.y1 = this._realSize.height -
                                    (targetPos - lineWidth - shadowWidth / 2);
                                lineConfig.y2 = lineConfig.y1;
                                lineConfig.x1 = currentCategoryPos + extraSpace +
                                    barSize * (1 - BARPERCENTAGE.TARGETWIDTH) / 2;
                                lineConfig.x2 = currentCategoryPos + extraSpace +
                                    barSize * (1 + BARPERCENTAGE.TARGETWIDTH) / 2;
                            }
                            lineConfig.width = shadowWidth;
                            if(isUpdate){
                                shadowNode = currentDp.querySelector(".v-target-shadow");
                                shadowNode = this._updateBulletLine(shadowNode, lineConfig);
                            }else{
                                shadowNode = SVG.create("line");
                                shadowNode = this._updateBulletLine(shadowNode, lineConfig);
                                shadowNode.setAttribute("stroke", shadowColor);
                                if(!UADetector.isMobile()){
                                    shadowNode.setAttribute("shape-rendering", "crispEdges");
                                }
                                shadowNode.setAttribute("class", "v-target-shadow");
                                currentDp.appendChild(shadowNode);
                            }
                        }
 
                        //draw or update target value
                        var targetNode;
                        if(isHorizontal){
                            lineConfig.x1 = targetPos - lineWidth / 2;
                            lineConfig.x2 = lineConfig.x1;
                            lineConfig.y1 = currentCategoryPos + extraSpace +
                                barSize * (1 - BARPERCENTAGE.TARGETWIDTH) / 2;
                            lineConfig.y2 = currentCategoryPos + extraSpace +
                                barSize * (1 + BARPERCENTAGE.TARGETWIDTH) / 2;
                        }else{
                            lineConfig.y1 = this._realSize.height - (targetPos + lineWidth / 2);
                            lineConfig.y2 = lineConfig.y1;
                            lineConfig.x1 = currentCategoryPos + extraSpace +
                                barSize * (1 - BARPERCENTAGE.TARGETWIDTH) / 2;
                            lineConfig.x2 = currentCategoryPos + extraSpace +
                                barSize * (1 + BARPERCENTAGE.TARGETWIDTH) / 2;
                        }
                        lineConfig.width = lineWidth;

                        if(isUpdate){
                            targetNode = currentDp.querySelector(".v-target");
                            targetNode = this._updateBulletLine(targetNode, lineConfig);
                        }else{
                            targetNode = SVG.create("line");
                            targetNode = this._updateBulletLine(targetNode, lineConfig);
                            targetNode.setAttribute("stroke", this._properties.get("target.valueColor"));
                            targetNode.setAttribute("class", "v-target");
                            targetNode.setAttribute("stroke-opacity", "1");
                            if(!UADetector.isMobile()){
                                targetNode.setAttribute("shape-rendering", "crispEdges");
                            }
                            currentDp.appendChild(targetNode);
                        }
                    }

                    //draw or update event area
                    if(hasData && maxPos !== Number.NEGATIVE_INFINITY){
                        var eventAreaNode;
                        var realPos = maxPos + 0.15 * categoryWidth;
                        if (realPos > this._realSize.width) {
                            realPos = this._realSize.width;
                        }
                        if(isHorizontal){
                            config.width = realPos - minPos;
                            config.height = barSize * BARPERCENTAGE.TARGETWIDTH;
                            config.x = minPos;
                            config.y = currentCategoryPos + extraSpace + 
                                barSize * (1 - BARPERCENTAGE.TARGETWIDTH) / 2;
                        }else{
                            config.width = barSize*BARPERCENTAGE.TARGETWIDTH;
                            config.height = realPos - minPos;
                            config.x = currentCategoryPos + extraSpace +
                                barSize * (1 - BARPERCENTAGE.TARGETWIDTH) / 2;
                            config.y = this._realSize.height - realPos;
                        }

                        config.fill = "transparent";
                        if(isUpdate){
                            eventAreaNode = currentDp.querySelector(".v-eventArea");
                            eventAreaNode = this._updateBulletBar(eventAreaNode, config);
                        }else{
                            eventAreaNode = BarRenderer({
                                graphic : config,
                                effectManager : this.runtime().effectManager()
                            });
                            eventAreaNode.setAttribute("transform", 'translate(' +
                                  config.x + ', ' + config.y  + ')');
                            eventAreaNode.setAttribute("class", "v-eventArea");
                            currentDp.appendChild(eventAreaNode);
                        }

                        var dp = valueAxis[i].dp;
                        DataPointUtils.setDataPointId(currentDp, dp.id);
                        DataPointUtils.setDataId(currentDp, i);
                        DataGraphics.setContext(currentDp, dp.context());
                        DataGraphics.setData(currentDp, {
                            color : extra_data
                        });
                        dataPointGroup.appendChild(currentDp);
                    }

                    currentCategoryPos += categoryWidth;
                }
            };
            
            BulletPlot.prototype.destroy = function() {
                BulletPlot.superclass.destroy.call(this);
                this._gridlineScale = null;
                this._realSize = null;
            };
            return BulletPlot;
        });

define('sap/viz/chart/components/datalabels/StackedCombinationDataLabels',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/framework/common/util/DataGraphics',
    'sap/viz/chart/components/datalabels/StackedDataLabels',
    'sap/viz/chart/components/datalabels/LineDataLabels'
], function(oo, DataGraphics, StackedDataLabels, LineDataLabels) {
    var StackedVertical = function(ctx, options) {
        StackedVertical.superclass.constructor.apply(this, arguments);
        this.isHorizontal = options.isHorizontal;
        this._labelPosition = "outside";
        this._stackedLabelPosition = "inside";
        this._lineLabelPosition = "outside";
    };
    oo.extend(StackedVertical, StackedDataLabels);

    StackedVertical.prototype._computeDataLabelTranslate = function(node) {
        if (DataGraphics.getData(node).type !== "line") {
            return StackedDataLabels.prototype._computeDataLabelTranslate.apply(this, arguments);
        } else {
            return LineDataLabels.prototype._computeDataLabelTranslate.apply(this, arguments);
        }
    };

    StackedVertical.prototype.hideConditional = function(dataLabelInfos) {
        //hide datalabels which overlap with other datapoints
        var i;
        var dataPointBoxes = new Array(dataLabelInfos.length);
        for (i = 0; i < dataLabelInfos.length; i++) {
            dataPointBoxes[i] = dataLabelInfos[i].dataPoint.getBoundingClientRect();
        }

        for (i = (dataLabelInfos.length - 1); i >= 0; i--) {
            var dataLabelinfo = dataLabelInfos[i];

            var dataLabelNode = dataLabelinfo.node;
            var dataLabelBBox = dataLabelNode.getBoundingClientRect();

            var iIndex = this.indexOfDataLabelIntersectDataPoints(dataLabelBBox, dataPointBoxes, i);

            if (iIndex !== -1) {
                if (dataLabelNode && dataLabelNode.parentNode) {
                    dataLabelNode.parentNode.removeChild(dataLabelNode);
                }
                dataLabelInfos.splice(i, 1);
            }
        }

        return StackedVertical.superclass.hideConditional.apply(this, arguments);
    };

    StackedVertical.prototype.getDataLabelDefaultPosition = function(dataPoint) {
        if (DataGraphics.getData(dataPoint).type == "line") {
            this._labelPosition = this._lineLabelPosition;
        } else {
            this._labelPosition = this._stackedLabelPosition;
        }
    };

    return StackedVertical;
});
define('sap/viz/chart/components/plots/StackedCombinationPlot',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/chart/components/util/DrawUtil',
    'sap/viz/framework/common/util/SVG',
    'sap/viz/chart/components/plots/StackedColumnPlot',
    'sap/viz/framework/chartmodel/ContextBuilder',
    'sap/viz/chart/components/plots/ScaleHandler',
    'sap/viz/chart/components/plots/DataHandler',
    'sap/viz/chart/components/plots/ItemScaleHandler',
    'sap/viz/chart/components/renderers/SeriesRenderer',
    'sap/viz/chart/components/renderers/BarRenderer',
    'sap/viz/chart/components/renderers/PathRenderer',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/chart/components/util/SeriesUtil',
    "sap/viz/chart/components/util/DataPointUtils",
    "sap/viz/framework/common/util/DataGraphics",
    'sap/viz/chart/components/datalabels/StackedCombinationDataLabels',
    'sap/viz/chart/components/datalabels/HCombinationDataLabels', 
    'sap/viz/framework/common/util/Constants',
    "sap/viz/framework/common/util/DOM"
], function Setup(oo, DrawUtil, SVG, StackedColumnPlot, ContextBuilder, ScaleHandler, DataHandler,
    ItemScaleHandler,
   SeriesRenderer, BarRenderer, PathRenderer, ObjectUtils, SeriesUtil, DataPointUtils, DataGraphics,
    StackedCombinationDataLabels, HCombinationDataLabels, Constants, DOM) {

    var LINE = "line";
    var BAR = "bar";
    var StackedCombinationPlot = function(runtime, options) {
        StackedCombinationPlot.superclass.constructor.apply(this, arguments);

        //categoryScaleHandler for stacked datapoint
        this._barCategoryAxis = ScaleHandler.getCategoryScaleHandler("categoryAxis", {
            isHorizontal: false,
            itemScaleHandler: this._getItemScaleHandler()
        });

        this._categoryScaleHandler = this._barCategoryAxis;

        this._lineDataHandler = DataHandler.getHandler();
        this._stackDataHandler = this._getDataHandler();

        this._drawZeroLineBeforeDatapoints = true;

        var semanticMgr = this.runtime().semanticManager();
        semanticMgr.bindLineStyleProperty([this._name + ".line.lineStyle", this._name + ".line.style"]);

        this._attachMarkManager();

        this.dataShapePrimaryAxisPW = this._properties.watch("dataShape.primaryAxis", 
            this._onDataShapeChange.bind(this));

        var isDualValueAxis = options && options.isDualValueAxis;
        if(isDualValueAxis){
            this.dataShapeSecondaryAxisPW = this._properties.watch("dataShape.secondaryAxis", 
                this._onDataShapeChange.bind(this));
        }
        
        this.lineMarkerShapePW = this._properties.watch("line.marker.shape", this._onDataShapeChange.bind(this));
    };

    oo.extend(StackedCombinationPlot, StackedColumnPlot);

    StackedCombinationPlot.prototype.destroy = function() {

        this.dataShapePrimaryAxisPW.remove();
        this.dataShapePrimaryAxisPW = null;
        
        if(this.dataShapeSecondaryAxisPW) {
            this.dataShapeSecondaryAxisPW.remove();
            this.dataShapeSecondaryAxisPW = null;
        }
        this.lineMarkerShapePW.remove();
        this.lineMarkerShapePW = null;

        StackedCombinationPlot.superclass.destroy.call(this);

        this._barCategoryAxis = null;
        this._categoryScaleHandler = null;
        this._realSize = null;
        this._markerD = null;

        this._lineDataHandler = null;
        this._stackDataHandler = null;
        this._reversedSeries = null;
    };
    
    StackedCombinationPlot.prototype._attachMarkManager = function() {
        var markMgr = this.runtime().markManager();
        var primaryAxis = this._properties.get("dataShape.primaryAxis");
        var lineMark = this._properties.get("line.marker.shape");

        var propRoot = this._properties.parentLevel;
        markMgr.setDefaultRestrict(lineMark);
        markMgr.setPrimaryAxisRestrict(processMark(primaryAxis, lineMark, propRoot));
        
        if(this._options && this._options.isDualValueAxis){
            var secondaryAxis = this._properties.get("dataShape.secondaryAxis");
            markMgr.setSecondaryAxisRestrict(processMark(secondaryAxis, lineMark, propRoot));
        }
    };

    function processMark(arr, lineMark, propRoot) {
        var result = [];
        if(!arr || !arr.length){
            return result;
        }
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] === LINE) {
                result.push(lineMark);
            } else {
                //we should use default shape
                var defaultMarkerShape = propRoot.get("legend.marker.shape");
                result.push(defaultMarkerShape);
            }
        }
        return result;
    }

    StackedCombinationPlot.prototype._onDataShapeChange = function() {
        this._attachMarkManager();
    };

    //categoryScaleHandler for line datapoint
    StackedCombinationPlot.prototype._getCategoryScaleHandlers = function(isHorizontal) {
        return [ScaleHandler.getCategoryScaleHandler("categoryAxis", {
            isHorizontal: isHorizontal,
            itemScaleHandler: ItemScaleHandler.get(false),
            alignment: "center"
        })];
    };

    StackedCombinationPlot.prototype._getSeriesRenderer = function() {
        return new SeriesRenderer(this._drawLine.bind(this), this._updateLine.bind(this));
    };

    StackedCombinationPlot.prototype._applyChanges = function() {
        StackedCombinationPlot.superclass._applyChanges.apply(this, arguments);
        var scale = this._data["categoryAxis"].scale;
        var range = this.isHorizontal() ? this._realSize.height : this._realSize.width;
        this._barCategoryAxis.init(scale, this._data.series.length, range);
    };

    StackedCombinationPlot.prototype._preRender = function() {
        StackedCombinationPlot.superclass._preRender.apply(this, arguments);

        var lineMarkerProps = this._properties.get("line.marker");
        if (lineMarkerProps && lineMarkerProps.visible === true) {
            var r = lineMarkerProps.size / 2;
            this._markerD = DrawUtil.createMarkerData({
                type: lineMarkerProps.shape,
                rx: r,
                ry: r,
                borderWidth: 2
            });
        }

    };

    StackedCombinationPlot.prototype._getDataShape = function(seriesIndex) {
        var series = this._reversedSeries || this._data.series;
        var items = series[seriesIndex];
        var item = null;
        for (var i = 0; i < items.length; i++) {
            item = items[i];
            if (item) {
                break;
            }
        }
        if (item) {
            var propKey = "dataShape.primaryAxis";
            if (!item.hasOwnProperty("valueAxis")) {
                propKey = "dataShape.secondaryAxis";
            }
            var dataShapes = this._properties.get(propKey);
            var index;
            if (item.color){
                index = item.color.mndIndex;
            } else if (item.color2){
                index = item.color2.mndIndex;
            } else {
                index = -1;
            }
            return dataShapes[index] || LINE;

        }
        return LINE;
    };

    StackedCombinationPlot.prototype._getXPosition = function(seriesIndex, itemIndex, data) {
        var isLine = this._getDataShape(seriesIndex) === LINE;
        if (this.isHorizontal()) {
            //value
            if (isLine) {
                this._dataHandler = {"valueAxis": this._lineDataHandler};
            } else {
                this._dataHandler = this._stackDataHandler;
            }
            var result = StackedCombinationPlot.superclass._getXPosition.apply(this, arguments);
            if (isLine) {
                return [result[0] + result[1], 0];
            } else {
                return result;
            }
        } else {
            //category
            if (isLine) {
                return StackedCombinationPlot.superclass._getXPosition.apply(this, arguments);
            } else {
                return this._getAxisPosition([this._barCategoryAxis], seriesIndex, itemIndex, data);
            }
        }
    };

    StackedCombinationPlot.prototype._getYPosition = function(seriesIndex, itemIndex, data) {
        var isLine = this._getDataShape(seriesIndex) === LINE;
        if (!this.isHorizontal()) {
            //value
            if (isLine) {
                this._dataHandler = {"valueAxis": this._lineDataHandler};
            } else {
                this._dataHandler = this._stackDataHandler;
            }
            var result = StackedCombinationPlot.superclass._getYPosition.apply(this, arguments);
            if (isLine) {
                return [result[0], 0];
            } else {
                return result;
            }
        } else {
            //category
            if (isLine) {
                return StackedCombinationPlot.superclass._getYPosition.apply(this, arguments);
            } else {
                return this._getAxisPosition([this._barCategoryAxis], seriesIndex, itemIndex, data);
            }
        }
    };

    StackedCombinationPlot.prototype._drawLine = function(seriesG, data, seriesIndex) {
        if (this._getDataShape(seriesIndex) !== LINE) {
            return 0;
        }
        var props = this._properties.get("line");
        var runtime = this.runtime();
        if (props.visible === true) {
            var context = ContextBuilder.buildSeriesContext(this._data, 
                this._data.series.length - 1 - seriesIndex, ["color", "color2"]);
            var lineRenderer = this._properties.get("line.lineRenderer");

            SeriesUtil.drawLine(seriesG, data, this._properties.get(), runtime.semanticManager(),
                runtime.effectManager(), context, lineRenderer, true);
            SeriesUtil.linkLine(data);
        }
        return 1;
    };

    StackedCombinationPlot.prototype._updateLine = function(seriesG, data, seriesIndex) {
        if (this._getDataShape(seriesIndex) !== LINE) {
            return;
        }
        if (this._properties.get("line.visible")) {
            SeriesUtil.updateLine(seriesG, data, this._properties.get("lineRenderer"));
        }
    };

    StackedCombinationPlot.prototype._updateDatapoint = function(dataPointG, dpRenderer, dpConfig,
        position) {
        StackedCombinationPlot.superclass._updateDatapoint.apply(this, arguments);
        if (position.hasOwnProperty("x") && position.hasOwnProperty("y")) {
            var translate = DataGraphics.getData(dataPointG).translate;
            if (translate) {
                translate[0] = position.x;
                translate[1] = position.y;
            }
        }
    };

    StackedCombinationPlot.prototype._buildConfig = function(data, position, context) {
        var config = StackedCombinationPlot.superclass._buildConfig.apply(this, arguments);
        config.graphic.d = this._markerD;

        if (!this._properties.get("line.marker.visible")) {
            config.graphic.opacity = 0;
        }
        return config;
    };

    StackedCombinationPlot.prototype._getDataPointRenderer = function(seriesIndex) {
        if (seriesIndex == null || this._getDataShape(seriesIndex) !== LINE){
            return StackedCombinationPlot.superclass._getDataPointRenderer.apply(this, arguments);            
        } else {
            return this._customMarkerRenderer || PathRenderer;  
        }
    };


    StackedCombinationPlot.prototype._getDataLabels = function(name, runtime) {
        var options = ObjectUtils.extend({}, this._options);
        options.name = name;
        return new StackedCombinationDataLabels(runtime, options);
    };

    StackedCombinationPlot.prototype._updateDatapoints = function(parent) {
        var series = this._reversedSeries = this._getSeries();

        var seiresLength = series.length;
        var dataPointG;
        dataPointG = parent.select("." + Constants.CSS.CLASS.DATAPOINT_GROUP).node();

        var dpRenderer;

        for (var dhID in this._stackDataHandler) {
            if (this._stackDataHandler[dhID].reset) {
                this._stackDataHandler[dhID].reset();
            }
        }

        this._lineDataHandler.reset();

        var prevData, prevId, currentId;
        var countId = 0;
        var categories = [], category;

        for (var seriesIndex = 0; seriesIndex < seiresLength; seriesIndex++) {
            var seriesItem = series[seriesIndex];
            if (seriesItem) {
                dpRenderer = this._getDataPointRenderer(seriesIndex);
                if (dpRenderer) {
                    prevData = null;
                    for (var itemIndex = 0; itemIndex < seriesItem.length; itemIndex++) {
                        var data = seriesItem[itemIndex];
                        if (data) {
                            var position = this._getPosition(seriesIndex, itemIndex, data);
                            if (position) {
                                //FIXME: Use raw data id here instead of an inner id.
                                currentId = countId++;
                                var dpConfig = this._buildWrapperConfig(data, position, data.dp.context());
                                var dpData = this._buildData(dpConfig, position, currentId, prevData, prevId);

                                if (this._getDataShape(seriesIndex) === LINE){
                                    //draw line series
                                    var dp = this._drawDataPoint(dpRenderer, dpConfig, 
                                        dpData, position, currentId, data);
                                    if (dp) {
                                        var currentDp = DataPointUtils.find(dataPointG, currentId);
                                        this._updateDatapoint(currentDp, dpRenderer, dpConfig, position);
                                        if (this._seriesRenderer) {
                                            this._seriesRenderer.updateDataPoint(seriesIndex, itemIndex, dpConfig,
                                                position, dp);
                                        }
                                    }
                                } else {
                                    //draw stacked category
                                    category = categories[itemIndex] = categories[itemIndex] || {
                                        configs: [],
                                        positions: [],
                                        currentIds: [],
                                        dataPoints: []
                                    };
                                    if (!category.node) {
                                        var dpNode = DataPointUtils.find(dataPointG, currentId);
                                        var categoryNode = dpNode;
                                        while( (categoryNode = categoryNode.parentNode) && 
                                            !DOM.hasClass(categoryNode, Constants.CSS.CLASS.STACK) ) {}
                                        category.node = categoryNode;
                                    }
                                    category.configs.push(dpConfig);
                                    category.dataPoints.push(data.dp);
                                    category.positions.push(position);
                                    category.currentIds.push(currentId);
                                }
                                prevId = currentId;
                            }
                        }
                    }
                }
            }
        }
    
        //render stacked
        dpRenderer = this._getDataPointRenderer();
        for (var i = 0; i < categories.length; i++) {
            if (categories[i]){
                category = categories[i];
                var cp = this._drawCategory(category.node, dpRenderer, category.configs, category.data,
                    category.positions, category.currentIds, category.dataPoints);
            }
        }
        
        //render line
        if (this._seriesRenderer) {
            this._seriesRenderer.update(dataPointG);
        }
    
        this._dataLabels.updatePosition(parent);
    };
    
    StackedCombinationPlot.prototype._drawDatapoints = function(parent) {
        //reverse series because of stack
        var series = this._reversedSeries = this._getSeries();
    
        var seiresLength = series.length;
        var dataPointG;
        dataPointG = SVG.create("g");
        dataPointG.setAttribute("class", Constants.CSS.CLASS.DATAPOINT_GROUP);
        var dpRenderer;
    
        if (this._seriesRenderer) {
            this._seriesRenderer.init(seiresLength);
        }
    
        for (var dhID in this._stackDataHandler) {
            if (this._stackDataHandler[dhID].reset) {
                this._stackDataHandler[dhID].reset();
            }
        }
    
        this._lineDataHandler.reset();

        var prevData, prevId, currentId;
        var countId = 0;
        var categories = [], category;
    
        for (var seriesIndex = 0; seriesIndex < seiresLength; seriesIndex++) {
            var seriesItem = series[seriesIndex];
            if (seriesItem) {
                dpRenderer = this._getDataPointRenderer(seriesIndex);
                if (dpRenderer) {
                    prevData = null;
                    for (var itemIndex = 0; itemIndex < seriesItem.length; itemIndex++) {
                        var data = seriesItem[itemIndex];
                        if (data) {
                            var position = this._getPosition(seriesIndex, itemIndex, data);
                            if (position) {
                                //FIXME: Use raw data id here instead of an inner id.
                                currentId = countId++;
                                var dpConfig = this._buildWrapperConfig(data, position, data.dp.context());
                                var dpData = this._buildData(dpConfig, position, currentId, prevData, prevId);
    
                                if (this._getDataShape(seriesIndex) === LINE){
                                    //draw line series
                                    var dp = this._drawDataPoint(dpRenderer, dpConfig, 
                                        dpData, position, currentId, data);
                                    if (dp) {
                                        if (this._seriesRenderer) {
                                            this._seriesRenderer.addDataPoint(seriesIndex, itemIndex, dpConfig,
                                                position, dp);
                                        } else {
                                            dataPointG.appendChild(dp);
                                        }
                                    }
                                } else {
                                    //draw stacked category
                                    category = categories[itemIndex] = categories[itemIndex] || {
                                        configs: [],
                                        positions: [],
                                        currentIds: [],
                                        dataPoints: []
                                    };
                                    prevData = dpData;
                                    category.data = category.data || [];
                                    category.data.push(dpData);                                       
                                    category.configs.push(dpConfig);
                                    category.dataPoints.push(data.dp);
                                    category.positions.push(position);
                                    category.currentIds.push(currentId);
                                }
                                prevId = currentId;
                            }
                        }
                    }
                }
            }
        }

        //render stacked
        dpRenderer = this._getDataPointRenderer();
        for (var i = 0; i < categories.length; i++) {
            if (categories[i]){
                category = categories[i];
                var cp = this._drawCategory(category.node, dpRenderer, category.configs, category.data,
                    category.positions, category.currentIds, category.dataPoints);
                if (cp) {
                    dataPointG.appendChild(cp);
                }
            }
        }
        
        //render line
        if (this._seriesRenderer) {
            this._seriesRenderer.render(dataPointG);
        }

        this._postRender(dataPointG);
        parent.node().appendChild(dataPointG);
        this._drawDataLabels(parent, dataPointG);
    };

    return StackedCombinationPlot;
});

define('sap/viz/chart/components/plots/PlotFactory',[
    'jquery',
    'sap/viz/chart/components/plots/LinePlot',
    'sap/viz/chart/components/plots/ColumnPlot',
    'sap/viz/chart/components/plots/CombinationPlot',
    'sap/viz/chart/components/plots/PercentagePlot',
    'sap/viz/chart/components/plots/PiePlot',
    'sap/viz/chart/components/plots/StackedColumnPlot',
    'sap/viz/chart/components/plots/BubblePlot',
    'sap/viz/chart/components/plots/ScatterPlot',
    'sap/viz/chart/components/plots/BulletPlot',
    'sap/viz/chart/components/plots/StackedCombinationPlot'
], function Setup($, LinePlot, ColumnPlot, CombinationPlot, PercentagePlot, PiePlot,
     StackedColumnPlot, BubblePlot, ScatterPlot, BulletPlot, StackedCombinationPlot) {
    var plotMapping = {
        'pie': {
            plotClazz: PiePlot,
            options: {
                isDonut: false
            }
        },
        'donut': {
            plotClazz: PiePlot,
            options: {
                isDonut: true
            }
        },
        'column': {
            plotClazz: ColumnPlot,
            options: {
                isHorizontal: false
            }
        },
        'stacked_column': {
            plotClazz: StackedColumnPlot,
            options: {
                isHorizontal: false
            }
        },
        '100_stacked_column': {
            plotClazz: PercentagePlot,
            options: {
                isHorizontal: false
            }
        },
        'bar': {
            plotClazz: ColumnPlot,
            options: {
                isHorizontal: true
            }
        }, 
        'bullet' : {
            plotClazz : BulletPlot,
            options : {
                isHorizontal : true
            }
        },
        'vertical_bullet':{
            plotClazz : BulletPlot,
            options : {
                isHorizontal : false
            }
        },
        
        'stacked_bar' : {
            plotClazz : StackedColumnPlot,
            options : {
                isHorizontal : true
            }
        },
        '100_stacked_bar': {
            plotClazz: PercentagePlot,
            options: {
                isHorizontal: true
            }
        },
        'line': {
            plotClazz: LinePlot,
            options: {
                isHorizontal: false
            }
        },
        'horizontal_line': {
            plotClazz: LinePlot,
            options: {
                isHorizontal: true
            }
        },
        'combination': {
            plotClazz: CombinationPlot,
            options: {
                isHorizontal: false
            }
        },
        'horizontal_combination': {
            plotClazz: CombinationPlot,
            options: {
                isHorizontal: true
            }
        },
        'bubble': {
            plotClazz: BubblePlot,
            options: {}
        },
        'time_bubble' : {
            plotClazz : BubblePlot,
            options : {}
        },
        'scatter': {
            plotClazz: ScatterPlot,
            options: {}
        },
        'stacked_combination': {
            plotClazz: StackedCombinationPlot,
            options: {
                isHorizontal: false
            }
        },
        'horizontal_stacked_combination': {
            plotClazz: StackedCombinationPlot,
            options: {
                isHorizontal: true
            }
        }
    };

    return {
        create: function(renderType, runtime, options) {
            var config = plotMapping[renderType];
            var opts = options ? $.extend(true, {}, config.options, options) : config.options;
            opts.name = "plotArea";
            return new config.plotClazz(runtime, opts);
        },
        getOptions: function(renderType) {
            var config = plotMapping[renderType];
            return config.options;
        }
    };

});

define('sap/viz/chart/components/plotareas/XYPlotArea',[
    'sap/viz/framework/common/util/oo',
    "sap/viz/framework/scale/ValueScale",
    "sap/viz/framework/scale/ValueScaleUtil",
    'sap/viz/chart/components/container/XYContainer',
    'sap/viz/chart/components/axis/ValueAxis',
    'sap/viz/chart/components/axis/ValueScrollbarAxis',
    'sap/viz/chart/components/axis/CategoryAxis',
    'sap/viz/chart/components/axis/CategoryScrollbarAxis',
    'sap/viz/chart/components/plots/PlotFactory',
    'sap/viz/chart/components/util/ValueAxisUtils',
    'sap/viz/chart/components/scrollbar/Scrollbar',
    'sap/viz/framework/common/util/UADetector',
    'sap/viz/framework/common/util/DataUtils',
    'sap/viz/chart/components/util/TextUtils'
], function Setup(oo, ValueScale, ValueScaleUtil, XYContainer, ValueAxis, ValueScrollbarAxis,
    CategoryAxis, CategoryScrollbarAxis, PlotFactory, ValueAxisUtils, Scrollbar, UADetector,
    DataUtils, TextUtils) {
    var XYPlotArea = function(runtime, options) {
        XYPlotArea.superclass.constructor.apply(this, arguments);
        this._init();
    };

    oo.extend(XYPlotArea, XYContainer);

    XYPlotArea.prototype._isPercentageChart = function() {
        return (this._renderType.indexOf("100_") >= 0);
    };

    XYPlotArea.prototype._isLineChart = function() {
        return (this._renderType.indexOf("line") >= 0);
    };

    XYPlotArea.prototype._isBulletChart = function() {
        return (this._renderType.indexOf("bullet") >= 0);
    };

    XYPlotArea.prototype._isColumnChart = function(){
        return (this._renderType === "column") || (this._renderType === "combination") || 
            (this._renderType === "dual_column") ;
    };

    XYPlotArea.prototype._getPlotOptions = function() {
        return null;
    };

    XYPlotArea.prototype._init = function() {
        this._plot = PlotFactory.create(this._renderType, this.runtime(), this._getPlotOptions());

        if (this._plot.isHorizontal()) {
            this._categoryAxis = new CategoryAxis(this.runtime(), {
                name: "categoryAxis"
            });
            if (this._isBulletChart()) {
                this._valueAxis = new ValueAxis(this.runtime(), {
                    name: "valueAxis"
                });
                //this._hScrollbar = null;
                this._hScrollbar = new Scrollbar(this.runtime(), {
                    name : "plotArea.scrollbar"
                });
                this.setChild("scrollbar2", this._hScrollbar, {
                    position : "bottom"
                });
            } else {
                this._valueAxis = new ValueScrollbarAxis(this.runtime(), {
                    name: "valueAxis"
                });
                this._hScrollbar = this._valueAxis.getChild("axisScrollbar").module;
            }
        } else {
            this._categoryAxis = new CategoryScrollbarAxis(this.runtime(), {
                name: "categoryAxis"
            });
            this._valueAxis = new ValueAxis(this.runtime(), {
                name: "valueAxis"
            });
            this._hScrollbar = this._categoryAxis.getChild("axisScrollbar").module;
        }
        if (this._isPercentageChart()) {
            this._valueAxis.setPercentageMode(true);
        }

        this._vScrollbar = new Scrollbar(this.runtime(), {
            name: "plotArea.scrollbar"
        });

        this.setChild("scrollbar", this._vScrollbar, {
            position: "right"
        });

        if (this._plot.isHorizontal()) {
            this.setLayoutSequence(['bottom', 'top', 'left', 'right']);
            this.setChild("valueAxis", this._valueAxis, {
                position: this._isBulletChart() ? "top" : "bottom"
            });
            this.setChild("categoryAxis", this._categoryAxis, {
                position: "left"
            });

        } else {
            this.setLayoutSequence(['left', 'right', 'bottom', 'top']);
            this.setChild("categoryAxis", this._categoryAxis, {
                position: "bottom"
            });
            this.setChild("valueAxis", this._valueAxis, {
                position: "left"
            });
        }

        this.setChild("plot", this._plot, {
            position: "center"
        });

    };

    XYPlotArea.prototype.destroy = function() {
        XYPlotArea.superclass.destroy.call(this);
        this._plot = null;
        this._hScrollbar = null;
        this._categoryAxis = null;
        this._valueAxis = null;
        this._vScrollbar = null;
    };
    
    XYPlotArea.prototype._calcValueAxisScale = function(key, range, domain) {
        var scale = this._data[key].scale;
        return ValueAxisUtils.calcScale(scale, range, {
            isLineChart: this._isLineChart(),
            domain: domain
        });
    };

    XYPlotArea.prototype._calcPercentageValueAxisScale = function(range) {
        return ValueAxisUtils.calcPercentageScale(range);
    };

    XYPlotArea.prototype.setData = function(data) {
        XYPlotArea.superclass.setData.apply(this, arguments);

        var updatedData = this.updateValueScale();
        this._categoryAxis.setData(data.categoryAxis, DataUtils.hasNegativeValue(data));

        this._plot.setData(updatedData);
    };

    XYPlotArea.prototype.updateValueScale = function() {
        var data = this._data;
        var width = this._roughSize.width;
        var height = this._roughSize.height;
        if (!data || width <= 0 || height <= 0) {
            return;
        }
        var range = [0, 1];
        if (this._plot.isHorizontal()) {
            range[1] = width;
        } else {
            range[1] = height;
        }
        range[1] *= 0.8;
        var valueAxisData;
        var newData = data;

        if (this._isPercentageChart()) {
            valueAxisData = this._calcPercentageValueAxisScale(range);
            valueAxisData.metaData = data.valueAxis.metaData;
            data.valueAxis.tickHint = valueAxisData.tickHint;
            this._valueAxis.setData(valueAxisData);
        } else if (this._isBulletChart()) {
            var options = [this._data.valueAxis.minValue, this._data.valueAxis.maxValue];
            if(options[0] === 0 && options[1] === 0){
                options = null;
            }
            valueAxisData = this._calcValueAxisScale("valueAxis", range, options);
            data.valueAxis.scale = valueAxisData.scale;
            data.valueAxis.tickHint = valueAxisData.tickHint;
            data.valueAxis.scale.setRange([0, 1]);
            this._valueAxis.setData(data.valueAxis);

        } else if (this._isColumnChart()){
            var dataLabelOpt = this._properties.get('plotArea.dataLabel');
            var fixedRangeOpt = this._properties.get('plotArea.primaryScale.fixedRange');
            var valueScale = this._data.valueAxis.scale;
            var domain = valueScale.getDomain().slice(); 
            if((!(fixedRangeOpt || valueScale.getDomainFixed()[1])) && dataLabelOpt.visible && domain && domain[1] > 0){
                var textHeight = TextUtils.fastMeasure('M', dataLabelOpt.style.fontSize, 
                    dataLabelOpt.style.fontWeight, dataLabelOpt.style.fontFamily, 
                    dataLabelOpt.style.fontStyle).height;
                var minValue = (domain[0] > 0) ? 0 : domain[0];
                domain[1] = Math.round((domain[1] * range[1] - minValue * textHeight)/(range[1] - textHeight));

                valueAxisData = this._calcValueAxisScale("valueAxis", range, [null, domain[1]]);
            } else{
                valueAxisData = this._calcValueAxisScale("valueAxis", range);    
            }
            valueAxisData.scale.setRange([0, 1]);
            valueAxisData.metaData = this._data.valueAxis.metaData;
            this._valueAxis.setData(valueAxisData);

            newData = this._cloneData({
                valueAxis: valueAxisData
            });
        } else {
            valueAxisData = this._calcValueAxisScale("valueAxis", range);
            data.valueAxis.scale = valueAxisData.scale;
            data.valueAxis.tickHint = valueAxisData.tickHint;
            data.valueAxis.scale.setRange([0, 1]);
            this._valueAxis.setData(data.valueAxis);
        }
        
        return newData;
    };

    XYPlotArea.prototype.render = function() {
        if (this._plot._properties.get('isFixedDataPointSize')) {
            var trackSize, contentSize, refSize;
            refSize = this._plot.getPreferredSize();
            if (this._plot.isHorizontal()) {
                trackSize = this._plot._size.height;
                contentSize = refSize.height;
            } else {
                trackSize = this._plot._size.width;
                contentSize = refSize.width;
            }

            if (this._plot.isHorizontal() && this._vScrollbar) {
                this._vScrollbar.setProperties({
                    trackSize: trackSize,
                    contentSize: contentSize,
                    behaviorMode: "scroll"
                });
                if(this._isBulletChart() && this._hScrollbar){
                    this._hScrollbar.setProperties({
                        behaviorMode : "scroll"
                    });
                }
            } else if (this._hScrollbar) {
                this._hScrollbar.setProperties({
                    behaviorMode: "scroll"
                });
            }
            this._categoryAxis.setRealSize(refSize);
        }
        XYPlotArea.superclass.render.apply(this, arguments);
    };

    XYPlotArea.prototype.layout = function() {
        var isVScrollbarExist, isHScrollbarExist;
        isVScrollbarExist = isHScrollbarExist = UADetector.isMobile();
        var visibility = "hidden";
        if (this._plot._properties.get('isFixedDataPointSize')) {
            visibility = "visible";
            if (this._plot.isHorizontal()) {
                isHScrollbarExist = false;
                isVScrollbarExist = true;
            } else {
                isHScrollbarExist = true;
                isVScrollbarExist = false;
            }
        }
        if (this._vScrollbar) {
            this._vScrollbar.setProperties({
                visibility: visibility,
                isExist: isVScrollbarExist
            });
        }
        if (this._hScrollbar) {
            this._hScrollbar.setProperties({
                visibility: visibility,
                isExist: isHScrollbarExist
            });
        }

        XYPlotArea.superclass.layout.apply(this, arguments);
    };

    XYPlotArea.prototype.getVScrollbar = function(){
        return this._vScrollbar;
    };

    XYPlotArea.prototype.getHScrollbar = function(){
        return this._hScrollbar;
    };

    XYPlotArea.prototype._cloneData = function(replaced) {
        var newData = {};
        var data = this._data;
        for(var i in data) {
            if (data.hasOwnProperty(i)) {
                newData[i] = data[i];
            }
        }

        for (var prop in replaced) {
            if (replaced.hasOwnProperty(prop)) {
                newData[prop] = replaced[prop];
            }
        }
        return newData;
    };

    return XYPlotArea;
});

define('sap/viz/chart/components/container/GridContainer',[
    "sap/viz/framework/common/util/oo",
    "sap/viz/framework/common/util/SVG",
    "sap/viz/framework/common/util/PositionUtil",
    "sap/viz/framework/common/util/NumberUtils",
    'sap/viz/chart/components/util/BoundUtil',
    'sap/viz/chart/components/scrollbar/Scrollbar',
    "sap/viz/chart/components/util/ClippathUtil",
    "sap/viz/chart/components/UIComponent",
    "sap/viz/framework/common/util/Constants"
], function Setup(oo, SVG, PositionUtil, NumberUtils, BoundUtil, Scrollbar, ClippathUtil, UIComponent, Constants) {
    var GRIDLINE_GROUP_CLASS_NAME = "gridcontainer_gridline";

    var verticalSpacingSize = 5, horizontalSpacingSize = 3;
    var GridContainer = function(runtime, options) {
        GridContainer.superclass.constructor.apply(this, arguments);
        this._children = [];
        this._scrollStyle = {
            thumbSize: 12,
            hasScrollingArea: true,
            isRoundCorner: false
        };

        this._clipPath = {};
        this._header = {};
    };
    oo.extend(GridContainer, UIComponent);

    GridContainer.prototype.init = function(row, column) {
        this._children = [];
        this._rowCount = row;
        this._columnCount = column;
        for (var i = 0; i < row; i++) {
            this._children[i] = [];
        }
        this._headers = {
            left: [],
            right: [],
            top: [],
            bottom: []
        };
        this._headerG = {};
        this._offset = {
            x: 0,
            y: 0
        };

        this._vScrollbar = new Scrollbar(this.runtime(), {
            name: 'plotArea.scrollbar'
        });
        this._vScrollbar.setProperties({
            isExist: true,
            onScroll: this._onVScroll.bind(this),
            style: this._scrollStyle,
            behaviorMode: 'scroll'
        });
        this._vScrollbar.setPosition("right");
        this._hScrollbar = new Scrollbar(this.runtime(), {
            name: 'plotArea.scrollbar'
        });
        this._hScrollbar.setProperties({
            isExist: true,
            onScroll: this._onHScroll.bind(this),
            style: this._scrollStyle,
            behaviorMode: 'scroll'
        });
        this._hScrollbar.setPosition("bottom");
    };

    GridContainer.prototype.destroy = function() {
        GridContainer.superclass.destroy.call(this);

        for (var index = 0; index < this._children.length; index++) {

            var childArr = this._children[index];

            childArr.forEach(function(child) {
                if (child && child.destroy) {
                    child.destroy();
                }
            });
        }
        this._children = null;
        var key;
        for (key in this._clipPath) {
            if (this._clipPath.hasOwnProperty(key)) {
                this._clipPath[key].remove();
                this._clipPath[key] = null;
                delete this._clipPath[key];
            }
        }
        this._clipPath = null;

        if (this._body) {
            this._body.remove();
        }
        this._body = null;

        if (this._bodyLayer) {
            this._bodyLayer.remove();
        }
        this._bodyLayer = null;
        this._columnCount = null;

        this._hGridline = null;
        this._vGridline = null;

        if (this._hScrollbar) {
            this._hScrollbar.destroy();
        }
        this._hScrollbar = null;

        if (this._vScrollbar) {
            this._vScrollbar.destroy();
        }
        this._vScrollbar = null;

        this._measuredSize = null;

        for (key in this._headers) {
            if (this._headers.hasOwnProperty(key)) {
                var headerArr = this._headers[key];

                headerArr.forEach(function(header) {
                    header.destroy();
                });
                this._headers[key] = null;
            }
        }
        this._headers = null;
        this._header = null;
        this._headerG = null;
        this._offset = null;
        this._scrollStyle = null;
    };

    GridContainer.prototype.updateOptions = function(options) {
        this._options = options;
    };

    GridContainer.prototype._onVScroll = function(e) {
        this._scroll({
            y: e.position
        });
    };

    GridContainer.prototype._onHScroll = function(e) {
        this._scroll({
            x: e.position
        });
    };

    GridContainer.prototype.getRowCount = function() {
        return this._rowCount;
    };

    GridContainer.prototype.getColumnCount = function() {
        return this._columnCount;
    };

    GridContainer.prototype.getHeaders = function() {
        return this._headers;
    };

    GridContainer.prototype.getChildren = function() {
        return this._children;
    };


    GridContainer.prototype.addHeaderLayer = function(position, properties, disableGridline) {
        if (!this._headers.hasOwnProperty(position)) {
            return null;
        }
        var headers = this._headers[position];
        var header = new GridContainerHeader(position, properties, this._rowCount, this._columnCount, disableGridline);
        header.setOptions(this._options);
        headers.push(header);
        return header;
    };


    GridContainer.prototype.addChild = function(child, row, column) {
        this._children[row][column] = child;
    };

    function getMaxHeaderSize(propertyManager, header, width, height){
        var maxSizeProperty = header.getMaxSizeProperty();
        var position = header.getPosition();
        var maxSize = PositionUtil.isHorizontal(position) ? height : width;
        if(maxSizeProperty){
            var maxSizeValue = propertyManager.origin.get(maxSizeProperty);
            var sizeValue = NumberUtils.getSizeValue(maxSizeValue, maxSize);
            sizeValue = sizeValue >= 0 ? sizeValue : maxSize;
            return sizeValue;
        }
        return maxSize;
    }

    GridContainer.prototype._getHeaderSize = function(headers, size, totalWidth, totalHeight) {
        var result = {
            width: 0,
            height: 0
        };
        var isHorizontal;
        for (var i = 0; i < headers.length; i++) {
            var header = headers[i];
            if (!header) {
                continue;
            }
            var maxSize = getMaxHeaderSize(this._properties, header, totalWidth, totalHeight);
            var position = header.getPosition();
            isHorizontal = PositionUtil.isHorizontal(position);
            var availableSize;
            if(isHorizontal){
                availableSize = {
                    width : size.width,
                    height : Math.min(size.height, maxSize)
                };
            } else {
                availableSize = {
                    width : Math.min(size.width,maxSize),
                    height : size.height
                };
            }
            var prefSize = header.getPreferredSize(availableSize);
            if (isHorizontal) {
                var height = Math.min(prefSize.height, size.height);
                result.height += height;
                header.setSize({
                    height: height
                });
            } else {
                var width = Math.min(prefSize.width, size.width);
                result.width += width;
                header.setSize({
                    width: width
                });
            }
        }
        result.width = result.width + (isHorizontal ? 0 :(result.width === 0 ? 0 : verticalSpacingSize) );
        result.height = result.height + (isHorizontal ? (result.height === 0 ? 0 : horizontalSpacingSize) : 0);
        return result;
    };

    function setHeaderSize(headers, size) {
        for (var i = 0; i < headers.length; i++) {
            var header = headers[i];
            if (!header) {
                continue;
            }

            header.setSize(size);
        }
    }

    GridContainer.prototype.getMinBodySize = function() {
        var enableMinSize = this._options.enableMinSize;
        var minCellHeight = enableMinSize ? this._options.cell.minHeight : 1;
        var minCellWidth = enableMinSize ? this._options.cell.minWidth : 1;

        if(this._children[0] && this._children[0][0]){
            var cell = this._children[0][0];
            var preCellSize = cell.getPreferredSize();
            if(preCellSize){
                if(!isNaN(preCellSize.height)){
                    minCellHeight = Math.max(minCellHeight, preCellSize.height);
                }
                if(!isNaN(preCellSize.width)){
                    minCellWidth = Math.max(minCellWidth, preCellSize.width);
                }
            }
        }

        return {
            height: minCellHeight * this._rowCount,
            width: minCellWidth * this._columnCount,
            cellHeight: minCellHeight,
            cellWidth: minCellWidth
        };
    };

    GridContainer.prototype.measure = function() {
        var remainSize = {
            width: this._size.width - this._scrollStyle.thumbSize,
            height: this._size.height - this._scrollStyle.thumbSize
        };

        var minBodySize = this.getMinBodySize();
        var minBodyHeight = minBodySize.height;
        var minBodyWidth = minBodySize.width;
        var minCellHeight = minBodySize.cellHeight;
        var minCellWidth = minBodySize.cellWidth;

        var totalWidth = remainSize.width;
        var totalHeight = remainSize.height;
        var leftSize = this._getHeaderSize(this._headers.left, {
            width: remainSize.width,
            height: Math.max(remainSize.height, minBodyHeight)
        }, totalWidth, totalHeight);
        remainSize.width = NumberUtils.preciseObject(remainSize.width - leftSize.width);

        var rightSize = this._getHeaderSize(this._headers.right, {
            width: remainSize.width,
            height: Math.max(remainSize.height, minBodyHeight)
        }, totalWidth, totalHeight);
        remainSize.width = NumberUtils.preciseObject(remainSize.width - rightSize.width);

        var topSize = this._getHeaderSize(this._headers.top, {
            width: Math.max(remainSize.width, minBodyWidth),
            height: remainSize.height
        }, totalWidth, totalHeight);
        remainSize.height = NumberUtils.preciseObject(remainSize.height - topSize.height);

        var bottomSize = this._getHeaderSize(this._headers.bottom, {
            width: Math.max(remainSize.width, minBodyWidth),
            height: remainSize.height
        }, totalWidth, totalHeight);
        remainSize.height = NumberUtils.preciseObject(remainSize.height - bottomSize.height);

        var cellSize = {
            width: remainSize.width / this._columnCount,
            height: remainSize.height / this._rowCount
        };
        var bodySize = remainSize;
        if (remainSize.width < minBodyWidth || remainSize.height < minBodyHeight) {
            cellSize.width = Math.max(cellSize.width, minCellWidth);
            cellSize.height = Math.max(cellSize.height, minCellHeight);
            bodySize = {
                width: NumberUtils.preciseObject(cellSize.width * this._columnCount),
                height: NumberUtils.preciseObject(cellSize.height * this._rowCount),
            };
        }

        setHeaderSize(this._headers.left, {
            height: bodySize.height
        });
        setHeaderSize(this._headers.right, {
            height: bodySize.height
        });
        setHeaderSize(this._headers.top, {
            width: bodySize.width
        });
        setHeaderSize(this._headers.bottom, {
            width: bodySize.width
        });

        var padding = this._options.cell.padding;
        this._measuredSize = {
            left: {
                width: leftSize.width,
                height: remainSize.height,
            },
            right: {
                width: rightSize.width,
                height: remainSize.height,
            },
            top: {
                width: remainSize.width,
                height: topSize.height
            },
            bottom: {
                width: remainSize.width,
                height: bottomSize.height
            },
            bodyWindow: remainSize,
            body: bodySize,
            cell: cellSize,
            cellContent: {
                width: cellSize.width - padding.left - padding.right,
                height: cellSize.height - padding.top - padding.bottom
            }
        };

        this._vScrollbar.setProperties({
            trackSize: Math.max(0, remainSize.height),
            contentSize: bodySize.height,
            visibility: bodySize.height > remainSize.height ? "visible" : "hidden"
        });

        this._hScrollbar.setProperties({
            trackSize: Math.max(0, remainSize.width),
            contentSize: bodySize.width,
            visibility: bodySize.width > remainSize.width ? "visible" : "hidden"
        });
    };

    GridContainer.prototype.getMeasuredSize = function() {
        return this._measuredSize;
    };

    GridContainer.prototype._renderHeader = function(selection, header, size, position, direction) {
        var headerLayer = selection.append("g").attr('transform', 'translate(' + position.x + ',' + position.y +
            ')').attr('class', 'v-m-axis-position-bound ' + 'v-gridcontainer-'+direction);
        this._clipPath[direction] = headerLayer;
        var clippathid;
        var width = size.width, height = size.height , left = 0, top = 0;
        if (PositionUtil.isVertical(direction)){
            width = size.width+1;
            if (direction === Constants.POSITION.LEFT){
                left = 1;
            } else{
                left = -1;
            }

        } else{
            height = size.height+1;
            if (direction === Constants.POSITION.TOP){
                top = 1;
            } else{
                top = -1;
            }
        }
        clippathid = ClippathUtil.drawClippath(headerLayer, width, height, left, top);
        headerLayer.attr('clip-path', 'url(#' + clippathid + ')');

        var headerG = SVG.create("g");
        var start = 0;
        if (direction === Constants.POSITION.LEFT && width > 0){
            start = verticalSpacingSize;
        }
        if (direction === Constants.POSITION.TOP && height > 0){
            start = horizontalSpacingSize;
        }
        var item, isHorizontal, headerSize;
        for (var i = 0; i < header.length; i++) {
            item = header[i];
            if (!item) {
                continue;
            }
            isHorizontal = PositionUtil.isHorizontal(item.getPosition());
            headerSize = item.getSize();
            start += isHorizontal ? headerSize.height : headerSize.width;
        }
        /*
         * For trellis rowAxis label align with categoryAxis first label,
         * it needs to firstly draw category/value axis, then trellis axis.
         */
        for (i = header.length -1; i >= 0; i--) {
            item = header[i];
            if (!item) {
                continue;
            }

            isHorizontal = PositionUtil.isHorizontal(item.getPosition());
            headerSize = item.getSize();
            start -= isHorizontal ? headerSize.height : headerSize.width;

            var translate = isHorizontal ? "0 , " + start : start + ", 0 ";
            var node = SVG.create("g");
            node.setAttribute('transform', 'translate(' + translate + ')');

            item.render(d3.select(node));
            headerG.appendChild(node);

        }

        headerLayer.node().appendChild(headerG);
        this._header[direction] = headerG;
        return headerG;
    };

    GridContainer.prototype._renderHeaders = function(selection, padding) {
        this._headerG.left = this._renderHeader(selection, this._headers.left, this._measuredSize.left, {
            x: 0,
            y: this._measuredSize.top.height
        }, 'left');
        this._headerG.top = this._renderHeader(selection, this._headers.top, this._measuredSize.top, {
            x: this._measuredSize.left.width,
            y: 0
        }, 'top');
        this._headerG.right = this._renderHeader(selection, this._headers.right, this._measuredSize.right, {
            x: this._measuredSize.left.width + this._measuredSize.bodyWindow.width,
            y: this._measuredSize.top.height
        }, 'right');
        this._headerG.bottom = this._renderHeader(selection, this._headers.bottom, this._measuredSize.bottom, {
            x: this._measuredSize.left.width,
            y: this._measuredSize.top.height + this._measuredSize.bodyWindow.height,
        }, 'bottom');
    };

    GridContainer.prototype._renderScrollbar = function(selection) {
        var x = this._size.width - this._scrollStyle.thumbSize;
        var y = this._measuredSize.top.height;

        var vLayer = selection.append("g").attr('transform', 'translate(' + x + ',' + y + ')');
        this._vScrollbar.render(vLayer);

        x = this._measuredSize.left.width;
        y = this._size.height - this._scrollStyle.thumbSize;
        var hLayer = selection.append("g").attr('transform', 'translate(' + x + ',' + y + ')');
        this._hScrollbar.render(hLayer);
    };

    GridContainer.prototype.render = function(rootElement) {
        var cellSize = this._measuredSize.cell;

        this._bodyLayer = rootElement.append("g").attr('transform', 'translate(' + this._measuredSize.left.width +
            ',' + this._measuredSize.top.height + ')').attr('class', 'v-m-plot-bound v-m-trellis-plot');
        var bound = BoundUtil.drawBound(this._bodyLayer, this._measuredSize.bodyWindow.width,
            this._measuredSize.bodyWindow.height, null, true);
        var clippathid = ClippathUtil.drawClippath(this._bodyLayer, this._measuredSize.bodyWindow.width ,
            this._measuredSize.bodyWindow.height , 0, 0);
        this._bodyLayer.attr('clip-path', 'url(#' + clippathid + ')');
        this._body = this._bodyLayer.append("g");

        this._drawGridlines(rootElement, cellSize);
        this._renderHeaders(rootElement);
        this._renderScrollbar(rootElement);

        var lazyLoad = this._options.lazyLoad;
        if(lazyLoad){
            this._scroll({
                x: 0,
                y: 0
            });
        } else{
            this._renderCells(0, 0, this._rowCount, this._columnCount);
        }
        var props = this._properties.origin;
        var fillColor = (props.get('plotArea.background.color') || 'transparent');
        var fillID = this.runtime().effectManager().register({
            graphType: 'background',
            fillColor: fillColor,
            drawingEffect: props.get('drawingEffect'),
            direction: props.get('gradientDirection')
        });
        if(bound){
            bound.attr("class", "v-trellis-plot-bound");
            bound.attr('style', "fill:" + fillID);
        }
    };

    GridContainer.prototype.scroll = function(offset) {
        if(!offset){
            return;
        }
        var x, y, gap;
        var bodySize = this._measuredSize.body;
        var bodyWindow = this._measuredSize.bodyWindow;
        if(offset.x != null && bodySize.width > bodyWindow.width){
            gap = bodySize.width - bodyWindow.width + this._offset.x;
            x = Math.max(offset.x, -gap);
            x = Math.min(0, this._offset.x + x);
            this._hScrollbar.setThumbPosition( (-x) * bodyWindow.width / bodySize.width);
        }
        if(offset.y != null && bodySize.height > bodyWindow.height){
            gap = bodySize.height - bodyWindow.height + this._offset.y;
            y = Math.max(offset.y, -gap);
            y = Math.min(0, this._offset.y + y);
            this._vScrollbar.setThumbPosition( (-y) * bodyWindow.height / bodySize.height);
        }
        this._scroll({
            x : x,
            y : y
        });
    };

    GridContainer.prototype._scroll = function(offset) {
        if (offset.x != null) {
            this._offset.x = offset.x;
            this._headerG.top.setAttribute('transform', 'translate(' + this._offset.x + ',' + 0 + ')');
            this._headerG.bottom.setAttribute('transform', 'translate(' + this._offset.x + ',' + 0 + ')');
            if (this._vGridline) {
                this._vGridline.setAttribute('transform', 'translate(' + this._offset.x + ',' + 0 + ')');
            }
        }
        if (offset.y != null) {
            this._offset.y = offset.y;
            this._headerG.left.setAttribute('transform', 'translate(' + 0 + ',' + this._offset.y + ')');
            this._headerG.right.setAttribute('transform', 'translate(' + 0 + ',' + this._offset.y + ')');
            if (this._hGridline) {
                this._hGridline.setAttribute('transform', 'translate(' + 0 + ',' + this._offset.y + ')');
            }
        }
        this._body.attr('transform', 'translate(' + this._offset.x + ',' + this._offset.y + ')');

        var rowCount = Math.ceil(this._measuredSize.bodyWindow.height / this._measuredSize.cell.height);
        var colCount = Math.ceil(this._measuredSize.bodyWindow.width / this._measuredSize.cell.width);
        var row = Math.floor(Math.abs(this._offset.y) / this._measuredSize.cell.height);
        var column = Math.floor(Math.abs(this._offset.x) / this._measuredSize.cell.width);
        this._renderCells(row, column, rowCount, colCount);
    };

    GridContainer.prototype._renderCells = function(row, col, rowCount, colCount) {
        var padding = this._options.cell.padding;
        var cellSize = this._measuredSize.cell;
        var cellContentSize = this._measuredSize.cellContent;
        var body = this._body;
        var enableCellClipPath = this._options && this._options.enableCellClipPath;
        for (var n = 0; n < rowCount; n++) {
            for (var m = 0; m < colCount; m++) {
                var r = row + n,
                    c = col + m;
                if (r >= this._rowCount || c >= this._columnCount) {
                    break;
                }
                var child = this._children[r][c];
                if (!child) {
                    continue;
                }
                var id = "cell_" + r + "_" + c;
                if (!body.select("#" + id).empty()) {
                    continue;
                }
                var g = body.append("g").attr('id', id);
                child.setSize(cellContentSize);
                if(enableCellClipPath){
                    var clippathid = ClippathUtil.drawClippath(g, cellSize.width, cellSize.height, 0, 0);
                    g.attr('clip-path', 'url(#' + clippathid + ')');
                    var wrapper = g.append("g");
                    g.attr('transform', 'translate(' + (cellSize.width * c) + ', ' + (cellSize.height * r) + ')');
                    wrapper.attr('transform', 'translate(' + padding.left + ', ' + padding.top + ')');
                    child.render(wrapper);
                } else {
                    g.attr('transform', 'translate(' + (cellSize.width * c + padding.left) + ', ' + (cellSize.height *
                        r + padding.top) + ')');
                    child.render(g);
                }
            }
        }
    };

    function createLine(x1, y1, x2, y2) {
        var line = SVG.create("line");
        line.setAttribute("x1", x1);
        line.setAttribute("y1", y1);
        line.setAttribute("x2", x2);
        line.setAttribute("y2", y2);
        return line;
    }


    GridContainer.prototype._getGridlineLeft = function() {
        var layers = this._headers["left"];
        var left = 0;
        for(var i = 0; i < layers.length; i++) {
            if(layers[i].isDisableGridline()) {
                left += layers[i].getSize().width;
            }
            break;
        }
        return left;
    };

    GridContainer.prototype._getGridlineBottom = function() {
        var layers = this._headers["bottom"];
        var bottom = 0;
        for(var i = layers.length - 1; i >= 0; i--) {
            if(layers[i].isDisableGridline()) {
                bottom += layers[i].getSize().height;
            }
            break;
        }
        return bottom;
    };

    GridContainer.prototype._drawGridlines = function(selection, cellSize) {
        selection.select("." + GRIDLINE_GROUP_CLASS_NAME).remove();
        var cellGridProps = this._properties.origin.get("plotArea.cellGrid");
        if(!cellGridProps.visible) {
            return;
        }

        var node = SVG.create("g");
        node.setAttribute("class", GRIDLINE_GROUP_CLASS_NAME);
        node.setAttribute("stroke", cellGridProps.color);
        node.setAttribute("stroke-width", cellGridProps.size);

        var vNode = SVG.create("g");
        node.appendChild(vNode);
        var clipWidth = this._measuredSize.bodyWindow.width + 2;
        var clipHeight = this._measuredSize.top.height + this._measuredSize.bodyWindow.height +
            this._measuredSize.bottom.height + 2;
        var clippathid = ClippathUtil.drawClippath(d3.select(vNode), clipWidth, clipHeight, this._measuredSize.left
            .width - 1, -1);
        vNode.setAttribute('clip-path', 'url(#' + clippathid + ')');

        this._vGridline = SVG.create("g");
        vNode.appendChild(this._vGridline);
        var x, y, i;
        var line;
        var bottom = this._size.height - this._getGridlineBottom();
        for( i = 0; i <= this._columnCount - 1; i++) {
            x = this._measuredSize.left.width + cellSize.width * i;
            if(i === 0) {
                line = createLine(x, 0, x, this._size.height);
                vNode.appendChild(line);
            } else {
                line = createLine(x, 0, x, bottom);
                this._vGridline.appendChild(line);
            }
        }
        x = this._measuredSize.left.width + this._measuredSize.bodyWindow.width;
        line = createLine(x, 0, x, this._size.height);
        vNode.appendChild(line);

        var hNode = SVG.create("g");
        node.appendChild(hNode);
        clipWidth = this._measuredSize.left.width + this._measuredSize.bodyWindow.width +
            this._measuredSize.right.width + 2;
        clipHeight = this._measuredSize.bodyWindow.height + 2;
        clippathid = ClippathUtil.drawClippath(d3.select(hNode), clipWidth, clipHeight, -1,
            this._measuredSize.top.height - 1);
        hNode.setAttribute('clip-path', 'url(#' + clippathid + ')');

        this._hGridline = SVG.create("g");
        hNode.appendChild(this._hGridline);
        var left = this._getGridlineLeft();
        for( i = 0; i <= this._rowCount - 1; i++) {
            y = this._measuredSize.top.height + cellSize.height * i;
            if(i === 0) {
                line = createLine(0, y, this._size.width, y);
                hNode.appendChild(line);
            } else {
                line = createLine(left, y, this._size.width, y);
                this._hGridline.appendChild(line);
            }
        }
        y = this._measuredSize.top.height + this._measuredSize.bodyWindow.height;
        line = createLine(0, y, this._size.width, y);
        hNode.appendChild(line);

        selection.node().appendChild(node);
    };

    GridContainer.prototype.getVScrollbar = function() {
        return this._vScrollbar;
    };

    GridContainer.prototype.getHScrollbar = function() {
        return this._hScrollbar;
    };

    var GridContainerHeader = function(position, properties, rowCount, columnCount, disableGridline) {
        this._position = position;
        this._properties = properties;
        this._rowCount = rowCount;
        this._columnCount = columnCount;
        this._disableGridline = !!disableGridline;
        this._items = [];
        this._size = {
            width: 0,
            height: 0
        };
        this._type = null;
    };

    GridContainerHeader.prototype.isDisableGridline = function() {
        return this._disableGridline;
    };

    GridContainerHeader.prototype.getPosition = function() {
        return this._position;
    };

    GridContainerHeader.prototype.getMaxSizeProperty = function() {
        return this._maxSizeProperty;
    };

    GridContainerHeader.prototype.setMaxSizeProperty = function(maxSizeProperty) {
        this._maxSizeProperty = maxSizeProperty;
    };

    GridContainerHeader.prototype.addHeader = function(header, index, span) {
        this._items[index] = {
            component: header,
            span: span
        };
    };
    GridContainerHeader.prototype.setOptions = function(options) {
        this._options = options;
    };

    GridContainerHeader.prototype.setSize = function(size) {
        if (size.width != null) {
            this._size.width = size.width;
        }
        if (size.height != null) {
            this._size.height = size.height;
        }
    };

    GridContainerHeader.prototype.getSize = function() {
        return this._size;
    };

    GridContainerHeader.prototype.setAxisType = function(type) {
        this._axisType = type;
    };

    GridContainerHeader.prototype.getAxisType = function() {
        return this._axisType;
    };

    GridContainerHeader.prototype.getPreferredSize = function(size) {
        for (var i = 0; i < this._items.length; i++) {
            var header = this._items[i];
            if (!header || !header.component) {
                continue;
            }
            return header.component.getPreferredSize(size);
        }
        return {
            width: 0,
            height: 0
        };
    };

    GridContainerHeader.prototype.render = function(selection) {
        var size = this._size;
        if (size.width === 0 || size.height === 0) {
            return;
        }
        var isHorizontal = PositionUtil.isHorizontal(this._position);
        var padding = this._properties ? this._properties.cell.padding : this._options.cell.padding;

        var itemSize = isHorizontal ? {
            width: size.width / this._columnCount,
            height: size.height
        } : {
            width: size.width,
            height: size.height / this._rowCount
        };
        for (var i = 0; i < this._items.length; i++) {
            var item = this._items[i];
            if (!item || !item.component) {
                continue;
            }

            var cellSize = isHorizontal ? {
                width: NumberUtils.preciseObject(itemSize.width * item.span - padding.left - padding.right),
                height: itemSize.height
            } : {
                width: itemSize.width,
                height: NumberUtils.preciseObject(itemSize.height * item.span - padding.top - padding.bottom)
            };

            item.component.setSize(cellSize);
            var translate = isHorizontal ? (padding.left + itemSize.width * i) + ", 0 " : "0 , " + (padding.top +
                itemSize.height * i);
            var node = selection.append("g").attr('transform', 'translate(' + translate + ')');
            node.attr("class", "v-m-" + item.component.getName());
            item.component.render(node);
        }
        if (this.hasOwnProperty("renderCallback")) {
            this.renderCallback();
        }
    };

    GridContainerHeader.prototype.destroy = function() {

        this._children = null;
        this._scrollStyle = null;

        this._clipPath = null;
        this._header = null;

        if (this._items) {
            this._items.forEach(function(item) {
                if (item && item.component) {
                    item.component.destroy();
                }
            });
        }

        this._items = null;
        this._rowCount = null;
        this._columnCount = null;
        this._size = null;
        this._axisType = null;
        this._maxSizeProperty = null;
        this._options = null;
        this._disableGridline = null;
        this._position = null;
        this._type = null;

        this._headerG = null;
        this._offset = null;
        this._scroll = null;

        if (this._vScrollbar) {
            this._vScrollbar.destroy();
        }
        if (this._hScrollbar) {
            this._hScrollbar.destroy();
        }
        this._vScrollbar = null;
        this._hScrollbar = null;
    };

    return GridContainer;
});

define('sap/viz/chart/components/axis/TrellisAxis',[
    'jquery',
    'sap/viz/framework/common/util/oo',
    "sap/viz/framework/scale/CategoryScale",
    "sap/viz/framework/common/util/Constants",
    "sap/viz/framework/common/util/DataGraphics",
    "sap/viz/chart/components/axis/renderer/CategoryBodyRenderer",
    "sap/viz/chart/components/axis/sub/CategoryAxisBody",
], function($, oo, CategoryScale, Constants, DataGraphics, CategoryBodyRenderer, CategoryAxisBody) {
    var AXIS_CLASS_NAMES = Constants.CSS.CLASS.AXIS;

    var TrellisAxis = function(runtime, options) {
        TrellisAxis.superclass.constructor.apply(this, arguments);
        this._isTrellisAxis = true;
    };

    oo.extend(TrellisAxis, CategoryAxisBody);

    TrellisAxis.prototype.setData = function(data) {
        if (data.metaData) {
            var metaData = data.metaData;
            this._bindingFields = [];
            for (var i = 0, len = metaData.length; i < len; ++i) {
                var item = metaData[i];
                var bindingField = {
                    id: item.id,
                    name: item.name
                };
                // measureNames
                if(item.values){
                    var mapping = {};
                    item.values.forEach(function(value) {
                        mapping[value.id] = value.name;
                    });
                    bindingField.values = mapping;
                }
                this._bindingFields.push(bindingField);
            }
            this.setBindingFields(this._bindingFields);
        }
        if (data.scale) {
            this._scale = new CategoryScale(data.scale.getDomain(), [0, 1]);
        }

        TrellisAxis.superclass.setData.apply(this, [this._scale]);
    };
    
    TrellisAxis.prototype.setPosition = function(pos) {
        TrellisAxis.superclass.setPosition.apply(this, arguments);
        return this;
    };

    TrellisAxis.prototype.setSize = function(size) {
        TrellisAxis.superclass.setSize.apply(this, arguments);

        this.getPreferredSize(this._size);
    };

    TrellisAxis.prototype.getPreferredSize = function(size) {
        var visible = this._properties.get("visible");
        if(!visible){
            return {
                width: 0,
                height: 0
            };
        }
        var range = this._isHorizontal() ? [0, size.width] : [0, size.height];
        this._scale.setRange(range);

        var preSize = TrellisAxis.superclass.getPreferredSize.apply(this, arguments);
        var width = preSize.maxWidth <= size.width ? preSize.maxWidth : (
            preSize.minWidth <= size.width ? preSize.minWidth : 0
        );
        var height = preSize.maxHeight <= size.height ? preSize.maxHeight : (
            preSize.minHeight <= size.height ? preSize.minHeight : 0
        );
        return {
            width: width,
            height: height
        };
    };

    TrellisAxis.prototype.render = function(selection) {
        this._parent = selection;
        this.layout();
        selection.attr("class", "v-m-trellis-axis " + AXIS_CLASS_NAMES.CONTAINER);
        TrellisAxis.superclass.render.apply(this, arguments);
        
        var properties = this._properties.origin.get("plotArea.cellGrid");
        if(!properties.visible){
            return;
        }
        var layers = this._getAvailableLayers();
        var ticks = this._getTicks(layers);
        var group = selection.append("g").attr("class", AXIS_CLASS_NAMES.TICK_GROUP);
        CategoryBodyRenderer.drawGridTicks(group, layers, ticks, this._size.width, this._size.height, 
            this._position, properties, this.runtime().effectManager());
        DataGraphics.setContext(selection.node(), {
                name: this._name
            });
    };
    
    TrellisAxis.prototype.setLabelOffset = function(offset) {
        this._labelOffset = offset;
    };
    
    TrellisAxis.prototype._needRowAxisOffset = function() {
        if (this._position === 'left') {
            return true;
        }
        return false;
    };
    
    TrellisAxis.prototype.destroy = function() {
        
        if (this._data && this._data.destroy) {
            this._data.destroy();
        }
        
        TrellisAxis.superclass.destroy.call(this);
        if (this._parent) {
            this._parent.remove();
        }
        this._parent = null;
        if (this._scale) {
            this._scale.destroy();
        }
        this._scale = null;
    };
    
    return TrellisAxis;
});

define('sap/viz/chart/components/axis/TrellisAxisTitle',[
    'jquery',
    'sap/viz/framework/common/util/oo',
    "sap/viz/chart/components/util/StyleUtils",
    "sap/viz/chart/components/util/TextUtils",
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/framework/scale/CategoryScale",
    "sap/viz/framework/common/util/Constants",
    "sap/viz/chart/components/axis/sub/AxisTitle",
    "sap/viz/framework/common/util/PropertyZoneUtil"
], function($, oo, StyleUtils, TextUtils, TypeUtils, CategoryScale, Constants, AxisTitle, PropertyZoneUtil) {
    var AXIS_CLASS_NAMES = Constants.CSS.CLASS.AXIS;
    var SEPARATOR = " / ";
    var PADDING = 8;

    var TrellisAxisTitle = function(runtime, options) {
        TrellisAxisTitle.superclass.constructor.call(this, runtime);
        this._options = options;
        this._trellisHiddenItems = 0;
        this._axisHiddenItems = 0;
        var that = this;
        var titlePropertyZone = {}, titleFeedingZone = [];
        this._titleName = "";
        if (options.trellis) {
            this._titleName = options.trellis.data + "_";
        }
        if (options.axis) {
            this._titleName = this._titleName + options.axis.data + "_";
        }
        this._titleName = this._titleName + "title";
        titlePropertyZone[this._titleName] = {
            value : [],
            readonly : true,
            get : function() {
                var result = [], boundRect, bound;
                if (that.isVisible()) {
                    boundRect = that._parent.node().getBoundingClientRect();
                    bound = [[]];
                    bound[0].push([boundRect.left, boundRect.top]);
                    bound[0].push([boundRect.right, boundRect.top]);
                    bound[0].push([boundRect.right, boundRect.bottom]);
                    bound[0].push([boundRect.left, boundRect.bottom]);
                    result.push({
                        "name" : that._titleName,
                        "bound" : bound
                    });
                }
                if (that._parent && that._parent.node()) {
                    var root = that._parent.node().ownerSVGElement;
                    PropertyZoneUtil.calcOffsetFromChart(root, result);
                }
                return result;
            }
        };

        runtime.zoneManager().add({
            tempPropertyZone: titlePropertyZone
        });
    };

    oo.extend(TrellisAxisTitle, AxisTitle);

    function getTitle(data) {
        if (!data || !data.metaData || !data.metaData.length) {
            return null;
        }
        var items = [];
        for (var i = 0; i < data.metaData.length; i++) {
            items[i] = data.metaData[i].name || data.metaData[i].id;
        }
        return items;
    }
    
    TrellisAxisTitle.prototype.setTrellisHiddenItems = function(count){
        this._trellisHiddenItems = count;
    };
    
    TrellisAxisTitle.prototype.setAxisHiddenItems = function(count){
        this._axisHiddenItems = count;
    };

    TrellisAxisTitle.prototype.setData = function(data) {
        this._rawData = data;

        if (this._options.trellis) {
            var trellisData = data[this._options.trellis.data];
            this._trellisTitle = getTitle(trellisData);
        } else {
            this._trellisTitle = null;
        }

        if (this._options.axis) {
            var axisData = data[this._options.axis.data];
            this._axisTitle = getTitle(axisData);
            if(this.isValueAxis()){
                this._axisTitle = [this._axisTitle.join(" & ")];
            }
        } else {
            this._axisTitle = null;
        }
    };

    TrellisAxisTitle.prototype.getPreferredSize = function(sizeInfo) {
        var size = {
            width: 0,
            height: 0
        };
        var isVertical = this._isVertical();
        if (this._options.trellis && this._trellisTitle) {
            var trellisProperties = this._properties.proxy(this._options.trellis.property);
            this._addItemSize(size, trellisProperties, this._trellisTitle.join(SEPARATOR));
        }

        if (this._options.axis && this._axisTitle) {
            var axisProperties = this._properties.proxy(this._options.axis.property);
            this._addItemSize(size, axisProperties, this._axisTitle.join(SEPARATOR));
        }
        if (isVertical) {
            return {
                width: size.width + PADDING,
                height: Math.min(sizeInfo.height, size.height)
            };
        } else {
            return {
                width: Math.min(sizeInfo.width, size.width),
                height: size.height + PADDING
            };
        }
    };

    function getText(properties) {
        var text = properties.get("title.text");
        if (!TypeUtils.isString(text)) {
            text = null;
        }
        return text;
    }

    function isVisible(properties) {
        return properties && properties.get("visible") && properties.get("title.visible");
    }

    TrellisAxisTitle.prototype._addItemSize = function(size, properties, defaultText) {
        if (!isVisible(properties)) {
            return;
        }
        var text = getText(properties) || defaultText;
        if (!text) {
            return;
        }
        var style = properties.get("title.style");
        var itemSize = this._measureTextSize(text, style);
        if (this._isVertical()) {
            size.width = Math.max(size.width, itemSize.height);
            size.height += itemSize.width;
        } else {
            size.width += itemSize.width;
            size.height = Math.max(size.height, itemSize.height);
        }
    };

    TrellisAxisTitle.prototype.render = function(selection) {
        this._parent = selection;

        selection.select("g." + AXIS_CLASS_NAMES.TITLE).remove();
        selection.selectAll(".v-m-axisTitleEventLayer").remove();

        var axisProperties = this._options.axis ? this._properties.proxy(this._options.axis.property) : null;
        var trellisProperties = this._options.trellis ? this._properties.proxy(this._options.trellis.property) : null;
        if(!axisProperties && !trellisProperties){
            return;
        }
        var className = AXIS_CLASS_NAMES.TITLE + " " + AXIS_CLASS_NAMES.TITLE_BACKWORD;
        className += " v-trellistitle-"+this._position;
        var textG = selection.append("g").attr("class", className);
        var titleText = textG.append("text").attr("text-anchor", "middle").attr("dominant-baseline", "auto");

        var styles = trellisProperties ? trellisProperties.get("title.style") : null;
        if(!styles){
            styles = axisProperties ? axisProperties.get("title.style") : {};
        }
        var textOffset = TextUtils.getTextBaselineOffset(styles);
        if (this._isVertical()) {
            var x = this._size.width - textOffset;
            if(this._position === "left"){
                x -= PADDING;
            }
            titleText.attr("x", x)
                .attr("y", this._size.height / 2)
                .attr("transform", "rotate(-90," + x + "," + (this._size.height / 2) + ")");
        } else {
            var y = this._size.height - textOffset;
            if(this._position === "top"){
                y -= PADDING;
            }
            titleText.attr("x", this._size.width / 2).attr("y", y);
        }

        var separator;
        var reminSize = {value : this._isVertical() ? this._size.height : this._size.width };
        this._titleContent = "";
        if (trellisProperties) {
            var isAdd = this._renderItem(titleText, reminSize, trellisProperties, this._trellisTitle, 
                this._trellisHiddenItems);
            separator = isAdd ? SEPARATOR : "";
        }

        if (axisProperties) {
            this._renderItem(titleText, reminSize, axisProperties, 
                    this._axisTitle, this._axisHiddenItems, separator, 
                    this.isValueAxis() && axisProperties.get("title.applyAxislineColor"));
        }
        if(reminSize.value <0){
            var title = titleText.append("title");
            title.node().textContent = this._titleContent;
        }
    };

    TrellisAxisTitle.prototype.isValueAxis = function() {
        return this._options.axis.data !== "categoryAxis";
    };
    
    TrellisAxisTitle.prototype._renderItem = function(titleText, reminSize, properties, textItems, hiddenCount,
        separator, isNeedPropColor) {
        if (!isVisible(properties)) {
            return false;
        }
        var text = getText(properties);
        if (!text && !textItems) {
            return false;
        }

        var styles = properties.get("title.style");
        var cssString = StyleUtils.convertToCss(styles);
        var textOffset = TextUtils.getTextBaselineOffset(styles);
        var styleColor = this.runtime().effectManager().register({
            fillColor: isNeedPropColor ? properties.get("color") : styles.color
        });

        function appendItem(text){
            var tItem = titleText.append("tspan");
            tItem.attr("fill", styleColor).attr("font-size", styles['fontSize']).attr("font-weight", styles[
                'fontWeight']).attr("font-family", styles['fontFamily']).attr("font-style", styles['fontStyle']);
            tItem.attr("dominant-baseline", "auto");
            tItem.text(text);
            return tItem;
        }
        var itemSize;
        if(text){
            text = separator ? separator + text : text;
            this._titleContent += text;
            itemSize = this._measureTextSize(text, styles);
            if(itemSize.width > reminSize.value){
                text = TextUtils.ellipsis(text, null, reminSize.value, cssString);
            }
            reminSize.value -= itemSize.width;
            appendItem(text);
        } else {
            var hiddenStyleColor = this.runtime().effectManager().register({
                fillColor: Constants.AXIS.HIDDEN_TITLE.COLOR
            });
            for(var i=0; i<textItems.length; i++){
                var s = (i===0) ? separator : SEPARATOR ;
                var itemText = s ? (s + textItems[i]) : textItems[i];
                this._titleContent += itemText;
                if(reminSize.value <0){
                    continue;
                }
                itemSize = this._measureTextSize(itemText, styles);
                if(itemText && itemSize.width > reminSize.value){
                    itemText = TextUtils.ellipsis(itemText, null, reminSize.value, cssString);
                    itemText = itemText ? itemText : "...";
                }
                var item = appendItem(itemText);
                if(i >=hiddenCount){
                    item.attr("fill", hiddenStyleColor);
                }
                reminSize.value -= itemSize.width;
            }
        }
        return true;
    };
    
    TrellisAxisTitle.prototype.destroy = function() {
        TrellisAxisTitle.superclass.destroy.call(this);
        this._axisHiddenItems = null;
        this._axisTitle = null;
        if (this._parent) {
            this._parent.remove();
        }
        this._parent = null;
        this._rawData = null;
        this._titleContent = null;
        this._titleName = null;
        this._trellisHiddenItems = null;
        this._trellisTitle = null;
    };

    return TrellisAxisTitle;
});
define('sap/viz/chart/components/plotareas/TrellisPlotArea',[
    'jquery',
    "sap/viz/framework/common/util/oo",
    "sap/viz/framework/common/util/DOM",
    "sap/viz/framework/common/util/SVG",
    'sap/viz/chart/components/axis/CategoryAxis',
    'sap/viz/chart/components/axis/TrellisAxis',
    'sap/viz/chart/components/axis/TrellisAxisTitle',
    'sap/viz/chart/components/container/GridContainer',
    'sap/viz/chart/components/plots/PlotFactory',
    "sap/viz/chart/components/UIComponent",
    "sap/viz/framework/common/util/PropertyZoneUtil",
    "sap/viz/framework/common/util/FeedingZoneUtil",
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/framework/common/util/ObjectUtils"
], function Setup($, oo, DOM, SVG, CategoryAxis, TrellisAxis, TrellisAxisTitle, GridContainer, PlotFactory,
    UIComponent, PropertyZoneUtil, FeedingZoneUtil, TypeUtils, ObjectUtils) {
    var TrellisPlotArea = function(runtime, options) {
        TrellisPlotArea.superclass.constructor.apply(this, arguments);
        this._renderType = (options && options.renderType != null) ? options.renderType : null;
        var padding = {
            left: 0,
            right: 0,
            top: 0,
            bottom: 0
        };
        this._gridContainerOptions = {
            enableCellClipPath : false,
            enableMinSize : true,
            lazyLoad : false,
            cell: {
                minWidth: 200,
                minHeight: 96,
                padding : padding
            }
        };
        this._gridContainer = new GridContainer(runtime, this._gridContainerOptions);
        this._headerLayers = {};
        this._headerProperties = {
            cell: {
                padding: padding
            }
        };

        var that = this;
        var plotPropertyZone = {};
        plotPropertyZone['plot'] = {
            value: [],
            readonly: true,
            get: function() {
                var result = [];
                var node = that._selection.select('.v-m-plot-bound').select('.v-clippath')
                           .select('rect').node();
                var boundRect = node.getBoundingClientRect();
                if (boundRect.width > 1.5 && boundRect.height > 1.5) {
                    var bound = [
                        []
                    ];
                    bound[0].push([boundRect.left, boundRect.top]);
                    bound[0].push([boundRect.right, boundRect.top]);
                    bound[0].push([boundRect.right, boundRect.bottom]);
                    bound[0].push([boundRect.left, boundRect.bottom]);
                    result.push({
                        "name": 'plot',
                        "bound": bound
                    });
                }
                var root = node.ownerSVGElement;
                PropertyZoneUtil.calcOffsetFromChart(root, result);
                return result;
            }
        };
        runtime.zoneManager().add({
            tempPropertyZone: plotPropertyZone,
            tempFeedingZone : plotPropertyZone
        });
        var headerPropertyZone = {};
        headerPropertyZone['trellisAxis'] = {
            value : [],
            readonly : true,
            get : function() {
                var gridContainer = that._gridContainer;
                var result = {}, bound, root, type;
                root = that._gridContainer._clipPath.left.node().ownerSVGElement ?
                    that._gridContainer._clipPath.left.node().ownerSVGElement :
                    that._gridContainer._clipPath.bottom.node().ownerSVGElement;
                for (var direction in that._gridContainer._clipPath) {
                    if (that._gridContainer._clipPath.hasOwnProperty(direction)) {
                        if (TypeUtils.isExist(PropertyZoneUtil[direction])) {
                            if (TypeUtils.isArray(that._gridContainer._headers[direction])) {
                                that._gridContainer._headers[direction].forEach(function(e) {
                                    if (TypeUtils.isExist(e.getAxisType())) {
                                        type = e.getAxisType();
                                    }
                                });
                            }
                            bound = PropertyZoneUtil[direction].call(that, d3.select(gridContainer._header[direction]),
                            gridContainer._clipPath[direction], root, type);
                        }
                        if (!TypeUtils.isEmptyObject(bound)) {
                            result = ObjectUtils.extend(result, bound);
                        }
                    }
                }
                return result;
            }
        };
        runtime.zoneManager().add({
            tempPropertyZone : headerPropertyZone,
            tempFeedingZone : headerPropertyZone
        });
    };
    oo.extend(TrellisPlotArea, UIComponent);

    TrellisPlotArea.prototype.setData = function(size) {
        TrellisPlotArea.superclass.setData.apply(this, arguments);

        var rowCount = getCount(this._data, "trellisRow");
        var columnCount = getCount(this._data, "trellisColumn");
        this._applyDataChanges(rowCount, columnCount);
    };

    function getCount(data, id) {
        return (data[id] && data[id].values && data[id].values[0]) ? data[id].values[0].length : 1;
    }

    TrellisPlotArea.prototype._getData = function(row, column) {
        var childData = $.extend({}, this._data);
        if(TypeUtils.isArray(this._data.series[row])){
            childData.series = this._data.series[row][column];
        }else{
            childData.series = [];
        }
        

        return childData;
    };

    TrellisPlotArea.prototype._getPlotOptions = function() {
        return {
            inTrellis : true
        };
    };

    TrellisPlotArea.prototype._applyDataChanges = function(rowCount, columnCount) {
        this._gridContainer.init(rowCount, columnCount);
        this._initHeaders(rowCount, columnCount);

        var options = this._getPlotOptions();
        var trellisSeriesLength = 0;
        var row, col, childData;
        for (row = 0; row < rowCount; row++) {
            for (col = 0; col < columnCount; col++) {
                childData = this._getData(row, col);
                if(childData.series && childData.series.length > trellisSeriesLength) {
                    trellisSeriesLength = childData.series.length;
                }
            }
        }
        for (row = 0; row < rowCount; row++) {
            for (col = 0; col < columnCount; col++) {
                var child = PlotFactory.create(this._renderType, this.runtime(), options);
                childData = this._getData(row, col);
                childData.trellisSeriesLength = trellisSeriesLength;
                child.setData(childData);
                this._gridContainer.addChild(child, row, col);
            }
        }

        this._leftTitle = this._createTrellisTitle("left", this._createLeftTitleOptions());
        this._bottomTitle = this._createTrellisTitle("bottom", this._createBottomTitleOptions());
    };
    
    TrellisPlotArea.prototype._createTrellisTitle = function(position, options) {
        var title = new TrellisAxisTitle(this.runtime(), options);
        title.setPosition(position);
        title.setData(this._data);

        return title;
    };

    TrellisPlotArea.prototype._createLeftTitleOptions = function(rowCount, columnCount) {
        return {
            trellis: {
                data : "trellisRow",
                property: "rowAxis"
            }
        };
    };

    TrellisPlotArea.prototype._createBottomTitleOptions = function(rowCount, columnCount) {
        return {
            trellis: {
                data : "trellisColumn",
                property: "columnAxis"
            }
        };
    };

    TrellisPlotArea.prototype._initHeaders = function(rowCount, columnCount) {
        this._initBottomHeaders(rowCount, columnCount);
        this._initLeftHeaders(rowCount, columnCount);
    };

    TrellisPlotArea.prototype._initBottomHeaders = function(rowCount, columnCount) {
        var position = "bottom";
        if (this._data.trellisColumn) {
            //var columnAxis = new CategoryAxis(this.runtime(), {name:"columnAxis"});
            var columnAxis = this._columnAxis = new TrellisAxis(this.runtime(), {
                name: "columnAxis"
            });
            columnAxis.setPosition(position);
            columnAxis.setData(this._data.trellisColumn);
            var headerLayer = this._gridContainer.addHeaderLayer(position, this._headerProperties, true);
            headerLayer.setMaxSizeProperty("columnAxis.layout.maxHeight");
            headerLayer.addHeader(columnAxis, 0, columnCount, position);
            this._headerLayers.trellisColumnHeaderLayer = headerLayer;
        }
    };

    TrellisPlotArea.prototype._initLeftHeaders = function(rowCount, columnCount) {
        var position = "left";
        if (this._data.trellisRow) {
            var rowAxis = this._rowAxis = new TrellisAxis(this.runtime(), {
                name: "rowAxis"
            });
            rowAxis.setPosition(position);
            rowAxis.setData(this._data.trellisRow);
            var headerLayer = this._gridContainer.addHeaderLayer(position, this._headerProperties, true);
            headerLayer.setMaxSizeProperty("rowAxis.layout.maxWidth");
            
            headerLayer.addHeader(rowAxis, 0, rowCount, position);
            this._headerLayers.trellisRowHeaderLayer = headerLayer;
        }
    };
    
    TrellisPlotArea.prototype._beforeMeasure = function(rowCount, columnCount) {};

    TrellisPlotArea.prototype._layoutTitles = function(remainSize) {
        var preSize = this._leftTitle.getPreferredSize(remainSize);
        remainSize.width -= preSize.width;
        this._measuredSize.left = {
            width: preSize.width,
            height: remainSize.height
        };

        preSize = this._bottomTitle.getPreferredSize(remainSize);
        remainSize.height -= preSize.height;
        this._measuredSize.bottom = {
            width: remainSize.width,
            height: preSize.height
        };
    };

    TrellisPlotArea.prototype._layout = function() {
        var remainSize = {
            width: this._size.width,
            height: this._size.height
        };
        this._measuredSize = {};
        this._layoutTitles(remainSize);

        this._gridContainer.setSize(remainSize);
    };

    TrellisPlotArea.prototype._applySizeChanges = function() {
        this._layout();

        var rowCount = getCount(this._data, "trellisRow");
        var columnCount = getCount(this._data, "trellisColumn");
        this._beforeMeasure(rowCount, columnCount);
        this._gridContainer.measure();

        var measuredSize = this._gridContainer.getMeasuredSize();
        this._leftTitle.setSize({
            width: this._measuredSize.left.width,
            height: measuredSize.bodyWindow.height
        });
        this._bottomTitle.setSize({
            width: measuredSize.bodyWindow.width,
            height: this._measuredSize.bottom.height
        });
    };
    
    TrellisPlotArea.prototype.scroll = function(offset) {
        if(this._gridContainer){
            this._gridContainer.scroll(offset);
        }
    };

    TrellisPlotArea.prototype.render = function(selection) {
        this._selection = selection;

        var selectionNode = selection.node();
        DOM.empty(selectionNode);
        this._preRender();
        this._render(selectionNode);
        this._postRender();
    };

    TrellisPlotArea.prototype._headers = function() {
        return this._gridContainer.getHeaders();
    };

    TrellisPlotArea.prototype._children = function() {
        return this._gridContainer.getChildren();
    };

    TrellisPlotArea.prototype._preRenderTitle = function() {
        var count;
        if(this._columnAxis ){
            count = this._columnAxis.getAvailableLayersNumber();
            this._bottomTitle.setTrellisHiddenItems(count);
        }
        
        if(this._rowAxis ){
            count = this._rowAxis.getAvailableLayersNumber();
            this._leftTitle.setTrellisHiddenItems(count);
        }
    };
    
    TrellisPlotArea.prototype._render = function(selectionNode) {
        var measuredSize = this._gridContainer.getMeasuredSize();
        
        var node = SVG.create("g");
        var top = this._measuredSize.top ? this._measuredSize.top.height : 0;
        node.setAttribute('transform', 'translate(' + this._measuredSize.left.width + ',' + top + ')');
        this._gridContainer.render(d3.select(node));
        selectionNode.appendChild(node);
        this._drawDataLabel();        

        this._preRenderTitle();
        node = SVG.create("g");
        this._leftTitle.render(d3.select(node));
        node.setAttribute('transform', 'translate(0,' + measuredSize.top.height + ')');
        selectionNode.appendChild(node);

        node = SVG.create("g");
        node.setAttribute('transform', 'translate(' + (this._measuredSize.left.width + measuredSize.left.width) +
            ',' + (this._size.height - this._measuredSize.bottom.height) + ')');
        this._bottomTitle.render(d3.select(node));
        selectionNode.appendChild(node);
    };

    TrellisPlotArea.prototype._drawDataLabel = function() {
        var children = this._children();
        if(!children){
            return;
        }
        for (var n = 0; n < children.length; n++) {
            if(!children[n]){
                continue;
            }
            for (var m = 0; m < children[n].length; m++) {
                var child = children[n][m];
                if (!child) {
                    continue;
                }
                child.drawTrellisDataLabels();
            }
        }
    };

    TrellisPlotArea.prototype._postRender = function() {

    };
    
    TrellisPlotArea.prototype._preRender = function() {
               
    };
    
    TrellisPlotArea.prototype.destroy = function() {
        TrellisPlotArea.superclass.destroy.call(this);
        
        if (this._selection) {
            this._selection.remove();
        }
        this._selection = null;
        
        var key;
        for (key in this._categoryAxis) {
            if (this._categoryAxis.hasOwnProperty(key)) {
                this._categoryAxis[key].destroy();
            }
        }
        this._categoryAxis = null;
        
        for (key in this._valueAxis) {
            if (this._valueAxis.hasOwnProperty(key)) {
                this._valueAxis[key].destroy();
            }
        }
        this._valueAxis = null;
        
        if (this._columnAxis) {
            this._columnAxis.destroy();
        }
        this._columnAxis = null;
        
        if (this._rowAxis) {
            this._rowAxis.destroy();
        }
        this._rowAxis = null;
        
        this._renderType = null;
        this._gridContainerOptions = null;
        this._gridContainer.destroy();
        this._gridContainer = null;
        
        for (key in this._headerLayers) {
            if (this._headerLayers.hasOwnProperty(key)) {
                this._headerLayers[key].destroy();
                this._headerLayers[key] = null;
                delete this._headerLayers[key];
            }
        }
        
        this._headerLayers = null;
        this._headerProperties = null;
        this._size = null;
        this._properties = null;
        
        this._measuredSize = null;
        
        this._leftTitle.destroy();
        this._leftTitle = null;
        
        this._bottomTitle.destroy();
        this._bottomTitle = null;
    };
    
    TrellisPlotArea.prototype.layout = function() {
        this._applySizeChanges();
    };
    
    TrellisPlotArea.prototype.getPlotPosition = function() {
        if(this._gridContainer && this._gridContainer.getMeasuredSize){
            var gridContainerMeasuredSize = this._gridContainer.getMeasuredSize();
            var gridOffset = gridContainerMeasuredSize.top;
            var titleOffset = this._measuredSize.top;
            var offset1 = gridOffset ? gridOffset.height : 0;
            var offset2 = titleOffset ? titleOffset.height : 0;
            return {
                'x' : this._measuredSize.left.width + gridContainerMeasuredSize.left.width,
                'y' :  offset1 + offset2,
                'height' : gridContainerMeasuredSize.bodyWindow.height,
                'width' : gridContainerMeasuredSize.bodyWindow.width
                //as PO demands, now the width of title is same as the width of bodyWindow
            };
        }
    };

    TrellisPlotArea.prototype.getVScrollbar = function() {
        return this._gridContainer && this._gridContainer.getVScrollbar && this._gridContainer.getVScrollbar();
    };

    TrellisPlotArea.prototype.getHScrollbar = function() {
        return this._gridContainer && this._gridContainer.getHScrollbar && this._gridContainer.getHScrollbar();
    };
    
    return TrellisPlotArea;
});

define('sap/viz/chart/components/plotareas/XYTrellisPlotArea',[
    'jquery',
    "sap/viz/framework/common/util/oo",
    "sap/viz/framework/common/util/DOM",
    "sap/viz/framework/common/util/DataGraphics",
    'sap/viz/chart/components/axis/CategoryAxis',
    'sap/viz/chart/components/axis/ValueAxis',
    'sap/viz/chart/components/container/GridContainer',
    'sap/viz/chart/components/plots/PlotFactory',
    "sap/viz/chart/components/plotareas/TrellisPlotArea",
    'sap/viz/chart/components/util/ValueAxisUtils',
    'sap/viz/framework/common/util/DataUtils',
    'sap/viz/framework/common/util/TypeUtils'
], function Setup($, oo, DOM, DataGraphics, CategoryAxis, ValueAxis, GridContainer, PlotFactory, TrellisPlotArea,
    ValueAxisUtils, DataUtils, TypeUtils) {
    var XYTrellisPlotArea = function(context, options) {
        XYTrellisPlotArea.superclass.constructor.apply(this, arguments);
    };
    oo.extend(XYTrellisPlotArea, TrellisPlotArea);

    XYTrellisPlotArea.prototype._isHorizontal = function() {
        var options = PlotFactory.getOptions(this._renderType);
        return options.isHorizontal;
    };

    XYTrellisPlotArea.prototype._addCategoryAxis = function(index, position, headerLayer) {
        var categoryAxis = new CategoryAxis(this.runtime(), {
            name: "categoryAxis",
            disableTitle: true,
            isTrellis : true
        });
        categoryAxis.setPosition(position);

        categoryAxis.setData(this._data.categoryAxis, DataUtils.hasNegativeValue(this._data));
        categoryAxis.setInTrellis(true);
        headerLayer.addHeader(categoryAxis, index, 1, position, 'categoryAxis');
        headerLayer.setAxisType('categoryAxis');
        return categoryAxis;
    };

    XYTrellisPlotArea.prototype._addValueAxis = function(index, position, headerLayer) {
        return this._addValueAxisWidthData(index, position, headerLayer, "valueAxis", this._data.valueAxis);
    };

    XYTrellisPlotArea.prototype._addValueAxisWidthData = function(index, position, headerLayer, name, data) {
        var valueAxis = new ValueAxis(this.runtime(), {
            name: name,
            disableTitle: true,
            applyTrellisBehavior : true,
            isTrellis : true
        });
        valueAxis.setPosition(position);
        valueAxis.setData(data);
        headerLayer.addHeader(valueAxis, index, 1, position); //header, index, span, position)
        headerLayer.setAxisType(name);
        if (this._isPercentageChart()) {
            valueAxis.setPercentageMode(true);
        }

        return valueAxis;
    };

    XYTrellisPlotArea.prototype._isPercentageChart = function() {
        return (this._renderType.indexOf("100_") === 0);
    };

    XYTrellisPlotArea.prototype._isLineChart = function() {
        return (this._renderType.indexOf("line") === 0);
    };

    XYTrellisPlotArea.prototype._updateValueAxis = function(data, valueAxisName, row, column) {
        var oldValue = data[valueAxisName];
        var categorySum = TypeUtils.isArray(oldValue.categorySum[row])?oldValue.categorySum[row][column]:0;
        data[valueAxisName] = {
            categorySum: categorySum,
            rawData: oldValue.rawData,
            scale: oldValue.scale
        };
    };

    XYTrellisPlotArea.prototype._getData = function(row, column) {
        var childData = XYTrellisPlotArea.superclass._getData.apply(this, arguments);
        if (this._isPercentageChart()) {
            this._updateValueAxis(childData, 'valueAxis', row, column);
        }

        return childData;
    };

    XYTrellisPlotArea.prototype._createLeftTitleOptions = function(rowCount, columnCount) {
        var options =  XYTrellisPlotArea.superclass._createLeftTitleOptions.apply(this, arguments);
        var axisName = this._isHorizontal() ? "categoryAxis" : "valueAxis";
        options.axis = {
            data: axisName,
            property: axisName
        };
        return options;
    };

    XYTrellisPlotArea.prototype._createBottomTitleOptions = function(rowCount, columnCount) {
        var options =  XYTrellisPlotArea.superclass._createBottomTitleOptions.apply(this, arguments);
        var axisName = this._isHorizontal() ? "valueAxis" : "categoryAxis";
        options.axis  = {
            data: axisName,
            property: axisName
        };
        return options;
    };

    XYTrellisPlotArea.prototype._beforeMeasure = function(rowCount, columnCount) {
        XYTrellisPlotArea.superclass._beforeMeasure.apply(this, arguments);

        var data = this._data;
        var width = this._size.width / columnCount;
        var height = this._size.height / rowCount;
        if (!data || width <= 0 || height <= 0) {
            return;
        }
        var minBodySize = this._gridContainer.getMinBodySize();
        width = Math.max(width, minBodySize.cellWidth);
        height = Math.max(height, minBodySize.cellHeight);
        var range = [0, 1];
        if (this._isHorizontal()) {
            range[1] = width;
        } else {
            range[1] = height;
        }
        var valueAxisData, valueAxisScale;
        if (this._isPercentageChart()) {
            valueAxisData = ValueAxisUtils.calcPercentageScale(range);
            data.valueAxis.tickHint = valueAxisData.tickHint;
            valueAxisScale = valueAxisData;
        } else {
            var scale = data.valueAxis.scale;
            valueAxisData = ValueAxisUtils.calcScale(scale, range, {
                isLineChart: this._isLineChart()
            });
            data.valueAxis.scale = valueAxisData.scale;
            data.valueAxis.tickHint = valueAxisData.tickHint;
            data.valueAxis.scale.setRange([0, 1]);
            valueAxisScale = data.valueAxis;
        }

        this._applyValueAxisScale(valueAxisScale);

        var padding = this._getValueAxisPadding(this._valueAxis[0], valueAxisScale);
        this._gridContainerOptions.cell.padding = padding;
        this._gridContainer.updateOptions(this._gridContainerOptions);
    };

    XYTrellisPlotArea.prototype._getValueAxisPadding = function(valueAxis, valueAxisScale){
        var axisPadding = valueAxis.getPadding(valueAxisScale.scale);
        var domain = valueAxisScale.scale.getDomain();
        var index = ValueAxisUtils.getTrellisBaseValueIndex(domain[0],domain[1]);
        var left = 0, right =0, top = 0, bottom =0;
        if(this._isHorizontal()){
            if(index === -1){
                left = axisPadding.start;
                right = axisPadding.end;
            } else if(index === 0){
                right = axisPadding.end;
            } else {
                left = axisPadding.start;
            }
        } else {
            if(index === -1){
                top = axisPadding.end;
                bottom = axisPadding.start;
            } else if(index === 0){
                top = axisPadding.end;
            } else {
                bottom = axisPadding.start;
            }
        }
        var padding = {
            left : left,
            right : right,
            top : top,
            bottom : bottom
        };
        return padding;
    };

    XYTrellisPlotArea.prototype._applyValueAxisScale = function(valueAxisScale) {
        var data = this._data;
        for (var i = 0; i < this._valueAxis.length; i++) {
            this._valueAxis[i].setData(valueAxisScale);
        }
    };

    XYTrellisPlotArea.prototype._initBottomHeaders = function(rowCount, columnCount) {
        var position = "bottom";
        var isHorizontal = this._isHorizontal();
        var name = isHorizontal ? "valueAxis" : "categoryAxis";
        var headerLayer = this._gridContainer.addHeaderLayer(position);
        headerLayer.setMaxSizeProperty(name + ".layout.maxHeight");
        for (var col = 0; col < columnCount; col++) {
            if (isHorizontal) {
                this._valueAxis[col] = this._addValueAxis(col, position, headerLayer);
            } else {
                this._categoryAxis[col] = this._addCategoryAxis(col, position, headerLayer);
            }
        }

        XYTrellisPlotArea.superclass._initBottomHeaders.apply(this, arguments);
        this._headerLayers.trellisBottomHeaderLayer = headerLayer;
    };

    XYTrellisPlotArea.prototype._initLeftHeaders = function(rowCount, columnCount) {
        XYTrellisPlotArea.superclass._initLeftHeaders.apply(this, arguments);
        var position = "left";
        var isHorizontal = this._isHorizontal();
        var name = isHorizontal ? "categoryAxis" : "valueAxis";
        var headerLayer = this._gridContainer.addHeaderLayer(position);
        headerLayer.setMaxSizeProperty(name + ".layout.maxWidth");
        if (isHorizontal) {
            headerLayer.renderCallback = $.proxy(this._headerRenderCallback, this);
        }
        for (var row = 0; row < rowCount; row++) {
            if (isHorizontal) {
                this._categoryAxis[row] = this._addCategoryAxis(row, position, headerLayer);
            } else {
                this._valueAxis[row] = this._addValueAxis(row, position, headerLayer);
            }
        }
        this._headerLayers.trellisLeftHeaderLayer = headerLayer;
    };

    XYTrellisPlotArea.prototype._headerRenderCallback = function() {
        var labelOffset = this._categoryAxis[0].getLabelOffset();
        this._setTrellisLableOffset(labelOffset);
    };

    XYTrellisPlotArea.prototype._initHeaders = function(rowCount, columnCount) {
        this._valueAxis = [];
        this._categoryAxis = [];
        XYTrellisPlotArea.superclass._initHeaders.apply(this, arguments);
    };

    XYTrellisPlotArea.prototype._preRenderTitle = function() {
        XYTrellisPlotArea.superclass._preRenderTitle.apply(this, arguments);

        var valueCount = 0;
        if(this._valueAxis && this._valueAxis[0]){
            valueCount = this._valueAxis[0].getChild("axisBody").module.getAvailableLayersNumber();
        }

        var categoryCount = 0;
        if(this._categoryAxis && this._categoryAxis[0]){
            categoryCount = this._categoryAxis[0].getChild("axisBody").module.getAvailableLayersNumber();
        }

        if(this._isHorizontal() ){
            this._leftTitle.setAxisHiddenItems(categoryCount);
            this._bottomTitle.setAxisHiddenItems(valueCount);
        } else {
            this._leftTitle.setAxisHiddenItems(valueCount);
            this._bottomTitle.setAxisHiddenItems(categoryCount);
        }
    };

    XYTrellisPlotArea.prototype._postRender = function() {
        XYTrellisPlotArea.superclass._postRender.apply(this, arguments);

        var trellisData = this._isHorizontal() ? this._data.trellisRow : this._data.trellisColumn;
        if (!trellisData || !trellisData.metaData) {
            return;
        }
        for (var i = 0; i < this._categoryAxis.length; i++) {
            var parent = this._categoryAxis[i].getParent();
            if(!parent){
                continue;
            }
            var axis = parent.node();
            if(!axis){
                continue;
            }
            var context = {};
            for (var n = 0; n < trellisData.metaData.length; n++) {
                if(TypeUtils.isArray(trellisData.values[n])){
                    context[trellisData.metaData[n].id] = trellisData.values[n][i];
                }

            }
            DataGraphics.setContext(axis, {
                ctx: context
            });
        }
    };

    //This is for set trellis axis offset, need to implement by children class
    XYTrellisPlotArea.prototype._setTrellisLableOffset = function(offset) {
        if (this._isHorizontal() && this._rowAxis) {
            this._rowAxis.setLabelOffset(offset);
        }
    };

    return XYTrellisPlotArea;
});

define('sap/viz/chart/components/legend/CombinationLegend',['sap/viz/framework/common/util/oo',
    'sap/viz/chart/components/legend/ColorLegend',
    'sap/viz/framework/common/util/ObjectUtils',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/framework/scale/ColorScale',
    'sap/viz/chart/components/legend/ColorShapeScaleMerger'
], function(oo, ColorLegend, ObjectUtils, TypeUtils, ColorScale, ColorShapeScaleMerger) {
    var CombinationLegend = function() {
        CombinationLegend.superclass.constructor.apply(this, arguments);
    };

    oo.extend(CombinationLegend, ColorLegend);

    function hash(data) {
        if (TypeUtils.isArray(data)) {
            return data.map(function(elm) {
                return hash(elm);
            }).join("-");
        } else {
            return "" + data;
        }
    }

    /**
     * @override 
     */
    CombinationLegend.prototype._buildColorShapeScale = function(colorScales) {
        var enableGroup = this._properties.get("groupByShape"),
            dataMndLookup = {};
        var merger = CombinationLegend.superclass._buildColorShapeScale.apply(this, arguments);
        if (enableGroup && !this._properties.get("order")) {
            colorScales.forEach(function(cScale) {
                cScale.rowArray.forEach(function(row) {
                    dataMndLookup[hash(row)] = row.mndIndex;
                });
            });
            var items = merger.items(),
                ordered = flattenGroup(groupByShapeThenMnd(items, dataMndLookup));
            items.splice(0, items.length);
            items.push.apply(items, ordered);
        }

        return merger;
    };

    function flattenGroup(groups) {
        return Object.keys(groups).reduce(function(arr, k) {
            var grp = groups[k];
            return arr.concat(TypeUtils.isArray(grp) ? grp : flattenGroup(grp));
        }, []);
    }

    function mndKey(lookup, item) {
        return lookup[hash(item.data)];
    }

    function groupByShapeThenMnd(colorShapes, mndLookup) {
        var groups = groupBy(colorShapes, function(i) {
            return i.shape;
        });
        Object.keys(groups).forEach(function(k) {
            groups[k] = groupBy(groups[k], mndKey.bind(this, mndLookup));
        });
        return groups;
    }

    function groupBy(items, keyFn) {
        return items.reduce(function(cache, item) {
            var key = keyFn(item);
            if (!cache.hasOwnProperty(key)) {
                cache[key] = [];
            }
            cache[key].push(item);
            return cache;
        }, {});
    }

    return CombinationLegend;
});

define('sap/viz/chart/views/XYChartView',['sap/viz/framework/common/util/oo',
        'sap/viz/chart/views/ChartView',
        'sap/viz/chart/components/plotareas/XYPlotArea',
        'sap/viz/chart/components/plotareas/XYTrellisPlotArea',
        'sap/viz/chart/components/legend/CombinationLegend'
    ],
    function Setup(oo, ChartView, PlotArea, TrellisPlotArea, CombinationLegend) {

        var XYChartView = function(runtime, option) {
            XYChartView.superclass.constructor.apply(this, arguments);
        };

        oo.extend(XYChartView, ChartView);

        XYChartView.prototype.setSize = function() {
            if (this._plotArea && this._plotArea.setRoughSize) {
                this._plotArea.setRoughSize.apply(this._plotArea, arguments);
            }
            XYChartView.superclass.setSize.apply(this, arguments);
        };

        XYChartView.prototype._getDataItems = function() {
            return ["valueAxis", "categoryAxis", "color", "dataFrame", "series", "trellisRow", "trellisColumn"];
        };

        XYChartView.prototype._createPlotContainer = function(isTrellis) {
            if (isTrellis) {
                this._plotArea = new TrellisPlotArea(this.runtime(), {
                    renderType: this._renderType
                });
            } else {
                this._plotArea = new PlotArea(this.runtime(), {
                    renderType: this._renderType
                });
                this._plotArea.setRoughSize(this._size);
            }

            this.setChild("main", this._plotArea, {
                priority: 3
            });
        };

        XYChartView.prototype.isCombination = function() {
            return this._renderType.indexOf("combination") !== -1;
        };

        XYChartView.prototype._getLegendDefinition = function() {
            if (this.isCombination()) {
                return [CombinationLegend];
            } else {
                return XYChartView.superclass._getLegendDefinition.apply(this, arguments);
            }
        };

        XYChartView.prototype.isBar = function() {
            return this._renderType.search(/bar|column/) !== -1;
        };

        XYChartView.prototype._getLegendInitOptions = function() {
            if (this.isBar()) {
                return [{
                    defaultMarkerShape: "squareWithRadius"
                }];
            } else {
                return XYChartView.superclass._getLegendInitOptions.apply(this, arguments);
            }
        };

        return XYChartView;
    });

define(
    'sap/viz/chart/components/legend/SizeLegend',['sap/viz/framework/common/util/oo', 'sap/viz/chart/components/legend/BaseLegend',
        'sap/viz/chart/components/util/TextUtils', 'sap/viz/chart/components/util/DrawUtil',
        'sap/viz/framework/common/util/TypeUtils', 'sap/viz/framework/common/format/FormatManager',
        'sap/viz/framework/common/util/NameColorUtils','sap/viz/framework/common/lang/LangManager'
    ],
    function(oo, BaseLegend, TextUtils, DrawUtil, TypeUtils, FormatManager, NameColorUtils, langManager) {

        var SizeLegend = function(runtime, options) {
            SizeLegend.superclass.constructor.apply(this, arguments);

            var props = this._properties.get();
            this._labelFont = {
                'fontfamily': props.label.style.fontFamily,
                'fontsize': props.label.style.fontSize,
                'fontweight': props.label.style.fontWeight,
                'color': props.label.style.color,
                'fontstyle': props.label.style.fontStyle
            };

            this._layoutInfo = {
                guideLineWidth: 10,
                labelPaddingLeft: 15
            };
            this._labels = [];
            this._scale = null;
            this._semanticStyle = null;
            this._labelHeight = 0;
            this._parent = null;
            this._type = "SizeLegend";
        };

        oo.extend(SizeLegend, BaseLegend);

        SizeLegend.prototype.render = function(selection, needRender) {
            this._parent = selection;
            /*
             * if(!needRender){ //Once rootContainer calls to render the
             * legend, we don't know the exact scale yet so we don't need to
             * render at this time; return; }
             */
            if (this._scale && this._labels.length > 0) {
                SizeLegend.superclass.render.apply(this, arguments);
            }

            if (!this.isVisible() && !this._isDedicated) {
                selection.selectAll('g.v-content').remove();
                return this;
            }

            var props = this._properties.get();
            var drawingEffect = props.drawingEffect;
            if (this._scale && this._labels.length > 0) {
                // append container
                var legendContent = selection.selectAll('g.v-content').data(['content']);
                legendContent.enter().append('g').classed('v-content', true).classed('v-label', true).classed(
                    'viz-legend-valueLabel', true);
                legendContent.exit().remove();
                legendContent.attr('transform', 'translate(0, ' + this._pos.y + ')');

                // Smart value label management.
                var textHeight = parseInt(this._labelFont.fontsize, 10); // 1em
                var visibleData = [],
                    labelFont = "font-size:" + this._labelFont.fontsize + "; font-weight:" +
                    this._labelFont.fontweight + "; font-family:" + this._labelFont.fontfamily +
                    "; font-style:" + this._labelFont.fontstyle;
                if (this._labelHeight === 0) {
                    this._labelHeight = TextUtils.fastMeasure('M', this._labelFont.fontsize,
                        this._labelFont.fontweight, this._labelFont.fontfamily).height;
                }
                var visibleCount = Math.floor((this._scale(this._labels[0]) + textHeight) / this._labelHeight);
                switch (visibleCount) {
                    case 0:
                    case 1:
                        visibleData.push(this._labels[0]);
                        break;
                    case 2:
                        visibleData.push(this._labels[0]);
                        if (this._labels.length > 1) {
                            visibleData.push(this._labels[this._labels.length - 1]);
                        }
                        break;
                    default:
                        visibleData = this._labels;
                }

                var bubbleSizeArr = [],
                    maxWidth = -1,
                    dataWidth, value;
                for (var i = 0, len = visibleData.length; i < len; i++) {
                    bubbleSizeArr.push(this._scale(visibleData[i]) / 2);
                    value = this._getLabelValue(visibleData[i]);

                    dataWidth = TextUtils.fastMeasure(value, this._labelFont.fontsize, this._labelFont.fontweight,
                        this._labelFont.fontfamily).width;
                    if (dataWidth > maxWidth) {
                        maxWidth = dataWidth;
                    }
                }
                var maxBubbleSize = bubbleSizeArr[0];
                var wrap = legendContent;
                var circlesWrap = wrap.selectAll('g.v-circles');
                if (!circlesWrap.empty()) {
                    circlesWrap.remove();
                }
                circlesWrap = wrap.append('g').attr('class', 'v-circles').data([bubbleSizeArr]);

                circlesWrap.attr('transform', 'translate(' + maxBubbleSize + ',' + (maxBubbleSize + textHeight / 2) +
                    ')');
                var colorToDraw;
                var colorPalette = this._properties.origin.get("plotArea.colorPalette");
                if(colorPalette && colorPalette.length && colorPalette.length > 0){
                    colorToDraw = NameColorUtils.convertColor(colorPalette[0]);
                }else{
                    colorToDraw = '#748CB2';
                }
                var useDefaultColor = true; // according to PO, we do not
                // change the color of size
                // legend.
                if (!useDefaultColor && this._semanticStyle && !TypeUtils.isEmptyObject(this._semanticStyle)) {
                    if (this._semanticStyle.others && this._semanticStyle.others.properties &&
                        this._semanticStyle.others.properties.color) {
                        colorToDraw = this._semanticStyle.others.properties.color;
                    }
                }
                var parameter = {
                    drawingEffect: drawingEffect,
                    graphType: 'circle',
                    fillColor: colorToDraw
                };
                var fillID = this.runtime().effectManager().register(parameter);
                var circleElements = circlesWrap.selectAll('path').data(bubbleSizeArr, function(d, i) {
                    return d;
                });
                circleElements.exit().remove();
                circleElements.enter().append('path').attr('stroke', 'white').attr('stroke-width', 1).attr('fill',
                    fillID).attr('opacity', '1').attr('fill-opacity', '0.85');
                circleElements.attr('d', function(d, i) {
                    return DrawUtil.createMarkerData({
                        type: 'circle',
                        borderWidth: 0,
                        rx: d,
                        ry: d
                    });
                }).attr('transform', function(d, i) {
                    return ['translate(', 0, ',', maxBubbleSize - d, ')'].join('');
                });

                var labelsWrap = wrap.selectAll('g.v-valueLabels');
                if (labelsWrap.empty()) {
                    labelsWrap = wrap.append('g').attr('class', 'v-valueLabels').data([visibleData]);
                }
                var labelX = (maxBubbleSize * 2 + this._layoutInfo.labelPaddingLeft +
                    this._layoutInfo.guideLineWidth + maxWidth) > this._sizeLA_width ? this._sizeLA_width : (
                    maxBubbleSize * 2 + this._layoutInfo.labelPaddingLeft + this._layoutInfo.guideLineWidth +
                    maxWidth);
                labelsWrap.attr('transform', 'translate(' + labelX + ', ' + (maxBubbleSize + textHeight) + ')');
                var valueElements = labelsWrap.selectAll('text').data(visibleData, function(d, i) {
                    return d;
                });
                valueElements.exit().remove();
                valueElements.enter().append('text').attr('text-anchor', 'end');
                var that = this;
                valueElements.text(function(d, i) {
                    return that._getLabelValue(d);
                }).attr('dx', 0).attr('dy', function(d, i) {
                    var dy = (i - 1) * maxBubbleSize - 2;
                    if (visibleData.length === 2 && i === 1) {
                        dy = maxBubbleSize - 2;
                    }
                    return dy;
                });

                var guidelineWrap = wrap.selectAll('g.v-guideLines');
                if (!guidelineWrap.empty()) {
                    // Empty
                    guidelineWrap.remove();
                }
                guidelineWrap = wrap.append('g').attr('class', 'v-guideLines').attr('transform',
                    'translate(' + maxBubbleSize + ',' + (maxBubbleSize + textHeight / 2) + ')');
                if (visibleData.length > 0) {
                    guidelineWrap.append('path').attr('stroke', 'gray').attr(
                        'd',
                        'M 0 ' + -maxBubbleSize + ' L ' + (maxBubbleSize + this._layoutInfo.guideLineWidth) +
                        " " + -maxBubbleSize);
                }
                if (visibleData.length > 1) {
                    guidelineWrap.append('path').attr('stroke', 'gray').attr(
                        'd',
                        'M 0 ' + maxBubbleSize + 'L' + (maxBubbleSize + this._layoutInfo.guideLineWidth) + " " +
                        maxBubbleSize);
                }
                if (visibleData.length > 2) {
                    guidelineWrap.append('path').attr('stroke', 'gray').attr(
                        'd',
                        'M 0 ' + (maxBubbleSize - bubbleSizeArr[1]) + ' L ' + maxBubbleSize + " 0" + ' M ' +
                        maxBubbleSize + " 0 " + " L " +
                        (maxBubbleSize + this._layoutInfo.guideLineWidth) + " 0");
                }

                // var defaultValueLabelStyle =
                // this._ctx.styleManager.queryDefault('v-label');
                wrap.attr('font-family', this._labelFont.fontfamily).attr('font-size', this._labelFont.fontsize)
                    .attr('font-weight', this._labelFont.fontweight).attr('fill', this._labelFont.color).attr(
                        'font-style', this._labelFont.fontstyle);

            }
            return this;
        };

        SizeLegend.prototype.getPreferredSize = function() {
            if (!this._scale || this._labels.length === 0) {
                return {
                    width: 0,
                    height: 0,
                    minWidth: 0,
                    minHeight: 0,
                    maxWidth: 0,
                    maxHeight: 0
                };
            }
            return SizeLegend.superclass.getPreferredSize.apply(this, arguments);
        };

        SizeLegend.prototype._getBodyPreferredSize = function() {
            this._getThemeStyleDef();
            var maxWidth = 0,
                maxHeight = 0,
                minWidth = 0,
                minHeight = 0;
            var props = this._properties.get();
            var position = props.position;
            if (this._scale && this._labels.length > 0) {
                var data = this._labels,
                    value, valueSize = [],
                    maxValueWidth = -1,
                    maxBubbleSize, i, len;
                for (i = 0, len = data.length; i < len; i++) {
                    value = this._getLabelValue(data[i]);

                    valueSize[i] = TextUtils.fastMeasure(value, this._labelFont.fontsize,
                        this._labelFont.fontweight, this._labelFont.fontfamily);
                    if ((valueSize[i] === undefined) || (valueSize[i].width > maxValueWidth)) {
                        maxValueWidth = valueSize[i].width;
                    }
                }
                var space = maxValueWidth + this._layoutInfo.labelPaddingLeft + this._layoutInfo.guideLineWidth;
                maxBubbleSize = this._scale(data[0]);

                maxHeight = maxBubbleSize + valueSize[len - 1].height;
                maxWidth = maxBubbleSize + space;
                minWidth = maxWidth;
                minHeight = maxHeight;

                //TODO workaround to add 1em padding in the bottom or right 
                if (position === 'top' || position === 'bottom') {
                    maxWidth = maxWidth + valueSize[len - 1].height;
                    minWidth = minWidth + valueSize[len - 1].height;
                } else {
                    maxHeight = maxHeight + valueSize[len - 1].height;
                    minHeight = maxHeight;
                }
            }
            return {
                maxWidth: maxWidth,
                maxHeight: maxHeight,
                minWidth: minWidth,
                minHeight: minHeight
            };
        };

        SizeLegend.prototype.setData = function(info) {
            if (!info) {
                return;
            }
            if (info.bubbleWidth) {
                this._bindingFields = info.bubbleWidth.metaData;
            }
            this._labels = info.labels;
            this._scale = info.scale;
            this._semanticStyle = info.semanticStyle;
        };

        SizeLegend.prototype._getThemeStyleDef = function() {
            SizeLegend.superclass._getThemeStyleDef.apply(this, arguments);
            var props = this._properties.get();
            var valueLabelStyle;
            valueLabelStyle = {
                "fill": props.label.style.color,
                "font-family": props.label.style.fontFamily,
                "font-size": props.label.style.fontSize,
                "font-weight": props.label.style.fontWeight,
                "font-style": props.label.style.fontStyle
            };
            if (valueLabelStyle) {
                if (valueLabelStyle['fill']) {
                    this._labelFont.color = valueLabelStyle['fill'];
                }
                if (valueLabelStyle['font-family']) {
                    this._labelFont.fontfamily = valueLabelStyle['font-family'];
                }
                if (valueLabelStyle['font-size']) {
                    this._labelFont.fontsize = valueLabelStyle['font-size'];
                }
                if (valueLabelStyle['font-weight']) {
                    this._labelFont.fontweight = valueLabelStyle['font-weight'];
                }
                if (valueLabelStyle['font-style']) {
                    this._labelFont.fontstyle = valueLabelStyle['font-style'];
                }
            }
        };

        SizeLegend.prototype._getLabelValue = function(value) {
            value = (value === null) ? langManager.get('IDS_ISNOVALUE') : value;
            var props = this._properties.get();
            value = FormatManager.format(value, props.formatString);
            return value;
        };

        SizeLegend.prototype.destroy = function() {
            SizeLegend.superclass.destroy.call(this);
            this._labelFont = null;
            this._layoutInfo = null;
            this._labels = null;
            this._scale = null;
            this._semanticStyle = null;
            this._labelHeight = null;
            this._parent = null;
            this._type = null;
        };
        
        return SizeLegend;
    });

define('sap/viz/chart/components/axis/sub/TimeValueAxisBody',[
    "sap/viz/framework/common/util/oo",
    "sap/viz/chart/components/axis/sub/ValueAxisBody",
    "sap/viz/framework/common/util/TypeUtils",
    "sap/viz/framework/scale/ValueScaleUtil",
    "sap/viz/framework/common/lang/LangManager",
    "sap/viz/chart/components/util/ValueAxisUtils",
    "sap/viz/chart/components/axis/renderer/ValueBodyRenderer",
    "sap/viz/framework/common/format/FormatManager"
], function(oo, ValueAxisBody, TypeUtils, ValueScaleUtil, LangMgr, ValueAxisUtils, ValueBodyRenderer, FormatManager) {
    var TimeValueAxisBody = function() {
        TimeValueAxisBody.superclass.constructor.apply(this, arguments);
    };
 
    oo.extend(TimeValueAxisBody, ValueAxisBody);

    TimeValueAxisBody.prototype._getTicksToRender = function() {
        var scale = this._data,
            domain = scale.getDomain();
        return this._getAllLabels(null, scale, true).filter(function(l) {
            return l.value >= domain[0] && l.value <= domain[1];
        }).map(function(l) {
            return l.value;
        });
    };

    TimeValueAxisBody.prototype.drawTicks = function(grp, ticksPos, w, h, pos, props, effectMgr) {
        return ValueBodyRenderer.drawTicks(grp, ticksPos, w, h, pos, props, effectMgr, true);
    };
    
    TimeValueAxisBody.prototype._getFixedTicksLabels = function(fixedTicks, domain) {
        fixedTicks.forEach(function(n) {
            n.text = TypeUtils.isNonEmptyString(n.text) ? n.text : LangMgr.get('IDS_ISNOVALUE');
        });
        return fixedTicks.filter(function(l) {
            return l.value >= domain[0] && l.value <= domain[1];
        });
    };

    TimeValueAxisBody.prototype._getAllLabels = function(placeHolder, scale, unfiltered) {
        var fixedTicks = this._properties.get("axisTick.fixedTicks"),
            domain = scale.getDomain(),
            labels = [];
        if (fixedTicks && fixedTicks.length > 0) {
            labels = this._getFixedTicksLabels(fixedTicks, domain);
        } else {
            var timeUnit = scale.timeUnit,
                timeUnitGap = scale.timeUnitGap,
                tickNum = scale.tickNum,
                startDate = new Date(domain[0]);
            var format = function(val) {
                return FormatManager.format(new Date(val), timeUnit.format);                
            },
                formatD = function(val) {
                    return FormatManager.format(new Date(val), "dd/mm/yyyy hh:mm");                
                };

            startDate.setMinutes(0);
            startDate.setSeconds(0);
            startDate.setMilliseconds(0);

            for (var i = 0, d; i < tickNum; i++) {
                d = new Date(startDate.getTime());
                timeUnit.set.apply(d, [timeUnit.get.apply(startDate, []) + i * timeUnitGap]);
                labels.push({
                    text: format(d),
                    value: d.getTime()
                });
            }

            var domainFixed = scale.getDomainFixed();
            if (domainFixed[0]) {
                labels[0].text = formatD(new Date(labels[0].value));
            }
            if (domainFixed[1]) {
                labels.push({
                    value: domain[1],
                    text: formatD(new Date(domain[1]))
                });
            }
        }
        this._setLabelsPosition(labels, scale);
        if (!unfiltered) {
            return this._filterLabels(labels);
        }
        return labels;
    };

    TimeValueAxisBody.prototype._filterLabels = function(all) {
        var toDraw = [];

        if (all.length > 1) {
            toDraw = ValueAxisUtils.calculateLabelsToDrawHelper(all);
            //When the height/width of vertical/horizontal axis is small that can only hold one axis label, 
            //the label should be hidden.
            if (toDraw.length <= 1 || (toDraw.length === 2 && ValueAxisUtils.isOverLapped(toDraw[0], toDraw[1]))) {
                toDraw = [];
            }
        } else if (all.length === 1) {
            toDraw = all;
        }
        return toDraw;
    };


    return TimeValueAxisBody;
});

define('sap/viz/chart/components/axis/TimeValueAxis',[
    "sap/viz/framework/common/util/oo",
    "sap/viz/chart/components/axis/ValueAxis",
    "sap/viz/chart/components/axis/sub/TimeValueAxisBody",
    "sap/viz/chart/components/scrollbar/Scrollbar"
], function(oo, ValueAxis, TimeValueAxisBody, Scrollbar) {
    var TimeValueAxis = function(runtime, options) {
        ValueAxis.superclass.constructor.apply(this, arguments);

        this.setChild("axisBody", new TimeValueAxisBody(runtime, options), {
            order: 1,
            priority: 2,
            offset: 0
        });
        this.setChild("axisScrollbar", new Scrollbar(runtime, {
            name: 'plotArea.scrollbar'
        }), {
            order: 2,
            priority: 0,
            offset: 0
        });
        this._isPercentageMode = false;
    };

    oo.extend(TimeValueAxis, ValueAxis);

    TimeValueAxis.prototype.setData = function(data) {
        TimeValueAxis.superclass.setData.apply(this, arguments);
        if (data && data.scale) {
            this._scale.tickNum = data.scale.tickNum;
            this._scale.timeUnit = data.scale.timeUnit;
            this._scale.timeUnitGap = data.scale.timeUnitGap;
        }
    };
    return TimeValueAxis;
});

define('sap/viz/chart/components/plotareas/YYPlotArea',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/chart/components/container/XYContainer',
    'sap/viz/chart/components/axis/ValueAxis',
    'sap/viz/chart/components/axis/ValueScrollbarAxis',
    'sap/viz/chart/components/scrollbar/Scrollbar',
    'sap/viz/chart/components/plots/PlotFactory',
    "sap/viz/framework/scale/ValueScale",
    "sap/viz/framework/common/util/NumberUtils",
    "sap/viz/chart/components/axis/TimeValueAxis",
    'sap/viz/chart/components/util/ValueAxisUtils',
    'sap/viz/framework/common/util/UADetector',
    'sap/viz/framework/common/util/Constants'
], function Setup(oo, XYContainer, ValueAxis, ValueScrollbarAxis, Scrollbar, PlotFactory,
    ValueScale, NumberUtils, TimeValueAxis, ValueAxisUtils,UADetector, Constants) {
    var Scatter = function(runtime, options) {
        Scatter.superclass.constructor.apply(this, arguments);
        this._init();
    };

    oo.extend(Scatter, XYContainer);

    Scatter.prototype._init = function(plot) {
        this._plot = PlotFactory.create(this._renderType, this.runtime());

        if (this.isTimeBased()) {
            this._valueAxis = new TimeValueAxis(this.runtime(), {
                name: "valueAxis"
            });
            this._plot._dataLabels.setTimeBindingId("valueAxis");
        } else {
            this._valueAxis = new ValueScrollbarAxis(this.runtime(), {
                name: "valueAxis"
            });
        }
        this._hScrollbar = this._valueAxis.getChild("axisScrollbar").module;

        this._valueAxis2 = new ValueAxis(this.runtime(), {
            name: "valueAxis2"
        });

        this._vScrollbar = new Scrollbar(this.runtime(), {
            name: "plotArea.scrollbar"
        });

        this.setChild("scrollbar", this._vScrollbar, {
            position: "right"
        });

        this.setLayoutSequence(['left', 'right', 'bottom', 'top']);
        this.setChild("valueAxis", this._valueAxis, {
            position: "bottom"
        });
        this.setChild("valueAxis2", this._valueAxis2, {
            position: "left"
        });

        this.setChild("plot", this._plot, {
            position: "center"
        });
    };

    Scatter.prototype.destroy = function() {
        Scatter.superclass.destroy.call(this);
        this._plot = null;
        this._valueAxis = null;
        this._valueAxis2 = null;
        this._vScrollbar = null;
        this._hScrollbar = null;
    };
    
    Scatter.prototype.getPlot = function() {
        return this._plot;
    };

    Scatter.prototype.isTimeBased = function() {
        return this._renderType === "time_bubble";
    };

    Scatter.prototype.isScatter = function() {
        return this._renderType === "scatter";
    };


    Scatter.prototype.setData = function(data) {
        Scatter.superclass.setData.apply(this, arguments);
        this.updateValueScale();
        this._plot.setData(this._data);
    };

    Scatter.prototype.updateValueScale = function() {
        var data = this._data;
        var width = this._roughSize.width;
        var height = this._roughSize.height;
        if (!data || width <= 0 || height <= 0) {
            return;
        }
        var sizeRatio = Constants.BUBBLE.DEFAULT_WIDTH_RATIO;
        var valueAxisData = ValueAxisUtils.updateScatterValueAxis(this._data.valueAxis, [0,
            width * 0.8
        ], sizeRatio, this.isTimeBased());
        var valueAxisData2 = ValueAxisUtils.updateScatterValueAxis(this._data.valueAxis2, [0,
            height * 0.8
        ], sizeRatio, false);

        [valueAxisData, valueAxisData2].forEach(function(e, i) {
            var key = "valueAxis" + (i ? "2" : "");
            this._data[key].scale = e.scale;
            this._data[key].tickHint = e.tickHint;
            e.scale.setRange([0, 1]);
            this["_" + key].setData(this._data[key]);
        }, this);
    };


    Scatter.prototype.getVScrollbar = function() {
        return this._vScrollbar;
    };

    Scatter.prototype.getHScrollbar = function() {
        return this._hScrollbar;
    };

    Scatter.prototype.layout = function() {
        var isVScrollbarExist, isHScrollbarExist;
        isVScrollbarExist = isHScrollbarExist = UADetector.isMobile();
        if (this._vScrollbar) {
            this._vScrollbar.setProperties({
                isExist: isVScrollbarExist
            });
        }
        if (this._hScrollbar) {
            this._hScrollbar.setProperties({
                isExist: isHScrollbarExist
            });
        }

        Scatter.superclass.layout.apply(this, arguments);
    };
    return Scatter;
});

define('sap/viz/chart/components/plotareas/YYTrellisPlotArea',[
    'jquery',
    "sap/viz/framework/common/util/oo",
    'sap/viz/framework/common/util/Constants',
    "sap/viz/framework/common/util/DOM",
    'sap/viz/chart/components/axis/CategoryAxis',
    'sap/viz/chart/components/axis/ValueAxis',
    'sap/viz/chart/components/container/GridContainer',
    'sap/viz/chart/components/plots/PlotFactory',
    "sap/viz/chart/components/plotareas/TrellisPlotArea",
    'sap/viz/chart/components/util/ValueAxisUtils'
], function Setup($, oo, Constants, DOM, CategoryAxis, ValueAxis, GridContainer, PlotFactory, TrellisPlotArea, 
    ValueAxisUtils) {
    var YYTrellisPlotArea = function(runtime, options) {
        YYTrellisPlotArea.superclass.constructor.apply(this, arguments);

        this._gridContainerOptions.enableCellClipPath = true;
        this._gridContainer.updateOptions(this._gridContainerOptions);
    };
    oo.extend(YYTrellisPlotArea, TrellisPlotArea);

    YYTrellisPlotArea.prototype._addValueAxis = function(index, position, headerLayer, name) {
        var valueAxis = new ValueAxis(this.runtime(), {
            name: name,
            disableTitle: true,
            isTrellis : true
        });
        valueAxis.setPosition(position);
        valueAxis.setData(this._data[name]);
        headerLayer.setAxisType(name);
        headerLayer.addHeader(valueAxis, index, 1, position);
        return valueAxis;
    };

    YYTrellisPlotArea.prototype._initBottomHeaders = function(rowCount, columnCount) {
        var position = "bottom";
        var name = "valueAxis";
        this._valueAxis = [];
        var headerLayer = this._gridContainer.addHeaderLayer(position);
        headerLayer.setMaxSizeProperty(name + ".layout.maxHeight");
        for (var col = 0; col < columnCount; col++) {
            this._valueAxis[col] = this._addValueAxis(col, position, headerLayer, name);
        }

        YYTrellisPlotArea.superclass._initBottomHeaders.apply(this, arguments);
    };

    YYTrellisPlotArea.prototype._initLeftHeaders = function(rowCount, columnCount) {
        YYTrellisPlotArea.superclass._initLeftHeaders.apply(this, arguments);

        var position = "left";
        var name = "valueAxis2";
        var headerLayer = this._gridContainer.addHeaderLayer(position);
        headerLayer.setMaxSizeProperty(name + ".layout.maxWidth");
        this._valueAxis2 = [];
        for (var row = 0; row < rowCount; row++) {
            this._valueAxis2[row] = this._addValueAxis(row, position, headerLayer, name);
        }
    };

    YYTrellisPlotArea.prototype._createLeftTitleOptions = function(rowCount, columnCount) {
        var options =  YYTrellisPlotArea.superclass._createLeftTitleOptions.apply(this, arguments);
        options.axis = {
            data : "valueAxis2",
            property : "valueAxis2"
        };
        return options;
    };

    YYTrellisPlotArea.prototype._createBottomTitleOptions = function(rowCount, columnCount) {
        var options =  YYTrellisPlotArea.superclass._createBottomTitleOptions.apply(this, arguments);
        options.axis = {
            data: "valueAxis",
            property: "valueAxis"
        };
        return options;
    };
    
    YYTrellisPlotArea.prototype._applyValueAxisScale = function(valueAxis, valueAxisScale) {
        for (var i = 0; i < valueAxis.length; i++) {
            valueAxis[i].setData(valueAxisScale);
        }
    };
    
    YYTrellisPlotArea.prototype._getPlotOptions = function() {
        var options = YYTrellisPlotArea.superclass._getPlotOptions.apply(this, arguments) || {};
        options.disableClipPath = true;
        return options;
    };
    
    YYTrellisPlotArea.prototype._beforeMeasure = function(rowCount, columnCount) {
        YYTrellisPlotArea.superclass._beforeMeasure.apply(this, arguments);
        
        var data = this._data;
        var width = this._size.width / columnCount;
        var height = this._size.height / rowCount;
        if (!data || width <= 0 || height <= 0) {
            return;
        }
        var sizeRatio = Constants.BUBBLE.DEFAULT_WIDTH_RATIO;
        var valueAxisData = ValueAxisUtils.updateScatterValueAxis(this._data.valueAxis,
                [0, width], sizeRatio, false);
        var valueAxisData2 = ValueAxisUtils.updateScatterValueAxis(this._data.valueAxis2,
                [0, height], sizeRatio, false);

        [valueAxisData, valueAxisData2].forEach(function(e, i) {
            var key = "valueAxis" + (i ? "2" : "");
            this._data[key].scale = e.scale;
            this._data[key].tickHint = e.tickHint;
            e.scale.setRange([0, 1]);
        }, this);
        
        this._applyValueAxisScale(this._valueAxis, valueAxisData);
        this._applyValueAxisScale(this._valueAxis2, valueAxisData2);

        var axisPadding = this._valueAxis[0].getPadding(this._data.valueAxis.scale);
        var axis2Padding = this._valueAxis2[0].getPadding(this._data.valueAxis2.scale);
        var padding = {
            top: axis2Padding.end,
            bottom: axis2Padding.start,
            left : axisPadding.start,
            right : axisPadding.end
        };
        this._gridContainerOptions.cell.padding = padding;
        this._gridContainer.updateOptions(this._gridContainerOptions);
    };
    
    YYTrellisPlotArea.prototype._preRenderTitle = function() {
        YYTrellisPlotArea.superclass._preRenderTitle.apply(this, arguments);

        var valueCount = 0;
        if(this._valueAxis && this._valueAxis[0]){
            valueCount = this._valueAxis[0].getChild("axisBody").module.getAvailableLayersNumber();
        }
        var value2Count = 0;
        if(this._valueAxis2 && this._valueAxis2[0]){
            value2Count = this._valueAxis2[0].getChild("axisBody").module.getAvailableLayersNumber();
        }
        this._leftTitle.setAxisHiddenItems(value2Count);
        this._bottomTitle.setAxisHiddenItems(valueCount);
    };
    
    YYTrellisPlotArea.prototype.applySizeScale = function(sizeScale) {
        var children = this._children();
        var gridContainer = this._gridContainer;
        var rowCount = gridContainer.getRowCount();
        var columnCount = gridContainer.getColumnCount();
        
        for (var rowIndex = 0; rowIndex < children.length; rowIndex++) {
            var row = children[rowIndex];
            for (var columnIndex = 0; columnIndex < row.length; columnIndex++) {
                var plot = row[columnIndex];
                plot.setSizeScale(sizeScale);
            }
        }
    };
    
    YYTrellisPlotArea.prototype.getMinBodySize = function() {
        var gridContainer = this._gridContainer;
        return gridContainer.getMinBodySize();
    };
    
    return YYTrellisPlotArea;
});
define('sap/viz/chart/views/YYChartView',['sap/viz/framework/common/util/oo',
        'sap/viz/chart/views/ChartView',
        'sap/viz/chart/components/legend/ColorLegend',
        'sap/viz/chart/components/legend/SizeLegend',
        'sap/viz/chart/components/plotareas/YYPlotArea',
        'sap/viz/framework/scale/SizeScaleUtil',
        'sap/viz/chart/components/plotareas/YYTrellisPlotArea',
        'sap/viz/framework/common/util/NumberUtils',
        'sap/viz/framework/common/util/Constants'
    ],
    function Setup(oo, ChartView, ColorLegend, SizeLegend, PlotArea, 
            SizeScaleUtil, TrellisPlotArea, NumberUtils, Constants) {
        var BUBBLE_TYPE = {"bubble": true, "time_bubble": true};
        var YYChartView = function(runtime, option) {
            YYChartView.superclass.constructor.apply(this, arguments);
        };

        oo.extend(YYChartView, ChartView);

        YYChartView.prototype.setSize = function() {
            if (this._plotArea && this._plotArea.setRoughSize) {
                this._plotArea.setRoughSize.apply(this._plotArea, arguments);
            }
            YYChartView.superclass.setSize.apply(this, arguments);
        };

        YYChartView.prototype._isBubble = function() {
            return BUBBLE_TYPE[this._renderType];
        };

        YYChartView.prototype._getLegendDefinition = function() {
            
            if (this._isBubble()) {
                return [SizeLegend, ColorLegend];
            }
            
            return [ColorLegend];
        };

        YYChartView.prototype._getLegendModuleKey = function() {
            
            if (this._isBubble()) {
                return ["sizeLegend", "legend"];
            }
            
            return ["legend"];
        };

        YYChartView.prototype._getDataItems = function() {
            return ["valueAxis", "valueAxis2", "bubbleHeight", "bubbleWidth", "color",
                "shape", "dataFrame", "series", "transparent",
                "trellisRow", "trellisColumn"
            ];
        };

        YYChartView.prototype._createPlotContainer = function(isTrellis) {
            
            if (isTrellis) {
                this._plotArea = new TrellisPlotArea(this.runtime(), {
                    renderType: this._renderType
                });
            } else {
                this._plotArea = new PlotArea(this.runtime(), {
                    renderType: this._renderType
                });
                this._plotArea.setRoughSize(this._size);
                this._plot = this._plotArea.getPlot();
            }
            this.setChild("main", this._plotArea, {
                priority: 3
            });
        };

        YYChartView.prototype.layout = function() {
            if (this._isBubble()) {
                this._applySizeScale(this._plotArea);
                YYChartView.superclass.layout.apply(this, arguments);
            } else {
                YYChartView.superclass.layout.apply(this, arguments);
            }
        };
        
        YYChartView.prototype._applySizeScale = function(plotArea) {

            var isTrellis = (plotArea instanceof TrellisPlotArea);
            
            var widthScale = this._data.bubbleWidth.scale;
            var widthDomainValues = widthScale.getDomain();
            var min = widthDomainValues[0],
                max = widthDomainValues[1];
            var labels;
            /*
             * The rules for size legend labels
             * Plot(x,y,z != null && x,y,z != 0)    Size Legend
             * [null]                               [no value]
             * [x]                                  [max]
             * [x, null]                            [max, no value]
             * [x, y]                               [max, min]
             * [x, 0, null]                         [max, 0]
             * [x, y, null]                         [max, (max+min)/2, no value]
             * [x, y, z]                            [max, (max+min)/2, min]
             * [x, y, z, null]                      [max, (max+min)/2, no value]
             * [x, y, 0, null]                      [max, (max+0)/2, 0]
             */
            if(NumberUtils.isNoValue(max) && NumberUtils.isNoValue(min)) {
                labels = [null];
            }
            else if(max === min) {
                if(!widthDomainValues.withNoValue) {
                    labels = [max];
                }
                else {
                    labels = [max, null];
                }
            }
            else {
                if(!widthDomainValues.withNoValue && !widthDomainValues.withMiddleValue) {
                    labels = [max, min];
                }
                else if(!widthDomainValues.withNoValue && widthDomainValues.withMiddleValue) {
                    labels = [max, (max + min) / 2, min];
                }
                else if(widthDomainValues.withNoValue && 
                        !widthDomainValues.withMiddleValue && widthDomainValues.withZeroValue) {
                    labels = [max, min];
                }
                else if(widthDomainValues.withNoValue && 
                        !widthDomainValues.withMiddleValue && !widthDomainValues.withZeroValue) {
                    labels = [max, (max + min) / 2, null];
                }
                else {
                    labels = [max, (max + min) / 2, widthDomainValues.withZeroValue ? 0 : null];
                }
            }
            
            // calculate max size
            var minMarkerSize = parseInt(this._properties.get("plotArea.minMarkerSize"));
            var maxSize = null;
            
            var legendGroup = this.getChild("legendGroup").module;
            
            if (isTrellis) {
                
                var minBodySize = plotArea.getMinBodySize();
                var getPositiveInt = NumberUtils.getPositiveInt;
                var originProp = this._properties.origin;
                var paddingInfo = this.calculatePaddingInPX(originProp, this._size.width, this._size.height);

                var padding = getPositiveInt(paddingInfo.propertyPaddingInPX, paddingInfo.constantPaddingInPX);
                var paddingTop = getPositiveInt(paddingInfo.propertyPaddingTopInPX, padding);
                var paddingRight = getPositiveInt(paddingInfo.propertyPaddingRightInPX, padding);
                var paddingBottom = getPositiveInt(paddingInfo.propertyPaddingBottomInPX, padding);
                var paddingLeft = getPositiveInt(paddingInfo.propertyPaddingLeftInPX, padding);
                
                var minHeight = Math.max(this._size.height, minBodySize.height + 
                            paddingTop + paddingBottom);
                var minWidth = Math.max(this._size.width, minBodySize.width + 
                            paddingLeft + paddingRight);
                
                maxSize = Math.min(minHeight, minWidth);
                maxSize *= Constants.BUBBLE.DEFAULT_WIDTH_RATIO;
            } else {
                maxSize = Math.min(this._size.height, this._size.width);
                maxSize *= Constants.BUBBLE.DEFAULT_WIDTH_RATIO;
            }
            
            var sizeScale = SizeScaleUtil.build(minMarkerSize, maxSize, widthDomainValues);

            var sizeLegend = legendGroup.getChild("sizeLegend").module;
            
            sizeLegend.setData({
                labels: labels,
                scale: sizeScale
            });
            
            if (isTrellis) {
                plotArea.applySizeScale(sizeScale);
            } else {
                this._plot.setSizeScale(sizeScale);
            }
        };
        
        return YYChartView;
    });

define('sap/viz/chart/components/plotareas/XYYPlotArea',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/chart/components/plotareas/XYPlotArea',
    'sap/viz/chart/components/axis/ValueAxis',
    'sap/viz/chart/components/axis/ValueScrollbarAxis',
    'sap/viz/chart/components/axis/CategoryAxis',
    "sap/viz/framework/scale/ValueScale",
    "sap/viz/framework/scale/ValueScaleUtil",
    'sap/viz/chart/components/util/TextUtils'
], function Setup(oo, XYPlotArea, ValueAxis, ValueScrollbarAxis, CategoryAxis, ValueScale, ValueScaleUtil, TextUtils) {
    var DualCSV = function(runtime, options) {
        DualCSV.superclass.constructor.apply(this, arguments);
    };

    oo.extend(DualCSV, XYPlotArea);

    DualCSV.prototype._getPlotOptions = function() {
        return {
            isDualValueAxis: true
        };
    };

    DualCSV.prototype.setData = function(data) {
        DualCSV.superclass.setData.apply(this, arguments);
        this._properties.setDefault("valueAxis.color", data.color.scale.getRange()[0]);
        this._properties.setDefault("valueAxis2.color", data.color2.scale.getRange()[0]);
        this._properties.setDefault("valueAxis.title.applyAxislineColor", true);
        this._properties.setDefault("valueAxis2.title.applyAxislineColor", true);
    };

    DualCSV.prototype.allOrNone = function(result, all) {
        var measureName = this._plot.isHorizontal() ? "height" : "width",
            visible = this._properties.get("valueAxis.visible") && this._properties.get("valueAxis2.visible"),
            size1 = result.valueAxis[measureName],
            size2 = result.valueAxis2[measureName];
        if (visible && (size1 === 0 || size2 === 0)) {
            result.valueAxis[measureName] = result.valueAxis2[measureName] = 0;
            all[measureName] += (size1 + size2);
        }
    };

    DualCSV.prototype._init = function() {
        DualCSV.superclass._init.apply(this, arguments);

        if (this._plot.isHorizontal()) {
            this._valueAxis = new ValueAxis(this.runtime(), {
                name: "valueAxis"
            });
            this._valueAxis2 = new ValueScrollbarAxis(this.runtime(), {
                name: "valueAxis2"
            });
            
            this._hScrollbar = this._valueAxis2.getChild("axisScrollbar").module;
        } else {
            this._valueAxis2 = new ValueScrollbarAxis(this.runtime(), {
                name: "valueAxis2"
            });
            this._vScrollbar = this._valueAxis2.getChild("axisScrollbar").module;
        }
        
        if (this._isPercentageChart()) {
            this._valueAxis.setPercentageMode(true);
            this._valueAxis2.setPercentageMode(true);
        }
        if (this._plot.isHorizontal()) {
            this.setChild("valueAxis", this._valueAxis, {
                position: "top"
            });
            this.setChild("valueAxis2", this._valueAxis2, {
                position: "bottom"
            });
            this.setLayoutSequence(['bottom', 'top', this.allOrNone.bind(this), 'left', 'right']);
        } else {
            this.removeChild("scrollbar");
            this.setChild("valueAxis2", this._valueAxis2, {
                position: "right"
            });
            this.setLayoutSequence(['left', 'right', this.allOrNone.bind(this), 'bottom', 'top']);
        }
    };

    DualCSV.prototype.updateValueScale = function() {
        var data = this._data;
        var width = this._roughSize.width;
        var height = this._roughSize.height;
        if (!data || width <= 0 || height <= 0) {
            return;
        }
        var range = [0, 1];
        if (this._plot.isHorizontal()) {
            range[1] = width;
        } else {
            range[1] = height;
        }
        range[1] *= 0.8;
        var valueAxisData, valueAxisData2, newData = data;
        if (this._isPercentageChart()) {
            valueAxisData = this._calcPercentageValueAxisScale(range);
            ["", "2"].forEach(function(e) {
                var key = "valueAxis" + e;
                valueAxisData.metaData = data[key].metaData;
                data[key].tickHint = valueAxisData.tickHint;
                this["_" + key].setData(valueAxisData);
            }, this);
        } else {
            if (this._isColumnChart()){
                var dataLabelOpt = this._properties.get('plotArea.dataLabel');
                var fixedRangeOpt = this._properties.get('plotArea.primaryScale.fixedRange');

                var valueScale = this._data.valueAxis.scale;
                var valueScale2 = this._data.valueAxis2.scale;
                var domain = valueScale.getDomain().slice();
                var domain2 = valueScale2.getDomain().slice(); 
                if((!(fixedRangeOpt || valueScale.getDomainFixed()[1] || valueScale2.getDomainFixed()[1])) && 
                        dataLabelOpt.visible && ((domain && domain[1] > 0)|| (domain2 && domain2[1] > 0))){
                    var textHeight = TextUtils.fastMeasure('M', dataLabelOpt.style.fontSize, 
                        dataLabelOpt.style.fontWeight, dataLabelOpt.style.fontFamily, 
                        dataLabelOpt.style.fontStyle).height;

                    var minValue = (domain[0] > 0) ? 0 : domain[0];
                    domain[1] = Math.round((domain[1] * range[1] - minValue * textHeight)/(range[1] - textHeight));
                    valueAxisData = this._calcValueAxisScale("valueAxis", range, [null, domain[1]]);

                    minValue = (domain2[0] > 0) ? 0 : domain2[0];
                    domain2[1] = Math.round((domain2[1] * range[1] - minValue * textHeight)/(range[1] - textHeight));
                    valueAxisData2 = this._calcValueAxisScale("valueAxis2", range, [null, domain2[1]]);

                } else{
                    valueAxisData = this._calcValueAxisScale("valueAxis", range);
                    valueAxisData2 = this._calcValueAxisScale("valueAxis2", range);
                }
            }else{
                valueAxisData = this._calcValueAxisScale("valueAxis", range);
                valueAxisData2 = this._calcValueAxisScale("valueAxis2", range);    
            }
            
            var autoScale = new ValueScale(valueAxisData.scale.getAutoDomain(),
                valueAxisData.scale.getRange(), [false, false]);
            autoScale.tickNum = valueAxisData.scale.tickNum;
            var autoScale2 = new ValueScale(valueAxisData2.scale.getAutoDomain(),
                valueAxisData2.scale.getRange(), [false, false]);
            autoScale2.tickNum = valueAxisData2.scale.tickNum;
            ValueScaleUtil.syncTicks(valueAxisData.scale, valueAxisData2.scale);
            ValueScaleUtil.syncTicks(autoScale, autoScale2);
            valueAxisData.scale.setAutoDomain(autoScale.getDomain());
            valueAxisData2.scale.setAutoDomain(autoScale2.getDomain());

            var replacedData = {
                valueAxis: valueAxisData,
                valueAxis2: valueAxisData2
            };

            [valueAxisData, valueAxisData2].forEach(function(e, i) {
                var key = "valueAxis" + (i ? "2" : "");
                data[key].scale = e.scale;
                e.tickHint = data[key].tickHint = e.scale._tickHint;
                data[key].scale.setRange([0, 1]);
                var currentAxisData = replacedData[key];
                currentAxisData.metaData = data[key].metaData;
                this["_" + key].setData(currentAxisData);
            }, this);

            newData = this._cloneData(replacedData);
        }

        return newData;
    };

    return DualCSV;
});

define('sap/viz/chart/components/plotareas/XYYTrellisPlotArea',[
    'jquery',
    "sap/viz/framework/common/util/oo",
    "sap/viz/framework/common/util/DOM",
    "sap/viz/framework/common/util/SVG",
    "sap/viz/framework/scale/ValueScaleUtil",
    'sap/viz/chart/components/axis/CategoryAxis',
    'sap/viz/chart/components/axis/ValueAxis',
    'sap/viz/chart/components/container/GridContainer',
    "sap/viz/chart/components/plotareas/XYTrellisPlotArea",
    'sap/viz/chart/components/util/ValueAxisUtils'
], function Setup($, oo, DOM, SVG, ValueScaleUtil, CategoryAxis, ValueAxis, GridContainer, XYTrellisPlotArea,
    ValueAxisUtils) {
    var XYYTrellisPlotArea = function(runtime, renderType) {
        XYYTrellisPlotArea.superclass.constructor.apply(this, arguments);
    };
    oo.extend(XYYTrellisPlotArea, XYTrellisPlotArea);

    XYYTrellisPlotArea.prototype._getPlotOptions = function() {
        var options = XYYTrellisPlotArea.superclass._getPlotOptions.apply(this, arguments) || {};
        options.isDualValueAxis = true;

        return options;
    };

    XYYTrellisPlotArea.prototype._getData = function(row, column) {
        var childData = XYYTrellisPlotArea.superclass._getData.apply(this, arguments);
        if (this._isPercentageChart()) {
            this._updateValueAxis(childData, 'valueAxis2', row, column);
        }

        return childData;
    };

    XYYTrellisPlotArea.prototype._applyDataChanges = function(rowCount, columnCount) {
        XYYTrellisPlotArea.superclass._applyDataChanges.apply(this, arguments);
        if (this._isHorizontal()) {
            this._axisTitle = this._topTitle = this._createTrellisTitle("top", {
                axis: {
                    data : "valueAxis",
                    property: "valueAxis"
                }
            });
            
        } else {
            this._axisTitle = this._rightTitle = this._createTrellisTitle("right", {
                axis: {
                    data : "valueAxis2",
                    property: "valueAxis2"
                }
            });
        }
        this._properties.setDefault("valueAxis.color", this._data.color.scale.getRange()[0]);
        this._properties.setDefault("valueAxis2.color", this._data.color2.scale.getRange()[0]);
        this._properties.setDefault("valueAxis.title.applyAxislineColor", true);
        this._properties.setDefault("valueAxis2.title.applyAxislineColor", true);
    };

    XYYTrellisPlotArea.prototype._layoutTitles = function(remainSize) {
        XYYTrellisPlotArea.superclass._layoutTitles.apply(this, arguments);

        var preSize = this._axisTitle.getPreferredSize(remainSize);
        if (this._isHorizontal()) {
            remainSize.height -= preSize.height;
            this._measuredSize.top = {
                width: remainSize.width,
                height: preSize.height
            };
        } else {
            remainSize.width -= preSize.width;
            this._measuredSize.right = {
                width: preSize.width,
                height: remainSize.height
            };
        }
    };

    XYYTrellisPlotArea.prototype._createBottomTitleOptions = function(rowCount, columnCount) {
        var options =  XYYTrellisPlotArea.superclass._createBottomTitleOptions.apply(this, arguments);
        var axisName = this._isHorizontal() ? "valueAxis2" : "categoryAxis";
        options.axis = {
            data: axisName,
            property: axisName
        };
        return options;
    };

    XYYTrellisPlotArea.prototype._addValueAxis = function(index, position, headerLayer) {
        var valAxis = this._isHorizontal() ? "valueAxis2" : "valueAxis";
        return this._addValueAxisWidthData(index, position, headerLayer, valAxis, this._data[valAxis]);
    };

    XYYTrellisPlotArea.prototype._beforeMeasure = function(rowCount, columnCount) {
        var data = this._data;
        var width = this._size.width / columnCount;
        var height = this._size.height / rowCount;
        if (!data || width <= 0 || height <= 0) {
            return;
        }
        var minBodySize = this._gridContainer.getMinBodySize();
        width = Math.max(width, minBodySize.cellWidth);
        height = Math.max(height, minBodySize.cellHeight);
        var range = [0, 1];
        range[1] = this._isHorizontal() ? width : height;

        var valueAxisData, valueAxisData2;
        var valueAxisScale, valueAxisScale2;
        if (this._isPercentageChart()) {
            valueAxisData = ValueAxisUtils.calcPercentageScale(range);
            ["", "2"].forEach(function(e) {
                var key = "valueAxis" + e;
                data[key].tickHint = valueAxisData.tickHint;
            }, this);
            valueAxisScale = valueAxisScale2 = valueAxisData;
        } else {
            valueAxisData = ValueAxisUtils.calcScale(data.valueAxis.scale, range, {
                isLineChart: this._isLineChart()
            });
            valueAxisData2 = ValueAxisUtils.calcScale(data.valueAxis2.scale, range, {
                isLineChart: this._isLineChart()
            });
            ValueScaleUtil.syncTicks(valueAxisData.scale, valueAxisData2.scale);
            [valueAxisData, valueAxisData2].forEach(function(e, i) {
                var key = "valueAxis" + (i ? "2" : "");
                data[key].scale = e.scale;
                data[key].tickHint = e.tickHint;
                data[key].scale.setRange([0, 1]);
            }, this);

            valueAxisScale = data.valueAxis;
            valueAxisScale2 = data.valueAxis2;
        }

        this._applyValueAxisScale(valueAxisScale, valueAxisScale2);
        
        var axisPadding = this._getValueAxisPadding(this._valueAxis[0], valueAxisScale);
        var axis2Padding = this._getValueAxisPadding(this._valueAxis2[0], valueAxisScale2);
        
        var padding = this._isHorizontal() ? {
            left : Math.max(axisPadding.left, axis2Padding.left),
            right : Math.max(axisPadding.right, axis2Padding.right),
            top : 0,
            bottom : 0
        } : {
            left : 0,
            right: 0,
            top: Math.max(axisPadding.top, axis2Padding.top),
            bottom : Math.max(axisPadding.bottom, axis2Padding.bottom),
        };
        this._gridContainerOptions.cell.padding = padding;
        this._gridContainer.updateOptions(this._gridContainerOptions);
    };

    XYYTrellisPlotArea.prototype._applyValueAxisScale = function(valueAxisScale, valueAxisScale2) {
        XYYTrellisPlotArea.superclass._applyValueAxisScale.apply(this, arguments);

        var data = this._data;
        for (var i = 0; i < this._valueAxis2.length; i++) {
            this._valueAxis2[i].setData(valueAxisScale2);
        }
    };
    
    XYYTrellisPlotArea.prototype._initBottomHeaders = function(rowCount, columnCount) {
        XYYTrellisPlotArea.superclass._initBottomHeaders.apply(this, arguments);
        if(this._isHorizontal()){
            this._valueAxis2 = this._valueAxis;
            this._valueAxis = [];
        }
    };

    XYYTrellisPlotArea.prototype._initHeaders = function(rowCount, columnCount) {
        XYYTrellisPlotArea.superclass._initHeaders.apply(this, arguments);

        var isHorizontal = this._isHorizontal();
        var position, valAxis, count, name, maxProperty;
        if (isHorizontal) {
            position = "top";
            name = "valueAxis";
            count = columnCount;
            maxProperty = "maxHeight";
        } else {
            position = "right";
            name = "valueAxis2";
            count = rowCount;
            maxProperty = "maxWidth";
        }

        valAxis = this._data[name];
        var valueAxisArray = this["_" + name] = [];
        var headerLayer = this._gridContainer.addHeaderLayer(position);
        headerLayer.setMaxSizeProperty(name + ".layout." + maxProperty);
        for (var index = 0; index < count; index++) {
            valueAxisArray[index] = this._addValueAxisWidthData(index, position, headerLayer, name, valAxis);
        }
        this._headerLayers.trellisTopHeaderLayer = headerLayer;
        if(isHorizontal && this._headerLayers.trellisBottomHeaderLayer){
            this._headerLayers.trellisBottomHeaderLayer.setMaxSizeProperty("valueAxis2.layout.maxHeight");
        }
    };

    XYYTrellisPlotArea.prototype._applySizeChanges = function() {
        XYYTrellisPlotArea.superclass._applySizeChanges.apply(this, arguments);

        var axisSize;
        var measuredSize = this._gridContainer.getMeasuredSize();
        if (this._isHorizontal()) {
            axisSize = {
                width: measuredSize.bodyWindow.width,
                height: this._measuredSize.top.height
            };
        } else {
            axisSize = {
                width: this._measuredSize.right.width,
                height: measuredSize.bodyWindow.height
            };
        }
        this._axisTitle.setSize(axisSize);
    };
    
    XYYTrellisPlotArea.prototype._preRenderTitle = function() {
        XYYTrellisPlotArea.superclass._preRenderTitle.apply(this, arguments);

        var valueCount = 0;
        if(this._valueAxis && this._valueAxis[0]){
            valueCount = this._valueAxis[0].getChild("axisBody").module.getAvailableLayersNumber();
        }
        var value2Count = 0;
        if(this._valueAxis2 && this._valueAxis2[0]){
            value2Count = this._valueAxis2[0].getChild("axisBody").module.getAvailableLayersNumber();
        }
        if(this._isHorizontal() ){
            this._topTitle.setAxisHiddenItems(valueCount);
            this._bottomTitle.setAxisHiddenItems(value2Count);
        } else {
            this._leftTitle.setAxisHiddenItems(valueCount);
            this._rightTitle.setAxisHiddenItems(value2Count);
        }
    };

    XYYTrellisPlotArea.prototype._render = function(selectionNode) {
        XYYTrellisPlotArea.superclass._render.apply(this, arguments);

        var measuredSize = this._gridContainer.getMeasuredSize();
        var node = SVG.create("g");
        this._axisTitle.render(d3.select(node));
        var x;
        if (this._isHorizontal()) {
            x = this._measuredSize.left.width + measuredSize.left.width;
        } else {
            x = this._size.width - this._measuredSize.right.width;
        }
        node.setAttribute('transform', 'translate(' + x + ',0)');

        selectionNode.appendChild(node);
    };

    return XYYTrellisPlotArea;
});

define('sap/viz/chart/views/XYYChartView',[
        'jquery',
        'sap/viz/framework/common/util/oo',
        'sap/viz/chart/views/XYChartView',
        'sap/viz/chart/components/plotareas/XYYPlotArea',
        'sap/viz/chart/components/plotareas/XYYTrellisPlotArea'
    ],
    function Setup($, oo, XYChartView, PlotArea, TrellisPlotArea) {

        var XYYChartView = function(runtime, option) {
            XYYChartView.superclass.constructor.apply(this, arguments);
        };

        oo.extend(XYYChartView, XYChartView);

        XYYChartView.prototype._getDataItems = function() {
            return ["valueAxis", "valueAxis2", "categoryAxis", "color", "color2", "dataFrame", "series", "trellisRow",
                "trellisColumn"
            ];
        };

        XYYChartView.prototype._createPlotContainer = function(isTrellis) {
            if (isTrellis) {
                this._plotArea = new TrellisPlotArea(this.runtime(), {
                    renderType: this._renderType
                });
            } else {
                this._plotArea = new PlotArea(this.runtime(), {
                    renderType: this._renderType
                });
                this._plotArea.setRoughSize(this._size);
            }
            this.setChild("main", this._plotArea, {
                priority: 3
            });
        };

        return XYYChartView;
    });
define('sap/viz/chart/components/legend/BulletLegend',[
    'sap/viz/framework/common/util/oo',
    'sap/viz/framework/scale/ColorScale',
    'sap/viz/chart/components/legend/ColorLegend',
    'sap/viz/framework/common/util/TypeUtils',
    'sap/viz/chart/components/util/FillPatternUtils',
    'sap/viz/chart/components/legend/ColorShapeScaleMerger',
    'sap/viz/framework/common/util/Constants',
    'sap/viz/framework/common/util/NameColorUtils'
], function(oo, ColorScale, ColorLegend, TypeUtils, FillPatternUtils, 
        ColorShapeScaleMerger, Constants, NameColorUtils) {
    var INTERACTION_CLASS = Constants.CSS.CLASS.LEGENDITEM;

    var BulletLegend = function() {
        BulletLegend.superclass.constructor.apply(this, arguments);
    };

    oo.extend(BulletLegend, ColorLegend);

    BulletLegend.prototype.setData = function(val) {
        this._data = val;
        this._colorShapeScale = null;
        return this;
    };

    BulletLegend.prototype._createColorScale = function() {
        var propRoot = this._properties.parentLevel,
            semColorScale = semanticColorScale(this.runtime().semanticManager()),
            valueAxis = dataColorScale(this._data.valueAxis, propRoot.get("plotArea.colorPalette")),
            forecast = dataColorScale(this._data.forecastValues, propRoot.get("plotArea.forecastColor")),
            target = dataColorScale(this._data.targetValues, propRoot.get("plotArea.target.valueColor")),
            gaps = gapColorScale(propRoot, target),
            config;
        if (semColorScale.domain.length > 0) {
            valueAxis.domain.shift();
            valueAxis.range.shift();
        }
        config = [semColorScale, valueAxis, forecast, gaps, target].reduce(function(cfg, elm) {
            cfg.domain = cfg.domain.concat(elm.domain);
            cfg.range = cfg.range.concat(elm.range);
            return cfg;
        }, {
            domain: [],
            range: []
        });
        var scale = new ColorScale(config.domain, config.range);
        return {
            metaData: [{
                id: "measureNames",
                type: "Dimension"
            }],
            scale: scale,
            rowArray: config.domain
        };
    };

    BulletLegend.prototype.render = function(selection, loadMore) {
        BulletLegend.superclass.render.apply(this, arguments);
        selection.selectAll("g." + INTERACTION_CLASS).classed(INTERACTION_CLASS, false);
    };

    BulletLegend.prototype._initColorShapeScale = function() {
        if (this._colorShapeScale) {
            return;
        }

        var markMgr = this.runtime().markManager(),
            colorScale = this._createColorScale(),
            targetName = null,
            merger = new ColorShapeScaleMerger(markMgr);

        merger.addColorScale(colorScale);
        merger.merge();
        if (this._data.targetValues.metaData && this._data.targetValues.metaData.length > 0) {
            targetName = this._data.targetValues.metaData[0].id;
        }

        for (var item, i = 0, len = merger.getLength(); i < len; i++) {
            item = merger.getItem(i);
            if (i === len - 1 && item.data[0] === targetName) {
                item.shape = "vbar";
            } else {
                item.shape = "square";
            }
        }
        this._colorShapeScale = merger;
        this.setBindingFields(merger.getBindingFields());
    };

    function semanticColorScale(semanticMgr) {
        if (semanticMgr.hasDataPointColorStyle()) {
            var dataPointColorScale = semanticMgr.getDataPointColorScale();
            return {
                domain: dataPointColorScale.getDomain(),
                range: dataPointColorScale.getRange()
            };
        } else {
            return {
                domain: [],
                range: []
            };
        }
    }

    function dataColorScale(model, colors) {
        var domain = [],
            range = TypeUtils.isArray(colors) ? colors : [colors];
        if (model && model.metaData) {
            domain = model.metaData.map(function(elm) {
                return [elm.id || elm.name];
            });
        }

        if (domain.length > range.length) {
            range = range.concat(new Array(domain.length - range.length));
        }

        return {
            domain: domain,
            range: range.slice(0, domain.length)
        };
    }

    function gapColorScale(props, target) {
        var visible = props.get("plotArea.gap.visible"),
            type = props.get("plotArea.gap.type"),
            positiveText = props.get("legend.label.text.positiveGap"),
            positiveColor = props.get("plotArea.gap.positiveColor"),
            negativeText = props.get("legend.label.text.negativeGap"),
            negativeColor = FillPatternUtils.patternize(
                    NameColorUtils.convertColor(props.get("plotArea.gap.negativeColor"))),

            domain = [],
            range = [];
        if (visible && target.domain.length > 0) {
            if (type === "both") {
                domain.push([positiveText]);
                domain.push([negativeText]);
                range.push(positiveColor);
                range.push(negativeColor);
            } else if (type === "positive") {
                domain.push([positiveText]);
                range.push(positiveColor);
            } else if (type === "negative") {
                domain.push([negativeText]);
                range.push(negativeColor);
            }
        }
        return {
            domain: domain,
            range: range
        };
    }

    BulletLegend.prototype.destroy = function() {
        BulletLegend.superclass.destroy.call(this);
        this._data = null;
        this._colorShapeScale = null;
    };
    
    return BulletLegend;
});

define('sap/viz/chart/components/plotareas/BulletTrellisPlotArea',[
    'jquery',
    "sap/viz/framework/common/util/oo",
    "sap/viz/framework/common/util/DOM",
    "sap/viz/framework/common/util/SVG",
    "sap/viz/framework/scale/ValueScaleUtil",
    'sap/viz/chart/components/axis/CategoryAxis',
    'sap/viz/chart/components/axis/ValueAxis',
    'sap/viz/chart/components/container/GridContainer',
    "sap/viz/chart/components/plotareas/XYTrellisPlotArea",
    'sap/viz/chart/components/util/ValueAxisUtils'
], function Setup($, oo, DOM, SVG, ValueScaleUtil, CategoryAxis, ValueAxis, GridContainer, XYTrellisPlotArea,
    ValueAxisUtils) {
    var BulletTrellisPlotArea = function(runtime, renderType) {
        BulletTrellisPlotArea.superclass.constructor.apply(this, arguments);
    };
    oo.extend(BulletTrellisPlotArea, XYTrellisPlotArea);





    BulletTrellisPlotArea.prototype._layoutTitles = function(remainSize) {
        BulletTrellisPlotArea.superclass._layoutTitles.apply(this, arguments);

      
        if (this._isHorizontal()) {
            var preSize = this._axisTitle.getPreferredSize(remainSize);
            remainSize.height -= preSize.height;
            this._measuredSize.top = {
                width: remainSize.width,
                height: preSize.height
            };
        }
    };



    BulletTrellisPlotArea.prototype._initHeaders = function(rowCount, columnCount) {
        BulletTrellisPlotArea.superclass._initHeaders.apply(this, arguments);

        var isHorizontal = this._isHorizontal();
        var position, valAxis, count, name, maxProperty;
        if (isHorizontal) {
            position = "top";
            name = "valueAxis";
            count = columnCount;
            maxProperty = "maxHeight";
       

            valAxis = this._data[name];
            var valueAxisArray = this["_" + name] = [];
            var headerLayer = this._gridContainer.addHeaderLayer(position);
            headerLayer.setMaxSizeProperty(name + ".layout." + maxProperty);
            for (var index = 0; index < count; index++) {
                valueAxisArray[index] = this._addValueAxisWidthData(index, position, headerLayer, name, valAxis);
            }
        
        } 

    };
    
    BulletTrellisPlotArea.prototype._applyDataChanges = function(rowCount, columnCount) {
        BulletTrellisPlotArea.superclass._applyDataChanges.apply(this, arguments);
        if (this._isHorizontal()) {
            this._axisTitle = this._topTitle = this._createTrellisTitle("top", {
                axis: {
                    data : "valueAxis",
                    property: "valueAxis"
                }
            });
            
        } 
     
    };


    BulletTrellisPlotArea.prototype._applySizeChanges = function() {
        BulletTrellisPlotArea.superclass._applySizeChanges.apply(this, arguments);


        if (this._isHorizontal()) {
            var axisSize;
            var measuredSize = this._gridContainer.getMeasuredSize();
            axisSize = {
                width: measuredSize.bodyWindow.width,
                height: this._measuredSize.top.height
            };
            this._axisTitle.setSize(axisSize);
        } 
       
    };
    
  

    BulletTrellisPlotArea.prototype._createBottomTitleOptions = function(rowCount, columnCount) {
        var options =  BulletTrellisPlotArea.superclass.constructor.
           superclass._createBottomTitleOptions.apply(this, arguments);
        if(!this._isHorizontal()){
            options.axis  = {
                data: "categoryAxis",
                property: "categoryAxis"
            };
        }
        return options;
        
    };
    BulletTrellisPlotArea.prototype._initBottomHeaders = function(rowCount, columnCount) {
        var isHorizontal = this._isHorizontal();
        if(!isHorizontal){

            BulletTrellisPlotArea.superclass._initBottomHeaders.apply(this, arguments);

        }else{
            BulletTrellisPlotArea.superclass.constructor.superclass._initBottomHeaders.apply(this, arguments);
        }
    };
    

    BulletTrellisPlotArea.prototype._beforeMeasure = function(rowCount, columnCount) {
        // don't call XYTrellisPlotArea._beforeMeasure.
        XYTrellisPlotArea.superclass._beforeMeasure.apply(this, arguments);

        var data = this._data;
        var width = this._size.width / columnCount;
        var height = this._size.height / rowCount;
        if (!data || width <= 0 || height <= 0) {
            return;
        }
        var minBodySize = this._gridContainer.getMinBodySize();
        width = Math.max(width, minBodySize.cellWidth);
        height = Math.max(height, minBodySize.cellHeight);
        var range = [0, 1];
        if (this._isHorizontal()) {
            range[1] = width;
        } else {
            range[1] = height;
        }
        var valueAxisData, valueAxisScale;

        var scale = data.valueAxis.scale;
        var options = [data.valueAxis.minValue, data.valueAxis.maxValue];
        if(options[0] === 0 && options[1] === 0){
            options = null;
        }
        valueAxisData = ValueAxisUtils.calcScale(scale, range, {
            domain: options
        });
        data.valueAxis.scale = valueAxisData.scale;
        data.valueAxis.tickHint = valueAxisData.tickHint;
        data.valueAxis.scale.setRange([0, 1]);
        valueAxisScale = data.valueAxis;


        this._applyValueAxisScale(valueAxisScale);

        var padding = this._getValueAxisPadding(this._valueAxis[0], valueAxisScale);
        this._gridContainerOptions.cell.padding = padding;
        this._gridContainer.updateOptions(this._gridContainerOptions);
    };


    BulletTrellisPlotArea.prototype._render = function(selectionNode) {
        BulletTrellisPlotArea.superclass._render.apply(this, arguments);

        var measuredSize = this._gridContainer.getMeasuredSize();
        if(this._isHorizontal()){
            var node = SVG.create("g");
            this._axisTitle.render(d3.select(node));
            var x;
            if (this._isHorizontal()) {
                x = this._measuredSize.left.width + measuredSize.left.width;
            } else {
                x = this._size.width - this._measuredSize.right.width;
            }
            node.setAttribute('transform', 'translate(' + x + ',0)');
            
    
            selectionNode.appendChild(node);
        }
    };

    return BulletTrellisPlotArea;
});

define('sap/viz/chart/views/BulletChartView',[ 'sap/viz/framework/common/util/oo', 'sap/viz/chart/views/ChartView',
         'sap/viz/chart/components/legend/BulletLegend',
        'sap/viz/chart/components/plotareas/XYPlotArea',
        'sap/viz/chart/components/plotareas/BulletTrellisPlotArea'],
        function Setup(oo, ChartView, BulletLegend, PlotArea, TrellisPlotArea) {

    var BulletChartView = function(runtime, option) {
        BulletChartView.superclass.constructor.apply(this, arguments);
    };

    oo.extend(BulletChartView, ChartView);

    BulletChartView.prototype.setSize = function() {
        if (this._plotArea && this._plotArea.setRoughSize) {
            this._plotArea.setRoughSize.apply(this._plotArea, arguments);
        }
        BulletChartView.superclass.setSize.apply(this, arguments);
    };

    BulletChartView.prototype._getDataItems = function() {
        return [ "valueAxis", "categoryAxis", "targetValues", "forecastValues", 
          "series","trellisRow", "trellisColumn" ];
    };

    BulletChartView.prototype._createPlotContainer = function(isTrellis) {
        if (isTrellis) {
            this._plotArea = new TrellisPlotArea(this.runtime(), {
                renderType: this._renderType
            });
        } else {
            this._plotArea = new PlotArea(this.runtime(), {
                renderType: this._renderType
            });
            this._plotArea.setRoughSize(this._size);
        }
        this.setChild("main", this._plotArea, {
            priority : 3
        });
    };
            
    BulletChartView.prototype._getLegendDefinition = function() {
        return [BulletLegend];
    };

    return BulletChartView;
});

define('sap/viz/chart/components/plotareas/PieTrellisPlotArea',[
    'jquery',
    "sap/viz/framework/common/util/oo",
    "sap/viz/framework/common/util/DOM",
    "sap/viz/framework/common/util/DataGraphics",
    'sap/viz/chart/components/axis/CategoryAxis',
    'sap/viz/chart/components/axis/ValueAxis',
    'sap/viz/chart/components/container/GridContainer',
    'sap/viz/chart/components/plots/PlotFactory',
    "sap/viz/chart/components/plotareas/TrellisPlotArea",
    'sap/viz/chart/components/util/ValueAxisUtils'
], function Setup($, oo, DOM, DataGraphics, CategoryAxis, ValueAxis, GridContainer, PlotFactory, TrellisPlotArea,
    ValueAxisUtils) {
    var PieTrellisPlotArea = function(runtime, options) {
        PieTrellisPlotArea.superclass.constructor.apply(this, arguments);
    };
    oo.extend(PieTrellisPlotArea, TrellisPlotArea);

    PieTrellisPlotArea.prototype._getData = function(row, column) {
        var childData = PieTrellisPlotArea.superclass._getData.apply(this, arguments);
        var sizeValues = [];
        for (var i = 0; i < childData.series.length; i++) {
            if (childData.series[i] != null && childData.series[i][0] != null) {
                sizeValues.push(childData.series[i][0].size);
            }
        }
        childData.size = {
            values: sizeValues,
            metaData: childData.size.metaData
        };

        return childData;
    };

    return PieTrellisPlotArea;
});
define('sap/viz/chart/views/PieChartView',['sap/viz/framework/common/util/oo',
        'sap/viz/chart/views/ChartView',
        'sap/viz/chart/components/plots/PlotFactory',
        'sap/viz/framework/common/util/PropertyZoneUtil',
        'sap/viz/framework/common/util/FeedingZoneUtil',
        'sap/viz/chart/components/plotareas/PieTrellisPlotArea'
    ],
    function Setup(oo, ChartView, PlotFactory, PropertyZoneUtil, FeedingZoneUtil, PieTrellisPlotArea) {

        var PieChartView = function(runtime, option) {
            PieChartView.superclass.constructor.apply(this, arguments);
        };

        oo.extend(PieChartView, ChartView);

        PieChartView.prototype._getDataItems = function() {
            return ["size", "categoryAxis", "color", "dataFrame", "series", "trellisRow", "trellisColumn"];
        };

        PieChartView.prototype._createPlotContainer = function(isTrellis) {
            var runtime = this.runtime();
            if (isTrellis) {
                this._plotArea = new PieTrellisPlotArea(runtime, {
                    renderType: this._renderType
                });
            } else {
                this._plotArea = PlotFactory.create(this._renderType, runtime, null);
                runtime.zoneManager().add(PropertyZoneUtil.plot(this._plotArea));
                runtime.zoneManager().add(FeedingZoneUtil.plot(this._plotArea));
            }

            this.setChild("plot", this._plotArea, {
                priority: 3
            });
        };
        
        PieChartView.prototype.render = function(rootElement){
            //Update the color scale if there is contextInfos
            var contextInfos = this._properties.get('plotArea.highlight.contextInfos');
            if(contextInfos && contextInfos.length > 0) {
                for(var i = 0; i < contextInfos.length; i++) {
                    for(var j = 0; j < this._data.color.scale._domain.length; j++) {
                        if(equalCtx(contextInfos[i].ctx, this._data.color.scale._domain[j], 
                                this._rawData.dataModel._color.metaData)) {
                            this._data.color.scale._range[j] = contextInfos[i].paras.color;
                        }
                    }
                }
            }
            //Update the color scale if there is highlightContext
            if(this._options.chartType.indexOf('donut') >= 0) {
                var highlightContext = this._properties.get('plotArea.highlight.highlightContext');
                if(highlightContext && highlightContext.length > 0) {
                    highlightContext = highlightContext[0];
                    var color = this._properties.get('plotArea.highlight.unhighlightSliceColor');
                    for(var k = 0; k < this._data.color.scale._domain.length; k++) {
                        if(!equalCtx(highlightContext, this._data.color.scale._domain[k], 
                                this._rawData.dataModel._color.metaData)) {
                            this._data.color.scale._range[k] = color;
                        }
                    }
                }
            }
            PieChartView.superclass.render.apply(this, arguments);
        };
        
        function equalCtx(ctx, colorCtx, metaData) {
            var ret = true;
            for(var key in ctx) {
                if(ctx.hasOwnProperty(key)) {
                    for(var i = 0 ; i < metaData.length; i++) {
                        if(key === metaData[i].id) {
                            if(ctx[key] !== colorCtx[i]) {
                                ret = false;
                            }
                            break;
                        }
                    }
                    if(i >= metaData.length) {
                        ret = false;
                        break;
                    }
                }
            }
            return ret;
        }

        return PieChartView;
    });

define('sap/viz/chart/metadata/bindings/XYBindings',[], function Setup() {

    var feeds = [{
        "id": "dataFrame",
        "name": "IDS_DATA_FRAME",
        "type": "Dimension",
        "min": 0,
        "max": 1,
        "acceptMND": false,
        "role": "frame",
        "scaleType": "frameScale"
    }, {
        "id": "trellisColumn",
        "name": "IDS_TRELLIS_COLUMN",
        "type": "Dimension",
        "min": 0,
        "max": Number.POSITIVE_INFINITY,
        "acceptMND": true,
        "role": "trellisColumn",
        "scaleType": "categoryScale"
    }, {
        "id": "trellisRow",
        "name": "IDS_TRELLIS_ROW",
        "type": "Dimension",
        "min": 0,
        "max": Number.POSITIVE_INFINITY,
        "acceptMND": true,
        "role": "trellisRow",
        "scaleType": "categoryScale"
    }, {
        "id": "categoryAxis",
        "name": "IDS_CATEGORY_AXIS",
        "type": "Dimension",
        "min": 1,
        "max": Number.POSITIVE_INFINITY,
        "acceptMND": true,
        "role": "layout",
        "scaleType": "categoryScale"
    }, {
        "id": "color",
        "name": "IDS_COLOR",
        "type": "Dimension",
        "min": 0,
        "max": Number.POSITIVE_INFINITY,
        "acceptMND": true,
        "role": "mark",
        "scaleType": "colorScale"
    }, {
        "id": "valueAxis",
        "name": "IDS_VALUE_AXIS",
        "type": "Measure",
        "min": 1,
        "max": Number.POSITIVE_INFINITY,
        "role": "layout",
        "scaleType": "valueScale"
    }];

    return feeds;
});
define('sap/viz/chart/metadata/bindings/CombinationBindings',[], function Setup() {

    var feeds = [{
        "id": "dataFrame",
        "name": "IDS_DATA_FRAME",
        "type": "Dimension",
        "min": 0,
        "max": 1,
        "acceptMND": false,
        "role": "frame",
        "scaleType": "frameScale"
    }, {
        "id": "trellisColumn",
        "name": "IDS_TRELLIS_COLUMN",
        "type": "Dimension",
        "min": 0,
        "max": Number.POSITIVE_INFINITY,
        "acceptMND": false,
        "role": "trellisColumn",
        "scaleType": "categoryScale"
    }, {
        "id": "trellisRow",
        "name": "IDS_TRELLIS_ROW",
        "type": "Dimension",
        "min": 0,
        "max": Number.POSITIVE_INFINITY,
        "acceptMND": false,
        "role": "trellisRow",
        "scaleType": "categoryScale"
    }, {
        "id": "categoryAxis",
        "name": "IDS_CATEGORY_AXIS",
        "type": "Dimension",
        "min": 1,
        "max": Number.POSITIVE_INFINITY,
        "acceptMND": false,
        "role": "layout",
        "scaleType": "categoryScale"
    }, {
        "id": "color",
        "name": "IDS_COLOR",
        "type": "Dimension",
        "min": 0,
        "max": Number.POSITIVE_INFINITY,
        "acceptMND": true,
        "role": "mark",
        "scaleType": "colorScale"
    }, {
        "id": "valueAxis",
        "name": "IDS_VALUE_AXIS",
        "type": "Measure",
        "min": 2,
        "max": Number.POSITIVE_INFINITY,
        "role": "layout",
        "scaleType": "valueScale"
    }];

    return feeds;
});
define('sap/viz/chart/metadata/bindings/XYYCombinationBindings',[], function Setup() {

    var feeds = [{
        "id": "dataFrame",
        "name": "IDS_DATA_FRAME",
        "type": "Dimension",
        "min": 0,
        "max": 1,
        "acceptMND": false,
        "role": "frame",
        "scaleType": "frameScale"
    }, {
        "id": "trellisColumn",
        "name": "IDS_TRELLIS_COLUMN",
        "type": "Dimension",
        "min": 0,
        "max": Number.POSITIVE_INFINITY,
        "acceptMND": false,
        "role": "trellisColumn",
        "scaleType": "categoryScale"
    }, {
        "id": "trellisRow",
        "name": "IDS_TRELLIS_ROW",
        "type": "Dimension",
        "min": 0,
        "max": Number.POSITIVE_INFINITY,
        "acceptMND": false,
        "role": "trellisRow",
        "scaleType": "categoryScale"
    }, {
        "id": "categoryAxis",
        "name": "IDS_CATEGORY_AXIS",
        "type": "Dimension",
        "min": 1,
        "max": Number.POSITIVE_INFINITY,
        "acceptMND": false,
        "role": "layout",
        "scaleType": "categoryScale"
    }, {
        "id": "color",
        "name": "IDS_COLOR",
        "type": "Dimension",
        "min": 0,
        "max": Number.POSITIVE_INFINITY,
        "acceptMND": true,
        "role": "mark",
        "scaleType": "colorScale"
    }, {
        "id": "valueAxis",
        "name": "IDS_VALUE_AXIS",
        "type": "Measure",
        "min": 2,
        "max": Number.POSITIVE_INFINITY,
        "role": "layout",
        "scaleType": "valueScale"
    }, {
        "id": "valueAxis2",
        "name": "IDS_VALUE_AXIS2",
        "type": "Measure",
        "min": 2,
        "max": Number.POSITIVE_INFINITY,
        "role": "layout",
        "scaleType": "valueScale"
    }];

    return feeds;
});
define('sap/viz/chart/metadata/bindings/YYBindings',[], function Setup() {
    var feeds = [{
        "id": "dataFrame",
        "name": "IDS_DATA_FRAME",
        "type": "Dimension",
        "min": 0,
        "max": 1,
        "acceptMND": false,
        "role": "frame",
        "scaleType": "frameScale"
    }, {
        "id": "trellisColumn",
        "name": "IDS_TRELLIS_COLUMN",
        "type": "Dimension",
        "min": 0,
        "max": Number.POSITIVE_INFINITY,
        "acceptMND": true,
        "role": "trellisColumn",
        "scaleType": "categoryScale"
    }, {
        "id": "trellisRow",
        "name": "IDS_TRELLIS_ROW",
        "type": "Dimension",
        "min": 0,
        "max": Number.POSITIVE_INFINITY,
        "acceptMND": true,
        "role": "trellisRow",
        "scaleType": "categoryScale"
    }, {
        "id": "color",
        "name": "IDS_COLOR",
        "type": "Dimension",
        "min": 0,
        "max": Number.POSITIVE_INFINITY,
        "acceptMND": false,
        "role": "mark",
        "scaleType": "colorScale"
    }, {
        "id": "shape",
        "name": "IDS_SHAPE",
        "type": "Dimension",
        "min": 0,
        "max": Number.POSITIVE_INFINITY,
        "acceptMND": false,
        "role": "mark",
        "scaleType": "shapeScale"
    }, {
        "id": "valueAxis",
        "name": "IDS_VALUE_AXIS",
        "type": "Measure",
        "min": 1,
        "max": 1,
        "role": "layout",
        "scaleType": "valueScale"
    }, {
        "id": "valueAxis2",
        "name": "IDS_VALUE_AXIS2",
        "type": "Measure",
        "min": 1,
        "max": 1,
        "role": "layout",
        "scaleType": "valueScale"
    }, {
        "id": "bubbleWidth",
        "name": "IDS_BUBBLESIZE",
        "type": "Measure",
        "min": 1,
        "max": 1,
        "role": "mark",
        "scaleType": "valueScale"
    }];
    return feeds;
});

define('sap/viz/chart/metadata/bindings/XYYBindings',[], function Setup() {
    var feeds = [{
        "id": "dataFrame",
        "name": "IDS_DATA_FRAME",
        "type": "Dimension",
        "min": 0,
        "max": 1,
        "acceptMND": false,
        "role": "frame",
        "scaleType": "frameScale"
    }, {
        "id": "trellisColumn",
        "name": "IDS_TRELLIS_COLUMN",
        "type": "Dimension",
        "min": 0,
        "max": Number.POSITIVE_INFINITY,
        "acceptMND": false,
        "role": "trellisColumn",
        "scaleType": "categoryScale"
    }, {
        "id": "trellisRow",
        "name": "IDS_TRELLIS_ROW",
        "type": "Dimension",
        "min": 0,
        "max": Number.POSITIVE_INFINITY,
        "acceptMND": false,
        "role": "trellisRow",
        "scaleType": "categoryScale"
    }, {
        "id": "categoryAxis",
        "name": "IDS_CATEGORY_AXIS",
        "type": "Dimension",
        "min": 1,
        "max": Number.POSITIVE_INFINITY,
        "acceptMND": false,
        "role": "layout",
        "scaleType": "categoryScale"
    }, {
        "id": "color",
        "name": "IDS_COLOR",
        "type": "Dimension",
        "min": 1,
        "max": Number.POSITIVE_INFINITY,
        "acceptMND": true,
        "role": "mark",
        "scaleType": "colorScale"
    }, {
        "id": "valueAxis",
        "name": "IDS_VALUE_AXIS",
        "type": "Measure",
        "min": 1,
        "max": Number.POSITIVE_INFINITY,
        "role": "layout",
        "scaleType": "valueScale"
    }, {
        "id": "valueAxis2",
        "name": "IDS_VALUE_AXIS2",
        "type": "Measure",
        "min": 1,
        "max": Number.POSITIVE_INFINITY,
        "role": "layout",
        "scaleType": "valueScale"
    }];

    return feeds;
});
define('sap/viz/chart/metadata/bindings/PieBindings',[], function Setup() {
    var PieBindings = [{
        "id": "dataFrame",
        "name": "IDS_DATA_FRAME",
        "type": "Dimension",
        "min": 0,
        "max": 1,
        "acceptMND": false,
        "role": "frame",
        "scaleType": "frameScale"
    }, {
        "id": "size",
        "name": "IDS_SIZE",
        "type": "Measure",
        "min": 1,
        "max": 1,
        "role": "layout",
        "scaleType": "valueScale"
    }, {
        "id": "color",
        "name": "IDS_COLOR",
        "type": "Dimension",
        "min": 1,
        "max": Number.POSITIVE_INFINITY,
        "role": "mark",
        "acceptMND": false,
        "scaleType": "colorScale"
    }];


    return PieBindings;
});

define('sap/viz/chart/metadata/bindings/TrellisPieBindings',[], function Setup() {
    var PieBindings = [{
        "id": "trellisColumn",
        "name": "IDS_TRELLIS_COLUMN",
        "type": "Dimension",
        "min": 0,
        "max": Number.POSITIVE_INFINITY,
        "acceptMND": true,
        "role": "trellisColumn",
        "scaleType": "categoryScale"
    }, {
        "id": "trellisRow",
        "name": "IDS_TRELLIS_ROW",
        "type": "Dimension",
        "min": 0,
        "max": Number.POSITIVE_INFINITY,
        "acceptMND": true,
        "role": "trellisRow",
        "scaleType": "categoryScale"
    }, {
        "id": "size",
        "name": "IDS_SIZE",
        "type": "Measure",
        "min": 1,
        "max": Number.POSITIVE_INFINITY,
        "role": "layout",
        "scaleType": "valueScale"
    }, {
        "id": "color",
        "name": "IDS_COLOR",
        "type": "Dimension",
        "min": 1,
        "max": Number.POSITIVE_INFINITY,
        "role": "mark",
        "acceptMND": false,
        "scaleType": "colorScale"
    }];


    return PieBindings;
});

define( 'sap/viz/chart/metadata/bindings/TreeBindings',[], function Setup() {
    var feeds = [ {
        "id" : "title",
        "name" : "IDS_TITLE",
        "type" : "Dimension",
        "min" : 1,
        "max" : Number.POSITIVE_INFINITY,
        "role" : "layout",
        "acceptMND" : false
    }, {
        "id" : "color",
        "name" : "IDS_COLOR",
        "type" : "Measure",
        "min" : 0,
        "max" : 1,
        "role" : "mark",
        "scaleType" : "quantizeScale"
    }, {
        "id" : "weight",
        "name" : "IDS_WEIGHT",
        "type" : "Measure",
        "min" : 1,
        "max" : 1,
        "role" : "layout",
        "scaleType" : "valueScale"
    } ];

    return feeds;
});

define('sap/viz/chart/metadata/bindings/BulletBindings',[], function Setup() {

    var feeds = [ {
        "id": "trellisColumn",
        "name": "IDS_TRELLIS_COLUMN",
        "type": "Dimension",
        "min": 0,
        "max": Number.POSITIVE_INFINITY,
        "acceptMND": false,
        "role": "trellisColumn",
        "scaleType": "categoryScale"
    }, {
        "id": "trellisRow",
        "name": "IDS_TRELLIS_ROW",
        "type": "Dimension",
        "min": 0,
        "max": Number.POSITIVE_INFINITY,
        "acceptMND": false,
        "role": "trellisRow",
        "scaleType": "categoryScale"
    }, {
        "id" : "categoryAxis",
        "name" : "IDS_CATEGORY_AXIS",
        "type" : "Dimension",
        "min" : 1,
        "max" : 1,
        "acceptMND" : false,
        "role" : "layout",
        "scaleType" : "categoryScale"
    }, {
        "id" : "valueAxis",
        "name" : "IDS_VALUE_AXIS",
        "type" : "Measure",
        "min" : 1,
        "max" : 2,
        "role" : "layout",
        "scaleType" : "valueScale"
    }, {
        "id" : "targetValues",
        "name" : "IDS_TARGETVALUES",
        "type" : "Measure",
        "min" : 0,
        "max" : 1,
        "role" : "layout",
        "scaleType" : "valueScale"
    }, {
        "id" : "forecastValues",
        "name" : "ID_FORECAST_VALUES",
        "type" : "Measure",
        "min" : 0,
        "max" : 1,
        "role" : "layout",
        "scaleType" : "valueScale"
    } ];

    return feeds;
});
define('sap/viz/chart/metadata/bindingDef',[
    "sap/viz/chart/metadata/bindings/XYBindings",
    "sap/viz/chart/metadata/bindings/CombinationBindings",
    "sap/viz/chart/metadata/bindings/XYYCombinationBindings",
    "sap/viz/chart/metadata/bindings/YYBindings",
    "sap/viz/chart/metadata/bindings/XYYBindings",
    "sap/viz/chart/metadata/bindings/PieBindings",
    "sap/viz/chart/metadata/bindings/TrellisPieBindings",
    "sap/viz/chart/metadata/bindings/TreeBindings",
    "sap/viz/chart/metadata/bindings/BulletBindings",
    "sap/viz/framework/common/util/ObjectUtils"
], function(XYBindings, CombinationBindings, XYYCombinationBindings, YYBindings, 
        XYYBindings, PieBindings, TrellisPieBindings,
        TreeBindings, BulletBindings, ObjectUtils) {

    var xYBindings = ObjectUtils.clone(XYBindings);
    var combinationBindings = ObjectUtils.clone(CombinationBindings);
    var xYYCombinationBindings = ObjectUtils.clone(XYYCombinationBindings);
    var yYBindings = ObjectUtils.clone(YYBindings);
    var xYYBindings = ObjectUtils.clone(XYYBindings);
    var pieBindings = ObjectUtils.clone(PieBindings);
    var treeBindings = ObjectUtils.clone(TreeBindings);
    var bulletBindings = ObjectUtils.clone(BulletBindings);
    var trellisPieBindings = ObjectUtils.clone(TrellisPieBindings);

    var deleteName = function(data) {
        for (var i = 0; i < data.length; i++) {
            delete data[i].name;
        }
        return data;
    };

    xYBindings = deleteName(xYBindings);
    combinationBindings = deleteName(combinationBindings);
    xYYCombinationBindings = deleteName(xYYCombinationBindings);
    yYBindings = deleteName(yYBindings);
    xYYBindings = deleteName(xYYBindings);
    pieBindings = deleteName(pieBindings);
    treeBindings = deleteName(treeBindings);
    bulletBindings = deleteName(bulletBindings);
    trellisPieBindings = deleteName(trellisPieBindings);

    return {
        "info/bar": {
            "renderType": "bar",
            "family": "xy",
            "name": "IDS_BARCHART",
            "vender": "sap.viz",
            "bindings": xYBindings
        },
        "info/trellis_bar": {
            "renderType": "bar",
            "family": "xy",
            "name": "IDS_TRELLISBARCHART",
            "vender": "sap.viz",
            "bindings": xYBindings
        },
        "info/stacked_bar": {
            "renderType": "stacked_bar",
            "family": "xy",
            "name": "IDS_STACKEDBARCHART",
            "vender": "sap.viz",
            "bindings": xYBindings
        },
        "info/trellis_stacked_bar": {
            "renderType": "stacked_bar",
            "family": "xy",
            "name": "IDS_TRELLISSTACKEDBARCHART",
            "vender": "sap.viz",
            "bindings": xYBindings
        },
        "info/100_stacked_bar": {
            "renderType": "100_stacked_bar",
            "family": "xy",
            "name": "IDS_PERCENTAGESTACKEDBARCHART",
            "vender": "sap.viz",
            "bindings": xYBindings
        },
        "info/trellis_100_stacked_bar": {
            "renderType": "100_stacked_bar",
            "family": "xy",
            "name": "IDS_TRELLISPERCENTAGESTACKEDBARCHART",
            "vender": "sap.viz",
            "bindings": xYBindings
        },
        "info/column": {
            "renderType": "column",
            "family": "xy",
            "name": "IDS_VERTICALBARCHART",
            "vender": "sap.viz",
            "bindings": xYBindings
        },
        "info/trellis_column": {
            "renderType": "column",
            "family": "xy",
            "name": "IDS_TRELLISCOLUMNCHART",
            "vender": "sap.viz",
            "bindings": xYBindings
        },
        "info/stacked_column": {
            "renderType": "stacked_column",
            "family": "xy",
            "name": "IDS_STACKEDVERTICALBARCHART",
            "vender": "sap.viz",
            "bindings": xYBindings
        },
        "info/trellis_stacked_column": {
            "renderType": "stacked_column",
            "family": "xy",
            "name": "IDS_TRELLISSTACKEDCOLUMNCHART",
            "vender": "sap.viz",
            "bindings": xYBindings
        },
        "info/100_stacked_column": {
            "renderType": "100_stacked_column",
            "family": "xy",
            "name": "IDS_PERCENTAGESTACKEDVERTICALBARCHART",
            "vender": "sap.viz",
            "bindings": xYBindings
        },
        "info/trellis_100_stacked_column": {
            "renderType": "100_stacked_column",
            "family": "xy",
            "name": "IDS_TRELLISPERCENTAGESTACKEDCOLUMNCHART",
            "vender": "sap.viz",
            "bindings": xYBindings
        },
        "info/line": {
            "renderType": "line",
            "family": "xy",
            "name": "IDS_LINECHART",
            "vender": "sap.viz",
            "bindings": xYBindings
        },
        "info/trellis_line": {
            "renderType": "line",
            "family": "xy",
            "name": "IDS_TRELLISLINECHART",
            "vender": "sap.viz",
            "bindings": xYBindings
        },
        "info/horizontal_line": {
            "renderType": "horizontal_line",
            "family": "xy",
            "name": "IDS_HORIZONTALLINECHART",
            "vender": "sap.viz",
            "bindings": xYBindings
        },
        "info/dual_horizontal_line": {
            "renderType": "horizontal_line",
            "family": "xy",
            "name": "IDS_DUALHORIZONTALLINECHART",
            "vender": "sap.viz",
            "bindings": xYYBindings
        },  
        "info/trellis_dual_horizontal_line": {
            "renderType": "horizontal_line",
            "family": "xy",
            "name": "IDS_TRELLISDUALHORIZONTALLINECHART",
            "vender": "sap.viz",
            "bindings": xYYBindings
        },                
        "info/trellis_horizontal_line": {
            "renderType": "horizontal_line",
            "family": "xy",
            "name": "IDS_TRELLISHORIZONTALLINECHART",
            "vender": "sap.viz",
            "bindings": xYBindings
        },
        "info/combination": {
            "renderType": "combination",
            "family": "xy",
            "name": "IDS_COMBINATIONCHART",
            "vender": "sap.viz",
            "bindings": combinationBindings
        },
        "info/trellis_combination": {
            "renderType": "combination",
            "family": "xy",
            "name": "IDS_TRELLISCOMBINATIONCHART",
            "vender": "sap.viz",
            "bindings": combinationBindings
        },
        "info/horizontal_combination": {
            "renderType": "horizontal_combination",
            "family": "xy",
            "name": "IDS_HORIZONTALCOMBINATIONCHART",
            "vender": "sap.viz",
            "bindings": combinationBindings
        },
        "info/trellis_horizontal_combination": {
            "renderType": "horizontal_combination",
            "family": "xy",
            "name": "IDS_TRELLISHORIZONTALCOMBINATIONCHART",
            "vender": "sap.viz",
            "bindings": combinationBindings
        },
        "info/bubble": {
            "renderType": "bubble",
            "family": "yy",
            "name": "IDS_BUBBLECHART",
            "vender": "sap.viz",
            "bindings": yYBindings
        },
        "info/trellis_bubble": {
            "renderType": "bubble",
            "family": "yy",
            "name": "IDS_TRELLISBUBBLECHART",
            "vender": "sap.viz",
            "bindings": yYBindings
        },
        "info/scatter": {
            "renderType": "scatter",
            "family": "yy",
            "name": "IDS_SCATTERCHART",
            "vender": "sap.viz",
            "bindings": yYBindings
        },
        "info/trellis_scatter": {
            "renderType": "scatter",
            "family": "yy",
            "name": "IDS_TRELLISSCATTERCHART",
            "vender": "sap.viz",
            "bindings": yYBindings
        },
        "info/dual_column": {
            "renderType": "column",
            "family": "xyy",
            "name": "IDS_DUALVERTICALBARCHART",
            "vender": "sap.viz",
            "bindings": xYYBindings
        },
        "info/trellis_dual_column": {
            "renderType": "column",
            "family": "xyy",
            "name": "IDS_TRELLISDUALCOLUMNCHART",
            "vender": "sap.viz",
            "bindings": xYYBindings
        },
        "info/dual_stacked_column": {
            "renderType": "stacked_column",
            "family": "xyy",
            "name": "IDS_DUALSTACKEDVERTICALBARCHART",
            "vender": "sap.viz",
            "bindings": xYYBindings
        },
        "info/trellis_dual_stacked_column": {
            "renderType": "stacked_column",
            "family": "xyy",
            "name": "IDS_TRELLISDUALSTACKEDCOLUMNCHART",
            "vender": "sap.viz",
            "bindings": xYYBindings
        },
        "info/100_dual_stacked_column": {
            "renderType": "100_stacked_column",
            "family": "xyy",
            "name": "IDS_DUALPERCENTAGESTACKEDVERTICALBARCHART",
            "vender": "sap.viz",
            "bindings": xYYBindings
        },
        "info/trellis_100_dual_stacked_column": {
            "renderType": "100_stacked_column",
            "family": "xyy",
            "name": "IDS_TRELLISDUALPERCENTAGESTACKEDCOLUMNCHART",
            "vender": "sap.viz",
            "bindings": xYYBindings
        },
        "info/dual_bar": {
            "renderType": "bar",
            "family": "xyy",
            "name": "IDS_DUALBARCHART",
            "vender": "sap.viz",
            "bindings": xYYBindings
        },
        "info/trellis_dual_bar": {
            "renderType": "bar",
            "family": "xyy",
            "name": "IDS_TRELLISDUALBARCHART",
            "vender": "sap.viz",
            "bindings": xYYBindings
        },
        "info/dual_stacked_bar": {
            "renderType": "stacked_bar",
            "family": "xyy",
            "name": "IDS_DUALSTACKEDBARCHART",
            "vender": "sap.viz",
            "bindings": xYYBindings
        },
        "info/trellis_dual_stacked_bar": {
            "renderType": "stacked_bar",
            "family": "xyy",
            "name": "IDS_TRELLISDUALSTACKEDBARCHART",
            "vender": "sap.viz",
            "bindings": xYYBindings
        },
        "info/100_dual_stacked_bar": {
            "renderType": "100_stacked_bar",
            "family": "xyy",
            "name": "IDS_DUALPERCENTAGESTACKEDBARCHART",
            "vender": "sap.viz",
            "bindings": xYYBindings
        },
        "info/trellis_100_dual_stacked_bar": {
            "renderType": "100_stacked_bar",
            "family": "xyy",
            "name": "IDS_TRELLISDUALPERCENTAGESTACKEDBARCHART",
            "vender": "sap.viz",
            "bindings": xYYBindings
        },
        "info/dual_line": {
            "renderType": "line",
            "family": "xyy",
            "name": "IDS_DUALLINECHART",
            "vender": "sap.viz",
            "bindings": xYYBindings
        },
        "info/trellis_dual_line": {
            "renderType": "line",
            "family": "xyy",
            "name": "IDS_TRELLISDUALLINECHART",
            "vender": "sap.viz",
            "bindings": xYYBindings
        },
        "info/pie": {
            "renderType": "pie",
            "family": "pie",
            "name": "IDS_PIECHART",
            "vender": "sap.viz",
            "bindings": pieBindings
        },
        "info/time_bubble" :{
            "renderType": "time_bubble",
            "family": "yy",
            "name" : 'IDS_TIMEBUBBLECHART',
            "vender" : "sap.viz",
            "bindings": yYBindings
        },
        "info/bullet": {
            "renderType": "bullet",
            "family": "bullet",
            "name": 'IDS_BULLETCHART',
            "vender": "sap.viz",
            "bindings": bulletBindings
        },
        "info/trellis_pie": {
            "renderType": "pie",
            "family": "pie",
            "name": "IDS_TRELLISPIECHART",
            "vender": "sap.viz",
            "bindings": trellisPieBindings
        },
        "info/donut": {
            "renderType": "donut",
            "family": "pie",
            "name": "IDS_DONUTCHART",
            "vender": "sap.viz",
            "bindings": pieBindings
        },
        "info/trellis_donut": {
            "renderType": "donut",
            "family": "pie",
            "name": "IDS_TRELLISDONUTCHART",
            "vender": "sap.viz",
            "bindings": trellisPieBindings
        },
        "info/treemap": {
            "renderType": "treemap",
            "family": "treemap",
            "name": "IDS_TREEMAPCHART",
            "vender": "sap.viz",
            "bindings": treeBindings
        },
        "info/vertical_bullet": {
            "renderType": "bullet",
            "family": "bullet",
            "name": "IDS_VERTICALBULLETCHART",
            "vender": "sap.viz",
            "bindings": bulletBindings
        },
        "info/stacked_combination": {
            "renderType": "stacked_combination",
            "family": "xy",
            "name": "IDS_STACKEDCOMBINATIONCHART",
            "vender": "sap.viz",
            "bindings": combinationBindings
        },
        "info/horizontal_stacked_combination": {
            "renderType": "horizontal_stacked_combination",
            "family": "xy",
            "name": "IDS_HORIZONTALSTACKEDCOMBINATIONCHART",
            "vender": "sap.viz",
            "bindings": combinationBindings
        },
        "info/dual_stacked_combination": {
            "renderType": "stacked_combination",
            "family": "xyy",
            "name": "IDS_DUALSTACKEDCOMBINATIONCHART",
            "vender": "sap.viz",
            "bindings": xYYCombinationBindings
        },
        "info/dual_horizontal_stacked_combination": {
            "renderType": "horizontal_stacked_combination",
            "family": "xyy",
            "name": "IDS_DUALHORIZONTALSTACKEDCOMBINATIONCHART",
            "vender": "sap.viz",
            "bindings": xYYCombinationBindings
        },
        "info/trellis_bullet": {
            "renderType": "bullet",
            "family": "bullet",
            "name": "IDS_TRELLISBULLETCHART",
            "vender": "sap.viz",
            "bindings": bulletBindings
        },
        "info/trellis_vertical_bullet": {
            "renderType": "bullet",
            "family": "bullet",
            "name": "IDS_TRELLISVERTICALBULLETCHART",
            "vender": "sap.viz",
            "bindings": bulletBindings
        }
    };
});

define('sap/viz/chart/metadata/properties/chartTypes',[], function(){
    return [
        "DEFAULT",
        "100_dual_stacked_bar",
        "100_dual_stacked_column",
        "100_stacked_bar",
        "100_stacked_column",
        "bar",
        "bullet",
        "vertical_bullet",
        "column",
        "combination",
        "dual_bar",
        "dual_column",
        "dual_horizontal_line",
        "dual_line",
        "dual_stacked_bar",
        "dual_stacked_column",
        "horizontal_combination",
        "horizontal_line",
        "line",
        "stacked_bar",
        "stacked_column",
        "pie",
        "donut",
        "scatter",
        "bubble",
        "time_bubble",
        "treemap",
        "trellis_100_dual_stacked_bar",
        "trellis_100_dual_stacked_column",
        "trellis_100_stacked_bar",
        "trellis_100_stacked_column",
        "trellis_bar",
        "trellis_column",
        "trellis_combination",
        "trellis_dual_bar",
        "trellis_dual_column",
        "trellis_dual_horizontal_line",
        "trellis_dual_line",
        "trellis_dual_stacked_bar",
        "trellis_dual_stacked_column",
        "trellis_horizontal_combination",
        "trellis_horizontal_line",
        "trellis_line",
        "trellis_stacked_bar",
        "trellis_stacked_column",
        "trellis_pie",
        "trellis_scatter",
        "trellis_bubble",
        "trellis_donut",
        "trellis_bullet",
        "trellis_vertical_bullet",
        "stacked_combination",
        "horizontal_stacked_combination",
        "dual_stacked_combination",
        "dual_horizontal_stacked_combination"
    ];
});

define('sap/viz/chart/metadata/properties/metadata',[
    'sap/viz/chart/metadata/properties/chartTypes',
    'sap/viz/chart/metadata/properties/PropertyLoader'
], function(chartTypes, PropertyLoader){

    var propsByChartType = {};

    for(var i = 0; i < chartTypes.length; ++i){
        var chartType = getFullChartType(chartTypes[i]);
        var props = PropertyLoader.getProperties(chartType);
        var chartProps = propsByChartType[chartType] = {};
        for(var name in props){
            var prop = props[name];
            if(!isPropObj(prop)){
                prop = {
                    defaultValue: prop
                };
            }
            setObject(name, prop, chartProps);
        }
    }

    function getFullChartType(chartType){
        return 'info/' + chartType;
    }

    function setObject(name, value, root){
        var parts = name.split('.');
        var p = root;
        for(var i = 0; i < parts.length; ++i){
            var part = parts[i];
            if(i < parts.length - 1){
                p[part] = p[part] || {
                    children: {}
                };
                p = p[part].children;
            }else{
                p[part] = value;
            }
        }
    }

    function isPropObj(it){
        return Object.prototype.toString.call(it) === '[object Object]' &&
            (it.hasOwnProperty('defaultValue') || it.hasOwnProperty('readonly') ||
             it.hasOwnProperty('serializable'));
    }

    return {
        get: function(chartType){
            if(arguments.length){
                return propsByChartType[chartType];
            }
            return propsByChartType;
        }
    };
});

define('sap/viz/chart/metadata/scales/allChartTypeScales',[], function Setup() {
    var color_Properties_single = {
        "type": "color",
        "palette": {
            "name": "palette",
            "supportedValueType": "StringArray",
            "defaultValue": ["#748CB2", "#9CC677", "#EACF5E", "#F9AD79", "#D16A7C", "#8873A2", "#3A95B3", "#B6D949",
                "#FDD36C", "#F47958", "#A65084", "#0063B1", "#0DA841", "#FCB71D", "#F05620", "#B22D6E", "#3C368E",
                "#8FB2CF", "#95D4AB", "#EAE98F", "#F9BE92", "#EC9A99", "#BC98BD", "#1EB7B2", "#73C03C", "#F48323",
                "#EB271B", "#D9B5CA", "#AED1DA", "#DFECB2", "#FCDAB0", "#F5BCB4"],
            "description": "Set color palette for non-dual chart. Or dual chart's color palette when MND is not fed on legend color.", // jshint ignore:line
        }
    };

    var color_Properties_dual = {
        "type": "color",
        "palette": {
            "name": "palette",
            "supportedValueType": "2 Dimension StringArray",
            "defaultValue": [
                ["#8FBADD", "#B8D4E9", "#7AAED6", "#A3C7E3", "#3D88C4", "#66A1D0", "#297CBE", "#5295CA", 
            "#005BA3", "#146FB7", "#005395", "#0063B1"],
                ["#F6A09B", "#F9C3C0", "#F58E88", "#F8B1AD", "#F05B52", "#F37D76", "#EE4A40", "#F16C64",
            "#D92419", "#ED382D", "#C52117", "#EB271B"]
            ],
            "description": "Dimension 1 set axis 1 color palette for dual chart, and dimension 2 set axis 2 color palette for dual chart", // jshint ignore:line
        }
    };

    var color_Palette = {
        "type": "color",
        "palette": {
            "name": "palette",
            "supportedValueType": "StringArray",
            "defaultValue": ["#748CB2", "#9CC677", "#EACF5E", "#F9AD79", "#D16A7C", "#8873A2", "#3A95B3", "#B6D949",
                "#FDD36C", "#F47958", "#A65084", "#0063B1", "#0DA841", "#FCB71D", "#F05620", "#B22D6E", "#3C368E",
                "#8FB2CF", "#95D4AB", "#EAE98F", "#F9BE92", "#EC9A99", "#BC98BD", "#1EB7B2", "#73C03C", "#F48323",
                "#EB271B", "#D9B5CA", "#AED1DA", "#DFECB2", "#FCDAB0", "#F5BCB4"],
            "description": "Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension bound to the legend.", // jshint ignore:line
        }
    };

    var donut_color_Properties_single = {
        "type": "color",
        "palette": {
            "name": "palette",
            "supportedValueType": "StringArray",
            "defaultValue": ["#748CB2", "#9CC677", "#EACF5E", "#F9AD79", "#D16A7C", "#8873A2", "#3A95B3", "#B6D949",
                "#FDD36C", "#F47958", "#A65084", "#0063B1", "#0DA841", "#FCB71D", "#F05620", "#B22D6E", "#3C368E",
                "#8FB2CF", "#95D4AB", "#EAE98F", "#F9BE92", "#EC9A99", "#BC98BD", "#1EB7B2", "#73C03C", "#F48323",
                "#EB271B", "#D9B5CA", "#AED1DA", "#DFECB2", "#FCDAB0", "#F5BCB4"],
            "description": "Set the color palette for sectors",
        }
    };

    var shape_Properties = {
        "type": "shape",
        "palette": {
            "name": "palette",
            "supportedValueType": "StringArray",
            "defaultValue": ["circle", "square", "diamond", "triangleUp", "triangleDown", "triangleLeft",
                "triangleRight", "cross", "intersection"],
            "supportedValues": ["circle", "square", "diamond", "triangleUp", "triangleDown", "triangleLeft",
                "triangleRight", "cross", "intersection"],
            "description": "Set marker shape of bubble."
        }
    };

    var valueAxis2_Properties = {
        "name": "valueAxis2",
        "description": "Set valueAxis for value axis2. this property just work on value type axis.",
        //"supportedValueType": "Object",
        "min": {
            "name": "min",
            "supportedValueType": "Number | auto",
            "defaultValue": "auto",
            "description": "Set min of valueAxis2 data value. Setting null stands for disable."
        },
        "max": {
            "name": "max",
            "supportedValueType": "Number | auto",
            "defaultValue": "auto",
            "description": "Set max of valueAxis2 data value. Setting null stands for disable."
        },
        "type": {
            "name": "type",
            "supportedValueType": "String",
            "defaultValue": "linear",
            "description": "Set type of ValueAxis2 data value. Setting null stands for default."
        }
    };
    var valueAxis_Properties = {
        "name": "valueAxis",
        "description": "Set valueAxis for value axis. this property just work on value type axis.",
        //"supportedValueType": "Object",
        "min": {
            "name": "min",
            "supportedValueType": "Number | auto",
            "defaultValue": "auto",
            "description": "Set min of valueAxis data value. Setting null stands for disable."
        },
        "max": {
            "name": "max",
            "supportedValueType": "Number | auto",
            "defaultValue": "auto",
            "description": "Set max of valueAxis data value. Setting null stands for disable."
        },
        "type": {
            "name": "type",
            "supportedValueType": "String",
            "defaultValue": "linear",
            "description": "Set type of ValueAxis data value. Setting null stands for default."
        },
    };

    var primary_Properties = {
        "name": "valueAxis",
        "description": "Set scale for value axis. this property just work on value type axis.",
        //"supportedValueType": "Object",
        "type": {
            "name": "type",
            "supportedValueType": "String",
            "defaultValue": "linear",
            "description": "Set type of primary data value. Setting null stands for default."
        },
        "min": {
            "name": "min",
            "supportedValueType": "Number | auto",
            "defaultValue": "auto",
            "description": "Set min of valueAxis data value. Setting null stands for disable."
        },
        "max": {
            "name": "max",
            "supportedValueType": "Number | auto",
            "defaultValue": "auto",
            "description": "Set max of valueAxis data value. Setting null stands for disable."
        }
    };

    var secondary_Properties = {
        "name": "valueAxis2",
        "description": "Set scale for value axis2. this property just work on value type axis.",
        //"supportedValueType": "Object",
        "type": {
            "name": "type",
            "supportedValueType": "String",
            "defaultValue": "linear",
            "description": "Set type of secondary data value. Setting null stands for default."
        },
        "min": {
            "name": "min",
            "supportedValueType": "Number | auto",
            "defaultValue": "auto",
            "description": "Set min of valueAxis2 data value. Setting null stands for disable."
        },
        "max": {
            "name": "max",
            "supportedValueType": "Number | auto",
            "defaultValue": "auto",
            "description": "Set max of valueAxis2 data value. Setting null stands for disable."
        },
    };

    var allChartTypeScales = {
        "column": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_single
        }],
        "donut": [{
            "feed": "color",
            "properties": donut_color_Properties_single
        }],
        "pie": [{
            "feed": "color",
            "properties": donut_color_Properties_single
        }],
        "bar": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_single
        }],
        "line": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_single
        }],
        "stacked_column": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_single
        }],
        "stacked_bar": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_single
        }],
        "100_stacked_bar": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_single
        }],
        "100_stacked_column": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_single
        }],
        "combination": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_single
        }],
        "dual_bar": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "valueAxis2",
            "properties": valueAxis2_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_dual
        }],
        "dual_column": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "valueAxis2",
            "properties": valueAxis2_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_dual
        }],
        "dual_line": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "valueAxis2",
            "properties": valueAxis2_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_dual
        }],
        "scatter": [{
            "feed": "valueAxis",
            "properties": primary_Properties
        }, {
            "feed": "valueAxis2",
            "properties": secondary_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_single
        }, {
            "feed": "shape",
            "properties": shape_Properties
        }],
        "bubble": [{
            "feed": "valueAxis",
            "properties": primary_Properties
        }, {
            "feed": "valueAxis2",
            "properties": secondary_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_single
        }, {
            "feed": "shape",
            "properties": shape_Properties
        }],
        "trellis_column": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_single
        }],
        "trellis_donut": [{
            "feed": "color",
            "properties": donut_color_Properties_single
        }],
        "trellis_pie": [{
            "feed": "color",
            "properties": donut_color_Properties_single
        }],
        "trellis_bar": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_single
        }],
        "trellis_line": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_single
        }],
        "trellis_stacked_column": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_single
        }],
        "trellis_stacked_bar": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_single
        }],
        "trellis_100_stacked_bar": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_single
        }],
        "trellis_100_stacked_column": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_single
        }],
        "trellis_combination": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_single
        }],
        "trellis_dual_bar": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "valueAxis2",
            "properties": valueAxis2_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_dual
        }],
        "trellis_dual_column": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "valueAxis2",
            "properties": valueAxis2_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_dual
        }],
        "trellis_dual_line": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "valueAxis2",
            "properties": valueAxis2_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_dual
        }],
        "trellis_scatter": [{
            "feed": "valueAxis",
            "properties": primary_Properties
        }, {
            "feed": "valueAxis2",
            "properties": secondary_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_single
        }, {
            "feed": "shape",
            "properties": shape_Properties
        }],
        "trellis_bubble": [{
            "feed": "valueAxis",
            "properties": primary_Properties
        }, {
            "feed": "valueAxis2",
            "properties": secondary_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_single
        }, {
            "feed": "shape",
            "properties": shape_Properties
        }],
        "horizontal_line": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_single
        }],
        "trellis_horizontal_line": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_single
        }],
        "horizontal_combination": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "color",
            "properties": color_Palette
        }],
        "trellis_horizontal_combination": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "color",
            "properties": color_Palette
        }],
        "dual_horizontal_line": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "valueAxis2",
            "properties": valueAxis2_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_dual
        }],
        "trellis_dual_horizontal_line": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "valueAxis2",
            "properties": valueAxis2_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_dual
        }],
        "100_dual_stacked_column": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "valueAxis2",
            "properties": valueAxis2_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_dual
        }],
        "trellis_100_dual_stacked_column": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "valueAxis2",
            "properties": valueAxis2_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_dual
        }],
        "100_dual_stacked_bar": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "valueAxis2",
            "properties": valueAxis2_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_dual
        }],
        "trellis_100_dual_stacked_bar": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "valueAxis2",
            "properties": valueAxis2_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_dual
        }],
        "dual_stacked_column": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "valueAxis2",
            "properties": valueAxis2_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_dual
        }],
        "trellis_dual_stacked_column": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "valueAxis2",
            "properties": valueAxis2_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_dual
        }],
        "dual_stacked_bar": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "valueAxis2",
            "properties": valueAxis2_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_dual
        }],
        "trellis_dual_stacked_bar": [{
            "feed": "valueAxis",
            "properties": valueAxis_Properties
        }, {
            "feed": "valueAxis2",
            "properties": valueAxis2_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_dual
        }],
        "treemap": [{            
            "feed": "color",                 
            "palette": [],
            "startColor": "#C2E3A9",
            "endColor": "#73C03C",
            "legendValues": []
        }],
        "time_bubble": [{
            "feed": "valueAxis",
            "properties": primary_Properties
        }, {
            "feed": "valueAxis2",
            "properties": secondary_Properties
        }, {
            "feed": "color",
            "properties": color_Properties_single
        }, {
            "feed": "shape",
            "properties": shape_Properties
        }],
        "bullet": [{
            "feed": "valueAxis",
            "properties": primary_Properties
        }]
    };

    return allChartTypeScales;
});

define('sap/viz/chart/metadata/metadata',[
    "sap/viz/chart/metadata/bindingDef",
    "sap/viz/chart/metadata/properties/metadata",
    "sap/viz/chart/metadata/scales/allChartTypeScales",
    'sap/viz/framework/common/lang/LangManager',
    "sap/viz/framework/core/ChartViewRegistry"
], function Setup(bindingDef, propertyMetadata, allChartTypeScales, LangManager, ChartViewRegistry) {
    var cutOffCharType = function(type) {
        if (type.search("info/") != -1) {
            var cutOffType = type.slice(5);
            return cutOffType;
        } else {
            return type;
        }
    };

    var filterBinding = function(bindDef, chartType) {
        var tmpBindings = bindDef.slice();
        if (!/trellis/i.test(chartType)) {
            tmpBindings = tmpBindings.filter(function(item) {
                if (!/trellis/.test(item.id)) {
                    return item;
                }
            });
        }
        if (/scatter/i.test(chartType)) {
            tmpBindings = tmpBindings.filter(function(item) {
                if (!/bubble/.test(item.id)) {
                    return item;
                }
            });
        }
        if (/trellis/i.test(chartType)) {
            tmpBindings = tmpBindings.filter(function(item) {
                if (item.id !== 'dataFrame') {
                    return item;
                }
            });
        }
        return tmpBindings;
    };

    //flatten scales, remove node properties.
    var flattenScale = function(chartScales) {
        var returnScales = [];
        var i = 0;
        if (chartScales) {
            for (i = 0; i < chartScales.length; ++i) {
                var scales = chartScales[i];
                returnScales[i] = {};
                for (var items in scales) {
                    if (scales.hasOwnProperty(items)) {
                        returnScales[i][items] = scales[items];
                    }
                }
                if (returnScales[i].hasOwnProperty("properties")) {
                    delete returnScales[i].properties;
                    for (var propItem in scales.properties) {
                        if (scales.properties.hasOwnProperty(propItem)) {
                            returnScales[i][propItem] = scales.properties[propItem];
                        }
                    }
                }
            }
        }
        return returnScales;
    };

    var BaseMetadata = {
        get: function(chartType) {
            var result = bindingDef[chartType];
            if (result) {
                var cutType = cutOffCharType(chartType);
                var bindings = filterBinding(result["bindings"], chartType);
                return {
                    "type": chartType,
                    "family": result["family"],
                    "name": LangManager.get(result["name"]) || result["name"],
                    "vender": result["vender"],
                    "renderType": result["renderType"],
                    "properties": propertyMetadata.get(chartType) || {},
                    "scales": flattenScale(allChartTypeScales[cutType]),
                    "bindings": bindings
                };
            } else {
                return ChartViewRegistry.getMetadata(chartType);
            }
        },

        getAll: function() {
            var metadata = [];
            for (var i in bindingDef) {
                if (bindingDef.hasOwnProperty(i)) {
                    var cutType = cutOffCharType(i);
                    var bindings = filterBinding(bindingDef[i]["bindings"], i);
                    metadata.push({
                        "type": i,
                        "family": bindingDef[i]["family"],
                        "name": LangManager.get(bindingDef[i]["name"]) || bindingDef[i]["name"],
                        "vender": bindingDef[i]["vender"],
                        "renderType": bindingDef[i]["renderType"],
                        "properties": propertyMetadata.get(i) || {},
                        "scales": flattenScale(allChartTypeScales[cutType]),
                        "bindings": bindings
                    });
                }
            }
            return metadata;
        }
    };

    return BaseMetadata;
});
define('sap/viz/api/metadata/Viz',['sap/viz/chart/metadata/metadata', 'exports'], function Setup(metadataObj, scaleUtil) {

    var metadata =
        /**
         * sap.viz.api.metadata.Viz
         * @namespace sap.viz.api.metadata.Viz
         */
        {


            /**
             * @function get
             * @memberof sap.viz.api.metadata.Viz
             * @static
             * @param {String} [id]
             *                        Returns viz metadata that is associated with the id. If the id is not defined,
              returns all the vizs' metadata.
             * @return {[sap.viz.api.metadata.VizMetadata]} viz metadata, this is a read only object
             *
             * @example <caption>Sample Code:</caption>
             * var viz = sap.viz.api.metadata.Viz.get('info/column'); //Get specified viz by id; returns an array which
              contains one viz object
             * viz manifest returned:
             * {
             *     "type": String, chart type, for info/column is info/column.
             *     "family": String, chart family, for info/column is xy.
             *     "renderType": String,  rendering type, for info/column is column.
             *     "vender": String,  Ddependencies between modules.
             *     "bindings": Array,  get all binding defintion for the chart.
             *     "scales": Array,  get all scale defintion with default scale properties for the chart.
             *     "properties": Object, get all properties of the viz including default and customer setting.
             * }
             *
             */
            get: function(chartType) {
                if (arguments.length) {
                    var getBaseMetadata = metadataObj.get(chartType);
                    return getBaseMetadata;

                } else {
                    var allMetadata = metadataObj.getAll();
                    return allMetadata;

                }

            }
        };


    return metadata;
});
define('sap/viz/chart/metadata/bindings/XXBindings',[], function Setup() {
    var feeds = [{
        "id": "dataFrame",
        "name": "IDS_DATA_FRAME",
        "type": "Dimension",
        "min": 0,
        "max": 1,
        "acceptMND": false,
        "role": "frame",
        "scaleType": "frameScale"
    }, {
        "id": "categoryAxis",
        "name": "IDS_CATEGORY_AXIS",
        "type": "Dimension",
        "min": 1,
        "max": Number.POSITIVE_INFINITY,
        "acceptMND": false,
        "role": "layout",
        "scaleType": "categoryScale"
    }, {
        "id": "categoryAxis2",
        "name": "IDS_CATEGORY_AXIS2",
        "type": "Dimension",
        "min": 0,
        "max": Number.POSITIVE_INFINITY,
        "acceptMND": false,
        "role": "layout",
        "scaleType": "categoryScale"
    }, {
        "id": "color",
        "name": "IDS_COLOR",
        "type": "Measure",
        "min": 1,
        "max": 1,
        "role": "layout",
        "scaleType": "quantizeScale"
    }];

    return feeds;
});
(function(){
    var list = define && define.__autoLoad;
    if(list && list.length){
        define.__autoLoad = [];
        require(list);
    }
})();
(function(components){
    var chartBundle = sap.bi.framework.declareBundle( {
        id: "sap.viz.chart",
        components: components
    });

    (chartBundle.components || []).forEach(function(component) {
        component.instance = component.instance || {};
        window._cvom_kernel.register(component);
    });
})([
    {
        "id": "info/bar",
        "provide": "sap.viz.impls",
        "instance": {
            "view": "sap/viz/chart/views/XYChartView",
            "renderType": "bar",
            "family": "xy",
            "name": "IDS_BARCHART",
            "vender": "sap.viz",
            "bindings": "sap/viz/chart/metadata/bindings/XYBindings"
        },
        "customProperties": {
            "resources": [
                {
                    "key": "sap.viz.api.env.Template.loadPaths",
                    "path": "./resources/chart/templates"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/chart/langs"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/framework/langs"
                }
            ]
        }
    },
    {
        "id": "info/stacked_bar",
        "provide": "sap.viz.impls",
        "instance": {
            "view": "sap/viz/chart/views/XYChartView",
            "renderType": "stacked_bar",
            "family": "xy",
            "name": "IDS_STACKEDBARCHART",
            "vender": "sap.viz",
            "bindings": "sap/viz/chart/metadata/bindings/XYBindings"
        },
        "customProperties": {
            "resources": [
                {
                    "key": "sap.viz.api.env.Template.loadPaths",
                    "path": "./resources/chart/templates"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/chart/langs"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/framework/langs"
                }
            ]
        }
    },
    {
        "id": "info/100_stacked_bar",
        "provide": "sap.viz.impls",
        "instance": {
            "view": "sap/viz/chart/views/XYChartView",
            "renderType": "100_stacked_bar",
            "family": "xy",
            "name": "IDS_PERCENTAGESTACKEDBARCHART",
            "vender": "sap.viz",
            "bindings": "sap/viz/chart/metadata/bindings/XYBindings"
        },
        "customProperties": {
            "resources": [
                {
                    "key": "sap.viz.api.env.Template.loadPaths",
                    "path": "./resources/chart/templates"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/chart/langs"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/framework/langs"
                }
            ]
        }
    },
    {
        "id": "info/column",
        "provide": "sap.viz.impls",
        "instance": {
            "view": "sap/viz/chart/views/XYChartView",
            "renderType": "column",
            "family": "xy",
            "name": "IDS_VERTICALBARCHART",
            "vender": "sap.viz",
            "bindings": "sap/viz/chart/metadata/bindings/XYBindings"
        },
        "customProperties": {
            "resources": [
                {
                    "key": "sap.viz.api.env.Template.loadPaths",
                    "path": "./resources/chart/templates"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/chart/langs"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/framework/langs"
                }
            ]
        }
    },
    {
        "id": "info/stacked_column",
        "provide": "sap.viz.impls",
        "instance": {
            "view": "sap/viz/chart/views/XYChartView",
            "renderType": "stacked_column",
            "family": "xy",
            "name": "IDS_STACKEDVERTICALBARCHART",
            "vender": "sap.viz",
            "bindings": "sap/viz/chart/metadata/bindings/XYBindings"
        },
        "customProperties": {
            "resources": [
                {
                    "key": "sap.viz.api.env.Template.loadPaths",
                    "path": "./resources/chart/templates"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/chart/langs"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/framework/langs"
                }
            ]
        }
    },
    {
        "id": "info/100_stacked_column",
        "provide": "sap.viz.impls",
        "instance": {
            "view": "sap/viz/chart/views/XYChartView",
            "renderType": "100_stacked_column",
            "family": "xy",
            "name": "IDS_PERCENTAGESTACKEDVERTICALBARCHART",
            "vender": "sap.viz",
            "bindings": "sap/viz/chart/metadata/bindings/XYBindings"
        },
        "customProperties": {
            "resources": [
                {
                    "key": "sap.viz.api.env.Template.loadPaths",
                    "path": "./resources/chart/templates"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/chart/langs"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/framework/langs"
                }
            ]
        }
    },
    {
        "id": "info/line",
        "provide": "sap.viz.impls",
        "instance": {
            "view": "sap/viz/chart/views/XYChartView",
            "renderType": "line",
            "family": "xy",
            "name": "IDS_LINECHART",
            "vender": "sap.viz",
            "bindings": "sap/viz/chart/metadata/bindings/XYBindings"
        },
        "customProperties": {
            "resources": [
                {
                    "key": "sap.viz.api.env.Template.loadPaths",
                    "path": "./resources/chart/templates"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/chart/langs"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/framework/langs"
                }
            ]
        }
    },
    {
        "id": "info/combination",
        "provide": "sap.viz.impls",
        "instance": {
            "view": "sap/viz/chart/views/XYChartView",
            "renderType": "combination",
            "family": "xy",
            "name": "IDS_COMBINATIONCHART",
            "vender": "sap.viz",
            "bindings": "sap/viz/chart/metadata/bindings/CombinationBindings"
        },
        "customProperties": {
            "resources": [
                {
                    "key": "sap.viz.api.env.Template.loadPaths",
                    "path": "./resources/chart/templates"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/chart/langs"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/framework/langs"
                }
            ]
        }
    },
    {
        "id": "info/bubble",
        "provide": "sap.viz.impls",
        "instance": {
            "view": "sap/viz/chart/views/YYChartView",
            "renderType": "bubble",
            "family": "yy",
            "name": "IDS_BUBBLECHART",
            "vender": "sap.viz",
            "bindings": "sap/viz/chart/metadata/bindings/YYBindings"
        },
        "customProperties": {
            "resources": [
                {
                    "key": "sap.viz.api.env.Template.loadPaths",
                    "path": "./resources/chart/templates"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/chart/langs"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/framework/langs"
                }
            ]
        }
    },
    {
        "id": "info/time_bubble",
        "provide": "sap.viz.impls",
        "instance": {
            "view": "sap/viz/chart/views/YYChartView",
            "renderType": "time_bubble",
            "family": "yy",
            "name": "IDS_TIMEBUBBLECHART",
            "vender": "sap.viz",
            "bindings": "sap/viz/chart/metadata/bindings/YYBindings"
        },
        "customProperties": {
            "resources": [
                {
                    "key": "sap.viz.api.env.Template.loadPaths",
                    "path": "./resources/chart/templates"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/chart/langs"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/framework/langs"
                }
            ]
        }
    },
    {
        "id": "info/scatter",
        "provide": "sap.viz.impls",
        "instance": {
            "view": "sap/viz/chart/views/YYChartView",
            "renderType": "scatter",
            "family": "yy",
            "name": "IDS_SCATTERCHART",
            "vender": "sap.viz",
            "bindings": "sap/viz/chart/metadata/bindings/YYBindings"
        },
        "customProperties": {
            "resources": [
                {
                    "key": "sap.viz.api.env.Template.loadPaths",
                    "path": "./resources/chart/templates"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/chart/langs"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/framework/langs"
                }
            ]
        }
    },
    {
        "id": "info/dual_stacked_column",
        "provide": "sap.viz.impls",
        "instance": {
            "view": "sap/viz/chart/views/XYYChartView",
            "renderType": "stacked_column",
            "family": "xyy",
            "name": "IDS_DUALSTACKEDVERTICALBARCHART",
            "vender": "sap.viz",
            "bindings": "sap/viz/chart/metadata/bindings/XYYBindings"
        },
        "customProperties": {
            "resources": [
                {
                    "key": "sap.viz.api.env.Template.loadPaths",
                    "path": "./resources/chart/templates"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/chart/langs"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/framework/langs"
                }
            ]
        }
    },
    {
        "id": "info/100_dual_stacked_column",
        "provide": "sap.viz.impls",
        "instance": {
            "view": "sap/viz/chart/views/XYYChartView",
            "renderType": "100_stacked_column",
            "family": "xyy",
            "name": "IDS_DUALPERCENTAGESTACKEDVERTICALBARCHART",
            "vender": "sap.viz",
            "bindings": "sap/viz/chart/metadata/bindings/XYYBindings"
        },
        "customProperties": {
            "resources": [
                {
                    "key": "sap.viz.api.env.Template.loadPaths",
                    "path": "./resources/chart/templates"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/chart/langs"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/framework/langs"
                }
            ]
        }
    },
    {
        "id": "info/dual_stacked_bar",
        "provide": "sap.viz.impls",
        "instance": {
            "view": "sap/viz/chart/views/XYYChartView",
            "renderType": "stacked_bar",
            "family": "xyy",
            "name": "IDS_DUALSTACKEDBARCHART",
            "vender": "sap.viz",
            "bindings": "sap/viz/chart/metadata/bindings/XYYBindings"
        },
        "customProperties": {
            "resources": [
                {
                    "key": "sap.viz.api.env.Template.loadPaths",
                    "path": "./resources/chart/templates"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/chart/langs"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/framework/langs"
                }
            ]
        }
    },
    {
        "id": "info/100_dual_stacked_bar",
        "provide": "sap.viz.impls",
        "instance": {
            "view": "sap/viz/chart/views/XYYChartView",
            "renderType": "100_stacked_bar",
            "family": "xyy",
            "name": "IDS_DUALPERCENTAGESTACKEDBARCHART",
            "vender": "sap.viz",
            "bindings": "sap/viz/chart/metadata/bindings/XYYBindings"
        },
        "customProperties": {
            "resources": [
                {
                    "key": "sap.viz.api.env.Template.loadPaths",
                    "path": "./resources/chart/templates"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/chart/langs"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/framework/langs"
                }
            ]
        }
    },
    {
        "id": "info/bullet",
        "provide": "sap.viz.impls",
        "instance": {
            "view": "sap/viz/chart/views/BulletChartView",
            "renderType": "bullet",
            "family": "bullet",
            "name": "IDS_BULLETCHART",
            "vender": "sap.viz",
            "bindings": "sap/viz/chart/metadata/bindings/BulletBindings"
        },
        "customProperties": {
            "resources": [
                {
                    "key": "sap.viz.api.env.Template.loadPaths",
                    "path": "./resources/chart/templates"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/chart/langs"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/framework/langs"
                }
            ]
        }
    },
    {
        "id": "info/vertical_bullet",
        "provide": "sap.viz.impls",
        "instance": {
            "view": "sap/viz/chart/views/BulletChartView",
            "renderType": "vertical_bullet",
            "family": "bullet",
            "name": "IDS_VERTICALBULLETCHART",
            "vender": "sap.viz",
            "bindings": "sap/viz/chart/metadata/bindings/BulletBindings"
        },
        "customProperties": {
            "resources": [
                {
                    "key": "sap.viz.api.env.Template.loadPaths",
                    "path": "./resources/chart/templates"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/chart/langs"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/framework/langs"
                }
            ]
        }
    },
    {
        "id": "info/pie",
        "provide": "sap.viz.impls",
        "instance": {
            "view": "sap/viz/chart/views/PieChartView",
            "renderType": "pie",
            "family": "pie",
            "name": "IDS_PIECHART",
            "vender": "sap.viz",
            "bindings": "sap/viz/chart/metadata/bindings/PieBindings"
        },
        "customProperties": {
            "resources": [
                {
                    "key": "sap.viz.api.env.Template.loadPaths",
                    "path": "./resources/chart/templates"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/chart/langs"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/framework/langs"
                }
            ]
        }
    },
    {
        "id": "info/stacked_combination",
        "provide": "sap.viz.impls",
        "instance": {
            "view": "sap/viz/chart/views/XYChartView",
            "renderType": "stacked_combination",
            "family": "xy",
            "name": "IDS_STACKEDCOMBINATIONCHART",
            "vender": "sap.viz",
            "bindings": "sap/viz/chart/metadata/bindings/CombinationBindings"
        },
        "customProperties": {
            "resources": [
                {
                    "key": "sap.viz.api.env.Template.loadPaths",
                    "path": "./resources/chart/templates"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/chart/langs"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/framework/langs"
                }
            ]
        }
    },
    {
        "id": "info/horizontal_stacked_combination",
        "provide": "sap.viz.impls",
        "instance": {
            "view": "sap/viz/chart/views/XYChartView",
            "renderType": "horizontal_stacked_combination",
            "family": "xy",
            "name": "IDS_HORIZONTALSTACKEDCOMBINATIONCHART",
            "vender": "sap.viz",
            "bindings": "sap/viz/chart/metadata/bindings/CombinationBindings"
        },
        "customProperties": {
            "resources": [
                {
                    "key": "sap.viz.api.env.Template.loadPaths",
                    "path": "./resources/chart/templates"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/chart/langs"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/framework/langs"
                }
            ]
        }
    },
    {
        "id": "info/dual_stacked_combination",
        "provide": "sap.viz.impls",
        "instance": {
            "view": "sap/viz/chart/views/XYYChartView",
            "renderType": "stacked_combination",
            "family": "xyy",
            "name": "IDS_DUALSTACKEDCOMBINATIONCHART",
            "vender": "sap.viz",
            "bindings": "sap/viz/chart/metadata/bindings/XYYCombinationBindings"
        },
        "customProperties": {
            "resources": [
                {
                    "key": "sap.viz.api.env.Template.loadPaths",
                    "path": "./resources/chart/templates"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/chart/langs"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/framework/langs"
                }
            ]
        }
    },
    {
        "id": "info/dual_horizontal_stacked_combination",
        "provide": "sap.viz.impls",
        "instance": {
            "view": "sap/viz/chart/views/XYYChartView",
            "renderType": "horizontal_stacked_combination",
            "family": "xyy",
            "name": "IDS_DUALHORIZONTALSTACKEDCOMBINATIONCHART",
            "vender": "sap.viz",
            "bindings": "sap/viz/chart/metadata/bindings/XYYCombinationBindings"
        },
        "customProperties": {
            "resources": [
                {
                    "key": "sap.viz.api.env.Template.loadPaths",
                    "path": "./resources/chart/templates"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/chart/langs"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/framework/langs"
                }
            ]
        }
    },
    {
        "id": "info/trellis_bullet",
        "provide": "sap.viz.impls",
        "instance": {
            "view": "sap/viz/chart/views/BulletChartView",
            "renderType": "bullet",
            "family": "bullet",
            "name": "IDS_TRELLISBULLETCHART",
            "vender": "sap.viz",
            "bindings": "sap/viz/chart/metadata/bindings/BulletBindings"
        },
        "customProperties": {
            "resources": [
                {
                    "key": "sap.viz.api.env.Template.loadPaths",
                    "path": "./resources/chart/templates"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/chart/langs"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/framework/langs"
                }
            ]
        }
    },
    {
        "id": "info/trellis_vertical_bullet",
        "provide": "sap.viz.impls",
        "instance": {
            "view": "sap/viz/chart/views/BulletChartView",
            "renderType": "vertical_bullet",
            "family": "bullet",
            "name": "IDS_TRELLISVERTICALBULLETCHART",
            "vender": "sap.viz",
            "bindings": "sap/viz/chart/metadata/bindings/BulletBindings"
        },
        "customProperties": {
            "resources": [
                {
                    "key": "sap.viz.api.env.Template.loadPaths",
                    "path": "./resources/chart/templates"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/chart/langs"
                },
                {
                    "key": "sap.viz.api.env.Language.loadPaths",
                    "path": "./resources/framework/langs"
                }
            ]
        }
    }
]);
if(define && define.__exportNS){
    define = define.__exportNS;
}
try {
    var ChartViewRegistry = require("sap/viz/framework/core/ChartViewRegistry");
    
    if (ChartViewRegistry && ChartViewRegistry.registerAll) {
        ChartViewRegistry.registerAll();
    }
} catch(e) {}

(function(global){
    var sap = global.sap;
    var root = sap && sap.viz;
    if(root){
        global.__sap_v3 = {};
        for(var i in root){
            if(i==='api'||i==='extapi'){
                if(jQuery && jQuery.extend){
                    global.__sap_v3[i] = jQuery.extend(true,{},root[i]);
                }else{
                    global.__sap_v3[i] = root[i];
                }
                
            }else{
                global.__sap_v3[i] = root[i];
            }
        }
        global.__sap_v3.extapi.env.template._queue = root.extapi.env.template._queue;
        global.__sap_v3.extapi.env.language._queue = root.extapi.env.language._queue;
        if(global.__sap_metadata){
            sap.viz.api.metadata = global.__sap_metadata;
        }
    }
})(this);

(function(global){
    var root = sap.viz;
    var v2 = global.__sap_v2;
    var v3 = global.__sap_v3;
    if(v2 && v3){

        root.api = jQuery.extend(true, {}, v2.api, v3.api);
        root.extapi = jQuery.extend(true, {}, v2.extapi, v3.extapi);
        
        root.v2 = v2;
        root.v3 = v3;
        root.extapi.manifest._queue = v2.extapi.manifest._queue;
        root.extapi.env.template._queue = v3.extapi.env.template._queue;
        root.extapi.env.language._queue = v3.extapi.env.language._queue;
        root.extapi.Flow = v2.extapi.Flow;
        root.api.data.CrosstableDataset = v2.api.data.CrosstableDataset;
        root.api.data.FlatTableDataset = v2.api.data.FlatTableDataset;
        if(v2.extapi.env.Resource && v2.extapi.env.Resource.path){
            var resourcePath = v2.extapi.env.Resource.path();
            for(var i in resourcePath){
                v3.extapi.env.Resource.path(i, resourcePath[i]);
            }           
        }

        if(v2.api.env.Format && v2.api.env.Format.numericFormatter){
            var formatter = v2.api.env.Format.numericFormatter();
                v3.api.env.Format.numericFormatter(formatter);          
        }
        
        if(v2.api.env.Format && v2.api.env.Format.useDefaultFormatter){
            var useDefaultFormatter = v2.api.env.Format.useDefaultFormatter();
                v3.api.env.Format.useDefaultFormatter(useDefaultFormatter);          
        }

        root.api.core.createViz = function (param) {
            var version = param.type.indexOf('info/') === 0 ? 'v3' : 'v2';
            return root[version].api.core.createViz(param);
        };
        root.api.core.loadViz = function (vizJSON, container) {
            var chartJSON = JSON.parse(JSON.stringify(vizJSON));
            var version = chartJSON.type.indexOf('info/') === 0 ? 'v3' : 'v2';
            return root[version].api.core.loadViz(vizJSON, container);
        };

        root.api.env.Language.set = function(lang, callback){
            var flag = 0;
            var cb = function(){
                ++flag;
                if(flag === 2 && callback){
                    callback.apply(null, arguments);
                }
            };
            root.v2.api.env.Language.set(lang, cb);
            root.v3.api.env.Language.set(lang, cb);
        };

        root.api.env.Locale.set = function(value, callback){
            var flag = 0;
            var cb = function(){
                ++flag;
                if(flag === 2 && callback){
                    callback.apply(null, arguments);
                }
            };
            root.v2.api.env.Locale.set(value, cb);
            root.v3.api.env.Locale.set(value, cb);
        };

        root.api.env.Format.numericFormatter = function(value){
            root.v2.api.env.Format.numericFormatter(value);
            root.v3.api.env.Format.numericFormatter(value);
        };

        root.api.env.Format.useDefaultFormatter = function(value){
            root.v2.api.env.Format.useDefaultFormatter(value);
            root.v3.api.env.Format.useDefaultFormatter(value);
        };

        root.api.env.Resource.path = function(id, path){
            root.v2.api.env.Resource.path.apply(root.v2.api.env.Resource, arguments);
            return root.v3.api.env.Resource.path.apply(root.v3.api.env.Resource, arguments);
        };

        root.api.env.Template.set = function(value, callback){
            var flag = 0;
            var cb = function(){
                ++flag;
                if(flag === 2 && callback){
                    callback.apply(null, arguments);
                }
            };
            root.v2.api.env.Template.set(value, cb);
            root.v3.api.env.Template.set(value, cb);
        };

        root.extapi.env.Language.register = function(v){
            root.v2.extapi.env.Language.register(v);
            root.v3.extapi.env.Language.register(v);
        };
        root.extapi.env.Language.get = function(){
            root.v2.extapi.env.Language.get();
            return root.v3.extapi.env.Language.get();
        };
        root.extapi.env.Language.addListener = function(v) {
            root.v2.extapi.env.Language.addListener(v);
            return root.v3.extapi.env.Language.addListener(v);
        };
        root.extapi.env.Language.removeListener = function(v) {
            root.v2.extapi.env.Language.removeListener(v);
            return root.v3.extapi.env.Language.removeListener(v);
        };
        root.extapi.env.Language.getErrorMessage = function(v) {
            root.v2.extapi.env.Language.getErrorMessage(v);
            return root.v3.extapi.env.Language.getErrorMessage(v);
        };
        root.extapi.env.Language.getResourceString = function(v) {
            root.v2.extapi.env.Language.getResourceString(v);
            return root.v3.extapi.env.Language.getResourceString(v);
        };
        root.extapi.env.Locale.get = function() {
            root.v2.extapi.env.Locale.get();
            return root.v3.extapi.env.Locale.get();
        };
        root.extapi.env.Locale.addListener = function(v) {
            root.v2.extapi.env.Locale.addListener(v);
            return root.v3.extapi.env.Locale.addListener(v);
        };
        root.extapi.env.Locale.removeListener = function(v) {
            root.v2.extapi.env.Locale.removeListener(v);
            return root.v3.extapi.env.Locale.removeListener(v);
        };
        root.extapi.env.Template.get = function() {
            root.v2.extapi.env.Template.get();
            return root.v3.extapi.env.Template.get();
        };
        root.extapi.env.Template.current = function() {
            root.v2.extapi.env.Template.current();
            return root.v3.extapi.env.Template.current();
        };
        root.extapi.env.Template.addListener = function(v) {
            root.v2.extapi.env.Template.addListener(v);
            return root.v3.extapi.env.Template.addListener(v);
        };
        root.extapi.env.Template.register = function(v){
            root.v2.extapi.env.Template.register(v);
            root.v3.extapi.env.Template.register(v);
        };        
        root.api.env.Template.addListener = function (v) {
            root.v2.api.env.Template.addListener(v);
            root.v3.api.env.Template.addListener(v);
        };
        root.api.env.Template.removeListener = function (v) {
            root.v2.api.env.Template.removeListener(v);
            root.v3.api.env.Template.removeListener(v);
        };
        root.extapi.env.Template.removeListener = function(v) {
            root.v2.extapi.env.Template.removeListener(v);
            return root.v3.extapi.env.Template.removeListener(v);
        };
        root.extapi.core.registerBundle = function(v){
            root.v2.extapi.core.registerBundle(v);
            return root.v3.extapi.core.registerBundle(v);
        };
    }
})(this);
if (window.__sap_viz_internal_requirejs_nextTick__ !== undefined) {
    if (requirejs && requirejs.s && requirejs.s.contexts && requirejs.s.contexts._) {
        requirejs.s.contexts._.nextTick = window.__sap_viz_internal_requirejs_nextTick__;
        if (requirejs.s.contexts._.definedTmp) {
            for (var i in requirejs.s.contexts._.defined) {
                if (requirejs.s.contexts._.defined.hasOwnProperty(i) && requirejs.s.contexts._.definedTmp.hasOwnProperty(i)) {
                    requirejs.s.contexts._.defined[i + '/v3'] = requirejs.s.contexts._.defined[i];
                    delete requirejs.s.contexts._.defined[i];
                }
            }
            for (var i in requirejs.s.contexts._.definedTmp) {
                if (requirejs.s.contexts._.definedTmp.hasOwnProperty(i)) {
                    requirejs.s.contexts._.defined[i] = requirejs.s.contexts._.definedTmp[i];
                }
            }
            requirejs.s.contexts._.definedTmp = undefined;
        }
    }
    window.__sap_viz_internal_requirejs_nextTick__ = undefined;
}if(!sap.viz.api){
	sap.viz.api = {};
}
if(!sap.viz.extapi){
	sap.viz.extapi = {};
}
Object.defineProperty(sap.viz.api, 'VERSION', { value: '5.0.3', writable: false });
Object.defineProperty(sap.viz.extapi, 'VERSION', { value: '5.0.3', writable: false });