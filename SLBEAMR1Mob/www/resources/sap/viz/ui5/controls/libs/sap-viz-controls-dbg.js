/* SAP CVOM 4.0 Â© <2012-2014> SAP SE. All rights reserved. Build Version 5.0.2-SNAPSHOT */
/* Included Components: common,runtime,services,annotation,annotationcontrol,chart,contextmenu,custombutton,frame,filterbar0,playcontrol,popover,dedicatedlegend */
if (requirejs && requirejs.s && requirejs.s.contexts && requirejs.s.contexts._) {
    window.__sap_viz_internal_requirejs_nextTick__ = requirejs.s.contexts._.nextTick;
    requirejs.s.contexts._.nextTick = function(fn) {fn();};
}

define('sap/viz/controls/Version',[],function() {
    /** sap.viz.controls.Version
     * @class sap.viz.controls.Version
     */
    var Version = {};

    /**
     * Constant, the current version of sap.viz.controls.
     * @member sap.viz.controls.Version.VERSION
     * @return {String} read-only version string
     */
    Version.VERSION = '5.0.2-SNAPSHOT';
    //Version.BuildVersion = '5.0.2-SNAPSHOT';

    return Version;
});

define('sap/viz/controls/common/config/GlobalConfig',[],function() {
    
    /* workaround to make GlobalConfig to matain only one instance in global namesapce */
    function findInGlobal (names, scope) {
        if (names.length === 0) { return; }
        if (names.length === 1) { return scope[ names[0] ]; }

        var propName = names.shift();
        if ( scope[propName] != null ) { return findInGlobal(names, scope[propName]); }
        return;
    }

    var mod = findInGlobal("sap/viz/controls/common/config/GlobalConfig".split("/"), this);
    if (mod) { return mod; }

    /**
     * @class sap.viz.controls.common.config.GlobalConfig
     */
    var GlobalConfig = {};

    GlobalConfig.DEFAULT_UICONFIG_TYPE_BUILDER = 'uiconfig-builder';
    GlobalConfig.DEFAULT_UICONFIG_TYPE_CHART = 'uiconfig-chart';
    GlobalConfig.DEFAULT_UICONFIG_TYPE_FEEDING = 'uiconfig-feeding';
    GlobalConfig.DEFAULT_UICONFIG_TYPE_FRAME = 'uiconfig-frame';
    GlobalConfig.DEFAULT_UICONFIG_TYPE_SWITCHBAR = 'uiconfig-switchbar';
    GlobalConfig.DEFAULT_UICONFIG_TYPE_FILTERBAR0 = 'uiconfig-filterbar0';
    GlobalConfig.DEFAULT_UICONFIG_TYPE_FILTERBAR = 'uiconfig-filterbar';
    GlobalConfig.DEFAULT_UICONFIG_TYPE_CONTEXTMENU = 'uiconfig-contextmenu';
    GlobalConfig.DEFAULT_UICONFIG_TYPE_CUSTOMBUTTON = 'uiconfig-custombutton';
    GlobalConfig.DEFAULT_UICONFIG_TYPE_ANNOTATION = 'uiconfig-annotation';
    GlobalConfig.DEFAULT_UICONFIG_TYPE_ANNOTATIONCONTROL = 'uiconfig-annotationcontrol';
    GlobalConfig.DEFAULT_UICONFIG_TYPE_MAPBUILDER = 'uiconfig-mapbuilder';
    GlobalConfig.DEFAULT_UICONFIG_TYPE_PROPERTYEDITOR = 'uiconfig-propertyeditor';

    var _assetsRoot = "../src";

    var _isAssetsRootSet = false;
    
    var _uiConfigs = {};
    
    var defaultAssetsRootFromExtensionFramework = function() {
        if (sap && sap.bi && sap.bi.framework && sap.bi.framework.getServiceMetadata !== undefined) {
            // sap.viz.controls.common.config is the predefined component id in viz controls' aio-bundle.js
            var serviceMetadata;
            try {
                serviceMetadata = sap.bi.framework.getServiceMetadata("sap.viz.controls.common.config");
            } catch (e) {
            }
            if (serviceMetadata && serviceMetadata.customProperties.defaultAssetsRoot) {
                return serviceMetadata.framework.bundleUrl + "/" + serviceMetadata.customProperties.defaultAssetsRoot;
            }
        }
        return undefined;
    };
    
    /**
     * register UI configuration class.
     * param {String} id
     * param {ConfigClass} uiConfig
     */
    GlobalConfig.registerUIConfig = function(id, uiConfig){
        if (id != null) {
            _uiConfigs[id] = uiConfig;
        }
    };

    /**
     * Get default UI configuration.
     *
     * @method sap.viz.controls.common.config.GlobalConfig.defaultUIConfig
     * @param {String} [type]
     *                  optional, return UI configuration of specified type, if not assigned, return all the UI
     * configurations.
     * @return {JSON}
     *              all the UI configurations:
     *              {
     *                  'uiconfig-builder': {},
     *                  'uiconfig-chart': {},
     *                  ...
     *              }
     */
    GlobalConfig.defaultUIConfig = function(type) {
        var uiConfigs = {};
      
        if (type != null && _uiConfigs[type] != null && _uiConfigs[type].instance) {
            return _uiConfigs[type].instance();
        }

        for (var i in _uiConfigs) {
            if ( i && _uiConfigs[i] && _uiConfigs[i].instance) {
                uiConfigs[i] = _uiConfigs[i].instance();    
            }
        }
        
        return uiConfigs;
    };
    /**
     * Get/Set default assets path.
     * @method sap.viz.controls.common.config.GlobalConfig.defaultAssetsRoot
     * @param {String} path
     *                  By default, the path is './', which is the same folder of sap.viz.controls.js
     */
    GlobalConfig.defaultAssetsRoot = function(path) {
        if (arguments.length > 0) {
            _assetsRoot = path;
            _isAssetsRootSet = true;
            //Set default resource path if root path changed.
            GlobalConfig._setResourcePath();
        } else {
            if (_isAssetsRootSet) {
                return _assetsRoot;
            }
            var assetsRootFromExt = defaultAssetsRootFromExtensionFramework();
            if (assetsRootFromExt) {
                return assetsRootFromExt;
            }
            return _assetsRoot;
        }
    };

    /**
     * Set resource path.
     */
    GlobalConfig._setResourcePath = function() {
        var pathArray = [GlobalConfig.defaultAssetsRoot() + "/locale/"];

        var currentPaths = sap.viz.api.env.Resource.path("sap.viz.api.env.Language.loadPaths");
        var newPaths = currentPaths ? pathArray.concat(currentPaths) : pathArray;
        sap.viz.api.env.Resource.path("sap.viz.api.env.Language.loadPaths", newPaths);
    };

    return GlobalConfig;
});

define('sap/viz/controls/common/constants/ChartConst',[],function() {
     /**
     * Chart Types.
     * @class sap.viz.controls.common.constants.ChartConst
     */
    var ChartConst = {};

    // Chart types
    /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_COLUMN
     * @static
     */
    ChartConst.TYPE_COLUMN = "info/column";

    /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_STACKED_COLUMN
     * @static
     */
    ChartConst.TYPE_STACKED_COLUMN = "info/stacked_column";

    /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_DUAL_COLUMN
     * @static
     */
    ChartConst.TYPE_DUAL_COLUMN = "info/dual_column";

    /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_3D_COLUMN
     * @static
     */
    ChartConst.TYPE_3D_COLUMN = "viz/3d_column";


    /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_LINE
     * @static
     */
    ChartConst.TYPE_LINE = "info/line";

     /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_AREA
     * @static
     */
    ChartConst.TYPE_AREA = "viz/area";

     /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_COMBINATION
     * @static
     */
    ChartConst.TYPE_COMBINATION = "info/combination";

     /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_DUAL_LINE
     * @static
     */
    ChartConst.TYPE_DUAL_LINE = "info/dual_line";

     /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_DUAL_COMBINATION
     * @static
     */
    ChartConst.TYPE_DUAL_COMBINATION = "viz/dual_combination";


    /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_PIE
     * @static
     */
    ChartConst.TYPE_PIE = "info/pie";

     /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_DONUT
     * @static
     */
    ChartConst.TYPE_DONUT = "info/donut";

     /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_PIE_WITH_DEPTH
     * @static
     */
    ChartConst.TYPE_PIE_WITH_DEPTH = "viz/pie_with_depth";

    /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_GEO_BUBBLE
     * @static
     */
    ChartConst.TYPE_GEO_BUBBLE = "viz/geobubble";
     /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_GEO_CHOROPLETH
     * @static
     */
    ChartConst.TYPE_GEO_CHOROPLETH = "viz/choropleth";
     /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_GEO_PIE
     * @static
     */
    ChartConst.TYPE_GEO_PIE = "viz/geopie";
     /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_GEO_MAP 
     * @static
     */
    ChartConst.TYPE_GEO_MAP = 'viz/geomap';

     /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_SCATTER
     * @static
     */
    ChartConst.TYPE_SCATTER = "info/scatter";

     /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_BUBBLE
     * @static
     */
    ChartConst.TYPE_BUBBLE = "info/bubble";

     /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_SCATTER_MATRIX
     * @static
     */
    ChartConst.TYPE_SCATTER_MATRIX = "viz/scatter_matrix";

     /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_HEATMAP
     * @static
     */
    ChartConst.TYPE_HEATMAP = "viz/heatmap";

     /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_TREEMAP
     * @static
     */
    ChartConst.TYPE_TREEMAP = "info/treemap";


     /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_TABLE
     * @static
     */
    ChartConst.TYPE_TABLE = "viz/ext/table";

     
    ChartConst.TYPE_CROSSTAB = "viz/ext/crosstab";


     /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_RADAR
     * @static
     */
    ChartConst.TYPE_RADAR = "viz/radar";

     /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_BOXPLOT
     * @static
     */
    ChartConst.TYPE_BOXPLOT = "viz/boxplot";

     /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_WATERFALL
     * @static
     */
    ChartConst.TYPE_WATERFALL = "viz/waterfall";

     /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_TAG_CLOUD
     * @static
     */
    ChartConst.TYPE_TAG_CLOUD = "viz/tagcloud";

     /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_TREE
     * @static
     */
    ChartConst.TYPE_TREE = "viz/tree";

     /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_NETWORK
     * @static
     */
    ChartConst.TYPE_NETWORK = "viz/network";

     /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_FUNNEL
     * @static
     */
    ChartConst.TYPE_FUNNEL = 'viz/ext/pa/funnel';
     /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_PC
     * @static
     */
    ChartConst.TYPE_PC = 'viz/ext/pa/pc';
    /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_NUMBER
     * @static
     */
    ChartConst.TYPE_NUMBER = 'viz/number';

    // Chart direction
    ChartConst.DIRECTION_HORIZONTAL = "horizontal";
    ChartConst.DIRECTION_VERTICAL = "vertical";

    // Chart stacking
    ChartConst.STACKING_FULL = "full";
    ChartConst.STACKING_NORMAL = "normal";

    // Peer charts
    /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_BAR
     * @static
     */
    ChartConst.TYPE_BAR = "info/bar";

    /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_STACKED_BAR
     * @static
     */
    ChartConst.TYPE_STACKED_BAR = "info/stacked_bar";
    ChartConst.TYPE_100_STACKED_COLUMN = "info/100_stacked_column";
    ChartConst.TYPE_100_STACKED_BAR = "info/100_stacked_bar";

    /**
     * @memberof sap.viz.controls.common.constants.ChartConst
     * @member TYPE_DUAL_BAR
     * @static
     */
    ChartConst.TYPE_DUAL_BAR = "info/dual_bar";

    ChartConst.TYPE_3D_BAR = "viz/3d_bar";

    ChartConst.TYPE_HORIZONTAL_LINE = "info/horizontal_line";

    ChartConst.TYPE_HORIZONTAL_AREA = "viz/horizontal_area";
    ChartConst.TYPE_100_AREA = "viz/100_area";
    ChartConst.TYPE_100_HORIZONTAL_AREA = "viz/100_horizontal_area";

    ChartConst.TYPE_HORIZONTAL_COMBINATION = "info/horizontal_combination";

    ChartConst.TYPE_DUAL_HORIZONTAL_LINE = "info/dual_horizontal_line";

    ChartConst.TYPE_DUAL_HORIZONTAL_COMBINATION = "viz/dual_horizontal_combination";

    ChartConst.TYPE_HORIZONTAL_BOXPLOT = "viz/horizontal_boxplot";

    ChartConst.TYPE_HORIZONTAL_WATERFALL = "viz/horizontal_waterfall";

    //Trellis chart
    ChartConst.TYPE_TRELLIS_BAR = "info/trellis_bar";
    ChartConst.TYPE_TRELLIS_LINE = "info/trellis_line";
    ChartConst.TYPE_TRELLIS_HORIZONTAL_LINE = "info/trellis_horizontal_line"; 
    ChartConst.TYPE_TRELLIS_COLUMN = "info/trellis_column";
    ChartConst.TYPE_TRELLIS_DUAL_COLUMN = "info/trellis_dual_column";
    ChartConst.TYPE_TRELLIS_DUAL_LINE = "info/trellis_dual_line";
    ChartConst.TYPE_TRELLIS_DUAL_HORIZONTAL_LINE = "info/trellis_dual_horizontal_line";
    ChartConst.TYPE_TRELLIS_DUAL_BAR = "info/trellis_dual_bar";
    ChartConst.TYPE_TRELLIS_SCATTER = "info/trellis_scatter";
    ChartConst.TYPE_TRELLIS_BUBBLE = "info/trellis_bubble";
    ChartConst.TYPE_TRELLIS_100_STACKED_COLUMN = "info/trellis_100_stacked_column";
    ChartConst.TYPE_TRELLIS_STACKED_COLUMN = "info/trellis_stacked_column";
    ChartConst.TYPE_TRELLIS_STACKED_BAR = "info/trellis_stacked_bar";
    ChartConst.TYPE_TRELLIS_100_STACKED_BAR = "info/trellis_100_stacked_bar";
    ChartConst.TYPE_TRELLIS_COMBINATION = "info/trellis_combination";
    ChartConst.TYPE_TRELLIS_HORIZONTAL_COMBINATION = "info/trellis_horizontal_combination";
    ChartConst.TYPE_TRELLIS_PIE = "info/trellis_pie";
    ChartConst.TYPE_TRELLIS_DONUT = "info/trellis_donut";
    
    

    // Chart feeding
    ChartConst.FEEDING_PRIMARY_VALUES = "primaryValues";
    ChartConst.FEEDING_SECONDARY_VALUES = "secondaryValues";
    ChartConst.FEEDING_AXIS_LABELS = "axisLabels";
    
    ChartConst.MEASURE_NAMES_DIMENSION = "measureNamesDimension";
    ChartConst.MEASURE_VALUES_GROUP = "measureValuesGroup";
    ChartConst.ANALYSIS_AXIS = "analysisAxis";
    
    // infoChart feeding
    ChartConst.VALUE_AXIS = "valueAxis";
    ChartConst.SECOND_VALUE_AXIS = "valueAxis2";
    ChartConst.CATEGORY_AXIS = "categoryAxis";
    
    
    // Chart axis
    ChartConst.AXIS_XAXIS = "xAxis";
    ChartConst.AXIS_XAXIS1 = "xAxis1";
    ChartConst.AXIS_XAXIS2 = "xAxis2";
    ChartConst.AXIS_YAXIS = "yAxis";
    ChartConst.AXIS_YAXIS1 = "yAxis1";
    ChartConst.AXIS_YAXIS2 = "yAxis2";
    ChartConst.COLOR = "color";
    ChartConst.PLAYFIELD = "playField";

    return ChartConst;
});

define('sap/viz/controls/common/constants/DatasetTypeConst',[],function() {
    /**
     * Dataset Types.
     * @class sap.viz.controls.common.constants.DatasetTypeConst
     */
    var DatasetTypeConst = {};    
    /**
     * @memberof sap.viz.controls.common.constants.DatasetTypeConst
     * @member FLAT_TABLE
     * @static
     */
    DatasetTypeConst.FLAT_TABLE ='FlatTableDataset';
    /**
     * @memberof sap.viz.controls.common.constants.DatasetTypeConst
     * @member CROSS_TABLE
     * @static
     */
    DatasetTypeConst.CROSS_TABLE ='CrossTableDataset';
    /**
     * @memberof sap.viz.controls.common.constants.DatasetTypeConst
     * @member RAW
     * @static
     */
    DatasetTypeConst.RAW ='RawDataset';
    /**
     * @memberof sap.viz.controls.common.constants.DatasetTypeConst
     * @member ARRAY_FLAT_TABLE
     * @static
     */
    DatasetTypeConst.ARRAY_FLAT_TABLE = 'ArrayOfFlatTableDataset';

    return DatasetTypeConst;
});

define('sap/viz/controls/common/constants/FilterEventConst',[],function() {
    /**
     * FilterBar Events.
     * @class sap.viz.controls.common.constants.FilterEventConst
     */
    var FilterEventConst = {};    
    
    /**
     * When user clicks FilterButton and pick an AnalysisObject on the popup FeedList, FilterBar will notify host application to create a new filter item
     * @memberof sap.viz.controls.common.constants.FilterEventConst
     * @member REQUEST_ADD_FILTER
     * @static
     */
    FilterEventConst.REQUEST_ADD_FILTER = "requestAddFilter";

    /**
     * When user remove a FilterItem through FilterBar or FilterRenderer UI
     * @memberof sap.viz.controls.common.constants.FilterEventConst
     * @member REQUEST_REMOVE_FILTER
     * @static
     */
    FilterEventConst.REQUEST_REMOVE_FILTER = "requestRemoveFilter";

    /**
     * When user wants to edit a FilterItem through FilterBar or FilterRenderer UI via double click or long tap
     * @memberof sap.viz.controls.common.constants.FilterEventConst
     * @member REQUEST_EDIT_FILTER
     * @static
     */
    FilterEventConst.REQUEST_EDIT_FILTER = "requestEditFilter";

    /**
     * When filter bar height is changed by add or remove filterItems.
     * @memberof sap.viz.controls.common.constants.FilterEventConst
     * @member SIZE_CHANGED
     * @static
     */
    FilterEventConst.SIZE_CHANGED = "sizeChanged";

    /**
     * When user clicks clear all icon.
     * @memberof sap.viz.controls.common.constants.FilterEventConst
     * @member CLEAR_FILTERS
     * @static
     */
    FilterEventConst.CLEAR_FILTERS = "clearFilters";

    return FilterEventConst;
});

define('sap/viz/controls/common/utils/Utils',[],function() {

    var utils = {};

    // static private in global to make sure id is not duplicated
    var _vc_util_GEN_UID = 0;

    /**
     * return the global uid for HTML elements in the same window scope.
     *
     */
    utils.genUID = function() {
        if (!_vc_util_GEN_UID) {
            _vc_util_GEN_UID = 0;
        }
        return "vcgen_" + (_vc_util_GEN_UID++);
    };
    var class2type = {
        '[object Boolean]' : 'boolean',
        '[object Number]' : 'number',
        '[object String]' : 'string',
        '[object Function]' : 'function',
        '[object Array]' : 'array',
        '[object Date]' : 'date',
        '[object RegExp]' : 'regexp',
        '[object Object]' : 'object'
    };
    
    utils.encodingToken = "_encoded_";
    
    /**
     * apply function when object property is function or else set property value
     *
     */
    utils.applyObjectProperty = function(object, propertyName, propertyValue) {
        try {
            if (utils.isFunction(object[propertyName])) {
                object[propertyName](propertyValue);
            } else {
                object[propertyName] = propertyValue;
            }
        } catch(e) {
            //if (console) {
            //    console.log(e);
            //}
        }

    };
    /**
     * apply properties to a item
     *
     * @name utils.utils.SpreadSheetBindingManager.applyProperties
     * @memberOf Function.prototype
     * @function
     * @param {Object}
     *            the item to apply properties
     * @param {Array}
     *            the properties array
     * */
    utils.applyProperties = function(item, properties/*Array*/) {
        if (properties) {// apply the passed properties
            var len = properties.length;
            for (var i = 0; i < len; i++) {
                var property = properties[i];
                if (property) {
                    utils.applyObjectProperty(item, property.name, property.value);
                }
            }
        }
    };
    /**
     * get object property value
     * @param {object} object
     * @param {String} propertyName
     */
    utils.getObjectProperty = function(object, propertyName) {
        try {
            if (utils.isFunction(object[propertyName])) {
                return object[propertyName]();
            } else if (object.hasOwnProperty(propertyName)) {
                return object[propertyName];
            }

        } catch(e) {
            //if (console) {
            //    console.log(e);
            //}
        }
    };
    /**
     * judge object type
     * @param {object}
     */
    utils.type = function(obj) {
        return obj == null ? String(obj) : class2type[Object.prototype.toString.call(obj)] || "object";
    };
    /**
     * judge object type is or not Function
     * @param {object}
     */
    utils.isFunction = function(obj) {
        return utils.type(obj) === "function";
    };
    /**
     * judge object type is or not Boolean
     * @param {object}
     */
    utils.isBoolean = function(obj) {
        return utils.type(obj) === "boolean";
    };
    /**
     * judge object type is or not String
     * @param {object}
     */
    utils.isString = function(obj) {
        return utils.type(obj) === "string";
    };
    /**
     * judge object type is or not Array
     * @param {object}
     */
    utils.isArray = function(obj) {
        return utils.type(obj) === "array";
    };
    /**
     * judge object type is or not Number
     * @param {object}
     */
    utils.isNumber = function(obj) {
        return utils.type(obj) === "number";
    };
    /**
     * judge object type is or not RegExp
     * @param {object}
     */
    utils.isRegExp = function(obj) {
        return utils.type(obj) === "regexp";
    };
    /**
     * Sort an object Array.
     *
     * @param {Array} arr The object Array to sort.
     * @param {String} prop The object field for the sort.
     * @param {Boolean} [desc] Sort by ASC or DESC, by default is ASC.
     *
     */
    utils.sortArrayOn = function(arr, prop, desc) {
        if (utils.isArray(arr) && utils.isString(prop)) {
            arr.sort(function(a, b) {
                return desc ? (a[prop] < b[prop]) - (a[prop] > b[prop]) : (a[prop] > b[prop]) - (a[prop] < b[prop]);
            });
        }
    };
    /**
     * An empty function doing nothing.
     */
    utils.noop = function() {
    };
    /**
     * Delay to call the function
     *
     * @param {Object} handler
     * @param {Object} wait
     */
    utils.delay = function(handler, wait) {
        return setTimeout(function() {
            return handler.apply(null);
        }, wait);
    };
    /**
     * Delay 1ms to call the function
     *
     * @param {Object} handler
     * @param {Object} wait
     */
    utils.defer = function(handler) {
        return utils.delay.call(null, handler, 1);
    };
    /**
     * get event positon
     * @param {Object} event
     */
    utils.getEventPosition = function(event) {
        var pageX = null;
        var pageY = null;
        if (event.originalEvent && event.originalEvent.targetTouches && event.originalEvent.targetTouches.length !== 0) {
            pageX = event.originalEvent.targetTouches[0].pageX;
            pageY = event.originalEvent.targetTouches[0].pageY;
        } else {
            pageX = event.pageX;
            pageY = event.pageY;
        }
        var position = {};
        position.pageX = pageX;
        position.pageY = pageY;
        return position;

    };
    function clone (obj) {
        if (obj === null || typeof (obj) !== 'object') {
            return obj;
        }
        var o = obj.constructor === Array ? [] : {};
        for (var i in obj) {
            if (obj.hasOwnProperty(i)) {
                o[i] = clone(obj[i]);
            }
        }
        return o;
    }
    /**
     * clone object
     * @param {Object} obj
     */
    utils.clone = clone;

    utils.toJSON = function(instance, processor) {
        if (utils.isArray(instance)) {
            var result = [];
            for (var i = 0; i < instance.length; i++) {
                result.push(processor.call(null, instance[i]));
            }
            return result;
        } else if (instance) {
            return processor.call(null, instance);
        } else {
            return null;
        }
    };
    utils.fromJSON = function(json, processor) {
        if (utils.isArray(json)) {
            var result = [];
            for (var i = 0; i < json.length; i++) {
                result.push(processor.call(null, json[i]));
            }
            return result;
        } else if (json) {
            return processor.call(null, json);
        } else {
            return undefined;
        }
    };
    utils.updateJSON = function(srcJSON, newJSON) {
        var retJSON = utils.clone(srcJSON);
        retJSON = retJSON || {};
        var _update = function(srcObj, newObj) {
            for (var pro in newObj) {
                if (newObj.hasOwnProperty(pro)) {
                    var newVal = newObj[pro];
                    if (newVal !== undefined) {
                        if ( typeof (newVal) !== "object" || newVal instanceof (Array) || newVal === null) {
                            srcObj[pro] = newVal;
                        } else {
                            var srcVal = srcObj[pro];
                            if (!srcVal) {
                                if (newVal === null || newVal === undefined) {
                                    srcVal = newVal;
                                } else {
                                    srcVal = srcObj[pro] = {};
                                }
                            }
                            _update(srcVal, newVal);
                        }
                    }
                }
            }
        };
        _update(retJSON, newJSON);
        return retJSON;
    };

    utils.substitute = function(str, rest) {
        if (!str) { return ''; }

        for (var i = 1; i < arguments.length; i++) {
            str = str.replace(new RegExp("\\{" + (i - 1) + "\\}", "g"), arguments[i]);
        }

        return str;
    };

    utils.invert = function(object) {
        var result = {};
        for (var key in object) {
            var value = object[key];
            result[value] = key;
        }
        return result;
    };


    /**
     * updates an id with a coding delimeter and a suffix
     * @param {String} id
     * @param {String} suffix
     */
    utils.encode = function(id, suffix) {
        // check to see if the encoding token already exists as we do not want to 
        // encode multiple times
        if( id.indexOf( utils.encodingToken ) > -1 ) {
            return id;
        } else {
            var encodedId = id + utils.encodingToken + suffix;
            return encodedId;
        }
    };
    
    /**
     * decodes an id that has been encoded using utils.encode
     * @param {String} idToDecode
     * @return {Array.<String>} First entry will be decoded id, second entry will be suffix.used to encode
     * 
     * If coding delimeter is not present in the idToDecode then only one entry (idToDecode) will exist in the returned array.
     */
    utils.decode = function(idToDecode) {
        var result = idToDecode.split(utils.encodingToken);
        return result;
    };

    utils.deepEqual = function(source, target) {
        if ( typeof source === 'object' && typeof target === 'object' && utils.isExist(source) && utils.isExist(target)) {
            var key = null;
            for (key in source) {
                if (source.hasOwnProperty(key)) {
                    if (!target.hasOwnProperty(key)) {
                        return false;
                    } else if (!utils.deepEqual(source[key], target[key])) {
                        return false;
                    }
                }
            }
            for (key in target) {
                if (target.hasOwnProperty(key)) {
                    if (!source.hasOwnProperty(key)) {
                        return false;
                    }
                }
            }
            return true;
        } else {
            return source === target;
        }
    };
    
    utils.hasCommonKeyValue = function(source, target) {
        if ( typeof source === 'object' && typeof target === 'object') {
            var key = null;
            for (key in source) {
                if (source.hasOwnProperty(key)) {
                    if (target.hasOwnProperty(key) && utils.deepEqual(source[key], target[key])) {
                        return true;
                    }
                }
            }
            return false;
        }
    };

    utils.isExist = function(o) {
        if ((typeof (o) === 'undefined') || (o === null)) {
            return false;
        }
        return true;
    };

    var genGetterSetter = utils.genGetterSetter = function (name) {
        return function (value) {
            if (arguments.length > 0) {
                this[name] = value;
                return this;
            } else {
                return this[name];
            }
        };
    };

    utils.genGetterSetters = function (prototype, names) {
        names.forEach(function (e) {
            prototype[ e.substring(1) ] = genGetterSetter(e);
        });
    };

    utils.currying = function (fn) {
        var carryArgs = Array.prototype.slice.call(arguments, 1);
        return function () {
            return fn.apply(this, carryArgs.concat( Array.prototype.slice.call(arguments) ) );
        };
    };

    utils.getPropValue = function (obj, propPath) {
        if (obj == null) {
            return undefined;
        }
        var path = propPath.split('.'),
            lastPropName = path.pop(),
            i, len, prop = obj;

        for (i = 0, len = path.length; i < len; i++) {
            prop = prop[ path[i] ];
           if ( prop == null) {
                return undefined;
            }
        }
        return prop[ lastPropName ];
    };

    /**
     * set value to obj on propPath, example:
     * setPropValue({}, "a.b.c", 99) -> {a: {b: {c: 99}}}
     * this function overwrite the existing value(s) if value already exists in obj
    */
    utils.setPropValue = function (obj, propPath, value) {
        var path = propPath.split('.'),
            lastPropName = path.pop(),
            propName, type,
            i, len, prop = obj;
        
        for (i = 0, len = path.length; i < len; i++) {
            propName = path[i];
            type = typeof prop[ propName];

            if ( type !== "object" && type !== "function" ) { // if not object or funciton, give a new object
                prop[ propName ] = {};
            }
            prop = prop[ propName ];
        }
        prop[ lastPropName ] = value;
        return obj;
    };

    return utils;
});

define('sap/viz/controls/common/managers/LangManager',[],
    function() {

    var LangManager = function() {
        this.__className = "sap.viz.controls.common.managers.LangManager";
    };

    /**
     * get resoure value
     * @param {Object} name
     */
    LangManager.get = function(name) {
        return sap.viz.framework.common.lang.LangManager.get(name);
    };

    return LangManager;
});

define('sap/viz/controls/common/feeds/AnalyticalType',[],function() {
     /**
     * The AnalysisObject type.
     * @class sap.viz.controls.common.feeds.AnalyticalType
     */
    var AnalyticalType = {};

    AnalyticalType.UNIVERSAL = 'universal';

    /**
     * @memberof sap.viz.controls.common.feeds.AnalyticalType
     * @member MEASURE
     * @static
     */
    AnalyticalType.MEASURE = 'measure';

    /**
     * @memberof sap.viz.controls.common.feeds.AnalyticalType
     * @member DIMENSION
     * @static
     */
    AnalyticalType.DIMENSION = 'dimension';
    
    /**
     * @memberof sap.viz.controls.common.feeds.AnalyticalType
     * @member HIERARCHY
     * @static
     */
    AnalyticalType.HIERARCHY = 'hierarchy';
	// Measure name as dimension
    /**
     * @memberof sap.viz.controls.common.feeds.AnalyticalType
     * @member MND
     * @static
     */
    AnalyticalType.MND = 'mnd';

    AnalyticalType.compatible = function(host, client) {
        if (host === AnalyticalType.UNIVERSAL) {
            return true;
        } else if (host === AnalyticalType.DIMENSION) {
            return client === AnalyticalType.DIMENSION || client === AnalyticalType.HIERARCHY || client === AnalyticalType.MND;
        } else {
            return host === client;
        }
    };

    return AnalyticalType;
});

define('sap/viz/controls/common/utils/JsonUtil',[],function(){
    var JsonUtil = {};
    JsonUtil.AnalysisObjectType = 'sap.viz.controls.common.feeds.AnalysisObject';
    JsonUtil.HierarchyLevelObjectType = 'sap.viz.controls.common.feeds.HierarchyLevelObject';
    JsonUtil.MenuItemType = 'sap.viz.controls.common.views.menu.MenuItem';
    JsonUtil.MenuGroupType = 'sap.viz.controls.common.views.menu.MenuGroup';
    
    JsonUtil._FuncMap = {};
    
    JsonUtil.register = function(type, fromFunc, toFunc){
        var obj = {
            fromFunc:fromFunc,
            toFunc:toFunc
        }
        JsonUtil._FuncMap[type] = obj;
    };
    
    JsonUtil.fromJSON = function(type, json){
        if(JsonUtil._FuncMap[type] && JsonUtil._FuncMap[type].fromFunc)
        {
            return JsonUtil._FuncMap[type].fromFunc(json);
        }else
        {
            return null;
        }
    };
     
    JsonUtil.toJSON = function(type, obj){
        if(JsonUtil._FuncMap[type] && JsonUtil._FuncMap[type].toFunc)
        {
            return JsonUtil._FuncMap[type].toFunc(obj);
        }
        else
        {
            return {};
        }
    };
    
    return JsonUtil;
})
;
define('sap/viz/controls/common/views/menu/MenuGroup',[
// @formatter:off
	'sap/viz/controls/common/utils/Utils',
	'sap/viz/controls/common/utils/JsonUtil'
],
function(utils, JsonUtil) {
// @formatter:on
    /**
     * MenuGroup Class
     *
     * @class sap.viz.controls.common.views.menu.MenuGroup
     *
     * @param {Array<{@link sap.viz.controls.common.views.menu.MenuItem}>} menuItems
     */
    var MenuGroup = function(menuItems) {
        this.__className = "sap.viz.controls.common.views.menu.MenuGroup";
        // {[MenuItem]}
        this._menuItems = menuItems;
    };
    MenuGroup.prototype.menuItems = function() {
        return this._menuItems;
    };
    MenuGroup.prototype.selectedItem = function() {
        for (var i = 0; i < this._menuItems.length; i++) {
            if (this._menuItems[i].selected()) {
                return this._menuItems[i];
            }
        }
        return null;
    };

    MenuGroup.prototype.equal = function(menuGroup) {
        if(menuGroup == null)
        {
            return false;
        }
        var items1 = this.menuItems()||[];
        var items2 = menuGroup.menuItems()||[];
        if(items1.length !== items2.length)
        {
            return false;
        }

        for(var i = 0; i < items1.length; i++) {
            var item1 = items1[i];
            var item2 = items2[i];
            if(!(item1 == null && item2 == null)) {
                if(item1 == null) {
                    return false;
                }
                if(!item1.equal(item2)) {
                    return false;
                }
            }
        }

        return true;
    };

    /**
     * Serialize MenuGroup or MenuGroup array to a JSON object.
     * @method sap.viz.controls.common.views.menu.MenuGroup.toJSON
     * @param {sap.viz.controls.common.views.menu.MenuGroup|Array<{@link sap.viz.controls.common.views.menu.MenuGroup}>} instance
     * @returns {JSON}
     */
    MenuGroup.toJSON = function(instance) {
        return utils.toJSON(instance, function(instance) {
            return {
                'menuItems' : JsonUtil.toJSON(JsonUtil.MenuItemType, instance._menuItems)
            };
        });
    };
    /**
     * Deserialize a JSON object to MenuGroup or MenuGroup array.
     * @method sap.viz.controls.common.views.menu.MenuGroup.fromJSON
     * @param {JSON} json
     * @returns {sap.viz.controls.common.views.menu.MenuGroup|Array<{@link sap.viz.controls.common.views.menu.MenuGroup}>}
     */
    MenuGroup.fromJSON = function(json) {
        return utils.fromJSON(json, function(json) {
            return new MenuGroup(JsonUtil.fromJSON(JsonUtil.MenuItemType, json.menuItems));
        });
    };
    JsonUtil.register(JsonUtil.MenuGroupType, MenuGroup.fromJSON, MenuGroup.toJSON);
    return MenuGroup;
});

define('sap/viz/controls/common/feeds/HierarchyLevelObject',[
// @formatter:off
    'require',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/JsonUtil'],
    function(r, utils, JsonUtil) {
// @formatter:on
    var require = r || require;
    /**
     * HierarchyLevelObject Class
     * @class sap.viz.controls.common.feeds.HierarchyLevelObject
     * @param {String} id
     * @param {String} name
     * @param {sap.viz.controls.common.feeds.AnalysisObject} analysis
     */
    var HierarchyLevelObject = function(id, name, analysis) {
        this.__className = "sap.viz.controls.common.feeds.HierarchyLevelObject";
        this._id = id;
        this._name = name;
        this._analysis = analysis;

        this._selected = false;
    };

    /**
     * Get HierarchyLevelObject id
     * @method sap.viz.controls.common.feeds.HierarchyLevelObject.prototype.id
     * @returns {String}
     */
    HierarchyLevelObject.prototype.id = function() {
        return this._id;
    };

    /**
     * Get HierarchyLevelObject name
     * @method sap.viz.controls.common.feeds.HierarchyLevelObject.prototype.name
     * @returns {String}
     */
    HierarchyLevelObject.prototype.name = function(value) {
        if (arguments.length > 0) {
            this._name = value;
            return this;
        } else {
            return this._name;
        }
    };

    /**
     * Get HierarchyLevelObject analysisObject
     * @method sap.viz.controls.common.feeds.HierarchyLevelObject.prototype.analysis
     * @returns {sap.viz.controls.common.feeds.AnalysisObject}
     */
    HierarchyLevelObject.prototype.analysis = function() {
        return this._analysis;
    };

    /**
     * Get/set HierarchyLevelObject selected flag
     * @method sap.viz.controls.common.feeds.HierarchyLevelObject.prototype.selected
     * @returns {Boolean}
     * @param {Boolean} [value]
     */
    HierarchyLevelObject.prototype.selected = function(value) {
        if (arguments.length > 0) {
            this._selected = value;
            return this;
        } else {
            return this._selected;
        }
    };

    /**
     * Clone a HierarchyLevelObject from the intance.
     * @method sap.viz.controls.common.feeds.HierarchyLevelObject.prototype.clone
     * @return {sap.viz.controls.common.feeds.HierarchyLevelObject}
     */
    HierarchyLevelObject.prototype.clone = function() {
        var analysis = null;
        if (this._analysis) {
            analysis = this._analysis.clone();
        }
        var clone = new HierarchyLevelObject(this._id, this._name, analysis);
        clone.selected(this._selected);
        return clone;
    };

    /**
     * Serialize a HierarchyLevelObject instance to JSON or JSON array
     *
     * @method sap.viz.controls.common.feeds.HierarchyLevelObject.toJSON
     * @param {sap.viz.controls.common.feeds.HierarchyLevelObject | Array<{@link sap.viz.controls.common.feeds.HierarchyLevelObject}>} instance
     * @returns {Object | Array<Object>}
     */
    HierarchyLevelObject.toJSON = function(instance) {
        return utils.toJSON(instance, function(instance) {
            return {
                'id' : instance._id,
                'name' : instance._name,
                'analysis' : JsonUtil.toJSON(JsonUtil.AnalysisObjectType, instance._analysis),
                'selected' : instance._selected
            };
        });
    };
    /**
     * Deserialize a JSON to HierarchyLevelObject instance or instance array
     *
     * @method sap.viz.controls.common.feeds.HierarchyLevelObject.fromJSON
     * @param {Object | Array<Object>} json
     * @returns {sap.viz.controls.common.feeds.HierarchyLevelObject | Array<{@link sap.viz.controls.common.feeds.HierarchyLevelObject}>}
     */
    HierarchyLevelObject.fromJSON = function(json) {
        return utils.fromJSON(json, function(json) {
            var instance = new HierarchyLevelObject(json.id, json.name, JsonUtil.fromJSON(JsonUtil.AnalysisObjectType, json.analysis));
            instance.selected(json.selected);
            return instance;
        });
    };
    
    JsonUtil.register(JsonUtil.HierarchyLevelObjectType, HierarchyLevelObject.fromJSON, HierarchyLevelObject.toJSON);

    return HierarchyLevelObject;
});

define('sap/viz/controls/common/feeds/AnalysisObject',[
// @formatter:off
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/views/menu/MenuGroup',
    'sap/viz/controls/common/utils/JsonUtil',
    // Require HierarchyLevelObject to make sure its fromJSON function has
    // properly registered, so that AnalysisObject.fromJSON can work when
    // hierarchy levels exist.
    'sap/viz/controls/common/feeds/HierarchyLevelObject'
], function(utils, LangManager, AnalyticalType, MenuGroup, JsonUtil) {
// @formatter:on
    /**
     * AnalysisObject Class
     *
     * @class sap.viz.controls.common.feeds.AnalysisObject
     * @param {String} id
     * @param {String} name
     * @param {String} type Enumeration: dimension, measure, hierarchy, mnd
     * @param {String} dataType Enumeration: string, number, date...
     * @param {String} aggregationType if the ananlysis object is to be used as a
     *                 aggregation, sum, min, max, avg....
     * @param {String} aggregationTarget the dimension which aggregation is created.
     * We need to keep the dimension id for publishing to map to the real dimension
     */
    var AnalysisObject = function(id, name, type, dataType, aggregationType, aggregationTarget) {
        this.__className = "sap.viz.controls.common.feeds.AnalysisObject";
        this._id = id;
        this._name = name;
        this._type = type;
        this._dataType = dataType;
        this._aggregationType = aggregationType;
        this._aggregationTarget = aggregationTarget;
        this._actions = null;
        this._hierarchyLevels = null;
    };
    AnalysisObject.genMND = function() {
        return new AnalysisObject('mnd', '', AnalyticalType.MND, 'string');
    };

    utils.genGetterSetters(AnalysisObject.prototype,
        ["_id", "_name", "_actions", "_aggregationType", "_aggregationTarget", "_hierarchyLevels"]
    );

    /**
     * Get id
     *
     * @method sap.viz.controls.common.feeds.AnalysisObject.prototype.id
     * @returns {String}
     */
    /*AnalysisObject.prototype.id = function(value) {
         if (arguments.length > 0) {
            this._id = value;
            return this;
        } else {
            return this._id;
        }
    };*/
    /**
     * Get name
     *
     * @method sap.viz.controls.common.feeds.AnalysisObject.prototype.name
     * @returns {String}
     */
    /*AnalysisObject.prototype.name = function(value) {
        if (arguments.length > 0) {
            this._name = value;
            return this;
        } else {
            return this._name;
        }
    };*/
    /**
     * Get type
     *
     * @method sap.viz.controls.common.feeds.AnalysisObject.prototype.type
     * @returns {String}
     */
    AnalysisObject.prototype.type = function() {
        return this._type;
    };
    /**
     * Get AnalysisObject dataType
     *
     * @returns {String}
     */
    AnalysisObject.prototype.dataType = function() {
        return this._dataType;
    };
    /**
     * Get/Set AnalysisObject actions.
     * @param {Array<{@link sap.viz.controls.common.views.menu.MenuGroup}>} menuGroups
     * @returns {Array<{@link sap.viz.controls.common.views.menu.MenuGroup}>}
     */
    /*AnalysisObject.prototype.actions = function(value) {
        if (arguments.length > 0) {
            this._actions = value;
            return this;
        } else {
            return this._actions;
        }
    };*/

    /**
     * Get/Set AnalysisObject aggregationType
     * @param {<{@link sap.viz.controls.common.feeds.SubtotalItemType}>}
     * @returns {<{@link sap.viz.controls.common.feeds.SubtotalItemType}>}
    */
    /*AnalysisObject.prototype.aggregationType = function(value) {
        if (arguments.length > 0) {
            this._aggregationType = value;
            return this;
        } else {
            return this._aggregationType;
        }
    };*/

    /**
     * Get/Set AnalysisObject aggregationTaget
     * @param {String}
     * @returns {String}
    */
    /*AnalysisObject.prototype.aggregationTarget = function(value) {
        if (arguments.length > 0) {
            this._aggregationTarget = value;
            return this;
        } else {
            return this._aggregationTarget;
        }
    };*/

    /**
     * Get/Set hierarchyLevels.
     * @param {Array<{@link sap.viz.controls.common.feeds.HierarchyLevelObject}>} hierarchyLevels
     * @returns {Array<{@link sap.viz.controls.common.feeds.HierarchyLevelObject}>}
     */
    /*AnalysisObject.prototype.hierarchyLevels = function(value) {
        if (arguments.length > 0) {
            this._hierarchyLevels = value;
            return this;
        } else {
            return this._hierarchyLevels;
        }
    };*/

    AnalysisObject.prototype.selectedHierarchyLevel = function() {
        if (!this._hierarchyLevels) {
            return;
        }
        for (var i = 0; i < this._hierarchyLevels.length; i++) {
            if (this._hierarchyLevels[i].selected()) {
                return this._hierarchyLevels[i];
            }
        }
        return;
    };
    AnalysisObject.prototype.selectedHierarchyLevelID = function(id) {
        if (!this._hierarchyLevels) {
            return this;
        }
        for (var i = 0; i < this._hierarchyLevels.length; i++) {
            var level = this._hierarchyLevels[i];
            level.selected(level.id() === id);
        }
        return this;
    };

    AnalysisObject.prototype.clone = function() {
        var clone = AnalysisObject.fromJSON(AnalysisObject.toJSON(this));
        return clone;
    };

    /**
     * Whether analysisObjects are equal.
     * @param {Array<{@link sap.viz.controls.common.feeds.AnalysisObject}>} analysisObjects
     * @param {JSON>} options
     *                {ignoreActions: true}
     */
    AnalysisObject.prototype.equal = function(analysisObj, options){
        var i;
        if(this.type() === AnalyticalType.MND && analysisObj.type() === AnalyticalType.MND) {
            return true;
        }

        if(this.type() !== analysisObj.type() || this.name() !== analysisObj.name()) {
            return false;
        }

        if(this.type() === AnalyticalType.HIERARCHY && analysisObj.type() === AnalyticalType.HIERARCHY) {
            if (this.selectedHierarchyLevel().id() !== analysisObj.selectedHierarchyLevel().id()) {
                return false;
            }

            var levels1 = this.hierarchyLevels();
            var levels2 = analysisObj.hierarchyLevels();
            if (!levels1 || !levels2 || levels1.length !== levels2.length) {
                return false;
            }

            for (i = 0; i < levels1.length; i++) {
                var level1 = levels1[i];
                var level2 = levels2[i];
                if (level1.id() !== level2.id()) {
                    return false;
                }

                if (level1.name() !== level2.name()) {
                    return false;
                }
            }
        }

        if((!options || options.ignoreActions !== true) && (this.actions() !== undefined || analysisObj.actions() !== undefined))
        {
            var actions1 = this.actions()||[];
            var actions2 = analysisObj.actions()||[];
            if(actions1.length !== actions2.length)
            {
                return false;
            }
            for(i =0;i<actions1.length;i++)
            {
                var menuGroup1 = actions1[i];
                var menuGroup2 = actions2[i];
                if( !(menuGroup1 == null && menuGroup2 == null))
                {
                    if(menuGroup1 == null)
                    {
                        return false;
                    }
                    if(!menuGroup1.equal(menuGroup2))
                    {
                        return false;
                    }
                }
            }
        }

        return true;
    }

    /**
     * Serialize AnalysisObject or AnalysisObject array to a JSON object.
     *
     * @method sap.viz.controls.common.feeds.AnalysisObject.toJSON
     * @param {sap.viz.controls.common.feeds.AnalysisObject|Array<{@link sap.viz.controls.common.feeds.AnalysisObject}>} instance
     * @returns {JSON}
     */
    AnalysisObject.toJSON = function(instance) {
        return utils.toJSON(instance, function(instance) {
        return {
                'id' : instance._id,
                'name' : instance._name,
                'type' : instance._type,
                'dataType' : instance._dataType,
                'actions' : MenuGroup.toJSON(instance._actions),
                'hierarchyLevels' : JsonUtil.toJSON(JsonUtil.HierarchyLevelObjectType, instance._hierarchyLevels),
                'aggregationType' : instance._aggregationType,
                'aggregationTarget' : instance._aggregationTarget
            };
        });
    };
    /**
     * Deserialize a JSON object to AnalysisObject or AnalysisObject array.
     * @method sap.viz.controls.common.feeds.AnalysisObject.fromJSON
     * @param {JSON} json
     * @returns {sap.viz.controls.common.feeds.AnalysisObject||Array<{@link sap.viz.controls.common.feeds.AnalysisObject}>}
     */
    AnalysisObject.fromJSON = function(json) {
        return utils.fromJSON(json, function(json) {
            var instance = new AnalysisObject(json.id, json.name, json.type, json.dataType, json.aggregationType, json.aggregationTarget);
            if (json.actions) {
                instance.actions(MenuGroup.fromJSON(json.actions));
            }
            if (json.hierarchyLevels) {
                instance.hierarchyLevels(JsonUtil.fromJSON(JsonUtil.HierarchyLevelObjectType, json.hierarchyLevels));
            }
            return instance;
        });
    };

    JsonUtil.register(JsonUtil.AnalysisObjectType, AnalysisObject.fromJSON, AnalysisObject.toJSON);
    return AnalysisObject;
});

define('sap/viz/controls/common/feeds/FeedItemType',[], function() {
	/**
     * The FeedItem type. 
     * @class sap.viz.controls.common.feeds.FeedItemType
     */
    var FeedItemType = function() {
        this.__className = "sap.viz.controls.common.feeds.FeedItemType";
    };

    /**
     * @memberof sap.viz.controls.common.feeds.FeedItemType
     * @member MEASURE
     * @static
     */
    FeedItemType.MEASURE = 'Measure';
    /**
     * @memberof sap.viz.controls.common.feeds.FeedItemType
     * @member DIMENSION
     * @static
     */
    FeedItemType.DIMENSION = 'Dimension';
    /**
     * @memberof sap.viz.controls.common.feeds.FeedItemType
     * @member SUBTOTAL
     * @static
     */
    FeedItemType.SUBTOTAL = 'Subtotal';
    /**
     * @memberof sap.viz.controls.common.feeds.FeedItemType
     * @member GEOGRAPHY
     * @static
     */
    FeedItemType.GEOGRAPHY = 'Geography';
    /**
     * @memberof sap.viz.controls.common.feeds.FeedItemType
     * @member ROWS
     * @static
     */
    FeedItemType.ROWS = 'rows';
    FeedItemType.ROW_SUBTOTALS = 'r_subtotals';
    /**
     * @memberof sap.viz.controls.common.feeds.FeedItemType
     * @member COLUMNS
     * @static
     */
    FeedItemType.COLUMNS = 'columns';
    FeedItemType.COLUMNS_SUBTOTALS = 'c_subtotals';
    FeedItemType.CALCULATION = 'calculation';
    /**
     * @memberof sap.viz.controls.common.feeds.FeedItemType
     * @member LEVEL
     * @static
     */
    FeedItemType.LEVEL = 'level';
    /**
     * @memberof sap.viz.controls.common.feeds.FeedItemType
     * @member HIERARCHY
     * @static
     */
    FeedItemType.HIERARCHY = 'hierarchy';

    return FeedItemType;
});
define('sap/viz/controls/common/feeds/FeedItem',[
// @formatter:off
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/feeds/AnalysisObject'],
    function(utils, FeedItemType, AnalysisObject) {
// @formatter:on

    /**
     * FeedItem Class
     *
     * @class sap.viz.controls.common.feeds.FeedItem
     * @param {String} id
     *                 Standard feed id string in CVOM chart. Special case:
     *                 For trellis row, the feed id is trellisRow. For trellis column, the feed id is trellisColumn
     * @param {String} type
     * @param {Array<{@link sap.viz.controls.common.feeds.AnalysisObject}>} values
     */
    var FeedItem = function(id, type, values) {
        this.__className = "sap.viz.controls.common.feeds.FeedItem";
        this._id = id;
        // Make FeedItemType to compatible with type of binding definition & analysis object
        // TODO Refine the FeedItemType
        if (type === 'dimension') {
            type = FeedItemType.DIMENSION;
        } else if (type === 'measure') {
            type = FeedItemType.MEASURE;
        }
        this._type = type;
        this._values = values;
    };
    /**
     * Get type
     *
     * @method sap.viz.controls.common.feeds.FeedItem.prototype.type
     * @returns {String}
     */
    FeedItem.prototype.type = function() {
        return this._type;
    };
    /**
     * Get id
     *
     * @method sap.viz.controls.common.feeds.FeedItem.prototype.id
     * @returns {String}
     */
    FeedItem.prototype.id = function() {
        return this._id;
    };
    /**
     * Get values
     *
     * @method sap.viz.controls.common.feeds.FeedItem.prototype.values
     * @returns {Array<{@link sap.viz.controls.common.feeds.AnalysisObject}>}
     */
    FeedItem.prototype.values = function(value) {
        if (arguments.length > 0) {
            this._values = value;
            return this;
        } else {
            return this._values;
        }
    };

    /**
     * check whether this item has values
     *
     * @returns {Boolean}
     *
     */
    FeedItem.prototype.hasValues = function() {
        return (this._values && this._values.length > 0);
    };

    FeedItem.prototype.clone = function() {
        return FeedItem.fromJSON(FeedItem.toJSON(this));
    };

    /**
     * Serialize FeedItem or FeedItem array to a JSON object.
     *
     * @method sap.viz.controls.common.feeds.FeedItem.toJSON
     * @param {sap.viz.controls.common.feeds.FeedItem|Array<{@link sap.viz.controls.common.feeds.FeedItem}>} instance
     * @returns {JSON}
     */
    FeedItem.toJSON = function(instance) {
        return utils.toJSON(instance, function(instance) {
            return {
                'id' : instance._id,
                'type' : instance._type,
                'values' : AnalysisObject.toJSON(instance._values)
            };
        });
    };
    /**
     * Deserialize a JSON object to FeedItem or FeedItem array.
     *
     * @method sap.viz.controls.common.feeds.FeedItem.fromJSON
     * @param {JSON} json
     * @returns {sap.viz.controls.common.feeds.FeedItem|Array<{@link sap.viz.controls.common.feeds.FeedItem}>}
     */
    FeedItem.fromJSON = function(json) {
        return utils.fromJSON(json, function(json) {
            return new FeedItem(json.id, json.type, AnalysisObject.fromJSON(json.values));
        });
    };
    return FeedItem;
});

define('sap/viz/controls/common/feeds/SubtotalItemType',['sap/viz/controls/common/managers/LangManager',
        'sap/viz/controls/common/feeds/FeedItemType',
        'sap/viz/controls/common/feeds/AnalyticalType'
], function(LangManager, FeedItemType, AnalyticalType) {

    var SubtotalItemType = function() {
        this.__className = "sap.viz.controls.common.feeds.SubtotalItemType";
    };

    SubtotalItemType.action = 'addSubTotal';
    
    SubtotalItemType.TOTAL = 'default';
    SubtotalItemType.SUM = 'sum';
    SubtotalItemType.MIN = 'min';
    SubtotalItemType.MAX = 'max';
    SubtotalItemType.COUNT = 'count';
    SubtotalItemType.AVG = 'average';


    SubtotalItemType.getAggregationType = function(token) {
        if(token.indexOf(SubtotalItemType.TOTAL) !== -1) {
            return SubtotalItemType.TOTAL;
        } else if(token.indexOf(SubtotalItemType.SUM) !== -1) {
            return SubtotalItemType.SUM;
        }else if(token.indexOf(SubtotalItemType.MIN) !== -1) {
            return SubtotalItemType.MIN;
        }else if(token.indexOf(SubtotalItemType.MAX) !== -1) {
            return SubtotalItemType.MAX;
        } else if(token.indexOf(SubtotalItemType.COUNT) !== -1) {
            return SubtotalItemType.COUNT;
        }  else if(token.indexOf(SubtotalItemType.AVG) !== -1) {
            return SubtotalItemType.AVG;
        }
        return null;
    };
    
    SubtotalItemType.getSubTotalsAggregationDisplayType = function( aggregationType ) {

         switch( aggregationType ) {
            case SubtotalItemType.SUM:
                return LangManager.get('VIZ_COMMON_SUM_OF');
            case SubtotalItemType.MIN:
                return LangManager.get('VIZ_COMMON_MIN_OF');
            case SubtotalItemType.MAX:
                return LangManager.get('VIZ_COMMON_MAX_OF');
            case SubtotalItemType.COUNT:
                return LangManager.get('VIZ_COMMON_COUNT_OF');
            case SubtotalItemType.AVG:
                return LangManager.get('VIZ_COMMON_AVERAGE_OF');
            case SubtotalItemType.TOTAL:
                return LangManager.get('VIZ_COMMON_TOTAL_OF');
            default:
                return " ";
            }
    };
    
    /* Localizes the subtotal string and concatenates it to the aggregationTarget name
     * @param {string} aggregation target
     * @return {string} analysis object name
    */
    SubtotalItemType.createSubTotalsName = function( aggregationType, aggregationTarget ) {
        if (arguments.length < 2) {
            return;
        }

        return SubtotalItemType.getSubTotalsAggregationDisplayType(aggregationType) + " " + aggregationTarget;
    };

    /* Function removes any presence of the subtotals types from 
     * the AnalysisObjects display name, this would occur if a subtotals was 
     * created from selecting a demension from the quick list
     * @param {list} analysis objects
     * @return {list} analysis objects
    */
    SubtotalItemType.sanitizeAnalysisObjects = function(allAnalyses) {

        for( var i = 0; i < allAnalyses.length; i++) {

            var tmpAnalysisName = allAnalyses[i].name();

            if( tmpAnalysisName.indexOf( SubtotalItemType.getSubTotalsAggregationDisplayType(SubtotalItemType.TOTAL) ) !== -1 ) {
                SubtotalItemType.removeSubtotalItemTokenFromName( SubtotalItemType.getSubTotalsAggregationDisplayType(SubtotalItemType.TOTAL), allAnalyses[i]);
            }
            else if( tmpAnalysisName.indexOf( SubtotalItemType.getSubTotalsAggregationDisplayType(SubtotalItemType.SUM)  ) !== -1 ) {
                SubtotalItemType.removeSubtotalItemTokenFromName( SubtotalItemType.getSubTotalsAggregationDisplayType(SubtotalItemType.SUM), allAnalyses[i] );
            }
            else if( tmpAnalysisName.indexOf( SubtotalItemType.getSubTotalsAggregationDisplayType(SubtotalItemType.MIN)  ) !== -1 ) {
                SubtotalItemType.removeSubtotalItemTokenFromName( SubtotalItemType.getSubTotalsAggregationDisplayType(SubtotalItemType.MIN), allAnalyses[i] );
            }
            else if( tmpAnalysisName.indexOf( SubtotalItemType.getSubTotalsAggregationDisplayType(SubtotalItemType.MAX)  ) !== -1 ) {
                SubtotalItemType.removeSubtotalItemTokenFromName( SubtotalItemType.getSubTotalsAggregationDisplayType(SubtotalItemType.MAX) , allAnalyses[i] );
            }
            else if( tmpAnalysisName.indexOf( SubtotalItemType.getSubTotalsAggregationDisplayType(SubtotalItemType.COUNT)   ) !== -1 ) {
                SubtotalItemType.removeSubtotalItemTokenFromName( SubtotalItemType.getSubTotalsAggregationDisplayType(SubtotalItemType.COUNT), allAnalyses[i] );
            }
            else if( tmpAnalysisName.indexOf( SubtotalItemType.getSubTotalsAggregationDisplayType(SubtotalItemType.AVG)   ) !== -1 ) {
                SubtotalItemType.removeSubtotalItemTokenFromName( SubtotalItemType.getSubTotalsAggregationDisplayType(SubtotalItemType.AVG), allAnalyses[i] );
            }
        }

        return allAnalyses;

    };
    
    /* Function removes the occurance of the subtotal token from the analysis object's name
     * @param {SubtotalItemType} token to remove
     * @param {analysisObject} analysis Object we are cleansing
    */
    SubtotalItemType.removeSubtotalItemTokenFromName = function(token, analysisObj) {

        var tokenLen = token.length;
        // accomidate for the space between the token and the name len+1
        var cleansedName = analysisObj.name().substr( tokenLen+1 );
        analysisObj.name(cleansedName);


    };

    /* Function re-localizes the subtotals analysis object's name in the feeds
     * @param {feedingItems} feeds to re-localize
    */
    SubtotalItemType.localizeSubtotalAnalysesNames = function(feedingItems) {
        if (!feedingItems) {
            return;
        }

        // Build a map of AnalysisObject id() to name() to determine the subtotals original name() without the localized subtotals prefix
        var analysisObjectIdNameMap = {};

        var subtotals = [];
        for (var i = 0; i < feedingItems.length; i++) {
            if (feedingItems[i].type() !== FeedItemType.SUBTOTAL) {

                feedingItems[i].values().forEach( function(analysis) {
                
                    if (analysis.type() === AnalyticalType.HIERARCHY) {
                        var levels = analysis.hierarchyLevels();

                        for (var j = 0; j < levels.length; j++) {
                            analysisObjectIdNameMap[levels[j].id()] = levels[j].name();
                        }
                    } else {
                        analysisObjectIdNameMap[analysis.id()] = analysis.name();
                    }
                });
            } else {
                subtotals = feedingItems[i].values();
            }
        }

        // Regenerate all subtotals name()
        for (var a = 0; a < subtotals.length; a++) {
            var currentSubtotal = subtotals[a];
            if (currentSubtotal.type() === AnalyticalType.HIERARCHY) {
                var subtotalLevels = currentSubtotal.hierarchyLevels();
                var aggregationType = currentSubtotal.aggregationType();

                for (var b = 0; b < subtotalLevels.length; b++) {
                    var subtotalLevel = subtotalLevels[b];

                    subtotalLevel.name(SubtotalItemType.createSubTotalsName( aggregationType, analysisObjectIdNameMap[ subtotalLevel.id() ] ));
                }
            } else if (currentSubtotal.aggregationTarget()) {
                currentSubtotal.name(SubtotalItemType.createSubTotalsName( currentSubtotal.aggregationType(), analysisObjectIdNameMap[ currentSubtotal.aggregationTarget() ] ));
            }
        }

        return feedingItems;
    };

    return SubtotalItemType;
});

define('sap/viz/controls/common/utils/OOUtil',[],function() {

    var OOUtil = {};

    /**
     * Extend class, superClz's constructor will be applied with no parameters.
     *
     * @para {function} subClz the sub class
     * @para {function} superClz the super class to be extended
     * @return {function} the extended subClz
     * @public
     * @static
     */
    OOUtil.extend = function(subClz, superClz) {
        var subClzPrototype = subClz.prototype;

        // add the superclass prototype to the subclass definition
        subClz.superclass = superClz.prototype;

        // copy prototype
        var F = function() {
        };
        F.prototype = superClz.prototype;

        subClz.prototype = new F();
        for(var prop in subClzPrototype) {
            if(subClzPrototype.hasOwnProperty(prop)) {
                subClz.prototype[prop] = subClzPrototype[prop];
            }
        }
        subClz.prototype.constructor = subClz;
        if(superClz.prototype.constructor == Object.prototype.constructor) {
            superClz.prototype.constructor = superClz;
        }
        return subClz;
    };
    return OOUtil;
});

/**
 * AbstractFilter, DateRangeFilter, NumericRangeFilter and ValueFilter are copied from Lumira desktop.
 */
// @formatter:off
define('sap/viz/controls/common/filter/AbstractFilter',[],
function() {
// @formatter:on

    /**
     * @deprecated
     * This class is only work with fliter0
     * 
     * Base class for FilterItem.
     */
    var AbstractFilter = function(type, objectId, objectName) {
        this.__className = "sap.viz.controls.common.filter.AbstractFilter";

        this.filterType = type;
        this.filteredObjectId = objectId;
        this.filteredObjectName = objectName;
        this.isReverse = true;
        
        this._isGlobalFilter = false;
    };

    AbstractFilter.VALUE_TYPE = "VALUE_FILTER_TYPE";
    AbstractFilter.NUMERIC_RANGE_TYPE = "NUMERIC_RANGE_TYPE";
    AbstractFilter.DATE_RANGE_TYPE = "DATE_RANGE_TYPE";

    AbstractFilter.prototype.getType = function() {
        return this.filterType;
    };

    AbstractFilter.prototype.getFilteredObjectId = function() {
        return this.filteredObjectId;
    };


    AbstractFilter.prototype.getFilteredObjectName = function() {
        return this.filteredObjectName;
    };
    
    AbstractFilter.prototype.setReverseSelection = function(reverse) {
        this.isReverse = reverse;
    };

    AbstractFilter.prototype.isReverseSelection = function() {
        return this.isReverse;
    };
    
    AbstractFilter.prototype.isEmpty = function() {
        return false;
    };
    
    AbstractFilter.prototype.toJSON = function() {
        var jsoned = {};
        jsoned.filteredObjectId = this.filteredObjectId;
        jsoned.filteredObjectName = this.filteredObjectName;
        jsoned.filterType = this.filterType;
        jsoned.isReverse = this.isReverse;
        jsoned.isGlobalFilter = this._isGlobalFilter;
        return jsoned;
    };
    
    // To support backward compatibility, provide below functions wrappers.    
    /**
     * Get analysisObjectId
     */
    AbstractFilter.prototype.analysisObjectId = function() {
        return this.getFilteredObjectId();
    };
    
    /**
     * Get Id
     */
    AbstractFilter.prototype.id = function() {
        //For FilterBar to exclude the existing filter items
        return this.getFilteredObjectId();
    };
    
    /**
     *  Get filterName.
     */
    AbstractFilter.prototype.filterName = function() {
        return this.getFilteredObjectName();
    };
    
    /**
     * Get/Set isExcluded flag.
     *
     * @returns {Boolean}
     */
    AbstractFilter.prototype.isExcluded = function(isExcluded) {
        if (arguments.length > 0) {
            this.isReverse = !isExcluded;
        } else {
            return !this.isReverse;
        }
    };
    
    /**
     * Get/Set isGlobalFilter flag.
     *
     * @returns {Boolean}
     */
    AbstractFilter.prototype.isGlobalFilter = function(isGlobalFilter) {
        if (arguments.length > 0) {
            this._isGlobalFilter = isGlobalFilter;
            return this;
        } else {
            return this._isGlobalFilter;
        }
    };
    
    /**
     * Get filter title.
     */
    AbstractFilter.prototype.filterTitle = function() {
        return this.filteredObjectName;
    };
    
    /**
     * Get filter content.
     */
    AbstractFilter.prototype.filterContent = function() {
        return this.filteredObjectName;
    };

    return AbstractFilter;
});

// @formatter:off
define('sap/viz/controls/common/filter/DateRangeFilter',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/filter/AbstractFilter',
    'sap/viz/controls/common/managers/LangManager'
],
function(OOUtil, AbstractFilter, LangManager) {
// @formatter:on

    /**
     * @deprecated
     * This class is only work with fliter0
     */
    var DateRangeFilter = function(objectId, objectName) {
        var args = [];
        args.push(AbstractFilter.DATE_RANGE_TYPE);
        args.push(objectId);
        args.push(objectName);
        DateRangeFilter.superclass.constructor.apply(this, args);
        this.__className = "sap.viz.controls.common.filter.DateRangeFilter";

        this.minDate = null;
        this.maxDate = null;
        this.excludeNull = false;
    };

    OOUtil.extend(DateRangeFilter, AbstractFilter);

    DateRangeFilter.prototype.isEmpty = function() {
        // if both of minDate and maxDate = null, the filter is empty
        if (this.minDate === null && this.maxDate === null) {
            return true;
        }
        return false;
    };

    DateRangeFilter.prototype.getMin = function() {
        return this.minDate;
    };

    DateRangeFilter.prototype.getMax = function() {
        return this.maxDate;
    };

    DateRangeFilter.prototype.isExcludeNull = function() {
        return this.excludeNull;
    };

    DateRangeFilter.prototype.setMin = function(min) {
        this.minDate = min;
    };

    DateRangeFilter.prototype.setMax = function(max) {
        this.maxDate = max;
    };

    DateRangeFilter.prototype.setExcludeNull = function(exclude) {
        this.excludeNull = exclude;
    };

    DateRangeFilter.prototype.toJSON = function() {
        var jsoned = DateRangeFilter.superclass.toJSON.apply(this, arguments);
        jsoned.minDate = this.minDate;
        jsoned.maxDate = this.maxDate;
        jsoned.excludeNull = this.excludeNull;
        return jsoned;
    };

    DateRangeFilter.fromJSON = function(filterJson) {
        var filter = new DateRangeFilter(filterJson.filteredObjectId, filterJson.filteredObjectName);
        filter.setReverseSelection(filterJson.isReverse);
        filter.isGlobalFilter(filterJson.isGlobalFilter);
        filter.minDate = filterJson.minDate;
        filter.maxDate = filterJson.maxDate;
        filter.excludeNull = filterJson.excludeNull;
        return filter;
    };
    
    DateRangeFilter.prototype.clone = function(){
        var jsonObj = this.toJSON();
        return DateRangeFilter.fromJSON(jsonObj);
    };
    /**
     * Get filter title.
     * @override
     */
    DateRangeFilter.prototype.filterTitle = function() {
        return this.filteredObjectName + '('+ LangManager.get('VIZ_COMMON_BETWEEN') +')';
    };
    /**
     * Get filter content.
     * @override
     */
    DateRangeFilter.prototype.filterContent = function() {
        return '(' + this.minDate + '  -  ' + this.maxDate + ')';
    };

    return DateRangeFilter;
});

// @formatter:off
define('sap/viz/controls/common/filter/NumericRangeFilter',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/filter/AbstractFilter',
    'sap/viz/controls/common/managers/LangManager'
],
function(OOUtil, AbstractFilter, LangManager) {
// @formatter:on

    /**
     * @deprecated
     * This class is only work with fliter0
     */
    var NumericRangeFilter = function(objectId, objectName) {
        var args = [];
        args.push(AbstractFilter.NUMERIC_RANGE_TYPE);
        args.push(objectId);
        args.push(objectName);

        NumericRangeFilter.superclass.constructor.apply(this, args);
        this.__className = "sap.viz.controls.common.filter.NumericRangeFilter";

        this.minValue = null;
        this.maxValue = null;
        this.excludeNull = false;
    };

    OOUtil.extend(NumericRangeFilter, AbstractFilter);

    NumericRangeFilter.prototype.isEmpty = function() {
        // if both of minValue and maxValue = null, the filter is empty
        if (this.minValue === null && this.maxValue === null) {
            return true;
        }
        return false;
    };

    NumericRangeFilter.prototype.getMin = function() {
        return this.minValue;
    };

    NumericRangeFilter.prototype.getMax = function() {
        return this.maxValue;
    };

    NumericRangeFilter.prototype.isExcludeNull = function() {
        return this.excludeNull;
    };

    NumericRangeFilter.prototype.setMin = function(min) {
        this.minValue = min;
    };

    NumericRangeFilter.prototype.setMax = function(max) {
        this.maxValue = max;
    };

    NumericRangeFilter.prototype.setExcludeNull = function(exclude) {
        this.excludeNull = exclude;
    };

    NumericRangeFilter.prototype.toJSON = function() {
        var jsoned = NumericRangeFilter.superclass.toJSON.apply(this, arguments);
        jsoned.minValue = this.minValue;
        jsoned.maxValue = this.maxValue;
        jsoned.excludeNull = this.excludeNull;
        return jsoned;
    };

    NumericRangeFilter.fromJSON = function(filterJson) {
        var filter = new NumericRangeFilter(filterJson.filteredObjectId, filterJson.filteredObjectName);
        filter.setReverseSelection(filterJson.isReverse);
        filter.isGlobalFilter(filterJson.isGlobalFilter);
        filter.minValue = filterJson.minValue;
        filter.maxValue = filterJson.maxValue;
        filter.excludeNull = filterJson.excludeNull;
        return filter;
    };

    NumericRangeFilter.prototype.clone = function(){
        var jsonObj = this.toJSON();
        return NumericRangeFilter.fromJSON(jsonObj);
    };
    /**
     * Get filter title.
     * @override
     */
    NumericRangeFilter.prototype.filterTitle = function() {
        return this.filteredObjectName + '('+ LangManager.get('VIZ_COMMON_BETWEEN') +')';
    };
    /**
     * Get filter content.
     * @override
     */
    NumericRangeFilter.prototype.filterContent = function() {
        return '(' + this.minValue + '  -  ' + this.maxValue + ')';
    };

    return NumericRangeFilter;
});

// @formatter:off
define('sap/viz/controls/common/filter/ValueFilter',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/filter/AbstractFilter'
],
function(OOUtil, AbstractFilter) {
// @formatter:on

    /**
     * @deprecated
     * This class is only work with fliter0
     */
    var ValueFilter = function(objectId, objectName) {
        ValueFilter.superclass.constructor.apply(this, [AbstractFilter.VALUE_TYPE, objectId, objectName]);
        this.__className = "sap.viz.controls.common.filter.ValueFilter";

        this.hierarchyLevelId = null;
        this.filteredValues = [];
    };

    OOUtil.extend(ValueFilter, AbstractFilter);


    ValueFilter.prototype.getValues = function() {
        return this.filteredValues;
    };

    ValueFilter.prototype.isEmpty = function() {
        if (this.filteredValues && this.filteredValues.length > 0) {
            return false;
        } else {
            return true;
        }
    };

    ValueFilter.prototype.removeAllValues = function() {
        this.filteredValues.length = 0;
    };

    /**
     * Add filter value.
     * value = {
     *     'value' : filterLabel,
     *     'infoValue' : filterInfos,
     *     'paths' : {
     *         'name' : pathName,
     *         'value' : pathValue,
     *         'infoValue' : pathInfos
     *     }
     * }
     */
    ValueFilter.prototype.addValue = function(value) {
        return this.filteredValues.push(value);
    };

    ValueFilter.prototype.removeValue = function(value) {
        //var index = this.filteredValues.indexOf(value);

        for (var i = 0; i < this.filteredValues.length; i++) {
            if (this.filteredValues[i].key === value.key && this.filteredValues[i].value === value.value) {
                this.filteredValues.splice(i, 1);
            }

        }
        /*if(index !== -1)
         {
         this.filteredValues.splice(index, 1);
         }*/
    };

    ValueFilter.prototype.toJSON = function() {
        var jsoned = ValueFilter.superclass.toJSON.apply(this, arguments);
        jsoned.filteredValues = this.filteredValues;
        if (this.hierarchyLevelId) {
            jsoned.hierarchyLevelId = this.hierarchyLevelId;
        }
        return jsoned;
    };

    ValueFilter.fromJSON = function(filterJson) {
        var filter = new ValueFilter(filterJson.filteredObjectId, filterJson.filteredObjectName);
        filter.setReverseSelection(filterJson.isReverse);
        filter.isGlobalFilter(filterJson.isGlobalFilter);
        filter.filteredValues = filterJson.filteredValues;
        if (filterJson.hierarchyLevelId) {
            filter.hierarchyLevelId = filterJson.hierarchyLevelId;
        }
        return filter;
    };
    
    ValueFilter.prototype.clone = function(){
        var jsonObj = this.toJSON();
        return ValueFilter.fromJSON(jsonObj);
    };
    ///////////////////////////////////////////
    ValueFilter.prototype.values = function() {
        return this.filteredValues;
    };
    ValueFilter.prototype.updateValues = function(values) {
        return (this.filteredValues = values);
    };
    /**
     * Get filter title.
     * @override
     */
    ValueFilter.prototype.filterTitle = function() {
        return this.filteredObjectName + ' (' + this.filteredValues.length + ')';
    };
    /**
     * Get filter content.
     * @override
     */
    ValueFilter.prototype.filterContent = function() {
        var valuesString = "";
        for (var i = 0, length = this.filteredValues.length; i < length; i++) {
            if (valuesString) {
                valuesString += ", " + this.filteredValues[i].value;
            } else {
                valuesString = this.filteredValues[i].value;
            }
        }
        return valuesString;
    };

    return ValueFilter;
});

define('sap/viz/controls/common/constants/CSSConst',[],function() {

    var CSSConst = {};

    CSSConst.PREFIX = "viz-controls-";
    CSSConst.COMMON_PREFIX = CSSConst.PREFIX + "common-";
    CSSConst.SWITCHBAR_PREFIX = CSSConst.PREFIX + "switchbar-";
    CSSConst.FEEDINGPANEL_PREFIX = CSSConst.PREFIX + "feeding-";
    CSSConst.PROPERTYEDITOR_PREFIX = CSSConst.PREFIX + "propertyeditor-";
    CSSConst.VIZDATAPICKER_PREFIX = CSSConst.PREFIX + "datapicker-";
    CSSConst.FRAME_PREFIX = CSSConst.PREFIX + "frame-";
    CSSConst.BUILDER_PREFIX = CSSConst.PREFIX + "builder-";
    CSSConst.TRELLIS_PREFIX = CSSConst.PREFIX + "trellis-";
    CSSConst.MAPBUILDER_PREFIX = CSSConst.PREFIX + "mapbuilder-";
    CSSConst.CHART_PREFIX = CSSConst.PREFIX + "chart-";
    CSSConst.FILTERBAR0_PREFIX = CSSConst.PREFIX + "filterbar0-";
    CSSConst.FILTERBAR_PREFIX = CSSConst.PREFIX + "filterbar-";
    CSSConst.CONTEXTMENU_PREFIX = CSSConst.PREFIX + "contextmenu-";
    CSSConst.CUSTOMBUTTON_PREFIX = CSSConst.PREFIX + "custombutton-";
    CSSConst.ANNOTATION_PREFIX = CSSConst.PREFIX + "annotation-";
    CSSConst.PLAYCTRL_PREFIX = CSSConst.PREFIX + "playcontrol-";

    //common view: Feedingshelf prefix
    CSSConst.FEEDINGSHELF_PREFIX = CSSConst.COMMON_PREFIX + "feeding-";

    return CSSConst;
});

// @formatter:off
define('sap/viz/controls/common/events/EventDispatcher',[
    'sap/viz/controls/common/utils/Utils'],
function(utils) {
// @formatter:on

    /**
     * The EventDispatcher class is the base class for all classes that dispatch events.
     */
    /**
     * EventDispatcher Class
     * we remove the orignal two properties, because this is Base class;
     * all the properties should be dynamically created during function call
     * of subclass.
     *
     */
    var EventDispatcher = function() {
        this.__className = "sap.viz.controls.common.events.EventDispatcher";

        // lazy create the listeners maps
        // this._listeners/*<String Array<{type:type, scope:scope, listener:listener, priority:priority}>>*/ = {};
        /**
         * {Boolean}
         */
        this._enableDispatchEvent = true;
    };

    /**
     * Registers an event listener object with an EventDispatcher object so that the listener receives notification of an
     * event.
     *
     * You can register event listeners on any EventDispatcher object for a specific type of event, scope, and
     * priority. If you no longer need an event listener, remove it by calling removeEventListener(), or memory problems
     * could result.
     *
     * @method sap.viz.controls.common.events.EventDispatcher.prototype.addEventListener
     *
     * @param {String} type
     *            The type of event.
     * @param {Function} listener
     *            The listener function that processes the event.
     * @param {Object} scope
     *            The scope.
     * @param {int} priority
     *            The priority level of the event listener.
     */
    EventDispatcher.prototype.addEventListener = function(type, listener, scope, priority) {
        // default priority is 0 if priority is not assigned or null.
        if (!priority) {
            priority = 0;
        }

        var eventListener = this._findEventListener(type, listener, scope);
        if (eventListener) {
            // already exists
            return;
        }
        eventListener = {
            type : type,
            scope : scope,
            listener : listener,
            priority : priority
        };

        var listeners = this.listeners()[type];
        if (!listeners) {
            this.listeners()[type] = listeners = [eventListener];
        } else {
            // insert the eventListener at correct position according to its priority
            var isAdded = false;
            for (var n = 0; n < listeners.length; ++n) {
                var temp = listeners[n];
                if (priority > temp.priority) {
                    listeners.splice(n, 0, eventListener);
                    isAdded = true;
                    break;
                }
            }

            if (isAdded === false) {
                listeners.push(eventListener);
            }
        }
    };

    /**
     * Removes a listener from the EventDispatcher object.
     * @method sap.viz.controls.common.events.EventDispatcher.prototype.removeEventListener
     *
     * @param {String} type
     *            The type of event.
     * @param {Function} listener
     *            The listener function that processes the event.
     * @param {Object} scope
     *            The scope.
     */
    EventDispatcher.prototype.removeEventListener = function(type, listener, scope) {
        var eventListener = this._findEventListener(type, listener, scope);
        if (eventListener) {
            var listeners = this.listeners()[type];
            listeners.splice(listeners.indexOf(eventListener), 1);
        }
    };

    /**
     * Removes the listeners of s specified event type.
     * @method sap.viz.controls.common.events.EventDispatcher.prototype.removeEventListeners
     *
     * @param {String} type
     *            The type of event.
     */
    EventDispatcher.prototype.removeEventListeners = function(type) {
        this.listeners()[type] = [];
    };

    /**
     * Removes all the event listeners.
     * @method sap.viz.controls.common.events.EventDispatcher.prototype.removeEventListeners
     *
     */
    EventDispatcher.prototype.removeAllEventListeners = function() {
        this._listeners = {};
    };

    /**
     * Checks whether the EventDispatcher object has any listeners registered for a specific type,
     * listener and scope of event.
     *
     * @param {String} type
     *            The type of event
     * @param {Function} listener
     *            The listener function that processes the event
     * @param {Object} scope
     *            scope
     * @returns {Boolean}
     */
    EventDispatcher.prototype.hasEventListener = function(type, listener, scope) {
        var eventListener = this._findEventListener(type, listener, scope);
        return eventListener !== null;
    };

    /**
     * Checks whether the EventDispatcher object has any listeners registered for a specific type
     * (with any listeners or scopes) of event.
     *
     * @param {String} type
     *            The type of event
     * @returns {Boolean}
     */
    EventDispatcher.prototype.hasEventListeners = function(type) {
        var listeners = this.listeners()[type];
        if (listeners) {
            return listeners.length > 0;
        }
        return false;
    };

    /**
     * Dispatch event.
     *
     * @param {Event} event
     *            The event object.
     */
    EventDispatcher.prototype._dispatchEvent = function(event) {
        if (this._enableDispatchEvent === undefined) {
            this._enableDispatchEvent = true;
        }
        if (this._enableDispatchEvent) {
            var type = event.type();
            var listeners = this.listeners()[type];
            if (listeners) {
                var clones = listeners.slice(0);
                for (var n = 0; n < clones.length; ++n) {
                    var listener = clones[n];
                    listener.listener.call(listener.scope, event);
                }
            }
        }
    };

    /**
     * Enable/disable dispatch event.
     * @param value Enable-true, disable-false
     */
    EventDispatcher.prototype.enableDispatchEvent = function(v) {
        if (this._enableDispatchEvent === undefined) {
            this._enableDispatchEvent = true;
        }
        if (arguments.length >= 1) {
            if (utils.isBoolean(v)) {
                this._enableDispatchEvent = v;
            }
            return this;
        } else {
            return this._enableDispatchEvent;
        }
    };
    // -------------------------------------------
    // Private Methods
    // -------------------------------------------

    /**
     * Find the EventListener.
     * @private
     *
     * @param {String} type
     *            The type of event
     * @param {Function} listener
     *            The listener function that processes the event
     * @param {Object} scope
     *            scope
     * @returns {Object|null}
     */
    EventDispatcher.prototype._findEventListener = function(type, listener, scope) {
        var listeners = this.listeners()[type];
        if (!listeners) {
            return null;
        }

        for (var n = 0; n < listeners.length; ++n) {
            var eventListener = listeners[n];
            if (eventListener.listener === listener && eventListener.scope === scope) {
                return eventListener;
            }
        }

        return null;
    };

    /**
     * Get all event listeners.(Read only)
     * @returns All event listeners.
     */
    EventDispatcher.prototype.listeners = function() {
        if (this._listeners === undefined) {
            this._listeners = {};
        }
        return this._listeners;
    };

    return EventDispatcher;
});

// @formatter:off
define('sap/viz/controls/common/UIControl',[
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/EventDispatcher',
    'sap/viz/controls/common/utils/Utils'],
function($, OOUtil, EventDispatcher, utils) {
// @formatter:on

    /**
     * Base class for UI control.
     * @extends sap.viz.controls.common.events.EventDispatcher
     */
    var UIControl = function UIControl(dom/*HTMLElement*/, uiConfig/*JSON*/) {
        UIControl.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.common.UIControl";

        // internal
        this._dom = dom;
        this._dom$ = $(dom);

        this._uiConfig = uiConfig;

        // uid of this UI control
        this._uid = utils.genUID();
    };
    OOUtil.extend(UIControl, EventDispatcher);

    /**
     * Get/Set UIControl size {width, height} in pixel or in percentage.
     * @method sap.viz.controls.common.UIControl.prototype.size
     * @param {Object} value Optional, current UIControl size.
     */
    UIControl.prototype.size = function(value) {
        if (arguments.length > 0) {
            if (value.width != null) {
                this._dom$.width(value.width);
            }
            if (value.height != null) {
                this._dom$.height(value.height);
            }
            this._validateSize();
            return this;
        } else {
            return {
                'width' : this._dom$.width(),
                'height' : this._dom$.height()
            };
        }
    };
    UIControl.prototype._validateSize = function() {

    };

    /**
     * Hide or show a control by setting its css style.
     * @method sap.viz.controls.common.UIControl.prototype.visible
     * @param {Boolean} value True, show the control by setting {'visibility' : 'visible'}.
     *                        False, hide the control by setting {'visibility' : 'hidden'}.
     */
    UIControl.prototype.visible = function(value) {
        this._dom$.css("visibility", value ? "visible" : "hidden");
        return this;
    };

    /**
     * Hide a control.
     * @method sap.viz.controls.common.UIControl.prototype.hide
     */
    UIControl.prototype.hide = function() {
        this._dom$.hide();

        return this;
    };

    /**
     * Show a control.
     * @method sap.viz.controls.common.UIControl.prototype.show
     */
    UIControl.prototype.show = function() {
        this._dom$.show();

        return this;
    };

    /**
     * Destroy this control instance by removing all children dom elements and event listeners. The inherited class
     * should override this method to perform clean staff.
     * @method sap.viz.controls.common.UIControl.prototype.destroy
     */
    UIControl.prototype.destroy = function() {
        this._dom$.removeData().off().find('*').removeData().off();
        this._dom$.empty();
        this._dom = null;
    };

    return UIControl;
});

define('sap/viz/controls/common/views/drag/DropAction',[], 
function() {
    var DropAction = {};

    DropAction.ACCEPT = 'accept';
    DropAction.ACCEPT_AS_REPLACEMENT = 'acceptAsReplacement';
    DropAction.ACCEPT_AS_COPY = 'acceptAsCopy';
    DropAction.DENY = 'deny';
    DropAction.AS_TRASH = 'asTrash';

    return DropAction;
});

// @formatter:off
define('sap/viz/controls/common/views/drag/AnalysisToken',[
    'jquery',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/common/views/drag/DropAction'],
function($, CSSConst, OOUtil, utils, UIControl, DropAction) {
// @formatter:on
    /**
     * @param domHelper DOM of dragging helper
     *      jQuery data in domHelper
     *          sap.viz.controls.analysisDrag.analysisToken
     *          sap.viz.controls.analysisDrag.analysisObject
     *          sap.viz.controls.analysisDrag.action
     *      jQuery event of domHelper
     *          sap.viz.controls.analysisDrag.events.drag
     *          sap.viz.controls.analysisDrag.events.dropAction
     *
     * @param domDraggable DOM of draggable
     *
     * @param defaultAction Default action for dragging, when there is not over a droppable container
     * @param analysisObject
     */
    var AnalysisToken = function(domHelper, domDraggable, analysisObject) {
        AnalysisToken.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.common.views.drag.AnalysisToken";

        this._domHelper$ = $(domHelper);
        this._domDraggable$ = $(domDraggable);
        this._fixDragingPosition();

        this._defaultAction = DropAction.DENY;

        this.analysisObject = analysisObject;

        this.playDefaultAction();

    };
    OOUtil.extend(AnalysisToken, UIControl);

    AnalysisToken.prototype._fixDragingPosition = function() {
        var draggable$ = this._domDraggable$;

        var dragHandler = $.proxy(function(event, ui) {
            // Work around with jquery ui when scroll top of window is not 0
            ui.position.top = ui.offset.top;
            // Work around with jquery ui when scroll left of window is not 0
            ui.position.left = ui.offset.left;
            // Dispatch an event to notify the droppable
            ui.helper.trigger('sap.viz.controls.analysisDrag.events.drag', [event.pageX, event.pageY]);
        }, this);
        var dragStopHandler = $.proxy(function(event, ui) {
            off();
        }, this);

        var off = function() {
            draggable$.off('drag', dragHandler);
            draggable$.off('dragstop', dragStopHandler);
        };
        // Add event listener for fix dragging position
        off();
        draggable$.on('drag', dragHandler);
        draggable$.on('dragstop', dragStopHandler);
    };
    // ------------------------------------
    // Public methods
    // ------------------------------------
    AnalysisToken.prototype.defaultAction = function(value) {
        if (arguments.length > 0) {
            this._defaultAction = value;
            return this;
        } else {
            return this._defaultAction;
        }
    };
    /**
     *  clear away revert animation
     */
    AnalysisToken.prototype.killRevertAnimation = function() {
        var draggable$ = this._domDraggable$;
        if (draggable$) {
            var old = draggable$.draggable('option', 'revertDuration');
            // Set duration to 0 to kill animation
            draggable$.draggable('option', 'revertDuration', 0);
            // Reset the duration
            utils.defer(function() {
                try {
                    draggable$.draggable('option', 'revertDuration', old);
                } catch(error) {
                    // Ignore the error, since the draggable dom may already be removed.
                }
            });
        }
    };
    /**
     * dropTarget dropped UI control
     */
    AnalysisToken.prototype.dropTarget = function(value) {
    };

    /**
     * change the style for AnalysisToken accroding to action name
     * @param{String} value
     */
    AnalysisToken.prototype.currentAction = function(value) {
        if (arguments.length > 0) {
            this._domHelper$.data('sap.viz.controls.analysisDrag.action', value);
            this._domHelper$.trigger('sap.viz.controls.analysisDrag.events.dropAction', [value]);

            return this;
        } else {
            return this._domHelper$.data('sap.viz.controls.analysisDrag.action');
        }
    };
    /**
     * change the style to defualt value for DefaultAnalysisToken
     */
    AnalysisToken.prototype.playDefaultAction = function() {
        this.currentAction(this._defaultAction);
    };

    /**
     * show or hide warning message
     */
    AnalysisToken.prototype.showWarn = function(warnMsg) {
    };

    return AnalysisToken;
});

// @formatter:off
define('sap/viz/controls/common/views/drag/DefaultAnalysisToken',[
    'jquery',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/common/views/drag/AnalysisToken',
    'sap/viz/controls/common/views/drag/DropAction',
    'sap/viz/controls/common/utils/Utils'],
function($, CSSConst, AnalyticalType, OOUtil, UIControl,
    AnalysisToken, DropAction, Utils) {
// @formatter:on
    /**
     * @param domHelper
     * @param domDraggable
     * @param analysisObject
     */
    var DefaultAnalysisToken = function(domHelper, domDraggable, analysisObject) {
        DefaultAnalysisToken.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.common.views.drag.DefaultAnalysisToken";

        this._dom$ = $(domHelper);
        this._icon$ = null;
        this._warn$ = null;
        this._warnspan$ = null;

        this._dropTarget = null;

        this._createChildren();
        this._dom$.appendTo(document.body);
        this.currentAction(this._defaultAction);

        DefaultAnalysisToken._instance = this;
    };
    OOUtil.extend(DefaultAnalysisToken, AnalysisToken);

    // ------------------------------------
    // Static
    // ------------------------------------
    /**
     * set map between DropActon name and value
     */
    DefaultAnalysisToken._ACTION_TO_CLASS = (function() {
        var mapping = {};
        var prefix = CSSConst.COMMON_PREFIX;
        var className = prefix + 'havanaVXTabSprite16 ' + prefix + 'analysisDraggingToken-' + 'icon-dropAccepted';
        mapping[DropAction.ACCEPT] = className;
        mapping[DropAction.ACCEPT_AS_COPY] = className;
        className = prefix + 'havanaVXTabSprite16 ' + prefix + 'analysisDraggingToken-icon-dropAcceptedAsReplacement';
        mapping[DropAction.ACCEPT_AS_REPLACEMENT] = className;
        className = prefix + 'havanaVXTabSprite16 ' + prefix + 'analysisDraggingToken-' + 'icon-dropDenied';
        mapping[DropAction.DENY] = className;
        className = prefix + 'havanaSharedSprite16 ' + prefix + 'analysisDraggingToken-icon-dropAsTrash';
        mapping[DropAction.AS_TRASH] = className;
        return mapping;
    })();
    // ------------------------------------
    // Public methods
    // ------------------------------------
    /**
     * dropTarget dropped UI control
     */
    DefaultAnalysisToken.prototype.dropTarget = function(value) {
        if (arguments.length > 0) {
            this._dropTarget = value;
            return this;
        } else {
            return this._dropTarget;
        }
    };

    /**
     * change the style for DefaultAnalysisToken accroding to action name
     * @param{String} value
     */
    DefaultAnalysisToken.prototype.currentAction = function(value) {
        if (this._icon$) {
            if (arguments.length > 0) {
                this._icon$.removeClass(DefaultAnalysisToken._ACTION_TO_CLASS[DropAction.ACCEPT]);
                this._icon$.removeClass(DefaultAnalysisToken._ACTION_TO_CLASS[DropAction.ACCEPT_AS_COPY]);
                this._icon$.removeClass(DefaultAnalysisToken._ACTION_TO_CLASS[DropAction.ACCEPT_AS_REPLACEMENT]);
                this._icon$.removeClass(DefaultAnalysisToken._ACTION_TO_CLASS[DropAction.DENY]);
                this._icon$.removeClass(DefaultAnalysisToken._ACTION_TO_CLASS[DropAction.AS_TRASH]);

                this._icon$.addClass(DefaultAnalysisToken._ACTION_TO_CLASS[value]);
            }
        }
        return DefaultAnalysisToken.superclass.currentAction.apply(this, arguments);
    };

    /**
     * show or hide warning message
     */
    DefaultAnalysisToken.prototype.showWarn = function(warnMsg) {
        if (warnMsg) {
            if (!this._warn$) {
                this._warn$ = $(document.createElement('div')).addClass(CSSConst.COMMON_PREFIX + 'analysisDraggingToken-warn').appendTo(this._dom$);
                this._warnspan$ = $(document.createElement('span')).addClass(CSSConst.COMMON_PREFIX + 'analysisDraggingToken-warn-text').appendTo(this._warn$);
            }
            this._warnspan$.text(warnMsg);
            this._layoutWarn();
            this._dom$.bind("mousemove", $.proxy(function(e) {
                 this._layoutWarn(); //relayout when mouse move
            },this));
        } else {
            if (this._warn$) {
                this._warn$.hide(0);
                this._dom$.unbind("mousemove");//remove listener of mousemove
            }
        }
    };

    /**
     * layout warning message
     */
    DefaultAnalysisToken.prototype._layoutWarn = function() {
        //restore to original css
        this._warn$.removeClass(CSSConst.COMMON_PREFIX + 'analysisDraggingToken-warn');
        this._warn$.addClass(CSSConst.COMMON_PREFIX + 'analysisDraggingToken-warn');
        this._warnspan$.removeClass(CSSConst.COMMON_PREFIX + 'analysisDraggingToken-warn-text');
        this._warnspan$.addClass(CSSConst.COMMON_PREFIX + 'analysisDraggingToken-warn-text');
        this._warn$.css({
            'maxWidth' : $(window).width() + 'px'
        });

        //calculate left space, right space
        var domWidth = this._dom$.outerWidth();
        var domHeight = this._dom$.outerHeight();
        var leftSpace = this._dom$.offset().left - document.body.scrollLeft;
        var rightSpace = $(window).width() - this._dom$.offset().left - domWidth;

        //calculate margin top, margin left, min width, max width for warn
        var wrapText = false;
        var marginTop = 0;
        var marginLeft = 0;
        var warnMinWidth = domWidth;
        var warnMaxWidth = this._warnspan$.outerWidth();//include padding space
        this._warn$.hide(0);
        if(rightSpace >= warnMaxWidth) {//right and no wrap text
            marginTop = -domHeight;
            marginLeft = domWidth;
            warnMinWidth = warnMaxWidth;//change auto width from dom width to max width if locate right
        }else if(leftSpace >= warnMaxWidth) {//left and no wrap text
            marginLeft = -warnMaxWidth;
        }else if(rightSpace >= warnMinWidth){//right and wrap text
            wrapText = true;
            marginTop = -domHeight;
            marginLeft = domWidth;
            warnMinWidth = rightSpace;//change auto width from dom width to right space if locate right
        }else if(leftSpace >= warnMinWidth){//left and wrap text
            wrapText = true;
            marginLeft = -leftSpace;
            warnMaxWidth = leftSpace;//change auto width from max width to right space if locate left
        }else{//bottom and wrap text
            wrapText = true;
            marginLeft = -leftSpace;
        }

        //modify min and max width according to $(window).width()
        warnMinWidth = Math.min(warnMinWidth, $(window).width());
        warnMaxWidth = Math.min(warnMaxWidth, $(window).width());
        this._warn$.css({
            'marginTop' : marginTop + 'px',
            'marginLeft' : marginLeft + 'px',
            'minWidth' : warnMinWidth + 'px',
            'maxWidth' : warnMaxWidth + 'px'
        });
        if(wrapText){
            this._warnspan$.css({
                'whiteSpace' : 'pre-line'
            });
        }
        this._warn$.show(0);
    };

    // ------------------------------------
    // Private methods
    // ------------------------------------
    DefaultAnalysisToken.prototype._createChildren = function() {
        this._dom$.addClass(CSSConst.COMMON_PREFIX + 'analysisDraggingToken');
        var name = this.analysisObject.name();
        if (this.analysisObject.type() === AnalyticalType.HIERARCHY) {
            var selectedLevel = this.analysisObject.selectedHierarchyLevel();
            name = selectedLevel.name();
        }
        var span$ = $(document.createElement('span')).appendTo(this._dom$).text(name);
        span$.addClass(CSSConst.COMMON_PREFIX + 'text-ellipsis');
        var icon$ = this._icon$ = $(document.createElement('input')).appendTo(this._dom$);
        icon$.addClass(CSSConst.COMMON_PREFIX + 'analysisDraggingToken-icon');
    };

    return DefaultAnalysisToken;
});

define('sap/viz/controls/common/managers/DragManager',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/views/drag/DefaultAnalysisToken',
    'sap/viz/controls/common/views/drag/AnalysisToken',
    'sap/viz/controls/common/views/drag/DropAction'
], function($, DefaultAnalysisToken, AnalysisToken, DropAction) {
// @formatter:on

    /**
     * @class sap.viz.controls.common.managers.DragManager
     */
    var DragManager = function() {
        this.__className = "sap.viz.controls.common.managers.DragManager";
    };

    // ------------------------------------
    // Static
    // ------------------------------------
    DragManager._instance = null;
    DragManager.instance = function() {
        if (!DragManager._instance) {
            DragManager._instance = new DragManager();
        }
        return DragManager._instance;
    };
    /**
     * Enable a jqueryui draggable element to drop to viz controls, such as FeedingPanel.
     *
     * @method sap.viz.controls.common.managers.DragManager.enableDraggableFeeding
     * @param {HTMLElement} dom
     *                     A jqueryui draggable dom element
     * @param {sap.viz.controls.common.feeds.AnalysisObject} analysisObject
     *           An analysis object will be added to analysis container when drop.
     * @param {Array<{@link sap.viz.controls.common.feeds.AnalysisObject}>} backupAOs
     *           optional, when analysisObject is not valid, backupAOs will be checked one by one till some element is valid.
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var draggable$ = $('#divAppDraggable');
     * draggable$.draggable();
     * DragManager.enableDraggableFeeding(draggable$[0], analysisObject);
     * </pre>
     */
    DragManager.enableDraggableFeeding = function(dom, analysisObject, backupAOs) {
        var dom$ = $(dom);
        dom$.off('dragstart', DragManager._feedingDragStartHandler);
        dom$.on('dragstart', DragManager._feedingDragStartHandler);
        dom$.addClass(DragManager.DRAGGABLE_CLASS_ANALYSIS);
        // Bind analysisObject to draggable dom
        dom$.data(DragManager._KEY_ANALYSIS, analysisObject);
        // Bind backup analysis objects to draggable dom
        dom$.data(DragManager._KEY_BACKUPAOS, backupAOs);
    };

    /**
     * Disable the draggable element to drop to viz controls.
     *
     * @method sap.viz.controls.common.managers.DragManager.disableDraggableFeeding
     * @param {HTMLElement} dom
     *                     The dom element which is enableDraggableFeeding
     *
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var draggable$ = $('#divAppDraggable');
     * draggable$.draggable();
     * DragManager.enableDraggableFeeding(draggable$[0], analysisObject);
     * DragManager.disableDraggableFeeding(draggable$[0]);
     * </pre>
     */
    DragManager.disableDraggableFeeding = function(dom) {
        var dom$ = $(dom);
        dom$.off('dragstart', DragManager._feedingDragStartHandler);
        dom$.removeClass(DragManager.DRAGGABLE_CLASS_ANALYSIS);
        dom$.removeData(DragManager._KEY_ANALYSIS);
        dom$.removeData(DragManager._KEY_BACKUPAOS);
    };

    /**
     * Get a default helper element to be used for dragging display.
     *
     * @method sap.viz.controls.common.managers.DragManager.getDefaultHelper
     * @param {HTMLElement} dom
     *                     The dom element which is enableDraggableFeeding
     * @return {HTMLElement} helper
     *
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var draggable$ = $('#divAppDraggable');
     * draggable$.draggable({
     *     'helper' : function(event) {
     *         return DragManager.getDefaultHelper(this);
     *     }
     * });
     * DragManager.enableDraggableFeeding(draggable$[0], analysisObject);
     * </pre>
     *
     */
    DragManager.getDefaultHelper = function(dom) {
        var dom$ = $(dom);
        var analysis = dom$.data(DragManager._KEY_ANALYSIS);
        if (!analysis) {
            return null;
        }
        var helper = document.createElement('div');
        var token = new DefaultAnalysisToken(helper, dom, analysis);
        var backupAOs = dom$.data(DragManager._KEY_BACKUPAOS);
        if (backupAOs) {
            token.backupAOs = backupAOs;
        }
        $(helper).data(DragManager._KEY_TOKEN, token);

        return helper;
    };

    DragManager._feedingDragStartHandler = function(event, ui) {
        var dom$ = $(event.currentTarget);
        // Bind analysis to helper dom
        ui.helper.data(DragManager._KEY_ANALYSIS, dom$.data(DragManager._KEY_ANALYSIS));
        ui.helper.data(DragManager._KEY_DRAGGABLE, dom$[0]);
    };

    // Class should be added to draggble dom
    DragManager.DRAGGABLE_CLASS_ANALYSIS = 'viz-controls-common-analysisDraggable';
    // Key of analysisObject should be added to helper dom
    DragManager._KEY_ANALYSIS = 'sap.viz.controls.reserved.draggableFeeding.analysisObject';
    DragManager._KEY_BACKUPAOS = 'sap.viz.controls.reserved.draggableFeeding.backupAnalysisObjects';
    DragManager._KEY_TOKEN = 'sap.viz.controls.reserved.draggableFeeding.analysisToken';
    DragManager._KEY_DRAGGABLE = 'sap.viz.controls.reserved.draggableFeeding.domDraggable';
    // ------------------------------------
    // Public method
    // ------------------------------------
    DragManager.prototype.getAnalysisToken = function(helper$) {
        var token = helper$.data(DragManager._KEY_TOKEN);
        if (token) {
            return token;
        } else {
            var analysisObject = helper$.data(DragManager._KEY_ANALYSIS);
            if (analysisObject) {
                // Create a empty token for external dragging
                token = new AnalysisToken(helper$[0], helper$.data(DragManager._KEY_DRAGGABLE), analysisObject);
                helper$.data(DragManager._KEY_TOKEN, token);
                return token;
            } else {
                return null;
            }
        }
    };

    return DragManager;
});

define('sap/viz/controls/common/constants/FeedConst',[],function() {
    var FeedConst = {
        'ID_GEO' : 'geoFeatures',
        'ID_TRELLIS_ROW' : 'trellisRow',
        'ID_TRELLIS_COLUMN' : 'trellisColumn',
        'ID_PLAYFIELD' : 'playField',
        'TYPE_SUBTOTAL' : 'Subtotal'
    };
    return FeedConst;
});

define('sap/viz/controls/common/utils/PropertyFilterUtil',[],function() {
    var PropertyFilterUtil = {};

    var FILTERED_PROPERTIES = {
        "viz/bubble" : [
                "plotArea.children.maxBubbleHeight",
                "plotArea.children.maxBubbleWidth",
                "plotArea.children.maxPriValue",
                "plotArea.children.maxSecValue",
                "plotArea.children.minBubbleHeight",
                "plotArea.children.minBubbleWidth",
                "plotArea.children.minSecValue",
                "plotArea.children.minPriValue"
                ],
        "viz/geobubble" : [
                "plotArea.children.maxValue",
                "plotArea.children.minValue"
                ],
        "info/donut" : [
                "plotArea.children.dataLabel.children.renderer",
                "plotArea.children.sliceRenderer",
                "plotArea.children.highlight.children.contextInfos"
                ],
        "info/bar" : [
                "plotArea.children.primaryScale.children.autoMaxValue",
                "plotArea.children.primaryScale.children.autoMinValue",
                "plotArea.children.dataLabel.children.renderer",
                "categoryAxis.children.labelRenderer",
                "legendGroup.children.renderTo",
                "legendGroup.children.computedVisibility",
                "plotArea.children.markerRenderer"
                ],
        "info/column" : [
                "plotArea.children.primaryScale.children.autoMaxValue",
                "plotArea.children.primaryScale.children.autoMinValue",
                "plotArea.children.dataLabel.children.renderer",
                "categoryAxis.children.labelRenderer",
                "legendGroup.children.renderTo",
                "legendGroup.children.computedVisibility",
                "plotArea.children.markerRenderer"
                ],
        "info/line" : [
                "plotArea.children.primaryScale.children.autoMaxValue",
                "plotArea.children.primaryScale.children.autoMinValue",
                "plotArea.children.markerRenderer",
                "plotArea.children.dataLabel.children.renderer",
                "categoryAxis.children.labelRenderer",
                "legendGroup.children.renderTo",
                "legendGroup.children.computedVisibility",
                "plotArea.children.lineRenderer"
                ],
        "info/horizontal_line" : [
                "plotArea.children.primaryScale.children.autoMaxValue",
                "plotArea.children.primaryScale.children.autoMinValue",
                "plotArea.children.markerRenderer",
                "plotArea.children.dataLabel.children.renderer",
                "categoryAxis.children.labelRenderer",
                "plotArea.children.lineRenderer"
                ],
        "info/stacked_bar" : [
                "legendGroup.children.renderTo",
                "legendGroup.children.computedVisibility"
                ],
        "info/stacked_column" : [
                "legendGroup.children.renderTo",
                "legendGroup.children.computedVisibility"
                ],
        "info/combination" : [
                "legendGroup.children.renderTo",
                "legendGroup.children.computedVisibility"
                ],
        "info/bubble" : [
                "legendGroup.children.renderTo",
                "legendGroup.children.computedVisibility"
                ],
        "info/bullet" : [
                "legendGroup.children.renderTo",
                "legendGroup.children.computedVisibility"
                ],
        "info/time_bubble" : [
                "legendGroup.children.renderTo",
                "legendGroup.children.computedVisibility"
                ]
    }

    PropertyFilterUtil.addDefaultProperties = function(properties, chartType) {
        var filteredProperties = FILTERED_PROPERTIES[chartType];
        if (filteredProperties) {
            filteredProperties.forEach(function(path) {
                PropertyFilterUtil.addProperty(properties, path);
            });
        }
        //This property is for sFin
        PropertyFilterUtil.addProperty(properties, "interaction.behaviorType");

        return properties;
    }

    PropertyFilterUtil.addProperty = function(properties, propertyPath) {
        if (!propertyPath){
            return properties;
        }
        properties = properties || {};
        var temp = properties;
        var path = propertyPath.split(".");
        for(var i=0; i< path.length; i++){
            if(!temp.hasOwnProperty(path[i])){
                temp[path[i]] = {};
            }
            temp = temp[path[i]];
        }
        return properties;
    }

    return PropertyFilterUtil;
});
define('sap/viz/controls/common/metadata/MetadataBase',[
    'sap/viz/controls/common/utils/PropertyFilterUtil',
    'sap/viz/controls/common/constants/DatasetTypeConst'
// @formatter:off
], function(PropertyFilterUtil, DatasetTypeConst){
// @formatter:on
    /**
     * MetadataBase Class
     */
    var MetadataBase = function(raw) {
        this._raw = raw;
        this._support = {dataset : {}};
        this._support.dataset[DatasetTypeConst.CROSS_TABLE] = false;
        this._support.dataset[DatasetTypeConst.FLAT_TABLE] = false;
        this._bindingDefs = null;
    };

    MetadataBase.prototype.raw = function() {
        return this._raw;
    };

    MetadataBase.prototype.support = function() {
        return this._support;
    };

    MetadataBase.prototype.removeInvalidProperty = function(srcProperties) {
        var allProperties = this.getPropertiesDef();
        var type = this._raw.type;
        //Add internal properties
        allProperties = PropertyFilterUtil.addDefaultProperties(allProperties, type);
        this._removeInvalidProperty(srcProperties, allProperties);
    };

    return MetadataBase;
});

define('sap/viz/controls/common/bindingdef/BindingDef',[],function() {
    /**
     * BindingDef Class
     *
     * @param {Object} settings
     *  id {String}
     *  name {String}
     *  type {String} Bindable analysis object type
     *      Enumeration: dimension, measure, universal
     *  min {int} Min number of binding analysis objects
     *  max {int} Max number of binding analysis objects
     *  mndEnumerable {Boolean} A flag indicate the measure def whether could enumerate as mnd
     *  mndMode {String} A flag indicate the dimension def whether accept the mnd
     *      Enumeration:
     *      none: Not support MND
     *      support: Support MND and dimensions
     *      supportExclusively: Support MND and MND will confict with other dimensions
     *  bvrMNDPriority {int} The smaller the higher priority when auto feeding
     *  bvrPriority {int} The smaller the higher priority when auto feeding
     */
    var BindingDef = function(settings) {
        this._id = settings.id;
        this._name = settings.name;

        this._type = settings.type;

        this._min = settings.min || 0;
        this._max = settings.max || Infinity;

        this._mndEnumerable = settings.mndEnumerable !== undefined ? settings.mndEnumerable : false;
        this._mndMode = settings.mndMode || 'none';

        this._bvrPriority = settings.bvrPriority !== undefined ? settings.bvrPriority : Number.POSITIVE_INFINITY;
        this._bvrMNDPriority = settings.bvrMNDPriority !== undefined ? settings.bvrMNDPriority : Number.POSITIVE_INFINITY;
    };

    BindingDef.prototype.id = function() {
        return this._id;
    };

    BindingDef.prototype.name = function() {
        return this._name;
    };

    BindingDef.prototype.type = function() {
        return this._type;
    };

    BindingDef.prototype.min = function() {
        return this._min;
    };

    BindingDef.prototype.max = function() {
        return this._max;
    };

    BindingDef.prototype.mndEnumerable = function() {
        return this._mndEnumerable;
    };

    BindingDef.prototype.mndMode = function() {
        return this._mndMode;
    };

    BindingDef.prototype.bvrPriority = function() {
        return this._bvrPriority;
    };

    BindingDef.prototype.bvrMNDPriority = function() {
        return this._bvrMNDPriority;
    };

    BindingDef.prototype.equal = function(def) {
        var equal = true;
        equal = equal && this._id === def.id();
        equal = equal && this._name === def.name();
        equal = equal && this._type === def.type();
        equal = equal && this._min === def.min();
        equal = equal && this._max === def.max();
        equal = equal && this._mndMode === def.mndMode();
        equal = equal && this._bvrPriority === def.bvrPriority();
        equal = equal && this._bvrMNDPriority === def.bvrMNDPriority();
        return equal;
    };

    return BindingDef;
});

define('sap/viz/controls/common/bindingdef/adaptors/InfoBindingDefAdaptor',[
// @formatter:off
    'sap/viz/controls/common/constants/FeedConst',
    'sap/viz/controls/common/bindingdef/BindingDef'
], function(FeedConst, BindingDef){
// @formatter:on
    var _rolesSorting = ['layout', 'mark', 'trellisRow', 'trellisColumn'];
    var _rolesSortingMND = ['mark', 'layout', 'trellisRow', 'trellisColumn'];

    var _adaptType = function(type) {
        if (type === 'Dimension') {
            return 'dimension';
        } else if (type === 'Measure') {
            return 'measure';
        } else {
            return 'universal';
        }
    };

    return {
        'adapt' : function(infoDefs) {
            infoDefs.sort(function(infoDef1, infoDef2) {
                return _rolesSorting.indexOf(infoDef1.role) - _rolesSorting.indexOf(infoDef2.role);
            });

            var defs = [];
            infoDefs.forEach(function(infoDef, index) {
                defs.push(new BindingDef({
                    'id' : infoDef.id,
                    'name' : infoDef.name,
                    'type' : _adaptType(infoDef.type),
                    'min' : infoDef.min,
                    'max' : infoDef.max,
                    'mndEnumerable' : infoDef.type === 'Measure' && infoDef.role === 'layout',
                    'mndMode' : infoDef.acceptMND === true ? 'support' : 'none',
                    'bvrPriority' : index,
                    'bvrMNDPriority' : _rolesSortingMND.indexOf(infoDef.role) * 1000 + index
                }));
            });

            return defs;
        }
    };
});


define('sap/viz/controls/common/metadata/InfoMetadata',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/metadata/MetadataBase',
    'sap/viz/controls/common/bindingdef/adaptors/InfoBindingDefAdaptor',
    'require',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/constants/DatasetTypeConst'
], function($, OOUtil, MetadataBase, InfoBindingDefAdaptor, require, ChartConst, DatasetTypeConst){
// @formatter:on
    /**
     * InfoMetadata Class
     */
    var InfoMetadata = function(settings) {
        InfoMetadata.superclass.constructor.apply(this, arguments);
        this._support.dataset[DatasetTypeConst.FLAT_TABLE] = true;
    };
    OOUtil.extend(InfoMetadata, MetadataBase);

    InfoMetadata.prototype.getBindingDefs = function() {
        if (!this._bindingDefs) {
            this._bindingDefs = InfoBindingDefAdaptor.adapt(this._raw.bindings);

            this._bindingDefs.sort(function(def1, def2){
                return def1.bvrPriority() - def2.bvrPriority();
            });
        }
        return this._bindingDefs;
    };
    // TODO
    InfoMetadata.prototype.getPropertiesDef = function() {
        return this._raw.properties;
    };

    // TODO
    InfoMetadata.prototype.isBuiltIn = function() {
        return true;
    };


    InfoMetadata.prototype.getCategoryAxis = function() {
        var ChartTypeUtil = require('sap/viz/controls/common/utils/ChartTypeUtil');
        var categoryAxis, type = this._raw.type;
        if (ChartTypeUtil.isHorizontal(type)) {
            categoryAxis = ['yAxis'];
        } else {
            categoryAxis = ['xAxis'];
        }
        return categoryAxis;
    };




    InfoMetadata.prototype.getValueAxis = function() {
        var ChartTypeUtil = require('sap/viz/controls/common/utils/ChartTypeUtil');
        var valueAxis, type = this._raw.type;
        if (type === ChartConst.TYPE_SCATTER || type === ChartConst.TYPE_BUBBLE) {
            valueAxis = ['xAxis', 'yAxis'];
        } else {
            if (ChartTypeUtil.isHorizontal(type)) {
                valueAxis = ['xAxis'];
            } else {
                valueAxis = ['yAxis'];
            }
            if (ChartTypeUtil.isDual(type)) {
                valueAxis = [valueAxis[0], valueAxis[0] + "2"];
            }
        }

        return valueAxis;
    };



    InfoMetadata.prototype.getName = function() {
        return this._raw.name || this._raw.type;
    };

    InfoMetadata.prototype._removeInvalidProperty = function(srcProperties, defaultProperties) {
        if (!defaultProperties) {
            return;
        }

        var propertyName;
        for (propertyName in srcProperties) {
            if (!defaultProperties.hasOwnProperty(propertyName)) {
                delete srcProperties[propertyName];
            } else if (!defaultProperties[propertyName].supportedValueType) {
                var children = defaultProperties[propertyName].children;
                if (children) {
                    this._removeInvalidProperty(srcProperties[propertyName], children);
                }
            }
        }
    };

    InfoMetadata.prototype.dataScale = function() {
        return this._raw.scales;
    };

    return InfoMetadata;
});

define('sap/viz/controls/common/bindingdef/adaptors/VizFeedingDefAdaptor',[
// @formatter:off
    'sap/viz/controls/common/constants/FeedConst',
    'sap/viz/controls/common/bindingdef/BindingDef'
], function(FeedConst, BindingDef){
// @formatter:on
    var VizFeedingDefAdaptor = {};

    VizFeedingDefAdaptor.adapt = function(feedingDefs) {
        var defs = [];
        feedingDefs.forEach(function(feedingDef, index, array) {
            if (feedingDef.id === 'multiplier') {
                defs = defs.concat(_adaptTrellis(feedingDef));
            } else if (feedingDef.type === 'Dimension') {
                defs.push(_adaptDimension(feedingDef));
            } else if (feedingDef.type === 'Measure') {
                defs.push(_adaptMeasure(feedingDef));
            }
        });
        return defs;
    };

    var _adaptMeasure = function(feedingDef) {
        return new BindingDef({
            'id' : feedingDef.id,
            'name' : feedingDef.name,
            'type' : 'measure',
            'min' : feedingDef.min,
            'max' : feedingDef.max,
            'mndEnumerable': true,
            'mndMode' : 'none',
            'bvrPriority' : feedingDef.mgIndex,
            'bvrMNDPriority' : undefined
        });
    };

    var _adaptDimension = function(feedingDef) {
        var min = feedingDef.minStackedDims !== undefined ? feedingDef.minStackedDims : feedingDef.min;
        var max = feedingDef.maxStackedDims !== undefined ? feedingDef.maxStackedDims : Number.POSITIVE_INFINITY;
        var mnd = _adaptMND(feedingDef);
        return new BindingDef({
            'id' : feedingDef.id,
            'name' : feedingDef.name,
            'type' : 'dimension',
            'min' : min,
            'max' : max,
            'mndMode' : mnd.mode,
            'bvrPriority' : feedingDef.aaIndex,
            'bvrMNDPriority' : mnd.priority
        });
    };

    var _adaptTrellis = function(feedingDef) {
        var mnd = _adaptMND(feedingDef);
        return [new BindingDef({
            'id' : FeedConst.ID_TRELLIS_ROW,
            'name' : feedingDef.name,
            'type' : 'dimension',
            'min' : 0,
            'max' : 3,
            'mndMode' : mnd.mode,
            'bvrPriority' : Number.POSITIVE_INFINITY,
            'bvrMNDPriority' : mnd.priority
        }), new BindingDef({
            'id' : FeedConst.ID_TRELLIS_COLUMN,
            'name' : feedingDef.name,
            'type' : 'dimension',
            'min' : 0,
            'max' : 3,
            'mndMode' : mnd.mode,
            'bvrPriority' : Number.POSITIVE_INFINITY,
            'bvrMNDPriority' : mnd.priority
        })];
    };

    var _adaptMND = function(feedingDef) {
        var mode, priority;
        if (feedingDef.acceptMND !== undefined && feedingDef.acceptMND !== -1 && feedingDef.acceptMND !== false) {
            mode = feedingDef.max === 1 ? 'supportExclusively' : 'support';
            priority = feedingDef.acceptMND * -1;
        } else {
            mode = 'none';
            priority = undefined;
        }
        return {
            'mode' : mode,
            'priority' : priority
        };
    };

    return VizFeedingDefAdaptor;
});

define('sap/viz/controls/common/metadata/VizMetadata',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/metadata/MetadataBase',
    'sap/viz/controls/common/bindingdef/adaptors/VizFeedingDefAdaptor',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/constants/DatasetTypeConst'
], function($, OOUtil, MetadataBase, VizFeedingDefAdaptor, ChartConst, DatasetTypeConst){
// @formatter:on
    /**
     * VizMetadata Class
     */
    var VizMetadata = function() {
        VizMetadata.superclass.constructor.apply(this, arguments);
        if ( (this._raw.id === ChartConst.TYPE_TABLE) || (this._raw.id === ChartConst.TYPE_CROSSTAB) ) {
            this._support.dataset[DatasetTypeConst.RAW] = true;
        } else if ( this._raw.id === ChartConst.TYPE_GEO_MAP) {
            this._support.dataset[DatasetTypeConst.ARRAY_FLAT_TABLE] = true;
        } else {
            this._support.dataset[DatasetTypeConst.CROSS_TABLE] = true;
        }
    };
    OOUtil.extend(VizMetadata, MetadataBase);

    VizMetadata.prototype.getBindingDefs = function() {
        if (!this._bindingDefs) {
            this._bindingDefs = VizFeedingDefAdaptor.adapt(this._raw.allFeeds());
            
            this._bindingDefs.sort(function(def1, def2){
                return def1.bvrPriority() - def2.bvrPriority();
            });
        }
        return this._bindingDefs;
    };

    VizMetadata.prototype.getPropertiesDef = function() {
        return this._raw.allProperties();
    };

    VizMetadata.prototype.isBuiltIn = function() {
        return this._raw.isBuiltIn;
    };

    VizMetadata.prototype.getCategoryAxis = function() {
        return this._raw.categoryAxis;
    };

    VizMetadata.prototype.getValueAxis = function() {
        return this._raw.valueAxis;
    };

    VizMetadata.prototype.getName = function() {
        return this._raw.name;
    };

    VizMetadata.prototype._removeInvalidProperty = function(srcProperties, defaultProperties) {
        var propertyName;
        for (propertyName in srcProperties) {
            if (!defaultProperties.hasOwnProperty(propertyName)) {
                delete srcProperties[propertyName];
            } else if (!defaultProperties[propertyName].supportedValueType) {
                this._removeInvalidProperty(srcProperties[propertyName], defaultProperties[propertyName]);
            }
        }
    };

    VizMetadata.prototype.dataScale = function() {
        return this._raw.dataScale;
    };

    return VizMetadata;
});

define('sap/viz/controls/common/metadata/MetadataFactory',[
// @formatter:off
    'sap/viz/controls/common/metadata/InfoMetadata',
    'sap/viz/controls/common/metadata/VizMetadata'
], function(InfoMetadata, VizMetadata){
// @formatter:on
    var _cache = {};
    return {
        'get' : function(visualizationType) {
            if (_cache[visualizationType] !== undefined) {
                return _cache[visualizationType];
            }
            var raw, metadata = null;
            try {
                raw = sap.viz.api.metadata.Viz.get(visualizationType);
                if (raw && raw.type) {
                    metadata = new InfoMetadata(raw);
                }
            } catch(err) {
            }
            if (!metadata) {
                try {
                    raw = sap.viz.api.manifest.Viz.get(visualizationType);
                    if (raw && raw[0]) {
                        metadata = new VizMetadata(raw[0]);
                    }
                } catch(err) {
                }
            }
            return (_cache[visualizationType] = metadata);
        }
    };
});

// @formatter:off
define('sap/viz/controls/common/utils/VizUtils',
[
    'jquery',
    'sap/viz/controls/common/metadata/MetadataFactory',
    'sap/viz/controls/common/constants/DatasetTypeConst',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/feeds/FeedItem',
    'sap/viz/controls/common/feeds/AnalysisObject',
    'sap/viz/controls/common/utils/PropertyFilterUtil'
],
function($, MetadataFactory, DatasetTypeConst, Utils, FeedItem, AnalysisObject, PropertyFilterUtil) {
// @formatter:on
    var VizUtils = {};

    /**
     * Chech whether dataset has fake data. For dataset is null, the return value is true.
     * @param {Object} dataset
     * @returns {Boolean}
     */
    VizUtils.hasFakeData = function(dataset){
        var hasFakeData= true;
        if(dataset){
            hasFakeData = false;
        // TODO: handle FlatTable
            if( Utils.isFunction(dataset.hasFakeData)){
            // for CrossTableDataset
                hasFakeData = dataset.hasFakeData();
            } else {
                // for Table which is RawDataset
                hasFakeData = dataset.isFake === true ? true : false;
            }
        }

        return hasFakeData;
    };

    VizUtils.getDatasetType = function(dataset){
        if (dataset){
            // TODO: flatTable?
            if (dataset instanceof sap.viz.api.data.CrosstableDataset){
                return DatasetTypeConst.CROSS_TABLE;
            } else if (dataset instanceof sap.viz.api.data.FlatTableDataset) {
                return DatasetTypeConst.FLAT_TABLE;
            } else {
                return DatasetTypeConst.RAW;
            }
        }

        return DatasetTypeConst.CROSS_TABLE;
    };

    /**
     * judge object type is or not Array of FeedItem
     * @param {object}
     */
    VizUtils.isArrayOfFeedItem = function(obj) {
        return VizUtils._isArrayOf(obj, FeedItem);
    };

    /**
     * judge object type is or not Array of AnalysisObject
     * @param {object}
     */
    VizUtils.isArrayOfAnalysisObject = function(obj) {
        return VizUtils._isArrayOf(obj, AnalysisObject);
    };

    VizUtils._isArrayOf = function(obj, className) {
        if (Utils.isArray(obj)) {
            for (var i = 0; i < obj.length; i++) {
                if (!(obj[i] instanceof className)) {
                    return false;
                }
            }
            return true;
        }
        return false;
    };

    VizUtils._parseInfoProperties = function(propertiesConfig){
        var result = {};
        for(var name in propertiesConfig){
            if( propertiesConfig.hasOwnProperty(name) && propertiesConfig[name]){
                var config = propertiesConfig[name];
                if (name === "children") {
                    result = VizUtils._parseInfoProperties(config);
                } else {
                    var property = config.name || name;
                    if (config.defaultValue) {
                        result[property] = config.defaultValue
                    } else if(Utils.type(config) === "object"){
                        result[property] = VizUtils._parseInfoProperties(config);
                    } else {
                        result[property] = config;
                    }
                }
            }
        }

        return result;
    };


    VizUtils._parseVizProperties = function(propertiesConfig){
        var result = {};
        for(var name in propertiesConfig){
            if( propertiesConfig.hasOwnProperty(name) && propertiesConfig[name]){
                var config = propertiesConfig[name];
                var property = config.name || name;
                if(config.supportedValueType === "Object"){
                    if(config.supportedValues){
                        result[property] = VizUtils._parseVizProperties(config.supportedValues);
                    }
                } else {
                    result[property] = config.defaultValue;
                }
            }
        }

        return result;
    };

    VizUtils._convertInfoProperties = function(allPropertiesConfig){
        var result = {};
        for(var module in allPropertiesConfig){
            if( allPropertiesConfig.hasOwnProperty(module) ){
                result[module] = VizUtils._parseInfoProperties(allPropertiesConfig[module])
            }
        }
        return result;
    };

    VizUtils._convertVizProperties = function(allPropertiesConfig){
        var result = {};
        for(var module in allPropertiesConfig){
            if( allPropertiesConfig.hasOwnProperty(module) ){
                result[module] = VizUtils._parseVizProperties(allPropertiesConfig[module])
            }
        }
        return result;
    };

    VizUtils._getAllProperties = function(type){
        if( !type ){
            return null;
        }
        var metadata = MetadataFactory.get(type);
        if( !metadata){
            return null;
        }
        var propertiesConfig = metadata.getPropertiesDef();
        if( !propertiesConfig ){
            return null;
        }
        return propertiesConfig;
    };

    VizUtils._getDefaultProperties = function(type){
        var propertiesConfig = this._getAllProperties(type);
        if (propertiesConfig) {
            if(type && type.indexOf("info/") === 0){
                return VizUtils._convertInfoProperties(propertiesConfig);
            }else if(type && type.indexOf("viz/") === 0){
                return VizUtils._convertVizProperties(propertiesConfig);
            }else{
                return null;
            }
        } else {
            return null;
        }
    };
    VizUtils._propertyExist = function(properties, propertyPath){
        if(!propertyPath){
            return false;
        }
        var path = propertyPath.split(".");
        var target = properties;
        var result = false;
        for(var i=0; i< path.length; ++i){
            if(target && target.hasOwnProperty(path[i])){
                target = target[path[i]];
                result = true;
            } else {
                result = false;
                break;
            }
        }
        return result;
    };
    VizUtils.hasProperties = function(type, properties){
        var result = [];
        if(!properties || properties.length === 0){
            return result;
        }
        var defaultProperties = VizUtils._getDefaultProperties(type);
        //This is for internal properties which are not exported
        defaultProperties = PropertyFilterUtil.addDefaultProperties(defaultProperties, type);
        for(var i=0; i<properties.length; ++i){
            if(Utils.isArray(properties[i])){
                result[i] = false;
                for(var n=0; n<properties[i].length; ++n){
                    result[i] = result[i] || VizUtils._propertyExist(defaultProperties, properties[i][n]);
                }
            }else{
                result[i] = VizUtils._propertyExist(defaultProperties, properties[i]);
            }
        }
        return result;
    };

    VizUtils._removeProperty = function(properties, propertyPath){
        if(!propertyPath){
            return null;
        }
        var path = propertyPath.split(".");
        var target = properties;
        for(var i=0; i< path.length; ++i){
            if(target && target.hasOwnProperty(path[i])){
                if(i === path.length-1){
                    var result = target[path[i]];
                    delete target[path[i]];
                    return result;
                }else{
                    target = target[path[i]];
                }
            } else {
                break;
            }
        }
        return null;
    };

    VizUtils._getProperty = function(properties, propertyPath) {
        if(!propertyPath){
            return null;
        }
        var path = propertyPath.split(".");
        var target = properties;
        for(var i=0; i< path.length; ++i){
            if(target && target.hasOwnProperty(path[i])){
                if(i === path.length-1){
                    var result = target[path[i]];
                    return result;
                }else{
                    target = target[path[i]];
                }
            } else {
                break;
            }
        }
        return null;
    };

    VizUtils.removeProperties = function(properties, removeProperties){
        if(!removeProperties || removeProperties.length === 0){
            return ;
        }
        for(var i=0; i<removeProperties.length; ++i){
            VizUtils._removeProperty(properties, removeProperties[i]);
        }
    };

    VizUtils.getValueAxis = function(type){
        return MetadataFactory.get(type).getValueAxis();
    };
    VizUtils.isValueAxis = function(type, axisName){
        var valueAxis = VizUtils.getValueAxis(type);
        if(valueAxis){
            for(var i=0; i<valueAxis.length; i++){
                if(axisName === valueAxis[i]){
                    return true;
                }
            }
        }
        return false;
    };

    /**
     * get invalid value axis scale properties, add them to corresponding position, remove invalid properties
     * @param {object} properties, srctype, type
     * @return (object)converted properties
     */
    VizUtils.convertValueAxisScale = function(properties, srcType, type){
        if(!properties || !srcType || !type){
            return;
        }

        var srcValueAxis = VizUtils.getValueAxis(srcType);
        var valueAxis = VizUtils.getValueAxis(type);
        if(!srcValueAxis || srcValueAxis.length === 0){
            return;
        }
        var scaleProperties = [];
        for(var i=0; i<srcValueAxis.length; ++i){
            scaleProperties[i] = VizUtils._removeProperty(properties, srcValueAxis[i] + ".scale");
        }
        if(valueAxis && valueAxis.length > 0){
            for(var n=0; n<valueAxis.length; ++n){
                if(scaleProperties[n]){
                    properties[valueAxis[n]] = properties[valueAxis[n]] || {};
                    properties[valueAxis[n]]["scale"] = scaleProperties[n];
                }
            }
        }
    };

    /**
     * get category axis properties
     * @param {string} type
     * @return (object-array)converted properties
     */
    VizUtils.getCategoryAxis = function(type){
        return MetadataFactory.get(type).getCategoryAxis();
    };

    /**
     * remove invalid properties according to chart type
     * @param {object} srcProperties, (string)type
     * @return (object)valid properties object
     */
    VizUtils.getValidProperties = function(srcProperties, type) {
        var reProperties = Utils.clone(srcProperties);
        MetadataFactory.get(type).removeInvalidProperty(reProperties);
        return reProperties;
    };

    /**
     * convert properties when chart type changed
     * @param {object} srcProperties, (string)srctype, (string)type
     * @return (object)converted properties
     */
    VizUtils.convertProperties = function(srcProperties, srcType, type) {
        if (!srcProperties || !srcType || !type || srcType === type) {
            return srcProperties;
        }

        var properties = Utils.clone(srcProperties);
        var srcValueAxis = VizUtils.getValueAxis(srcType);
        var valueAxis = VizUtils.getValueAxis(type);
        var i, n;

        if(srcValueAxis && srcValueAxis.length !== 0){
            var valueAxisProperties = [];
            for(i = 0; i < srcValueAxis.length; ++i){
                valueAxisProperties[i] = VizUtils._getProperty(srcProperties, srcValueAxis[i]);
            }
            if(valueAxis && valueAxis.length > 0){
                for(n = 0; n < valueAxis.length; ++n){
                    if(valueAxisProperties[n]){
                        properties[valueAxis[n]] = valueAxisProperties[n];
                    }
                }
            }
        }

        var srcCategoryAxis = VizUtils.getCategoryAxis(srcType);
        var categoryAxis = VizUtils.getCategoryAxis(type);
        if(srcCategoryAxis && srcCategoryAxis.length !== 0){
            var categoryAxisProperties = [];
            for(i = 0; i < srcValueAxis.length; ++i){
                categoryAxisProperties[i] = VizUtils._getProperty(srcProperties, srcCategoryAxis[i]);
            }
            if(categoryAxis && categoryAxis.length > 0){
                for(n = 0; n < categoryAxis.length; ++n){
                    if(categoryAxisProperties[n]){
                        properties[categoryAxis[n]] = categoryAxisProperties[n];
                    }
                }
            }
        }
        return properties;
    }

    return VizUtils;
});

define('sap/viz/controls/common/utils/InfoChartUtil',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/metadata/MetadataFactory',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/VizUtils'
], function($, MetadataFactory, AnalyticalType, utils, VizUtils){
// @formatter:on

    // supported chart type dictionary, internal use only
    var CHART_TYPES = {
        'line': 1,
        'column': 1,
        'bar': 1,
        'donut': 1,
        'horizontal_line': 1,
        'stacked_column': 1,
        'stacked_bar': 1,
        '100_stacked_column': 1,
        '100_stacked_bar': 1,
        'pie' : 1,
        'bubble' : 1,
        'scatter' : 1,
        'dual_column' : 1,
        'dual_line' : 1,
        'combination' : 1,
        'dual_bar' : 1,
        'horizontal_combination' : 1,
        'dual_stacked_column' : 1,
        'dual_stacked_bar' : 1,
        'dual_horizontal_line' : 1,
        'treemap' : 1,
        'time_value_bubble' : 1,
        'bullet' : 1
    };

    var InfoChartUtil = {
        getInfoType: function(vizType) {
            var match = String(vizType).match(/^viz\/(multi_)?(.*)$/);

            if (match && CHART_TYPES[match[2]]) {
                // time_value_bubble
                match[2] = match[2] === 'time_value_bubble' ? 'time_bubble' : match[2];
                // trellis
                match[2] = match[1] ? "trellis_" + match[2] : match[2];
                
                var infoType = "info/" + match[2];
                if (MetadataFactory.get(infoType)) {
                    return infoType;
                }
            }
            return null;
        },

        isInfoChart: function(type) {
            return (/^info\/\w+$/).test(type);
        },

        getVizType: function(infoType) {
            return this.isInfoChart(infoType) ? infoType.replace('info/', 'viz/') : null;
        },

        buildInfoDataset: function(ctbDataset) {
            // translate from cross table dataset into flat table dataset
            var data = sap.viz.data.utils.CTB2TBConvertUtil.crossTable2FlatTableData(ctbDataset);
            return new sap.viz.api.data.FlatTableDataset(data);
        },

        buildInfoFeeding: function(feeds, adjustMND) {
            // traslate FeedItem array into a mapping from feed id to AnalysisObject name array.
            var infoFeeds = {};
            for(var i = 0; i < feeds.length; i++) {
                var feed = feeds[i];
                var values = feed.values() || [];
                var list = infoFeeds[feed.id()] = [];

                for(var j = 0; j < values.length; j++) {
                    var aaObj = values[j];
                    if(aaObj.type() === AnalyticalType.MND) {
                        if(adjustMND) {
                            list.unshift("MeasureNamesDimension");
                        } else {
                            list.push("MeasureNamesDimension");
                        }
                    } else {
                        if(aaObj.type() === AnalyticalType.HIERARCHY) {
                            for(var k = 0; k < aaObj.hierarchyLevels().length; k++) {
                                var level = aaObj.hierarchyLevels()[k];
                                // use hierarchy level object id, in case its
                                // analysis object is also used in another
                                // hierarchy level object, but with a
                                // different hierarchy level name.
                                list.push(level.id());
                                if(level.selected()) {
                                    break;
                                }
                            }
                        } else {
                            list.push(aaObj.id());
                        }
                    }
                }
            }

            return infoFeeds;
        },

        buildInfoProperties: function(vizType, vizProperties) {
            var infoProperties = $.extend(true, {}, vizProperties);

            // InfoChart has renamed xAxis/yAxis to categoryAxis/valueAxis
            var categoryAxisArray = VizUtils.getCategoryAxis(vizType);
            if (categoryAxisArray && categoryAxisArray.length) {
                // primary axis
                renameProperty(infoProperties, categoryAxisArray[0], 'categoryAxis');
                // secondary axis
                if (categoryAxisArray.length > 1) {
                    renameProperty(infoProperties, categoryAxisArray[1], 'categoryAxis2');
                }
            }

            var valueAxisArray = VizUtils.getValueAxis(vizType);
            if (valueAxisArray && valueAxisArray.length) {
                // primary axis
                renameProperty(infoProperties, valueAxisArray[0], 'valueAxis');
                // secondary axis
                if (valueAxisArray.length > 1) {
                    renameProperty(infoProperties, valueAxisArray[1], 'valueAxis2');
                }
            }

            // dataLabel
            moveProperty(infoProperties, 'dataLabel', 'plotArea.dataLabel');

            // background
            moveProperty(infoProperties, 'background', 'plotArea.background');

            // background.color
            moveProperty(infoProperties, 'plotArea.background.body.color', 'plotArea.background.color');

            // .scale
            moveProperty(infoProperties, 'valueAxis.scale', 'plotArea.primaryScale');
            moveProperty(infoProperties, 'valueAxis2.scale', 'plotArea.secondaryScale');

            // .gridline
            // [FIXME] gridlines from 2 axes are conflicting with each other?
            moveProperty(infoProperties, 'valueAxis2.gridline', 'plotArea.gridline');
            moveProperty(infoProperties, 'valueAxis.gridline', 'plotArea.gridline');

            // .axisline => .axisLine
            renameProperty(infoProperties.valueAxis, 'axisline', 'axisLine');
            renameProperty(infoProperties.valueAxis2, 'axisline', 'axisLine');
            renameProperty(infoProperties.categoryAxis, 'axisline', 'axisLine');
            renameProperty(infoProperties.categoryAxis2, 'axisline', 'axisLine');

            // .lineSize => .axisLine.size
            moveProperty(infoProperties, 'valueAxis.lineSize', 'valueAxis.axisLine.size');
            moveProperty(infoProperties, 'valueAxis2.lineSize', 'valueAxis2.axisLine.size');
            moveProperty(infoProperties, 'categoryAxis.lineSize', 'categoryAxis.axisLine.size');
            moveProperty(infoProperties, 'categoryAxis2.lineSize', 'categoryAxis2.axisLine.size');

            //formatString
            updateFormatString(infoProperties, 'valueAxis.label.formatString');
            updateFormatString(infoProperties, 'valueAxis2.label.formatString');
            updateFormatString(infoProperties, 'plotArea.dataLabel.formatString');
            updateFormatString(infoProperties, 'tooltip.formatString');

            return infoProperties;
        },

        buildVizProperties: function(vizType, infoProperties) {
            var vizProperties = $.extend(true, {}, infoProperties);

            // InfoChart has renamed xAxis/yAxis to categoryAxis/valueAxis
            var categoryAxisArray = VizUtils.getCategoryAxis(vizType);
            if (categoryAxisArray && categoryAxisArray.length) {
                // primary axis
                renameProperty(vizProperties, 'categoryAxis', categoryAxisArray[0]);
                // secondary axis
                if (categoryAxisArray.length > 1) {
                    renameProperty(vizProperties, 'categoryAxis2', categoryAxisArray[1]);
                }
            }

            var valueAxisArray = VizUtils.getValueAxis(vizType);
            if (valueAxisArray && valueAxisArray.length) {
                // .scale
                moveProperty(vizProperties, 'plotArea.primaryScale', 'valueAxis.scale');
                moveProperty(vizProperties, 'plotArea.secondaryScale', 'valueAxis2.scale');

                // .gridline
                moveProperty(vizProperties, 'plotArea.gridline', 'valueAxis.gridline');
                moveProperty(vizProperties, 'plotArea.gridline', 'valueAxis2.gridline');

                // primary axis
                renameProperty(vizProperties, 'valueAxis', valueAxisArray[0]);
                // secondary axis
                if (valueAxisArray.length > 1) {
                    renameProperty(vizProperties, 'valueAxis2', valueAxisArray[1]);
                }
            }

            // dataLabel
            moveProperty(vizProperties, 'plotArea.dataLabel', 'dataLabel');

            // background
            moveProperty(vizProperties, 'plotArea.background', 'background');

            // background.color
            moveProperty(vizProperties, 'plotArea.background.color', 'plotArea.background.body.color');

            // .axisline => .axisLine
            renameProperty(vizProperties.xAxis, 'axisLine', 'axisline');
            renameProperty(vizProperties.xAxis2, 'axisLine', 'axisline');
            renameProperty(vizProperties.yAxis, 'axisLine', 'axisline');
            renameProperty(vizProperties.yAxis2, 'axisLine', 'axisline');

            // .lineSize => .axisLine.size
            moveProperty(vizProperties, 'xAxis.axisLine.size', 'xAxis.lineSize');
            moveProperty(vizProperties, 'xAxis2.axisLine.size', 'xAxis2.lineSize');
            moveProperty(vizProperties, 'yAxis.axisLine.size', 'yAxis.lineSize');
            moveProperty(vizProperties, 'yAxis2.axisLine.size', 'yAxis2.lineSize');

            //formatString
            //updateFormatString(infoProperties, 'valueAxis.label.formatString');
            //updateFormatString(infoProperties, 'valueAxis2.label.formatString');
            //updateFormatString(infoProperties, 'plotArea.dataLabel.formatString');
            //updateFormatString(infoProperties, 'tooltip.formatString');

            return vizProperties;
        },
        
        buildInfoSeries: function(feedingItem, dataset) {
            var regionColorNames = feedingItem['regionColor'];
            var seriesItemsMap = {}, seriesNames = [];
            var item, valuedData, seriesName, seriesData, seriesItem, i, j;

            if (!regionColorNames || regionColorNames.length === 0) {
                return null;
            }
            var axisLables = feedingItem['axisLabels'];
            var measureNames = feedingItem['primaryValues'];
            var measureValued = false;
            if (regionColorNames.indexOf('MeasureNamesDimension') >= 0) {
                regionColorNames.splice(regionColorNames.indexOf('MeasureNamesDimension'), 1);
                measureValued = true;
            }

            if (regionColorNames.length <= 0) {
                var measureName;
                measureNames.forEach(function(measureName) {
                    for (i = 0; i < dataset.length; i++) {
                        item = dataset[i];
                        if (item[measureName] != null) {
                            seriesItem = {};
                            seriesItem['name'] = measureName;
                            seriesData = {};
                            seriesData['MeasureNamesDimension'] = measureName;
                            seriesItem['seriesData'] = seriesData;
                            seriesItemsMap[measureName] = seriesItem;
                            break;
                        }
                    }

                });
                return seriesItemsMap;
            }

            for (i = 0; i < dataset.length; i++) {
                item = dataset[i];
                valuedData = false;
                for (j = 0; j < measureNames.length; j++) {
                    if (item[measureNames[j]] != null) {
                        valuedData = true;
                        break;
                    }
                }
                if (valuedData) {
                    seriesName = item[regionColorNames[0]];
                    seriesData = {};
                    seriesItem = {};
                    seriesData[regionColorNames[0]] = item[regionColorNames[0]];
                    for (j = 1; j < regionColorNames.length; j++) {
                        seriesName = seriesName + " / " + item[regionColorNames[j]];
                        seriesData[regionColorNames[j]] = item[regionColorNames[j]];
                    }
                    if (measureValued) {
                        var seriesN, seriesD;
                        for (j = 0; j < measureNames.length; j++) {
                            if (!item.hasOwnProperty(measureNames[j])) {
                                continue;
                            }
                            seriesN = seriesName + " / " + measureNames[j];
                            if (seriesN && seriesNames.indexOf(seriesN) < 0) {
                                seriesNames.push(seriesN);
                                seriesD = utils.clone(seriesData);
                                seriesD[measureNames[j]] = item[measureNames[j]];
                                seriesItem = {};
                                seriesItem['name'] = seriesN;
                                seriesItem['seriesData'] = seriesD;
                                seriesItemsMap[seriesN] = seriesItem;
                            }
                        }
                    } else if (seriesName && seriesNames.indexOf(seriesName) < 0) {
                        seriesNames.push(seriesName);
                        seriesItem['name'] = seriesName;
                        seriesItem['seriesData'] = seriesData;
                        seriesItemsMap[seriesName] = seriesItem;
                    }
                }
            }
            return seriesItemsMap;
        }
     };

    // utility functions
    function getPath(context, path) {
        return path ? path.split('.').reduce(function(obj, partName) {
            return obj && typeof obj == 'object' ? obj[partName] : null;
        }, context) : context;
    }
    function setPath(context, path, value) {
        path.split('.').reduce(function(obj, partName, index, parts) {
            if(index < parts.length - 1){
                obj[partName] = obj[partName] != null ? obj[partName] : {};
            }else{
                obj[partName] = value;
            }
            return obj[partName];
        }, context);
    }
    function moveProperty(context, sourcePath, targetPath, reserveSource) {
        var v = getPath(context, sourcePath);
        if (v != null) {
            if (!reserveSource) {
                var parts = sourcePath.split('.');
                var prop = parts.pop();
                var parentPath = parts.join('.');
                delete getPath(context, parentPath)[prop];
            }
            setPath(context, targetPath, v);
        }
    }
    function renameProperty(context, oldProp, newProp) {
        if (context && oldProp in context) {
            context[newProp] = context[oldProp];
            delete context[oldProp];
        }
    }

    /**
     * Convert formatString from 2D array to string.
     */
    function updateFormatString(context, formatStringProp){
        var formatStringValue = getPath(context, formatStringProp);
        if(!formatStringValue){
            return;
        }
        if(utils.isString(formatStringValue)){
            return;
        }
        if(utils.isArray(formatStringValue) && utils.isArray(formatStringValue[0]) && utils.isString(formatStringValue[0][0])){
            setPath(context, formatStringProp, formatStringValue[0][0]);
        }
    }

    return InfoChartUtil;
});

define('sap/viz/controls/common/utils/TrellisUtils',[
// @formatter:off
    'sap/viz/controls/common/metadata/MetadataFactory',
    'sap/viz/controls/common/constants/ChartConst'
],
function(MetadataFactory, ChartConst){
// @formatter:on
    var typeProvider = {};
    var TrellisUtils = {};

    TrellisUtils.MULTIPLE = 'multi';
    TrellisUtils.TRELLIS = 'trellis';

    TrellisUtils._register = function(provider) {
        typeProvider[provider.prefix] = provider;
    };

    TrellisUtils._EMPTY_PROVIDER = {
        'isMultipleChart' : function(type) {
            return false;
        },
        'supportMultiChart' : function(type) {
            return false;
        },
        'toSingleChartType' : function(type) {
            return type;
        },
        'toMultiChartType' : function(type) {
            return type;
        }
    };
    TrellisUtils._getProvider = function(type) {
        var prefix = type.split('/')[0] + '/';
        return typeProvider[prefix] || TrellisUtils._EMPTY_PROVIDER;
    };

    TrellisUtils.providerName = function(type) {
        var provider = TrellisUtils._getProvider(type);
        return provider.name;
    };

    TrellisUtils.isMultipleChart = function(type) {
        if (!type) {
            return false;
        }

        var provider = TrellisUtils._getProvider(type);
        return provider.isMultipleChart(type);
    };

    /**
     * Check whether type is multi chart or can be converted to multi chart
     * @param {String} type
     * @returns {Boolean}
     */
    TrellisUtils.supportMultiChart = function(type) {
        if (!type) {
            return false;
        }

        var provider = TrellisUtils._getProvider(type);
        return provider.supportMultiChart(type);
    };

    TrellisUtils.toSingleChartType = function(type) {
        if (!type) {
            return type;
        }

        var provider = TrellisUtils._getProvider(type);
        return provider.toSingleChartType(type);
    };

    TrellisUtils.toMultiChartType = function(type) {
        if (!type) {
            return type;
        }

        var provider = TrellisUtils._getProvider(type);
        if (provider.isMultipleChart(type)) {
            return type;
        } else {
            return provider.toMultiChartType(type);
        }
    };

    function createProvider(prefix, tag) {
        var trellisPrefix = prefix + tag + '_';
        var provider = {
            'prefix' : prefix,
            'name' : tag
        };
        provider.isMultipleChart = function(type) {
            if (!type) {
                return false;
            }
            return (type.indexOf(trellisPrefix) === 0);
        };
        provider.supportMultiChart = function(type) {
            if (type.indexOf(trellisPrefix) === 0) {
                return true;
            }
            //already check vizType can be converted to multi chart in method toMultiChartType
            //if vizType can not be converted then multiType equal vizType
            var multiType = provider.toMultiChartType(type);
            if (multiType !== type) {
                return true;
            } else {
                return false;
            }
        };
        provider.toSingleChartType = function(type) {
            if (provider.isMultipleChart(type)) {
                return type.replace(trellisPrefix, prefix);
            }
            return type;
        };
        provider.toMultiChartType = function(type) {
            var multiType = type.replace(prefix, trellisPrefix);
            if (MetadataFactory.get(multiType)) {
                return multiType;
            }
            return type;
        };
        return provider;
    }


    TrellisUtils._register(createProvider('viz/', TrellisUtils.MULTIPLE));
    TrellisUtils._register(createProvider('info/', TrellisUtils.TRELLIS));

    return TrellisUtils;
});

define('sap/viz/controls/common/utils/ChartTypeUtil',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/metadata/MetadataFactory',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/constants/DatasetTypeConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/InfoChartUtil',
    'sap/viz/controls/common/utils/TrellisUtils'],
function($, MetadataFactory, ChartConst, DatasetTypeConst, LangManager, InfoChartUtil, TrellisUtils) {
// @formatter:on

    var ChartTypeUtil = {};

    /**
     * set map for chartType ,vizType ,vizDirection and vizStacking
     */
    ChartTypeUtil._CVOM_TYPE_MAPPING = function() {
        var mapping = {};

        /**
         * @param chartType type in CVOM context
         * @param vizType type in viz control context
         */
        var add = function(chartType, vizType, vizDirection, vizStacking) {
            var p = {
                vizType : vizType
            };
            if (vizDirection) {
                p.vizDirection = vizDirection;
            }
            if (vizStacking) {
                p.vizStacking = vizStacking;
            }
            mapping[chartType] = p;
        };

        // @formatter:off
        add(ChartConst.TYPE_STACKED_BAR,
            ChartConst.TYPE_STACKED_BAR, null, ChartConst.STACKING_NORMAL);
        add(ChartConst.TYPE_100_STACKED_BAR,
            ChartConst.TYPE_STACKED_BAR, null, ChartConst.STACKING_FULL);
        add(ChartConst.TYPE_STACKED_COLUMN,
            ChartConst.TYPE_STACKED_COLUMN, null, ChartConst.STACKING_NORMAL);
        add(ChartConst.TYPE_100_STACKED_COLUMN,
            ChartConst.TYPE_STACKED_COLUMN, null, ChartConst.STACKING_FULL);

        add(ChartConst.TYPE_3D_BAR,
            ChartConst.TYPE_3D_COLUMN, ChartConst.DIRECTION_HORIZONTAL);
        add(ChartConst.TYPE_3D_COLUMN,
            ChartConst.TYPE_3D_COLUMN, ChartConst.DIRECTION_VERTICAL);

        add(ChartConst.TYPE_HORIZONTAL_LINE,
            ChartConst.TYPE_LINE, ChartConst.DIRECTION_HORIZONTAL);
        add(ChartConst.TYPE_LINE,
            ChartConst.TYPE_LINE, ChartConst.DIRECTION_VERTICAL);

        add(ChartConst.TYPE_BAR, ChartConst.TYPE_BAR);
        add(ChartConst.TYPE_COLUMN, ChartConst.TYPE_COLUMN);

        add(ChartConst.TYPE_HORIZONTAL_AREA,
            ChartConst.TYPE_AREA, ChartConst.DIRECTION_HORIZONTAL, ChartConst.STACKING_NORMAL);
        add(ChartConst.TYPE_100_HORIZONTAL_AREA,
            ChartConst.TYPE_AREA, ChartConst.DIRECTION_HORIZONTAL, ChartConst.STACKING_FULL);
        add(ChartConst.TYPE_AREA, ChartConst.TYPE_AREA,
            ChartConst.DIRECTION_VERTICAL, ChartConst.STACKING_NORMAL);
        add(ChartConst.TYPE_100_AREA, ChartConst.TYPE_AREA,
            ChartConst.DIRECTION_VERTICAL, ChartConst.STACKING_FULL);

        add(ChartConst.TYPE_HORIZONTAL_COMBINATION,
            ChartConst.TYPE_COMBINATION, ChartConst.DIRECTION_HORIZONTAL);
        add(ChartConst.TYPE_COMBINATION,
            ChartConst.TYPE_COMBINATION, ChartConst.DIRECTION_VERTICAL);

        add(ChartConst.TYPE_DUAL_HORIZONTAL_LINE,
            ChartConst.TYPE_DUAL_LINE, ChartConst.DIRECTION_HORIZONTAL);
        add(ChartConst.TYPE_DUAL_LINE,
            ChartConst.TYPE_DUAL_LINE, ChartConst.DIRECTION_VERTICAL);

        add(ChartConst.TYPE_DUAL_HORIZONTAL_COMBINATION,
            ChartConst.TYPE_DUAL_COMBINATION, ChartConst.DIRECTION_HORIZONTAL);
        add(ChartConst.TYPE_DUAL_COMBINATION,
            ChartConst.TYPE_DUAL_COMBINATION, ChartConst.DIRECTION_VERTICAL);

        add(ChartConst.TYPE_HORIZONTAL_BOXPLOT,
            ChartConst.TYPE_BOXPLOT, ChartConst.DIRECTION_HORIZONTAL);
        add(ChartConst.TYPE_BOXPLOT,
            ChartConst.TYPE_BOXPLOT, ChartConst.DIRECTION_VERTICAL);

        add(ChartConst.TYPE_HORIZONTAL_WATERFALL,
            ChartConst.TYPE_WATERFALL, ChartConst.DIRECTION_HORIZONTAL);
        add(ChartConst.TYPE_WATERFALL,
            ChartConst.TYPE_WATERFALL, ChartConst.DIRECTION_VERTICAL);
        // @formatter:on

        return mapping;
    };

    // TODO Globalization
    ChartTypeUtil._VIZ_TYPE_MAPPING = function() {
        var mapping = {};

        var add = function(vizType, icon) {
            var name;
            if (vizType === ChartConst.TYPE_TABLE) {
                name = LangManager.get('VIZ_COMMON_TABLE_TEXT');
            } else if (vizType === ChartConst.TYPE_CROSSTAB) {
                name = LangManager.get('VIZ_COMMON_CROSSTAB_TEXT');
            } else {
                var metadata = MetadataFactory.get(vizType);
                name = metadata ? metadata.getName() : vizType;
            }

            mapping[vizType] = {
                'id' : vizType,
                'caption' : name,
                'icon' : icon,
                'whiteIcon' : icon + '-white',
                'greyIcon' : icon + '-grey'
            };
            // Also init for info chart
            var infoType = InfoChartUtil.getInfoType(vizType);
            if (infoType) {
                mapping[infoType] = $.extend({}, mapping[vizType], {'id': infoType});
            }
        };
        add(ChartConst.TYPE_BAR, 'bar');
        add(ChartConst.TYPE_COLUMN, 'column');
        add(ChartConst.TYPE_STACKED_BAR, 'stacked-bar');
        add(ChartConst.TYPE_STACKED_COLUMN, 'stacked-column');
        add(ChartConst.TYPE_DUAL_BAR, 'dual-bar');
        add(ChartConst.TYPE_DUAL_COLUMN, 'dual-column');
        add(ChartConst.TYPE_3D_COLUMN, '3D-column');
        add(ChartConst.TYPE_LINE, 'line');
        add(ChartConst.TYPE_AREA, 'area');
        add(ChartConst.TYPE_COMBINATION, 'combination');
        add(ChartConst.TYPE_DUAL_LINE, 'dual-line');
        add(ChartConst.TYPE_DUAL_COMBINATION, 'dual-combination');
        add(ChartConst.TYPE_PIE, 'pie');
        add(ChartConst.TYPE_DONUT, 'donut');
        add(ChartConst.TYPE_PIE_WITH_DEPTH, 'pie-with-depth');
        add(ChartConst.TYPE_GEO_BUBBLE, 'geo-bubble');
        add(ChartConst.TYPE_GEO_CHOROPLETH, 'geo-choropleth');
        add(ChartConst.TYPE_GEO_PIE, 'geo-pie');
        add(ChartConst.TYPE_GEO_MAP, 'geo-map');
        add(ChartConst.TYPE_SCATTER, 'scatter');
        add(ChartConst.TYPE_BUBBLE, 'bubble');
        add(ChartConst.TYPE_SCATTER_MATRIX, 'scatter-matrix');
        add(ChartConst.TYPE_HEATMAP, 'heatmap');
        add(ChartConst.TYPE_TREEMAP, 'treemap');
        add(ChartConst.TYPE_TABLE, 'table');
        add(ChartConst.TYPE_CROSSTAB, 'crosstab');
        add(ChartConst.TYPE_RADAR, 'radar');
        add(ChartConst.TYPE_BOXPLOT, 'boxplot');
        add(ChartConst.TYPE_WATERFALL, 'waterfall');
        add(ChartConst.TYPE_TAG_CLOUD, 'tag-cloud');
        add(ChartConst.TYPE_TREE, 'tree');
        add(ChartConst.TYPE_NETWORK, 'network');
        add(ChartConst.TYPE_FUNNEL, 'funnel');
        add(ChartConst.TYPE_PC, 'pc');
        add(ChartConst.TYPE_NUMBER, 'number');
        add('sap.viz.ext.samplebar', 'sap.viz.ext.samplebar');
        add('sap.viz.ext.flagbar', 'sap.viz.ext.flagbar');
        return mapping;
    };

    /**
     * @param {String} vizType
     *
     * @return {Object}
     */
    ChartTypeUtil.getVizTypeObject = function(vizType) {
        if (ChartTypeUtil.VIZ_TYPE__MAPPING == null) {
            ChartTypeUtil.VIZ_TYPE__MAPPING = ChartTypeUtil._VIZ_TYPE_MAPPING();
        }
        var typeObject = ChartTypeUtil.VIZ_TYPE__MAPPING[vizType];

        if (typeObject) {
            typeObject = JSON.parse(JSON.stringify(typeObject));
        }
        return typeObject;
    };
    /**
     * get vizType from map according to chartType
     * @param {Object} chartType
     */
    ChartTypeUtil.toVizProperties = function(chartType) {
        if (ChartTypeUtil.CVOM_TYPE_MAPPING == null) {
            ChartTypeUtil.CVOM_TYPE_MAPPING = ChartTypeUtil._CVOM_TYPE_MAPPING();
        }
        var p = ChartTypeUtil.CVOM_TYPE_MAPPING[chartType];
        if (!p) {
            p = {
                vizType : chartType
            };
        }
        return p;
    };
    /**
     * get type from map according to type,vizDirection and vizStacking
     * @param {String} type
     * @param {String} vizDirection
     * @param {String} vizStacking
     */
    ChartTypeUtil.fromVizProperties = function(type, vizDirection, vizStacking) {
        if (!vizDirection && !vizStacking) {
            return type;
        }

        // convert type, e.g. for "viz/horizontal_line", we should change to "viz/line"
        var vizType = ChartTypeUtil.toVizProperties(type).vizType;

        for (var chartType in ChartTypeUtil.CVOM_TYPE_MAPPING) {
            if (ChartTypeUtil.CVOM_TYPE_MAPPING.hasOwnProperty(chartType)) {
                var p = ChartTypeUtil.CVOM_TYPE_MAPPING[chartType];

                if (p.vizType === vizType && (!vizDirection || !p.vizDirection || p.vizDirection === vizDirection) && (!vizStacking || !p.vizStacking || p.vizStacking === vizStacking)) {
                    return chartType;
                }
            }
        }
        return type;
    };
    ChartTypeUtil.updateType = function(type, option) {
        var newType = type;
        if (option.hasOwnProperty("direction")) {
            newType = ChartTypeUtil.changeDirection(newType, option["direction"]);
            option["direction"] = undefined;
        }
        if (option.hasOwnProperty("stacking")) {
            newType = ChartTypeUtil.changeStacking(newType, option["stacking"]);
            option["stacking"] = undefined;
        }
        return newType;
    };
    /**
     * judge type is or not mutipleChart
     * @param {String} type
     * @returns {Boolean}
     */
    ChartTypeUtil.isMultipleChart = function(type) {
        return TrellisUtils.isMultipleChart(type);
    };
    /**
     * Convert viz type to multi chart type.
     * @param {String} vizType
     * @returns {String}
     */
    ChartTypeUtil.toMultiChartType = function(type) {
        return TrellisUtils.toMultiChartType(type);
    };
    /**
     * chage type to chartType.
     * @param {String} vizType
     * @returns {String}
     */
    ChartTypeUtil.toSingleChartType = function(type) {
        return TrellisUtils.toSingleChartType(type);
    };
    /**
     * Check whether vizType is multi chart or can be converted to multi chart
     * @param {String} vizType
     * @returns {Boolean}
     */
    ChartTypeUtil.supportMultiChart = function(vizType) {
        return TrellisUtils.supportMultiChart(vizType);
    };
    /**
     * get Direction by type
     * @param {String} type
     * @returns {String}
     */
    ChartTypeUtil.getDirection = function(type) {
        var chartType = ChartTypeUtil.toSingleChartType(type);
        var typeProperties = ChartTypeUtil.toVizProperties(chartType);
        if (typeProperties.vizDirection) {
            return typeProperties.vizDirection;
        }
        return null;
    };
    /**
     * get Stacking by type
     * @param {String} type
     * @returns {String}
     */
    ChartTypeUtil.getStacking = function(type) {
        var chartType = ChartTypeUtil.toSingleChartType(type);
        var typeProperties = ChartTypeUtil.toVizProperties(chartType);
        if (typeProperties.vizStacking) {
            return typeProperties.vizStacking;
        }
        return null;
    };
    /**
     * get new type by changing direction
     * @param {String} type
     * @returns {String}
     */
    ChartTypeUtil.changeDirection = function(type, direction) {
        var chartType = ChartTypeUtil.toSingleChartType(type);
        var currenDirection = ChartTypeUtil.getDirection(chartType);
        if (currenDirection === direction || !currenDirection) {
            return type;
        }

        var stacking = ChartTypeUtil.getStacking(chartType);
        var newChartType = ChartTypeUtil.fromVizProperties(chartType, direction, stacking);
        if (ChartTypeUtil.isMultipleChart(type)) {
            return ChartTypeUtil.toMultiChartType(newChartType);
        }
        return newChartType;
    };
    /**
     * get new type by changing stacking
     * @param {String} type
     * @returns {String}
     */
    ChartTypeUtil.changeStacking = function(type, stacking) {
        var chartType = ChartTypeUtil.toSingleChartType(type);
        var currenStacking = ChartTypeUtil.getStacking(chartType);
        if (currenStacking === stacking || !currenStacking) {
            return type;
        }

        var direction = ChartTypeUtil.getDirection(chartType);
        var newChartType = ChartTypeUtil.fromVizProperties(chartType, direction, stacking);
        if (ChartTypeUtil.isMultipleChart(type)) {
            return ChartTypeUtil.toMultiChartType(newChartType);
        }
        return newChartType;
    };
    /**
     * get new type by older chartType properties and vizType
     * @param {String} type
     * @param {String} vizType
     * @returns {String}
     */
    ChartTypeUtil.getType = function(type, vizType) {
        if (!type) {
            return vizType;
        }
        var chartType = ChartTypeUtil.toSingleChartType(type);
        var direction = ChartTypeUtil.getDirection(chartType);
        var stacking = ChartTypeUtil.getStacking(chartType);
        chartType = ChartTypeUtil.fromVizProperties(vizType, direction, stacking);
        if (ChartTypeUtil.isMultipleChart(type)) {
            return ChartTypeUtil.toMultiChartType(chartType);

        }
        return chartType;
    };
    /**
     * get vizType by type
     * @param {String} type
     * @returns {String}
     */
    ChartTypeUtil.getVizType = function(type) {
        var chartType = ChartTypeUtil.toSingleChartType(type);
        return ChartTypeUtil.toVizProperties(chartType).vizType;
    };
    /**
     * Get dataset type.
     * @param {String} type
     * @returns {String} dataset type
     */
    ChartTypeUtil.getDatasetType = function(type) {
        if (ChartTypeUtil.isGeo(type) || InfoChartUtil.isInfoChart(type)) {
            return DatasetTypeConst.FLAT_TABLE;
        } else if (ChartTypeUtil.isTable(type)) {
            return DatasetTypeConst.RAW;
        } else {
            return DatasetTypeConst.CROSS_TABLE;
        }
    };
    /**
     * judge type is Table
     * @param {String} type
     * @returns {Boolean}
     */
    ChartTypeUtil.isTable = function(type) {
        return (type === ChartConst.TYPE_TABLE || type === ChartConst.TYPE_CROSSTAB);
    };

    /**
     * judge type is Geo
     * @param {String} type
     * @returns {Boolean}
     */
    ChartTypeUtil.isGeo = function(type) {
        return (type === ChartConst.TYPE_GEO_MAP);
    };

    ChartTypeUtil.isInfoChart = function(type) {
        if (type && type.indexOf("info/") === 0) {
            return true;
        }
        return false;
    };

    ChartTypeUtil.isVizChart = function(type) {
        if (type && type.indexOf("viz/") === 0) {
            return true;
        }
        return false;
    };

    ChartTypeUtil.validDynamicSeriesType = function(type) {
        var support_list = ['info/combination', 'info/horizontal_combination'];
        return support_list.indexOf(type) > -1;
    };

    /**
     * judge type is support title
     * @param {String} type
     * @returns {Boolean}
     */
    ChartTypeUtil.supportTitle = function(type) {
        // new geo map and table not support title.
        if (ChartTypeUtil.isGeo(type)) {
            return false;
        } else {
            return true;
        }
    };

    ChartTypeUtil.isValid = function(type) {
        var metadata = MetadataFactory.get(type);
        return !!metadata;
    };

    ChartTypeUtil.isBuildInType = function(type) {
        var metadata = MetadataFactory.get(type);
        return metadata && metadata.isBuiltIn();
    };

    ChartTypeUtil.supportAnimation = function(type) {
        var support = false;
        if (type === ChartConst.TYPE_GEO_BUBBLE){
            support = true;
        } else{
           
            var bindings = MetadataFactory.get(type).getBindingDefs();
            for (var i = 0; i<bindings.length; i++){
                if (bindings[i].id() === ChartConst.PLAYFIELD){
                    support = true;
                    break;
                }
            }
        }
       
        return support;
    };

    /**
     * Check if the data is empty.
     */
    ChartTypeUtil.isEmptyData = function(type, data) {
        var datasetType = ChartTypeUtil.getDatasetType(type);
        if (datasetType === DatasetTypeConst.RAW) {
            return false;
        } else if (datasetType === DatasetTypeConst.FLAT_TABLE) {
            return data.data().data.length === 0;
        } else {
            var analysisAxis = data ? (data.data() ? data.data().analysisAxis : null) : null;
            var measureValuesGroup = data ? (data.data() ? data.data().measureValuesGroup : null) : null;
            if ((!analysisAxis || analysisAxis && analysisAxis.length === 0) && (!analysisAxis || measureValuesGroup && measureValuesGroup.length === 0)) {
                return true;
            }
        }
        return false;
    };

    /**
     * Get category axis
     * TODO: This is a hard-coded solution to determine the category axis type in a specific info chart. Ideally, the
     * info chart should provide an external API to let UVB to get the category axis and value axis.
     */
    ChartTypeUtil.getCategoryAxis = function(type) {
        if (type === 'info/bar' || type === 'info/dual_bar' || type === 'info/horizontal_line' || type === 'info/stacked_bar' || type === 'info/100_stacked_bar' || 
            type === 'info/trellis_bar' || type === 'info/trellis_dual_bar' || type === 'info/trellis_horizontal_line' || type === 'info/trellis_stacked_bar' || 
            type === 'info/trellis_100_stacked_bar') {
            return ['yAxis'];
        } else {
            return ['xAxis'];
        }
    };

    /**
     * Get value axis
     */
    ChartTypeUtil.getValueAxis = function(type) {
        if (type === 'info/bar' || type === 'info/dual_bar' || type === 'info/horizontal_line' || type === 'info/stacked_bar' || type === 'info/100_stacked_bar' || 
            type === 'info/trellis_bar' || type === 'info/trellis_dual_bar' || type === 'info/trellis_horizontal_line' || type === 'info/trellis_stacked_bar' || 
            type === 'info/trellis_100_stacked_bar') {
            return ['xAxis'];
        } else {
            return ['yAxis'];
        }
    };

    /**
     * Justify whether chart is horizontal
     */
    ChartTypeUtil.isHorizontal = function(type) {
        switch (type) {
        case 'info/bar':
        case 'info/dual_bar':
        case 'info/horizontal_line':
        case 'info/stacked_bar':
        case 'info/100_stacked_bar':
        case 'info/trellis_bar':
        case 'info/trellis_dual_bar':
        case 'info/trellis_horizontal_line':
        case 'info/trellis_stacked_bar':
        case 'info/trellis_100_stacked_bar':
        case 'viz/horizontal_area':
        case 'viz/100_horizontal_area':
        case 'viz/dual_horizontal_combination':
        case 'viz/multi_horizontal_area':
        case 'viz/multi_100_horizontal_area':
        case 'info/dual_horizontal_line':
        case 'info/horizontal_combination':
            return true;
        default:
            return false;
        }
    };
    
    var _semanticAxisMapping = { // h: horizontal, v: vertical, s:scatter(both xy axis are value)
        "h:xAxis":          "valueAxis",
        "h:xAxis2":         "valueAxis2",
        "h:yAxis":          "categoryAxis",
        "h:yAxis2":         "categoryAxis2",
        "v:yAxis":          "valueAxis",
        "v:yAxis2":         "valueAxis2",
        "v:xAxis":          "categoryAxis",
        "v:xAxis2":         "categoryAxis2",
        "s:xAxis":          "valueAxis",
        "s:yAxis":          "valueAxis2"
    },
        _directionAxisMapping = {
        "h:valueAxis":      "xAxis",
        "h:valueAxis2":     "xAxis2",
        "h:categoryAxis":   "yAxis",
        "h:categoryAxis2":  "yAxis2",
        "v:categoryAxis":   "xAxis",
        "v:categoryAxis2":  "xAxis2",
        "v:valueAxis":      "yAxis",
        "v:valueAxis2":     "yAxis2",
        "s:valueAxis":      "xAxis",
        "s:valueAxis2":     "yAxis"
    };

    function mapAxis ( mapping, name, vizType ) {
        var prefix = ChartTypeUtil.isHorizontal( vizType ) ? "h:" : "v:";

        if ( vizType === "info/scatter" || vizType === "info/bubble" ) {
            prefix = "s:";
        }
        return mapping[ prefix + name ] || name;
    }

    ChartTypeUtil.map2semanticAxis = function( name, vizType ) {
        return mapAxis( _semanticAxisMapping, name, vizType );
    };

    ChartTypeUtil.map2directionAxis = function( name, vizType ) {
        return mapAxis( _directionAxisMapping, name, vizType );
    };

    ChartTypeUtil.isFullStacking = function(type) {
        if ((/\/100_stacked/).test(type)) {
            return true;
        } else {
            return false;
        }
    };
    
    /**
     * Justify whether chart is dual
     */
    ChartTypeUtil.isDual = function(type) {
        if ((/dual/).test(type)) {
            return true;
        } else {
            return false;
        }
    }; 

    /**
     * Justify whether x or y axis is category axis
     */
    ChartTypeUtil.isCategoryAxis = function(type, axis) {
        if (type === 'info/bar' || type === 'info/dual_bar' || type === 'info/horizontal_line' || type === 'info/stacked_bar' || type === 'info/100_stacked_bar') {
            return axis === 'yAxis' ? true : false;
        } else {
            return axis === 'xAxis' ? true : false;
        }
    };

    ChartTypeUtil.isSupportMorphing = function(type) {
        // @formatter:off
        if (type === ChartConst.TYPE_TREE ||
            type === ChartConst.TYPE_NETWORK ||
            type === ChartConst.TYPE_TABLE ||
            type === ChartConst.TYPE_FUNNEL ||
            type === ChartConst.TYPE_PC ||
            type === ChartConst.TYPE_NUMBER||
            type === ChartConst.TYPE_GEO_BUBBLE ||
            type === ChartConst.TYPE_GEO_CHOROPLETH ||
            type === ChartConst.TYPE_GEO_MAP) {
        // @formatter:on
            return false;
        } else if (!ChartTypeUtil.isBuildInType(type)) {
            return false;
        } else {
            return true;
        }
    };


    ChartTypeUtil.getChartId = function(type) {
        if (ChartTypeUtil.isInfoChart(type)) {
            return type.replace('info/','');
        } else {
            return type.replace('viz/','');
        }
    }

    return ChartTypeUtil;
});

define('sap/viz/controls/common/bindingdef/BindingDefUtils',[
// @formatter:off
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/metadata/MetadataFactory'
], function(FeedItemType, Utils, LangManager, MetadataFactory){
// @formatter:on
    /**
     * BindingDef Class
     */
    var BindingDefUtils = {};

    BindingDefUtils.supportMND = function(visualizationType) {
        var support = false;
        var defs = MetadataFactory.get(visualizationType).getBindingDefs();
        defs.forEach(function(def) {
            support = support || (def.mndMode() !== 'none');
        });
        return support;
    };

    BindingDefUtils.equal = function(visualizationType1, visualizationType2) {
        if (visualizationType1 === visualizationType2) {
            return true;
        }
        var metadata1 = MetadataFactory.get(visualizationType1), metadata2 = MetadataFactory.get(visualizationType2);
        if (metadata1 && metadata2) {
            var defs1 = metadata1.getBindingDefs(), defs2 = metadata2.getBindingDefs();
            if (defs1.length !== defs2.length) {
                return false;
            }
            var equal = true;
            defs1.forEach(function(def1, index, array) {
                equal = equal && def1.equal(defs2[index]);
            });
            return equal;
        } else {
            return false;
        }
    };

    BindingDefUtils.has = function(visualizationType, id) {
        return !!BindingDefUtils.get(visualizationType, id);
    };

    BindingDefUtils.get = function(visualizationType, id) {
        var got;
        var defs = MetadataFactory.get(visualizationType).getBindingDefs();
        defs.forEach(function(def) {
            if (!got && def.id() === id) {
                got = def;
            }
        });
        return got;
    };

    return BindingDefUtils;
});

define('sap/viz/controls/common/feeds/FeedUtils',
// @formatter:off
[
    'require',
    'sap/viz/controls/common/constants/FeedConst',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/feeds/FeedItem',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/metadata/MetadataFactory',
    'sap/viz/controls/common/bindingdef/BindingDefUtils'
],
function(r, FeedConst, ChartConst, FeedItem, FeedItemType, AnalyticalType, Utils, ChartTypeUtil, MetadataFactory, BindingDefUtils) {
// @formatter:on
    var require = r || require;
    /**
     * FeedUtils Class
     */
    var FeedUtils = {};

    /**
     * Check whether feedItems have row or column
     */
    FeedUtils.hasRowOrColumn = function(feedItems) {
        var _hasRowOrColumn = false;
        if (!feedItems) {
            return _hasRowOrColumn;
        }
        for (var i = 0; i < feedItems.length; i++) {
            var feedItem = feedItems[i];
            if (feedItem.id() === FeedConst.ID_TRELLIS_ROW || feedItem.id() === FeedConst.ID_TRELLIS_COLUMN || feedItem.id() === 'multiplier') {
                if (feedItem.values().length > 0) {
                    _hasRowOrColumn = true;
                    break;
                }
            }
        }
        return _hasRowOrColumn;
    };
    /**
     * check feed items is empty
     *
     * @param {Array} feedItems
     *      Array of {FeedItem}
     *
     * @return {Boolean}
     *
     */
    FeedUtils.isEmptyFeeds = function(feedItems) {
        if (!feedItems) {
            return true;
        }

        for (var i = 0; i < feedItems.length; i++) {
            var feedItem = feedItems[i];
            if (feedItem) {
                var values = feedItem.values();
                if (values && values.length > 0) {
                    return false;
                }
            }
        }

        return true;
    };
    FeedUtils._toMap = function(feedsOrAnalyses) {
        var map = {};
        for (var i = 0; i < feedsOrAnalyses.length; i++) {
            var item = feedsOrAnalyses[i];
            if (!item) {
                continue;
            }
            map[item.id()] = {
                'index' : i,
                'item' : item
            };
        }
        return map;
    };
    /**
     * Whether feeds are equal.
     * @param {Array<sap.viz.controls.common.FeedItem>} feeds1
     * @param {Array<sap.viz.controls.common.FeedItem>} feeds2
     * @param {JSON>} options optional
     *                {ignoreActions: true}
     */
    FeedUtils.equal = function(feeds1, feeds2, options) {
        //Handle null and undefined
        if (feeds1 === feeds2){
            return true;
        }
        if (!feeds1 || !feeds2){
            return false;
        }
        
        var i;
        var feedsMap1 = FeedUtils._toMap(feeds1);
        var feedsMap2 = FeedUtils._toMap(feeds2);

        var fid;
        // Traversal feedsMap1 to compare 1 and 2
        for (fid in feedsMap1) {
            if (feedsMap1.hasOwnProperty(fid)) {
                var feed1 = feedsMap1[fid].item;
                var analyses1 = feed1.values();
                var feed2 = feedsMap2[fid] ? feedsMap2[fid].item : null;
                var analyses2 = feedsMap2[fid] ? feed2.values() : null;
                // Remove compared
                delete feedsMap2[fid];

                if (!feed2) {
                    if (analyses1.length > 0) {
                        return false;
                    }
                } else {
                    if (analyses2.length !== analyses1.length) {
                        return false;
                    } else {
                        var analysis;
                        var analysisMap1 = FeedUtils._toMap(analyses1);
                        var analysisMap2 = FeedUtils._toMap(analyses2);
                        // Compare
                        for (var aid in analysisMap1) {
                            if (analysisMap1.hasOwnProperty(aid)) {
                                if (analysisMap2[aid] === undefined) {
                                    return false;
                                } else if (analysisMap1[aid].index !== analysisMap2[aid].index) {
                                    return false;
                                } else if (!analysisMap1[aid].item.equal(analysisMap2[aid].item, options)) {
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
        }
        // Traversal remain feed item in feedsMap2
        for (fid in feedsMap2) {
            if (feedsMap2.hasOwnProperty(fid)) {
                var feed = feedsMap2[fid].item;
                var analyses = feed.values();

                if (analyses.length > 0) {
                    return false;
                }
            }
        }
        return true;
    };
    /**
     * clone the current feeds
     */
    FeedUtils.cloneFeeds = function(feeds) {
        if (!feeds) {
            return null;
        }
        if (feeds.length === 0) {
            return [];
        }
        var retFeeds = [];
        for (var i = 0; i < feeds.length; i++) {
            var feed = feeds[i];
            retFeeds.push(feed.clone());
        }
        return retFeeds;
    };
    /**
     * Remove row and column feed items from feeds
     */
    FeedUtils.removeRowAndColumnFeedItems = function(feeds) {
        feeds = FeedUtils.cloneFeeds(feeds);
        FeedUtils._removeFeed(feeds, function(feed) {
            return feed.id() === FeedConst.ID_TRELLIS_ROW || feed.id() === FeedConst.ID_TRELLIS_COLUMN || feed.id() === 'multiplier';
        });
        return feeds;
    };

    FeedUtils.removeSubtotal = function(feeds) {
        feeds = FeedUtils.cloneFeeds(feeds);
        FeedUtils._removeFeed(feeds, function(feed) {
            return feed.type() === FeedConst.TYPE_SUBTOTAL;
        });
        return feeds;
    };
    
    FeedUtils.removePlayField = function(feeds) {
        feeds = FeedUtils.cloneFeeds(feeds);
        FeedUtils._removeFeed(feeds, function(feed) {
            return feed.id() === ChartConst.PLAYFIELD;
        });
        return feeds;
    };
    /**
     * get number of dimensions in trellis column feed.
     */
    FeedUtils.getNumberOfDimensionsInColumn = function(feeds) {
        var number = 0;
        feeds.forEach(function(feed) {
            if (feed.id() === FeedConst.ID_TRELLIS_COLUMN) {
                var analysisObjects = feed.values();
                analysisObjects.forEach(function(analysisObject) {
                    if (analysisObject.type() === AnalyticalType.HIERARCHY) {
                        var levels = analysisObject.hierarchyLevels();
                        for (var i = 0; i < levels.length; i++) {
                            number++;
                            if (levels[i].selected()) {
                                break;
                            }
                        }
                    } else {
                        number++;
                    }
                });
                return;
            }
        });
        return number;
    };

    FeedUtils.removeMND = function(feeds) {
        if (!feeds) {
            return feeds;
        }
        feeds = FeedUtils.cloneFeeds(feeds);
        FeedUtils._removeAnalysisObject(feeds, function(feed, analysisObject) {
            return AnalyticalType.compatible(AnalyticalType.MND, analysisObject.type());
        });
        return feeds;
    };

    FeedUtils.hasMND = function(feeds) {
        return FeedUtils.countAnalyses(feeds, AnalyticalType.MND) > 0;
    };
    FeedUtils.countAnalyses = function(feeds, type) {
        var number = 0;

        for (var i = 0; i < feeds.length; i++) {
            var feed = feeds[i];
            var values = feed.values();
            if (type) {
                for (var j = 0; j < values.length; j++) {
                    var analysis = values[j];
                    if (AnalyticalType.compatible(type, analysis.type())) {
                        number++;
                    }
                }
            } else {
                number += values.length;
            }
        }
        return number;
    };
    FeedUtils.convertFeedType = function(feedItemType) {
        if (feedItemType === FeedItemType.GEOGRAPHY) {
            return FeedItemType.DIMENSION;
        }
        return feedItemType;
    };

    FeedUtils.isGeoHierarchyFeed = function(feedItemType, analyticType, dataType) {
        var lowerFIType = feedItemType ? feedItemType.toLowerCase() : null;
        var lowerAType = analyticType ? analyticType.toLowerCase() : null;
        var lowerDType = dataType ? dataType.toLowerCase() : null;
        return lowerFIType === FeedItemType.GEOGRAPHY.toLowerCase() && lowerAType === AnalyticalType.HIERARCHY && lowerDType === FeedItemType.GEOGRAPHY.toLowerCase();
    };

    FeedUtils.feedCompatible = function(feedItemType, analyticType, dataType) {
        var lowerFIType = feedItemType ? feedItemType.toLowerCase() : null;
        var lowerAType = analyticType ? analyticType.toLowerCase() : null;
        var lowerDType = dataType ? dataType.toLowerCase() : null;
        if (lowerFIType === FeedItemType.DIMENSION.toLowerCase()) {
            return lowerAType === AnalyticalType.DIMENSION || lowerAType === AnalyticalType.HIERARCHY || lowerAType === AnalyticalType.MND;
        } else if (lowerFIType === FeedItemType.SUBTOTAL.toLowerCase()) {
            return (lowerAType === FeedItemType.DIMENSION.toLowerCase() || lowerAType === AnalyticalType.HIERARCHY);
        } else if (lowerFIType === FeedItemType.GEOGRAPHY.toLowerCase()) {
            return (lowerAType === AnalyticalType.DIMENSION || lowerAType === AnalyticalType.HIERARCHY) && lowerDType === FeedItemType.GEOGRAPHY.toLowerCase();
        } else {
            return lowerFIType === lowerAType;
        }
    };
    FeedUtils._getFeedsValuesMap = function(feeds, mergeMultiplier) {
        mergeMultiplier = mergeMultiplier !== false;

        var feedsValuesMap = {};
        for (var i = 0; i < feeds.length; i++) {
            var feed = feeds[i];
            var id = feed.id();
            if (mergeMultiplier && (id === FeedConst.ID_TRELLIS_ROW || id === FeedConst.ID_TRELLIS_COLUMN)) {
                id = 'multiplier';
            }
            if (!feedsValuesMap[id]) {
                feedsValuesMap[id] = feed.values();
            } else {
                feedsValuesMap[id] = feedsValuesMap[id].concat(feed.values());
            }
        }
        return feedsValuesMap;
    };
    /**
     * Justify whether valus has mnd
     */
    FeedUtils.hasMNDInValues = function(values) {
        return (FeedUtils.indexOfMNDInValues(values) !== -1);
    };
    /**
     * Get mnd value index of values of src feedItem's values
     */
    FeedUtils.indexOfMNDInValues = function(values) {
        if (!values || !values.length) {
            return -1;
        }
        var indexMND = -1;
        for (var i = 0; i < values.length; i++) {
            var value/*AnalysisObject*/ = values[i];
            if (value.type() === AnalyticalType.MND) {
                indexMND = i;
                break;
            }
        }
        return indexMND;
    };
    FeedUtils.match = function(type, feeds, strictly) {
        if (!strictly && ChartTypeUtil.supportMultiChart(type)) {
            var single = ChartTypeUtil.toSingleChartType(type);
            var multi = ChartTypeUtil.toMultiChartType(type);

            return FeedUtils.match(single, feeds, true) || FeedUtils.match(multi, feeds, true);
        } else {
            var feedsValuesMap = FeedUtils._getFeedsValuesMap(feeds);

            var id;
            for (id in feedsValuesMap) {
                if (feedsValuesMap.hasOwnProperty(id)) {
                    if (!BindingDefUtils.has(type, id)) {
                        return false;
                    }
                }
            }
            return true;
        }
    };
    /**
     * generate empty feeds if has empty fromFeeds
     * @param{String} vizType
     * @return{Object} emptyFeeds
     */
    FeedUtils.buildEmptyFeeds = function(visualizationType) {
        var metadata = MetadataFactory.get(visualizationType);
        var defs = metadata.getBindingDefs();
        var feeds = [];
        defs.forEach(function(def) {
            var type;
            if (def.type() === 'measure') {
                type = FeedItemType.MEASURE;
            } else if (def.type() === 'dimension') {
                type = FeedItemType.DIMENSION;
            }
            feeds.push(new FeedItem(def.id(), type, []));
        });
        // This is a special case handling for viz/ext/table
        if (visualizationType === 'viz/ext/table') {
            var feedingDefs = metadata.raw().allFeeds();
            feedingDefs.forEach(function(feedingDef, index, array) {
                if (feedingDef.type === 'Subtotal') {
                    feeds.push(new FeedItem(feedingDef.id, feedingDef.type, []));
                }
            });
        }
        return feeds;
    };

    /**
     * Merge client feeds to host feeds
     *
     * @param {Array.<FeedItem>} host
     * @param {Array.<FeedItem>} client
     */
    FeedUtils.merge = function(host, client) {
        var clientMap = FeedUtils._getFeedsValuesMap(client, false);
        for (var i = 0; i < host.length; i++) {
            // FeedItem
            var fi = host[i];
            if (clientMap[fi.id()]) {
                fi.values(fi.values().concat(clientMap[fi.id()]));
            }
        }
        return host;
    };
    FeedUtils.getFeed = function(feeds, id) {
        for (var i = 0; i < feeds.length; i++) {
            var fi = feeds[i];
            if (fi.id() === id) {
                return fi;
            }
        }
        return null;
    };
    FeedUtils.getFeedValues = function(feeds, id) {
        var feed = FeedUtils.getFeed(feeds, id);
        return feed ? feed.values() : null;
    };

    FeedUtils.removeAnalysisObjectByID = function(feeds, feedId, analysisObjectId) {
        FeedUtils._removeAnalysisObject(feeds, function(feed, analysisObject) {
            return feed.id() === feedId && analysisObject.id() === analysisObjectId;
        });
        return feeds;
    };

    FeedUtils.spliceAnalysisObjects = function(feeds, feedId, index, howMany, analysisObject1, analysisObject2) {
        var args = Array.prototype.slice.call(arguments, 2);
        var spliced = false;
        feeds.forEach(function(feedItem) {
            if (feedItem.id() === feedId) {
                var values = feedItem.values() || [];
                values.splice.apply(values, args);
                spliced = true;
            }
        });
        if (!spliced && analysisObject1) {
            var feedItemType = AnalyticalType.compatible('dimension', analysisObject1.type()) ? FeedItemType.DIMENSION : FeedItemType.MEASURE;
            var values = [];
            values.splice.apply(values, args);
            feeds.push(new FeedItem(feedId, feedItemType, values));
        }
        return feeds;
    };

    FeedUtils.indexOfAnalysisObjectsByType = function(feeds, feedId, type) {
        for (var i = 0; i < feeds.length; i++) {
            var feed = feeds[i], values = feed.values();
            if (feed.id() !== feedId) {
                continue;
            }
            for (var j = 0; j < values.length; j++) {
                if (AnalyticalType.compatible(type, values[j].type())) {
                    return j;
                }
            }
        }
        return -1;
    };

    FeedUtils._removeFeed = function(feeds, removable) {
        feeds.forEach(function(feed, index) {
            if (removable(feed)) {
                feeds.splice(index, 1);
            }
        });
        return feeds;
    };

    FeedUtils._removeAnalysisObject = function(feeds, removable) {
        feeds.forEach(function(feed) {
            var values = feed.values() || [];
            values.forEach(function(analysisObject, index) {
                if (removable(feed, analysisObject)) {
                    values.splice(index, 1);
                }
            });
        });
        return feeds;
    };

    return FeedUtils;
});

// @formatter:off
define('sap/viz/controls/common/filter/FilterHelper',[
    'jquery',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/filter/AbstractFilter',
    'sap/viz/controls/common/filter/DateRangeFilter',
    'sap/viz/controls/common/filter/NumericRangeFilter',
    'sap/viz/controls/common/filter/ValueFilter'
],
function($, utils, AnalyticalType, FeedItemType, FeedUtils, AbstractFilter, DateRangeFilter, NumericRangeFilter, ValueFilter) {
// @formatter:on

    /**
     * @deprecated
     * This class is only work with fliter0
     */
    var FilterHelper = {};
    FilterHelper.getMapFilterItems = function(selection, isExcluded, filters, feeds){
        if(!selection || selection.length<1 ||!feeds || feeds.length<1){
            return filters;
        }

        var pendingFilters = [];
        for(var i=0; i< selection.length; ++i){
            var index = selection[i].layerIndex;
            var layerFeeds = feeds[index];
            if(!layerFeeds || layerFeeds.length<1){
                continue;
            }
            for(var dimension in selection[i].data){
                if( !selection[i].data.hasOwnProperty(dimension)){
                    continue;
                }

                var analysisObject = FilterHelper._getAnalysisObject(dimension, layerFeeds);
                if(!analysisObject){
                    continue;
                }
                var info = FilterHelper.getFilterInfo(analysisObject);
                var filterValue = {
                    'value' : selection[i].data[dimension]
                };

                var found = false;
                for(var n=0; n<pendingFilters.length; ++n){
                    if(pendingFilters[n].filterInfo.id === info.id && pendingFilters[n].filterInfo.hierarchyLevelId === info.hierarchyLevelId){
                        found = true;
                        pendingFilters[n].values.push(filterValue);
                        break;
                    }
                }
                if(!found){
                    pendingFilters.push({
                        filterInfo : info,
                        values : [filterValue]
                    });
                }
            }
        }
        var result = filters.slice(0);
        for(var m=0; m<pendingFilters.length; m++){
            var filter = FilterHelper._getFilter(result, pendingFilters[m].filterInfo.id, pendingFilters[m].filterInfo.hierarchyLevelId);
            if (filter) {
                result = FilterHelper._updateFilterItem(result, filter, pendingFilters[m].values, isExcluded);
            } else {
                result = FilterHelper._addFilterItem(result, pendingFilters[m].filterInfo, pendingFilters[m].values, isExcluded);
            }
        }
        return result;
    };

    FilterHelper._getAnalysisObject = function(dimension, feeds){
        for (var i = 0; i < feeds.length; i++) {
            if (feeds[i].type() !== FeedItemType.DIMENSION) {
                continue;
            }
            var analysisObjects = feeds[i].values();
            for (var j = 0; j < analysisObjects.length; j++) {
                if(analysisObjects[j].id() === dimension){
                    return analysisObjects[j];
                }
            }
        }
        return null;
    };
    /**
     * Get filter info object.
     *
     */
    FilterHelper.getFilterInfo = function(analysisObject) {
        var name = analysisObject.name();
        var id = analysisObject.id();
        if (analysisObject.type() === AnalyticalType.HIERARCHY) {
            var selectedLevel = analysisObject.selectedHierarchyLevel();
            name = selectedLevel.name();
            id = selectedLevel.analysis().id();
            return {
                name : name,
                id : id,
                hierarchyLevelId : selectedLevel.id(),
                hierarchyInfo : FilterHelper._buildFilterHierarchyInfo(analysisObject)
            };
        }

        return {
            name : name,
            id : id
        };
    };
    /**
     * build filter hierarchy info.
     * @param {sap.viz.controls.common.feeds.AnalysisObject} analysisObject
     * @returns {JSON} {
     *     hierarchyId : hierarchyId,
     *     levels : {
     *         id : levelId,
     *         name : levelName,
     *         selected : isSelected
     *     }
     * }
     */
    FilterHelper._buildFilterHierarchyInfo = function(analysisObject) {
        var hierarchyInfo = null;
        if (analysisObject.type() === AnalyticalType.HIERARCHY) {
            hierarchyInfo = {
                hierarchyId : analysisObject.id(),
                levels : FilterHelper._buildFilterHierarchyLevels(analysisObject.hierarchyLevels())
            };
        }
        return hierarchyInfo;
    };
    
    /**
     * Get new filterItems based on user selection on InfoChart. The filter item should be ValueFilter.
     *
     * @param {Array} selection
     * @param {Boolean} isExcluded
     * @returns {Array} an array of ValueFilter.
     */
    FilterHelper.getInfoFilterItems = function(selection, isExcluded, filters, feeds) {
        if(!selection || selection.length < 1 || !feeds || feeds.length < 1) {
            return filters;
        }

        var pendingFilters = [];

        var filterFeeds = FeedUtils.cloneFeeds(feeds), m;
        for(var i = 0; i < selection.length; ++i) {

            for(var j = 0; j < filterFeeds.length; j++) {
                if(filterFeeds[j].type() !== FeedItemType.DIMENSION) {
                    continue;
                }
                var analysisObjects = filterFeeds[j].values()
                for(var k = 0; k < analysisObjects.length; k++) {
                    var analysisObject = analysisObjects[k];
                    // ignore mnd
                    if(analysisObject.type() === AnalyticalType.MND) {
                        continue;
                    }
                    var info = FilterHelper.getFilterInfo(analysisObject);
                    var filterValue = {};

                    if(analysisObject.type() == 'hierarchy') {
                        filterValue.value = selection[i].data[analysisObject.selectedHierarchyLevel().analysis().id()];
                    } else {
                        filterValue.value = selection[i].data[analysisObject.id()];
                    }

                    var found = false;
                    for(var n = 0; n < pendingFilters.length; ++n) {
                        if(pendingFilters[n].filterInfo.id === info.id && pendingFilters[n].filterInfo.hierarchyLevelId === info.hierarchyLevelId) {
                            found = true;
                            var valueExist = false;
                            for(m = 0; m < pendingFilters[n].values.length; m++) {
                                if(pendingFilters[n].values[m].value === filterValue.value) {
                                    valueExist = true;
                                }
                            }
                            if(!valueExist) {
                                pendingFilters[n].values.push(filterValue);
                            }
                            break;
                        }
                    }
                    if(!found) {
                        pendingFilters.push({
                            filterInfo : info,
                            values : [filterValue]
                        });
                    }
                }
            }
        }

        var result = filters.slice(0);
        for( m = 0; m < pendingFilters.length; m++) {
            var filter = FilterHelper._getFilter(result, pendingFilters[m].filterInfo.id, pendingFilters[m].filterInfo.hierarchyLevelId);
            if(filter) {
                result = FilterHelper._updateFilterItem(result, filter, pendingFilters[m].values, isExcluded);
            } else {
                result = FilterHelper._addFilterItem(result, pendingFilters[m].filterInfo, pendingFilters[m].values, isExcluded);
            }
        }
        return result;
    };

    
    /**
     * Get new filterItems based on user selection on chart. The filter item should be ValueFilter.
     *
     * @param {Array} selection
     * @param {CrosstableDataset} dataset
     * @param {Boolean} isExcluded
     * @returns {Array} an array of ValueFilter.
     */
    FilterHelper.getFilterItems = function(selection, isExcluded, filters, feeds, dataset, feeding) {
        if (!selection || selection.length === 0) {
            return filters;
        }

        // cache these for performance reasons
        var data = dataset.data();
        var additionalData = dataset.info('additionalData');

        //change feeds value to build filter for Trellis
        var i;
        var filterFeeds = FeedUtils.cloneFeeds(feeds);
        var isMultiplier = false;
        for (i = 0; i < feeding.length; i++) {
            if (feeding[i].feedId === 'multiplier' && feeding[i].binding.length > 0) {
                isMultiplier = true;
                break;
            }
        }
        if (isMultiplier) {
            filterFeeds = FilterHelper._getFilterFeeds(filterFeeds);
        }
        // Find info and aaIndex
        var infos = [], aaIndices = [], dimensionIndices = [], aaIndex;
        for (i = 0; i < filterFeeds.length; i++) {
            if (filterFeeds[i].type() !== FeedItemType.DIMENSION) {
                continue;
            }
            aaIndex = FilterHelper._findAAIndex(filterFeeds[i].id(), feeding);
            var analysisObjects = filterFeeds[i].values();
            var dimensionIndex = 0;
            for (var j = 0; j < analysisObjects.length; j++) {
                infos.push(FilterHelper.getFilterInfo(analysisObjects[j]));
                if (analysisObjects[j].type() === AnalyticalType.MND) {
                    aaIndices.push(-1);
                    dimensionIndices.push(-1);
                } else {
                    aaIndices.push(aaIndex);
                    dimensionIndices.push(dimensionIndex);
                    dimensionIndex++;
                }
            }
        }
        filters = filters.slice(0);
        // Increase the dimension index when use full hierarchy
        var dimensionIndexOffsets = {};
        for (i = 0; i < infos.length; i++) {
            var info = infos[i];
            aaIndex = aaIndices[i];
            //For MND, aaIndex is -1. And if selection is MND, we need to ignore it.
            if (aaIndex < 0) {
                continue;
            }
            // Find values
            if (!dimensionIndexOffsets[aaIndex]) {
                dimensionIndexOffsets[aaIndex] = 0;
            }
            var pathIndex = FilterHelper._pathsIndex(info.hierarchyInfo);
            var aaDataLength = FilterHelper._getAADataLength(data, aaIndex);
            if (pathIndex > 0 && pathIndex < aaDataLength) {
                dimensionIndexOffsets[aaIndex] += pathIndex;
            }
            var values = FilterHelper._getFilterValues(data, additionalData, selection, aaIndex, info.name, dimensionIndices[i] + dimensionIndexOffsets[aaIndex], info.hierarchyInfo);
            if (!values || values.length === 0) {
                continue;
            }
            // Build filter
            var filter = FilterHelper._getFilter(filters, info.id, info.hierarchyLevelId);
            if (filter) {
                filters = FilterHelper._updateFilterItem(filters, filter, values, isExcluded);
            } else {
                filters = FilterHelper._addFilterItem(filters, info, values, isExcluded);
            }
        }

        return filters;
    };
    /**
     * change feeds value to build filter for trellisRow and trellisColumn
     */
    FilterHelper._getFilterFeeds = function(filterFeeds) {
        var newFeedItem;
        var values = [];
        for (var i = filterFeeds.length - 1; i >= 0; i--) {
            if (filterFeeds[i].id().indexOf('trellis') === 0) {
                values = values.concat(filterFeeds[i].values().reverse());
                newFeedItem = filterFeeds[i];
                filterFeeds.splice(i, 1);
            }
        }
        newFeedItem.values(values.reverse());
        newFeedItem._id = 'multiplier';
        filterFeeds.push(newFeedItem);
        return filterFeeds;
    };

    /**
     * Exclude values from filter
     */
    FilterHelper._excludeFilterValues = function(filter, values) {
        var newValues = filter.values().slice(0);
        var i, n;
        if (filter.isExcluded()) {
            //add values to filter.values
            for ( i = 0; i < values.length; i++) {
                var exist = false;
                for ( n = 0; n < newValues.length; n++) {
                    if (FilterHelper._filterValueEquals(values[i], newValues[n])) {
                        exist = true;
                        break;
                    }
                }
                if (!exist) {
                    newValues.push(values[i]);
                }
            }
        } else {
            //remove exclude value from filter.values
            for ( i = 0; i < values.length; i++) {
                for ( n = 0; n < newValues.length; n++) {
                    if (FilterHelper._filterValueEquals(values[i], newValues[n])) {
                        newValues.splice(n, 1);
                        break;
                    }
                }
            }
        }

        filter.updateValues(newValues);
    };
    /**
     * update filterItem.
     * @param {String} name
     * @param {Array} selection
     * @param {Boolean} isExcluded
     */
    FilterHelper._updateFilterItem = function(filterItems, filterItem, values, isExcluded) {
        if (isExcluded) {
            FilterHelper._excludeFilterValues(filterItem, values);
        } else {
            filterItem.isExcluded(isExcluded);
            filterItem.updateValues(values);
        }

        if (filterItem.isEmpty()) {
            var index = filterItems.indexOf(filterItem);
            filterItems.splice(index, 1);
        }

        return filterItems;
    };

    FilterHelper._getFilterValues = function(data, additionalData, selection, aaIndex, dimensionName, dimensionIndex, hierarchyInfo) {
        var values = [];
        for (var i in selection) {
            var dataPoint = selection[i];
            var dimensionValueIndex = dataPoint.ctx[0]['dii_a' + aaIndex];
            var value = FilterHelper._getValue(data, aaIndex, dimensionName, dimensionIndex, dimensionValueIndex);
            if (!value) {
                continue;
            }
            var infoValue = FilterHelper._getInfoValue(data, additionalData, aaIndex, dimensionName, dimensionIndex, dimensionValueIndex);

            var filterValue;
            filterValue = {
                'value' : value,
                'infoValue' : infoValue
            };
            if (!FilterHelper._isValueExisted(values, filterValue)) {
                values.push(filterValue);
            }
        }
        return values;
    }; 


    FilterHelper._getAADataLength = function(data, aaIndex) {
        var length = 0;
        var rawData = data;
        //aaIndex is 1-based.
        var index = aaIndex -1;
        if(rawData && rawData.analysisAxis && rawData.analysisAxis[index]) {
            var aaData = rawData.analysisAxis[index].data;
            if(aaData) {
                length = aaData.length;
            }
        }
        return length;
    };

    FilterHelper._pathsIndex = function(hierarchyInfo) {
        if (hierarchyInfo && hierarchyInfo.levels) {
            var levels = hierarchyInfo.levels;
            for (var i in levels) {
                if (levels[i].selected === true) {
                    return Number(i);
                }
            }
        }
        return -1;
    };
    /**
     * get new filterItems.
     *
     * @param {Array} selection
     * @param {Boolean} isExcluded
     */
    FilterHelper._addFilterItem = function(filterItems, info, values, isExcluded) {
        var filterItem = new ValueFilter(info.id, info.name);
        filterItem.hierarchyLevelId = info.hierarchyLevelId;
        filterItem.updateValues(values);
        filterItem.isExcluded(isExcluded);

        filterItems.push(filterItem);

        return filterItems;
    };
    /**
     * build filter hierarchy levels.
     * @param {sap.viz.controls.common.feeds.HierarchyLevelObject} hierarchyLevelObjects
     * @returns {JSON} {
     *     id : levelId,
     *     name : levelName,
     *     selected : isSelected
     * }
     */
    FilterHelper._buildFilterHierarchyLevels = function(hierarchyLevelObjects) {
        var levels = [];
        if (hierarchyLevelObjects && hierarchyLevelObjects.length > 0) {
            for (var i in hierarchyLevelObjects) {
                var level = {
                    id : hierarchyLevelObjects[i].id(),
                    name : hierarchyLevelObjects[i].name(),
                    selected : hierarchyLevelObjects[i].selected()
                };
                levels.push(level);
            }
        }
        return levels;
    };
    FilterHelper._filterValueEquals = function(v1, v2) {
        if (!v1 && !v2) {
            return true;
        }
        if ((!v1 && v2) || (v1 && !v2)) {
            return false;
        }

        if (v1.value !== v2.value) {
            return false;
        }
        //Need to compare infoValue is exist.
        if(v1.infoValue === v2.infoValue){
            return true;
        }
        if(v1.infoValue == null || v2.infoValue == null ){
            return true;
        }
        //Use equals function if it exists in inforValue
        if(utils.isFunction(v1.infoValue.equals)){
            return v1.infoValue.equals(v2.infoValue);
        } else if(v1.infoValue.hasOwnProperty('key')){
            //Compare key if key property exists.
            return v1.infoValue.key === v2.infoValue.key;
        } else {
            return true;
        }

    };
    /**
     * is item existed.
     * @param {Object} name
     */
    FilterHelper._isValueExisted = function(array, filterValue) {
        var value = filterValue.value;
        var infoValue = filterValue.infoValue;

        var isExisted = false;
        if (!array || array.length === 0) {
            return isExisted;
        }
        for (var i = 0; i < array.length; i++) {
            if (array[i]) {
                // we may use other format {'key':..., 'caption':...}
                isExisted = FilterHelper._filterValueEquals(array[i], filterValue);
                if (isExisted === true) {
                    break;
                }
            }
        }
        return isExisted;
    };
    /**
     * Get filter from filterItems by id.
     * @param {Array} filterItems
     *              Array of filters
     * @param {String} id
     * @returns {Object}
     */
    FilterHelper._getFilter = function(filterItems, id, hierarchyLevelId) {
        var result = null;
        for (var i = 0; i < filterItems.length; i++) {
            var filter = filterItems[i];
            if (!filter.isGlobalFilter() && filter.id() === id && (filter.hierarchyLevelId == hierarchyLevelId)) {
                result = filter;
                break;
            }
        }
        return result;
    };
    /**
     * is FilterItem existed.
     * @param {String} id
     */
    FilterHelper.isFilterItemExisted = function(model, id, hierarchyLevelId) {
        var filter = FilterHelper._getFilter(model.filterItems(), id, hierarchyLevelId);
        if (filter) {
            return true;
        } else {
            return false;
        }
    };

    //--helper for serializa and deserialize for different filter items.(ValueFilter, DateRangeFilter, NumericRangeFilter)
    /**
     * Helper function to serialize an array of AbstracFilter objects(including ValueFilter,DateRangeFilter,
     * NumericRangeFilter) to JSON. Sub classes of AsbractFilter override the AsbractFilter.toJSON() function, which will
     * be called to serialize the instance correctly.
     * @method sap.viz.controls.common.filter.FilterHelper.toJSON
     * @param {Object|Array} instance An instance of AbstracFilter sub class, or an array of AbstracFilter sub class
     * instances.
     */
    FilterHelper.toJSON = function(instance) {
        return utils.toJSON(instance, function(instance) {
            return instance.toJSON();
        });
    };

    /**
     * Helper function to deserialize an array of AbstracFilter objects(including ValueFilter,DateRangeFilter,
     * NumericRangeFilter) from JSON. According to the filter type, call corresponding fromJSON(json) function of
     * sub class of AbstracFilter.
     * @method sap.viz.controls.common.filter.FilterHelper.fromJSON
     * @returns {Object|Array} An instance of AbstracFilter sub class, or an array of AbstracFilter sub class instances.
     */
    FilterHelper.fromJSON = function(json) {
        return utils.fromJSON(json, function(json) {
            var filterType = json.filterType;
            var instance;
            switch(filterType) {
                case AbstractFilter.VALUE_TYPE:
                    instance = ValueFilter.fromJSON(json);
                    break;
                case AbstractFilter.NUMERIC_RANGE_TYPE:
                    instance = NumericRangeFilter.fromJSON(json);
                    break;
                case AbstractFilter.DATE_RANGE_TYPE:
                    instance = DateRangeFilter.fromJSON(json);
                    break;
            }
            return instance;
        });
    };
    
    FilterHelper._findAAIndex = function(feedID, feeding) {
        for (var i = 0; i < feeding.length; i++) {
            if (feeding[i].feedId === feedID) {
                var bindings = feeding[i].binding;
                for (var j = 0; j < bindings.length; j++) {
                    var binding = bindings[j];
                    if (binding.index != null) {
                        return binding.index;
                    }
                }
            }
        }
        return -1;
    };
    

    FilterHelper._searchDimension = function(callback, data, aaIndex, dimensionName, dimensionIndex) {
        var analysisAxis = data.analysisAxis;

        var globalDimensionIndex = 0;
        for (var i = 0; i < analysisAxis.length; i++) {
            var aa = analysisAxis[i];
            if (aaIndex === aa.index) {
                for (var j = 0; j < aa.data.length; j++) {
                    var dimension = aa.data[j];

                    var match = isNaN(dimensionIndex) ? dimension.name === dimensionName : dimensionIndex === j;
                    if (match) {
                        callback(dimension, j, globalDimensionIndex);
                    }
                    globalDimensionIndex++;
                }
            } else {
                globalDimensionIndex += aa.data.length;
            }
        }
    }; 
    
    

    FilterHelper._getValue = function(data, aaIndex, dimensionName, dimensionIndex, dimensionValueIndex) {
        var value = null;
        FilterHelper._searchDimension(function(dimension, dimensionIndex, globalDimensionIndex) {
            value = dimension.values[dimensionValueIndex];
        }, data, aaIndex, dimensionName, dimensionIndex);

        return value;
    }; 

       
    FilterHelper._getInfoValue = function(data, additionalData, aaIndex, dimensionName, dimensionIndex, dimensionValueIndex) {
        var infoValue = null;
        
        if (additionalData && additionalData.length) {
            for (var i = 0; i < additionalData.length; i++) {
                var ad = additionalData[i];
                if (ad.type !== 'additionalData') {
                    continue;
                }
                var infos = ad.info;
                // Find infoValue by index, additionalData should be align with analysisAxis
                FilterHelper._searchDimension(function(dimension, dimensionIndex, globalDimensionIndex) {
                    infoValue = infos[globalDimensionIndex].infoValues[dimensionValueIndex];
                }, data, aaIndex, dimensionName, dimensionIndex);
                return infoValue;
            }
        }

        return infoValue;
    }; 
    
    

    return FilterHelper;
});

define('sap/viz/controls/common/utils/VizFeedingUtil',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/constants/FeedConst',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/utils/Utils'
], function($, ChartConst, FeedConst, AnalyticalType, FeedItemType, Utils){
// @formatter:on
    /**
     * VizFeedingUtil Class
     */
    var VizFeedingUtil = {};
    
    VizFeedingUtil.generate = function(feedItems, visualizationType) {
        var feed = VizFeedingUtil.feedItems2feed(feedItems);
        return _buildRIVFeeding(visualizationType, feed);
    };
    // ------------------
    // TODO Below logic is copied from FakeDataUtils,
    // VizFeedingUtil should have own logic to transform feedItems to feeding
    // FakeDataUtils will be refactor or removed in future
    // ------------------

    VizFeedingUtil.feedItems2feed = function(feedItems) {
        var feeding = [];
        feedItems.forEach(function(feedItem) {
            var values = feedItem.values();
            if (values.length > 0) {
                for (var i = 0; i < values.length; ++i) {
                    var analysis = values[i];
                    var feed = {
                        'feed' : (feedItem.id() === FeedConst.ID_TRELLIS_ROW || feedItem.id() === FeedConst.ID_TRELLIS_COLUMN) ? 'multiplier' : feedItem.id()
                    };
                    if (analysis.type() === AnalyticalType.HIERARCHY) {
                        var hierarchyLevels = analysis.hierarchyLevels();
                        for (var j = 0; j < hierarchyLevels.length; j++) {
                            var level = hierarchyLevels[j];
                            if (level.selected()) {
                                feed.objId = level.id();
                            }
                        }
                        if (analysis.aggregationType()) {
                            feed.aggregationType = analysis.aggregationType();
                        }
                    }
                    //if the analysisObj type is MND
                    else {
                        if (analysis.type() === AnalyticalType.MND) {
                            feed.objId = null;
                        } else {
                            if (analysis.aggregationType()) {
                                feed.aggregationType = analysis.aggregationType();
                                if (analysis.aggregationTarget()) {
                                    feed.objId = analysis.aggregationTarget();
                                } else {
                                    feed.objId = Utils.decode(analysis.id())[0];
                                }
                            } else {
                                feed.objId = analysis.id();
                            }
                        }

                    }
                    feeding.push(feed);
                }
            }
        });
        return feeding;
    };
    
    var _buildRIVFeeding = function(vizType, feeding) {
        var feeds;
        try {
            feeds = sap.viz.api.manifest.Viz.get(vizType)[0].allFeeds();
        } catch (err) {
            // For UI5 cases all extension chart definition will be added to metadata
            feeds = sap.viz.api.metadata.Viz.get(vizType).bindings;
        }
        var axesIndexes = [];
        var mgIndexes = [];
        var dataFeeding = [];
        for (var i = 0; i < feeds.length; i++) {
            var feedId = feeds[i].id;
            var feedType = feeds[i].type;
            var feedingItems = [];
            for (var j = 0; j < feeding.length; j++) {
                if (feeding[j].feed == feedId) {
                    feedingItems.push(feeding[j]);
                }
            }

            if (feedingItems.length > 0) {
                var binding = {};
                binding.feedId = feedId;
                binding.binding = [];
                var bindingIndex = 0;
                for (var k = 0; k < feedingItems.length; k++) {
                    if (feedingItems[k].objId != null) {
                        if (feedType === FeedItemType.DIMENSION) {
                            if ($.inArray(feeds[i].aaIndex, axesIndexes) == -1) {
                                binding.binding[bindingIndex] = {};
                                binding.binding[bindingIndex].type = ChartConst.ANALYSIS_AXIS;
                                binding.binding[bindingIndex].index = feeds[i].aaIndex;
                                axesIndexes.push(feeds[i].aaIndex);
                                bindingIndex++;
                            }
                        } else {
                            if ($.inArray(feeds[i].mgIndex, mgIndexes) == -1) {
                                binding.binding[bindingIndex] = {};
                                binding.binding[bindingIndex].type = ChartConst.MEASURE_VALUES_GROUP;
                                binding.binding[bindingIndex].index = feeds[i].mgIndex;
                                mgIndexes.push(feeds[i].mgIndex);
                                bindingIndex++;
                            }
                        }
                    } else if (feedType === FeedItemType.DIMENSION) {
                        binding.binding[bindingIndex] = {};
                        binding.binding[bindingIndex].type = ChartConst.MEASURE_NAMES_DIMENSION;
                        bindingIndex++;
                    }
                }
                dataFeeding.push(binding);
            }
        }
        axesIndexes.sort();
        mgIndexes.sort();
        _fillAxesHoles(dataFeeding, axesIndexes);
        _fillMgHoles(dataFeeding, mgIndexes);
        return dataFeeding;
    };

    var _fillAxesHoles = function(dataFeeding, axesIndexes) {
        var j, diff, k;
        if (axesIndexes.length > 0) {
            diff = axesIndexes[0] - 1;
            if (diff > 0) {
                for ( j = 0; j < dataFeeding.length; j++) {
                    for (k = 0; k < dataFeeding[j].binding.length; k++) {
                        if (dataFeeding[j].binding[k].type == ChartConst.ANALYSIS_AXIS && dataFeeding[j].binding[k].index != null && dataFeeding[j].binding[k].index > 1) {
                            dataFeeding[j].binding[k].index -= diff;
                        }
                    }
                }
                for ( j = 0; j < axesIndexes.length; j++) {
                    axesIndexes[j] -= diff;
                }
            }
        }
        for (var i = 0; i < axesIndexes.length - 1; i++) {
            diff = axesIndexes[i + 1] - axesIndexes[i] - 1;
            if (diff > 0) {
                for ( j = 0; j < dataFeeding.length; j++) {
                    for (k = 0; k < dataFeeding[j].binding.length; k++) {
                        if (dataFeeding[j].binding[k].type == ChartConst.ANALYSIS_AXIS && dataFeeding[j].binding[k].index != null && dataFeeding[j].binding[k].index > axesIndexes[i]) {
                            dataFeeding[j].binding[k].index -= diff;
                        }
                    }
                }
                for ( j = i + 1; j < axesIndexes.length; j++) {
                    axesIndexes[j] -= diff;
                }
            }
        }
    };
    
    var _fillMgHoles = function(dataFeeding, mgIndexes) {
        var j, diff;
        if (mgIndexes.length > 0) {
            diff = mgIndexes[0] - 1;
            if (diff > 0) {
                for ( j = 0; j < dataFeeding.length; j++) {
                    if (dataFeeding[j].binding[0].type == ChartConst.MEASURE_VALUES_GROUP && dataFeeding[j].binding[0].index != null && dataFeeding[j].binding[0].index > 1) {
                        dataFeeding[j].binding[0].index -= diff;
                    }
                }
                for ( j = 0; j < mgIndexes.length; j++) {
                    mgIndexes[j] -= diff;
                }
            }
        }
        for (var i = 0; i < mgIndexes.length - 1; i++) {
            diff = mgIndexes[i + 1] - mgIndexes[i] - 1;
            if (diff > 0) {
                for ( j = 0; j < dataFeeding.length; j++) {
                    if (dataFeeding[j].binding[0].type == ChartConst.MEASURE_VALUES_GROUP && dataFeeding[j].binding[0].index != null && dataFeeding[j].binding[0].index > mgIndexes[i]) {
                        dataFeeding[j].binding[0].index -= diff;
                    }
                }
                for ( j = i + 1; j < mgIndexes.length; j++) {
                    mgIndexes[j] -= diff;
                }
            }
        }
    };

    return VizFeedingUtil;
});

define('sap/viz/controls/common/utils/FakeDataUtils',
// @formatter:off
[
    'jquery',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/utils/VizFeedingUtil'
],
function($, ChartConst, AnalyticalType, FeedItemType, LangManager, Utils, FeedUtils, VizFeedingUtil){
    var FakeDataUtils = {};
    FakeDataUtils.fakeDimensionName = "abc";
    /**
     * Build fake dataset & feeding
     */
    FakeDataUtils.buildFakeData = function(vizType, feeds, data) {
        
        // Build feeding
        var feeding = VizFeedingUtil.generate(feeds, vizType);
        
        // Build fake
        return FakeDataUtils._buildFake(vizType, feeding, data);
    };
    /**
     * Build fake feeding
     */
    FakeDataUtils.buildFakeFeeding = function(vizType, feeding, data) {
        feeding = FakeDataUtils._buildFake(vizType, feeding, data).feeding;
        feeding = FakeDataUtils._buildMNDFeedings(feeding, vizType);
        return feeding;
    };

    FakeDataUtils._getMNDfeed = function(feeds, feed) {
        if(!feed) { return; }
        var mndFeed = {
            priority : -1
        };

        for(var i = 0; i < feeds.length; i++) {
            var fId = feeds[i].id;
            var feeding = feeds[i];
            var acceptMND = Utils.isNumber(feeding.acceptMND) ? Number(feeding.acceptMND) : -1;
            var found = false;
            for(var j = 0; j < feed.length; j++) {
                if(feed[j].feedId == fId) {
                    if(feed[j].binding.length>0){
                        for(var k = 0; k < feed[j].binding.length; k++) {
                            if(feed[j].binding[k].type == ChartConst.MEASURE_NAMES_DIMENSION) {
                                return fId;
                            }
                        }
                    }
                    if(feed[j].binding.length < feeding.min) {
                        if(acceptMND > mndFeed.priority) {
                            mndFeed = {
                                feedId : fId,
                                priority : feeding.acceptMND
                            };
                        }
                    }
                    found = true;
                    break;
                }
            }
            if(!found) {
                if(feeding.min > 0 && acceptMND >= 0) {
                    mndFeed = {
                        feedId : fId,
                        priority : feeding.acceptMND
                    };
                }
            }
        }
        return mndFeed.feedId;
    };
    /**
     * Check whether feeding's binding object's index over dataset's analysis' length
     */
    FakeDataUtils._validateInput = function(feeding, dataset) {
        var aaLength = 0;
        if(dataset && dataset.analysisAxis) {
            aaLength = dataset.analysisAxis.length;
        }
        var mgLength = 0;
        if(dataset && dataset.measureValuesGroup) {
            mgLength = dataset.measureValuesGroup.length;
        }
        for(var i = 0; i < feeding.length; i++) {
            var feed = feeding[i];
            if(feed.binding) {
                for(var j = 0; j < feed.binding.length; j++) {
                    var index = feed.binding[j].index;
                    var type = feed.binding[j].type;
                    if( type == ChartConst.ANALYSIS_AXIS && (index > aaLength)) {
                        return false;
                    } else if( type == ChartConst.MEASURE_VALUES_GROUP && (index > mgLength)) {
                        return false;
                    }
                }
            }
        }
        return true;
    };
    FakeDataUtils._buildFake = function(vizType, rivFeeding, rawDataSet) {
        // return empty dataset and the current feeding if rawDataSet and rivFeeding are not compitable
        if(!FakeDataUtils._validateInput(rivFeeding, rawDataSet))
        {
            rawDataSet.analysisAxis = [];
            rawDataSet.measureValuesGroup = [];
            return {
                "feeding" : rivFeeding,
                "dataset" : rawDataSet
            };
        }
        var chart = sap.viz.api.manifest.Viz;
        var chartConfig = chart.get(vizType)[0];
        var feeds = chartConfig.allFeeds();
        var chartType = chartConfig.id;

        var mndFeed = FakeDataUtils._getMNDfeed(feeds, rivFeeding);

        var fakeAxesToBeBuilt = [];
        var fakeMeasuresToBeBuilt = [];
        var i, j;
        for(i = 0; i < feeds.length; i++) {
            if(feeds[i].id == mndFeed) {
                continue;
            }
            // get dimension and measure info of need to build fake
            var fakeToBeBuilt = FakeDataUtils._getFakeToBeBuilt(feeds[i], rivFeeding, rawDataSet);
            if(fakeToBeBuilt.nb > 0) {
                if(fakeToBeBuilt.axisIndex != null) {
                    fakeAxesToBeBuilt.push(fakeToBeBuilt);
                } else if(fakeToBeBuilt.mgIndex != null) {
                    fakeMeasuresToBeBuilt.push(fakeToBeBuilt);
                }
            }

        }

        if(rawDataSet.analysisAxis == null) {
            rawDataSet.analysisAxis = [];
        }

        // update rawDataSet's analysisAxis according to dimension build fake info
        for(i = 0; i < fakeAxesToBeBuilt.length; i++) {
            var fakeAxisToBeBuilt = fakeAxesToBeBuilt[i];
            var axis = null;
            for(j = 0; j < rawDataSet.analysisAxis.length; j++) {
                if(rawDataSet.analysisAxis[j].index == fakeAxisToBeBuilt.axisIndex) {
                    axis = rawDataSet.analysisAxis[j];
                }
            }
            if(axis == null) {
                axis = {};
                axis.data = [];
                axis.index = fakeAxisToBeBuilt.axisIndex;
                rawDataSet.analysisAxis.push(axis);
            }
            var axisItem = {};
            axisItem.type = FeedItemType.DIMENSION;
            if(fakeAxesToBeBuilt.length > 1)
            {
                axisItem.name = LangManager.get('VIZ_COMMON_FAKE_DIMENSION') + (i + 1);
            }
            else
            {
                axisItem.name = LangManager.get('VIZ_COMMON_FAKE_DIMENSION');
            }
            axisItem.isFake = true;

            var hasAllNecessaryValue = false;
            for(j = 0; j < rawDataSet.analysisAxis.length; j++) {
                if(rawDataSet.analysisAxis[j].data[0] != null && rawDataSet.analysisAxis[j].data[0].values.length > 0) {
                    hasAllNecessaryValue = true;
                } else {
                    hasAllNecessaryValue = false;
                }
            }

            if(hasAllNecessaryValue || i > 0) {
                if(chartType === ChartConst.TYPE_TREE || chartType === ChartConst.TYPE_NETWORK) {
                    axisItem.values = FakeDataUtils._buildFakeDimensionValues(axis.data[0].values.length);
                } else {
                    axisItem.values = FakeDataUtils._buildFakeDimensionValues(1);
                }
            } else {
                var nbMeasureValues = 10;
                if(rawDataSet.measureValuesGroup != null && rawDataSet.measureValuesGroup[0] != null) {
                    nbMeasureValues = rawDataSet.measureValuesGroup[0].data[0].values.length;
                }
                axisItem.values = FakeDataUtils._buildFakeDimensionValues(nbMeasureValues);
                if(FakeDataUtils._isGeoOrNor(vizType)) {
                    axisItem.infos =FakeDataUtils._buildFakeGeoInfos(nbMeasureValues);
                }
            }

            axis.data.push(axisItem);
        }

        if(rawDataSet.measureValuesGroup == null) {
            rawDataSet.measureValuesGroup = [];
        }

        var needSwapMeasure = FakeDataUtils._sortAxes(feeds, rawDataSet, rivFeeding);
        if(needSwapMeasure) {
            FakeDataUtils._swapMeasure(rawDataSet);
        }

        // update rawDataSet's measureValuesGroup according to measure build fake info
        for(i = 0; i < fakeMeasuresToBeBuilt.length; i++) {
            var fakeMeasureToBeBuilt = fakeMeasuresToBeBuilt[i];
            var mg = null;
            for(j = 0; j < rawDataSet.measureValuesGroup.length; j++) {
                if(rawDataSet.measureValuesGroup[j].index == fakeMeasureToBeBuilt.mgIndex) {
                    mg = rawDataSet.measureValuesGroup[j];
                }
            }
            if(mg == null) {
                mg = {};
                mg.data = [];
                mg.index = fakeMeasureToBeBuilt.mgIndex;
                rawDataSet.measureValuesGroup.push(mg);
            }

            for (var k = 0; k < fakeMeasureToBeBuilt.nb; k++) {
                var mgItem = {};
                mgItem.type = FeedItemType.MEASURE;
                
                if(fakeMeasureToBeBuilt.nb > 1 || fakeMeasuresToBeBuilt.length > 1)
                {
                    mgItem.name = LangManager.get('VIZ_COMMON_FAKE_MEASURE') + (i+k+1);
                }
                else
                {
                    mgItem.name = LangManager.get('VIZ_COMMON_FAKE_MEASURE');
                }
                mgItem.isFake = true;

                var axisSizes = [];
                for (j = rawDataSet.analysisAxis.length - 1; j >= 0; j--) {
                    axisSizes.push(rawDataSet.analysisAxis[j].data[0].values.length);
                }
                if (axisSizes.length === 0) {
                    axisSizes = [1];
                }
                var values = FakeDataUtils._buildFakeMeasureValues(axisSizes);
                if (!Array.isArray(values[0])) {
                    values = [values];
                }
                mgItem.values = values;

                mg.data.push(mgItem);
            }

        }

        return {
            "feeding" : rivFeeding,
            "dataset" : rawDataSet
        };
    };
    /**
     * Update rawDataSet's analysisAxis array's sequence and feeding's aaIndex according to cvom feed defination,
     * called only when vizType is 'viz/heatmap', for heatmap, the aaIndex of data's analysis and feeding should
     * be the same as cvom
     */
    FakeDataUtils._sortAxes = function(feeds, rawDataSet, rivFeeding) {
        var aaPriorityMap = {}, i, j, aa, aaIndex, binding;
        if(rawDataSet.analysisAxis.length > 1) {
            //sort axes according to the index of corresponding feed in viz manifest
            for(i = 0; i < feeds.length; i++) {
                var feed = feeds[i];
                if(feed.type === FeedItemType.DIMENSION) {
                    for(j = 0; j < rivFeeding.length; j++) {
                        if(rivFeeding[j].feedId === feed.id) {
                            aaIndex = feed.aaIndex;
                            binding = rivFeeding[j].binding;
                            for(var m = 0; m<binding.length; m++)
                            {
                                if(binding[m] && binding[m].type == ChartConst.ANALYSIS_AXIS) {
                                    var bindingIndex = binding[m].index;
                                    for(var n = 0; n < rawDataSet.analysisAxis.length; n++) {
                                        if(rawDataSet.analysisAxis[n].index === bindingIndex) {
                                            aaPriorityMap[n] = aaIndex;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        var needSwapMeasure = false;
        for(i = 0; i < rawDataSet.analysisAxis.length; i++)
        {
            for(j = rawDataSet.analysisAxis.length-1; j >= i+1; j--)
            {
                if(aaPriorityMap[j]<aaPriorityMap[j-1])
                {
                    aa = rawDataSet.analysisAxis[j];
                    rawDataSet.analysisAxis[j] = rawDataSet.analysisAxis[j-1];
                    rawDataSet.analysisAxis[j-1] = aa;
                    //when axes are sorted, measuregroup array should also be swapped.
                    needSwapMeasure = true;
                }
            }
        }
        var clonedFeeding = Utils.clone(rivFeeding);
        for(i = 0; i < rawDataSet.analysisAxis.length; i++)
        {
            aa = rawDataSet.analysisAxis[i];
            aaIndex = i+1;
            for(j = 0; j < clonedFeeding.length; j++) 
            {
                binding = clonedFeeding[j].binding;
                for(var k = 0; k<binding.length; k++)
                {
                    if(binding[k] && binding[k].type == ChartConst.ANALYSIS_AXIS && binding[k].index == aa.index) {
                        rivFeeding[j].binding[k].index = aaIndex;
                    }
                }
            }
            aa.index = aaIndex;
        }
        return needSwapMeasure;
    };
    /**
     * Update rawDataSet's measureValuesGroup array's data array's sequence
     */
    FakeDataUtils._swapMeasure = function(rawDataSet)
    {
        var j;
        var measureGroup = rawDataSet.measureValuesGroup;
        if(measureGroup)
        {
            for(var m = 0; m < measureGroup.length; m++) {
                var dataGroup = measureGroup[m].data;
                if(dataGroup)
                {
                    for(var n = 0; n < dataGroup.length; n++)
                    {
                        var data = dataGroup[n];
                        var l1 = data.values.length;
                        var l2 = data.values[0].length;
                        var newValues = new Array(l2);
                        for(j = 0; j < l2; j++) {
                            newValues[j] = new Array(l1);
                        }
                        for(var i = 0; i < l1; i++) {
                            for(j = 0; j < l2; j++) {
                                newValues[j][i] = data.values[i][j];
                            }
                        }
                        data.values = newValues;
                    }
                }
            }
        }
    };
    /**
     * Check whether the current feed's need to build fake data and update its aaIndex
     */
    FakeDataUtils._getFakeToBeBuilt = function(feed, rivFeeding, rawDataSet) {
        var feedMin = feed.min;
        if(feed.id === "treeNode" || feed.id === "link") {
            feedMin = feed.minStackedDims;
        }
        if(feedMin === 0) {
            return {
                "nb" : 0
            };
        }
        var nbFeeding = 0;
        var i, j, k, nbFakeToBeBuilt;
        //get nbFakeToBeBuilt according to rawDataSet
        for(i = 0; i < rivFeeding.length; i++) {
            var axisIndex = null;
            var mgIndex = null;
            if(feed.id == rivFeeding[i].feedId) {
                if(feed.type == FeedItemType.DIMENSION) {
                    var bindings = rivFeeding[i].binding;
                    for(k = 0; k < bindings.length; k++) {
                        if(bindings[k].index) {
                            axisIndex = bindings[k].index;
                        }
                    }
                    //the current feeding is not mnd
                    if (axisIndex !== null) {
                        // don't build fake data for empty chartDataSet
                        if (!rawDataSet.analysisAxis.length) {
                            return {
                                "nb" : 0,
                                "axisIndex" : axisIndex
                            };
                        } else {
                            for(j = 0; j < rawDataSet.analysisAxis.length; j++) {
                                if(rawDataSet.analysisAxis[j].index == axisIndex) {
                                    nbFeeding = rawDataSet.analysisAxis[j].data.length;
                                    nbFakeToBeBuilt = feedMin - nbFeeding;
                                    if(nbFakeToBeBuilt < 0) {
                                        nbFakeToBeBuilt = 0;
                                    }
                                    return {
                                        "nb" : nbFakeToBeBuilt,
                                        "axisIndex" : axisIndex
                                    };
                                }
                            }
                        }
                    } else {//the current feeding has only mnd
                        return {
                            "nb" : 0
                        };
                    }

                } else if(feed.type == FeedItemType.MEASURE) {
                    mgIndex = rivFeeding[i].binding[0].index;
                    for(j = 0; j < rawDataSet.measureValuesGroup.length; j++) {
                        if(rawDataSet.measureValuesGroup[j].index == mgIndex) {
                            nbFeeding = rawDataSet.measureValuesGroup[j].data.length;
                            nbFakeToBeBuilt = feedMin - nbFeeding;
                            if(nbFakeToBeBuilt < 0) {
                                nbFakeToBeBuilt = 0;
                            }
                            return {
                                "nb" : nbFakeToBeBuilt,
                                "mgIndex" : mgIndex
                            };
                        }
                    }
                    // don't build fake data for empty chartDataSet
                    return {
                        "nb" : 0,
                        "mgIndex" : mgIndex
                    };
                }
            }
        }
        //get infos if not found data of this feed in rawDataSet,
        //it means need to build an empty feeding info for the current feed
        var binding;
        if(feed.type == FeedItemType.DIMENSION) {
            var newAxisIndex = 1;
            for(i = 0; i < rivFeeding.length; i++) {
                for(k = 0; k < rivFeeding[i].binding.length; k++) {
                    if(rivFeeding[i].binding[k].type == ChartConst.ANALYSIS_AXIS && rivFeeding[i].binding[k].index >= newAxisIndex) {
                        //if rivFeeding has already an unempty binding, then aaIndex should add 1
                        newAxisIndex = rivFeeding[i].binding[k].index + 1;
                    }
                }
            }
            binding = {};
            binding.feedId = feed.id;
            binding.binding = [];
            binding.binding[0] = {};
            binding.binding[0].type = ChartConst.ANALYSIS_AXIS;
            binding.binding[0].index = newAxisIndex;
            rivFeeding.push(binding);
            return {
                "nb" : feedMin,
                "axisIndex" : newAxisIndex
            };
        } else if(feed.type == FeedItemType.MEASURE) {
            var newMgIndex = 1;
            for(i = 0; i < rivFeeding.length; i++) {
                if(rivFeeding[i].binding[0].type == ChartConst.MEASURE_VALUES_GROUP && rivFeeding[i].binding[0].index >= newMgIndex) {
                    newMgIndex = rivFeeding[i].binding[0].index + 1;
                }
            }
            binding = {};
            binding.feedId = feed.id;
            binding.binding = [];
            binding.binding[0] = {};
            binding.binding[0].type = ChartConst.MEASURE_VALUES_GROUP;
            binding.binding[0].index = newMgIndex;
            rivFeeding.push(binding);
            return {
                "nb" : feedMin,
                "mgIndex" : newMgIndex
            };
        }
        return null;
    };
    FakeDataUtils._buildFakeMeasureValues = function(axisSizes) {
        var values = [];
        var currentAxisSize = axisSizes[0];
        var i = 0;
        if(axisSizes.length == 1) {
            for(i = 0; i < currentAxisSize; i++) {
                values[i] = Math.round(Math.random() * 100);
            }
        } else {
            axisSizes.shift();
            for(i = 0; i < currentAxisSize; i++) {
                values[i] = FakeDataUtils._buildFakeMeasureValues(axisSizes);
            }
        }
        return values;
    };
    FakeDataUtils._buildFakeDimensionValues = function(nbValues) {
        var dimensionValues = [];
        for(var i = 0; i < nbValues; i++) {
            dimensionValues[i] = FakeDataUtils.fakeDimensionName + (i + 1);
        }
        return dimensionValues;
    };
    FakeDataUtils._buildFakeGeoInfos = function(nbValues) {
        var fakeGeoInfos = [];
        for(var i = 0; i < nbValues; i++) {
            fakeGeoInfos[i] = '';
        }
        return fakeGeoInfos;
    };
    FakeDataUtils._isGeoOrNor = function(type) {
        if(type.search('geo') == -1 && type.search('choropleth') == -1) {
            return false;
        } else {
            return true;
        }
    };
    
    /**
     * Generate MND info in Data Feed.
     * @param {String} type
     * @param {Array} feedings
     */
    FakeDataUtils._buildMNDFeedings = function(feedings, type) {
        if (!feedings) {
            return;
        }

        var chart = sap.viz.api.manifest.Viz;
        var chartConfig = chart.get(type)[0];
        var feeds = chartConfig.allFeeds();
        var mndFeed = {
            feedId : null,
            index : -1,
            priority : -1
        };

        for (var i = 0; i < feeds.length; i++) {
            var fId = feeds[i].id;
            var feeding = feeds[i];
            var found = false;
            for (var j = 0; j < feedings.length; j++) {
                if (feedings[j].feedId === fId) {
                    if (feedings[j].binding.length < feeding.min) {
                        if (FakeDataUtils.canAcceptMND(feeding.acceptMND)) {
                            mndFeed = {
                                feedId : fId,
                                index : j,
                                priority : feeding.acceptMND
                            };
                        }
                    }
                    found = true;
                    break;
                }
            }
            if (!found) {
                if (feeding.min > 0 && FakeDataUtils.canAcceptMND(feeding.acceptMND)) {
                    mndFeed = {
                        feedId : fId,
                        index : -1,
                        priority : feeding.acceptMND
                    };
                }
            }
        }

        var chartFeedData = feedings;
        if (chartFeedData && mndFeed.index >= 0) {
            chartFeedData[mndFeed.index].binding.push({
                "type" : ChartConst.MEASURE_NAMES_DIMENSION
            });
        } else if (chartFeedData && mndFeed.feedId) {
            chartFeedData.push({
                binding : [{
                    "type" : ChartConst.MEASURE_NAMES_DIMENSION
                }],
                feedId : mndFeed.feedId
            });
        }
        return chartFeedData;
    };
    
    FakeDataUtils.canAcceptMND = function(acceptMND) {
        // acceptMND : false|undefined|number
        acceptMND = Utils.isNumber(acceptMND) ? Number(acceptMND) : -1;
        return (acceptMND >= 0);
    };
    return FakeDataUtils;
});

define('sap/viz/controls/common/utils/FlatTableFakeDataUtil',
// @formatter:off
[
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/InfoChartUtil',
    'sap/viz/controls/common/metadata/MetadataFactory'
],
function(AnalyticalType, LangManager, Utils, InfoChartUtil, MetadataFactory){

    var FlatTableFakeDataUtils = {};
    FlatTableFakeDataUtils.fakeDimensionName = "abc";

    FlatTableFakeDataUtils.buildFakeData = function(infoType, feedItems, rawDataset) {

        // get the feeding index and number that need to be built
        var fakeToBeBuilt = _getFakeToBeBuilt(infoType, feedItems);

        var i, j, k, index;
        var measureIndex = 0;
        var dimensionIndex = 0;
        var measureNB = 0;
        var dimensionNB = 0;
        
        for(i = 0; i < fakeToBeBuilt.length; i++) {
            index = fakeToBeBuilt[i].index;
            for(j = 0; j < fakeToBeBuilt[i].nb; j++) {
                if(feedItems[index].type() === 'Dimension') {
                    dimensionNB++;
                } else if(feedItems[index].type() === 'Measure') {
                    measureNB++;
                }
            }
        }
        
        //build fake data
        for(i = 0; i < fakeToBeBuilt.length; i++) {
            index = fakeToBeBuilt[i].index;
            for(j = 0; j < fakeToBeBuilt[i].nb; j++) {
                if(feedItems[index].type() === 'Dimension') {
                    dimensionIndex++;
                    var axisItem = {};
                    axisItem.semanticType = "Dimension";
                    if(dimensionNB > 1)
                    {
                        axisItem.name = LangManager.get('VIZ_COMMON_FAKE_DIMENSION') + dimensionIndex;
                    }
                    else
                    {
                        axisItem.name = LangManager.get('VIZ_COMMON_FAKE_DIMENSION');
                    }
                    axisItem.id = LangManager.get('VIZ_COMMON_FAKE_DIMENSION') + '_' + feedItems[index].id() + '_' + j;
                    axisItem.isFake = true;
                    //add fake to metadata
                    rawDataset.metadata.fields.push(axisItem);
                    // add fake to data
                    for(k = 0; k < rawDataset.data.length; k++) {
                        rawDataset.data[k].push(FlatTableFakeDataUtils.fakeDimensionName + (k + 1));
                    }
                } else if(feedItems[index].type() === 'Measure') {
                    measureIndex++;
                    var mgItem = {};
                    mgItem.semanticType = "Measure";
                    if(measureNB > 1)
                    {
                        mgItem.name = LangManager.get('VIZ_COMMON_FAKE_MEASURE') +  measureIndex;
                    }
                    else
                    {
                        mgItem.name = LangManager.get('VIZ_COMMON_FAKE_MEASURE');
                    }
                    mgItem.id = LangManager.get('VIZ_COMMON_FAKE_MEASURE') + '_' + feedItems[index].id() + '_' + j;
                    mgItem.isFake = true;
                    //add fake to metadata
                    rawDataset.metadata.fields.push(mgItem);
                    // add fake to data
                    for(k = 0; k < rawDataset.data.length; k++) {
                        rawDataset.data[k].push(Math.round(Math.random() * 100));
                    }
                }
            }
        }

        return rawDataset;
    };
    
    /*
     * Get the mnd feedItem which we don't need to build fake
     */
    var _getMNDfeed = function(feeds, feedItems) {
        var mndFeed = {
            priority : Number.MAX_VALUE,
            foundInFeedItems : false
        };
        var i, j, k, feedItem, feed, analysisObject, feedMin, bvrMNDPriority;
        for(i = 0; i<feedItems.length; i++){
            feedItem = feedItems[i];
            // if mnd value exist then return the feedItem id
            for(j = 0; j<feedItem.values().length; j++){
                analysisObject = feedItem.values()[j];
                if(analysisObject.type() === AnalyticalType.MND){
                    mndFeed.feedId = feedItem.id();
                    mndFeed.foundInFeedItems = true;
                    return mndFeed;
                }
            }
            // mark the mnd feedItem with maximum acceptMND
            for(k = 0; k<feeds.length; k++){
                feed = feeds[k];
                if(feed.id() === feedItem.id()) {
                    feedMin = feed.min();
                    if(!!feedMin && !!feed.mndMode() && feedItem.values().length < feedMin) {
                        // if MNDCompatibility is not optional and feedItem already has value means no more mnd is needed
                        if((feed.mndMode() != 'support' && feedItem.values().length > 0) || feed.mndMode() == 'none'){
                            continue;
                        }
                        bvrMNDPriority = feed.bvrMNDPriority();
                        if(bvrMNDPriority < mndFeed.priority){
                            mndFeed = {
                                feedId : feedItem.id(),
                                priority : bvrMNDPriority
                            };
                        }
                    }
                }
            }
        }
        
        if(!mndFeed.feedId) {
            for(i = 0; i < feedItems.length; i++) {
                feedItem = feedItems[i];
                // if mnd value exist then return the feedItem id
                for(j = 0; j < feedItem.values().length; j++) {
                    analysisObject = feedItem.values()[j];
                    if(analysisObject.type() === AnalyticalType.MND) {
                        mndFeed.feedId = feedItem.id();
                        mndFeed.foundInFeedItems = true;
                        return mndFeed;
                    }
                }
                // mark the mnd feedItem with maximum acceptMND
                for(k = 0; k < feeds.length; k++) {
                    feed = feeds[k];
                    if(feed.id() === feedItem.id()) {
                        feedMin = feed.min();
                        if(feed.mndMode()) {
                            if((feed.mndMode() != 'support' && feedItem.values().length > 0) || feed.mndMode() == 'none') {
                                continue;
                            }
                            bvrMNDPriority = feed.bvrMNDPriority();
                            if(bvrMNDPriority < mndFeed.priority) {
                                mndFeed = {
                                    feedId : feedItem.id(),
                                    priority : bvrMNDPriority
                                };
                            }
                        }
                    }
                }
            }
        }

        return mndFeed;
    };

    /*
     * 'index' means which feedItem need to build fake, 'nb' means how many fake value need to be built
     */
    var _getFakeToBeBuilt = function(infoType, feedItems) {
        var feeds = MetadataFactory.get(infoType).getBindingDefs();
        var fakeToBeBuilt = [];
        var mndFeed = _getMNDfeed(feeds, feedItems).feedId;
        for(var i = 0; i < feeds.length; i++) {
            var feed = feeds[i];
            for(var j = 0; j < feedItems.length; j++) {
                var feedItem = feedItems[j];
                if(feedItem.id() === mndFeed) {
                    continue;
                }
                if(feed.id() === feedItem.id()) {
                    // check if min is satisfied
                    var feedMin = feed.min();
                    if(!!feedMin && feedItem.values().length < feedMin) {
                            fakeToBeBuilt.push({
                                id : feed.id(),
                                index : j,
                                nb : feedMin - feedItem.values().length
                            });
                    }
                    break;
                }
            }
        }
        return fakeToBeBuilt;
    };


    var _buildBinding = function(infoType, feeds, adjustMND) {
        var infoBinding = [];
        var mndBinding = _getMNDBinding(infoType);
        for(var i = 0; i < feeds.length; i++) {
            var feed = feeds[i];
            var values = feed.values() || [];
            var binding = {'feed': feed.id(), 'source' :[]};
            var list = binding.source;
            for(var j = 0; j < values.length; j++) {
                var aaObj = values[j];
                if(aaObj.type() === AnalyticalType.MND) {
                    if(adjustMND) {
                        list.unshift(mndBinding);
                    } else {
                        list.push(mndBinding);
                    }
                } else {
                    if(aaObj.type() === AnalyticalType.HIERARCHY) {
                        for(var k = 0; k < aaObj.hierarchyLevels().length; k++) {
                            var level = aaObj.hierarchyLevels()[k];
                            // use hierarchy level object id, in case its
                            // analysis object is also used in another
                            // hierarchy level object, but with a
                            // different hierarchy level name.
                            list.push(level.id());
                            if(level.selected()) {
                                break;
                            }
                        }
                    } else {
                        list.push(aaObj.id());
                    }
                }
            }
            infoBinding.push(binding);
        }
        return infoBinding;
    };


    FlatTableFakeDataUtils.buildFakeBinding = function(infoType, feeds, adjustMND) {
        var infoBinding = _buildBinding(infoType, feeds, adjustMND);
        // get the feeding id and number that need to be built
        var fakeToBeBuilt = [];
        if(!!infoType) {
            fakeToBeBuilt = _getFakeToBeBuilt(infoType, feeds);
        }
        if(fakeToBeBuilt.length > 0) {
            for(var i = 0; i < feeds.length; i++) {
                var feed = feeds[i];
                var list = infoBinding[i].source;
                var needFake = false;
                var needFakeLength = 0;
                for(var k = 0; k < fakeToBeBuilt.length; k++) {
                    if(feed.id() === fakeToBeBuilt[k].id) {
                        needFake = true;
                        needFakeLength = fakeToBeBuilt[k].nb;
                        break;
                    }
                }
                if(needFake) {
                    for(var n = 0; n < needFakeLength; n++) {
                        if(feed.type() === 'Measure') {
                            list.push(LangManager.get('VIZ_COMMON_FAKE_MEASURE') + '_' + feed.id() + '_' + n);
                        }
                        if(feed.type() === 'Dimension') {
                            list.push(LangManager.get('VIZ_COMMON_FAKE_DIMENSION') + '_' + feed.id() + '_' + n);
                        }
                    }
                }
            }
        }
        infoBinding = _buildMNDBinding(infoBinding, infoType, feeds)
        return infoBinding;
    };
    
    var _getMNDBinding = function(infoType) {
        var bindingDefs = MetadataFactory.get(infoType).getBindingDefs();
        var mndBinding = [];
        for(var i = 0; i < bindingDefs.length; i++) {
            var bindingDef = bindingDefs[i];
            if(bindingDef.type() === 'measure' && bindingDef.min() > 0) {
                mndBinding.push(bindingDef.id());
            }
        }
        return {
            measureNames : mndBinding
        };
    };

    var _buildMNDBinding = function(infoBinding, infoType, feedItems) {
        if (!infoBinding) {
            return;
        }
        var feeds =  MetadataFactory.get(infoType).getBindingDefs();
        var mndBinding = _getMNDBinding(infoType);
        var mndFeed = _getMNDfeed(feeds, feedItems);

        if (infoBinding && !mndFeed.foundInFeedItems) {
            for(var i=0;i<infoBinding.length;i++)
            {
                if(infoBinding[i].feed == mndFeed.feedId)
                {
                    infoBinding[i].source.unshift(mndBinding);
                    break;
                }
            }
        }
        return infoBinding;
    };

    return FlatTableFakeDataUtils;

});

define('sap/viz/controls/services/FakeDataService',
// @formatter:off
[
    'sap/viz/controls/common/utils/FakeDataUtils',
    'sap/viz/controls/common/utils/FlatTableFakeDataUtil',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/utils/VizFeedingUtil'
], 
function(FakeDataUtils, FlatTableFakeDataUtil, ChartTypeUtil, VizFeedingUtil) {
    // @formatter:on
    /**
     * Constructor of FakeDataService. This class is to fill raw dataset with fake data which chart can consume.
     * @param {String} vizType
     *            Viz type of the chart
     * @param {JSON} rawDataSet
     *            JSON object of raw dataset fetched from data service
     * @param {JSON} feedItems
     *            JSON object to present collection of FeedItems
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var fds = new FakeDataService(...);
     * </pre>
     */
    var FakeDataService = function(vizType, rawDataSet, feedItems) {
        this._createChart(vizType, rawDataSet, feedItems);
    };
    /**
     * convert feedItems to feed structure which FakeDataService can consume.
     * @method sap.viz.controls.services.FakeDataService.feedItems2feed
     * @param {JSON} feedItems
     *             JSON object to present collection of feed items
     * @return {JSON}
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var feedItems = {...};
     * var feed = FakeDataService.feedItems2feed(feedItems);
     * </pre>
     */
    FakeDataService.feedItems2feed = function(feedItems) {

        return VizFeedingUtil.feedItems2feed(feedItems);
    };
    /**
     * Get vizType for chart
     * @method sap.viz.controls.services.FakeDataService.prototype.getVizType
     * @return {String}
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var fds = new FakeDataService(...);
     * var type = fds.getVizType();
     * </pre>
     */
    FakeDataService.prototype.getVizType = function() {
        return this._vizType;
    };
    /**
     * Get dataset filled with fake data if necessary, which is ready to be consumed by chart.
     * @method sap.viz.controls.services.FakeDataService.prototype.getVizDataset
     * @return {JSON}
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var fds = new FakeDataService(...);
     * var dataset = fds.getVizDataset();
     * </pre>
     */
    FakeDataService.prototype.getVizDataset = function() {
        return this._vizDataset;
    };
    FakeDataService.prototype._createChart = function(vizType, rawDataSet, feedItems) {
        this._vizType = vizType;
        if(ChartTypeUtil.isInfoChart(vizType))
        {
            this._vizDataset = FlatTableFakeDataUtil.buildFakeData(vizType, feedItems, rawDataSet);
        } 
        else
        {
            var fakedata = FakeDataUtils.buildFakeData(vizType, feedItems, rawDataSet);
            this._vizDataset = fakedata.dataset;
            this._vizFeeding = fakedata.feeding;
        }
    };
    return FakeDataService;
});

// @formatter:off
define('sap/viz/controls/common/utils/IncompleteGhost',[
    'sap/viz/controls/common/metadata/MetadataFactory',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/utils/InfoChartUtil',
    'sap/viz/controls/services/FakeDataService'
    ],
function(MetadataFactory, ChartConst, LangManager, ChartTypeUtil, InfoChartUtil, FakeDataService) {
// @formatter:on
    var IncompleteGhost = {};

    IncompleteGhost.getDataset = function(type) {
        var metadata = MetadataFactory.get(type), dataset, data;
        if(!metadata) {
            // return empty crosstable dataset if chart is no loaded.
            dataset = new sap.viz.api.data.CrosstableDataset();
            return dataset;
        } else if((!ChartTypeUtil.isBuildInType(type)) && type !== ChartConst.TYPE_PC && type !== ChartConst.TYPE_FUNNEL && !ChartTypeUtil.isTable(type)) {
            // use common incomplete data for PC and funnel chart.
            var fakeDataService = new FakeDataService(type, {}, []);
            dataset = new sap.viz.api.data.CrosstableDataset();

            data = fakeDataService.getVizDataset();
            dataset.data(data);
            return dataset;
        } else {
            type = ChartTypeUtil.getVizType(type);
            if(InfoChartUtil.isInfoChart(type)) {
                data = IncompleteGhost.getDataByType(type) || IncompleteGhost.getDataInfoCommon();
                dataset = new sap.viz.api.data.FlatTableDataset();
                dataset.data(data);
                return dataset;
            } else {
                data = IncompleteGhost.getDataByType(type) || IncompleteGhost.getDataCommon();
                if(ChartTypeUtil.isTable(type)) {
                    return data;
                } else {
                    dataset = new sap.viz.api.data.CrosstableDataset();
                    dataset.data(data);
                    return dataset;
                }
            }
        }
    };
    
    IncompleteGhost.getFeeding = function(type) {
        if(InfoChartUtil.isInfoChart(type)) {
            type = ChartTypeUtil.getVizType(type);
            var feeding = IncompleteGhost.getFeedingByType(type);
            return feeding;
        }else{
            return null;
        }
    };
    
    var dataCommonCache = {};

    IncompleteGhost.getDataCommon = function() {
        var result = {};
        var LANG_VIZ_COMMON_FAKE_DIMENSION = LangManager.get('VIZ_COMMON_FAKE_DIMENSION');
        var LANG_VIZ_COMMON_FAKE_MEASURE = LangManager.get('VIZ_COMMON_FAKE_MEASURE');
        var LANG_VIZ_COMMON_LEGEND = LangManager.get('VIZ_COMMON_LEGEND');
        var LANG_VIZ_COMMON_ITEM = LangManager.get('VIZ_COMMON_ITEM');
        if (dataCommonCache["cache"]){
            return dataCommonCache["cache"];
        } else {
            result = {
                'analysisAxis' : [{
                    'index' : 1,
                    'data' : [{
                        'isFake' : true,
                        'type' : 'Dimension',
                        'name' : LANG_VIZ_COMMON_FAKE_DIMENSION,
                        'values' : ['abc1', 'abc2', 'abc3', 'abc4', 'abc5', 'abc6', 'abc7', 'abc8', 'abc9']
                    }]
                }, {
                    'index' : 2,
                    'data' : [{
                        'isFake' : true,
                        'type' : 'Dimension',
                        'name' : LANG_VIZ_COMMON_LEGEND,
                        'values' : [LANG_VIZ_COMMON_ITEM + '1', LANG_VIZ_COMMON_ITEM + '2', LANG_VIZ_COMMON_ITEM + '3', LANG_VIZ_COMMON_ITEM + '4']
                    }]
                }],
                'measureValuesGroup' : [{
                    'index' : 1,
                    'data' : [{
                        'isFake' : true,
                        'type' : 'Measure',
                        'name' : LANG_VIZ_COMMON_FAKE_MEASURE,
                        'values' : [[98, 113, 105, 29, 53, 31, 48, 51, 58], [87, 103, 27, 61, 28, 74, 50, 32, 65], [148, 109, 91, 43, 114, 50, 35, 76, 75], [71, 102, 80, 29, 43, 101, 69, 38, 58]]
                    }]
                }, {
                    'index' : 2,
                    'data' : [{
                        'isFake' : true,
                        'type' : 'Measure',
                        'name' : LANG_VIZ_COMMON_FAKE_MEASURE + '1',
                        'values' : [[32, 78, 91, 45, 110, 55, 39, 26, 50], [86, 108, 27, 50, 17, 28, 89, 116, 123], [83, 28, 58, 100, 86, 59, 66, 87, 63], [39, 100, 88, 18, 85, 96, 72, 37, 59]]
                    }]
                }, {
                    'index' : 3,
                    'data' : [{
                        'isFake' : true,
                        'type' : 'Measure',
                        'name' : LANG_VIZ_COMMON_FAKE_MEASURE + '2',
                        'values' : [[46, 58, 90, 5, 10, 4, 79, 86, 30], [56, 98, 20, 20, 7, 58, 39, 16, 23], [103, 98, 78, 40, 76, 29, 16, 59, 43], [59, 80, 98, 8, 45, 16, 120, 97, 39]]
                    }]
                }]
            };
            dataCommonCache["cache"] = result;
            return result;
        }
    };

    
    IncompleteGhost.getDataByType = function(type){
        var result;
        var LANG_VIZ_COMMON_FAKE_DIMENSION = LangManager.get('VIZ_COMMON_FAKE_DIMENSION');
        var LANG_VIZ_COMMON_FAKE_MEASURE = LangManager.get('VIZ_COMMON_FAKE_MEASURE');
        var LANG_VIZ_COMMON_LEGEND = LangManager.get('VIZ_COMMON_LEGEND');
        var LANG_VIZ_COMMON_ITEM = LangManager.get('VIZ_COMMON_ITEM');
        switch (type)
        {
            case ChartConst.TYPE_DUAL_COMBINATION:
                result = {
                    'analysisAxis' : [{
                        'index' : 1,
                        'data' : [{
                            'isFake' : true,
                            'type' : 'Dimension',
                            'name' : LANG_VIZ_COMMON_FAKE_DIMENSION,
                            'values' : ['abc1', 'abc2', 'abc3', 'abc4', 'abc5', 'abc6', 'abc7', 'abc8', 'abc9']
                        }]
                    }, {
                        'index' : 2,
                        'data' : [{
                            'isFake' : true,
                            'type' : 'Dimension',
                            'name' : LANG_VIZ_COMMON_LEGEND,
                            'values' : [LANG_VIZ_COMMON_ITEM + '1']
                        }]
                    }],
                    'measureValuesGroup' :[{
                        'index' : 1,
                        'data' : [{
                            'isFake' : true,
                            'type' : 'Measure',
                            'name' : LANG_VIZ_COMMON_FAKE_MEASURE + '1',
                            'values' : [[98, 113, 105, 29, 53, 31, 48, 51, 58]]
                        }]
                    }, {
                        'index' : 2,
                        'data' : [{
                            'isFake' : true,
                            'type' : 'Measure',
                            'name' : LANG_VIZ_COMMON_FAKE_MEASURE + '2',
                            'values' : [[57, 110, 27, 61, 28, 74, 50, 32, 65]]
                        }]
                    }]
                };
                break;

            case ChartConst.TYPE_PIE_WITH_DEPTH:
            case ChartConst.TYPE_FUNNEL:
                result =  {
                    'analysisAxis' : [{
                        'index' : 1,
                        'data' : [{
                            'isFake' : true,
                            'type' : 'Dimension',
                            'name' : LANG_VIZ_COMMON_LEGEND,
                            'values' : [LANG_VIZ_COMMON_ITEM + '1', LANG_VIZ_COMMON_ITEM + '2', LANG_VIZ_COMMON_ITEM + '3', LANG_VIZ_COMMON_ITEM + '4', LANG_VIZ_COMMON_ITEM + '5', LANG_VIZ_COMMON_ITEM + '6', LANG_VIZ_COMMON_ITEM + '7', LANG_VIZ_COMMON_ITEM + '8', LANG_VIZ_COMMON_ITEM + '9']
                        }]
                    }],
                    'measureValuesGroup' :[{
                        'index' : 1,
                        'data' : [{
                            'isFake' : true,
                            'type' : 'Measure',
                            'name' : LANG_VIZ_COMMON_FAKE_MEASURE + '1',
                            'values' : [[98, 113, 105, 29, 53, 31, 48, 51, 58]]
                        }]
                    }, {
                        'index' : 2,
                        'data' : [{
                            'isFake' : true,
                            'type' : 'Measure',
                            'name' : LANG_VIZ_COMMON_FAKE_MEASURE + '2',
                            'values' : [[57, 110, 27, 61, 28, 74, 50, 32, 65]]
                        }]
                    }]
                };
                break;

            case ChartConst.TYPE_NUMBER:
                result = {
                    'analysisAxis' : [{
                    'index' : 1,
                    'data' : [{
                        'isFake' : true,
                        'type' : 'Dimension',
                        'name' : LANG_VIZ_COMMON_FAKE_DIMENSION,
                        'values' : ['abc1']
                        }]
                    }],
                    'measureValuesGroup' : [{
                        'index' : 1,
                        'data' : [{
                            'isFake' : true,
                            'type' : 'Measure',
                            'name' : LANG_VIZ_COMMON_FAKE_MEASURE,
                            'values' : [[null]]
                        }]
                    }]
                };
                break;

            case ChartConst.TYPE_GEO_BUBBLE:
            case ChartConst.TYPE_GEO_CHOROPLETH:
            case ChartConst.TYPE_GEO_PIE:
            case ChartConst.TYPE_GEO_MAP:
            result = {
                'analysisAxis' : [{
                'index' : 1,
                'data' : [{
                    'isFake' : true,
                    'type' : 'Dimension',
                    'name' : LangManager.get('VIZ_COMMON_REGION'),
                    'values' : ['United Kingdom', 'Italy', 'United States', 'New Zealand', 'Germany', 'China', 'Russia', 'Canada', 'Brazil'],
                    'infos' : [{
                        'featureId' : 'UK,NAVTEQ',
                        'latLong' : undefined
                    }, {
                        'featureId' : '20110484,NAVTEQ',
                        'latLong' : undefined
                    }, {
                        'featureId' : '21000001,NAVTEQ',
                        'latLong' : undefined
                    }, {
                        'featureId' : '23060936,NAVTEQ',
                        'latLong' : undefined
                    }, {
                        'featureId' : '20147700,NAVTEQ',
                        'latLong' : undefined
                    }, {
                        'featureId' : '22928332,NAVTEQ',
                        'latLong' : undefined
                    }, {
                        'featureId' : '20485579,NAVTEQ',
                        'latLong' : undefined
                    }, {
                        'featureId' : '21041602,NAVTEQ',
                        'latLong' : undefined
                    }, {
                        'featureId' : '23028911,NAVTEQ',
                        'latLong' : undefined
                    }]
                }]
                }, {
                    'index' : 2,
                    'data' : [{
                        'isFake' : true,
                        'type' : 'Dimension',
                        'name' : LANG_VIZ_COMMON_LEGEND,
                        'values' : [LANG_VIZ_COMMON_ITEM + '1', LANG_VIZ_COMMON_ITEM + '2', LANG_VIZ_COMMON_ITEM + '3', LANG_VIZ_COMMON_ITEM + '4']
                    }]
                }],
                'measureValuesGroup' : [{
                    'index' : 1,
                    'data' : [{
                        'isFake' : true,
                        'type' : 'Measure',
                        'name' : LANG_VIZ_COMMON_FAKE_MEASURE + '1',
                        'values' : [[98, 113, 105, 29, 53, 31, 48, 51, 58], [87, 103, 27, 61, 28, 74, 50, 32, 65], [148, 109, 91, 43, 114, 50, 35, 76, 75], [71, 102, 80, 29, 43, 101, 69, 38, 58]]
                    }]
                }, {
                    'index' : 2,
                    'data' : [{
                        'isFake' : true,
                        'type' : 'Measure',
                        'name' : LANG_VIZ_COMMON_FAKE_MEASURE + '2',
                        'values' : [[32, 78, 91, 45, 110, 55, 39, 26, 50], [86, 108, 27, 50, 17, 28, 89, 116, 123], [83, 28, 58, 100, 86, 59, 66, 87, 63], [39, 100, 88, 18, 85, 96, 72, 37, 59]]
                    }]
                }, {
                    'index' : 3,
                    'data' : [{
                        'isFake' : true,
                        'type' : 'Measure',
                        'name' : LANG_VIZ_COMMON_FAKE_MEASURE + '3',
                        'values' : [[46, 58, 90, 5, 10, 4, 79, 86, 30], [56, 98, 20, 20, 7, 58, 39, 16, 23], [103, 98, 78, 40, 76, 29, 16, 59, 43], [59, 80, 98, 8, 45, 16, 120, 97, 39]]
                    }]
                }]
            };
            break;

            case ChartConst.TYPE_SCATTER_MATRIX:
                result = {
                    'analysisAxis' : [{
                        'index' : 1,
                        'data' : [{
                            'isFake' : true,
                            'type' : 'Dimension',
                            'name' : LANG_VIZ_COMMON_LEGEND,
                            'values' : [LANG_VIZ_COMMON_ITEM + '1', LANG_VIZ_COMMON_ITEM + '2', LANG_VIZ_COMMON_ITEM + '3', LANG_VIZ_COMMON_ITEM + '4']
                        }]
                    }],
                    'measureValuesGroup' : [{
                        'index' : 1,
                        'data' : [{
                            'isFake' : true,
                            'type' : 'Measure',
                            'name' : LANG_VIZ_COMMON_FAKE_MEASURE + '1',
                            'values' : [[43, 31, 43, 41]]
                        }, {
                            'isFake' : true,
                            'type' : 'Measure',
                            'name' : LANG_VIZ_COMMON_FAKE_MEASURE + '2',
                            'values' : [[252, 124, 370, 170]]
                        }]
                    }]
                };
                break;

            case ChartConst.TYPE_TREE:
            case ChartConst.TYPE_NETWORK:
                result = {
                    'analysisAxis' : [{
                        'index' : 1,
                        'data' : [{
                            'isFake' : true,
                            'type' : 'Dimension',
                            'name' : LANG_VIZ_COMMON_FAKE_DIMENSION,
                            'values' : ['abc1', 'abc2', 'abc3', 'abc4', 'abc1', 'abc2', 'abc3', 'abc4', 'abc1', 'abc2', 'abc3', 'abc4', 'abc1', 'abc2', 'abc3', 'abc4']
                        }, {
                            'isFake' : true,
                            'type' : 'Dimension',
                            'name' : LANG_VIZ_COMMON_LEGEND,
                            'values' : [LANG_VIZ_COMMON_ITEM + '1', LANG_VIZ_COMMON_ITEM + '1', LANG_VIZ_COMMON_ITEM + '1', LANG_VIZ_COMMON_ITEM + '1',
                             LANG_VIZ_COMMON_ITEM + '2', LANG_VIZ_COMMON_ITEM + '2', LANG_VIZ_COMMON_ITEM + '2', LANG_VIZ_COMMON_ITEM + '2', 
                             LANG_VIZ_COMMON_ITEM + '3', LANG_VIZ_COMMON_ITEM + '3', LANG_VIZ_COMMON_ITEM + '3', LANG_VIZ_COMMON_ITEM + '3',
                             LANG_VIZ_COMMON_ITEM + '4', LANG_VIZ_COMMON_ITEM + '4', LANG_VIZ_COMMON_ITEM + '4', LANG_VIZ_COMMON_ITEM + '4']
                        }]
                    }],
                    'measureValuesGroup' : []
                };
                break;

            case ChartConst.TYPE_PC:
                result = {
                    'analysisAxis' : [{
                        'index' : 1,
                        'data' : [{
                            'isFake' : true,
                            'type' : 'Dimension',
                            'name' : LANG_VIZ_COMMON_LEGEND,
                            'values' : [LANG_VIZ_COMMON_ITEM + '1', LANG_VIZ_COMMON_ITEM + '1', LANG_VIZ_COMMON_ITEM + '1', LANG_VIZ_COMMON_ITEM + '2', LANG_VIZ_COMMON_ITEM + '2', 
                            LANG_VIZ_COMMON_ITEM + '3', LANG_VIZ_COMMON_ITEM + '4', LANG_VIZ_COMMON_ITEM + '4', LANG_VIZ_COMMON_ITEM + '4', LANG_VIZ_COMMON_ITEM + '5',
                             LANG_VIZ_COMMON_ITEM + '6', LANG_VIZ_COMMON_ITEM + '7', LANG_VIZ_COMMON_ITEM + '8', LANG_VIZ_COMMON_ITEM + '9', LANG_VIZ_COMMON_ITEM + '9']
                        }]
                    }],

                    'measureValuesGroup' :[{
                        'index' : 1,
                        'data' : [{
                            'isFake' : true,
                            'type' : 'Measure',
                            'name' : LANG_VIZ_COMMON_FAKE_MEASURE + '1',
                            'values' : [[5.1, 4.9, 4.7, 4.6, 5, 7, 6.4, 6.9, 5.5, 6.5, 6.3, 5.8, 7.1, 6.3, 6.5]]
                        }, {
                            'isFake' : true,
                            'type' : 'Measure',
                            'name' : LANG_VIZ_COMMON_FAKE_MEASURE + '2',
                            'values' : [[3.1, 8.9, 2.7, 6.6, 5, 5, 6.6, 6.9, 7.5, 2.5, 2.3, 5.8, 8.1, 1.3, 2.5]]
                        }]
                    }]
                };
                break;

            case ChartConst.TYPE_TABLE:
            case ChartConst.TYPE_CROSSTAB:
                result = {
                    'isFake' : true,
                    'queryResponse' : [{
                        'dimAxes' : {
                            'rowsDim' : {
                                'count' : 0,
                                'values' : []
                            }
                        },
                        'metadata' : {
                            'dictionary' : {
                                'rowsDim' : [],
                                'measures' : []
                            }
                        },
                        'valueAxes' : [],
                        'ranges' : {
                            'cellsDim' : [{
                                'marksNum' : []
                            }]
                        },
                        'executionStatus' : {
                            'status' : 'ok'
                        }
                    },
                    //footer
                    {
                        'valueAxes' : [],
                        'executionStatus' : {
                            'status' : 'ok'
                        }
                    }]
                };
                break;

            case ChartConst.TYPE_STACKED_COLUMN:
            case ChartConst.TYPE_STACKED_BAR:
                result = {
                    'metadata' : IncompleteGhost.getMetadataCommon(),
                    'data' : [['abc1', LANG_VIZ_COMMON_ITEM + '1', 30],
                            ['abc2', LANG_VIZ_COMMON_ITEM + '1', 37],
                            ['abc3', LANG_VIZ_COMMON_ITEM + '1', 25],
                            ['abc4', LANG_VIZ_COMMON_ITEM + '1', 30],
                            ['abc5', LANG_VIZ_COMMON_ITEM + '1', 35],
                            ['abc6', LANG_VIZ_COMMON_ITEM + '1', 50],
                            ['abc7', LANG_VIZ_COMMON_ITEM + '1', 40],
                            ['abc8', LANG_VIZ_COMMON_ITEM + '1', 25],
                            ['abc9', LANG_VIZ_COMMON_ITEM + '1', 35],
                            ['abc10', LANG_VIZ_COMMON_ITEM + '1', 20],
                            
                            ['abc1', LANG_VIZ_COMMON_ITEM + '2', 30],
                            ['abc2', LANG_VIZ_COMMON_ITEM + '2', 37],
                            ['abc3', LANG_VIZ_COMMON_ITEM + '2', 25],
                            ['abc4', LANG_VIZ_COMMON_ITEM + '2', 30],
                            ['abc5', LANG_VIZ_COMMON_ITEM + '2', 35],
                            ['abc6', LANG_VIZ_COMMON_ITEM + '2', 50],
                            ['abc7', LANG_VIZ_COMMON_ITEM + '2', 40],
                            ['abc8', LANG_VIZ_COMMON_ITEM + '2', 25],
                            ['abc9', LANG_VIZ_COMMON_ITEM + '2', 35],
                            ['abc10', LANG_VIZ_COMMON_ITEM + '2', 20],
                            
                            ['abc1', LANG_VIZ_COMMON_ITEM + '3', 30],
                            ['abc2', LANG_VIZ_COMMON_ITEM + '3', 37],
                            ['abc3', LANG_VIZ_COMMON_ITEM + '3', 25],
                            ['abc4', LANG_VIZ_COMMON_ITEM + '3', 30],
                            ['abc5', LANG_VIZ_COMMON_ITEM + '3', 35],
                            ['abc6', LANG_VIZ_COMMON_ITEM + '3', 50],
                            ['abc7', LANG_VIZ_COMMON_ITEM + '3', 40],
                            ['abc8', LANG_VIZ_COMMON_ITEM + '3', 25],
                            ['abc9', LANG_VIZ_COMMON_ITEM + '3', 35],
                            ['abc10', LANG_VIZ_COMMON_ITEM + '3', 20]]
                };
                break;

            case ChartConst.TYPE_DUAL_BAR:
            case ChartConst.TYPE_DUAL_COLUMN:
                result = {
                    'metadata' : IncompleteGhost.getMetadataCommon(),
                    'data' : [['abc1', LANG_VIZ_COMMON_ITEM + '1', 30, 25, 30],
                            ['abc2', LANG_VIZ_COMMON_ITEM + '1', 37, 30, 35],
                            ['abc3', LANG_VIZ_COMMON_ITEM + '1', 25, 35, 30],
                            ['abc4', LANG_VIZ_COMMON_ITEM + '1', 30, 30, 37],
                            ['abc5', LANG_VIZ_COMMON_ITEM + '1', 35, 37, 25]]
                };
                break;

            case ChartConst.TYPE_PIE:
            case ChartConst.TYPE_DONUT:
                result = {
                    'metadata' : {
                        'fields' : [{
                            'isFake' : true,
                            'id' : 'Color',
                            'semanticType' : 'Dimension',
                            'name' : LANG_VIZ_COMMON_FAKE_DIMENSION
                        }, {
                            'isFake' : true,
                            'id' : 'Measure',
                            'semanticType' : 'Measure',
                            'name' : LANG_VIZ_COMMON_FAKE_MEASURE
                        }]
                    },
                     
                    'data' :[[LANG_VIZ_COMMON_ITEM + '1', 98], [LANG_VIZ_COMMON_ITEM + '1', 122]]
                };
                break;
        }
        return result;
    };   
        

    IncompleteGhost.getMetadataCommon = function(){
        var LANG_VIZ_COMMON_FAKE_DIMENSION = LangManager.get('VIZ_COMMON_FAKE_DIMENSION');
        var LANG_VIZ_COMMON_FAKE_MEASURE = LangManager.get('VIZ_COMMON_FAKE_MEASURE');
        var LANG_VIZ_COMMON_LEGEND = LangManager.get('VIZ_COMMON_LEGEND');
        var LANG_VIZ_COMMON_ITEM = LangManager.get('VIZ_COMMON_ITEM');
        return {
            'fields' : [{
                'isFake' : true,
                'id' : 'Axis',
                'semanticType' : 'Dimension',
                'name' : LANG_VIZ_COMMON_FAKE_DIMENSION
            }, {
                'isFake' : true,
                'id' : 'Color',
                'semanticType' : 'Dimension',
                'name' : LANG_VIZ_COMMON_LEGEND
            }, {
                'isFake' : true,
                'id' : 'Measure',
                'semanticType' : 'Measure',
                'name' : LANG_VIZ_COMMON_FAKE_MEASURE
            }, {
                'isFake' : true,
                'id' : 'Measure1',
                'semanticType' : 'Measure',
                'name' : LANG_VIZ_COMMON_FAKE_MEASURE + '1'
            }, {
                'isFake' : true,
                'id' : 'Measure2',
                'semanticType' : 'Measure',
                'name' : LANG_VIZ_COMMON_FAKE_MEASURE + '2'
            }]
        };
    }

    IncompleteGhost.getDataInfoCommon = function(){
        var LANG_VIZ_COMMON_ITEM = LangManager.get('VIZ_COMMON_ITEM');
        return {
            'metadata' : IncompleteGhost.getMetadataCommon(),
            'data' : [['abc1', LANG_VIZ_COMMON_ITEM + '1', 20, 25, 20],
                    ['abc2', LANG_VIZ_COMMON_ITEM + '1', 30, 30, 25],
                    ['abc3', LANG_VIZ_COMMON_ITEM + '1', 25, 35, 35],
                    ['abc4', LANG_VIZ_COMMON_ITEM + '1', 32, 55, 20],
                    ['abc5', LANG_VIZ_COMMON_ITEM + '1', 35, 40, 30],
                    ['abc6', LANG_VIZ_COMMON_ITEM + '1', 40, 25, 40],
                    ['abc7', LANG_VIZ_COMMON_ITEM + '1', 35, 35, 20],
                    ['abc8', LANG_VIZ_COMMON_ITEM + '1', 50, 20, 18],
                    ['abc9', LANG_VIZ_COMMON_ITEM + '1', 35, 30, 25],
                    ['abc10', LANG_VIZ_COMMON_ITEM + '1', 30, 37, 35]]
        };
    }
      
     
    IncompleteGhost.getFeedingByType = function(type) {
        var result;
        switch(type){
            case ChartConst.TYPE_COMBINATION:
                result = 
                    [{
                        feed : 'valueAxis',
                        source : ['Measure1','Measure2']
                    }, {
                        feed : 'categoryAxis',
                        source : ['Axis']
                    }, {
                        feed : 'color',
                        source : [{'measureNames' : ['valueAxis']},'Color']
                    }];
                break;

            case ChartConst.TYPE_PIE:
            case ChartConst.TYPE_DONUT:
                result = 
                    [{
                        feed : 'size',
                        source : ['Measure']
                    }, {
                        feed : 'color',
                        source : ['Color']
                    }];
                break;

            case ChartConst.TYPE_DUAL_BAR:
            case ChartConst.TYPE_DUAL_COLUMN:
            case ChartConst.TYPE_DUAL_LINE:
                result =
                     [{
                        feed : 'categoryAxis',
                        source : ['Axis']
                    }, {
                        feed : 'color',
                        source : [{'measureNames' : ['valueAxis', 'valueAxis2']},'Color']
                    }, {
                        feed : 'valueAxis',
                        source : ['Measure1']
                    }, {
                        feed : 'valueAxis2',
                        source : ['Measure2']
                    }];
                break;

            case ChartConst.TYPE_SCATTER:
                result = 
                    [{
                        feed : 'color',
                        source : ['Color']
                    }, {
                        feed : 'valueAxis',
                        source : ['Measure1']
                    }, {
                        feed : 'valueAxis2',
                        source : ['Measure2']
                    }];
                break;

            case ChartConst.TYPE_BUBBLE:
                result =
                    [{
                        feed : 'color',
                        source : ['Color']
                    }, {
                        feed : 'valueAxis',
                        source : ['Measure1']
                    }, {
                        feed : 'valueAxis2',
                        source : ['Measure2']
                    }, {
                        feed : 'bubbleWidth',
                        source : ['Measure1']
                    }];
                break;

            case ChartConst.TYPE_TREEMAP:
                result = 
                    [{
                        feed : 'title',
                        source : ['Axis', 'Color']
                    }, {
                        feed : 'weight',
                        source : ['Measure1']
                    }, {
                        feed : 'color',
                        source : ['Measure2']
                    }];
                break;

            default:
                result = [{
                    feed : 'valueAxis',
                    source : ['Measure']
                }, {
                    feed : 'categoryAxis',
                    source : ['Axis']
                }, {
                    feed : 'color',
                    source : ['Color']
                }];
        }  
        return result;   
    }
    return IncompleteGhost;
});

// @formatter:off
define('sap/viz/controls/common/services/feedvalidators/DuplicateValidator',[
    'sap/viz/controls/common/feeds/FeedUtils'], 
function(FeedUtils) {
// @formatter:on
    var DuplicateValidator = {};
    DuplicateValidator.validate = function(defs, feedItems) {
        var validate = true;
        var trellisValues = [], trellisDef;
        defs.forEach(function(def) {
            var values = FeedUtils.getFeedValues(feedItems, def.id()) || [];
            validate = validate && _validateOne(def, values);
        });

        return validate;
    };
    /**
     * Validate whether number of analysis objects exceed the max
     *
     * @param {Object} def
     * @param {Object} analysisObjects
     */
    var _validateOne = function(def, analysisObjects) {
        var validate = true, map = {};
        analysisObjects.forEach(function(analysisObject) {
            var id = analysisObject.id();
            if (map[id]) {
                validate = false;
            }
            map[id] = true;
        });
        return validate;
    };
    return DuplicateValidator;
});

// @formatter:off
define('sap/viz/controls/common/services/feedvalidators/TypeValidator',[
    'sap/viz/controls/common/constants/FeedConst',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/feeds/FeedItemType'
], function(FeedConst, FeedUtils, AnalyticalType, FeedItemType) {
// @formatter:on
    var TypeValidator = {};
    TypeValidator.validate = function(defs, feedItems) {
        var validate = true;
        defs.forEach(function(def) {
            var values = FeedUtils.getFeedValues(feedItems, def.id()) || [];
            validate = validate && _validateOne(def, values);
        });
        return validate;
    };

    
    var _validateOne = function(def, analysisObjects) {
        var validate = true;
        analysisObjects.forEach(function(analysisObject) {
            validate = validate && AnalyticalType.compatible(def.type(), analysisObject.type());
            // Check for the geo chart, the analysisObject's dataType of geo chart must be "geography"
            if (def.id() === FeedConst.ID_GEO) {
                validate = validate && (analysisObject.dataType() === FeedItemType.GEOGRAPHY.toLowerCase());
            }
        });
        return validate;
    };


    return TypeValidator;
});

// @formatter:off
define('sap/viz/controls/common/services/feedvalidators/AAValidator',[
    'sap/viz/controls/common/constants/FeedConst',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/feeds/FeedItemType'
], function(FeedConst, FeedUtils, FeedItemType) {
// @formatter:on
    var AAValidator = {};

    AAValidator.validate = function(defs, feedItems) {
        var numPreFilledAA = 0;
        defs.forEach(function(def) {
            if (def.type() === 'dimension') {
                var values = FeedUtils.getFeedValues(feedItems, def.id()) || [];
                if (values.length === 0 && def.min() > 0) {
                    if (def.mndMode() === 'none' || FeedUtils.hasMND(feedItems)) {
                        numPreFilledAA++;
                    }
                }
            }
        });
        return (_countAAOfFeeds(feedItems) + numPreFilledAA) <= 2;
    };

    var _countAAOfFeeds = function(feedItems) {
        var numDimension = 0;
        var numMultiplier = 0;
        for (var i = 0; i < feedItems.length; i++) {
            var feedItem = feedItems[i];
            if (feedItem.type() === FeedItemType.DIMENSION && _countAAOfFeedItem(feedItem)) {
                if (feedItem.id() === FeedConst.ID_TRELLIS_ROW || feedItem.id() === FeedConst.ID_TRELLIS_COLUMN) {
                    numMultiplier = Math.min(1, numMultiplier + 1);
                } else {
                    numDimension++;
                }
            }
        }
        //CVOM CrossTab DataSet limitation: Max Dimension set count is 2.
        return (numMultiplier + numDimension);
    };
    var _countAAOfFeedItem = function(feedItem) {
        if (!feedItem || !feedItem.hasValues()) {
            return 0;
        }
        var values = feedItem.values();
        return _countAAOfValues(values);
    };

    var _countAAOfValues = function(values) {
        if (!values || !values.length) {
            return 0;
        }
        var hasMND = FeedUtils.hasMNDInValues(values);
        if (hasMND && values.length === 1) {
            return 0;
        }
        return 1;
    };
    return AAValidator;
});

// @formatter:off
define('sap/viz/controls/common/services/feedvalidators/MaxValidator',[
    'sap/viz/controls/common/feeds/FeedUtils'], 
function(FeedUtils) {
// @formatter:on
    var MaxValidator = {};
    MaxValidator.validate = function(defs, feedItems) {
        var validate = true;
        var numRemainingAnalyses = FeedUtils.countAnalyses(feedItems);
        defs.forEach(function(def) {
            var values = FeedUtils.getFeedValues(feedItems, def.id()) || [];
            validate = validate && _validateOne(def, values);
            numRemainingAnalyses -= values.length;
        });
	validate = validate && numRemainingAnalyses === 0;
        return validate;
    };
    var _validateOne = function(def, analysisObjects) {
        var length = analysisObjects.length;
        if (FeedUtils.hasMNDInValues(analysisObjects)) {
            length = length - 1;
        }
        return length <= def.max();
    };
    return MaxValidator;
});

// @formatter:off
define('sap/viz/controls/common/services/feedvalidators/MinValidator',[
    'sap/viz/controls/common/feeds/FeedUtils'], 
function(FeedUtils) {
// @formatter:on
    var MinValidator = {};
    MinValidator.validate = function(defs, feedItems) {
        var validate = true;
        defs.forEach(function(def) {
            validate = validate && _validateOne(def, FeedUtils.getFeedValues(feedItems, def.id()) || []);
        });
        return validate;
    };
    var _validateOne = function(def, analysisObjects) {
        var length = analysisObjects.length;
        return length >= def.min();
    };
    return MinValidator;
});

// @formatter:off
define('sap/viz/controls/common/services/feedvalidators/MNDValidator',[
    'sap/viz/controls/common/constants/FeedConst',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/feeds/FeedUtils'
], function(FeedConst, AnalyticalType, FeedUtils) {
// @formatter:on
    var MNDValidator = {};
    MNDValidator.validate = function(defs, feedItems, mergeTrellis) {
        var validate = true;

        // Enable MND when measure fed
        var numMeasures = 0;
        defs.forEach(function(def) {
            if (def.mndEnumerable()) {
                var values = FeedUtils.getFeedValues(feedItems, def.id()) || [];
                numMeasures += values.length;
            }
        });
        if (FeedUtils.countAnalyses(feedItems, AnalyticalType.MND) > (numMeasures > 0 ? 1 : 0)) {
            return false;
        }
        // Validate
        var trellisValues = [], trellisDef;
        defs.forEach(function(def) {
            if (def.type() === 'dimension') {
                var values = FeedUtils.getFeedValues(feedItems, def.id()) || [];
                if (mergeTrellis && (def.id() === FeedConst.ID_TRELLIS_ROW || def.id() === FeedConst.ID_TRELLIS_COLUMN)) {
                    trellisValues = trellisValues.concat(values);
                    trellisDef = def;
                } else {
                    validate = validate && _validateOne(def, values);
                }
            }
        });

        if (mergeTrellis && trellisDef) {
            validate = validate && _validateOne(trellisDef, trellisValues);
        }
        return validate;
    };
    /**
     * Validate whether number of analysis objects exceed the max
     *
     * @param {Object} def
     * @param {Object} analysisObjects
     */
    var _validateOne = function(def, analysisObjects) {
        if (FeedUtils.hasMNDInValues(analysisObjects)) {
            if (def.mndMode() === 'none') {
                return false;
            } else if (def.mndMode() === 'supportExclusively') {
                return analysisObjects.length === 1;
            }
        }
        return true;
    };
    return MNDValidator;
});

// @formatter:off
define('sap/viz/controls/common/services/FeedValidationService',[
    'sap/viz/controls/common/constants/FeedConst',
    'sap/viz/controls/common/constants/DatasetTypeConst',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/feeds/AnalysisObject',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/metadata/MetadataFactory',
    'sap/viz/controls/common/services/feedvalidators/DuplicateValidator',
    'sap/viz/controls/common/services/feedvalidators/TypeValidator',
    'sap/viz/controls/common/services/feedvalidators/AAValidator',
    'sap/viz/controls/common/services/feedvalidators/MaxValidator',
    'sap/viz/controls/common/services/feedvalidators/MinValidator',
    'sap/viz/controls/common/services/feedvalidators/MNDValidator'
], function(FeedConst, DatasetTypeConst, utils, ChartTypeUtil, FeedUtils, AnalysisObject, FeedItemType, AnalyticalType, MetadataFactory, 
    DuplicateValidator, TypeValidator, AAValidator, MaxValidator, MinValidator, MNDValidator) {
// @formatter:on

    /**
     *
     */
    var FeedValidationService = {};

    FeedValidationService.validateDimensionMin = function(visualizationType, feedItems) {
        var defs = MetadataFactory.get(visualizationType).getBindingDefs();
        var dimensionDefs = [];
        defs.forEach(function(def) {
            if (def.type() === 'dimension') {
                dimensionDefs.push(def);
            }
        });
        defs = dimensionDefs;

        var validate = true;
        validate = validate && MinValidator.validate(defs, feedItems);
        return validate;
    };

    FeedValidationService.validateOverflow = function(visualizationType, feedItems) {
        var metadata = MetadataFactory.get(visualizationType);
        var defs = metadata.getBindingDefs();
        var validate = true;
        validate = validate && DuplicateValidator.validate(defs, feedItems);
        validate = validate && TypeValidator.validate(defs, feedItems);
        if (metadata.support().dataset[DatasetTypeConst.CROSS_TABLE] && !metadata.support().dataset[DatasetTypeConst.FLAT_TABLE]) {
            validate = validate && AAValidator.validate(defs, feedItems);
        }
        validate = validate && MaxValidator.validate(defs, feedItems);
        validate = validate && MNDValidator.validate(defs, feedItems, !ChartTypeUtil.isInfoChart(visualizationType));
        return validate;
    };

    FeedValidationService.validateDuplicate = function(visualizationType, feedItems) {
        var defs = MetadataFactory.get(visualizationType).getBindingDefs();
        var validate = true;
        validate = validate && DuplicateValidator.validate(defs, feedItems);
        return validate;
    };

    FeedValidationService.validateMND = function(visualizationType, feedItems) {
        var defs = MetadataFactory.get(visualizationType).getBindingDefs();
        var validate = true;
        validate = validate && MNDValidator.validate(defs, feedItems, !ChartTypeUtil.isInfoChart(visualizationType));
        return validate;
    };
    /**
     *
     * @param {Object} visualizationType
     * @param {Object} feedItems
     * @param {String} addTo Feed id will be added
     * @param {Object} adding Analysis object will be added
     */
    FeedValidationService.addable = function(visualizationType, feedItems, addTo, adding) {
        if (!adding) {
            var type, dataType;
            if (addTo === FeedConst.ID_TRELLIS_ROW || addTo === FeedConst.ID_TRELLIS_COLUMN) {
                type = 'dimension';
            } else {
                var feed = FeedUtils.getFeed(feedItems, addTo);
                type = feed.type() === FeedItemType.MEASURE ? 'measure' : 'dimension';
            }

            // if added to geoFeature the datatype of the analysisObject needs to geography
            dataType = addTo === FeedConst.ID_GEO ? "geography" : undefined;
            var id = '__sapVizControlsReserved_' + type + '_' + _unique++;
            adding = new AnalysisObject(id, id, type, dataType);
        }

        // Validate overflow
        var feeds = FeedUtils.spliceAnalysisObjects(FeedUtils.cloneFeeds(feedItems), addTo, 0, 0, adding);
        visualizationType = FeedUtils.hasRowOrColumn(feeds) ? ChartTypeUtil.toMultiChartType(visualizationType) : ChartTypeUtil.toSingleChartType(visualizationType);
        return FeedValidationService.validateOverflow(visualizationType, feeds);
    };

    FeedValidationService.replaceable = function(visualizationType, feedItems, replaceTo, replacing) {
        var feeds;
        // Validate duplicate
        feeds = FeedUtils.spliceAnalysisObjects(FeedUtils.cloneFeeds(feedItems), replaceTo, 0, 0, replacing);
        visualizationType = FeedUtils.hasRowOrColumn(feeds) ? ChartTypeUtil.toMultiChartType(visualizationType) : ChartTypeUtil.toSingleChartType(visualizationType);
        if (!FeedValidationService.validateDuplicate(visualizationType, feeds)) {
            return false;
        }
        // Validate overflow
        feeds = FeedUtils.cloneFeeds(feedItems);
        var indexReplaceable = FeedUtils.indexOfAnalysisObjectsByType(feedItems, replaceTo, AnalyticalType.compatible('dimension', replacing.type()) ? 'dimension' : 'measure');
        if (indexReplaceable !== -1) {
            // Replace the replaceable analysis object
            feeds = FeedUtils.spliceAnalysisObjects(feeds, replaceTo, indexReplaceable, 1, replacing);
        } else {
            // Add analysis object
            feeds = FeedUtils.spliceAnalysisObjects(feeds, replaceTo, 0, 0, replacing);
        }

        visualizationType = FeedUtils.hasRowOrColumn(feeds) ? ChartTypeUtil.toMultiChartType(visualizationType) : ChartTypeUtil.toSingleChartType(visualizationType);
        return FeedValidationService.validateOverflow(visualizationType, feeds);
    };

    var _unique = 0;

    return FeedValidationService;
});

// @formatter:off
define('sap/viz/controls/common/services/feeders/MNDFeeder',[
    'sap/viz/controls/common/metadata/MetadataFactory',
    'sap/viz/controls/common/feeds/FeedUtils'], 
function(MetadataFactory, FeedUtils) {
// @formatter:on
    var MNDFeeder = {};
    MNDFeeder.feed = function(visualizationType, feeds, analysisObjects) {
        var i, def;
        var index = FeedUtils.indexOfMNDInValues(analysisObjects);
        if (index === -1 || FeedUtils.hasMND(feeds)) {
            return;
        }
        var mnd = analysisObjects.splice(index, 1)[0],values;
        // Get binding defs
        var defs = MetadataFactory.get(visualizationType).getBindingDefs();
        defs = defs.slice(0).sort(function(def1, def2) {
            return def1.bvrMNDPriority() - def2.bvrMNDPriority();
        });
        // Feed when min validate failed
        for ( i = 0; i < defs.length; i++) {
            def = defs[i];
            values = FeedUtils.getFeedValues(feeds, def.id());
            if (def.mndMode() !== 'none' && def.min() > values.length) {
                if (def.mndMode() === 'support' || (def.mndMode() === 'supportExclusively' && values.length === 0)) {
                    values.push(mnd);
                    return;
                }
            }
        }
        // Feed when empty
        for ( i = 0; i < defs.length; i++) {
            def = defs[i];
            values = FeedUtils.getFeedValues(feeds, def.id());
            if (def.mndMode() !== 'none' && values.length === 0) {
                values.push(mnd);
                return;
            }
        }
        // Feed to else
        for ( i = 0; i < defs.length; i++) {
            def = defs[i];
            values = FeedUtils.getFeedValues(feeds, def.id());
            if (def.mndMode() === 'support' || (def.mndMode() === 'supportExclusively' && values.length === 0)) {
                values.push(mnd);
                return;
            }
        }
    };
    return MNDFeeder;
});

// @formatter:off
define('sap/viz/controls/common/services/feeders/GeoFeeder',[
    'sap/viz/controls/common/constants/FeedConst',
    'sap/viz/controls/common/metadata/MetadataFactory',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/bindingdef/BindingDefUtils',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/utils/ChartTypeUtil'], 
function(FeedConst, MetadataFactory, FeedUtils, FeedItemType, BindingDefUtils, ChartConst, ChartTypeUtil) {
// @formatter:on
    
    var GeoFeeder = {};
    GeoFeeder.feed = function(visualizationType, feeds, analysisObjects) {
        var singleChartType = ChartTypeUtil.toSingleChartType(visualizationType);
        if (singleChartType !== ChartConst.TYPE_GEO_BUBBLE && singleChartType !== ChartConst.TYPE_GEO_CHOROPLETH && singleChartType !== ChartConst.TYPE_GEO_PIE) {
            return;
        }
        var feed, i;
        for ( i = 0; i < feeds.length; i++) {
            if (feeds[i].id() === FeedConst.ID_GEO) {
                feed = feeds[i];
            }
        }
        if (!feed) {
            return;
        }
        var bindingDef = BindingDefUtils.get(visualizationType, feed.id());
        // Not find the geoFeature or this feed already has value
        if (feed.values().length >= bindingDef.max) {
            return;
        }

        for ( i = 0; i < analysisObjects.length; i++) {
            if (analysisObjects[i].dataType() === FeedItemType.GEOGRAPHY.toLowerCase()) {
                feed.values([analysisObjects[i]]);
                analysisObjects.splice(i, 1);
                break;
            }
        }
    };
    return GeoFeeder;

});

// @formatter:off
define('sap/viz/controls/common/services/feeders/CommonFeeder',[
    'sap/viz/controls/common/metadata/MetadataFactory',
    'sap/viz/controls/common/services/FeedValidationService', 
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/constants/FeedConst'
], 
 function(MetadataFactory, FeedValidationService, FeedUtils, AnalyticalType, FeedConst) {
// @formatter:on
    var CommonFeeder = {};
    CommonFeeder.feed = function(visualizationType, feeds, analysisObjects, inScopeFeeds) {
        inScopeFeeds = inScopeFeeds || feeds;
        var copyAnalysisObjects = analysisObjects.slice(0), feed, feedOneSuccess;
        // Get binding defs
        var defs = MetadataFactory.get(visualizationType).getBindingDefs();

        var i, def;

        // Feed when min validate failed
        for ( i = 0; i < defs.length && analysisObjects.length > 0; i++) {
            def = defs[i], feed = FeedUtils.getFeed(inScopeFeeds, def.id()), feedOneSuccess = true;
            while (feedOneSuccess && feed && def.min() > feed.values().length) {
                feedOneSuccess = _feedOne(visualizationType, feeds, feed, analysisObjects);
            }
        }
        // Feed when empty
        for ( i = 0; i < defs.length && analysisObjects.length > 0; i++) {
            def = defs[i], feed = FeedUtils.getFeed(inScopeFeeds, def.id()), feedOneSuccess = true;
            if (feed && feed.values().length === 0) {
                _feedOne(visualizationType, feeds, feed, analysisObjects);
            }

        }
        // Feed to else
        for ( i = 0; i < defs.length && analysisObjects.length > 0; i++) {
            def = defs[i], feed = FeedUtils.getFeed(inScopeFeeds, def.id()), feedOneSuccess = true;
            while (feedOneSuccess && feed && def.max() > feed.values().length) {
                feedOneSuccess = _feedOne(visualizationType, feeds, feed, analysisObjects);
            }
        }

        //Adjust orders
        _reorder(visualizationType, inScopeFeeds, copyAnalysisObjects);
    };

    /**
     * Reorder added AnalysisObjects for feedItems
     *
     * @param visualizationType
     * @param {Array<FeedItem>} feeds
     *          An array of feedItems whose analysisObjects will be reordered
     * @param {Array<AnalysisObject>} allAnalysisObjects
     *          An array of all analysisObjects in the pool
     * 
     * @private
     */
    var _reorder = function(visualizationType, feeds, allAnalysisObjects) {
        //addAos record all new analysisObjects added to feeds
        //aoCountDict record the count of analysisObjects of every feeditem before adding
        var addAos = [], aoCountDict = {};
        
        //loop through all analysisObjects of feeds
        feeds.forEach(function(feed){
            var fFirst = true;
            //Initial for aoCountDict of feed.id()
            aoCountDict[feed.id()] = feed.values().length;
            feed.values().forEach(function(ao, aoIndex){
                if (allAnalysisObjects.indexOf(ao) !== -1){
                    addAos.push(ao);
                    if (fFirst){
                        fFirst = false;
                        aoCountDict[feed.id()] = aoIndex;
                    }
                }
            });
        });
        
        //reorder addAos base on the sequence of allAnalysisObjects
        var tempAos = [];
        allAnalysisObjects.forEach(function(ao){
            if (addAos.indexOf(ao) !== -1){
                tempAos.push(ao);
            }
        });
        addAos = tempAos;
        
        var i, currentAo, currentFeed;
        //Reorder analysisObjects with the same ID
        for (i = 0; i < addAos.length; i++){
            currentAo = addAos[i];
            currentFeed = _findFeed(feeds, currentAo);
            _loopThroughAddedAos(visualizationType, feeds, aoCountDict, function(feed, aoToBeSwitch){
                if (aoToBeSwitch === currentAo){
                    return true;
                }
                if (aoToBeSwitch.id() == currentAo.id() && aoToBeSwitch !== currentAo && addAos.indexOf(aoToBeSwitch) > i ){
                    //switch
                    _switchAo(currentFeed, currentAo, feed, aoToBeSwitch);
                    return true;
                }
            });
        }
        //Reorder
        for (i = 0; i < addAos.length; i++){
            currentAo = addAos[i];
            currentFeed = _findFeed(feeds, currentAo);
            _loopThroughAddedAos(visualizationType, feeds, aoCountDict, function(feed, aoToBeSwitch){
                if (aoToBeSwitch === currentAo){
                        return true;
                }
                if (_validateTypeAndDuplicate(feed, currentAo)){
                    if (_validateTypeAndDuplicate(currentFeed, aoToBeSwitch) && addAos.indexOf(aoToBeSwitch) > i){
                        _switchAo(currentFeed, currentAo, feed, aoToBeSwitch);
                        return true;
                    }
                }
            });
        }
    };
    
    /**
     * Loop Through All Added AnalysisObjects of FeedItems base of bvrPriority
     * @param visualizationType
     * @param {Array<FeedItems>} feeds
     * @param {Object} aoCountDict
     *          A dict indicate the previous count of analysisObjects of feedItem
     *          e.g. {'primaryValue':2, 'axisLabel': 1}
     * @param {function(FeedItem, AnalysisObject)} func
     *          CallBack Function, return YES if stop loop
     * @private 
     */
    var _loopThroughAddedAos = function(visualizationType, feeds, aoCountDict, func){
        // Get binding defs
        var j, k, defs = MetadataFactory.get(visualizationType).getBindingDefs();
        
        //Loop
        for (j = 0; j < defs.length; j++){
            var def = defs[j], feed = FeedUtils.getFeed(feeds, def.id());
            if (feed == null) { continue; }
            var fIsToBreak = false;
            for (k = aoCountDict[feed.id()]; k < feed.values().length; k++){
                var aoToBeSwitch = feed.values()[k];
                var fRet = func(feed, aoToBeSwitch);
                if (fRet){
                    return;
                }
            }
        }
    };
    
    /**
     * Switch analysisObjects of two feedItems
     * @param {FeedItem} feed1
     * @param {AnalysisObject} ao1
     * @param {FeedItem} feed2
     * @param {AnalysisObject} ao2
     * @private 
     */
    var _switchAo = function(feed1, ao1, feed2, ao2){
        var iIndex1 = feed1.values().indexOf(ao1);
        var iIndex2 = feed2.values().indexOf(ao2);
        if (iIndex1 != -1 && iIndex2 != -1){
            var tempAo = feed1.values()[iIndex1];
            feed1.values()[iIndex1] = feed2.values()[iIndex2];
            feed2.values()[iIndex2] = tempAo;
        }
    };
    
    var _validateTypeAndDuplicate = function(feed, analysisObject) {
        if (!AnalyticalType.compatible(feed.type().toLowerCase(), analysisObject.type())) {
            return false;
        }
        var feedAos = feed.values();
        for (var i = 0; i < feedAos.length; i++) {
            var tempAo = feedAos[i];
            if (tempAo.id() == analysisObject.id()) {
                return false;
            }
        }
        return true;
    };

    var _findFeed = function(feeds, analysisObject) {
        var tempFeedIndex;
        for (tempFeedIndex in feeds) {
            if (feeds[tempFeedIndex].values().indexOf(analysisObject) != -1) {
                return feeds[tempFeedIndex];
            }
        }
        return null;
    };

    var _feedOne = function(visualizationType, feeds, feed, analysisObjects) {
        for (var i = 0; i < analysisObjects.length; i++) {
            var analysisObject = analysisObjects[i];
            if (FeedValidationService.addable(visualizationType, feeds, feed.id(), analysisObject) && feed.id() !== FeedConst.ID_PLAYFIELD) {
                feed.values().push(analysisObject);
                analysisObjects.splice(i, 1);
                return true;
            }
        }
        return false;
    };
    return CommonFeeder;
});

// @formatter:off
define('sap/viz/controls/common/services/BVRService',[
    'sap/viz/controls/common/feeds/AnalysisObject',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/bindingdef/BindingDefUtils',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/services/FeedValidationService',
    'sap/viz/controls/common/services/feeders/MNDFeeder',
    'sap/viz/controls/common/services/feeders/GeoFeeder',
    'sap/viz/controls/common/services/feeders/CommonFeeder',
    'sap/viz/controls/common/metadata/MetadataFactory',
    'sap/viz/controls/common/constants/FeedConst'
],
function(AnalysisObject, AnalyticalType, FeedItemType, FeedUtils,  BindingDefUtils, ChartTypeUtil, 
     FeedValidationService, MNDFeeder, GeoFeeder, CommonFeeder, MetadataFactory, FeedConst) {
// @formatter:on

    var BVRService = {};
    /**
     * @return {String} read-only version string
     */
    BVRService.VERSION = '1.0';

    /**
     * Suggest new feeds by existing feeds after viz type is changed
     *
     * @param {String} visualizationType
     * @param {String} currentType
     *          null or blank if no current viz type
     * @param {[sap.viz.controls.common.feeds.FeedItem]} currentFeeds
     *          proposed feeding items
     *
     * @return {[sap.viz.controls.common.feeds.FeedItem]}
     *          the processed feeding items by different viz types
     *
     */
    BVRService.switchFeeds = function(visualizationType, currentType, currentFeeds) {
        var feeds, empty = FeedUtils.buildEmptyFeeds(visualizationType);
        if (!visualizationType || BindingDefUtils.equal(visualizationType, currentType)) {
            feeds = FeedUtils.merge(empty, currentFeeds);
        } else if (FeedUtils.isEmptyFeeds(currentFeeds)) {
            feeds = empty;
        } else {
            // Sort feeds by bvr priority
            if (currentType === 'viz/ext/table') {
                currentFeeds = FeedUtils.removeSubtotal(currentFeeds);
            }
            currentFeeds = currentFeeds.slice(0).sort(function(feed1, feed2) {
                var def1 = BindingDefUtils.get(visualizationType, feed1.id());
                var def2 = BindingDefUtils.get(visualizationType, feed2.id());
                var priority1 = def1 ? def1.bvrPriority() : Number.POSITIVE_INFINITY;
                var priority2 = def2 ? def2.bvrPriority() : Number.POSITIVE_INFINITY;
                return priority1 - priority2;
            });
            feeds = empty;
            var remainings = [];
            // Map analysis object to new feeds by feed id, and move others to remainings
            _mapTo(currentFeeds, visualizationType, feeds, remainings);
            // Auto feeding remainings to new feeds
            _autoFeeding(visualizationType, feeds, remainings);
            if (ChartTypeUtil.toSingleChartType(visualizationType) !== ChartTypeUtil.toSingleChartType(currentType)) {
                // Move analysis objects in some feed to other feed which is not meet min
                _balance(visualizationType, feeds);
            }
        }
        return {
            'vizType' : visualizationType,
            'feeds' : feeds
        };
    };

    /**
     * Suggest new feeds by viz type and existing analysis objects
     *
     * @param {String} newType
     *          null or blank if no current viz type
     * @param {[sap.viz.controls.common.feeds.AnalysisObject]} analysisObjects
     *          proposed AnalysisObjects to feed
     *
     * @return {
     *             vizType: String,
     *             feeds: [sap.viz.controls.common.feeds.FeedItem]
     *         }
     *
     */

    /**
     * Suggest new feeds when new analysis objects are added to existing viz and feeds
     *
     * @param {String} currentType
     *
     * @param {[sap.viz.controls.common.feeds.FeedItem]} currentFeeds
     *          current existing feeds
     *
     * @param {[sap.viz.controls.common.feeds.AnalysisObject]} analysisObjects
     *          proposed AnalysisObjects to feed
     *
     * @param {Array<String>} scope
     *          proposed feed ids, analysisObjects can only be feeded in this scope
     *
     * @return {
     *             vizType: String,
     *             feeds: [sap.viz.controls.common.feeds.FeedItem]
     *         }
     *
     */
    BVRService.suggestFeeds = function(visualizationType, feeds, analysisObjects, scope) {
        if (arguments.length === 2) {
            analysisObjects = feeds;
            feeds = [];
        }
        feeds = FeedUtils.merge(FeedUtils.buildEmptyFeeds(visualizationType), feeds);
        feeds = FeedUtils.cloneFeeds(feeds);
        // Remove feeds out of scope
        var inScope;
        if (scope && scope.length) {
            inScope = [];
            feeds.forEach(function(feed) {
                if (scope.indexOf(feed.id()) !== -1) {
                    inScope.push(feed);
                }
            });
        } else {
            inScope = feeds;
        }

        // Auto feeding
        _autoFeeding(visualizationType, feeds, analysisObjects.slice(0), inScope);

        return {
            'vizType' : visualizationType,
            'feeds' : feeds
        };
    };

    BVRService.suggestMND = function(visualizationType, feeds) {
        return BVRService.suggestFeeds(visualizationType, feeds, [AnalysisObject.genMND()]).feeds;
    };

    /**
     * Suggest viz type by analysis objects
     *
     *
     * @param {[sap.viz.controls.common.feeds.AnalysisObject]} analysisObjects
     *          proposed AnalysisObjects to feed
     *
     * @return {
     *             vizType: String,
     *             feeds: [sap.viz.controls.common.feeds.FeedItem]
     *         }
     *
     */
    BVRService.suggestChartWithFeeds = function(analysisObjects) {
    };

    var _mapTo = function(currentFeeds, visualizationType, feeds, remainings) {
        // Map measure first, since validateMax depends on measure feeds
        currentFeeds.forEach(function(currentFeed) {
            if (currentFeed.type() === FeedItemType.MEASURE) {
                _mapOne(currentFeed, visualizationType, feeds, remainings);
            }
        });
        currentFeeds.forEach(function(currentFeed) {
            if (currentFeed.type() !== FeedItemType.MEASURE) {
                _mapOne(currentFeed, visualizationType, feeds, remainings);
            }
        });
    };
    var _mapAlias = (function() {
        var alias = {};
        var genAlias = function(array) {
            array.forEach(function(element) {
                alias[element] = array;
            });
        };
        genAlias(['rectangleTitle', 'mainLabelAxis']);
        genAlias(['regionColor', 'pieSectorColor', 'color']);
        genAlias(['axisLabels', 'categoryAxis']);
        genAlias(['primaryValues', 'valueAxis']);
        return alias;
    })();

    var _mapOne = function(currentFeed, visualizationType, feeds, remainings) {
        
        var feed, aliases = _mapAlias[currentFeed.id()] || [currentFeed.id()];
        aliases.forEach(function(alias) {
            if (!feed) {
                feed = FeedUtils.getFeed(feeds, alias);
            }
        });
        currentFeed.values().forEach(function(analysisObject) {
            if (feed) {
                feed.values().push(analysisObject);
                if (!FeedValidationService.validateOverflow(visualizationType, feeds)) {
                    feed.values().pop();
                    remainings.push(analysisObject);
                }
            } else {
                if (currentFeed.id() !== FeedConst.ID_PLAYFIELD) {
                    remainings.push(analysisObject);
                }
            }
        });
    };

    var _autoFeeding = function(visualizationType, feeds, remainings, inScopeFeeds) {
        inScopeFeeds = inScopeFeeds || feeds;
        MNDFeeder.feed(visualizationType, inScopeFeeds, remainings);
        GeoFeeder.feed(visualizationType, inScopeFeeds, remainings);
        CommonFeeder.feed(visualizationType, feeds, remainings, inScopeFeeds);
    };

    var _balance = function(visualizationType, feeds) {
        // Get binding defs
        var defs = MetadataFactory.get(visualizationType).getBindingDefs();

        for (var i = 0; i < defs.length; i++) {
            var def = defs[i], feed = FeedUtils.getFeed(feeds, def.id());

            for (var j = 0; feed.values().length < def.min() && j < defs.length; j++) {
                var otherDef = defs[j];

                var otherFeed = FeedUtils.getFeed(feeds, otherDef.id());
                if (feed.type() != otherFeed.type()) {
                    continue;
                }

                var k = otherFeed.values().length - 1;
                //Other Def should at least have one analysisObj
                var otherDefMin = otherDef.min() > 1 ? otherDef.min() : 1;

                while (k >= 0 && feed.values().length < def.min() && otherFeed.values().length > otherDefMin) {
                    var otherAo = otherFeed.values().splice(k,1)[0];
                    //Ignore MND
                    if (otherAo.type() != AnalyticalType.MND && FeedValidationService.addable(visualizationType, feeds, feed.id(), otherAo)) {
                        feed.values().push(otherAo);
                    } else {
                        otherFeed.values().splice(k, 0, otherAo);
                    }
                    k--;
                }
            }
        }

    };

    return BVRService;
});

define('sap/viz/controls/common/utils/binding/generators/BindingGeneratorBase',[
// @formatter:off
    'sap/viz/controls/common/metadata/MetadataFactory'
], function(MetadataFactory){
// @formatter:on
    /**
     * BindingGeneratorBase Class
     */
    var BindingGeneratorBase = function(settings) {
        this._visualizationType = settings.visualizationType;
        this._bindingDefs = MetadataFactory.get(settings.visualizationType).getBindingDefs();
    };

    BindingGeneratorBase.prototype.generate = function(feedItems) {

    };

    return BindingGeneratorBase;
});

define('sap/viz/controls/common/utils/binding/generators/VizFeedingGenerator',[
// @formatter:off
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/VizFeedingUtil',
    'sap/viz/controls/common/utils/binding/generators/BindingGeneratorBase'
], function(OOUtil, VizFeedingUtil, BindingGeneratorBase){
// @formatter:on
    /**
     * VizFeedingGenerator Class
     */
    var VizFeedingGenerator = function(settings) {
        VizFeedingGenerator.superclass.constructor.apply(this, arguments);

        this._feeding = null;
    };
    OOUtil.extend(VizFeedingGenerator, BindingGeneratorBase);

    VizFeedingGenerator.prototype.generate = function(feedItems) {
        return VizFeedingUtil.generate(feedItems, this._visualizationType);
    };

    return VizFeedingGenerator;
});

define('sap/viz/controls/common/utils/binding/generators/FTBindingGenerator',[
// @formatter:off
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/bindingdef/BindingDefUtils',
    'sap/viz/controls/common/constants/FeedConst',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/utils/binding/generators/BindingGeneratorBase'
], function(OOUtil, BindingDefUtils, FeedConst, ChartConst, AnalyticalType, FeedItemType, BindingGeneratorBase){
// @formatter:on

    var FTBindingGenerator = function(settings) {
        FTBindingGenerator.superclass.constructor.apply(this, arguments);
    };
    OOUtil.extend(FTBindingGenerator, BindingGeneratorBase);

    function collectValueAxisNames(visualizationType, feedItems) {
        return feedItems.reduce(function(list, feedItem) {
            if (feedItem.values().length) {
                var def = BindingDefUtils.get(visualizationType, feedItem.id());
                if (def && def.mndEnumerable()) {
                    list.push(feedItem.id());
                }
            }
            return list;
        }, []);
    }


    FTBindingGenerator.prototype.generate = function(feedItems) {
        var valueAxisNames = collectValueAxisNames(this._visualizationType, feedItems);

        var bindings = [];
        feedItems.forEach(function(feed) {
            var values = feed.values() || [];
            var list = [];
            if (values.length === 0) {
                return;
            }

            for (var j = 0; j < values.length; j++) {
                var aaObj = values[j];
                if (aaObj.type() === AnalyticalType.MND) {
                    list.push({
                        measureNames : valueAxisNames
                    });
                } else {
                    if (aaObj.type() === AnalyticalType.HIERARCHY) {
                        for (var k = 0; k < aaObj.hierarchyLevels().length; k++) {
                            var level = aaObj.hierarchyLevels()[k];
                            // use hierarchy level object id, in case its
                            // analysis object is also used in another
                            // hierarchy level object, but with a
                            // different hierarchy level name.
                            list.push(level.id());
                            if (level.selected()) {
                                break;
                            }
                        }
                    } else {
                        list.push(aaObj.id());
                    }
                }
            }
            bindings.push({
                feed : feed.id(),
                source : list
            });
        });
        return bindings;
    };

    return FTBindingGenerator;
});

define('sap/viz/controls/common/utils/binding/generators/XTBindingGenerator',[
// @formatter:off
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/utils/binding/generators/BindingGeneratorBase',
    'sap/viz/controls/common/utils/Utils'
], function(OOUtil, ChartConst, AnalyticalType, FeedItemType, BindingGeneratorBase, Utils){
// @formatter:on

    var XTBindingGenerator = function(settings) {
        XTBindingGenerator.superclass.constructor.apply(this, arguments);
    };
    OOUtil.extend(XTBindingGenerator, BindingGeneratorBase);

    XTBindingGenerator.prototype.generate = function(feedItems) {
        var bindingMapping = map(feedItems);
        return genBinding(this._bindingDefs, bindingMapping);
    };

    var map = function(feedItems) {
        var bindingMapping = {};
        feedItems.forEach(function(feedItem) {
            var values = feedItem.values();
            if (values.length === 0) { return; }

            var feedId = feedItem.id().indexOf('multiplier') !== -1 ? feedItem.id().split('.')[0] : feedItem.id();
            bindingMapping[ feedId ] = [];

            for (var i = 0; i < values.length; ++i) {
                var analysis = values[i];
                var objId;
                if (analysis.type() === AnalyticalType.HIERARCHY) {
                    var hierarchyLevels = analysis.hierarchyLevels();
                    for (var j = 0; j < hierarchyLevels.length; j++) {
                        var level = hierarchyLevels[j];
                        if (level.selected()) {
                            objId = level.id();
                        }
                    }
                }
                else {
                    //if the analysisObj type is MND
                    if (analysis.type() === AnalyticalType.MND) {
                        objId = ":mnd";
                    } else {
                        if (analysis.aggregationType()) {
                            if (analysis.aggregationTarget()) {
                                objId = analysis.aggregationTarget();
                            } else {
                                objId = Utils.decode(analysis.id())[0];
                            }
                        } else {
                            objId = analysis.id();
                        }
                    }
                }
                bindingMapping[ feedId ].push(objId);
            }
        });
        return bindingMapping;
    };

    var genBinding = function(bindingDef, mapping) {
        var binding = [],
            order = ["measure", "dimension"],
            measureIndex = 1,
            dimensionIndex = 1;

        var feeds = bindingDef
            .map(function (def) {
                return {
                    id: def.id(),
                    name: def.name(),
                    type: def.type(),
                    min: def.min(),
                    max: def.max(),
                    mndMode: def.mndMode(),
                    bvrPriority: def.bvrPriority(),
                    bvrMNDPriority: def.bvrMNDPriority()
                };
            })
            .sort(function (a, b) {
                if (a.type !== b.type) {
                    return order.indexOf(a.type) - order.indexOf(b.type);
                }
                else {
                    return a.bvrPriority - b.bvrPriority;
                }
            });

        feeds.filter(function (feed) {
            if (feed.type != "measure") { return true; }

            // deal measure
            var info = mapping[ feed.id ];
            if ( !info ) {
                // not feed
                // binding.push({ feed: feed.id, source: [] });
                return false;
            }

            binding.push({
                feed: feed.id,
                source: [
                    {
                        "type": "measureValuesGroup",
                        "index": measureIndex ++
                    }
                ]
            });
            return false;
        })
        .filter(function (feed) {
            if (feed.type != "dimension") { return true; }

            // deal dimension
            var info = mapping[ feed.id ];
            if ( !info ) {
                // not feed
                // binding.push({ feed: feed.id, source: [] });
                return false;
            }

            binding.push({
                feed: feed.id,
                source: [
                    {
                        "type": "analysisAxis",
                        "index": dimensionIndex ++
                    }
                ]
            });

            if ( info.indexOf(":mnd") > -1) {
                if ( info[0] === ":mnd" ) {
                    binding[ binding.length -1 ].source.unshift({
                        "type": "measureNamesDimension"
                    });
                }
                else {
                    binding[ binding.length -1 ].source.push({
                        "type": "measureNamesDimension"
                    });
                }
            }

            return false;
        });

        return binding;
    };

    return XTBindingGenerator;
});

define('sap/viz/controls/common/utils/binding/BindingGeneratorFactory',[
// @formatter:off
    'sap/viz/controls/common/utils/InfoChartUtil',
    'sap/viz/controls/common/utils/binding/generators/VizFeedingGenerator',
    'sap/viz/controls/common/utils/binding/generators/FTBindingGenerator',
    'sap/viz/controls/common/utils/binding/generators/XTBindingGenerator'
], function(InfoChartUtil, VizFeedingGenerator, FTBindingGenerator, XTBindingGenerator, InfoFeedingGenerator){
// @formatter:on
    var BindingGeneratorFactory = {
        'create' : function(visualizationType, datasetType) {
            var generator;
            var settings = {
                'visualizationType' : visualizationType
            };
            if (InfoChartUtil.isInfoChart(visualizationType)) {
                if ("FlatTableDataset" === datasetType) {
                    generator = new FTBindingGenerator(settings);
                } else if ("CrossTableDataset" === datasetType) {
                    generator = new XTBindingGenerator(settings);
                }
            } else {
                generator = new VizFeedingGenerator(settings);
            }
            return generator;
        }
    };

    return BindingGeneratorFactory;
});

define('sap/viz/controls/common/utils/migrators/ChartMigrator',[
// @formatter:off
    'sap/viz/controls/common/constants/FeedConst',
    'sap/viz/controls/common/constants/DatasetTypeConst',
    'sap/viz/controls/common/utils/FakeDataUtils',
    'sap/viz/controls/common/utils/InfoChartUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/feeds/AnalysisObject', 
    'sap/viz/controls/common/feeds/AnalyticalType', 
    'sap/viz/controls/common/feeds/FeedItem', 
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/services/BVRService',
    'sap/viz/controls/common/utils/binding/BindingGeneratorFactory',
    'sap/viz/controls/common/utils/FlatTableFakeDataUtil',
    'sap/viz/controls/common/constants/ChartConst'
],
function(FeedConst, DatasetTypeConst, FakeDataUtils, InfoChartUtil, Utils, AnalysisObject, AnalyticalType, FeedItem, FeedUtils, LangManager, BVRService, BindingGeneratorFactory, FlatTableFakeDataUtil, ChartConst) {
// @formatter:on
    var ChartMigrator = {
    };
    ChartMigrator.migrate = function(chartObj) {
        var type = chartObj.type, isInfo = InfoChartUtil.isInfoChart(type), infoType = InfoChartUtil.getInfoType(type), tobeInfo = !!infoType, generator, binding, rawData, dataset, infoDataset;

        if (!isInfo && !tobeInfo) {
            return chartObj;
        }

        infoType = infoType || type;

        //migrate feeds id        
        var bindings = ChartMigrator._updateFeedingId(infoType, chartObj["feedingItems"]);

        var feeds = FeedItem.fromJSON(bindings)||[];

        // migrate feeding to binding
        if (chartObj.vizInstance && chartObj.vizInstance.data && chartObj.vizInstance.data.type) {
            generator = BindingGeneratorFactory.create(infoType, DatasetTypeConst.FLAT_TABLE);
            chartObj.vizInstance.bindings = generator.generate(BVRService.suggestMND(infoType, feeds));
            delete chartObj.vizInstance.feeding;
        }

        // migrate dataset
        if (isInfo) {
            //update flatTable field id.
            if (chartObj.vizInstance && chartObj.vizInstance.data && chartObj.vizInstance.data.val) {
                ChartMigrator._updateFlatTableDataset(feeds, chartObj.vizInstance.data.val);
            }
        } else {
            chartObj.type = infoType;
            if (chartObj.vizInstance) {
                chartObj.vizInstance.type = infoType;
                rawData = chartObj.vizInstance.data;
                if (rawData && rawData.val && rawData.type === "Crosstable") {
                    ChartMigrator._updateCrossTabDataSet(type, feeds, rawData.val);
                    dataset = new sap.viz.api.data.CrosstableDataset();
                    dataset.data(rawData.val);
                    infoDataset = InfoChartUtil.buildInfoDataset(dataset);
                    rawData.type = "FlatTable";
                    rawData.val = infoDataset.data();
                }
            }
        }

        // migrate vizView
        if (isInfo) {
            if (chartObj.vizView && chartObj.vizView.pAdapter && chartObj.vizView.pAdapter.rendererInfo) {
                ChartMigrator._updateVizView(chartObj.vizView.pAdapter.rendererInfo);
            }
        }

        // migrate properties, css, formats
        if (sap.viz.api.serialization) {
            chartObj.vizInstance = sap.viz.api.serialization.migrate(chartObj.vizInstance);
        }
        
        if(chartObj.vizInstance && chartObj.vizInstance.data && chartObj.vizInstance.data.val) {
            var complateData = FlatTableFakeDataUtil.buildFakeData(infoType, feeds, chartObj.vizInstance.data.val);
            dataset = new sap.viz.api.data.FlatTableDataset(complateData);
            if(dataset.hasFakeData()) {
                chartObj.vizInstance.data.val = complateData;
                chartObj.vizInstance.bindings = FlatTableFakeDataUtil.buildFakeBinding(infoType, feeds, true);
            }
        }

        return chartObj;
    };

    ChartMigrator.migrateChartType = function(type) {
        var toInfoType = InfoChartUtil.getInfoType(type), isInfoType = InfoChartUtil.isInfoChart(type);

        if (!isInfoType && toInfoType) {
            type = toInfoType;
        }

        return type;
    };

    ChartMigrator.migrateJSONFeeds = function(type, jsonFeeds) {
        type = ChartMigrator.migrateChartType(type);

        return ChartMigrator._updateFeedingId(type, jsonFeeds);
    };

    ChartMigrator.migrateData = function(dataset, type, feeds) {
        if (InfoChartUtil.isInfoChart(type) && dataset instanceof sap.viz.api.data.CrosstableDataset) {
            dataset = InfoChartUtil.buildInfoDataset(dataset);
            var data = dataset.data();
            ChartMigrator._updateFlatTableDataset(feeds, data);
            return new sap.viz.api.data.FlatTableDataset(data);
        } else {
            return dataset;
        }
    };

    ChartMigrator.migrateFeeds = function(feeds, type) {
        if (InfoChartUtil.isInfoChart(type)) {
            feeds = feeds || [];
            feeds.forEach(function(feed) {
                var id = ChartMigrator._feedsIdToBindingId(type, feed.id());
                if (id && feed.id() !== id) {
                    feed._id = id;
                }
            });
        }
        return feeds;
    };

    ChartMigrator.migrateProperties = function(properties, type, feeds) {
        if (InfoChartUtil.isInfoChart(type)) {
            var json = {
                'type' : type,
                'properties' : properties
            };
            if (feeds) {
                var generator = BindingGeneratorFactory.create(type, type === "FlatTable" ? DatasetTypeConst.FLAT_TABLE : DatasetTypeConst.CROSS_TABLE);
                json.bindings = generator.generate(BVRService.suggestMND(type, feeds));
            }
            sap.viz.api.serialization.migrate(json);
            return json.properties;
        } else {
            return properties;
        }
    };

    /**
     * Change feeding Ids to the ids defined in new infochart
     * @param {String} char
     * @param {String} feedingItems
     */
    ChartMigrator._updateFeedingId = function(chartType, feedingItems) {
        if (!feedingItems || feedingItems.length === 0) {
            return;
        }

        var bindings = Utils.clone(feedingItems);

        for (var i = 0; i < bindings.length; i++) {
            var id = bindings[i].id;
            if (id) {
                var newId = ChartMigrator._feedsIdToBindingId(chartType, id);
                if (newId) {
                    bindings[i].id = newId;
                }
            }
        }
        return bindings;
    };

    ChartMigrator._updateFlatTableDataset = function(feeds, rawDataSet) {
        if (!feeds || feeds.length === 0) {
            return;
        }
        if (!rawDataSet || !rawDataSet.metadata || !rawDataSet.metadata.fields || rawDataSet.metadata.fields.length === 0) {
            return;
        }

        //build name->ID map.
        var nameIDMap = {};
        for (var i = 0; i < feeds.length; i++) {
            var values = feeds[i].values();
            if (!values || values.length === 0) {
                continue;
            }
            for (var valueIndex = 0; valueIndex < values.length; valueIndex++) {
                var val = values[valueIndex];
                if (val.type() === AnalyticalType.MND) {
                    continue;
                } else if (val.type() === AnalyticalType.HIERARCHY) {
                    var hierarchyLevels = val.hierarchyLevels();
                    for (var k = 0; k < hierarchyLevels.length; k++) {
                        var level = hierarchyLevels[k];
                        if (!nameIDMap.hasOwnProperty(level.name())) {
                            nameIDMap[level.name()] = level.id();
                        }
                        if (level.selected()) {
                            break;
                        }
                    }
                } else {
                    if (!nameIDMap.hasOwnProperty(val.name())) {
                        nameIDMap[val.name()] = val.id();
                    }
                }
            }
        }
        //update raw dataset
        var fields = rawDataSet.metadata.fields;
        for (var index = 0; index < fields.length; index++) {
            var field = fields[index];
            if (field.name === field.id && nameIDMap.hasOwnProperty(field.name)) {
                field.id = nameIDMap[field.name];
            }
        }
    };
    /**
     * Base on feeding, update crossTab dataset to add id for dimension and measure.
     */
    ChartMigrator._updateCrossTabDataSet = function(vizType, feeds, rawDataSet) {
        if (!rawDataSet) {
            return;
        }
        var result = FakeDataUtils.buildFakeData(vizType, feeds, JSON.parse(JSON.stringify(rawDataSet)));
        var feeding = result.feeding;
        if (!feeding || feeding.length === 0) {
            return;
        }
        for (var i = 0; i < feeding.length; i++) {
            var feedingItem = feeding[i];
            var feedItem = FeedUtils.getFeed(feeds, feedingItem.feedId);
            var binding = feedingItem.binding;
            if (!feedItem || !binding || binding.length === 0) {
                continue;
            }
            var feedValues = feedItem.values();
            if (!feedValues || feedValues.length === 0) {
                continue;
            }
            var data = null;
            for (var n = 0; n < binding.length; n++) {
                var bindingItem = binding[n];
                var index = bindingItem.index;
                if (!bindingItem || !rawDataSet[bindingItem.type]) {
                    continue;
                }
                data = rawDataSet[bindingItem.type][index - 1];
                if (data && data.data) {
                    data = data.data;
                    break;
                }
            }
            if (!data) {
                continue;
            }
            ChartMigrator._updateDataID(data, feedValues);
        }
    };

    ChartMigrator._updateDataID = function(data, feedValues) {
        var dataIndex = 0;
        for (var i = 0; i < feedValues.length; i++) {
            var val = feedValues[i];
            if (val.type() === AnalyticalType.MND) {
                continue;
            } else if (val.type() === AnalyticalType.HIERARCHY) {
                var hierarchyLevels = val.hierarchyLevels();
                for (var k = 0; k < hierarchyLevels.length; k++) {
                    var level = hierarchyLevels[k];
                    if (data[dataIndex] && data[dataIndex].name === level.name()) {
                        // Use hierarchy level object id, in case its analysis
                        // object is also used in another hierarchy level object,
                        // but with a different hierarchy level name.
                        data[dataIndex].id = level.id();
                        dataIndex++;
                    }
                    if (level.selected()) {
                        break;
                    }
                }
            } else {
                if (data[dataIndex] && data[dataIndex].name === val.name()) {
                    data[dataIndex].id = val.id();
                    dataIndex++;
                }
            }
        }
    };

    ChartMigrator._feedsIdToBindingId = function(type, id) {
        if (id === 'multiplier.row') {
            return FeedConst.ID_TRELLIS_ROW;
        } else if (id === 'multiplier.column') {
            return FeedConst.ID_TRELLIS_COLUMN;
        } else {
            return sap.viz.api.serialization.feedsIdToBindingId(type, id);
        }
    };
    
    ChartMigrator._updateVizView = function(rendererInfo) {
        for ( var id in rendererInfo) {
            if (rendererInfo.hasOwnProperty(id)) {
                var infoJSON = rendererInfo[id];
                var params = infoJSON.parameters;
                if (params) {
                    for (var i = 0; i < params.length; i++) {
                        if (params[i].ctx) {
                            for ( var key in params[i].ctx) {
                                if (key === 'MeasureNamesDimension') {
                                    params[i].ctx['measureNames'] = params[i].ctx['MeasureNamesDimension'];
                                    delete params[i].ctx['MeasureNamesDimension'];
                                }
                            }
                        }
                    }
                }
            }
        }
    };

    ChartMigrator.migratePlayControl = function(jsonValue, result) {
        var type = jsonValue.chart.type;
        if(type == ChartConst.TYPE_GEO_BUBBLE)
        {
            return result;
        }
        var ds = new sap.viz.api.data.CrosstableDataset(), newDs = [], newMd, key;
        var tempData, num = 0;
        var playControlJSON = jsonValue.playControl;
        for (key in playControlJSON.slicedData.slices) {
            ds.data(playControlJSON.slicedData.slices[key].data.data);
            tempData = sap.viz.data.utils.CTB2TBConvertUtil.crossTable2FlatTableData(ds);
            for (var i in tempData.data) {
                tempData.data[i].unshift(playControlJSON.slicedData.slices[key].dimensionMember);
                tempData.data[i].push(num++);
                newDs.push(tempData.data[i]);
            }
            newMd = tempData.metadata;
        }
        var playFieldMetaData = {
            'dataType' : playControlJSON.sliceDimension['dataType'],
            'id' : playControlJSON.sliceDimension['id'],
            'name' : playControlJSON.sliceDimension['name'],
            'semanticType' : 'Dimension'
        };
        newMd.fields.unshift(playFieldMetaData);
        var newVal = {
            'data' : newDs,
            'metadata' : newMd
        };
        result.chart.vizInstance.data.val = newVal;
        
        var playFieldFeed = playFieldMetaData;
        playFieldFeed.actions = null;
        playFieldFeed.aggregationTarget = undefined;
        playFieldFeed.aggregationType = undefined;
        playFieldFeed.hierarchyLevels = null;
        
        result.chart.feedingItems.unshift({
            id : 'playField',
            type : 'Dimension',
            values : [
                playFieldFeed
            ]});
        result.chart.vizInstance.bindings.unshift({
            feed : 'playField',
            source : [playFieldFeed.id]
        });
        var domain = [];
        var slices = playControlJSON.slicedData.slices;
        for(key in slices) {
            domain.push(slices[key].dimensionMember);
        }
        result.playControl.slicedData = domain;
        return result;
    };
    return ChartMigrator;
});

// @formatter:off
define('sap/viz/controls/common/utils/Serialization',[
    'sap/viz/controls/common/feeds/FeedItem',
    'sap/viz/controls/common/feeds/AnalysisObject',
    'sap/viz/controls/common/filter/AbstractFilter',
    'sap/viz/controls/common/filter/FilterHelper',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/VizUtils',
    'sap/viz/controls/common/config/GlobalConfig',
    'sap/viz/controls/common/utils/IncompleteGhost',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/Version',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/utils/InfoChartUtil',
    'sap/viz/controls/common/utils/migrators/ChartMigrator'
],
function(FeedItem, AnalysisObject, AbstractFilter, FilterHelper, utils, VizUtils, GlobalConfig, IncompleteGhost, LangManager,
    Version, FeedUtils, ChartTypeUtil, InfoChartUtil, ChartMigrator) {
// @formatter:on
    /**
     * Utility class provides approaches to manipulate vizContainer serialization package.
     * @class sap.viz.controls.common.utils.Serialization
     */
    var Serialization = {};
    Serialization.TypeConst = {
        FlatTableDataset : 'FlatTable',
        CrosstableDataset : 'Crosstable',
        RawDataset : 'JSON'
    };

    var _migrateChartInJSON = function(valueJSON) {
        var chart = Serialization._getValue(valueJSON, ['vizFrame', 'chart']);
        if (chart) {
            Serialization._setValue(valueJSON, ['vizFrame', 'chart'], ChartMigrator.migrate(chart));
        }
    };

    /**
     * Migrate a serialized vizContainer JSON of older version to the latest version.
     * For 1.0, the serialization JSON is:
     * {
     *     'version' : versionNumber,
     *     'chart' : chartJSON,
     *     'comments' : commentsJSON,
     *     'isMNDVisible' : false
     * }
     * For 1.1, the serialization JSON is:
     * {
     *     'vizFrame' : {
     *              'version' : versionNumber,
     *              'chart' : chartJSON,
     *              'filterBar' : filterBarJSON,
     *              'contextMenu' : contextMenuJSON,
     *              'annotation' : annotationJSON
     *     },
     *     'vizBuilder' : {
     *              'version' : versionNumber,
     *              'switchBar' : switchBarJSON,
     *              'feedingPanel' : feedingPanelJSON
     * },
     *     'customData' : customData,
     * }
     *
     * @param {JSON} value
     *     VizContainer serialization package
     * @return {JSON} migrated serialization package
     **/
    Serialization.migrate = function(valueJSON) {
        var result = utils.clone(valueJSON);
        var isMNDVisible;
        var version = result['version'], vizFrame;
        if (version === '1.0') {
            vizFrame = Serialization.migrateVizFrame(result);
            result = {}
            result['vizFrame'] = vizFrame;
        } else {
            vizFrame = result['vizFrame'];
            if (vizFrame) {
                result['vizFrame'] = Serialization.migrateVizFrame(vizFrame);
            }
            if (result['vizBuilder']) {
                var feedingPanel = result['vizBuilder']['feedingPanel'];
                if (feedingPanel) {
                    result['vizBuilder']['feedingPanel'] = Serialization.migrateFeedingPanel(feedingPanel);
                }
            }
        }
        return result;
    };

    Serialization.migrateVizFrame = function(valueJSON) {
        var result = utils.clone(valueJSON);
        var version = result['version'];
        if (version === '1.0') {
            var frameJSON = {
                chart : {}
            };

            if (result['chart']) {
                var modelJSON = result['chart']['vizModel'];
                if (modelJSON) {
                    frameJSON['chart']['type'] = modelJSON['vizType'];
                    frameJSON['chart']['feedingItems'] = modelJSON['feedingItems'];
                    frameJSON['filterBar'] = {};
                    frameJSON['filterBar']['filterItems'] = modelJSON['filterItems'];
                    frameJSON['contextMenu'] = {};
                    frameJSON['contextMenu']['isMNDVisible'] = modelJSON['isMNDVisible'];
                }
                var instanceJSON = result['chart']['vizInstance'];
                if (instanceJSON) {
                    frameJSON['chart']['vizInstance'] = instanceJSON;
                }
            }

            var commentsJSON = result['comments'];
            if (commentsJSON) {
                frameJSON['annotation'] = commentsJSON;
            }
            frameJSON['version'] = Version.VERSION;
            result = frameJSON;
        }

        // backward compability of BITSDC4-475.
        // the feedingitem in VizFrame's serialization before 1.16 use vizModel's feedingItem which may include
        // incorrect mnd feed. we need to fix the feeds in the serialization.
        if (result['chart']) {
            var type = result['chart']['type'];
            var isMNDVisible = result['contextMenu'] ? result['contextMenu']['isMNDVisible'] : null;
            Serialization._migrateFeeds(result['chart'], type, isMNDVisible);
            result['chart'] = ChartMigrator.migrate(result['chart']);
        }
        
        if(result.playControl) {
            result = ChartMigrator.migratePlayControl(valueJSON, result);
        }

        return result;
    };

    Serialization.migrateFeedingPanel = function(valueJSON) {
        var result = utils.clone(valueJSON);

        // backward compability of BITSDC4-475.
        // the feedingitem in VizFrame's serialization before 1.16 use vizModel's feedingItem which may include
        // incorrect mnd feed. we need to fix the feeds in the serialization.
        var type = result.type;
        var isMNDVisible = result['mndVisible'];

        Serialization._migrateFeeds(result, type, isMNDVisible);

        return result;
    };

    /**
     * backward compability of BITSDC4-475.
     * The feedingitem in VizFrame's serialization before 1.16 use vizModel's feedingItem which may include
     * incorrect mnd feed. we need to fix the feeds in the serialization.
     */
    Serialization._migrateFeeds = function (valueJSON, vizType, isMNDVisible) {
        // isGeo() only support for eris (geo map),for other geo charts
        // it requires to migrate the feeding.
        if(ChartTypeUtil.isGeo(vizType)){
            return valueJSON;
        }
        var feeds = Serialization._getFeedsFromInnerControl(valueJSON);
        // migrateFeeds
        feeds = FeedItem.fromJSON(ChartMigrator.migrateJSONFeeds(ChartMigrator.migrateChartType(vizType),
            FeedItem.toJSON(feeds)));

        if (isMNDVisible === false) {
            if (ChartTypeUtil.isGeo(vizType)) {
                for (var i = 0; i < feeds.length; i++) {
                    feeds = FeedUtils.removeMND(feeds[i]);
                }
            } else {
                feeds = FeedUtils.removeMND(feeds);
            }
        }

        Serialization._updateFeedsToInnerControl(valueJSON, feeds);
    };

    /**
     * Get FeedItems from a serialized JSON object which represents a VizFrame control.
     * @method sap.viz.controls.common.utils.Serialization.getFeeds
     *
     * @param {JSON} value
     *     VizContainer serialization package
     * @return {Array<{@link sap.viz.controls.common.feeds.FeedItem}>|2DArray<{@link sap.viz.controls.common.feeds.FeedItem}>}
     **/
    Serialization.getFeeds = function(value) {
        var feedsJSON = null;
        var feedsJSONfromChart = Serialization._getValue(value, ['vizFrame', 'chart', 'feedingItems']);
        var feedsJSONfromPanel = Serialization._getValue(value, ['vizBuilder', 'feedingPanel', 'feedingItems']);
        var isMNDVisible;
        if (feedsJSONfromChart) {
            feedsJSON = feedsJSONfromChart;
            var contextMenuJSON = Serialization._getValue(value, ['vizFrame', 'contextMenu']);
            if (contextMenuJSON) {
                isMNDVisible = contextMenuJSON.isMNDVisible;
            }
        } else if (feedsJSONfromPanel) {
            feedsJSON = feedsJSONfromPanel;
            var feedingPanelJSON = Serialization._getValue(value, ['vizBuilder', 'feedingPanel']);
            if (feedingPanelJSON) {
                isMNDVisible = feedingPanelJSON.mndVisible;
            }
        }

        if (feedsJSON == null) {
            return [];
        }

        feedsJSON = ChartMigrator.migrateJSONFeeds(Serialization._getValue(value, ['vizFrame', 'chart', 'type']), feedsJSON);

        var feeds = FeedItem.fromJSON(feedsJSON);

        // backward compability of BITSDC4-475.
        // the feedingitem in VizFrame's serialization before 1.16 use vizModel's feedingItem which may include
        // incorrect mnd feed. we need to fix the feeds in the serialization.
        if (isMNDVisible === false) {
            feeds = FeedUtils.removeMND(feeds);
        }

        return feeds;
    };

    Serialization._getFeedsFromInnerControl = function(value) {
        var feedsJSON = null;
        var feedsJSONfromControl = Serialization._getValue(value, ['feedingItems']);
        if (feedsJSONfromControl) {
            feedsJSON = feedsJSONfromControl;
        }
        if (feedsJSON == null) {
            return [];
        }

        var feeds = FeedItem.fromJSON(feedsJSON);
        return feeds;
    };

    /**
     * Update a serialized vizContainer JSON object with specified FeedItems.
     * @method sap.viz.controls.common.utils.Serialization.updateFeeds
     *
     * @param {JSON} value
     *     VizContainer serialization package
     * @param {Array<{@link sap.viz.controls.common.feeds.FeedItem}>|2DArray<{@link sap.viz.controls.common.feeds.FeedItem}>} feeds
     * @return {JSON} updated serialization package
     **/
    Serialization.updateFeeds = function(value, feeds) {
        _migrateChartInJSON(value);

        var feedsJSON = FeedItem.toJSON(feeds);
        feedsJSON = ChartMigrator.migrateJSONFeeds(Serialization._getValue(value, ['vizFrame', 'chart', 'type']), feedsJSON);

        Serialization._setValue(value, ['vizFrame', 'chart', 'feedingItems'], feedsJSON);
        Serialization._setValue(value, ['vizBuilder', 'feedingPanel', 'feedingItems'], feedsJSON);
        return value;
    };

    Serialization._updateFeedsToInnerControl = function(value, feeds) {
        var feedsJSON = FeedItem.toJSON(feeds);
        Serialization._setValue(value, ['feedingItems'], feedsJSON);
        return value;
    };

    /**
     * Get FilterItems from a serialized JSON object which represents a VizFrame control.
     * @method sap.viz.controls.common.utils.Serialization.getFilters
     *
     * @param {JSON} value
     *     VizContainer serialization package
     * @return
     * {Array<{@link sap.viz.controls.common.filter.AbstractFilter}>|2DArray<{@link sap.viz.controls.common.filter.AbstractFilter}>}
     * filters
     **/
    Serialization.getFilters = function(value) {
        var filtersJSON = Serialization._getValue(value, ['vizFrame', 'filterBar', 'filterItems']);
        if (filtersJSON == null) {
            return [];
        }
        var filters = FilterHelper.fromJSON(filtersJSON);
        return filters;
    };

    /**
     * Update a serialized vizContainer JSON object with specified FilterItems.
     *
     * @param {JSON} value
     *     VizContainer serialization package
     * @param
     * {Array<{@link sap.viz.controls.common.filter.AbstractFilter}>|2DArray<{@link sap.viz.controls.common.filter.AbstractFilter}>}
     * filters
     * @return {JSON} updated serialization package
     **/
    Serialization.updateFilters = function(value, filters) {
        _migrateChartInJSON(value);

        var filtersJSON = FilterHelper.toJSON(filters);
        Serialization._setValue(value, ['vizFrame', 'filterBar', 'filterItems'], filtersJSON);
        return value;
    };

    /**
     * Remove dataset from a serialized JSON object which represents a VizFrame control.
     * @method sap.viz.controls.common.utils.Serialization.removeDataset
     *
     * @param {JSON} value
     *     VizContainer serialization package
     * @return {JSON} updated serialization package
     **/
    Serialization.removeDataset = function(value) {
        _migrateChartInJSON(value);

        var vizInstance = Serialization._getValue(value, ['vizFrame', 'chart', 'vizInstance']);
        if (vizInstance) {
            var type =  Serialization.getChartType(value);
            if(!ChartTypeUtil.isGeo(type)){
               delete vizInstance['data'];
            }else{
              sap.viz.geo.utils.Serialization.removeDataset(vizInstance);
            }
        }
        return value;
    };

    /**
     * Empty dataset of a serialized JSON object which represents a VizFrame control.
     * @method sap.viz.controls.common.utils.Serialization.emptyDataset
     *
     * @param {JSON} value
     *     VizContainer serialization package
     * @return {JSON} updated serialization package
     **/
    Serialization.emptyDataset = function(value) {
        _migrateChartInJSON(value);

        var dataJSON = Serialization._getValue(value, ['vizFrame', 'chart', 'vizInstance', 'data']);
        if (dataJSON) {
            Serialization._emptyDataset(dataJSON);
        }

        var slicedDataJSON = Serialization._getValue(value, ['vizFrame', 'playControl', 'slicedData']);
        if (slicedDataJSON) {
            slicedDataJSON.measuresInfo = [];
            slicedDataJSON.slices = [];
        }

        return value;
    };

    Serialization._emptyDataset = function(dataJSON) {
        if (!dataJSON) {
            return;
        }
        if ( dataJSON instanceof Array) {
            for (var i = 0; i < dataJSON.length; i++) {
                Serialization._emptyDataset(dataJSON[i]);
            }
        } else {
            var type = dataJSON['type'];
            var data = dataJSON['val'];
            var dataset = {};
            var datasetJSON = {};
            if (type === Serialization.TypeConst.CrosstableDataset) {
                dataset = new sap.viz.api.data.CrosstableDataset();
                dataset.data(data);
                datasetJSON = dataset.toJSON({
                    emptyDataset : true
                }).data;
            } else if (type === Serialization.TypeConst.FlatTableDataset) {
                dataset = new sap.viz.api.data.FlatTableDataset(data);
                datasetJSON = dataset.toJSON({
                    emptyDataset : true
                }).data;
            } else if (type === Serialization.TypeConst.RawDataset) {
                datasetJSON = {};
            } else {
                throw LangManager.get('VIZ_COMMON_SERIALIZATION_FAILED') + LangManager.get('VIZ_COMMON_INVALID_SERIALIZATION_PACKAGE');
            }
            dataJSON['val'] = datasetJSON;
        }
    };

    /**
     * Update a serialized vizContainer JSON object with specified dataset.
     * @method sap.viz.controls.common.utils.Serialization.updateDataset
     *
     * @param {JSON} value
     *     VizContainer serialization package
     * @param
     * {sap.viz.api.data.CrosstableDataset|sap.viz.api.data.FlatTableDataset|Array<sap.viz.api.data.FlatTableDataset>|Object}
     * dataset
     *     CrosstableDataset and FlatTableDataset is for common CVOM charts,
     *     Array<FlatTableDataset> is for GeoMap
     *     Object is specially for ChartConst.TYPE_TABLE and ChartConst.TYPE_CROSSTAB
     * @return {JSON} updated serialization package
     **/
    Serialization.updateDataset = function(value, dataset) {
        _migrateChartInJSON(value);

        var vizInstance = Serialization._getValue(value, ['vizFrame', 'chart', 'vizInstance']);
        if (vizInstance) {
            vizInstance['data'] = {};
            if(InfoChartUtil.isInfoChart(vizInstance.type) && ( dataset instanceof sap.viz.api.data.CrosstableDataset)){
                dataset = InfoChartUtil.buildInfoDataset(dataset);
            }
            
            if(!ChartTypeUtil.isGeo(vizInstance.type)){
              Serialization._updateDataset(vizInstance['data'], dataset);
            }else{
              sap.viz.geo.utils.Serialization.updateDataset(vizInstance, dataset);
            }
            
        }
        return value;
    };

    Serialization._updateDataset = function(dataJSON, dataset) {
        if (!dataJSON || !dataset) {
            return;
        }
        if ( dataset instanceof Array) {
            for (var i = 0; i < dataset.length; i++) {
                var data = dataset[i];
                Serialization._updateDataset(dataJSON[i], data);
            }
        } else if ( dataset instanceof sap.viz.api.data.CrosstableDataset) {
            dataJSON['type'] = Serialization.TypeConst.CrosstableDataset;
            dataJSON['val'] = dataset.data();
        } else if ( dataset instanceof sap.viz.api.data.FlatTableDataset) {
            dataJSON['type'] = Serialization.TypeConst.FlatTableDataset;
            dataJSON['val'] = dataset.data();
        } else {
            //dataset is rawdataset
            dataJSON['type'] = Serialization.TypeConst.RawDataset;
            dataJSON['val'] = dataset;
        }
    };

    /**
     * Convert VizContainer serialization package data to viz instance serialization data.
     *
     * @param {JSON} value
     *     VizContainer serialization package
     * @returns {JSON} viz instance serialization data
     */
    Serialization.convertToVizSerialization = function(value) {
        _migrateChartInJSON(value);

        var vizInstance = Serialization._getValue(value, ['vizFrame', 'vizInstance']);
        if (vizInstance) {
            return utils.clone(vizInstance);
        }
        return null;
    };

    /**
     * Update vizContainer serialization package with specified properties.
     * @method sap.viz.controls.common.utils.Serialization.updateProperties
     *
     * @param {JSON} value
     *     VizContainer serialization package
     * @param {JSON} properties
     *     viz properties
     * @return {JSON} updated serialization package
     **/
    Serialization.updateProperties = function(value, properties) {
        _migrateChartInJSON(value);

        var chartJSON = ChartMigrator.migrate({
            vizInstance: {
                properties: properties
            }
        });

        properties = Serialization._getValue(chartJSON, ['vizInstance', 'properties']);

        Serialization._setValue(value, ['vizFrame', 'chart', 'vizInstance', 'properties'], properties);

        return value;
    };

    /**
     * Get properties JSON object from vizContainer serialization package.
     * @method sap.viz.controls.common.utils.Serialization.getProperties
     *
     * @param {JSON} value
     *     VizContainer serialization package
     * @return {JSON} properties JSON
     **/
    Serialization.getProperties = function(value) {
        _migrateChartInJSON(value);

        var properties = Serialization._getValue(value, ['vizFrame', 'chart', 'vizInstance', 'properties']);
        return properties || {};
    };

    /**
     * Update analysis objects labels from a serialized JSON object which represents a VizFrame control.
     * @method sap.viz.controls.common.utils.Serialization.updateAnalysisObjectLabels
     * @param {JSON} value
     *     VizContainer serialization package
     * @param {Array<{@link sap.viz.controls.common.feeds.AnalysisObject}>} analysisObjects
     * @return {JSON} updated serialization package
     **/
    Serialization.updateAnalysisObjectLabels = function(value, analysisObjects) {
        _migrateChartInJSON(value);

        if (!analysisObjects) {
            return value;
        }
        var feeds = Serialization.getFeeds(value) || [];
        var filters = Serialization.getFilters(value) || [];
        var sliceDimension = Serialization._getSliceDimension(value);

        function createHierarchyLevelsHash(hls){
            var hash = {};
            hls.forEach(function(hl){
                if(hl){
                    hash[hl.id()] = hl;
                }
            });
            return hash;
        }
        function createAnalysisObjectsHash(aos){
            var hash = {};
            var q = aos.slice();
            while (q.length) {
                var ao = q.shift();
                if (ao) {
                    var hierarchyLevels = ao.hierarchyLevels() || [];
                    hash[ao.id()] = {
                        ao: ao,
                        hlHash: createHierarchyLevelsHash(hierarchyLevels)
                    };
                    q = q.concat(hierarchyLevels.map(function(hl) {
                        return hl._analysis;
                    }));
                }
            }
            return hash;
        }

        var newAosHash = createAnalysisObjectsHash(analysisObjects);
        feeds.forEach(function(fi) {
            var aos = fi.values();
            if (aos) {
                var oldAosHash = createAnalysisObjectsHash(aos);

                for (var aoId in oldAosHash) {
                    var oldAoItem = oldAosHash[aoId];
                    var newAoItem = newAosHash[aoId];
                    if (newAoItem) {
                        oldAoItem.ao.name(newAoItem.ao.name());

                        // Loop hierarchy levels.
                        for (var hlId in oldAoItem.hlHash) {
                            var oldHl = oldAoItem.hlHash[hlId];
                            var newHl = newAoItem.hlHash[hlId];
                            if (newHl) {
                                oldHl._name = newHl.name();
                            }
                        }
                    }
                }
            }
        });

        filters.forEach(function(fi) {
            if(fi){
                var type = fi.getType();
                if (type === AbstractFilter.NUMERIC_RANGE_TYPE ||
                    type === AbstractFilter.DATE_RANGE_TYPE ||
                    (type === AbstractFilter.VALUE_TYPE && !fi.hierarchyLevelId)) {

                    var newAoItem = newAosHash[fi.getFilteredObjectId()];
                    if (newAoItem) {
                        fi.filteredObjectName = newAoItem.ao.name();
                    }
                } else if (type === AbstractFilter.VALUE_TYPE && fi.hierarchyLevelId) {
                    // Loop new AO's hierarchy level by hierarchy level id.
                    for (var j = 0; j < analysisObjects.length; j++) {
                        var newAoHls = analysisObjects[j].hierarchyLevels();
                        if (newAoHls) {
                            for (var k = 0; k < newAoHls.length; k++) {
                                var newAoHl = newAoHls[k];
                                if (newAoHl && newAoHl.id() === fi.hierarchyLevelId) {
                                    fi.filteredObjectName = newAoHl.name();
                                    break;
                                }
                            }
                        }
                    }
                }

            }
        });

        if (sliceDimension) {
            var newAoItem = newAosHash[sliceDimension.id()];
            if (newAoItem) {
                sliceDimension.name(newAoItem.ao.name());

                var oldHlHash = createHierarchyLevelsHash(sliceDimension.hierarchyLevels() || []);

                // Loop hierarchy levels.
                for (var hlId in oldHlHash) {
                    var oldAoHl = oldHlHash[hlId];
                    var newAoHl = newAoItem.hlHash[hlId];

                    if (newAoHl) {
                        oldAoHl._name = newAoHl.name();
                        if (oldAoHl._analysis && newAoHl._analysis && oldAoHl._analysis.id() === newAoHl._analysis.id()) {
                            oldAoHl._analysis.name(newAoHl._analysis.name());
                        }
                    }
                }
            }
        }

        Serialization.updateFeeds(value, feeds);
        Serialization.updateFilters(value, filters);
        Serialization._updateSliceDimension(value, sliceDimension);
        return value;
    };

    /**
     * Get default incomplete ghost package for createViz.
     * @method sap.viz.controls.common.utils.Serialization.defaultIncompletePackage
     *
     * @param {String} type
     *     vizType
     * @return {JSON} default incomplete serialization package of the specific chart type
     **/
    Serialization.defaultIncompletePackage = function(type) {
        type = ChartMigrator.migrateChartType(type);
        
        var uiConfig = GlobalConfig.defaultUIConfig(GlobalConfig.DEFAULT_UICONFIG_TYPE_CHART);
        var properties, chartJSON;
        if (type) {
            var chartId = ChartTypeUtil.getChartId(type);
            if (uiConfig && uiConfig.hasOwnProperty('specificProperties')) {
                properties = utils.updateJSON(uiConfig.defaultProperties, uiConfig.specificProperties[chartId]);
            } else {
                properties = uiConfig ? uiConfig.defaultProperties : {};
            }
            properties = VizUtils.convertProperties(properties, ChartTypeUtil.getVizType(type), type);
        } else {
            properties = {};
        }
        var dataset = IncompleteGhost.getDataset(type);
        var data;
        if (ChartTypeUtil.isTable(type)) {
            data = {
                type : Serialization.TypeConst.RawDataset,
                val : dataset
            };
        } else {
            data = {
                type : dataset instanceof sap.viz.api.data.FlatTableDataset ? Serialization.TypeConst.FlatTableDataset : Serialization.TypeConst.CrosstableDataset,
                val : dataset.data()
            };
        }
        
        return {
            'vizFrame' : {
                'version' : Version.VERSION,
                'chart' : {
                    'vizInstance': {
                        'data': data,
                        'properties': properties,
                        'type': type
                    },
                    'type' : type,            
                    'vizTitleMode': "auto"
                },
                'contextMenu' : {}
            }
        };
    };

    /**
     * Update vizContainer serialization package with specified data.
     * @method sap.viz.controls.common.utils.Serialization.updateCustomData
     *
     * @param {JSON} value
     *     VizContainer serialization package
     * @param {JSON} customData

     *     custom data in JSON
     * @return {JSON} updated serialization package
     **/
    Serialization.updateCustomData = function(value, properties) {
        _migrateChartInJSON(value);

        Serialization._setValue(value, ['customData'], properties);
        return value;
    };

    /**
     * Get custom data from a serialized JSON object which represents a VizFrame control.
     * @method sap.viz.controls.common.utils.Serialization.getCustomData
     *
     * @param {JSON} value
     *     VizContainer serialization package
     * @return {JSON} custom data JSON
     **/
    Serialization.getCustomData = function(value) {
        return Serialization._getValue(value, ['customData']) || {};
    };


    /**
     * Update vizContainer serialization package with specified control setting.
     * For chart doesn't support playControl, nothing will happen when this api invoked on playControl settings.
     * {for now, only playControl.slicedData and playControl.sliceDimension are supported}
     * @method sap.viz.controls.common.utils.Serialization.updateControlSettings
     *
     * @param {JSON} valueJSON
     *     VizContainer serialization package
     * @param {String} controlName
     * @param {String} settingName
     * @param {Object} value
     **/
    Serialization.updateControlSettings = function(valueJSON, controlName, settingName, value) {
        _migrateChartInJSON(value);

        var type = Serialization._getValue(valueJSON, ['vizFrame', 'chart', 'type']);
        if(ChartTypeUtil.supportAnimation(type) && controlName === 'playControl' && !InfoChartUtil.isInfoChart(type))
        {
            if(settingName === 'slicedData')
            {
                Serialization._updateSlicedData(valueJSON, value);
            }
            else
            if(settingName === 'sliceDimension')
            {
                Serialization._updateSliceDimension(valueJSON, value);
            }
            else
            if(settingName === 'value')
            {
                Serialization._setValue(valueJSON, ['vizFrame', 'playControl', 'value'], value);
            }
        }
    };

    /**
     * Get control settings from a serialized JSON object which represents a VizFrame control.
     * {for now, only playControl.slicedData and playControl.sliceDimension are supported}
     * @method sap.viz.controls.common.utils.Serialization.getControlSettings
     *
     * @param {JSON} valueJSON
     *     VizContainer serialization package
     * @param {String} controlName
     * @param {String} settingName
     * @return {Object} control setting
     **/
    Serialization.getControlSettings = function(valueJSON, controlName, settingName) {
        var type = Serialization._getValue(valueJSON, ['vizFrame', 'chart', 'type']);
        if(controlName === 'playControl' && type && !InfoChartUtil.isInfoChart(type))
        {
            if(settingName === 'slicedData')
            {
                return Serialization._getSlicedData(valueJSON);
            }
            else
            if(settingName === 'sliceDimension')
            {
                return Serialization._getSliceDimension(valueJSON);
            }
            if(settingName === 'value')
            {
                return Serialization._getValue(valueJSON, ['vizFrame', 'playControl', 'value']);
            }
        }
        else
        {
            return null;
        }
    };

    /**
     * Get chart type from a serialized JSON object which represents a VizFrame control.
     * @method sap.viz.controls.common.utils.Serialization.getChartType
     *
     * @param {JSON} valueJSON
     *     VizContainer serialization package
     * @return {String} chart type
     **/
    Serialization.getChartType = function(valueJSON) {
        return ChartMigrator.migrateChartType(Serialization._getValue(valueJSON, ['vizFrame', 'chart', 'type']));
    };

    /**
     * Update vizContainer serialization package with specified css.
     * @method sap.viz.controls.common.utils.Serialization.updateCss
     *
     * @param {JSON} value
     *     VizContainer serialization package
     * @param {String} css

     *     css string
     * @return {JSON} updated serialization package
     **/
    Serialization.updateCss = function(value, css) {
        Serialization._setValue(value, ['vizFrame', 'chart', 'vizInstance', 'css'], css);

        _migrateChartInJSON(value);
        
        return value;
    };

    Serialization._updateSliceDimension = function(valueJSON, value)
    {
        if(utils.isArray(value))
        {
            return;
        }
        var aaJSON = AnalysisObject.toJSON(value);
        Serialization._setValue(valueJSON, ['vizFrame', 'playControl', 'sliceDimension'], aaJSON);
    }

    Serialization._getSliceDimension = function(valueJSON)
    {
        var aaJSON = Serialization._getValue(valueJSON, ['vizFrame', 'playControl', 'sliceDimension']);
        if(aaJSON)
        {
            return AnalysisObject.fromJSON(aaJSON);
        }
        else
        {
            return null;
        }
    }

    Serialization._updateSlicedData = function(valueJSON, slicedData)
    {
        var result = {};
        result.measuresInfo = slicedData.measuresInfo;
        if(utils.isArray(slicedData.slices)) {
            result.slices = [];
            for(var i = 0; i < slicedData.slices.length; i++) {
                result.slices.push({
                    data : slicedData.slices[i].data.toJSON(),
                    dimensionMember : slicedData.slices[i].dimensionMember
                });
            }
        }
        Serialization._setValue(valueJSON, ['vizFrame', 'playControl', 'slicedData'], result);
    };

    Serialization._getSlicedData = function(valueJSON)
    {
        var slicedDataJSON = Serialization._getValue(valueJSON, ['vizFrame', 'playControl', 'slicedData'])
        if(slicedDataJSON)
        {
            var result = {};
            result.measuresInfo = slicedDataJSON.measuresInfo;
            result.slices = [];
            var slicesJSON =  slicedDataJSON.slices;
            if(slicesJSON)
            {
                for(var i = 0; i < slicesJSON.length; i++)
                {
                    var sliceJSON = slicesJSON[i]
                    result.slices.push({
                        data:sap.viz.api.data.CrosstableDataset.fromJSON(sliceJSON.data),
                        dimensionMemeber: sliceJSON.dimensionMemeber
                    });
                }
            }
            return result;
        }
        else
        {
            return null;
        }
    };

    Serialization._getValue = function(root, path) {
        if (!root || !path || !path.length) {
            return null;
        }
        var node = root;
        for (var i = 0; i < path.length; i++) {
            if (!node[path[i]]) {
                return null;
            }
            node = node[path[i]];
        }
        return node;
    };

    Serialization._setValue = function(root, path, value) {
        if (!root || !path || !path.length) {
            return null;
        }
        var node = root;
        for (var i = 0; i < path.length - 1; i++) {
            if (!node[path[i]]) {
                return;
            }
            node = node[path[i]];
        }
        var leaf = path[path.length - 1];
        node[leaf] = value;
    };

    return Serialization;
});

define('sap/viz/controls/common/utils/Feeds',
// @formatter:off
[
    'sap/viz/controls/common/feeds/FeedUtils'
],
function(FeedUtils) {
    /**
     * Feeds class provides whether the feeds are compatible or equal.
     * @class sap.viz.controls.common.utils.Feeds
     */
    var Feeds = {
        /**
         * Whether feeds are compatible.
         * @method sap.viz.controls.common.utils.Feeds.feedCompatible
         * @param {String} feedItemType
         * @param {String} analyticType
         * @param {String} dataType
         */
        feedCompatible: function(feedItemType, analyticType, dataType) {
            return FeedUtils.feedCompatible(feedItemType, analyticType, dataType);
        },
        
        /**
         * Whether feeds are equal.
         * @method sap.viz.controls.common.utils.Feeds.equal
         * @param {Array<{@link sap.viz.controls.common.feeds.FeedItem}>} feeds1
         * @param {Array<{@link sap.viz.controls.common.feeds.FeedItem}>} feeds2
         */
        equal: function(feeds1, feeds2) {
            
            return FeedUtils.equal(feeds1, feeds2);
        }

    };
    return Feeds;
 });

define('sap/viz/controls/common/views/menu/MenuItem',[
// @formatter:off
    'require',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/JsonUtil'
],
function(r, utils, JsonUtil) {
// @formatter:on
    var require = r || require;
    /**
     * MenuItem Class
     *
     * @class sap.viz.controls.common.views.menu.MenuItem
     *
     * @param {String} id
     * @param {String} name
     * @param {Array<{@link sap.viz.controls.common.views.menu.MenuGroup}>} subMenuGroups
     */
    var MenuItem = function(id, name, subMenuGroups) {
        this.__className = "sap.viz.controls.common.views.menu.MenuItem";
        this._id = id;
        this._name = name;

        this._enabled = true;
        this._selected = false;
        // {[MenuGroup]}
        this._subMenuGroups = subMenuGroups;
    };
    MenuItem.prototype.id = function() {
        return this._id;
    };
    MenuItem.prototype.name = function() {
        return this._name;
    };
    MenuItem.prototype.icon = function() {
        return this._icon;
    };
    MenuItem.prototype.subMenuGroups = function() {
        return this._subMenuGroups;
    };
    MenuItem.prototype.enabled = function(value) {
        if (arguments.length > 0) {
            this._enabled = value;
            return this;
        } else {
            return this._enabled;
        }
    };
    MenuItem.prototype.selected = function(value) {
        if (arguments.length > 0) {
            this._selected = value;
            return this;
        } else {
            return this._selected;
        }
    };

    MenuItem.prototype.equal = function(menuItem) {
        if (menuItem == null) {
            return false;
        }
        if (this.id() !== menuItem.id()) {
            return false;
        }
        if (this.name() !== menuItem.name()) {
            return false;
        }
        if (this.enabled() !== menuItem.enabled()) {
            return false;
        }
        if (this.selected() !== menuItem.selected()) {
            return false;
        }
        var subMenuGroups1 = this.subMenuGroups() || [];
        var subMenuGroups2 = menuItem.subMenuGroups() || [];
        if (subMenuGroups1.length !== subMenuGroups2.length) {
            return false;
        }

        for (var i = 0; i < subMenuGroups1.length; i++) {
            var menuGroup1 = subMenuGroups1[i];
            var menuGroup2 = subMenuGroups2[i];
            if (!(menuGroup1 == null && menuGroup2 == null)) {
                if (menuGroup1 == null) {
                    return false;
                }
                if (!menuGroup1.equal(menuGroup2)) {
                    return false;
                }
            }
        }

        return true;
    };


    /**
     * Serialize MenuItem or MenuItem array to a JSON object.
     * @method sap.viz.controls.common.views.menu.MenuItem.toJSON
     * @param {sap.viz.controls.common.views.menu.MenuItem|Array<{@link sap.viz.controls.common.views.menu.MenuItem}>} instance
     * @returns {JSON}
     */
    MenuItem.toJSON = function(instance) {
        return utils.toJSON(instance, function(instance) {
            return {
                'id' : instance._id,
                'name' : instance._name,
                'subMenuGroups' : JsonUtil.toJSON(JsonUtil.MenuGroupType, instance._subMenuGroups),
                'enabled' : instance._enabled,
                'selected' : instance._selected
            };
        });
    };
    /**
     * Deserialize a JSON object to MenuItem or MenuItem array.
     * @method sap.viz.controls.common.views.menu.MenuItem.fromJSON
     * @param {JSON} json
     * @returns {sap.viz.controls.common.views.menu.MenuItem|Array<{@link sap.viz.controls.common.views.menu.MenuItem}>}
     */
    MenuItem.fromJSON = function(json) {
        return utils.fromJSON(json, function(json) {
            var mi = new MenuItem(json.id, json.name, JsonUtil.fromJSON(JsonUtil.MenuGroupType, json.subMenuGroups));
            mi.enabled(json.enabled);
            mi.selected(json.selected);
            return mi;
        });
    };
    JsonUtil.register(JsonUtil.MenuItemType, MenuItem.fromJSON, MenuItem.toJSON);

    return MenuItem;
});

define('sap/viz/controls/common/events/Event',[],function() {

    /**
     * sap.viz.controls.common.events.Event Class
     *
     * @param {String} type
     *            event type
     * @param {sap.viz.controls.common.events.EventDispatcher} target
     *            event target
     * @param {Object|undefined} data
     *            event data
     */
    var Event = function(type, target, data) {
        this.__className = "sap.viz.controls.common.events.Event";

        /**
         * {String}
         */
        this._type = type;
        /**
         * {sap.viz.controls.common.events.EventDispatcher}
         */
        this._target = target;
        /**
         * {Object}
         */
        this.data = data;
    };
    /**
     * Get event type
     *
     * @returns {String}
     */
    Event.prototype.type = function() {
        return this._type;
    };
    /**
     * Get event target
     *
     * @returns {sap.viz.controls.common.events.EventDispatcher}
     */
    Event.prototype.target = function() {
        return this._target;
    };
    return Event;
});

define('sap/viz/controls/common/views/feed/FeedListEvent',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function($, OOUtil, Event) {
	/**
     * The Feedlist Event.
     * @class sap.viz.controls.common.views.FeedListEvent
     */
    var FeedListEvent = function(type, target, data) {
        FeedListEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.common.views.FeedListEvent";
    };
    OOUtil.extend(FeedListEvent, Event);

    /**
     * Event name for drop down list opened.
     * @memberof sap.viz.controls.common.views.FeedListEvent
     * @member DROP_DOWN_OPENED
     * @static
     */
    FeedListEvent.DROP_DOWN_OPENED = "dropDownOpened";
    /**
     * Event name for drop down list closed.
     * @memberof sap.viz.controls.common.views.FeedListEvent
     * @member DROP_DOWN_CLOSED
     * @static
     */
    FeedListEvent.DROP_DOWN_CLOSED = "dropDownClosed";
    /**
     * Event name for AnalysisObject item selected.
     * @memberof sap.viz.controls.common.views.FeedListEvent
     * @member ITEM_SELECTED
     * @static
     */
    FeedListEvent.ITEM_SELECTED = "itemSelected";

    return FeedListEvent;
});

define('sap/viz/controls/common/events/FeedEvent',[
// @formatter:off
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function(OOUtil, Event) {
	/**
     * The Feed event.
     * @class sap.viz.controls.common.events.FeedEvent
     */
    var FeedEvent = function(target, data) {
        FeedEvent.superclass.constructor.apply(this, arguments);

        this.__className = "sap.viz.controls.common.events.FeedEvent";
    };

    OOUtil.extend(FeedEvent, Event);

    /**
     * Event name for feeds ready.
     * @memberof sap.viz.controls.common.events.FeedEvent
     * @member FEED_READY
     * @static
     */
    FeedEvent.FEED_READY = "feedReady";
     /**
      * Event name for requesting feeds.
      * @memberof sap.viz.controls.common.events.FeedEvent
      * @member REQUEST_FEED
      * @static
      */
    FeedEvent.REQUEST_FEED = "requestFeed";
    /**
     * Event name for feeds changed.
     * @memberof sap.viz.controls.common.events.FeedEvent
     * @member FEEDS_CHANGED
     * @static
     */
    FeedEvent.FEEDS_CHANGED = "feedsChanged";

    return FeedEvent;
});

// @formatter:off
define('sap/viz/controls/runtime/Runtime',[
'sap/viz/controls/common/utils/OOUtil',
'sap/viz/controls/common/events/Event',
'sap/viz/controls/common/events/EventDispatcher'
],
function(OOUtil, Event, EventDispatcher) {
// @formatter:on
    var Runtime = function() {
        this._models = {};
        this._modelRefs = {};
    };

    OOUtil.extend(Runtime, EventDispatcher);
    
    /***
     * register model to runtime
     * @param {String} uid
     * @param {Object} model
     */
    Runtime.prototype.registerModel = function(uid, model) {
        this._models[uid] = model;
        this._modelRefs[uid] = 1;
    };
    /**
     * Add model reference.
     * @param {String} uid Uid of model
     */
    Runtime.prototype.addModelRef = function(uid){
        this._modelRefs[uid] ++;
    };
    /**
     * Remove model reference.
     * @param {String} uid Uid of model
     */
    Runtime.prototype.removeModelRef = function(uid){
        this._modelRefs[uid] --;
        if(this._modelRefs[uid] ===0){
            this._models[uid] = null;
        }
    };
    /***
     * get model by type
     * @param {String} type
     * @return {Object}
     */
    Runtime.prototype.getModel = function(uid) {
        return this._models[uid];
    };
    return Runtime;
});

// @formatter:off
define('sap/viz/controls/runtime/RuntimeManager',[
'sap/viz/controls/runtime/Runtime'
],
function(Runtime) {
// @formatter:on
    
    var RuntimeManager = {};

    /**
     * Get runtime instance
     * @return {Runtime}
     */
    RuntimeManager.getRuntime = function() {
        /* workaround to make runtime matain only one instance in global namesapce */
        var _runtime = window[ "__viz_controls_runtime" ];
        if(_runtime == null) {
            window[ "__viz_controls_runtime" ] = _runtime = new Runtime();
        }
        return _runtime;
    };
    return RuntimeManager;
});

// @formatter:off
define('sap/viz/controls/common/helpers/MapLayers',[
    'sap/viz/controls/common/utils/Utils'
],
function(Utils) {
// @formatter:on

    var MapLayers = {};

    MapLayers.toJSON = function(instance) {
        return Utils.toJSON(instance, function(instance) {
            return instance;
        });
    };

    MapLayers.fromJSON = function(json) {
        return Utils.fromJSON(json, function(json) {
            return json;
        });
    };

    return MapLayers;
});

// @formatter:off
define('sap/viz/controls/runtime/ModelHandler',[
 'sap/viz/controls/common/utils/ChartTypeUtil'
],
function(ChartTypeUtil) {
// @formatter:on

    var ModelHandler = function(vizModel) {
        this.__className = "sap.viz.controls.runtime.ModelHandler";
        this._vizModel = vizModel;
        this._isMNDVisibleChanged = false;
        this._feedingItemsChanged = false;
    };

    ModelHandler.prototype._type = function(value) {
        if (arguments.length > 0) {
            this._vizModel._type = value;
            return this;
        } else {
            return this._vizModel._type;
        }
    };
    
    ModelHandler.prototype._feedingItems = function(value) {
        if (arguments.length > 0) {
            this._vizModel._feedingItems = value;
            return this;
        } else {
            return this._vizModel._feedingItems;
        }
    };
    
    ModelHandler.prototype._filterItems = function(value) {
        if (arguments.length > 0) {
            this._vizModel._filterItems = value;
            return this;
        } else {
            return this._vizModel._filterItems;
        }
    };
    
    ModelHandler.prototype.explicitFeedingItems = function(options) {
        return this._vizModel.feedingItems();
    };
    
    ModelHandler.prototype.deactive = function(){
    };
    
    ModelHandler.prototype.postLoad = function(){
    };
    /**
     * get and set filter items
     * @param {[sap.viz.controls.common.FeedItem]} value
     * @return {[sap.viz.controls.common.FeedItem]}
     */
    ModelHandler.prototype.feedingItemsChanged = function(value, enableTrellis) {
    };

    /**
     * show or hide MND
     * @param {Boolean} value
     * @return {Boolean}
     */
    ModelHandler.prototype.isMNDVisibleChanged = function(value) {
    };
    
    ModelHandler.prototype._setIsMNDVisible = function(value) {
    };

    ModelHandler.prototype.vizModelChanged = function(options) {
    };

    ModelHandler.prototype._restorePlayerFieldHistory = function(newType) {
        // if this this._vizModel._playerFieldHistory has been updated , this sliceDimensionChanged will be true
    var sliceDimensionChanged = false;
        if(!ChartTypeUtil.supportAnimation(newType)) {
            var playerFieldHistory = this._vizModel.playerField() ? this._vizModel.playerField().clone() : null;
            sliceDimensionChanged = this.updatePlayerField(null);
            if(playerFieldHistory) {
                this._vizModel._playerFieldHistory = playerFieldHistory;
            }
        } else {
            if(!this._vizModel.playerField()) {
                sliceDimensionChanged = this.updatePlayerField(this._vizModel._playerFieldHistory);
            }
        }
    return sliceDimensionChanged;
    };
    /**
     * Update the vizType when properties (type, direction or stacking property) change or feeding
     * information(feedingItems, rowFeeding or columnFeeding) changed.
     * @private
     * @param {String} type
     * @param {Boolean} typeChanged
     */
    ModelHandler.prototype.propertiesChanged = function(type, typeChanged) {
    };
    
    ModelHandler.prototype.getFilterItems = function(selection, isExclude, vizData, feeding) {
    };
    
    ModelHandler.prototype.cloneFeeds = function(feeds){
        
    };
    /**
     * Get clone of chart model.
     * @returns {VizModel}
     */
    ModelHandler.prototype.clone = function(cloneModel) {
    };


    ModelHandler.prototype.updatePlayerField = function(value) {
        var sliceDimensionChanged = false;
    if (arguments.length > 0) {
            if (value) {
                if (!this._vizModel._playerField || !this._vizModel._playerField.equal(value)) {
                    this._vizModel._playerField = value;
                    sliceDimensionChanged = true;
                }                
            } else {
                if (this._vizModel._playerField) {
                    this._vizModel._playerFieldHistory = this._vizModel._playerField = null;
                    sliceDimensionChanged = true;
                }
            }
        }
        return sliceDimensionChanged;
    };
    
    ModelHandler.prototype._buildHistory = function (type, feedingItems) {
        return {
            'type': type,
            'feedingItems': feedingItems
        };
    };

    return ModelHandler;
});

// @formatter:off
define('sap/viz/controls/runtime/InfoModelHandler',[
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/events/EventDispatcher',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/feeds/AnalysisObject',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/feeds/HierarchyLevelObject',
    'sap/viz/controls/common/feeds/FeedItem',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/helpers/MapLayers',
    'sap/viz/controls/common/services/BVRService',
    'sap/viz/controls/common/filter/AbstractFilter',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/filter/FilterHelper',
    'sap/viz/controls/runtime/ModelHandler',
    'sap/viz/controls/common/bindingdef/BindingDefUtils',
    'sap/viz/controls/common/services/FeedValidationService'
],
function($, OOUtil, utils, Event, EventDispatcher, ChartConst, AnalysisObject, AnalyticalType,
    HierarchyLevelObject, FeedItem, FeedUtils, MapLayers, BVRService, AbstractFilter, ChartTypeUtil, FilterHelper, ModelHandler, BindingDefUtils, FeedValidationService) {
// @formatter:on

    var InfoModelHandler = function(vizModel) {
        InfoModelHandler.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.runtime.InfoModelHandler";
    };

    OOUtil.extend(InfoModelHandler, ModelHandler);

    InfoModelHandler.prototype.explicitFeedingItems = function(options) {
        options = options || {};
        var feeds = this._feedingItems();
        var type = this._type();
        if (!ChartTypeUtil.isMultipleChart(type)) {
            feeds = FeedUtils.removeRowAndColumnFeedItems(feeds);
        }
        var withMND = options.withMND != null ? options.withMND === true : this._vizModel.isMNDVisible();
        if (!withMND) {
            feeds = FeedUtils.removeMND(feeds);
        }
        var emptyFeeds = FeedUtils.buildEmptyFeeds(type);
        feeds = FeedUtils.merge(emptyFeeds, feeds);
        return feeds;
    };

    InfoModelHandler.prototype.deactive = function(oldType) {
        if (!this._vizModel._history) {
            this._vizModel._history = this._buildHistory(oldType, FeedUtils.cloneFeeds(this._feedingItems()));
        }
        var playerField = this._vizModel.playerField();
        if (playerField) {
            this._vizModel._playerFieldHistory = playerField.clone();
        }
    };

    InfoModelHandler.prototype.postLoad = function() {
        var feedingItems = this._feedingItems();
        this._vizModel._history = this._buildHistory(this._type(), FeedUtils.cloneFeeds(feedingItems));
        var type = this._type();
        var isMNDVisible = FeedUtils.hasMND(feedingItems);
        this._vizModel._isMNDVisible = isMNDVisible;
    };

    /**
     * Generic change handler.
     *
     * @param options An object will include: type, feedingItems, filterItems, playerField
     */
    InfoModelHandler.prototype.vizModelChanged = function(options) {
        var changing = {};
        if (options.type !== undefined) {
            $.extend(changing, {
                'type' : {
                    'from' : this._type(),
                    'to' : options.type
                }
            });
        }
        if (options.feedingItems !== null) {
            $.extend(changing, {
                'feedingItems' : {
                    'from' : this._feedingItems(),
                    'to' : options.feedingItems
                }
            });
        }
        if (options.filterItems !== undefined) {
            $.extend(changing, {
                'filterItems' : {
                    'to' : options.filterItems
                }
            });
        }
        if (options.playerField !== undefined) {
            $.extend(changing, {
                'playerField' : {
                    'to' : options.playerField
                }
            });
        }
        this._sync(changing);
    };

    /**
     * Will be invoked from VizModel.prototype.type
     */
    InfoModelHandler.prototype.propertiesChanged = function(type, typeChanged) {
        this._sync({
            'type' : {
                'from' : type,
                'to' : this._type()
            }
        });
    };

    /**
     * Will be invoked from VizModel.prototype.feedingItems
     */
    InfoModelHandler.prototype.feedingItemsChanged = function(feeds, enableTrellis) {
        // Remove multiplier when disable trellis
        var extensionValues = this._vizModel.extensionValues();
        enableTrellis = extensionValues.feedingPanel ? extensionValues.feedingPanel.enableTrellis : enableTrellis;
        if (enableTrellis === false) {
            feeds = FeedUtils.removeRowAndColumnFeedItems(feeds);
        }
        // Check changed or not
        this._sync({
            'feedingItems' : {
                'from' : this._feedingItems(),
                'to' : feeds
            }
        });
    };
    /**
     * Will be invoked from VizModel.prototype.isMNDVisible
     */
    InfoModelHandler.prototype.isMNDVisibleChanged = function() {
        this._sync({
            'isMNDVisible' : {
                'from' : !this._vizModel._isMNDVisible,
                'to' : this._vizModel._isMNDVisible
            }
        });
    };

    InfoModelHandler.prototype.getFilterItems = function(selection, isExclude, vizData, feeding) {
        return FilterHelper.getInfoFilterItems(selection, isExclude, this._filterItems(), this._feedingItems());
    };

    /**
     * Get clone of chart model.
     * @returns {VizModel}
     */
    InfoModelHandler.prototype.clone = function(cloneModel) {
        var result = cloneModel;
        result._type = this._type();
        var feedingItems = this._feedingItems();
        if (feedingItems && feedingItems.length > 0) {
            for (var i = 0; i < feedingItems.length; i++) {
                result._feedingItems[i] = feedingItems[i].clone();
            }
        }
        var filterItems = this._filterItems();
        if (filterItems && filterItems.length > 0) {
            for (var j = 0; j < filterItems.length; j++) {
                result._filterItems[j] = filterItems[j].clone();
            }
        }
        return result;
    };

    /**
     * Sync related props
     * Dispatch changed events
     *
     * Sync strategy:
     *      type > feedingItems
     *      feedingItems > isMNDVisible
     *      type + feedingItems > isMNDVisible
     *      isMNDVisible > feedingItems
     *  > type(single/multi)
     */
    InfoModelHandler.prototype._sync = function(changing) {
        var model = this._vizModel;
        // Make sure feeds changed
        if (changing.feedingItems && FeedUtils.equal(changing.feedingItems.from, changing.feedingItems.to)) {
            delete changing.feedingItems;
        }
        // Sync model
        var sync = {
            'type' : undefined,
            'feedingItems' : undefined,
            'isMNDVisible' : undefined
        };
        if (changing.type && !changing.feedingItems) {
            // Reset history
            model._history = model._history || this._buildHistory(changing.type.from, FeedUtils.cloneFeeds(model._feedingItems));
            changing.type.to = _adaptTypeByTrellisAndMND(changing.type.to, model._history.feedingItems, model._isMNDVisible);
            // Sync feeds by BVR
            if (changing.type.from !== changing.type.to) {
                sync.type = changing.type.to;
                sync.feedingItems = BVRService.switchFeeds(changing.type.to, model._history.type, model._history.feedingItems).feeds;
            }
        } else if (changing.feedingItems) {
            // Clear history
            model._history = model._playerFieldHistory = null;
            // Sync isMNDVisible
            if (!FeedValidationService.validateMND(changing.type ? changing.type.to : model._type, changing.feedingItems.to)) {
                // Remove mnd if non mnd enumerable measures
                sync.feedingItems = FeedUtils.removeMND(changing.feedingItems.to);
                sync.isMNDVisible = false;
            } else {
                sync.isMNDVisible = FeedUtils.hasMND(changing.feedingItems.to);
            }
        } else if (changing.isMNDVisible) {
            // Clear history
            model._history = model._playerFieldHistory = null;
            // Sync feeds by mnd
            sync.type = _adaptTypeByTrellisAndMND(model._type, model._feedingItems, changing.isMNDVisible.to);
            if (changing.isMNDVisible.to) {
                sync.feedingItems = _feedMND(sync.type, model._feedingItems).feeds;
            } else {
                sync.feedingItems = FeedUtils.removeMND(model._feedingItems);
            }
        }
        // Sync result
        sync.type = _choose(sync.type, changing.type, model._type);
        sync.feedingItems = _choose(sync.feedingItems, changing.feedingItems, model._feedingItems);
        sync.isMNDVisible = _choose(sync.isMNDVisible, changing.isMNDVisible, model._isMNDVisible);

        if (FeedUtils.hasRowOrColumn(sync.feedingItems)) {
            sync.type = ChartTypeUtil.toMultiChartType(sync.type);
        } else {
            sync.type = ChartTypeUtil.toSingleChartType(sync.type);
        }
        // Post sync
        var exsiting = {
            'type' : changing.type ? changing.type.from : model._type,
            'feedingItems' : changing.feedingItems ? changing.feedingItems.from : model._feedingItems,
            'isMNDVisible' : changing.isMNDVisible ? changing.isMNDVisible.from : model._isMNDVisible
        };
        // @formatter:off
        var args = {
            'vizTypeChanged' : sync.type !== exsiting.type,
            'feedingItemsChanged' : (FeedUtils.isEmptyFeeds(sync.feedingItems) && FeedUtils.isEmptyFeeds(exsiting.feedingItems)) ? false : 
                (!BindingDefUtils.equal(sync.type, exsiting.type) || !FeedUtils.equal(sync.feedingItems, exsiting.feedingItems)),
            'isMNDVisibleChanged' : sync.isMNDVisible !== exsiting.isMNDVisible,
            'filterChanged' : false,
            'sliceDimensionChanged' : false
        };
        // @formatter:on
        if (changing.filterItems) {
            model._filterItems = changing.filterItems;
            args.filterChanged = true;
        }
        if (changing.playerField) {
            args.sliceDimensionChanged = this.updatePlayerField(changing.playerField.to);
        } else if (args.vizTypeChanged) {
            args.sliceDimensionChanged = this._restorePlayerFieldHistory(sync.type) === true;
        }
        // Write to model
        model._type = sync.type;
        model._feedingItems = sync.feedingItems;
        model._isMNDVisible = sync.isMNDVisible;
        // Dispatch event
        model.dispatchPropertiesChangedEvent(args);
    };

    var _choose = function(synced, changing, origin) {
        if (synced !== undefined) {
            return synced;
        } else if (changing !== undefined) {
            return changing.to;
        } else {
            return origin;
        }
    };

    var _adaptTypeByTrellis = function(type, feeds) {
        if (ChartTypeUtil.supportMultiChart(type)) {
            if (FeedUtils.hasRowOrColumn(feeds)) {
                return ChartTypeUtil.toMultiChartType(type);
            } else {
                return ChartTypeUtil.toSingleChartType(type);
            }
        } else {
            return type;
        }
    };
    /**
     * Adapt to multi when single type could not hold MND, and multi type could hold MND like 'viz/pie'
     * @param {Object} type
     */
    var _adaptTypeByMND = function(type) {
        if (ChartTypeUtil.supportMultiChart(type)) {
            var multi = ChartTypeUtil.toMultiChartType(type);
            if (type !== multi && !BindingDefUtils.supportMND(type) && BindingDefUtils.supportMND(multi)) {
                return multi;
            } else {
                return type;
            }
        } else {
            return type;
        }
    };

    var _adaptTypeByTrellisAndMND = function(type, feeds, isMNDVisible) {
        var newType = _adaptTypeByTrellis(type, feeds);
        if (isMNDVisible) {
            newType = _adaptTypeByMND(newType);
        }
        return newType;
    };

    var _feedMND = function(type, feeds, forceMND) {
        if (FeedUtils.isEmptyFeeds(feeds)) {
            return {
                'vizType' : type,
                'feeds' : feeds
            };
        } else {
            return {
                'vizType' : type,
                'feeds' : BVRService.suggestMND(type, feeds)
            };
        }
    };
    return InfoModelHandler;
});

// @formatter:off
define('sap/viz/controls/runtime/MapModelHandler',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/events/EventDispatcher',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/feeds/AnalysisObject',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/feeds/HierarchyLevelObject',
    'sap/viz/controls/common/feeds/FeedItem',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/helpers/MapLayers',
    'sap/viz/controls/common/services/BVRService',
    'sap/viz/controls/common/filter/AbstractFilter',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/filter/FilterHelper',
    'sap/viz/controls/runtime/ModelHandler'
],
function(OOUtil, utils, Event, EventDispatcher, ChartConst, AnalysisObject, AnalyticalType,
    HierarchyLevelObject, FeedItem, FeedUtils, MapLayers, BVRService, AbstractFilter, ChartTypeUtil, FilterHelper, ModelHandler) {
// @formatter:on

    var MapModelHandler = function(vizModel) {
        MapModelHandler.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.runtime.MapModelHandler";
    };
    
    OOUtil.extend(MapModelHandler, ModelHandler);
    /**
     * feedingItemsChanged 
     * @param {[sap.viz.controls.common.FeedItem]} value
     * @param {boolean} notify or not
     */
    MapModelHandler.prototype.feedingItemsChanged = function(value, notify) {
      
        if(notify !== false){
           var changes = [];
           var feedingItems = this._feedingItems();
           for(var i=0; i<value.length; i++){
              if(feedingItems[i] !== value[i] ){
                  if(feedingItems[i] && value[i] && FeedUtils.equal(feedingItems[i], value[i])){
                      continue;
                  } else {
                      changes.push(i);
                  }
              }
           }
           this._feedingItems(value);
           if (changes.length > 0) {
              this._vizModel._history = null;
              this._vizModel._playerFieldHistory = null;
              var args = {
                  'feedingItemsChanged' : true,
                  feedsChangedInfo : {
                      items : changes
                  }
              };
              this._feedingItemsChanged = false;
              this._vizModel.dispatchPropertiesChangedEvent(args);
           }
        }else{
          this._feedingItems(value);
        }
        
    };

    /**
     * show or hide MND
     * @param {Boolean} value
     * @return {Boolean}
     */
    MapModelHandler.prototype.isMNDVisibleChanged = function(value) {
        this._vizModel._history = null;
    };
    
    MapModelHandler.prototype._setIsMNDVisible = function(value) {
        if (this._vizModel.isMNDVisible() !== value) {
            this._vizModel._isMNDVisible = value;
            this._isMNDVisibleChanged = true;
        }
    };

    /**
     * Update the vizModel when properties (type, direction or stacking property) change, feeding
     * information(feedingItems, rowFeeding or columnFeeding) changed, or filter information changed.
     * @param {Object} options {
     *                              type: String,
     *                              feedingItems: [FeedingItem],
     *                              filterItems : [FilterItem]
     *                          }
     * @public
     */
    MapModelHandler.prototype.vizModelChanged = function(options) {
        var feedsChanged = false;
        var sliceDimensionChanged = false;
        var oldType = this._type();
        if (options.type) {
            this._type(options.type);
        }
        var newType = this._type();
        
        if (newType !== oldType) {
            sliceDimensionChanged = this._restorePlayerFieldHistory(newType);
        } else if (options && (options.playerField !== undefined)) {
            sliceDimensionChanged = this.updatePlayerField(options.playerField);
        }

        

        // Option: feedingItems
        if (options.feedingItems) {
            var feedingItems = this._feedingItems();
            if(feedingItems.length != options.feedingItems.length){
                feedsChanged = true;
            } else {
                for(var i=0; i<feedingItems.length; i++){
                    if( !FeedUtils.equal(feedingItems[i], options.feedingItems[i]) ){
                        feedsChanged = true;
                        break;
                    }
                }
            }

            if (feedsChanged) {
                this._vizModel._history = null;
                this._feedingItems(options.feedingItems);
                this._vizModel.extensionValues({
                  map:{
                    feeding: options.feedingItems
                  }
                });
            }
        }

        var filterChanged = false;
        if (options.filterItems) {
            this._filterItems(options.filterItems);
            filterChanged = true;
        }
        
        var args = {
            'vizTypeChanged' : oldType !== newType,
            'feedingItemsChanged' : this._feedingItemsChanged || feedsChanged,
            'filterChanged' : filterChanged
        };

        if (sliceDimensionChanged === true) {
            args.sliceDimensionChanged = true;
        }

        this._type(newType);
        // Reset this flag
        this._feedingItemsChanged = false;

        this._vizModel.dispatchPropertiesChangedEvent(args);
    };

    /**
     * Update the vizType when properties (type, direction or stacking property) change or feeding
     * information(feedingItems, rowFeeding or columnFeeding) changed.
     * @private
     * @param {String} type
     * @param {Boolean} typeChanged
     */
    MapModelHandler.prototype.propertiesChanged = function(type, typeChanged) {
        var vizModelType = this._type();
        if (!vizModelType) {
            return;
        }
        var newType = vizModelType;
        var args = {
            'vizTypeChanged' : typeChanged || (vizModelType !== type)
        };
        
        this._type(newType);

        // Reset this flag
        this._feedingItemsChanged = false;
        this._isMNDVisibleChanged = false;

        if(args.vizTypeChanged)
        {
            // when the _playerField is updated then the sliceDimensionChanged will be true 
                var sliceDimensionChanged = this._restorePlayerFieldHistory(newType);
            if (sliceDimensionChanged === true){
                args.sliceDimensionChanged = true;
            }
               
        }
        this._vizModel.dispatchPropertiesChangedEvent(args);
    };

    MapModelHandler.prototype.getFilterItems = function(selection, isExclude, vizData, feeding) {
        return FilterHelper.getMapFilterItems(selection, isExclude, this._filterItems(), this._feedingItems());
    };

    /**
     * Get clone of chart model.
     * @returns {VizModel}
     */
    MapModelHandler.prototype.clone = function(cloneModel) {
        var result = cloneModel;
        result._type = this._type();
        var feedingItems = this._feedingItems();
        if (feedingItems && feedingItems.length > 0) {
            for (var i = 0; i < feedingItems.length; i++) {
                result._feedingItems[i] = [];
                for(var n=0; n<feedingItems[i].length; n++){
                    result._feedingItems[i][n] = feedingItems[i][n].clone();
                }
            }
        }
        var filterItems = this._filterItems();
        if (filterItems && filterItems.length > 0) {
            for (var j = 0; j < filterItems.length; j++) {
                result._filterItems[j] = filterItems[j].clone();
            }
        }
        return result;
    };

    return MapModelHandler;
});

// @formatter:off
define('sap/viz/controls/runtime/VizModelHandler',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/events/EventDispatcher',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/feeds/AnalysisObject',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/feeds/HierarchyLevelObject',
    'sap/viz/controls/common/feeds/FeedItem',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/helpers/MapLayers',
    'sap/viz/controls/common/services/BVRService',
    'sap/viz/controls/common/services/FeedValidationService',
    'sap/viz/controls/common/filter/AbstractFilter',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/filter/FilterHelper',
    'sap/viz/controls/runtime/ModelHandler',
    'sap/viz/controls/common/bindingdef/BindingDefUtils'
],
function(OOUtil, utils, Event, EventDispatcher, ChartConst, AnalysisObject, AnalyticalType,
    HierarchyLevelObject, FeedItem, FeedUtils, MapLayers, BVRService, FeedValidationService, AbstractFilter, ChartTypeUtil, FilterHelper, ModelHandler, BindingDefUtils) {
// @formatter:on

    var VizModelHandler = function(vizModel) {
        VizModelHandler.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.runtime.VizModelHandler";
    };

    OOUtil.extend(VizModelHandler, ModelHandler);

    VizModelHandler.prototype.explicitFeedingItems = function(options) {
        options = options||{};
        var feeds = this._feedingItems();
        var type = this._type();
        if (!ChartTypeUtil.isMultipleChart( type )) {
            feeds = FeedUtils.removeRowAndColumnFeedItems(feeds);
        }
      var  withMND = options.withMND !=null ?  options.withMND===true : this._vizModel.isMNDVisible();
        if (!withMND) {
            feeds = FeedUtils.removeMND(feeds);
        }
        var emptyFeeds = FeedUtils.buildEmptyFeeds(type);
        feeds = FeedUtils.merge(emptyFeeds, feeds);
        return feeds;
    };

    VizModelHandler.prototype.deactive = function(oldType){
        if(!this._vizModel._history)
        {
            this._vizModel._history = this._buildHistory(oldType, FeedUtils.cloneFeeds(this._feedingItems()));
        }
        var playerField = this._vizModel.playerField();
        if(playerField)
        {
            this._vizModel._playerFieldHistory = playerField.clone();
        }
    };

    VizModelHandler.prototype.postLoad = function(){
        var feedingItems = this._feedingItems();
        this._vizModel._history = this._buildHistory(this._type(), FeedUtils.cloneFeeds(feedingItems));
        this._vizModel._playerFieldHistory = this._vizModel.playerField() ? this._vizModel.playerField().clone() : null;
        var type = this._type();
        var isMNDVisible = FeedUtils.hasMND(feedingItems);
        this._vizModel._isMNDVisible = isMNDVisible;
        if(!isMNDVisible){
            var feedMND = _feedMND(type, feedingItems, isMNDVisible);
            this._feedingItems(feedMND.feeds);
        }
    };
    /**
     * get and set filter items
     * @param {[sap.viz.controls.common.FeedItem]} value
     * @return {[sap.viz.controls.common.FeedItem]}
     */
    VizModelHandler.prototype.feedingItemsChanged = function(value, enableTrellis) {
        // Remove multiplier when disable trellis
        var extensionValues = this._vizModel.extensionValues();
        enableTrellis = extensionValues.feedingPanel ? extensionValues.feedingPanel.enableTrellis : enableTrellis;
        if (enableTrellis === false) {
            value = FeedUtils.removeRowAndColumnFeedItems(value);
        }
        // Update MND flag
        this._setIsMNDVisible(FeedUtils.hasMND(value));
        //
        this._feedingItemsChanged = !FeedUtils.equal(value, this._feedingItems());
        if (this._feedingItemsChanged) {
            this._feedingItems( value || [] );
            this._vizModel._history = null;
            var haveRowColum = FeedUtils.hasRowOrColumn(this._feedingItems());
            var currentType = this._type();
            var newType;
            if (haveRowColum && !ChartTypeUtil.isMultipleChart(currentType)) {
                //single to multi type changed by adding row and column
                newType = ChartTypeUtil.toMultiChartType(currentType);
                this._vizModel.type(newType);
            } else if (!haveRowColum && ChartTypeUtil.isMultipleChart(currentType)) {
                //multi to single type changed by feeding with row and column
                newType = ChartTypeUtil.toSingleChartType(currentType);
                this._vizModel.type(newType);
            } else {
                //feeding items Changed
                this.propertiesChanged(currentType, false);
            }
            // feedingItemsHistory will be rewrite in _propertiesChanged, so we should clear it again
            this._vizModel._history = null;
            this._vizModel._playerFieldHistory = null;
        }
    };

    /**
     * show or hide MND
     * @param {Boolean} value
     * @return {Boolean}
     */
    VizModelHandler.prototype.isMNDVisibleChanged = function(value) {
            this._isMNDVisibleChanged = true;
            this._vizModel._history = null;
            this._vizModel._playerFieldHistory = null;
            this.propertiesChanged(this._type(), false);
            this._vizModel._history = null;
            this._vizModel._playerFieldHistory = null;
    };

    VizModelHandler.prototype._setIsMNDVisible = function(value) {
        var curValue = (value === true);
        if (this._vizModel.isMNDVisible() !== curValue) {
            this._vizModel._isMNDVisible = curValue;
            this._isMNDVisibleChanged = true;
        }
    };

    /**
     * Update the vizModel when properties (type, direction or stacking property) change, feeding
     * information(feedingItems, rowFeeding or columnFeeding) changed, or filter information changed,
     * or playerField changed.
     * @param {Object} options {
     *                              type: String,
     *                              feedingItems: [FeedingItem],
     *                              filterItems : [FilterItem],
     *                              playerField :  PlayerField
     *                          }
     * @public
     */
    VizModelHandler.prototype.vizModelChanged = function(options) {
        var feedsChanged = false;
        var sliceDimensionChanged = false;
        // BVR
        if (!this._vizModel._history) {
            this._vizModel._history = this._buildHistory(this._type(), FeedUtils.cloneFeeds(this._feedingItems()));
        }
        var isMNDVisible = this._vizModel.isMNDVisible();
        // Option: type
        var oldType = this._type();
        if (options.type) {
            this._type(options.type);
        }
        var newType = this._type();

        // now the workflows doesn't contain change the chart type and playerField value at the same time.
        // this can work, if the workflow changes, this may be modified
        if (newType !== oldType) {
            sliceDimensionChanged = this._restorePlayerFieldHistory(newType);
        } else if (options && (options.playerField !== undefined)) {
            sliceDimensionChanged = this.updatePlayerField(options.playerField);
        }

        var feedMND;
        // Option: feedingItems
        if (options.feedingItems) {
            if(BindingDefUtils.supportMND(newType)){
                isMNDVisible = FeedUtils.hasMND(options.feedingItems);
                this._setIsMNDVisible(isMNDVisible);
            }
            if (FeedUtils.match(newType, options.feedingItems, false)) {
                feedMND = _feedMND(newType, options.feedingItems, isMNDVisible);
                newType = feedMND.vizType;
                options.feedingItems = feedMND.feeds;
            }

           
            feedsChanged = !FeedUtils.equal(this._feedingItems(), options.feedingItems, {ignoreActions:true});
            if (feedsChanged) {
                // If history need to be updated, the feedingItems must be changed, feedingItems also need to be updated
                this._vizModel._history = this._buildHistory(newType, FeedUtils.cloneFeeds(options.feedingItems));
                this._feedingItems(options.feedingItems);
            } else {
                feedsChanged = !FeedUtils.equal(this._feedingItems(), options.feedingItems);
                if (feedsChanged) {
                    this._feedingItems(options.feedingItems);
                }
            }
        }
        var currentFeeds = this._vizModel._history.feedingItems;
        // BVR: Change type for trellis and mnd
        isMNDVisible = this._vizModel.isMNDVisible();
        newType = adaptTypeByTrellisAndMND(newType, currentFeeds, isMNDVisible);

        // If feedsChanged already set to true, don't need to call BVRService
        if (!feedsChanged) {
            var newFeeds;
            // TODO Upgrade BVRService for geo charts
            // Don't switchFeeds if type is not changed.
            if (newType !== oldType) {
                newFeeds = BVRService.switchFeeds(newType, oldType, currentFeeds).feeds;
                feedMND = _feedMND(newType, newFeeds, isMNDVisible);
                newType = feedMND.vizType;
                newFeeds = feedMND.feeds;
            }
            if (newFeeds) {
                this._feedingItems(newFeeds);


                // Update model
                if (FeedUtils.isEmptyFeeds(this._feedingItems()) && FeedUtils.isEmptyFeeds(newFeeds)) {
                    feedsChanged = false;
                } else {
                    // if feed definition changed or feeds changed, feedsChanged = true
                    feedsChanged = !BindingDefUtils.equal(oldType, newType) || !FeedUtils.equal(this._feedingItems(), newFeeds);
                }
            }
        }

        var filterChanged = false;
        if (options.filterItems) {
            this._filterItems( options.filterItems );
            filterChanged = true;
        }

        var args = {
            'vizTypeChanged' : oldType !== newType,
            'feedingItemsChanged' : this._feedingItemsChanged || feedsChanged,
            'filterChanged' : filterChanged
        };

        if (sliceDimensionChanged === true) {
            args.sliceDimensionChanged = true;
        }

        this._type( newType );
        // Reset this flag
        this._feedingItemsChanged = false;

        this._vizModel.dispatchPropertiesChangedEvent(args);
    };

    /**
     * Update the vizType when properties (type, direction or stacking property) change or feeding
     * information(feedingItems, rowFeeding or columnFeeding) changed.
     * @private
     * @param {String} type
     * @param {Boolean} typeChanged
     */
    VizModelHandler.prototype.propertiesChanged = function(type, typeChanged) {
        var vizModelType = this._type();
        if (!vizModelType) {
            return;
        }
        // BVR
        var feedingItems = this._feedingItems();
        if (!this._vizModel._history) {
            this._vizModel._history = this._buildHistory(typeChanged ? type : this._type(), FeedUtils.cloneFeeds(feedingItems));
        }
        if(type !== "viz/number"){
            this._saveSubtotals(this._vizModel._history, this._vizModel);
        }
        var newType = vizModelType;
        var currentType = type;
        var currentFeeds = this._vizModel._history.feedingItems;
        // BVR: Change new type for trillis and mnd
        var isMNDVisible = this._vizModel.isMNDVisible();
        newType = adaptTypeByTrellisAndMND(newType, currentFeeds, isMNDVisible);

        var feedMND;
        if (FeedUtils.match(newType, currentFeeds, false)) {
            feedMND = _feedMND(newType, currentFeeds, isMNDVisible);
            newType = feedMND.vizType;
            currentFeeds = feedMND.feeds;
        }

        var newFeeds = BVRService.switchFeeds(newType, this._vizModel._history.type, currentFeeds).feeds;
        feedMND = _feedMND(newType, newFeeds, isMNDVisible);
        newType = feedMND.vizType;
        newFeeds = feedMND.feeds;
        // Update model
        var feedsChanged = true;
        if (FeedUtils.isEmptyFeeds(feedingItems) && FeedUtils.isEmptyFeeds(newFeeds)) {
            feedsChanged = false;
        } else {
            // if feed definition changed or feeds changed, feedsChanged = true
            feedsChanged = !BindingDefUtils.equal(currentType, newType) || !FeedUtils.equal(feedingItems, newFeeds);
        }
        var args = {
            'vizTypeChanged' : typeChanged || (currentType !== newType),
            'feedingItemsChanged' : this._feedingItemsChanged || feedsChanged,
            'isMNDVisibleChanged' : this._isMNDVisibleChanged
        };

        this._type(newType);
        this._feedingItems( newFeeds );
        // Reset this flag
        this._feedingItemsChanged = false;
        this._isMNDVisibleChanged = false;

        if(args.vizTypeChanged)
        {
        // when the _playerField is updated then the sliceDimensionChanged will be true 
            var sliceDimensionChanged = this._restorePlayerFieldHistory(newType);
        if (sliceDimensionChanged === true){
            args.sliceDimensionChanged = true;
        }
           
        }
        this._vizModel.dispatchPropertiesChangedEvent(args);
    };

    VizModelHandler.prototype._saveSubtotals = function(feedingItems, vizModel) {
        var listOfAddedSubtotals = [];
        var hasDimensions = false;
        var hasAddedValues = false;
        var i;
        for(i = 0; i < feedingItems.length; i++){

            if(feedingItems[i].type() === "calculation") {
                vizModel.savedSubtotals(feedingItems[i]);
                break;
            }
        }

        for(i = 0; i < feedingItems.length; i++){

            if (vizModel.savedSubtotals() !== null && feedingItems[i].type() === "Dimension"){
                hasDimensions = true;
                for (var v = 0; v < feedingItems[i].values().length; v++){
                    for (var sub = 0; sub < vizModel.savedSubtotals().values().length; sub++){
                        if (feedingItems[i].values()[v].id() === vizModel.savedSubtotals().values()[sub].aggregationTarget()){
                            listOfAddedSubtotals.push(vizModel.savedSubtotals().values()[sub]);
                            hasAddedValues = true;
                        }
                    }
                }
            }
        }
        if ((hasDimensions === false || hasAddedValues === false) && vizModel.savedSubtotals() !== null) {
            vizModel.savedSubtotals().values([]);
        }
        if(vizModel.savedSubtotals() !== null && listOfAddedSubtotals[0]){
            vizModel.savedSubtotals().values(listOfAddedSubtotals);

            var hasSubtotals = false;
            for(i=0; i < vizModel._history.feedingItems.length; i++){
                if (vizModel._history.feedingItems[i].type() === "calculation"){
                     var tempFeedingItemHistory = vizModel.savedSubtotals();
                        vizModel._history.feedingItems[i] =  tempFeedingItemHistory;
                        hasSubtotals = true;
                }
            }
            if (hasSubtotals === false){
                vizModel._history.feedingItems.push(vizModel.savedSubtotals());
            }
        }

    };

    VizModelHandler.prototype.getFilterItems = function(selection, isExclude, vizData, feeding) {
        return FilterHelper.getFilterItems(selection, isExclude, this._filterItems(), this._feedingItems(), vizData, feeding);
    };

    /**
     * Get clone of chart model.
     * @returns {VizModel}
     */
    VizModelHandler.prototype.clone = function(cloneModel) {
        var result = cloneModel;
        result._type = this._type();
        var feedingItems = this._feedingItems();
        if (feedingItems && feedingItems.length > 0) {
            for (var i = 0; i < feedingItems.length; i++) {
                result._feedingItems[i] = feedingItems[i].clone();
            }
        }
        var filterItems = this._filterItems();
        if (filterItems && filterItems.length > 0) {
            for (var j = 0; j < filterItems.length; j++) {
                result._filterItems[j] = filterItems[j].clone();
            }
        }
        return result;
    };

    function adaptTypeByTrellis (type, feeds) {
        var CT = ChartTypeUtil;

        if (CT.supportMultiChart(type)) {
            if (FeedUtils.hasRowOrColumn(feeds)) {
                return CT.toMultiChartType(type);
            } else {
                return CT.toSingleChartType(type);
            }
        } else {
            return type;
        }
    }
    /**
     * Adapt to multi when single type could not hold MND, and multi type could hold MND like 'viz/pie'
     * @param {Object} type
     */
    function adaptTypeByMND (type) {
        var CT = ChartTypeUtil;

        if (CT.supportMultiChart(type)) {
            var multi = CT.toMultiChartType(type);
            if (type !== multi && !BindingDefUtils.supportMND(type) && BindingDefUtils.supportMND(multi)) {
                return multi;
            } else {
                return type;
            }
        } else {
            return type;
        }
    }
    /**
     * Adapt to multi and mnd, when single type could not hold MND, and multi type could hold MND like 'viz/pie'
     * @param {Object} type
     */
    function adaptTypeByTrellisAndMND (type, feeds, isMNDVisible) {
        var newType = adaptTypeByTrellis(type, feeds);
        if ( isMNDVisible ) {
            newType = adaptTypeByMND(newType);
        }
        return newType;
    }

    function _feedMND (type, feeds, forceMND) {
        if (forceMND) {
            type = adaptTypeByMND(type);
            if (!FeedUtils.hasMND(feeds)) {
                feeds = BVRService.suggestMND(type, feeds);
            }
        } else {
            feeds = FeedUtils.removeMND(feeds);
            // Adapt to single when trellis is empty
            type = adaptTypeByTrellis(type, feeds);
            // Try to add MND when min are not meet
            if (!FeedUtils.isEmptyFeeds(feeds)) {
                if (!FeedValidationService.validateDimensionMin(type, feeds)) {
                    feeds = BVRService.suggestMND(type, feeds);
                }
            }
        }
        if (FeedUtils.countAnalyses(feeds, AnalyticalType.MEASURE) === 0) {
            feeds = FeedUtils.removeMND(feeds);
        }
        type = adaptTypeByTrellis(type, feeds);
        return {
            'vizType' : type,
            'feeds' : feeds
        };
    }

    return VizModelHandler;
});

// @formatter:off
define('sap/viz/controls/runtime/VizModel',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/events/EventDispatcher',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/services/BVRService',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/runtime/InfoModelHandler',
    'sap/viz/controls/runtime/MapModelHandler',
    'sap/viz/controls/runtime/VizModelHandler'
],
function(OOUtil, utils, Event, EventDispatcher, ChartConst, BVRService, ChartTypeUtil,
    InfoModelHandler, MapModelHandler, VizModelHandler) {
// @formatter:on

    /**
     * The VizModel class represents the data model used by Viz Controls and maintains the correct status. It
     * determines
     * the viz type based on properties (type, direction and stacking) and feeding information(feedingItems, rowFeeding
     * and
     * columnFeeding). Each Viz Control may listen to its "propertiesChangedEvent" event and do related stuff.(i.e.
     * update ui)
     *
     * <pre>
     * <b>Properties:</b>
     * type - general chart type, which may includes several concerate viz types. For example, the column chart inlcudes
     * "viz/column", "viz/bar", "viz/multi_column" and "viz/multi_bar".
     * direction - "horizontal"/"vertical"
     * stacking - "normal"/"full"
     *
     * feedingItems
     *
     * filters
     *
     * <b>functions:</b>
     * save()
     * load(valueJson)
     *
     * <b>Events:</b>
     * type: "propertiesChangedEvent"
     * handler:function({
     *      type:"propertiesChangedEvent",
     *      data:{
     *              vizTypeChanged : true/false,
     *              feedingItemsChanged : true/false
     *      }
     * })
     * </pre>
     *
     */
    var VizModel = function() {
        VizModel.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.runtime.VizModel";
        this._type = null;
        this._isMNDVisible = false; //use silence mnd by default

        this._feedingItems = [];
        this._history = null;
        this._savedSubtotals = null;
        this._filterItems = [];
        this._playerFieldHistory = null;
        this._playerField = null;
        this._extensionValues = {};
        this._handler = this._vizModelHandler = new VizModelHandler(this);
    };

    OOUtil.extend(VizModel, EventDispatcher);

    VizModel.PropertiesChangedEvent = 'propertiesChangedEvent';
    VizModel.VizModelResetEvent = 'vizModelResetEvent';
    
    VizModel.prototype._updateHandler = function(type, oldType){
        var newHandler = this._vizModelHandler;
        if(ChartConst.TYPE_GEO_MAP === type){
            if( !this._mapModelHandler ){
                this._mapModelHandler = new MapModelHandler(this);
            }
            newHandler = this._mapModelHandler;
        } else if(ChartTypeUtil.isInfoChart(type)){
            if( !this._infoModelHandler ){
                this._infoModelHandler = new InfoModelHandler(this);
            }
            newHandler = this._infoModelHandler;
        }
        if(newHandler !== this._handler){
            this._handler.deactive(oldType);
            //clear feedingItems when type is switched from/to geomap
            if(newHandler === this._mapModelHandler || this._handler === this._mapModelHandler) {
                this._feedingItems = [];
            }
            this._handler = newHandler;
        }
    };
    
    VizModel.prototype.load = function(options){
        if(!options){
            return;
        }
        this.reset();
        var typeChanged = false;
        var feedingItemsChanged = false;
        var isMNDVisibleChanged = false;

        if(options.type && options.type!==this._type){
            var currentType = this._type;
            this._type = options.type;
            this._updateHandler(this._type, currentType);
            typeChanged = true;
        }
        if(options.feedingItems){
            this._feedingItems =options.feedingItems;
            feedingItemsChanged = true;
        } else {
            this._feedingItems = [];
        }
        var isMNDVisible = this._isMNDVisible;
        this._handler.postLoad();
        isMNDVisibleChanged = (isMNDVisible !== this._isMNDVisible);

        if(typeChanged || feedingItemsChanged){
            var args = {
                'vizTypeChanged' : typeChanged,
                'isMNDVisibleChanged' : isMNDVisibleChanged,
                'feedingItemsChanged' : feedingItemsChanged
            };
            this.dispatchPropertiesChangedEvent(args);
        }
    };
    
    /**
     * get and set feedingItems
     * @param {[sap.viz.controls.common.FeedItem]} value
     * @return {[sap.viz.controls.common.FeedItem]}
     */
    VizModel.prototype.filterItems = function(value) {
        if (arguments.length > 0) {
            this._filterItems = value;

            var args = {
                filterChanged : true
            };
            var filterChangedEvent = new Event(VizModel.PropertiesChangedEvent, this, args);
            this._dispatchEvent(filterChangedEvent);

            return this;
        } else {
            return this._filterItems;
        }
    };
    VizModel.prototype.explicitFeedingItems = function(options) {
        return this._handler.explicitFeedingItems(options);
    };
    /**
     * get and set filter items
     * @param {[sap.viz.controls.common.FeedItem]} value
     * @return {[sap.viz.controls.common.FeedItem]}
     */
    VizModel.prototype.feedingItems = function(value, enableTrellis) {
        if (arguments.length > 0) {
            this._handler.feedingItemsChanged(value, enableTrellis);
            return this;
        } else {
            return this._feedingItems.slice(0);
        }
    };
    
    VizModel.prototype.savedSubtotals = function(value) {
        if (arguments.length > 0) {
            this._savedSubtotals = value;
            return this;
        } else {
            return this._savedSubtotals;
        }
    };

    /**
     * get or set type
     * @param {String} value
     * @return {String}
     */
    VizModel.prototype.type = function(value) {
        if (arguments.length > 0) {
            if (this._type !== value) {
                var olderType = this._type;
                this._type = value;
                this._updateHandler(this._type, olderType);
                this._handler.propertiesChanged(olderType, true);
            }
            return this;
        } else {
            return this._type;
        }
    };
    
    // this function is used by _restorePlayerFieldHistory when this _playerField is restore will return true
    VizModel.prototype.restorePlayerField = function(value) {
        return this._handler.updatePlayerField(value);
    };
    
    VizModel.prototype.playerField = function(value) {
        if(arguments.length > 0) {
            var args;
            var sliceDimensionChanged = this._handler.updatePlayerField(value);

            if (sliceDimensionChanged === true) {
                args = {
                    'sliceDimensionChanged' : true
                };
                this.dispatchPropertiesChangedEvent(args);

            }

            return this;
        } else {
            return this._playerField;
        }
    };

    /**
     * show or hide MND
     * @param {Boolean} value
     * @return {Boolean}
     */
    VizModel.prototype.isMNDVisible = function(value) {
        if (arguments.length > 0) {
            var curValue = (value === true);
            if (this._isMNDVisible !== curValue) {
                this._isMNDVisible = curValue;
                this._handler.isMNDVisibleChanged();
            }
            return this;
        } else {
            return this._isMNDVisible;
        }
    };
    /**
     * Update the vizModel when properties (type, direction or stacking property) change, feeding
     * information(feedingItems, rowFeeding or columnFeeding) changed, or filter information changed.
     * @param {Object} options {
     *                              type: String,
     *                              feedingItems: [FeedingItem],
     *                              filterItems : [FilterItem]
     *                          }
     * @public
     */
    VizModel.prototype.vizModelChanged = function(options) {
        if(options.type){
            this._updateHandler(options.type, this._type);
        }
        this._handler.vizModelChanged(options);
    };

    VizModel.prototype.updateFilterItems = function(selection, isExclude, vizData, feeding){
        var newFilterItems = this._handler.getFilterItems(selection, isExclude, vizData, feeding);
        this.filterItems(newFilterItems);
    };

    /**
     * Get clone of chart model.
     * @returns {VizModel}
     */
    VizModel.prototype.clone = function() {
        var result = new VizModel();
        this._handler.clone(result);

        return result;
    };

    /**
     * Get/Set extension values
     * @param {String} extensionValues
     * @return {String}
     */
    VizModel.prototype.extensionValues = function(extensionValues) {
        if (arguments.length > 0) {
            var args = {};
            if (extensionValues) {
                if (this._extensionValues !== extensionValues) {
                    this._extensionValues = extensionValues;
                    args = {
                        'extensionValuesChanged' : true
                    };
                }
            }
            var extensionValuesChangedEvent = new Event(VizModel.PropertiesChangedEvent, this, args);
            this._dispatchEvent(extensionValuesChangedEvent);

            return this;
        } else {
            return this._extensionValues;
        }
    };

    VizModel.prototype.dispatchPropertiesChangedEvent = function(args){
        var propertiesChangedEvent = new Event(VizModel.PropertiesChangedEvent, this, args);
        this._dispatchEvent(propertiesChangedEvent);
    };
    
    /**
     * Dispatch  VizModelResetEvent when createViz or load chart
     */
    VizModel.prototype.reset = function() {
        var args = {
            'vizModelReset' : true  
        };
        var vizModelResetEvent = new Event(VizModel.VizModelResetEvent, this, args);
        this._dispatchEvent(vizModelResetEvent);
    };   
    
    VizModel.prototype.dispatchEvent = function(event){
        this._dispatchEvent(event);
    };

    return VizModel;
});

define('sap/viz/controls/common/ProxyBase',[],
function() {
    var ProxyBase = function ProxyBase(client) {
        this.__className = "sap.viz.controls.runtime.ProxyBase";
        this.__client = client;
    };
    ProxyBase.prototype._client = function(){
        return this.__client;
    }
    ProxyBase.prototype.updateClient = function(client)
    {
        this.__client = client;
    }
    return ProxyBase;
});

define('sap/viz/controls/runtime/VizProxy',['jquery', 'sap/viz/controls/common/utils/OOUtil', 'sap/viz/controls/common/ProxyBase', 'sap/viz/controls/common/events/Event'], function($, OOUtil, ProxyBase, Event) {
    var VizProxy = function VizProxy(vizModel) {
        VizProxy.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.runtime.VizProxy";
    };
    OOUtil.extend(VizProxy, ProxyBase);

    VizProxy.VizProxyEvent = 'VizProxy.VizProxyEvent';
    VizProxy.GetTitleZoneOperation = 'getTitleZoneOperation';
    VizProxy.GetTitleTextOperation = 'getTitleTextOperation';
    VizProxy.SetTitleTextOperation = 'setTitleTextOperation';
    VizProxy.GetTitleTextByFeedingOperation = 'getTitleTextByFeedingOperation';
    VizProxy.RestoreTitleTextOperation = 'restoreTitleTextOperation';
    VizProxy.IsFakeChartOperation = 'isFakeChartOperation';
    VizProxy.IsTitleCustomizedOperation = 'isTitleCustomizedOperation';
    VizProxy.GetPropertiesOperation = 'getPropertiesOperation';
    VizProxy.SetPropertiesOperation = 'setPropertiesOperation';
    VizProxy.SetDatasetOperation = 'SetDatasetOperation';
    VizProxy.GetSelectionOperation = 'getSelectionOperation';
    VizProxy.SetTitleModeOperation = 'setTitleModeOperation';
    VizProxy.GetPropertyZonesOperation = 'getPropertyZonesOperation';
    VizProxy.SetPropertyZonesOperation = 'setPropertyZonesOperation';
    VizProxy.GetDatasetOperation = 'GetDatasetOperation';
    VizProxy.QueryPropertiesOperation = 'queryPropertiesOperation';
    VizProxy.UpdatePropertiesOperation = 'updatePropertiesOperation';
    VizProxy.AddEventListenerOperation = 'addEventListenerOperation';
    VizProxy.RemoveEventListenerOperation = 'removeEventListenerOperation';
    VizProxy.SetAxisScaleOperation = 'setAxisScaleOperation';
    VizProxy.GetTypeOperation = 'getTypeOperation';
    VizProxy.GetDataPointsPosition = 'getDataPointsPosition';
    VizProxy.OnOperation = 'onOperation';
    VizProxy.OffOperation = 'offOperation';
    VizProxy.GetSizeOperation = 'getSizeOperation';
    VizProxy.SetSizeOperation = 'setSizeOperation';
    VizProxy.GetVizFeedingOperation = 'getVizFeedingOperation';
    VizProxy.GetScalesOperation = 'getScalesOperation';
    VizProxy.SetScalesOperation = 'setScalesOperation';

    VizProxy.prototype._model = function() {
        return this._client();
    };
    VizProxy.prototype._doOperation = function(operation, data) {
        data = data || {};
        data.operation = operation;
        var event = new Event(VizProxy.VizProxyEvent, this._model(), data);
        this._model().dispatchEvent(event);
        return event.data.result;
    };

    VizProxy.prototype.getTitleZone = function() {
        return this._doOperation(VizProxy.GetTitleZoneOperation);
    };
    VizProxy.prototype.getTitleText = function() {
        return this._doOperation(VizProxy.GetTitleTextOperation);
    };
    VizProxy.prototype.setTitleText = function(text) {
        var data = {
            args : arguments
        };
        this._doOperation(VizProxy.SetTitleTextOperation, data);
    };
    VizProxy.prototype.getTitleTextByFeeding = function() {
        return this._doOperation(VizProxy.GetTitleTextByFeedingOperation);
    };
    VizProxy.prototype.restoreTitleText = function() {
        this._doOperation(VizProxy.RestoreTitleTextOperation);
    };

    VizProxy.prototype.SetDataset = function(dataset) {
        var data = {
            args : arguments
        };
        this._doOperation(VizProxy.SetDatasetOperation, data);
    };

    VizProxy.prototype.setTitleMode = function(mode) {
        var data = {
            args : arguments
        };
        this._doOperation(VizProxy.SetTitleModeOperation, data);
    };
    VizProxy.prototype.isFakeChart = function() {
        return this._doOperation(VizProxy.IsFakeChartOperation);
    };
    VizProxy.prototype.isTitleCustomized = function() {
        return this._doOperation(VizProxy.IsTitleCustomizedOperation);
    };
    VizProxy.prototype.getProperties = function() {
        return this._doOperation(VizProxy.GetPropertiesOperation);
    };
    VizProxy.prototype.setProperties = function(newProperties) {
        var data = {
            args : arguments
        };
        this._doOperation(VizProxy.SetPropertiesOperation, data);
    };
    VizProxy.prototype.getSelection = function() {
        return this._doOperation(VizProxy.GetSelectionOperation);
    };

    VizProxy.prototype.getType = function() {
        return this._doOperation(VizProxy.GetTypeOperation);
    };

    VizProxy.prototype.getPropertyZones = function() {
        return this._doOperation(VizProxy.GetPropertyZonesOperation);
    };

    VizProxy.prototype.setPropertyZones = function(propertyZones) {
        var data = {
            args : arguments
        };
        this._doOperation(VizProxy.SetPropertyZonesOperation, data);
    };

    VizProxy.prototype.queryProperties = function(options) {
        var data = {
            args : arguments
        };

        return this._doOperation(VizProxy.QueryPropertiesOperation, data);
    };

    VizProxy.prototype.updateProperties = function(options) {
        var data = {
            args : arguments
        };
        this._doOperation(VizProxy.UpdatePropertiesOperation, data);
    };

    VizProxy.prototype.getDataset = function() {
        return this._doOperation(VizProxy.GetDatasetOperation);
    };

    VizProxy.prototype.setAxisScale = function(axis) {
        var data = {
            args : arguments
        };
        return this._doOperation(VizProxy.SetAxisScaleOperation, data);
    };

    /**
     * @param {Object} type
     * propertyZonesChanged
     * @param {Object} listener
     * @param {Object} scope
     * @param {Object} priority
     */
    VizProxy.prototype.addEventListener = function(type, listener, scope, priority) {
        var data = {
            args : arguments
        };
        this._doOperation(VizProxy.AddEventListenerOperation, data);
    };

    VizProxy.prototype.removeEventListener = function(type, listener, scope) {
        var data = {
            args : arguments
        };
        this._doOperation(VizProxy.RemoveEventListenerOperation, data);
    };

    VizProxy.prototype.getDataPointsPosition = function(dataPoints){
        var data = {
            args : arguments
        };
        return this._doOperation(VizProxy.GetDataPointsPosition, data);
    };

    VizProxy.prototype.on = function(evtType, callback) {
        this._doOperation(VizProxy.OnOperation, {
            'args': arguments
        });
    };

    VizProxy.prototype.off = function(evtType) {
        this._doOperation(VizProxy.OffOperation, {
            'args': arguments
        });
    };

    VizProxy.prototype.getSize = function() {
        return this._doOperation(VizProxy.GetSizeOperation);
    };

    VizProxy.prototype.setSize = function(size) {
        var data = {
            args : arguments
        };
        this._doOperation(VizProxy.SetSizeOperation, data);
    };

    VizProxy.prototype.getVizFeeding = function() {
        return this._doOperation(VizProxy.GetVizFeedingOperation);
    }

    VizProxy.prototype.getScales = function() {
        return this._doOperation(VizProxy.GetScalesOperation);
    }

    VizProxy.prototype.setScales = function(scales) {
        var data = {
            args : arguments
        };
        return this._doOperation(VizProxy.SetScalesOperation, data);
    }

    return VizProxy;
});

// @formatter:off
define('sap/viz/controls/common/VizControlBase',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/EventDispatcher',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/runtime/RuntimeManager',
    'sap/viz/controls/runtime/VizModel',
    'sap/viz/controls/runtime/VizProxy'],
function(OOUtil, EventDispatcher, UIControl, RuntimeManager, VizModel, VizProxy) {
// @formatter:on

    // API document: methods in super class
    /**
     * Registers an event listener object with an EventDispatcher object so that the listener receives notification of an
     * event.
     *
     * You can register event listeners on any EventDispatcher object for a specific type of event, scope, and
     * priority. If you no longer need an event listener, remove it by calling removeEventListener(), or memory problems
     * could result.
     *
     * @method sap.viz.controls.common.VizControlBase.prototype.addEventListener
     *
     * @param {String} type
     *            The type of event.
     * @param {Function} listener
     *            The listener function that processes the event.
     * @param {Object} scope
     *            The scope.
     * @param {int} priority
     *            The priority level of the event listener.
     */

    /**
     * Removes a listener from the EventDispatcher object.
     * @method sap.viz.controls.common.VizControlBase.prototype.removeEventListener
     *
     * @param {String} type
     *            The type of event.
     * @param {Function} listener
     *            The listener function that processes the event.
     * @param {Object} scope
     *            The scope.
     */

    //TODO: add a sample for the Viz UI control extension.
    /**
     * Base class for Viz UI control. Each Viz UI control should inherit from VizControlBase.
     * @class sap.viz.controls.common.VizControlBase
     * @extends sap.viz.controls.common.UIControl
     */
    var VizControlBase = function VizControlBase(dom/*HTMLElement*/, uiConfig/*JSON*/, parent) {
        VizControlBase.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.common.VizControlBase";


        // host the viz uid when it connects to a viz instance
        this._vizUid = null;
        if (parent) {
            this._parent = parent;
            this.__vizModel = parent._vizModel();
        } else {
            this.__vizModel = this._createModel();
        }

        this.__vizModel.addEventListener(VizModel.PropertiesChangedEvent, this._onVizModelChanged, this);
        this.__vizModel.addEventListener(VizModel.VizModelResetEvent, this._onVizModelReset, this);
        this._updatingProperty = 0;
        this.__vizProxy = new VizProxy(this.__vizModel);
    };

    OOUtil.extend(VizControlBase, UIControl);

    /**
     * Connect to a viz instance.
     * @method sap.viz.controls.common.VizControlBase.prototype.connect
     * @param {String} vizUid The uid of the viz instance.
     */
    VizControlBase.prototype.connect = function(vizUid) {
        if(this._vizUid === vizUid){
            return;
        }

        this._vizUid = vizUid;
        //Create model if model does not exist.
        var runtime = RuntimeManager.getRuntime();
        var model = runtime.getModel(vizUid);
        var modelChanged = false;

        if (!model) {
            runtime.registerModel(vizUid, this.__vizModel);
        } else {
            if (this.__vizModel !== model) {
                modelChanged = true;
                this.__vizModel.removeEventListener(VizModel.PropertiesChangedEvent, this._onVizModelChanged, this);
                this.__vizModel.removeEventListener(VizModel.VizModelResetEvent, this._onVizModelReset, this);
                this.__vizModel = model;
                this.__vizModel.addEventListener(VizModel.PropertiesChangedEvent, this._onVizModelChanged, this);
                this.__vizModel.addEventListener(VizModel.VizModelResetEvent, this._onVizModelReset, this);
            }
            runtime.addModelRef(vizUid);
        }
        this._onConnect(vizUid, modelChanged);
    };
    /**
     * Get viz model.
     * @returns {@link sap.viz.controls.runtime.VizModel} the current connected VizModel
     * @protected
     */
    VizControlBase.prototype._vizModel = function() {
        return this.__vizModel;
    };
    /**
     * Get viz proxy.
     * @returns {@link sap.viz.controls.runtime.VizProxy} the current connected VizProxy
     * @protected
     */
    VizControlBase.prototype._vizProxy = function() {
        return this.__vizProxy;
    };
    /**
     * Handler for vizModel changed.
     * @param {@link sap.viz.controls.common.events.Event} e
     * @protected
     */
    VizControlBase.prototype._onVizModelChanged = function(e) {

    };
    /**
     * Handler for vizModel reset.
     * @param {@link sap.viz.controls.common.events.Event} e
     * @protected
     */
    VizControlBase.prototype._onVizModelReset = function(e) {
        
    };
    /**
     * Create new model for the control.
     * @returns {Object}
     * @protected
     */
    VizControlBase.prototype._createModel = function() {
        return new VizModel();
    };
    /**
     * Subclass can override this method to init with new connection.
     * @param {String} vizUid
     * @param {Boolean} modelChanged
     * @protected
     */
    VizControlBase.prototype._onConnect = function(vizUid, modelChanged) {
        this._vizProxy().updateClient(this.__vizModel);
    };
    /**
     * Subclass can override this method to clean up the connection.
     * @param {String} vizUid
     * @protected
     */
    VizControlBase.prototype._onDisconnect = function() {

    };
    VizControlBase.prototype._onAfterDisconnect = function() {

    };
    /**
     * Disconnect a viz control from a viz instance.
     * @method sap.viz.controls.common.VizControlBase.prototype.disconnect
     */
    VizControlBase.prototype.disconnect = function() {
        this._removeSharedModel(true);
    };

    /**
     * Remove shared model in runtime.
     * @param {Boolean} notifyDisconnect
     */
    VizControlBase.prototype._removeSharedModel = function(notifyDisconnect) {
        var vizUid = this._vizUid;
        if (vizUid) {
            var model = RuntimeManager.getRuntime().getModel(vizUid);
            if (model) {
                if (notifyDisconnect) {
                    this._onDisconnect();
                }

                //get clone of chart model
                model.removeEventListener(VizModel.PropertiesChangedEvent, this._onVizModelChanged, this);
                model.removeEventListener(VizModel.VizModelResetEvent, this._onVizModelReset, this);
                this.__vizModel = model.clone();
                this.__vizModel.addEventListener(VizModel.PropertiesChangedEvent, this._onVizModelChanged, this);
                this.__vizModel.addEventListener(VizModel.VizModelResetEvent, this._onVizModelReset, this);
                RuntimeManager.getRuntime().removeModelRef(vizUid);
            }
            if (notifyDisconnect) {
                this._onAfterDisconnect();
            }
            this._vizUid = null;
        }
    };

    /**
     * @override
     */
    VizControlBase.prototype.destroy = function() {
        this._removeSharedModel(false);
        VizControlBase.superclass.destroy.apply(this, arguments);
    };

    VizControlBase.prototype._beginUpdateProperty = function(){
        this._updatingProperty++;
    };

    VizControlBase.prototype._inUpdatingProperty = function(){
        return this._updatingProperty > 0;
    };

    VizControlBase.prototype._endUpdateProperty = function(){
        this._updatingProperty--;
    };

    VizControlBase.prototype._dispatchPropertyEvent = function(e){
        if(!this._updatingProperty){
            VizControlBase.superclass._dispatchEvent.apply(this, arguments);
        }
        //Do not dispatch event if updatingProperty is true.
    };

    /**
     * Dispatch event. Override the method to add vizUid to event data.
     */
    VizControlBase.prototype._dispatchEvent = function(event) {
        if (!event.data) {
            event.data = {};
        }
        event.data.token = this._vizUid;

        VizControlBase.superclass._dispatchEvent.apply(this, arguments);
    };

    /**
     * Serialize VizControlBase to a JSON object. <br/>
     * @method sap.viz.controls.common.VizControlBase.prototype.save
     * @return {JSON}
     */
    VizControlBase.prototype.save = function(){
        return {};
    };
    /**
     * Deserialize VizControlBase from JSON object.<br/>
     * @method sap.viz.controls.common.VizControlBase.prototype.load
     * @param {JSON} valueJSON
     */
    VizControlBase.prototype.load = function(valueJSON){
    };

    return VizControlBase;
});

define('sap/viz/controls/common/constants/EventTypeConst',[],function() {

    var EventTypeConst = {};

    // Event types
    EventTypeConst.VC_CHANGE_VIZ_TYPE = "vc-changeVizType";

    EventTypeConst.PRESS_FILTER_BUTTON = "vc-filter";
    EventTypeConst.PRESS_EXCLUDE_BUTTON = "vc-exclude";
    EventTypeConst.PRESS_DRILLDOWN_BUTTON = "vc-drillDown";

    EventTypeConst.SELECT_SHOW_LEGEND = "vc-showLegend";
    EventTypeConst.SELECT_SHOW_DATALABELS = "vc-showDataLabels";
    EventTypeConst.SELECT_CHANGE_DIRECTION = "vc-changeDirection";
    EventTypeConst.SELECT_CHANGE_STACKING = "vc-changeStacking";
    EventTypeConst.SELECT_INSERT_COMMENT = "vc-insertComment";
    EventTypeConst.SELECT_CHART_EDITOR = "vc-chartEditor";
    EventTypeConst.SHOW_MESSAGE = "vc-showMessage";
    EventTypeConst.CLEAR_MESSAGE = "vc-clearMessage";
    
    EventTypeConst.VIZ_DEFINITION_CHANGED='vizDefinitionChanged';
    EventTypeConst.REQUEST_FILTER_VALUES='requestFilterValues';

    return EventTypeConst;
});

// @formatter:off
define('sap/viz/controls/annotation/AnnotationConfig',[
    'sap/viz/controls/common/config/GlobalConfig'
],
function(GlobalConfig) {
// @formatter:on
    var AnnotationConfig = {};

    AnnotationConfig.instance = function() {
        return {};
    };
    
    GlobalConfig.registerUIConfig(GlobalConfig.DEFAULT_UICONFIG_TYPE_ANNOTATION, AnnotationConfig);
    return AnnotationConfig;
});

define('sap/viz/controls/annotation/AnnotationEvent',[
// @formatter:off
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function(OOUtil, Event) {

    var AnnotationEvent = function(type, target, data) {
        AnnotationEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.annotation.AnnotationEvent";
    };

    OOUtil.extend(AnnotationEvent, Event);

    AnnotationEvent.COMMENT_CHANGED_EVENT = "commentChanged";

    return AnnotationEvent;
});

define('sap/viz/controls/annotation/views/DialogEvent',[
// @formatter:off
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function(OOUtil, Event) {

    var DialogEvent = function(type, target, data) {
        DialogEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.annotation.views.DialogEvent";
    };
    OOUtil.extend(DialogEvent, Event);

    DialogEvent.OK = "OK";
    DialogEvent.Cancel = "Cancel";

    return DialogEvent;
});

define('sap/viz/controls/annotation/views/ConfirmDialog',[
// @formatter:off
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/annotation/views/DialogEvent',
    'jquery'],
// @formatter:on
function(OOUtil, UIControl, CSSConst, LangManager, DialogEvent, $) {
    var ConfirmDialog = function() {
        ConfirmDialog.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.annotation.views.ConfirmDialog";

        /** confirm dialog DIV*/
        this._confirmDialog$ = null;
        this._needConfirm = true;
        this._visible = false;

        this._createChildren();
    };

    OOUtil.extend(ConfirmDialog, UIControl);

    /**
     * TODO: Add comments.
     */
    ConfirmDialog.prototype._createChildren = function() {
        var _this = this;

        //create dialog
        this._confirmDialog$ = $(document.createElement('div'));
        this._confirmDialog$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog');

        //create dialog header
        var dialogHeader$ = $(document.createElement('div'));
        dialogHeader$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-header');
        this._confirmDialog$.append(dialogHeader$);

        var dialogHeaderLeft$ = $(document.createElement('span'));
        dialogHeaderLeft$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-headerleft');
        dialogHeader$.append(dialogHeaderLeft$);

        var dialogHeaderLeftLabel$ = $(document.createElement('span'));
        dialogHeaderLeftLabel$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-headerleft-label');
        dialogHeaderLeft$.append(dialogHeaderLeftLabel$);

        var dialogHeaderRight$ = $(document.createElement('span'));
        dialogHeaderRight$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-headerright');
        dialogHeader$.append(dialogHeaderRight$);

        var dialogHeaderRightClose$ = $(document.createElement('a'));
        dialogHeaderRightClose$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-headerright-close');
        dialogHeaderRight$.append(dialogHeaderRightClose$);
        dialogHeaderRightClose$.click(function() {
            _this.hide();
        });
        //create dialog content
        var dialogContent$ = $(document.createElement('div'));
        dialogContent$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-content');
        this._confirmDialog$.append(dialogContent$);

        var dialogContentUp$ = $(document.createElement('div'));
        dialogContentUp$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-content-up');
        dialogContentUp$.appendTo(dialogContent$);

        var icon$ = $(document.createElement('div'));
        icon$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-content-icon');
        icon$.appendTo(dialogContentUp$);

        var info$ = $(document.createElement('div'));
        info$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-content-info');
        info$.text(LangManager.get("VIZ_COMMON_DELETE_COMMENT_MESSAGE"));
        info$.appendTo(dialogContentUp$);

        var dialogContentDown$ = $(document.createElement('div'));
        dialogContentDown$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-content-down');
        dialogContentDown$.appendTo(dialogContent$);

        this._checkBoxNeedConfirm$ = $(document.createElement("input"));
        this._checkBoxNeedConfirm$.attr("type", "checkbox");
        this._checkBoxNeedConfirm$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-content-checkbox');
        this._checkBoxNeedConfirm$.appendTo(dialogContentDown$);

        var checkBoxLabel$ = $(document.createElement('div'));
        checkBoxLabel$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-content-checkboxlabel');
        checkBoxLabel$.text(LangManager.get("VIZ_COMMON_DONT_SHOW_MESSAGE"));
        checkBoxLabel$.appendTo(dialogContentDown$);

        //create dialog footer
        var dialogFooter$ = $(document.createElement('div'));
        dialogFooter$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-footer');
        this._confirmDialog$.append(dialogFooter$);

        var dialogFooterButtons$ = $(document.createElement('div'));
        dialogFooterButtons$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-footer-buttons');
        dialogFooter$.append(dialogFooterButtons$);

        var dialogFooterOKButton$ = $(document.createElement('button'));
        dialogFooterOKButton$.text(LangManager.get("VIZ_COMMON_OK"));
        dialogFooterOKButton$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-footer-button');
        dialogFooterOKButton$.addClass(CSSConst.COMMON_PREFIX + 'button');
        dialogFooterButtons$.append(dialogFooterOKButton$);
        dialogFooterOKButton$.click(function() {
            _this.hide();
            _this._needConfirm = !(_this._checkBoxNeedConfirm$.prop("checked"));
            _this._dispatchEvent(new DialogEvent(DialogEvent.OK, _this, _this._needConfirm));
        });
        var dialogFooterCancelButton$ = $(document.createElement('button'));
        dialogFooterCancelButton$.text(LangManager.get("VIZ_COMMON_CANCEL"));
        dialogFooterCancelButton$.addClass(CSSConst.ANNOTATION_PREFIX + 'confirmdialog-footer-button');
        dialogFooterCancelButton$.addClass(CSSConst.COMMON_PREFIX + 'button');
        dialogFooterButtons$.append(dialogFooterCancelButton$);
        dialogFooterCancelButton$.click(function() {
            _this.hide();
        });

        this._blockLayout$ = $(document.createElement('div'));
        this._blockLayout$.addClass(CSSConst.ANNOTATION_PREFIX + 'block-layer');
    };
    /**
     * TODO: Add comments.
     */
    ConfirmDialog.prototype.show = function(pos) {
        this._visible = true;
        $(document.body).append(this._blockLayout$);
        $(document.body).append(this._confirmDialog$);

        if (pos) {
            this.setPos(pos);
        }
    };
    /**
     * TODO: Add comments.
     */
    ConfirmDialog.prototype.hide = function() {
        this._visible = false;
        this._blockLayout$.detach();
        this._confirmDialog$.detach();
    };
    /**
     * TODO: Add comments.
     */
    ConfirmDialog.prototype.setPos = function(pos) {
        this._confirmDialog$.css({
            position : "absolute",
            left : pos.pageX - this._confirmDialog$.width() / 2,
            top : pos.pageY - this._confirmDialog$.height() / 2
        });
    };
    /**
     * Check whether Comment Editor Dialog is visible or not
     * @return {Boolean}
     */
    ConfirmDialog.prototype.isVisible = function() {
        return this._visible;
    };
    return ConfirmDialog;
});

define('sap/viz/controls/annotation/models/Comment',['sap/viz/controls/common/managers/LangManager'],
function(LangManager) {
    var Comment = function(dimension, dimension2, series) {
        this._dimension = dimension;
        this._dimension2 = dimension2;
        this._series = series;
        this._text = '';
        this._createTime = LangManager.get("VIZ_ANNOTATION_COMMENT");
    };

    Comment.prototype.dimension = function(value) {
        if(arguments.length > 0) {
            this._dimension = value;

            return this;
        } else {
            return this._dimension;
        }
    };

    Comment.prototype.dimension2 = function(value) {
        if(arguments.length > 0) {
            this._dimension2 = value;

            return this;
        } else {
            return this._dimension2;
        }
    };

    Comment.prototype.series = function(value) {
        if(arguments.length > 0) {
            this._series = value;

            return this;
        } else {
            return this._series;
        }
    };

    Comment.prototype.createTime = function(value) {
        if(arguments.length > 0) {
            this._createTime = value;

            return this;
        } else {
            return this._createTime;
        }
    };

    Comment.prototype.text = function(value) {
        if(arguments.length > 0) {
            this._text = value;

            return this;
        } else {
            return this._text;
        }
    };
    return Comment;
});

define('sap/viz/controls/annotation/views/Comments',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/VizUtils',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/events/EventDispatcher',
    'sap/viz/controls/annotation/views/DialogEvent',
    'sap/viz/controls/annotation/views/ConfirmDialog',
    'sap/viz/controls/annotation/models/Comment'],
// @formatter:on
function($, CSSConst, ChartConst, OOUtil, ChartTypeUtil, Utils, VizUtils, Event, EventDispatcher,
    DialogEvent, ConfirmDialog, Comment) {
    //fill color for Comment border, line and triangle;
    var FillColor = '#F1AB00';
    var TriangleSize = 12;
    var LineBorderLeftWidth = 4;
    //max width for comment rect
    var MaxWidth = 200;
    var ItemPadding = 8;
    //edit and delete icon size
    var IconSize = {
        width : 14,
        height : 16
    };
    //font style for creator text
    var CreatorStyle = "font-family:Arial;font-size:12px;font-weight:bold;fill:#000000;";
    //font style for comment text
    var CommentStyle = "font-family:Arial;font-size:12px;font-weight:normal;fill:#000000;";

    /**
     * TODO: Add comments.
     */
    var Comments = function() {
        this._commentsMap = {};
        /** The map for restoring customized position of comments */
        this._commentsPositionMap = {};
        this._vizData = null;
        this._vizType = null;
        this._eventHandlers = {};
        this._needConfirm = true;
        this._currentComment = null;
    };

    OOUtil.extend(Comments, EventDispatcher);

    Comments.Event_EditComment = 'Event_EditComment';
    Comments.Event_RemoveComment = 'Event_RemoveComment';
    Comments.Event_DragComment = 'Event_DragComment';

    /**
     * Show confirm dialog when deleting comment
     */
    Comments.prototype._showConfirmDialog = function() {
        this._getConfirmDialog().show({
            pageX : $(this._parent).offset().left + $(this._parent).width() / 2,
            pageY : $(this._parent).offset().top + $(this._parent).height() / 2
        });
    };
    /**
     * Create confirm dialog
     */
    Comments.prototype._getConfirmDialog = function() {
        if (!this._confirmDialog) {
            this._confirmDialog = new ConfirmDialog();
            this._confirmDialog.addEventListener(DialogEvent.OK, this._confirmChangedHandler, this);
        }

        return this._confirmDialog;
    };
    /**
     * Handler for confirm deleting comment
     * @param {Event} e
     */
    Comments.prototype._confirmChangedHandler = function(e) {
        this._needConfirm = e.data;
        this._onRemoveComment(this._currentComment);
    };
    /**
     * TODO: Add comments.
     * @param {Object} value
     */
    Comments.prototype.assetFolder = function(value) {
        if (arguments.length > 0) {
            this._assetFolder = value;

            return this;
        } else {
            return this._assetFolder;
        }
    };
    /**
     * TODO: Add comments.
     * @param {Object} value
     */
    Comments.prototype.setChartInfo = function(value) {
        if (arguments.length > 0) {
            this._vizData = value.vizData;
            this._vizType = value.vizType;
            return this;
        } else {
            return this._vizData;
        }
    };
    /**
     * TODO: Add comments.
     */
    Comments.prototype.feedsChanged = function() {
        this._commentsPositionMap = {};
    };
    /**
     * TODO: Add comments.
     */
    Comments.prototype._initDIV = function() {
        if (this._parent) {
            this._parent.empty();
        } else {
            var dom = document.createElement("DIV");
            this._parent = $(dom);
            this._chartHolderDiv = $('div.' + CSSConst.PREFIX + 'chart-holder')[0];
            this._parent.appendTo(this._chartHolderDiv).attr('id', "comments-parent");
            this._parent.attr('style', 'overflow:hidden;position:absolute;pointer-events:none;left:0px;top:0px;');
        }

        this._triangleHolder = null;
        this._lineHolder = null;
    };
    /**
     * TODO: Add comments.
     */
    Comments.prototype.redraw = function() {
        this._initDIV();

        var vizType = ChartTypeUtil.getVizType(this._vizType);
        if(!AnnotationItemConst.supportType[vizType] || VizUtils.hasFakeData(this._vizData)){
            return;
        }

        for (var id in this._commentsMap) {
            if (this._commentsMap.hasOwnProperty(id)) {
                this._drawComment(id);
            }
        }
    };
    /**
     * clean comments.
     */
    Comments.prototype.clean = function() {
        this._initDIV();
    };
    /**
     * TODO: Add comments.
     * @param {Object} path
     * @param {Object} chartData
     */
    Comments.prototype._getPathInfo = function(path, chartData) {
        var dimensionIndex = path.dii_a1;
        var seriesIndex = path.mi;
        var crossDataset = chartData._crosstableDataset;
        var dimensionLabels = crossDataset.getAnalysisAxisByIdx(0);
        var dimensionLabel = null;
        if (dimensionLabels) {
            dimensionLabel = '';
            dimensionLabels = dimensionLabels.getDimensionLabels();
            for (var i = 0; i < dimensionLabels.length; i++) {
                dimensionLabel += dimensionLabels[i].getValues()[dimensionIndex];
            }
        }
        else {
           dimensionLabel = crossDataset.getMeasureValuesGroupByIdx(0).getMeasureValues()[dimensionIndex].getId();
        }

        var dimension2Labels = crossDataset.getAnalysisAxisByIdx(1);
        var dimension2 = null;
        if (dimension2Labels) {
            dimension2 = '';
            dimension2Labels = dimension2Labels.getDimensionLabels();
            for (var n = 0; n < dimension2Labels.length; n++) {
                dimension2 += dimension2Labels[n].getValues()[path.dii_a2];
            }
        }

        var pathInfo = {
            dimensionIndex : dimensionIndex,
            seriesIndex : seriesIndex,
            dimension : dimensionLabel,
            dimension2 : dimension2
        };
        pathInfo.series = crossDataset.getMeasureValuesGroupByIdx(path.mg).getMeasureValues()[seriesIndex].getId();
        return pathInfo;
    };
    /**
     * TODO: Add comments.
     * @param {Object} comment
     */
    Comments.prototype._findDataPoint = function(comment) {
        var datapoints = d3.selectAll('.v-datapoint')[0];
        var dimension = comment.dimension();
        var dimension2 = comment.dimension2();
        var series = comment.series();
        for (var i = 0; i < datapoints.length; i++) {
            var data = datapoints[i].__data__;
            if (data) {
                var pathInfo;
                if (Utils.isArray(data.ctx)) {
                    pathInfo = this._getPathInfo(data.ctx[0].path, this._vizData);
                    if (pathInfo.dimension === dimension && pathInfo.dimension2 === dimension2 && pathInfo.series == series) {
                        return datapoints[i];
                    }
                } else if (ChartTypeUtil.getVizType(this._vizType) === ChartConst.TYPE_BOXPLOT) {
                    for (var j = 0; j < data.length; j++) {
                        pathInfo = this._getPathInfo(data[j].ctx.path, this._vizData);
                        if (pathInfo.dimension === dimension && pathInfo.dimension2 === dimension2 && pathInfo.series == series) {
                            return datapoints[i];
                        }
                    }
                } else if (data.ctx){
                    pathInfo = this._getPathInfo(data.ctx.path, this._vizData);
                    if (pathInfo.dimension === dimension && pathInfo.dimension2 === dimension2 && pathInfo.series == series) {
                        return datapoints[i];
                    }
                }
            }
        }
    };
    /**
     * TODO: Add comments.
     * @param {Object} dataPoint
     */
    function getDataPointRect(dataPoint) {
        var data = dataPoint.__data__;
        if (data && data.r && data.midAngle) {
            //handle Pie
            var midAngle = data.midAngle();
            var x = data.r * Math.sin(midAngle);
            var y = data.r - data.r * Math.cos(midAngle);

            var parentsPath = $(dataPoint).parentsUntil('.v-m-plot');
            if (parentsPath.length > 0) {
                var plot = $(parentsPath[parentsPath.length-1]).parent()[0];
                var rects = plot.getElementsByTagName('rect');
                var plotRectHeight = rects[0].getAttribute('height');
                var plotRectWidth = rects[0].getAttribute('width');
                var plotRect = plot.getBoundingClientRect();
                var centerX = plotRect.left + plotRectWidth / 2;
                //Pie chart did not expose center position, calc it. 6 is distance between plot's top and pie top.
                var centerY = plotRect.top + 6 + data.r;

                var rect = {
                    width : 1,
                    height : 1,
                    top : centerY - data.r + y,
                    left : centerX + x
                };
                return rect;
            } else {
                return dataPoint.getBoundingClientRect();
            }
        } else {
            return dataPoint.getBoundingClientRect();
        }
    }

    /**
     * TODO: Add comments.
     * @param {Object} comment
     */
    function getID(comment) {
        var id = comment.dimension() + "-" + comment.dimension2() + "-" + comment.series();
        id = id.replace(/[^(0-9|A-z)]/g, "_");
        return id;
    }

    /**
     * TODO: Add comments.
     * @param {Object} commentID
     */
    function getLinID(commentID) {
        return commentID + '-line';
    }

    /**
     * TODO: Add comments.
     * @param {Object} commentID
     */
    function getTriangleID(commentID) {
        return commentID + '-triangle';
    }

    /**
     * TODO: Add comments.
     * @param {Object} e
     */
    function clickDeleteHandler(e) {
        var comment = e.currentTarget.parentNode.__data;
        if (e.data && comment) {
            if (e.data._needConfirm) {
                e.data._currentComment = comment;
                e.data._showConfirmDialog();
            } else {
                e.data._onRemoveComment(comment);
            }
        }
        e.stopPropagation();
    }

    /**
     * TODO: Add comments.
     * @param {Object} e
     */
    function clickEditHandler(e) {
        var comment = e.currentTarget.parentNode.__data;
        if (e.data && comment) {
            e.data._onEditComment(comment);
        }
        e.stopPropagation();
    }

    /**
     * TODO: Add comments.
     * @param {Object} e
     */
    function commentDIVClickHandler(e) {
        var target = e.target;
        if (target && target.className !== 'ui-draggable') {
            var parents = $(target).parentsUntil(e.data._parent);
            if (parents && parents.length > 0) {
                target = parents[parents.length - 1];
            }
        }
        if (e.data && target && target.className === 'ui-draggable') {
            $(target).detach();
            $(target).appendTo(e.data._parent);
        }
        e.stopPropagation();
    }

    /**
     * TODO: Add comments.
     * @param {Object} srcRect
     * @param {Object} targetRect
     * @param {Object} parentRect
     * @param {Object} line
     * @param {Object} triangle
     */
    function updateArrow(srcRect, targetRect, parentRect, line, triangle) {
        var srcPoint = {
            x : srcRect.left,
            y : srcRect.top + srcRect.height / 2
        };
        var targetPoint = {
            x : targetRect.left + targetRect.width / 2,
            y : targetRect.top
        };

        var deltaX = srcPoint.x - targetPoint.x;
        var deltaY = srcPoint.y - targetPoint.y;
        var length = Math.sqrt(deltaX * deltaX + deltaY * deltaY);

        var angle = Math.asin(deltaY / length) * 180 / Math.PI;
        if (srcPoint.x < targetPoint.x) {
            angle = 180 - angle;
        }

        var rotate = 'rotate(' + angle + 'deg)';
        var origin = "0 0";
        line.css({
            'transform' : rotate,
            'transform-origin' : origin,
            '-webkit-transform' : rotate,
            '-webkit-transform-origin' : origin,
            '-ms-transform' : rotate,
            '-ms-transform-origin' : origin,
            '-moz-transform' : rotate,
            '-moz-transform-origin' : origin,
            width : Math.floor(length) - LineBorderLeftWidth + 'px',
            left : (targetPoint.x - parentRect.left) + 'px',
            top : targetPoint.y - parentRect.top + 'px'
        });
        rotate = 'rotate(' + (angle + 90) + 'deg)';
        origin = "50% 100%";
        triangle.css({
            'transform' : rotate,
            'transform-origin' : origin,
            '-webkit-transform' : rotate,
            '-webkit-transform-origin' : origin,
            '-ms-transform' : rotate,
            '-ms-transform-origin' : origin,
            '-moz-transform' : rotate,
            '-moz-transform-origin' : origin,
            left : (targetPoint.x - parentRect.left - TriangleSize / 2) + 'px',
            top : (targetPoint.y - parentRect.top - TriangleSize) + 'px'
        });
    }

    /**
     * TODO: Add comments.
     * @param {Object} height
     * @param {Object} width
     */
    function getTriangleStyle(height, width) {
        var style = 'height:0px;width:0px;margin:0px;padding:0px;';
        style += 'border-top-width:' + height + 'px;border-left-width: ' + width / 2 + 'px;border-right-width: ' + width / 2 + 'px;';
        style += 'border-bottom-width: 0px;border-style: solid;border-color: ' + FillColor + ' transparent transparent transparent;';
        return style;
    }

    /**
     * TODO: Add comments.
     * @param {Object} dataPoint
     * @param {Object} commentDIV
     * @param {Object} comments
     */
    Comments.prototype._initCommentUI = function(dataPoint, commentDIV, comments) {
        var dataPointRect = getDataPointRect(dataPoint);
        var parentRect = this._parent[0].getBoundingClientRect();
        var left = 0;
        var top = 0;
        var id = commentDIV.attr('id');
        if (this._commentsPositionMap.hasOwnProperty(id) && this._commentsPositionMap[id].hasOwnProperty(this._vizType)) {
            left = this._commentsPositionMap[id][this._vizType].left;
            top = this._commentsPositionMap[id][this._vizType].top;
        } else {
            left = 0;
            top = dataPointRect.top - parentRect.top - 80;

            var data = dataPoint.__data__;
            if (data && data.r && data.midAngle && Math.sin(data.midAngle()) < 0) {
                left = dataPointRect.left - Math.max(dataPointRect.width, 40) - parentRect.left - 150;
            } else {
                left = dataPointRect.left + Math.max(dataPointRect.width, 40) - parentRect.left;
            }
        }

        var style = "pointer-events:auto;";
        style += "padding:4px;background-color:#FFFFCC;";
        //div border
        style += 'border-radius:4px;border-width:2px; border-color:' + FillColor + '; border-style:solid;';
        //position
        style += "position:absolute;left: " + left + "px; top:" + top + "px;";
        //size
        style += "width:" + MaxWidth + "px;";
        commentDIV.attr('style', style);

        //events
        commentDIV.bind('mouseenter', function(e) {
            var id = $(e.currentTarget).attr('id');
            var img = $('div#' + id + ' img');
            img.css('visibility', '');
            var creatorDiv = $('div#' + id + ' div#' + 'createTime');
            if (creatorDiv) {
                creatorDiv.css('right', '68px');
            }
        });

        commentDIV.bind('mouseleave', function(e) {
            var id = $(e.currentTarget).attr('id');
            var img = $('div#' + id + ' img');
            img.css('visibility', 'hidden');
            var creatorDiv = $('div#' + id + ' div#' + 'createTime');
            if (creatorDiv) {
                creatorDiv.css('right', '18px');
            }
        });

        commentDIV.bind('contextmenu', function(e) {
            e.stopPropagation();
        });
        if (left + commentDIV.outerWidth() > this._parent.innerWidth()) {
            left = this._parent.innerWidth() - commentDIV.outerWidth();
        }
        if (top + commentDIV.outerHeight() > this._parent.innerHeight()) {
            left = this._parent.innerHeight() - commentDIV.outerHeight();
        }
        commentDIV.css({
            left : left + 'px',
            top : top + 'px'
        });
    };
    /**
     * TODO: Add comments.
     * @param {Object} dataPoint
     * @param {Object} commentDIV
     * @param {Object} comments
     */
    Comments.prototype._addCommentUI = function(dataPoint, commentDIV, comments) {
        var height = ItemPadding;
        for (var i = 0; i < comments.length; i++) {
            var div = $(document.createElement("DIV")).appendTo(commentDIV).attr('style', 'position:absolute;padding:' + ItemPadding + 'px;left:0px;right:0px;top:' + height + 'px;width:' + MaxWidth + 'px;height:auto;');
            var itemHeight = this._appendItem(div, comments[i]);
            div.css('height', itemHeight + 'px');
            height += itemHeight + ItemPadding;
            div[0].__data = comments[i];
        }
        height -= ItemPadding;
        commentDIV.css('height', height + 'px');

        var dataPointRect = getDataPointRect(dataPoint);
        var parentRect = this._parent[0].getBoundingClientRect();

        var left = Number(commentDIV.css("left").replace('px', ''));
        var top = Number(commentDIV.css("top").replace('px', ''));
        left = Math.min(Math.max(left, 0), parentRect.width - MaxWidth);
        top = Math.min(Math.max(top, 0), parentRect.height - height);
        commentDIV.css({
            left : left,
            top : top
        });

        var commentRect = commentDIV[0].getBoundingClientRect();
        //arrow
        commentDIV[0].__dataPoint = dataPoint;
        commentDIV[0].__parent = this._parent[0];
        var commenID = commentDIV.attr('id');
        var triangleID = getTriangleID(commenID);
        var triangle = $('#' + triangleID);
        if (triangle.length === 0) {
            triangle = $(document.createElement("DIV"));
            if (this._triangleHolder) {
                triangle.insertAfter(this._triangleHolder);
            } else {
                triangle.insertBefore(commentDIV);
            }
            this._triangleHolder = triangle;

            triangle.attr('id', triangleID).attr('style', 'position:absolute;' + getTriangleStyle(TriangleSize, TriangleSize));
        }

        var lineID = getLinID(commenID);
        var line = $('#' + lineID);
        if (line.length === 0) {
            line = $(document.createElement("DIV"));
            if (this._lineHolder) {
                line.insertAfter(this._lineHolder);
            } else {
                line.insertBefore(commentDIV);
            }
            this._lineHolder = line;

            line.attr('id', lineID).attr('style', 'position:absolute;border-left-width:' + LineBorderLeftWidth + 'px; border-top-width:2px;border-bottom-width:0px;border-right-width:0px;border-color:' + FillColor + ' transparent; border-style:solid;width:1px;height:0px;');
        }

        updateArrow(commentRect, dataPointRect, parentRect, line, triangle);
    };
    /**
     * TODO: Add comments.
     * @param {Object} div
     * @param {Object} comment
     */
    Comments.prototype._appendItem = function(div, comment) {
        var _this = this;
        var tooltip$ = null;
        var enter = false;

        var height = 0;
        //edit & delete buttons;
        var edit = $(document.createElement("IMG")).appendTo(div);
        edit.attr('src', this._assetFolder + '/edit.png').attr('style', 'position:absolute;pointer-events:auto;cursor:pointer;top:0px; right:' + (ItemPadding * 3 + IconSize.width) + 'px;width:' + IconSize.width + 'px;height:' + IconSize.height + 'px;visibility:hidden;');
        edit.bind('mousedown', this, clickEditHandler);
        var editRect = edit[0].getBoundingClientRect();

        var del = $(document.createElement("IMG")).appendTo(div);
        del.attr('src', this._assetFolder + '/delete.png').attr('style', 'position:absolute;pointer-events:auto;cursor:pointer;top:0px; right:' + (ItemPadding * 2) + 'px;width:' + IconSize.width + 'px;height:' + IconSize.height + 'px;visibility:hidden;');
        del.bind('mousedown', this, clickDeleteHandler);
        var delRect = del[0].getBoundingClientRect();

        var creatorDiv = this._creatorDiv = $(document.createElement("DIV")).appendTo(div);
        creatorDiv.attr('id', 'createTime');
        creatorDiv.text(comment.createTime()).attr('style', 'position:absolute;cursor:default;line-height:normal;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;left:5px;right:18px;top:0px;' + CreatorStyle);
        creatorDiv.mouseover(function(event) {
            if (creatorDiv[0].scrollWidth > creatorDiv[0].clientWidth) {
                enter = true;
                var delayedShow = setTimeout(function() {
                    if (enter) {
                        if (!tooltip$){
                            tooltip$ = $(document.createElement('div')).appendTo(div);
                            tooltip$.attr('style', 'position:absolute;border-radius:4px;z-index:100;display:block;background-color:#F2F2F2;border:1px solid #7F7F7F;box-shadow:5px 5px 10px rgba(0,0,0,0.5);-webkit-box-shadow:5px 5px 10px rgba(0,0,0,0.5);-moz-box-shadow:5px 5px 10px rgba(0,0,0,0.5);');
                            var tooltipText$ = $(document.createElement('span')).appendTo(tooltip$);
                            tooltipText$.attr('style', 'border-radius:4px;padding-left:4px;padding-right:4px;display:block;font-size:10px;white-space:nowrap;top:0px;overflow:hidden;');
                            tooltipText$.text(comment.createTime());
                        }

                        var creatorDivOffset = $(creatorDiv).offset();
                        tooltip$.offset({
                            'left' : creatorDivOffset.left - 5,
                            'top' : creatorDivOffset.top - 10
                        });
                    }
                }, 500 );
            }
        });
        creatorDiv.mouseout(function(event) {
            if (creatorDiv[0].scrollWidth > creatorDiv[0].clientWidth) {
                enter = false;
                if (tooltip$) {
                    tooltip$.remove();
                    tooltip$ = null;
                }
            }
        });

        var creatorRect = creatorDiv[0].getBoundingClientRect();
        height += Math.max(editRect.height, creatorRect.height);
        var textDiv = $(document.createElement("DIV"));
        textDiv[0].innerHTML = comment.text();
        textDiv.attr('style', 'position:absolute;pointer-events:none;line-height:normal;word-wrap:break-word;overflow:hidden;top:' + height + 'px;width:' + MaxWidth + 'px;' + CommentStyle).appendTo(div);
        height += textDiv[0].getBoundingClientRect().height;
        return height;
    };
    /**
     * TODO: Add comments.
     * @param {Object} id
     */
    Comments.prototype._removeCommentUI = function(id) {
        var lineID = getLinID(id);
        var triangleID = getTriangleID(id);
        if (this._triangleHolder && this._triangleHolder.attr('id') === triangleID) {
            this._triangleHolder = null;
        }
        if (this._lineHolder && this._lineHolder.attr('id') === lineID) {
            this._lineHolder = null;
        }

        $('div#' + id).remove();
        $('div#' + lineID).remove();
        $('div#' + triangleID).remove();

        var children = this._parent.children();
        if (this._triangleHolder === null && children.length >= 3) {
            this._triangleHolder = $(children[children.length / 3 - 1]);
        }
        if (this._lineHolder === null && children.length >= 3) {
            this._lineHolder = $(children[children.length / 3]);
        }

    };
    /**
     * @param {Object} e
     */
    function commentDrag(e) {
        var target = $(e.target);
        var _this = e.data;
        if (e.target.__dataPoint && e.target.__parent) {
            var srcRect = target[0].getBoundingClientRect();
            var targetRect = getDataPointRect(target[0].__dataPoint);
            var parentRect = target[0].__parent.getBoundingClientRect();
            var id = target.attr('id');
            var line = $('#' + getLinID(id));
            var triangle = $('#' + getTriangleID(id));
            updateArrow(srcRect, targetRect, parentRect, line, triangle);

            if (!_this._commentsPositionMap.hasOwnProperty(id)) {
                _this._commentsPositionMap[id] = {};
            }
            _this._commentsPositionMap[id][_this._vizType] = {
                left : Number(target.css("left").replace('px', '')),
                top : Number(target.css("top").replace('px', ''))
            };

            e.stopPropagation();

            _this._dispatchEvent(new Event(Comments.Event_DragComment, _this, _this._commentsMap[id]));
        }
    }

    /**
     * TODO: Add comments.
     * @param {Object} id
     */
    Comments.prototype._drawComment = function(id) {
        var _this = this;
        var comments = this._commentsMap[id];
        if (!comments || comments.length === 0) {
            this._removeCommentUI(id);
            return;
        }

        var dataPoint = this._findDataPoint(comments[0]);
        if (!dataPoint) {
            return;
        }

        var commentDIV = $('div#' + id);
        if (commentDIV.length === 0) {
            commentDIV = $(document.createElement("DIV"));
            commentDIV.appendTo(this._parent).attr('id', id);
            this._initCommentUI(dataPoint, commentDIV);
        } else {
            commentDIV.empty();
        }

        this._addCommentUI(dataPoint, commentDIV, comments);
        commentDIV.draggable({
            containment : "parent",
            start : function(e, ui) {
                e.target.__lastPosition = {
                    x : e.clientX,
                    y : e.clientY
                };
            },
            stop : function(e, ui) {
                e.data = _this;
                commentDrag(e);
            },
            drag : function(e, ui) {
                e.data = _this;
                commentDrag(e);
            }
        });
        commentDIV.bind('click', this, commentDIVClickHandler);
    };
    /**
     * TODO: Add comments.
     * @param {Object} comment
     */
    Comments.prototype._onEditComment = function(comment) {
        if (comment == null) {
            return;
        }
        var id = getID(comment);
        var comments = this._commentsMap[id];
        if (comments == null) {
            return;
        }

        this._dispatchEvent(new Event(Comments.Event_EditComment, this, comment));
    };
    /**
     * TODO: Add comments.
     * @param {Object} comment
     */
    Comments.prototype._onRemoveComment = function(comment) {
        if (comment == null) {
            return;
        }
        var id = getID(comment);
        var comments = this._commentsMap[id];
        if (comments == null) {
            return;
        }

        for (var i = 0; i < comments.length; i++) {
            if (comments[i] === comment) {
                comments.splice(i, 1);
                break;
            }
        }

        this._drawComment(id);

        this._dispatchEvent(new Event(Comments.Event_RemoveComment, this, comment));
    };
    /**
     * TODO: Add comments.
     */
    Comments.prototype.createComment = function(selection) {
        if (selection.length === 0) {
            return;
        }

        var path = selection[selection.length-1].ctx[0];
        var pathInfo = this._getPathInfo(path, this._vizData);
        var comment = new Comment(pathInfo.dimension, pathInfo.dimension2, pathInfo.series);
        comment.text('');

        return comment;
    };
    /**
     * TODO: Add comments.
     * @param {Object} comment
     */
    Comments.prototype.addComment = function(comment) {
        if (comment == null) {
            return;
        }

        var id = getID(comment);
        if (this._commentsMap[id] == null) {
            this._commentsMap[id] = [];
        }
        this._commentsMap[id].push(comment);

        this._drawComment(id);
    };
    /**
     * TODO: Add comments.
     * @param {Object} comment
     */
    Comments.prototype.updateComment = function(comment) {
        if (comment == null) {
            return;
        }

        var id = getID(comment);
        if (!this._commentsMap[id]) {
            return;
        }

        this._drawComment(id);
    };
    /**
     * Resize Comments
     * @param {width: Number, height: Number} size
     */
    Comments.prototype.size = function(size) {
        if (size) {
            $('div#comments-parent').css(size);
            if (this._getConfirmDialog().isVisible()) {
                this._getConfirmDialog().setPos({
                    pageX : $(this._parent).offset().left + $(this._parent).width() / 2,
                    pageY : $(this._parent).offset().top + $(this._parent).height() / 2
                });
            }
        }
    };
    /**
     * Add comments of JSON type to this._commentsMap
     * @param {JSON} comments
     */
    Comments.prototype.json2CommentsMap = function(comments) {
        for (var id in comments) {
            if (comments.hasOwnProperty(id)) {
                if (this._commentsMap[id] == null) {
                    this._commentsMap[id] = [];
                }
                var commentsValue = comments[id];
                for (var i = 0; i < commentsValue.length; i++) {
                    var commentObj = commentsValue[i];
                    var comment = new Comment(commentObj.dimension, commentObj.dimension2, commentObj.series);
                    comment.createTime(commentObj.createTime);
                    comment.text(commentObj.text);
                    this._commentsMap[id].push(comment);
                }
            }
        }
        this._needConfirm = comments["needConfirm"];
        this._commentsPositionMap = comments["commentsPositionMap"];
    };
    /**
     * Convert this._commentsMap to JSON and return
     * @return {JSON}
     */
    Comments.prototype.commentsMap2Json = function() {
        var retJson = {};
        for (var id in this._commentsMap) {
            if (this._commentsMap.hasOwnProperty(id)) {
                var commentsValue/*array*/ = this._commentsMap[id];
                retJson[id] = [];
                for (var i = 0; i < commentsValue.length; i++) {
                    var comment = commentsValue[i];
                    retJson[id].push({
                        "dimension" : comment.dimension(),
                        "dimension2" : comment.dimension2(),
                        "series" : comment.series(),
                        "createTime" : comment.createTime(),
                        "text" : comment.text()
                    });
                }
            }
        }
        retJson["needConfirm"] = this._needConfirm;
        retJson["commentsPositionMap"] = this._commentsPositionMap;
        return retJson;
    };
    var AnnotationItemConst = {
        "name" : "comment",
        "text" : "VIZ_CONTEXTMENU_INSERT_COMMENT",
        "icon" : {
            "show" : "/contextmenu/annotation.png"
        },
        "supportType" : {
            "viz/bar" : true,
            "viz/column" : true,
            "viz/stacked_column" : true,
            "viz/stacked_bar" : true,
            "viz/dual_column" : true,
            "viz/line" : true,
            "viz/area" : true,
            "viz/combination" : true,
            "viz/dual_line" : true,
            "viz/dual_bar" : true,
            "viz/dual_combination" : true,
            "viz/pie" : true,
            "viz/donut" : true,
            "viz/geobubble" : true,
            "viz/choropleth" : true,
            "viz/geopie" : true,
            "viz/scatter" : true,
            "viz/bubble" : true,
            "viz/scatter_matrix" : true,
            "viz/treemap" : true,
            "viz/heatmap" : true,
            "viz/radar" : true,
            "viz/boxplot" : true
        }
    };
    return Comments;
});

define('sap/viz/controls/annotation/views/CommentEditorView',[
// @formatter:off
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/annotation/views/DialogEvent',
    'jquery'],
// @formatter:on
function(LangManager, OOUtil, Utils, UIControl, CSSConst, DialogEvent, $) {
    var MaxCommentLength = 140;
    var lastComment = "";
    var tinymce_init = false;

    var CommentEditorView = function(div/*HTMLDivElement*/) {
        CommentEditorView.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.annotation.views.CommentEditorView";

        //container
        this._div = div;

        this._comment = "";
        this._visible = false;
        this._oRichTextDialog = null;
        this._createChildren();
    };

    OOUtil.extend(CommentEditorView, UIControl);

    // only for calc the position
    CommentEditorView.WIDTH = 497;
    CommentEditorView.HEIGHT = 213;

    /**
     * TODO: Add comments.
     */
    CommentEditorView.prototype._createChildren = function() {
        var _this = this;

        //create dialog
        this._oRichTextDialog = document.createElement('div');
        this._oRichTextDialog.id = "divRichTextDialog";
        $(this._oRichTextDialog).addClass(CSSConst.ANNOTATION_PREFIX + 'richtextdialog');
        $(document.body).append(this._oRichTextDialog);

        this.hide();

        //create dialog header
        var dialogHeader = document.createElement('div');
        dialogHeader.id = "RichTextDialogHeader";
        $(dialogHeader).addClass(CSSConst.ANNOTATION_PREFIX + 'richtextdialog-header');
        $(this._oRichTextDialog).append(dialogHeader);

        var dialogHeaderLeft = document.createElement('span');
        $(dialogHeaderLeft).addClass(CSSConst.ANNOTATION_PREFIX + 'richtextdialog-headerleft');
        $(dialogHeader).append(dialogHeaderLeft);

        var dialogHeaderLeftLabel = document.createElement('span');
        dialogHeaderLeftLabel.id = "RichTextDialogHeaderLabel";
        $(dialogHeaderLeftLabel).addClass(CSSConst.ANNOTATION_PREFIX + 'richtextdialog-headerleft-label');
        $(dialogHeaderLeftLabel).text(LangManager.get("VIZ_ANNOTATION_COMMENT"));
        $(dialogHeaderLeft).append(dialogHeaderLeftLabel);

        var dialogHeaderRight = document.createElement('span');
        $(dialogHeaderRight).addClass(CSSConst.ANNOTATION_PREFIX + 'richtextdialog-headerright');
        $(dialogHeader).append(dialogHeaderRight);

        var dialogHeaderRightClose = document.createElement('a');
        dialogHeaderRightClose.id = "RichTextDialogHeaderClose";
        $(dialogHeaderRightClose).addClass(CSSConst.ANNOTATION_PREFIX + 'richtextdialog-headerright-close');
        $(dialogHeaderRight).append(dialogHeaderRightClose);
        $(dialogHeaderRightClose).click(function() {
            _this.hide();
        });
        //create dialog content
        var dialogContent = document.createElement('div');
        dialogContent.id = "RichTextDialogContent";
        $(dialogContent).addClass(CSSConst.ANNOTATION_PREFIX + 'richtextdialog-content');
        $(this._oRichTextDialog).append(dialogContent);

        var dialogContentTextArea = document.createElement('textarea');
        dialogContentTextArea.id = "RichTextDialogContentTextArea";
        $(dialogContentTextArea).addClass('mceEditor');
        $(dialogContent).append(dialogContentTextArea);

        //create dialog footer
        var dialogFooter = document.createElement('div');
        dialogFooter.id = "RichTextDialogFooter";
        $(dialogFooter).addClass(CSSConst.ANNOTATION_PREFIX + 'richtextdialog-footer');
        $(this._oRichTextDialog).append(dialogFooter);

        var dialogFooterButtons = document.createElement('div');
        $(dialogFooterButtons).addClass(CSSConst.ANNOTATION_PREFIX + 'richtextdialog-footer-buttons');
        $(dialogFooter).append(dialogFooterButtons);

        var dialogFooterOKButton = document.createElement('button');
        dialogFooterOKButton.id = "RichTextDialogOKButton";
        $(dialogFooterOKButton).text(LangManager.get("VIZ_COMMON_OK"));
        $(dialogFooterOKButton).addClass(CSSConst.ANNOTATION_PREFIX + 'button');
        $(dialogFooterOKButton).addClass(CSSConst.COMMON_PREFIX + 'button');
        $(dialogFooterButtons).append(dialogFooterOKButton);
        $(dialogFooterOKButton).click(function() {
            _this.hide();
            _this._comment = tinymce.activeEditor.getContent();
            _this._dispatchEvent(new DialogEvent(DialogEvent.OK, _this, {
                userData : _this._userData,
                comment : _this._comment
            }));
        });
        var dialogFooterCancelButton = document.createElement('button');
        dialogFooterCancelButton.id = "RichTextDialogCancelButton";
        $(dialogFooterCancelButton).text(LangManager.get("VIZ_COMMON_CANCEL"));
        $(dialogFooterCancelButton).addClass(CSSConst.ANNOTATION_PREFIX + 'button');
        $(dialogFooterCancelButton).addClass(CSSConst.COMMON_PREFIX + 'button');
        $(dialogFooterButtons).append(dialogFooterCancelButton);
        $(dialogFooterCancelButton).click(function() {
            _this.hide();
        });

        if (!tinymce_init) {
            tinymce_init = true;
            tinymce.init({
                theme : "advanced",
                mode : "textareas",
                theme_advanced_buttons1 : "bold,italic,underline,strikethrough,|,forecolor,backcolor,|,justifyleft,justifycenter,justifyright,justifyfull,|,fontselect,fontsizeselect",
                theme_advanced_path : false,
                theme_advanced_font_sizes : "8px,9px,10px,11px,12px,14px,16px,18px,20px,22px,24px,26px,28px,36px,48px,72px",
                theme_advanced_statusbar_location : "none",
                editor_selector : "mceEditor",

                setup : function(ed) {
                    ed.onEvent.add(function(ed, e) {
                        var plainText = ed.getContent({
                            format : 'text'
                        });
                        if (plainText.length > MaxCommentLength) {
                            ed.setContent(lastComment);
                            //move cursor to the end of content
                            ed.selection.select(ed.getBody(), true);
                            ed.selection.collapse(false);
                        } else {
                            lastComment = ed.getContent();
                        }
                    });
                }
            });
        }

        this._blockLayout = document.createElement('div');
        this._blockLayout.id = "blockLayout";
        $(this._blockLayout).addClass(CSSConst.ANNOTATION_PREFIX + 'block-layer');
    };
    /**
     * TODO: Add comments.
     */
    CommentEditorView.prototype.show = function(options) {
        if (options) {
            if (options.hasOwnProperty("userData")) {
                this._userData = options.userData;
            }

            if (options.hasOwnProperty("comment") && Utils.isString(options.comment)) {
                this._comment = options.comment;
                lastComment = options.comment;
                if (tinymce.activeEditor) {
                    tinymce.activeEditor.setContent(this._comment);
                }
            }

            if (options.hasOwnProperty("position")) {
                this.setPos(options.position);
            }
        }

        this._visible = true;

        $(document.body).append(this._blockLayout);
        $(this._oRichTextDialog).show();
    };
    /**
     * TODO: Add comments.
     */
    CommentEditorView.prototype.hide = function() {
        this._visible = false;
        $(this._blockLayout).detach();
        $(this._oRichTextDialog).hide();
    };
    /**
     * TODO: Add comments.
     */
    CommentEditorView.prototype.setPos = function(pos) {
        $(this._oRichTextDialog).css({
            position : "absolute",
            left : pos.pageX - CommentEditorView.WIDTH / 2,
            top : pos.pageY - CommentEditorView.HEIGHT / 2
        });
    };
    /**
     * Check whether Comment Editor Dialog is visible or not
     * @return {Boolean}
     */
    CommentEditorView.prototype.isVisible = function() {
        return this._visible;
    };
    return CommentEditorView;
});

// @formatter:off
define('sap/viz/controls/annotation/Annotation',[
    'jquery',
    'sap/viz/controls/common/VizControlBase',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/config/GlobalConfig',
    'sap/viz/controls/common/constants/EventTypeConst',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/events/FeedEvent',
    'sap/viz/controls/common/events/EventDispatcher',
    'sap/viz/controls/annotation/AnnotationConfig',
    'sap/viz/controls/annotation/AnnotationEvent',
    'sap/viz/controls/annotation/views/Comments',
    'sap/viz/controls/annotation/views/DialogEvent',
    'sap/viz/controls/annotation/views/CommentEditorView'
],
function($, VizControlBase, OOUtil, GlobalConfig, EventTypeConst, Event, FeedEvent, EventDispatcher,
// @formatter:on
    AnnotationConfig, AnnotationEvent, Comments, DialogEvent, CommentEditorView) {
    var Annotation = function(div/*HTMLDivElement*/, uiConfig/*JSON*/) {
        Annotation.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.annotation.Annotation";


        this._div = div;
        this._uiConfig = uiConfig ? uiConfig : AnnotationConfig.instance();
        // popupLayer should be set to annotation, or we will use default div as the popupLayer.
        this._popupLayer = div;
        this._commentEditor = null;

        this._createChildren();
    };
    OOUtil.extend(Annotation, VizControlBase);
    Annotation.prototype._createChildren = function() {
        this._comments = new Comments();
        var assetPath = this._uiConfig.commentsAssetFolderPath;
        this._comments.assetFolder(assetPath ? assetPath : GlobalConfig.defaultAssetsRoot() + '/controls/frame/assets');
        this._comments.addEventListener(Comments.Event_EditComment, this._editCommentHandler, this);
        this._comments.addEventListener(Comments.Event_RemoveComment, this._removeCommentHandler, this);
        this._comments.addEventListener(Comments.Event_DragComment, this._dragCommentHandler, this);
    };
    /**
     * Create or get commentEditor if it exists.
     */
    Annotation.prototype._getCommentEditor = function() {
        if (!this._commentEditor) {
            var popupLayer = this._popupLayer;
            if (popupLayer) {
                this._commentEditor = new CommentEditorView($(popupLayer));
                this._commentEditor.addEventListener(DialogEvent.OK, this._commentChangedHandler, this);
            }
        }
        return this._commentEditor;
    };
    /**
     * Edit comment.
     */
    Annotation.prototype._editCommentHandler = function(e) {
        var comment = e.data;
        var commentEditor = this._getCommentEditor();
        commentEditor.show({
            userData : {
                isNew : false,
                comment : comment
            },
            comment : comment.text(),
            position : {
                pageX : $(this._div).offset().left + $(this._div).width() / 2,
                pageY : $(this._div).offset().top + $(this._div).height() / 2
            }
        });
    };
    /**
     * Remove comment.
     */
    Annotation.prototype._removeCommentHandler = function(e) {
        var comment = e.data;
        //dispatch comment changed event for save
        this._dispatchEvent(new Event(AnnotationEvent.COMMENT_CHANGED_EVENT, this, comment));
    };
    /**
     * Drag comment.
     */
    Annotation.prototype._dragCommentHandler = function(e) {
        var comment = e.data;
        //dispatch comment changed event for save
        this._dispatchEvent(new Event(AnnotationEvent.COMMENT_CHANGED_EVENT, this, comment));
    };
    /**
     * Handler for comment changed.
     * @param {Event} e
     */
    Annotation.prototype._commentChangedHandler = function(e) {
        var isNew = e.data.userData.isNew;
        var comment = e.data.userData.comment;
        var text = e.data.comment;

        comment.createTime(new Date().toLocaleString());
        comment.text(text);
        if (isNew) {
            this._comments.addComment(comment);
        } else {
            this._comments.updateComment(comment);
        }

        var data = {
            commentChanged : true
        };
        //dispath viz definition changed event
        this._dispatchEvent(new Event(EventTypeConst.VIZ_DEFINITION_CHANGED, this, data));
        //dispatch comment changed event
        this._dispatchEvent(new Event(AnnotationEvent.COMMENT_CHANGED_EVENT, this, comment));
    };
    /**
     * Get/Set popupLayer.
     * @param {HTMLDivElement} popupLayer
     */
    Annotation.prototype.popupLayer = function(popupLayer) {
        if (arguments.length > 0) {
            this._popupLayer = popupLayer;
            return this;
        } else {
            return this._popupLayer;
        }
    };
    /**
     * Validate size for annotation.
     * @param {Number} w width
     * @param {Number} h height
     */
    Annotation.prototype.validateSize = function(w, h) {
        if (this._comments) {
            this._comments.size({
                width : w,
                height : h
            });
        }

        if (this._commentEditor && this._commentEditor.isVisible()) {
            this._commentEditor.setPos({
                pageX : $(this._div).offset().left + $(this._div).width() / 2,
                pageY : $(this._div).offset().top + $(this._div).height() / 2
            });
        }
    };
    /**
     * Destroy itself.
     */
    Annotation.prototype.destroy = function() {
        if (this._commentEditor) {
            this._commentEditor.removeAllEventListeners();
            this._commentEditor = null;
        }
        if (this._popupLayer) {
            this._popupLayer = null;
        }
        $(this._div).remove();
    };
    /**
     * Add new comment.
     */
    Annotation.prototype.addComment = function(selection) {
        var comment = this._comments.createComment(selection);
        if (comment) {
            var commentEditor = this._getCommentEditor();
            commentEditor.show({
                userData : {
                    isNew : true,
                    comment : comment
                },
                comment : '',
                position : {
                    pageX : $(this._div).offset().left + $(this._div).width() / 2,
                    pageY : $(this._div).offset().top + $(this._div).height() / 2
                }
            });
        }
    };
    /**
     * Set chart info if chart changes.
     * @param {JSON} value {
     *     'vizType' : vizType,
     *     'vizData' : vizData
     * }
     */
    Annotation.prototype.setChartInfo = function(value) {
        this._comments.setChartInfo(value);
    };
    /**
     * Redraw comments if chart re-rendered.
     */
    Annotation.prototype.redraw = function() {
        this._comments.redraw();
    };
    /**
     * Initialize layout if chart is changing.
     */
    Annotation.prototype.clean = function() {
        this._comments.clean();
    };
    /**
     * Clean annotation if feeds changed.
     */
    Annotation.prototype.feedsChanged = function() {
        this._comments.feedsChanged();
    };
    /**
     * Get all comments of JSON type
     * @return {JSON}
     */
    Annotation.prototype.save = function() {
        return this._comments.commentsMap2Json();
    };
    /**
     * Add comments of JSON type
     * @param {JSON} valueJSON
     */
    Annotation.prototype.load = function(valueJSON) {
        this._comments.json2CommentsMap(valueJSON);
    };
    return Annotation;
});

define('sap/viz/controls/annotationcontrol/AnnotationItem',[
// @formatter:off
],
function() {
// @formatter:on
    /**
     * AnnotationItem is the basic visual abstraction of each annotation, it contains a DataContext object which represents the data position and original value in the current dataset.
     * @param {String} id annotation item id
     * @param {String} type annotation item type
     * @param {Object} dataContext annotation 
     * @param {Object} style
     *                 style for this annotation item
     * @param {Object} contents
     *                 annotation contents, allow consumer app to keep its own data
     */
    var AnnotationItem = function(id, type, dataContext, style, contents) {
        this.__className = "sap.viz.controls.annotationcontrol.AnnotationItem";

        this._id = id;
        this._type = type;
        this._dataContext = dataContext;
        this._style = style;
        this._contents = contents;
    };

    /**
     * Get/Set AnnotationItem id.
     * @method sap.viz.controls.annotationcontrol.AnnotationItem.prototype.id
     * @param {string} value
     * @return {string}
     */
    AnnotationItem.prototype.id = function(value){
        if (arguments.length > 0) {
            this._id = value;
        } else {
            return this._id;
        }
    };
    /**
     * Get/Set AnnotationItem type.
     * @method sap.viz.controls.annotationcontrol.AnnotationItem.prototype.type
     * @param {string} value
     * @return {string}
     */
    AnnotationItem.prototype.type = function(value){
        if (arguments.length > 0) {
            this._type = value;
        } else {
            return this._type;
        }
    };
    /**
     * Get/Set AnnotationItem dataContext.
     * @method sap.viz.controls.annotationcontrol.AnnotationItem.prototype.dataContext
     * @param {Object} value
     * @return {Object}
     */
    AnnotationItem.prototype.dataContext = function(value){
        if (arguments.length > 0) {
            this._dataContext = value;
        } else {
            return this._dataContext;
        }
    };
    /**
     * Get/Set AnnotationItem style.
     * @method sap.viz.controls.annotationcontrol.AnnotationItem.prototype.style
     * @param {Object} value
     * @return {Object}
     */
    AnnotationItem.prototype.style = function(value){
        if (arguments.length > 0) {
            this._style = value;
        } else {
            return this._style;
        }
    };
    /**
     * Get/Set AnnotationItem contents.
     * @method sap.viz.controls.annotationcontrol.AnnotationItem.prototype.contents
     * @param {Object} value
     * @return {Object}
     */
    AnnotationItem.prototype.contents = function(value){
        if (arguments.length > 0) {
            this._contents = value;
        } else {
            return this._contents;
        }
    };

    return AnnotationItem;
});

// @formatter:off
define('sap/viz/controls/annotationcontrol/AnnotationControlConfig',[
    'sap/viz/controls/common/config/GlobalConfig'
],
function(GlobalConfig) {
// @formatter:on
    var AnnotationControlConfig = {};

    AnnotationControlConfig.instance = function() {
        return {
            "allowDataPointValueChange" : false,
            "visualStrategies" : {
                "indicator" : {
                    "count" : {
                        "disabledRules" : ["SAME_ORIGINAL_VALUE"] // or change the meaning to "allow invalid rules like ORIGINAL_VALUE"
                    }
                }
            }
        };
    };

    GlobalConfig.registerUIConfig(GlobalConfig.DEFAULT_UICONFIG_TYPE_ANNOTATIONCONTROL, AnnotationControlConfig);
    return AnnotationControlConfig;
});

define('sap/viz/controls/annotationcontrol/AnnotationControlEvent',[
// @formatter:off
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function(OOUtil, Event) {

    var AnnotationControlEvent = function(type, target, data) {
        AnnotationControlEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.annotationcontrol.AnnotationControlEvent";
    };

    OOUtil.extend(AnnotationControlEvent, Event);

    AnnotationControlEvent.ANNOTATION_SELECTED_EVENT = "annotationSelected";
    AnnotationControlEvent.ANNOTATION_LAYOUTED_EVENT = "annotationLayouted";

    return AnnotationControlEvent;
});

define('sap/viz/controls/annotationcontrol/Layouter',[
// @formatter:off
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/events/Event'
],
function(OOUtil, Utils, Event) {
// @formatter:on
    var Layouter = function() {
        this.__className = "sap.viz.controls.annotationcontrol.Layouter";
    };

    return Layouter;
});

// @formatter:off
define('sap/viz/controls/annotationcontrol/AnnotationControl',[
    'jquery',
    'sap/viz/controls/common/VizControlBase',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/annotationcontrol/AnnotationControlConfig',
    'sap/viz/controls/annotationcontrol/AnnotationControlEvent',
    'sap/viz/controls/annotationcontrol/AnnotationItem',
    'sap/viz/controls/annotationcontrol/Layouter'
],
function($, VizControlBase, OOUtil, AnnotationControlConfig, AnnotationControlEvent, AnnotationItem, Layouter){
// @formatter:on
    var AnnotationControl = function(div/*HTMLDivElement*/, uiConfig/*JSON*/) {
        AnnotationControl.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.annotationcontrol.AnnotationControl";

        this._div = div;
        this._uiConfig = uiConfig ? uiConfig : AnnotationControlConfig.instance();
        this._annotationItems = [];
        this._createChildren();
    };
    
    OOUtil.extend(AnnotationControl, VizControlBase);
    
    AnnotationControl.prototype._createChildren = function() {
        this._layouter = new Layouter();
    };
    /**
     * Get/Set annotationItems.
     * @method sap.viz.controls.annotationcontrol.AnnotationControl.prototype.annotationItems
     * @param {[<AnnotationItem>]} value
     * @return {[<AnnotationItem>]}
     */
    AnnotationControl.prototype.annotationItems = function(value){
        if (arguments.length > 0) {
            this._annotationItems = value;
        } else {
            return this._annotationItems;
        }
    };
    /**
     * show annotations.
     * @method sap.viz.controls.annotationcontrol.AnnotationControl.prototype.showAnnotations
     */
    AnnotationControl.prototype.showAnnotations = function(){
    };
    /**
     * hide annotations.
     * @method sap.viz.controls.annotationcontrol.AnnotationControl.prototype.hideAnnotations
     */
    AnnotationControl.prototype.hideAnnotations = function(){
    };
    
    /**
     * get invalid annotations.
     * @method sap.viz.controls.annotationcontrol.AnnotationControl.prototype.invalidAnnotations
     * @return {[<AnnotationItem>]}
     */
    AnnotationControl.prototype.invalidAnnotations = function(){
        return [];
    };
    
    /**
     * get annotations position.
     * @method sap.viz.controls.annotationcontrol.AnnotationControl.prototype.getAnnotationPosition
     * @param {[<AnnotationItem>]} items
     * @return {[<{left : Number, top : Number}>]}
     */
    AnnotationControl.prototype.getAnnotationPosition = function(items){
        if(!items || items.length ===0){
            return [];
        }
        
        var dataPoints = [];
        for(var i=0; i<items.length; ++i){
            dataPoints[i] = items[i].dataContext().context;
        }
        return this._vizProxy().getDataPointsPosition(dataPoints);
    };
    
    /**
     * Get all comments of JSON type
     * @return {JSON}
     */
    AnnotationControl.prototype.save = function() {
        return {};
    };
    /**
     * Add comments of JSON type
     * @param {JSON} valueJSON
     */
    AnnotationControl.prototype.load = function(valueJSON) {

    };
    return AnnotationControl;
});

// @formatter:off
define('sap/viz/controls/chart/ChartConfig',['sap/viz/controls/common/config/GlobalConfig'], function(GlobalConfig) {
    // @formatter:on
    var ChartConfig = {};

    var backgroundBorder = {
        "border" : {
            "left" : {
                "visible" : false
            },
            "right" : {
                "visible" : false
            },
            "top" : {
                "visible" : false
            },
            "bottom" : {
                "visible" : false
            }
        }
    };
    var xyChartConfig = {
        "background" : backgroundBorder,
        "xAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "yAxis" : {
            "title" : {
                "visible" : true
            },
            "gridline" : {
                "visible" : false
            }
        }
    };

    var xyzChartConfig = {
        "background" : backgroundBorder,
        "xAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "yAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "zAxis" : {
            "title" : {
                "visible" : true
            }
        }
    };

    var barChartConfig = {
        "plotArea" : {
            "gridline" : {
                "visible" : false
            },
            "background" : backgroundBorder
        },
        "categoryAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "valueAxis" : {
            "title" : {
                "visible" : true
            }
        }
    };

    var dualBarChartConfig = {
        "plotArea" : {
            "gridline" : {
                "visible" : false
            },
            "background" : backgroundBorder
        },
        "categoryAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "valueAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "valueAxis2" : {
            "title" : {
                "visible" : true
            }
        }
    };

    var lineChartConfig = {
        "plotArea" : {
            "marker" : {
                "shape" : "circle",
                "size" : 6,
                "visible" : true
            },
            "gridline" : {
                "visible" : false
            },
            "background" : backgroundBorder
        },
        "categoryAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "valueAxis" : {
            "title" : {
                "visible" : true
            }
        }
    };

    var dualLineChartConfig = {
        "plotArea" : {
            "marker" : {
                "shape" : "circle",
                "size" : 6,
                "visible" : true
            },
            "gridline" : {
                "visible" : false
            },
            "background" : backgroundBorder
        },
        "categoryAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "valueAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "valueAxis2" : {
            "title" : {
                "visible" : true
            }
        }
    };

    var combinationChartConfig = {
        "plotArea" : {
            "line" : {
                "marker" : {
                    "shape" : "circle",
                    "size" : 6,
                    "visible" : true
                }
            },
            "gridline" : {
                "visible" : false
            },
            "background" : backgroundBorder
        },
        "categoryAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "valueAxis" : {
            "title" : {
                "visible" : true
            }
        }
    };

    var dualCombinationChartConfig = {
        "plotArea" : {
            "line" : {
                "marker" : {
                    "shape" : "circle",
                    "size" : 6,
                    "visible" : true
                }
            },
            "gridline" : {
                "visible" : false
            },
            "background" : backgroundBorder
        },
        "categoryAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "valueAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "valueAxis2" : {
            "title" : {
                "visible" : true
            }
        }
    };

    var bubbleChartConfig = {
        "plotArea" : {
            "showNegativeValues" : false,
            "gridline" : {
                "visible" : false
            },
            "background" : backgroundBorder
        },
        "sizeLegend" : {
            "visible" : true
        },
        "valueAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "valueAxis2" : {
            "title" : {
                "visible" : true
            }
        }
    };

    var scatterChartConfig = {
        "plotArea" : {
            "gridline" : {
                "visible" : false
            },
            "background" : backgroundBorder
        },
        "valueAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "valueAxis2" : {
            "title" : {
                "visible" : true
            }
        }
    };

    var scatterMatrixChartConfig = {
        "background" : backgroundBorder,
        "xAxis" : {
            "title" : {
                "visible" : true
            },
            "gridline" : {
                "visible" : false
            }
        },
        "yAxis" : {
            "title" : {
                "visible" : true
            },
            "gridline" : {
                "visible" : false
            }
        }
    };

    var trellisBarChartConfig = {
        "plotArea" : {
            "gridline" : {
                "visible" : false
            },
            "background" : backgroundBorder
        },
        "rowAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "columnAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "valueAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "categoryAxis" : {
            "title" : {
                "visible" : true
            }
        }
    };

    var trellisDualChartConfig = {
        "plotArea" : {
            "gridline" : {
                "visible" : false
            },
            "background" : backgroundBorder
        },
        "rowAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "columnAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "valueAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "valueAxis2" : {
            "title" : {
                "visible" : true
            }
        },
        "categoryAxis" : {
            "title" : {
                "visible" : true
            }
        }
    };

    var trellisPieChartConfig = {
        "plotArea" : {
            "background" : backgroundBorder
        },
        "rowAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "columnAxis" : {
            "title" : {
                "visible" : true
            }
        }
    };

    var trellisScatterChartConfig = {
        "plotArea" : {
            "gridline" : {
                "visible" : false
            },
            "background" : backgroundBorder
        },
        "valueAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "valueAxis2" : {
            "title" : {
                "visible" : true
            }
        },
        "rowAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "columnAxis" : {
            "title" : {
                "visible" : true
            }
        }
    };

    var trellisBubbleChartConfig = {
        "plotArea" : {
            "showNegativeValues" : false,
            "gridline" : {
                "visible" : false
            },
            "background" : backgroundBorder
        },
        "sizeLegend" : {
            "visible" : true
        },
        "valueAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "valueAxis2" : {
            "title" : {
                "visible" : true
            }
        },
        "rowAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "columnAxis" : {
            "title" : {
                "visible" : true
            }
        }
    };

    var multiChartConfig = {
        "background" : backgroundBorder,
        "rowAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "columnAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "xAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "yAxis" : {
            "title" : {
                "visible" : true
            },
            "gridline" : {
                "visible" : false
            }
        }
    };

    var multiHorizontalChartConfig = {
        "background" : backgroundBorder,
        "rowAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "columnAxis" : {
            "title" : {
                "visible" : true
            }
        },
        "xAxis" : {
            "title" : {
                "visible" : true
            },
            "gridline" : {
                "visible" : false
            }
        },
        "yAxis" : {
            "title" : {
                "visible" : true
            }
        }
    };

    ChartConfig.instance = function() {
        return {
            'enableTrellis' : true,
            'enableMorphing' : true,
            "useBuiltInPropertyZoneInteraction" : false,
            "useDefaultChartSizeForTrellis" : false,
            "defaultLabelFormatString" : [['u']],
            "defaultProperties" : {
                "title" : {
                    "visible" : true
                },
                "tooltip" : {
                    "visible" : true
                },
                "dataLabel" : {
                    "visible" : false
                },
                "plotArea" : {
                    "animation" : {
                        "dataLoading" : false,
                        "dataUpdating" : false,
                        "resizing" : false
                    }
                },
                "legend" : {
                    "title" : {
                        "visible" : true
                    },
                    "visible" : true
                }
            },
            "specificProperties" : {
                "bar" : barChartConfig,
                "column" : barChartConfig,
                "stacked_bar" : barChartConfig,
                "stacked_column" : barChartConfig,
                "100_stacked_bar" : barChartConfig,
                "100_stacked_column" : barChartConfig,
                "dual_bar" : dualBarChartConfig,
                "dual_column" : dualBarChartConfig,
                "line" : lineChartConfig,
                "horizontal_line" : lineChartConfig,
                "combination" : combinationChartConfig,
                "horizontal_combination" : combinationChartConfig,
                "dual_line" : dualLineChartConfig,
                "dual_horizontal_line" : dualLineChartConfig,
                "dual_combination" : dualCombinationChartConfig,
                "dual_horizontal_combination" : dualCombinationChartConfig,
                "pie" : {},
                "donut" : {},
                "scatter" : scatterChartConfig,
                "bubble" : bubbleChartConfig,
                "trellis_bar" : trellisBarChartConfig,
                "trellis_column" : trellisBarChartConfig,
                "trellis_stacked_bar" : trellisBarChartConfig,
                "trellis_stacked_column" : trellisBarChartConfig,
                "trellis_100_stacked_bar" : trellisBarChartConfig,
                "trellis_100_stacked_column" : trellisBarChartConfig,
                "trellis_dual_bar" : trellisDualChartConfig,
                "trellis_dual_column" : trellisDualChartConfig,
                "trellis_line" : trellisBarChartConfig,
                "trellis_horizontal_line" : trellisBarChartConfig,
                "trellis_combination" : trellisBarChartConfig,
                "trellis_horizontal_combination" : trellisBarChartConfig,
                "trellis_dual_line" : trellisDualChartConfig,
                "trellis_dual_horizontal_line" : trellisDualChartConfig,
                "trellis_dual_combination" : trellisDualChartConfig,
                "trellis_dual_horizontal_combination" : trellisDualChartConfig,
                "trellis_pie" : trellisPieChartConfig,
                "trellis_donut" : trellisPieChartConfig,
                "trellis_scatter" : trellisScatterChartConfig,
                "trellis_bubble" : trellisBubbleChartConfig,
                "area" : xyChartConfig,
                "horizontal_area" : xyChartConfig,
                "100_area" : xyChartConfig,
                "100_horizontal_area" : xyChartConfig,
                "multi_area" : multiChartConfig,
                "multi_100_area" : multiChartConfig,
                "multi_horizontal_area" : multiHorizontalChartConfig,
                "multi_100_horizontal_area" : multiHorizontalChartConfig,
                "3d_column" : xyzChartConfig,
                "3d_bar" : xyzChartConfig,
                "pie_with_depth" : {},
                "geobubble" : {
                    "plotArea" : {
                        "showNegativeValues" : false
                    },
                    "sizeLegend" : {
                        "visible" : true
                    },
                    "geoContainer" : {
                        "isFixedScale" : false,
                        "scale" : null,
                        "center" : []
                    }
                },
                "choropleth" : {
                    "geoContainer" : {
                        "isFixedScale" : false,
                        "scale" : null,
                        "center" : []
                    }
                },
                "geopie" : {
                    "sizeLegend" : {
                        "visible" : true
                    },
                    "geoContainer" : {
                        "isFixedScale" : false,
                        "scale" : null,
                        "center" : []
                    }
                },
                "geomap" : {
                    "provider" : "ESRI"
                },
                "scatter_matrix" : scatterMatrixChartConfig,
                "heatmap" : {
                    "xAxis" : {
                        "title" : {
                            "visible" : true
                        }
                    },
                    "yAxis" : {
                        "title" : {
                            "visible" : true
                        }
                    }
                },
                "treemap" : {},
                "number" : {},
                "boxplot" : xyChartConfig,
                "horizontal_boxplot" : xyChartConfig,
                "network" : {},
                "radar" : {
                    "plotArea" : {
                        "marker" : {
                            "size" : 6
                        },
                        "valueAxis" : {
                            "title" : {
                                "visible" : true
                            }
                        },
                        "polarAxis" : {
                            "title" : {
                                "visible" : true
                            }
                        }
                    }
                },
                "multi_radar" : {
                    "rowAxis" : {
                        "title" : {
                            "visible" : true
                        }
                    },
                    "columnAxis" : {
                        "title" : {
                            "visible" : true
                        }
                    },
                    "plotArea" : {
                        "marker" : {
                            "size" : 6
                        },
                        "valueAxis" : {
                            "title" : {
                                "visible" : true
                            }
                        },
                        "polarAxis" : {
                            "title" : {
                                "visible" : true
                            }
                        }
                    }
                },
                "tagcloud" : {},
                "tree" : {},
                "waterfall" : xyChartConfig,
                "horizontal_waterfall" : xyChartConfig

                //TODO: For extension chart, will be handled by another way later.
                //"ext/table" : {},
                //"ext/pa/funnel" : {},
                //"ext/pa/pc" : {}
            }
        };
    };

    GlobalConfig.registerUIConfig(GlobalConfig.DEFAULT_UICONFIG_TYPE_CHART, ChartConfig);
    return ChartConfig;
});

define('sap/viz/controls/chart/ChartPreHandler',[
// @formatter:off
    'sap/viz/controls/common/managers/LangManager'
],
function(LangManager) {
// @formatter:on
    var ChartPreHandler = function() {
    };

    ChartPreHandler.prototype.preCreateViz = function(options) {
        if (options.properties) {
            options.properties.title = options.properties.title || {};
            options.properties.title.text = options.properties.title.text || LangManager.get('IDS_DEFAULTCHARTTITLE');
        }
        return options;
    };

    ChartPreHandler.prototype.preVizUpdate = function(options) {
        return options;
    };

    ChartPreHandler.prototype.preLoadChart = function(chartObj) {
        return chartObj;
    };
    return ChartPreHandler;
});

define('sap/viz/controls/chart/ChartProxy',['jquery', 'sap/viz/controls/common/constants/ChartConst', 'sap/viz/controls/common/utils/ChartTypeUtil'], function($, ChartConst, ChartTypeUtil) {
    var ChartProxy = function ChartProxy(chart) {
        this.__className = "sap.viz.controls.chart.ChartProxy";
        this._chart = chart;
        this._enabled = true; 
    };

    ChartProxy.prototype.pauseRender = function() {
        this._enabled = false; 
    };
    
    ChartProxy.prototype.resumeRender = function() {
        if (this._enabled) {
            return;
        }
        
        this._enabled = true;
        
        var chartView = this._chart._chartView(); 
        var options = chartView._options;
        var chartType = this._chart.vizType();
        var para; 
        
        if (chartType == ChartConst.TYPE_GEO_MAP) {
            if (chartView._chart) {
                chartView.doUpdate.apply(chartView, [chartView._chart, {
                    data : options.data, 
                    feeding : options.feeding,
                    properties : options.properties,
                    css : options.css
                }]);
                chartView.doProperties.apply(chartView, [options.properties]);    
            }
            return;
        } else if (chartView._chart && chartView._chart.type == chartType) {
            para = {
                data : options.data,
                properties : options.properties,
                css : options.css
            };
            if (ChartTypeUtil.isInfoChart(chartType)) {
                para.bindings = options.feeding;
                para.scales = options.scales; 
            } else {
                para.feeding = options.feeding;
            }
            chartView._chart['update'].apply(chartView._chart, [para]);
            
        } else {
            para = {
                type : chartType,
                data : options.data,
                properties : options.properties,
                css : options.css,
                events : options.events,
                container : chartView._chartLayer$.get(0)
            };
            if (ChartTypeUtil.isInfoChart(chartType)) {
                para.bindings = options.feeding;
                para.scales = options.scales;
            } else {
                para.feeding = options.feeding;
            }
            chartView._chart = sap.viz.api.core.createViz(para);
            chartView._postVizProcess(options);
        }
        
        chartView._updateChartSize(true);
    };
    
    ChartProxy.prototype.execute = function(func) {
        if (!this._enabled) {
            return;
        }
        
        var chartView = this._chart._chartView();
          
        if (func.indexOf('map_') === 0) {
            return chartView[func.slice(4)].apply(chartView, Array.prototype.slice.call(arguments, 1));
        } else if (func == 'sap.viz.api.core.createViz') {
            return sap.viz.api.core.createViz(Array.prototype.slice.call(arguments, 1)[0]);
        } else {
            if (chartView._chart) {
                return chartView._chart[func].apply(chartView._chart, Array.prototype.slice.call(arguments, 1));    
            }
        }
    };
    
    ChartProxy.prototype.get = function(func, defaultValue) {
        var chartView = this._chart._chartView();  
        
        if (!this._enabled && defaultValue !== undefined) {
            return defaultValue;
        } else {
            if (func == 'type') {
                return chartView._chart[func];
            } else {
                return chartView._chart ? this.execute(func) : defaultValue;
            }
        }
    };
    
    ChartProxy.prototype.set = function(func, value) {
        this.execute(func, value)
    };

    return ChartProxy;
});

define('sap/viz/controls/common/constants/MapProviderConst',[],function() {

    var MapProviderConst = {};

    // Map provider
    
    MapProviderConst.ESRI = "ESRI";
    
    MapProviderConst.CVOM = "CVOM";
    
    MapProviderConst.NAVTEQ = "NAVTEQ";

    return MapProviderConst;
});
// @formatter:off
define('sap/viz/controls/common/utils/DatasetUtil',[
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/metadata/MetadataFactory',
    'sap/viz/controls/common/constants/DatasetTypeConst'
],
function(Utils, MetadataFactory, DatasetTypeConst) {
// @formatter:on
    var DatasetUtil = {};
    DatasetUtil.getType = function(dataset) {
        if (dataset instanceof sap.viz.api.data.FlatTableDataset) {
            return DatasetTypeConst.FLAT_TABLE;
        } else if (dataset instanceof sap.viz.api.data.CrosstableDataset) {
            return DatasetTypeConst.CROSS_TABLE;
        }
    };
    var SupportCharts = {
            'viz/bubble': ['bubbleWidth', 'bubbleHeight'],
            'viz/geobubble': ['featureValues'],
            'viz/multi_geobubble': ['featureValues'],
            'viz/multi_bubble': ['bubbleWidth', 'bubbleHeight'],
            // TODO chartType has not determined, this function needs to retest
            'info/bubble': ['bubbleWidth', 'bubbleHeight'],
            'info/geobubble': ['featureValues']
        };
    DatasetUtil.hasNegativeMeasureValue = function (chartType, feedItems, dataset) {
        if (this.getType(dataset) === DatasetTypeConst.FLAT_TABLE) {
            return this._hasNegativeMeasureValueForFlattableDataset(chartType, feedItems, dataset);
        } else if (this.getType(dataset) === DatasetTypeConst.CROSS_TABLE) {
            return this._hasNegativeMeasureValueForCrosstableDataset(chartType, dataset);
        }
    };
    
    // this function is used to check if there are negative values in the flattableDataset
    DatasetUtil._hasNegativeMeasureValueForFlattableDataset = function (chartType, feedItems, dataset) {
        var measureIds = Utils.clone(SupportCharts[chartType]);
        if (!measureIds || !dataset) {
            return false;
        }
        var data = dataset.data();
        if (!data) {
            return false;
        }
        var value = data.data;
        var fields = data.metadata.fields;
        var feedValues = [], i, j, index;
        // put all the value that match the measureId into the array
        for (i = 0; i < feedItems.length; i++){
            for (j=0; j < measureIds.length; j++) {
              if (feedItems[i].id() === measureIds[j]) {
                  var feedItemValues = feedItems[i].values();
                  for (index = 0; index < feedItemValues.length; index++){
                      feedValues.push(feedItemValues[index]);
                  }                  
              }
            }
        } 
        // find the indexes in the data Array and check the value
        for (i = 0; i < feedValues.length; i++) {
            for (j=0; j < fields.length; j++) {
              if (feedValues[i].name === fields[j].name) {
                  for (index = 0; index < value.length; index++){
                      if (Utils.isArray(value[index])) {
                          if(value[index][j] < 0){
                              return true;
                          }
                      } else{
                          if(value[j] < 0){
                              return true;
                          }
                      }
                  }
              }
            }           
        }
        return false;
                  
    };
    
    // this function is used to check if there are negative values in the crosstableDataset
    DatasetUtil._hasNegativeMeasureValueForCrosstableDataset = function (chartType, dataset) {
        var measureIds = Utils.clone(SupportCharts[chartType]);
        if (!measureIds || !dataset) {
            return false;
        }
        var data = dataset.data();
        if (!data) {
            return false;
        }
        var bindingDefs = MetadataFactory.get(chartType).getBindingDefs();
        var mg = data.measureValuesGroup;
        var indexes = [], i, j;
        for (i = 0; i < bindingDefs.length; i++) {
            if (measureIds.length <= 0) {
                break;
            }
            for (j = 0; j < measureIds.length; j++) {
                if (bindingDefs[i].id() === measureIds[j]) {
                    indexes.push(bindingDefs[i].bvrPriority());
                    measureIds.splice(j, 1);
                    break;
                }
            }
        }
        for (i = 0; i < mg.length; i++) {
            var measures = mg[i];
            if (!measures || !Utils.isArray(measures.data)) {
                continue;
            }
            if (indexes.indexOf(mg[i].index) < 0) {
                continue;
            }
            for (j = 0; j < measures.data.length; j++) {
                var measure = measures.data[j];
                if (!measure || !Utils.isArray(measure.values)) {
                    continue;
                }
                for (var k = 0; k < measure.values.length; k++) {
                    var value = measure.values[k];
                    if (!Utils.isArray(value)) {
                        continue;
                    }
                    if (this._hasNegativeValue(value)) {
                        return true;
                    }
                }
            }
        }
        return false;
    };
    
    DatasetUtil._hasNegativeValue = function (array) {
        var ret = false;
        for (var i = 0; i < array.length; i++) {
            if (Utils.isNumber(array[i]) && array[i] < 0) {
                ret = true;
                break;
            }
        }
        return ret;
    };

    return DatasetUtil;
});

define('sap/viz/controls/chart/views/AxisSizeAdjustHelper',[],function() {

    var MAIN_NODE_CLASS = "v-m-main";

    function isAxis (name) {
        return ["xAxis", "xAsix2", "yAxis", "yAxis2", "categoryAxis", "categoryAxis2"].indexOf(name) > -1;
    }

    /**
     *@param {Object} the viz instance
     *@param {String} a key to specify the module to be adjusted
     *@param {Number} a float number to specify the delta size
     */
    var adjustAxisMaxSize = function(vizInstance, feedingZones, moduleKey, direction, offset) {
        if (!isAxis(moduleKey) || !vizInstance) {
          return null;
        }

        var feedingZone;
        feedingZones.forEach(function(e) {
          if (e.name === moduleKey) {
            feedingZone = e.bound[0];
          }
        });
        var mainNodeBoundingRect = 
            ( (vizInstance.app.container && vizInstance.app.container() ) || vizInstance._usrOptions.container)
                .querySelector("." + MAIN_NODE_CLASS)/*.querySelector(".v-bound")*/.getBoundingClientRect();
        var mainNodeSize, axisSize;
  
        switch (direction) {
  
        case "horizontal":
            mainNodeSize = mainNodeBoundingRect.height;
            axisSize = feedingZone[0][1] - feedingZone[2][1];
            break;
  
        case "vertical":
            mainNodeSize = mainNodeBoundingRect.width;
            axisSize = feedingZone[0][0] - feedingZone[2][0];
            break;
        }
  
        mainNodeSize = Math.abs(mainNodeSize);
        axisSize = Math.abs(axisSize);
        if (mainNodeSize !== 0) {
          offset = parseFloat(offset);
          if (!isNaN(offset)) {
            axisSize += offset;
          }
          var props = {};
  
          switch (moduleKey) {
  
          case "xAxis":
          case "xAxis2":
          case "yAxis":
          case "yAxis2":
              props[moduleKey] = {
                maxSizeRatio: Math.max(0, axisSize / mainNodeSize)
              };
              break;
  
          case "categoryAxis":
          case "categoryAxis2":
              props[moduleKey] = { layout: { } };
              if ( direction === "horizontal" ) {
                  props[moduleKey]["layout"]["maxHeight"] = Math.max(0, axisSize / mainNodeSize);
              }
              else {
                  props[moduleKey]["layout"]["maxWidth"] = Math.max(0, axisSize / mainNodeSize);
              }
              break;
          }
  
          return props;
        }
        return null;
    };
  
    return adjustAxisMaxSize;

});

define('sap/viz/controls/chart/views/AxisSplitter',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/VizUtils',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/events/EventDispatcher'
],
function($, OOUtil, VizUtils, CSSConst, Event, EventDispatcher){
// @formatter:on
    var AxisSplitter = function(container, propertiesProvider, propertyZoneProvider){
        AxisSplitter.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.views.AxisSplitter";
        this._container = container;
        this._propertiesProvider = propertiesProvider;
        this._propertyZoneProvider = propertyZoneProvider;
        this._createChildren();
    };
    
    OOUtil.extend(AxisSplitter, EventDispatcher);
    
    AxisSplitter.AxisSplitChanged = "AxisSplitChanged";

    AxisSplitter.prototype._createChildren = function(){
        this._div$ = $(document.createElement("DIV"));
        this._resizeHelper$ = $(document.createElement("DIV")).addClass(CSSConst.CHART_PREFIX + 'axissplitter-resizehelper');
        this._mask$ = $(document.createElement("DIV")).addClass(CSSConst.CHART_PREFIX + 'axissplitter-resizehelper-mask');
        this._axis$ = this._createAxis();
        this._axis2$ = this._createAxis();
        this._div$.append(this._axis$).append(this._axis2$);
        this._div$.appendTo(this._container);
    };
    
    AxisSplitter.prototype._updateResizeHelperBound = function(bound){
        var width = bound[1][0] - bound[0][0];
        var height = bound[2][1] - bound[0][1];
        this._resizeHelper$.css({
            left  : bound[0][0],
            top   : bound[0][1],
            width : width,
            height: height
        });
        this._resizeHelper$.appendTo(this._container);
    };
    
    AxisSplitter.prototype._resizeHelper = function(offset, isHorizontal){
        var position = this._resizeHelper$.position();
        if(isHorizontal){
            this._resizeHelper$.css({
                top   : position.top + offset,
                height: this._resizeHelper$.height() - offset
            });
        } else {
            this._resizeHelper$.css({
                width : this._resizeHelper$.width() + offset
            });
        }
    };
    
    AxisSplitter.prototype._createAxis = function(){
        var axis$ = $(document.createElement("DIV")).addClass(CSSConst.CHART_PREFIX + 'axissplitter-axis');
        var isHorizontal = false;
        var startPoint, currentPoint;
        var _this = this;
        var mousemove = function(e){
            var offset = isHorizontal ? (e.clientY - currentPoint) : (e.clientX - currentPoint);
            var position = axis$.position();
            if(isHorizontal){
                offset = Math.max(-position.top, offset);
                offset = Math.min(axis$.data("bottom") - position.top, offset);
                var top = position.top + offset;
                axis$.css({
                    top : top
                });
                
            } else {
                offset = Math.max(-(position.left-axis$.data("left")), offset);
                offset = Math.min($(_this._container).width() - position.left -6, offset);
                var left = position.left + offset;
                axis$.css({
                    left : left
                });
            }
            currentPoint += offset;
            _this._resizeHelper$.css("cursor",axis$.css("cursor"));
            _this._resizeHelper(offset, isHorizontal);
           e.stopPropagation();
        };
        var mousemoveEnd = function(e){
            _this._mask$.unbind("mousemove", mousemove);
            _this._mask$.unbind("mouseup", mousemoveEnd);
            _this._mask$.unbind("mouseout", mousemoveEnd);
            _this._mask$.detach();
            _this._resizeHelper$.detach();
            var endPoint = isHorizontal ? e.clientY : e.clientX;
            var axisName = axis$.data("axis").name;
            var offset = startPoint - endPoint;
            offset = isHorizontal ? offset : -offset;
            _this._axisMoved(axisName, axis$.data("direction"), offset);
        };
        axis$.mousedown(function(e){
            _this._mask$.css("cursor",axis$.css("cursor"));
            _this._mask$.appendTo(document.body);
            isHorizontal = axis$.data("isHorizontal");
            startPoint = currentPoint = isHorizontal ? e.clientY : e.clientX;
            _this._updateResizeHelperBound(axis$.data("axis").bound[0]);
            _this._mask$.mousemove(mousemove);
            _this._mask$.mouseup(mousemoveEnd);
            _this._mask$.mouseout(mousemoveEnd);
        });

        return axis$;
    };

    AxisSplitter.prototype._axisMoved = function(axisName, direction, offset){
        var data = {
            axisName : axisName,
            direction: direction,
            offset : offset
        };
        this._dispatchEvent(new Event(AxisSplitter.AxisSplitChanged , this, data));
    };

    AxisSplitter.prototype._getAxis = function (){
        var zones = this._propertyZoneProvider();
        var result = [],
            zone;

        if(!zones || zones.length === 0 ){
            return result;
        }

        for(var i =0; i<zones.length; ++i){
            zone = zones[i];
            for(var n=0; n<this._categoryAxis.length; ++n){
                if(zone.name === this._categoryAxis[n]){
                    switch (zone.name) {
                    case "categoryAxis":
                    case "categoryAxis2":
                        zone.direction = this._categoryAxis[0] === "xAxis" ? "horizontal" : "vertical";
                        break;
                    case "xAxis":
                    case "xAxis2":
                        zone.direction = "horizontal";
                        break;
                    case "yAxis":
                    case "yAxis2":
                        zone.direction = "vertical";
                        break;
                    }
                    result.push(zone);
                }
            }
        }
        return result;
    };
    
    AxisSplitter.prototype._layoutAxis = function(axis$, axis){
        var isHorizontal = axis.direction === "horizontal";

        axis$.data("direction", axis.direction);
        axis$.data("isHorizontal", isHorizontal);
        axis$.data("axis", axis);
        if(isHorizontal){
            var width = axis.bound[0][1][0] - axis.bound[0][0][0];
            axis$.data("bottom", axis.bound[0][2][1]);
            axis$.css({
                left  : axis.bound[0][0][0],
                top   : axis.bound[0][1][1],
                width : width,
                height: 6,
                "margin-top": -3,
                "margin-left": 0,
                cursor : "n-resize"
            });
        } else {
            var height = axis.bound[0][2][1] - axis.bound[0][0][1];
            axis$.data("left", axis.bound[0][0][0]);
            axis$.css({
                left   : axis.bound[0][1][0],
                top    : axis.bound[0][0][1],
                height : height,
                width  : 6,
                "margin-top": 0,
                "margin-left": -3,
                cursor : "e-resize"
            });
        }
    };
    
    AxisSplitter.prototype._layout = function(){
        var axis = this._getAxis();
        if(!axis || axis.length ===0){
            return;
        }
        
        this._layoutAxis(this._axis$, axis[0]);
        if(axis[1]){
            this._axis2$.css({
                'visibility' : ""
            });
            this._layoutAxis(this._axis2$, axis[1]);
        } else {
            this._axis2$.css({
                'visibility' : "hidden"
            });
        }
    };
    AxisSplitter.prototype.reset = function(){
        this._div$.css({
            'visibility' : 'hidden'
        });
    };

    AxisSplitter.prototype.init = function(type){
        this._categoryAxis = VizUtils.getCategoryAxis(type);
        if(!this._categoryAxis || this._categoryAxis.length === 0){
            this.reset();
            return;
        }
        this._categoryAxis = this._categoryAxis.slice().push("categoryAxis", "categoryAxis2");
        
        this._layout();
        this._div$.css({
            'visibility' : "visible"
        });
    };
    
    AxisSplitter.prototype.deactive = function(){
        this._div$.css({
            'display' : "none"
        });
    };
    
    AxisSplitter.prototype.active = function(){
        this._div$.css({
            'display' : "block"
        });
    };
    
    return AxisSplitter;
});

// @formatter:off
define('sap/viz/controls/chart/views/ChartEvent',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
function(OOUtil, Event) {
// @formatter:on
	/**
	* The Chart Event.
     * @class sap.viz.controls.chart.views.ChartEvent
     */
    var ChartEvent = function(type, target, data) {
        ChartEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.views.ChartEvent";
    };
    OOUtil.extend(ChartEvent, Event);

    ChartEvent.CHANGED_SELECTED_DATA = "changeSelectedData";

    ChartEvent.TRIGGER_CVOM_EVENT = "triggerCVOMEvent";

    ChartEvent.CHART_CHANGING = "ChartChanging";

    ChartEvent.CHART_CHANGED = "ChartChanged";

    ChartEvent.CVOM_INITIALIZED = "CVOMChartInitialized";

    ChartEvent.CLICK_FILTER_BUTTON = "clickFilterButton";

    ChartEvent.CLICK_EXCLUDE_BUTTON = "clickExcludeButton";

    ChartEvent.CLICK_DRILLDOWN_BUTTON = "clickDrillDownButton";

    ChartEvent.CHANGE_FEEDING = "changeFeeding";

    ChartEvent.ANALYSIS_DROPPED = "analysisDropped";

    ChartEvent.TITLE_CHANGED = "TitleChanged";

    /**
     * Event name for viz type changed.
     * @memberof sap.viz.controls.chart.views.ChartEvent
     * @member VIZTYPE_CHANGED
     * @static
     */
    ChartEvent.VIZTYPE_CHANGED = "vizTypeChanged";

    ChartEvent.VIZ_VIEW_CHANGED = 'vizViewChanged';

    ChartEvent.SELECT_PROPERTY_ZONE = "selectPropertyZone";

    ChartEvent.PROPERTY_ZONES_CHANGED = 'propertyZonesChanged';

    ChartEvent.ESRI_CUSTOMIZED_SERVICE_CHANGED = 'esriCustomizedServiceChanged';

    ChartEvent.CONTEXT_MENU_TRIGGERED = 'contextMenuTriggered';

    // event when user finishes one interaction like changing chart type or feed item
    /**
     * Event name for UI interaction complete.
     * @memberof sap.viz.controls.chart.views.ChartEvent
     * @member USER_INTERACTION_COMPLETE
     * @static
     */
    ChartEvent.USER_INTERACTION_COMPLETE = 'userInteractionComplete';

    ChartEvent.VIZ_PROPERTIES_CHANGED = 'vizPropertiesChanged';
    
    ChartEvent.SCALES_CHANGED = 'scalesChanged';
    
    ChartEvent.BEHAVIOR_TYPE_CHANGED = 'behaviorTypeChanged';

    return ChartEvent;
});

define('sap/viz/controls/chart/views/DataPointFinder',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/Utils'
    ],
function($, Utils) {
// @formatter:on

    var DataPointFinder = {};

    DataPointFinder.findDataPointsPosition = function(dataPoints) {
        var result = [];
        if(!dataPoints || dataPoints.length ===0){
            return result;
        }
        
        for (var i = 0; i < dataPoints.length; i++) {
            var dataPointUI = DataPointFinder._findDataPointUI(dataPoints[i]);
            if(dataPointUI){
                result[i] = dataPointUI.getBoundingClientRect();
            }
        }
        return result;
    };

    DataPointFinder._findDataPointUI = function(dataPoint){
        var datapoints = d3.selectAll('.v-datapoint')[0];
        for (var i = 0; i < datapoints.length; i++) {
            var data = datapoints[i].__data__;
            if(!data){
                continue;
            }
            var ctx;
            if (Utils.isArray(data.ctx)) {
                ctx = data.ctx[0];
            } else {
                ctx = data.ctx;
            }
            if(ctx.path == dataPoint.ctx[0]){
                return datapoints[i];
            }
        }
        return null;
    };

    return DataPointFinder;
});

// @formatter:off
define('sap/viz/controls/common/helpers/Rectangle',[],
function() {
// @formatter:on

    var Rectangle = function(left, top, width, height) {
        this._left = left;
        this._top = top;
        this._width = width;
        this._height = height;
    };
    Rectangle.parseDOM = function(dom$) {
        var offset = dom$.offset();
        return new Rectangle(offset.left, offset.top, dom$.outerWidth(), dom$.outerHeight());
    };

    Rectangle.prototype.left = function(value) {
        if (arguments.length > 0) {
            this._left = value;
        } else {
            return this._left;
        }
    };
    Rectangle.prototype.top = function(value) {
        if (arguments.length > 0) {
            this._top = value;
        } else {
            return this._top;
        }
    };
    Rectangle.prototype.right = function(value) {
        if (arguments.length > 0) {
            this.left(value - this.width());
        } else {
            return this.left() + this.width();
        }
    };
    Rectangle.prototype.bottom = function(value) {
        if (arguments.length > 0) {
            this.top(value - this.height());
        } else {
            return this.top() + this.height();
        }
    };
    Rectangle.prototype.width = function() {
        return this._width;
    };
    Rectangle.prototype.height = function() {
        return this._height;
    };
    Rectangle.prototype.hCenter = function() {
        return this.left() + this.width() / 2;
    };
    Rectangle.prototype.vCenter = function() {
        return this.top() + this.height() / 2;
    };
    Rectangle.prototype.hContains = function(target) {
        return this.left() <= target.left() && this.right() >= target.right();
    };
    Rectangle.prototype.vContains = function(target) {
        return this.top() <= target.top() && this.bottom() >= target.bottom();
    };
    Rectangle.prototype.contains = function(target) {
        return this.hContains(target) && this.vContains(target);
    };
    Rectangle.toJSON = function(instance) {
        return {
            'left' : instance.left(),
            'top' : instance.top(),
            'width' : instance.width(),
            'height' : instance.height()
        };
    };

    return Rectangle;
});

define('sap/viz/controls/chart/views/DropZone',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/constants/FeedConst',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/events/EventDispatcher',
    'sap/viz/controls/common/feeds/FeedItem',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/managers/DragManager',
    'sap/viz/controls/common/views/drag/DropAction',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/helpers/Rectangle'],
function($, CSSConst, FeedConst, FeedUtils, OOUtil, utils, Event, EventDispatcher, FeedItem, FeedItemType, DragManager, DropAction,
        AnalyticalType, Rectangle) {
// @formatter:on

    var DropZone = function(targetDiv, zoneProvider, feedValidator) {
        DropZone.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.views.DropZone";
        this._targetDiv = targetDiv;
        this._zoneProvider = zoneProvider;
        this._feedValidator = feedValidator;
        this._enterDrop = false;
        this._dragActionArray = [];
        var style = "position:absolute;visibility:hidden;left:0px;top:0px;width:0px;height:0px;";
        this._dom = $(document.createElement("DIV")).appendTo(this._targetDiv.parentNode).attr('style', style);

        var self = this;
        this._dom.droppable({
            accept : $.proxy(function(draggable$) {
                return this._isTriggerAllowed(draggable$) === true;
            }, this),
            activate : function(e, ui) {
                self.enterDrop.apply(self, [e, ui]);
            },
            deactivate : function(e, ui) {
                utils.defer(function() {
                    self.exitDrop.apply(self, [e, ui]);
                });
            }
        });
    };

    OOUtil.extend(DropZone, EventDispatcher);

    DropZone.DROP_ITEM_EVENT = 'DROP_ITEM_EVENT';
    //padding for labels (x Axis, y Axis, rows, columns).
    var _padding = 8;

    /**
     * TODO: move to FeedUtil
     * @param {Object} zone
     * @param {Object} token
     */
    DropZone.prototype._match = function(zone, analysisObject) {
        var type = analysisObject.type();
        if (type) {
            type = type.toLowerCase();
        }
        var dataType = analysisObject.dataType();
        if (dataType) {
            dataType = dataType.toLowerCase();
        }
        var feedDefs = zone.feedDef;
        var defType = feedDefs[0].id === FeedConst.ID_GEO ? FeedItemType.GEOGRAPHY : feedDefs[0].type;
        if (feedDefs.length === 1 && FeedUtils.feedCompatible(defType, type, dataType)) {
            return true;
        }

        for (var i = 0; i < feedDefs.length; i++) {
            defType = feedDefs[i].id === FeedConst.ID_GEO ? FeedItemType.GEOGRAPHY : feedDefs[i].type;
            if (FeedUtils.feedCompatible(defType, type, dataType) && feedDefs[i].id !== 'multiplier') {
                return true;
            }
        }

        return false;
    };
    /**
     * TODO: Add comments.
     * @param {Object} e
     * @param {Object} ui
     */
    DropZone.prototype._onDragOver = function(e, ui) {
        if (!this._enterDrop) {
            return;
        }

        var zone = e.target.__zone;
        var areaIndex = e.target.__areaIndex;
        var token = DragManager.instance().getAnalysisToken(ui.helper);

        if (!zone) {
            token.currentAction(DropAction.DENY);
            return;
        }

        this._hightlight(zone, areaIndex);

        if (this._acceptable(zone, token.analysisObject)) {
            token.dropTarget(e.target);
            token.currentAction(DropAction.ACCEPT);
        } else {
            token.currentAction(DropAction.DENY);
        }

        for (var index in this._dragActionArray) {
            if (this._dragActionArray[index].zoneName === zone.name) {
                this._dragActionArray.splice(index, 1);
                break;
            }
        }
        // please pay attention if drag over do more things than update token action in the future.
        this._dragActionArray.push({
            "zoneName" : zone.name,
            "action" : token.currentAction()
        });
    };
    DropZone.prototype._acceptable = function(zone, analysisObject) {
        var match = this._match(zone, analysisObject);
        if (!match) {
            return false;
        }

        var feedDefs = zone.feedDef;
        for (var i = 0; i < feedDefs.length; i++) {
            if (feedDefs[i].id !== "r_subtotals") {
                if (feedDefs[i].id === 'multiplier') {
                    if (zone.name === FeedConst.ID_TRELLIS_ROW || zone.name === FeedConst.ID_TRELLIS_COLUMN) {
                        if (this._feedValidator(zone.name, analysisObject)) {
                            return true;
                        }
                    } else {
                        if(this._feedValidator(FeedConst.ID_TRELLIS_ROW, analysisObject) || this._feedValidator(FeedConst.ID_TRELLIS_COLUMN, analysisObject)) {
                            return true;
                        }
                    }
                } else {
                    if(this._feedValidator(feedDefs[i].id, analysisObject)) {
                        return true;
                    }
                }
            }
        }
        return false;
    };
    /**
     * TODO: Add comments.
     * @param {Object} e
     * @param {Object} ui
     */
    DropZone.prototype._onDragOut = function(e, ui) {
        if (!this._enterDrop) {
            return;
        }

        var zone = e.target.__zone;
        var areaIndex = e.target.__areaIndex;
        if (zone) {
            this._unHightlight(zone, areaIndex);
        }
        var token = DragManager.instance().getAnalysisToken(ui.helper);
        if (token.currentAction() === DropAction.ACCEPT && token.dropTarget() === e.target) {
            token.currentAction(DropAction.DENY);
            token.dropTarget(null);
        }

        for (var index in this._dragActionArray) {
            if (this._dragActionArray[index].zoneName === zone.name) {
                this._dragActionArray.splice(index, 1);
                break;
            }
        }

        // for radar chart, valueaxis and plot zone have overlap, dragout valueaxis should reset the token action
        // to plot's status.
        var length = this._dragActionArray.length;
        if (length > 0) {
            // please pay attention if drag over do more things than update token action in the future.
            token.currentAction(this._dragActionArray[length-1].action);
        }
    };
    /**
     * TODO: Add comments.
     * @param {Object} e
     * @param {Object} ui
     */
    DropZone.prototype._onDragDrop = function(e, ui) {
        var zone = e.target.__zone;
        var token = DragManager.instance().getAnalysisToken(ui.helper);
        if (!zone || !token) {
            return;
        }

        // for radar chart, valueaxis and plot zone have overlap, dragdrop should only trigger valueaxis
        var length = this._dragActionArray.length;
        if (length > 0) {
            // please pay attention if drag over do more things than update token action in the future.
            var lastDragInfo = this._dragActionArray[length-1];
            if (lastDragInfo.zoneName !== zone.name) {
                return;
            }
        }

        var bounds = Rectangle.parseDOM($(this._targetDiv));
        var point = new Rectangle(e.pageX, e.pageY, 0, 0);
        if (!bounds.contains(point)) {
            return;
        }

        var analysisObject = token.analysisObject;
        if (this._acceptable(zone, analysisObject)) {
            token.currentAction(DropAction.ACCEPT);
            this._dispatchEvent(new Event(DropZone.DROP_ITEM_EVENT, this, {
                'zone' : zone,
                'analysisObject' : analysisObject
            }));
        } else {
            token.currentAction(DropAction.DENY);
        }
        token.dropTarget(this._dom);
    };
    /**
     * If the draggable trigger is accepted by vizFrame.
     */

    DropZone.prototype._isTriggerAllowed = function(draggable$) {
        var allowed = draggable$.hasClass(DragManager.DRAGGABLE_CLASS_ANALYSIS);
        // don't accept dragging from feeding panel
        allowed = allowed && !draggable$.hasClass(CSSConst.FEEDINGSHELF_PREFIX + 'card');
        return allowed;
    };
    /**
     * TODO: Add comments.
     * @param {Object} area
     */
    DropZone.prototype._createDiv = function(parent, area, text, rotate) {
        var div$ = $(document.createElement("DIV"));
        var left = area[0][0], top = area[0][1], width = area[2][0] - area[0][0], height = area[2][1] - area[0][1];

        // remove border width space
        if (width > 0) { width -= 2; }
        if (height > 0) { height -= 2; }

        var style = "visibility:hidden;left:" + left + "px;top:" + top + "px;width:" + width + "px;height:" + height + "px;";
        var self = this;

        div$.attr('style', style).droppable({
            tolerance : 'pointer',
            accept : $.proxy(function(draggable$) {
                return this._isTriggerAllowed(draggable$) === true;
            }, this),
            drop : function(e, ui) {
                self._onDragDrop.apply(self, [e, ui]);
            },
            over : function(e, ui) {
                self._onDragOver.apply(self, [e, ui]);
            },
            out : function(e, ui) {
                self._onDragOut.apply(self, [e, ui]);
            }
        });
        div$.addClass(CSSConst.CHART_PREFIX + 'drop-zone').appendTo(parent);
        if (text && text.length > 0) {
            style = "position:absolute;left:0px;top: 0px;";
            var text$ = $(document.createElement("DIV")).attr('style', style).text(text).appendTo(div$);
            var rect = text$[0].getBoundingClientRect();
            var transform = null;
            if (rotate) {
                transform = "translate(" + (width - rect.width) / 2 + "px," + ((rect.width - rect.height) / 2 + _padding ) + "px) rotate(-90deg);";
            } else {
                transform = "translate(" + _padding + "px, " + (height - rect.height) / 2 + "px);";
            }
            style += "transform: " + transform;
            style += "-webkit-transform: " + transform;
            style += "-ms-transform: " + transform;
            style += "-moz-transform: " + transform;
            text$.attr('style', style);
        }

        return div$;
    };
    /**
     * TODO: Add comments.
     */
    DropZone.prototype.enterDrop = function(event, ui) {
        var token = DragManager.instance().getAnalysisToken(ui.helper);
        if (!token) {
            return;
        }

        if (this._enterDrop) {
            return;
        }

        this._enterDrop = true;
        this._targetRect = this._targetDiv.getBoundingClientRect();
        var style = "position:absolute;left:0px;top:0px;width:" + this._targetRect.width + "px;height:" + this._targetRect.height + "px;";
        this._dom.empty().attr('style', style);

        //create sub div
        var zones = this._zoneProvider();
        if (!zones) {
            return;
        }
        this._dragActionArray = [];
        for (var i = 0; i < zones.length; i++) {
            var areas = zones[i].bound;
            for (var n = 0; n < areas.length; n++) {
                var div = this._createDiv(this._dom[0], areas[n], zones[i].text, zones[i].rotate);
                div[0].__zone = zones[i];
                div[0].__areaIndex = n;
            }
        }
    };
    /**
     * TODO: Add comments.
     */
    DropZone.prototype.exitDrop = function() {
        if (!this._enterDrop) {
            return;
        }

        this._dom.empty();
        this._dom.css('visibility', 'hidden');
        this._enterDrop = false;
    };
    /**
     * resize dropzone
     * @param {width: Number, height: Number} size
     */
    DropZone.prototype.size = function(size) {
        if (size) {
            this._dom.css({
                width : size.width + "px",
                height : size.height + "px"
            });
        }
    };
    /**
     * TODO: Add comments.
     * @param {Object} zone
     * @param {Object} areaIndex
     */
    DropZone.prototype._getDom = function(zone, areaIndex) {
        var children = this._dom.children();
        for (var i = 0; i < children.length; i++) {
            if (children[i].__zone === zone && children[i].__areaIndex === areaIndex) {
                return children[i];
            }
        }
        return null;
    };
    /**
     * TODO: Add comments.
     * @param {Object} zone
     * @param {Object} areaIndex
     */
    DropZone.prototype._hightlight = function(zone, areaIndex) {
        var dom = this._getDom(zone, areaIndex);
        if (dom) {
            $(dom).css('visibility', '');
        }
    };
    /**
     * TODO: Add comments.
     * @param {Object} zone
     * @param {Object} areaIndex
     */
    DropZone.prototype._unHightlight = function(zone, areaIndex) {
        var dom = this._getDom(zone, areaIndex);
        if (dom) {
            $(dom).css('visibility', 'hidden');
        }
    };
    return DropZone;
});

define('sap/viz/controls/chart/views/EditAxisView',
[
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/VizUtils',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/managers/LangManager'
],
function($, OOUtil, VizUtils, ChartTypeUtil, UIControl, ChartConst, CSSConst, Event, LangManager) {
    var EditAxisView = function(dom, uiconfig) {
        EditAxisView.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.view.EditAxisView";
        this._type = null;
        this._properties = null;
    };
    var axisDialog;
    OOUtil.extend(EditAxisView, UIControl);
    
    EditAxisView.AxisScaleChanged = "AxisScaleChanged";
    
    EditAxisView.prototype._createDialog = function(type, axis, properties, scales) {
        this._type = type;
        if (axis) {
            this._valueAxis = [axis];
        } else {
            this._valueAxis = VizUtils.getValueAxis(type);
            if (ChartTypeUtil.isInfoChart(type)) { // convert xy axis to value/category axis name
                this._valueAxis = this._valueAxis.map(function (e) {
                    return ChartTypeUtil.map2semanticAxis(e, type);
                });
            }
        }
        if (ChartTypeUtil.isInfoChart(type)) {
            this._getInfoChartAxisScale(properties, scales);
        }
        this._properties = properties;
        var valueAxis = this._valueAxis;
        if (!valueAxis || valueAxis.length === 0) {
            return;
        }

        this._axisContainer = [];
        var property;
        var i;
        for ( i = 0; i < valueAxis.length; i++) {
            property = properties[valueAxis[i]];
            this._axisContainer[i] = this._createAxisItem(valueAxis[i], property);
        }
        var oBtnOK = new sap.ui.commons.Button({
            text : LangManager.get("VIZ_COMMON_OK"),
            enabled : true,
            press : function() {
               this._applyChange();
            }.bind(this)
        });

        var oBtnCancel = new sap.ui.commons.Button({
            text : LangManager.get("VIZ_COMMON_CANCEL"),
            enabled : true,
            press : function() {
                this._close();
            }.bind(this)
        });
        axisDialog = new sap.ui.commons.Dialog({
            modal : true
        });
        axisDialog.setShowCloseButton(false);
        axisDialog.setTitle(LangManager.get("VIZ_CONTEXTMENU_SET_AXIS_SCALE"));
        sap.ui.jsview("axis.top", {
            height : '24px',
            createContent : function() {
                var topMatrixLayout = new sap.ui.commons.layout.MatrixLayout({
                    layoutFixed : true,
                    columns : 1,
                    width : '332px'
                });
                return topMatrixLayout;
            }
        });
        var top = sap.ui.view({
            type : sap.ui.core.mvc.ViewType.JS,
            viewName : "axis.top"
        });
        sap.ui.jsview("axis.bottom", {
            height : '16px',
            createContent : function() {
                var bottomMatrixLayout = new sap.ui.commons.layout.MatrixLayout({
                    layoutFixed : true,
                    columns : 1,
                    width : '332px'
                });
                return bottomMatrixLayout;
            }
        });
        var bottom = sap.ui.view({
            type : sap.ui.core.mvc.ViewType.JS,
            viewName : "axis.bottom"
        });
        axisDialog.addContent(top);
        for ( i = 0; i < this._axisContainer.length; i++) {
            axisDialog.addContent(this._axisContainer[i]);
        }
        axisDialog.addContent(bottom);
        axisDialog.addButton(oBtnOK);
        axisDialog.addButton(oBtnCancel);

    };

    EditAxisView.prototype._createAxisItem = function(axisName, property) {
        var selectedIndex = property.scale.fixedRange ? 1 : 0;
        var minValue = property.scale.minValue;
        var maxValue = property.scale.maxValue;
        sap.ui.jsview("axis.content", {
            height:'110px',
            createContent : function() {
                var selectRadioButtonGroup = new sap.ui.commons.RadioButtonGroup({
                    select : function() {
                        if (selectRadioButtonGroup.getSelectedItem().getKey() === "fixed") {
                            inputFieldMin.setEditable(true);
                            inputFieldMax.setEditable(true);
                            selectedIndex = 1;
                        } else if (selectRadioButtonGroup.getSelectedItem().getKey() === "automatic") {
                            inputFieldMin.setEditable(false);
                            inputFieldMax.setEditable(false);
                            selectedIndex = 0;
                        }
                    },
                    selectedIndex : selectedIndex
                });

                var scaleItem = new sap.ui.core.Item({
                    text : LangManager.get("VIZ_CHART_AUTO_RANGE"),
                    tooltip : LangManager.get("VIZ_CHART_AUTO_RANGE"),
                    key : "automatic"
                });
                selectRadioButtonGroup.addItem(scaleItem);
                scaleItem = new sap.ui.core.Item({
                    text : LangManager.get("VIZ_CHART_FIXED_RANGE"),
                    tooltip : LangManager.get("VIZ_CHART_FIXED_RANGE"),
                    key : "fixed"
                });
                selectRadioButtonGroup.addItem(scaleItem);

                var matrix = new sap.ui.commons.layout.MatrixLayout({
                    layoutFixed : true,
                    width : '300px',
                    columns : 3
                });
                matrix.setWidths('140px', '20px', '140px');

                //Create a simple form within the layout
                var label = new sap.ui.commons.Label({
                    text : '-',
                    width : "100%",
                    textAlign : "Center"
                });
                var inputFieldMin = new sap.ui.commons.TextField({
                    width : '100%',
                    editable : property.scale.fixedRange ? true : false,
                    value : minValue,
                    change : function() {
                        minValue = this.mProperties.value;
                    }
                });
                var inputFieldMax = new sap.ui.commons.TextField({
                    width : '100%',
                    editable : property.scale.fixedRange ? true : false,
                    value : maxValue,
                    change : function() {
                        maxValue = this.mProperties.value;
                    }
                });

                matrix.createRow(inputFieldMin, label, inputFieldMax);
                var matrix2 = new sap.ui.commons.layout.MatrixLayout({
                    layoutFixed : true,
                    width : '332px',
                    columns : 3
                });
                matrix2.setWidths('16px', '300px', '16px');

                var title, layout, layout2;
                title = new sap.ui.commons.Label({
                    text : this._getAxisName(this._type, axisName)
                });

                layout = new sap.ui.layout.VerticalLayout();
                layout.addContent(title);
                layout.addContent(selectRadioButtonGroup);
                layout.addContent(matrix);
                matrix2.createRow(null, layout, null);
                return matrix2;
            }.bind(this)
        });
        var content = sap.ui.view({
            type : sap.ui.core.mvc.ViewType.JS,
            viewName : "axis.content"
        });
        content.save = function(properties, axisName) {
            if (selectedIndex === 1) {
                properties[axisName].scale.fixedRange = true;
            }
            properties[axisName].scale.minValue = minValue;
            properties[axisName].scale.maxValue = maxValue;
        };

        return content;

    };
    
    EditAxisView.prototype._propertiesChanged = function(properties) {
        for( var i = 0; i < this._valueAxis.length; ++i) {
            var axis = this._valueAxis[i];
            var property = properties[axis];
            var preProperty = this._properties[axis];
            if (property.scale.fixedRange !== preProperty.scale.fixedRange) {
                return true;
            }
            if (property.scale.fixedRange) {
                if (property.scale.minValue !== preProperty.scale.minValue || 
                    property.scale.maxValue !== preProperty.scale.maxValue) {
                        return true;
                    }
            }
        }
        return false;
    };
    
    
    EditAxisView.prototype._applyChange = function() {
        var properties = {};
        for (var i = 0; i < this._valueAxis.length; ++i) {
            var axis = this._valueAxis[i];
            properties[axis] = {
                scale : {
                    fixedRange : false
                }
            };
            var container = this._axisContainer[i];
            if (!container) {
                continue;
            }
            container.save(properties, axis);
        }
        if (this._propertiesChanged(properties)) {
            if (ChartTypeUtil.isInfoChart(this._type)) {
                var scales = this._convertToInfoChartAxisScales(properties);
                this._dispatchEvent(new Event(EditAxisView.AxisScaleChanged, this, scales));
            } else {
                this._dispatchEvent(new Event(EditAxisView.AxisScaleChanged, this, properties));
            }
        }
       this._close();
    }; 
    
    EditAxisView.prototype._close = function(){
        axisDialog.close();
        axisDialog.$().remove();
    };

    
    EditAxisView.prototype._convertToInfoChartAxisScales = function(properties) {
        var scales = this._scales || [];
        var ret = [];
        for (var i in scales) {
            var scale = scales[i];
            var property;
            if (scale.feed === 'valueAxis' && "valueAxis" in properties) {
                property = properties["valueAxis"].scale || {};
                scale.min = property.fixedRange ? property.minValue : 'auto';
                scale.max = property.fixedRange ? property.maxValue : 'auto';
                ret.push(scale);
            }
            if (scale.feed === 'valueAxis2' && "valueAxis2" in properties) {
                property = properties["valueAxis2"].scale || {};
                scale.min = property.fixedRange ? property.minValue : 'auto';
                scale.max = property.fixedRange ? property.maxValue : 'auto';
                ret.push(scale);
            }
        }
        return ret;
    };

    EditAxisView.prototype._getAxisName = function(type, axis) {
        var valueAxis = VizUtils.getValueAxis(type);
        var axisCount = valueAxis ? valueAxis.length : 1;
        axis = ChartTypeUtil.map2directionAxis(axis, type);
        if (axisCount === 1 || type === ChartConst.TYPE_SCATTER || type === ChartConst.TYPE_BUBBLE) {
            if (axis === ChartConst.AXIS_XAXIS) {
                return LangManager.get("VIZ_CHART_XAXIS_RANGE");
            } else if (axis === ChartConst.AXIS_YAXIS) {
                return LangManager.get("VIZ_CHART_YAXIS_RANGE");
            }
        } else {
            if (axis === ChartConst.AXIS_XAXIS) {
                return LangManager.get("VIZ_CHART_XAXIS1_RANGE");
            } else if (axis === ChartConst.AXIS_YAXIS) {
                return LangManager.get("VIZ_CHART_YAXIS1_RANGE");
            }
        }
        if (axis === ChartConst.AXIS_XAXIS2) {
            return LangManager.get("VIZ_CHART_XAXIS2_RANGE");
        } else if (axis === ChartConst.AXIS_YAXIS2) {
            return LangManager.get("VIZ_CHART_YAXIS2_RANGE");
        }
        return "";
    };

    EditAxisView.prototype._getInfoChartAxisScale = function(properties, scales) {
        this._scales = scales;
        var mappingProperties = function(scale, property) {
            var useAutoScale = scale['min'] === 'auto' ? true : false;
            return {
                fixedRange : !useAutoScale,
                minValue : useAutoScale ? property['autoMinValue'] : scale['min'],
                maxValue : useAutoScale ? property['autoMaxValue'] : scale['max']
            };
        };
        for (var i in scales) {
            var scale = scales[i];
            if (scale.feed === 'valueAxis') {
                properties["valueAxis"] = {
                    scale : mappingProperties(scale, properties.plotArea.primaryScale)
                };
            }
            if (scale.feed === 'valueAxis2') {
                properties["valueAxis2"] = {
                    scale : mappingProperties(scale, properties.plotArea.secondaryScale)
                };
            }
        }
    };

    EditAxisView.prototype.show = function(type, axis, properties, scales) {
        this._createDialog(type, axis, properties, scales);
        axisDialog.open();
        axisDialog.$().removeClass("sapUiDlgFlexHeight sapUiDlgFlexWidth sapUiDlg sapUiDlgContentBorderDesignNone sapUiShd");
        axisDialog.$().addClass("prefMainDial sapUiDlg sapUiDlgContentBorderDesignNone sapUiDlgModal sapUiDlgNoPad sapUiShd");
       

        // 115 is the height of one single axisItem, 45 is the sum of the top, bottom and spliter
        var height = $(".sapUiDlgHdr").height() + 115 * this._axisContainer.length + $(".sapUiDlgFooter").height() + 45;
        var left = this._dom$.offset().left + this._dom$.width() / 2;
        var top = this._dom$.offset().top + this._dom$.height() / 2;
        left = left - height / 2;
        top = top - 350 / 2;
        axisDialog.$().css({
            "width" : "350px",
            "height" : height+"px",
            "position" : "absolute",
            "visibility" : "visible",
            "z-index" : "110",
            "display" : "block",
            "top" : top,
            "left" : left
        });
        $(".sapUiDlgHdrBtns").attr("data-sap-ui-area", $(".sapUiDlgHdrBtns").id);
        $(".sapUiDlgHdrBtns").empty();
        $(".sapUiDlgHdrBtns").addClass("viz-controls-chart-axis-dialog-close");
        $(".sapUiDlgHdrBtns").click(function(event) {
            this._close();
        }.bind(this));
         
    };

    return EditAxisView;
});

define('sap/viz/controls/chart/views/PropertyZone',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/events/EventDispatcher'],
// @formatter:on
function($, CSSConst, OOUtil, Event, EventDispatcher) {

    var PropertyZone = function(targetDiv, zoneProvider) {
        PropertyZone.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.views.DropZone";
        this._targetDiv = targetDiv;
        this._zoneProvider = zoneProvider;
        this._selectedZone$ = null;
        var style = "position:absolute;visibility:hidden;left:0px;top:0px;width:0px;height:0px;";
        this._dom = $(document.createElement("DIV")).appendTo(this._targetDiv.parentNode).attr('style', style);        
    };

    OOUtil.extend(PropertyZone, EventDispatcher);
    
    /**
     * Select zone event
     */
    PropertyZone.SELECT_ZONE = 'SELECT_ZONE_EVENT';
    
    /**
     * Create all zones 
     */
    PropertyZone.prototype._createZones = function(){
        //clear up original
        this._targetRect = this._targetDiv.getBoundingClientRect();
        var style = "position:absolute;left:0px;top:0px;width:" + this._targetRect.width + "px;height:" + this._targetRect.height + "px;";
        this._dom.empty().attr('style', style);

        //create sub div
        var zones = this._zoneProvider();
        for (var i = 0; i < zones.length; i++) {
            var areas = zones[i].bound;
            for (var n = 0; n < areas.length; n++) {
                this._createZone(this._dom[0], areas[n], zones[i].name);
            }
        }
    };
    
    /**
     * Create each zone div 
     */
    PropertyZone.prototype._createZone = function(parent, area, zoneName) {
        var div$ = $(document.createElement("DIV"));
        var left = area[0][0], top = area[0][1], width = area[2][0] - area[0][0], height = area[2][1] - area[0][1];
        var style = "left:" + left + "px;top:" + top + "px;width:" + width + "px;height:" + height + "px;";
        div$.attr('style', style).addClass(CSSConst.CHART_PREFIX + 'property-zone').appendTo(parent);
        div$.get(0).__name = zoneName;
        div$.click($.proxy(this._selectZone, this));
    };
    
    /**
     * Handler for zone clicked
     */
    PropertyZone.prototype._selectZone = function(event) {
        var curZone$ = $(event.target);
        if(this._selectedZone$ !== curZone$){
            if(this._selectedZone$){
                this._selectedZone$.removeClass(CSSConst.CHART_PREFIX + 'property-zone-selected');
            } 
            this._selectedZone$ = curZone$;               
            this._selectedZone$.addClass(CSSConst.CHART_PREFIX + 'property-zone-selected'); 
            var eventData = {
                'propertyZoneName' : this._selectedZone$.get(0).__name
            };
            this._dispatchEvent(new Event(PropertyZone.SELECT_ZONE, this, eventData));
        } 
    }; 
    
    /**
     * Active/Disactive property zone according to flag enableProperyZone of chart view
     * @param {Boolean} enableZone, flag enableProperyZone of chart view
     */
    PropertyZone.prototype.updateZone = function(enableZone) { 
        if(enableZone){
            this._createZones();
            this._dom.css('visibility', ''); 
        }else{
            this._dom.css('visibility', 'hidden'); 
        }        
    };
    
    /**
     * resize property zone
     * @param {width: Number, height: Number} size
     */
    PropertyZone.prototype.size = function(size) {
        if (size) {
            this._dom.css({
                width : size.width + "px",
                height : size.height + "px"
            });
        }
    };
    return PropertyZone;
});

define("sap/viz/controls/LanguageLoader", [], function() {
    sap.viz.framework.common.lang.LangManager.register({id:'language',value: {VIZ_COMMON_YAXIS:"Y Axis",VIZ_COMMON_DONT_SHOW_MESSAGE:"Don't show this again",VIZ_COMMON_ADD_ICON:"Add",VIZ_COMMON_SHOW_BY_DIMENSION:"Show by {0}",VIZ_COMMON_PIE_TEXT:"Pie Chart",VIZ_COMMON_ITEM:"Item",VIZ_COMMON_BOXPLOT_TEXT:"Box Plot",VIZ_COMMON_DIMENSION_LIMITATION_WARN:"You have reached the maximum number of dimension feeds for this visualization.",VIZ_COMMON_MIN:"Min",VIZ_COMMON_FEATUREANALYSIS:"Overlay Data",VIZ_COMMON_TABLE_MEASURE:"Primary Values",VIZ_COMMON_PIE_DEPTH:"Pie Depth",VIZ_COMMON_MAX_SHORT:"(Max)",VIZ_COMMON_SERIALIZATION_FAILED:"Serialization error",VIZ_COMMON_STACKED_COLUMN_TEXT:"Stacked Column Chart",VIZ_COMMON_PRIMARY_YAXIS:"Y Axis1",VIZ_COMMON_TAGFAMILY:"Word Color",VIZ_COMMON_ADD_MEASURES:"Add Measures",VIZ_COMMON_XAXIS:"X Axis",VIZ_COMMON_DIMENSIONS_TIPS:"Show value affected by measure",VIZ_COMMON_DELETE_COMMENT_MESSAGE:"Are you sure to delete the comment?",VIZ_COMMON_CHANGE_CALCULATION:"Change Calculation",VIZ_COMMON_DELETE:"Delete",VIZ_COMMON_TABLE_COLUMNS_AXIS:"Columns Axis",VIZ_COMMON_BETWEEN:"BETWEEN",VIZ_COMMON_SETTINGS_ICON:"Settings",VIZ_COMMON_OK:"OK",VIZ_COMMON_COUNT_ALL_SHORT:"(Cnt-All)",VIZ_COMMON_SUM_SHORT:"(Sum)",VIZ_COMMON_SCATTER_MATRIX_TEXT:"Scatter Matrix Chart",VIZ_COMMON_GEOMAP_TEXT:"Geo Map",VIZ_COMMON_SCATTER_TEXT:"Scatter Plot",VIZ_COMMON_MAX:"Max",VIZ_COMMON_LEGEND:"Legend",VIZ_COMMON_PRIMARY_XAXIS:"X Axis1",VIZ_COMMON_TOTAL_OF:"Total of",VIZ_COMMON_COUNT_OF:"Count of",VIZ_COMMON_CANCEL:"Cancel",VIZ_COMMON_GEO_FEATURES:"Geography",VIZ_COMMON_TAGCLOUD_TEXT:"Tag Cloud",VIZ_COMMON_NONE_SHORT:"(None)",VIZ_COMMON_CHOROPLETH_TEXT:"Geo Choropleth Chart",VIZ_COMMON_RADAR_AXES:"Radar Branches",VIZ_COMMON_COLUMNS:"Columns",VIZ_COMMON_ADD_ONE_MEASURE:"Add one Measure",VIZ_COMMON_RADAR_TEXT:"Radar Chart",VIZ_COMMON_COUNT_DISTINCT:"Count-Distinct",VIZ_COMMON_FAKE_DIMENSION:"Dimension",VIZ_COMMON_DUAL_LINE_TEXT:"Line Chart With 2 Y-Axes",VIZ_COMMON_TABLE_COLUMNS_SUBTOTALS:"Columns Subtotals",VIZ_COMMON_FEATUREVALUES:"Value",VIZ_COMMON_LINE_TEXT:"Line Chart",VIZ_COMMON_TABLE_TEXT:"Table",VIZ_COMMON_MEASURE_TIPS:"Sort, rank, add calculations",VIZ_COMMON_ROWS:"Rows",VIZ_COMMON_SUBTOTALS_TIPS:"Show value of subtotal",VIZ_COMMON_DUAL_BAR_TEXT:"Bar Chart With 2 Y-Axes",VIZ_COMMON_FAKE_MEASURE:"Measure",VIZ_COMMON_BUBBLE_HEIGHT:"Bubble Height",VIZ_COMMON_AVERAGE_SHORT:"(Avg)",VIZ_COMMON_REMOVE_ICON:"Remove",VIZ_COMMON_HEATMAP_TEXT:"Heat Map",VIZ_COMMON_TAGNAME:"Word",VIZ_COMMON_DUAL_COLUMN_TEXT:"Column Chart With 2 Y-Axes",VIZ_COMMON_RECTANGLEWEIGHT:"Area Weight",VIZ_COMMON_SUM_OF:"Sum of",VIZ_COMMON_AVERAGE:"Average",VIZ_COMMON_AREA_TEXT:"Area Chart",VIZ_COMMON_COUNT_DISTINCT_SHORT:"(Cnt-Dis)",VIZ_COMMON_GEO_COLOR:"Color",VIZ_COMMON_3D_BAR_TEXT:"3D Bar Chart",VIZ_COMMON_SEARCH:"Search",VIZ_COMMON_REGIONCOLOR:"Legend Color",VIZ_COMMON_ADD_DIMENSIONS:"Add Dimensions",VIZ_COMMON_TREEMAP_TEXT:"Tree Map",VIZ_COMMON_WATERFALL_TEXT:"Waterfall Chart",VIZ_COMMON_GEOPIE_TEXT:"Geo Pie Chart",VIZ_COMMON_TRELLIS:"TRELLIS",VIZ_COMMON_MIN_SHORT:"(Min)",VIZ_COMMON_BUBBLE_WIDTH:"Bubble Width",VIZ_COMMON_REGIONSHAPE:"Legend Shape",VIZ_COMMON_MEASURES:"MEASURES",VIZ_COMMON_SECONDARY_YAXIS:"Y Axis2",VIZ_COMMON_MAX_OF:"Maximum of",VIZ_COMMON_TAGWEIGHT:"Word Weight",VIZ_COMMON_3D_COLUMN_TEXT:"3D Column Chart",VIZ_COMMON_COUNT_ALL:"Count-All",VIZ_COMMON_TRELLIS_TIPS:"Add as rows and columns",VIZ_COMMON_CHOOSE_MEASURE:"Choose value",VIZ_COMMON_PIE_SECTORS:"Pie Sectors",VIZ_COMMON_EDIT:"Edit",VIZ_COMMON_TABLE_ROWS_SUBTOTALS:"Rows Subtotals",VIZ_COMMON_AVERAGE_OF:"Average of",VIZ_COMMON_DIMENSIONS:"DIMENSIONS",VIZ_COMMON_DEPENDENCY_ERROR:"Include {0} when using {1}.",VIZ_COMMON_DEPENDENCY_ERROR_WITH_UI_CONFIG:"Include {0} when using {1} with {2}.",VIZ_COMMON_ANIMATION:"Animation",VIZ_COMMON_GEOBUBBLE_TEXT:"Geographic Bubble Chart",VIZ_COMMON_RECTANGLECOLOR:"Area Color",VIZ_COMMON_AREANAME:"Area Name",VIZ_COMMON_SECONDARY_XAXIS:"X Axis2",VIZ_COMMON_CROSSTAB_TEXT:"Crosstab",VIZ_COMMON_BAR_TEXT:"Bar Chart",VIZ_COMMON_STACKED_BAR_TEXT:"Stacked Bar Chart",VIZ_COMMON_BUBBLE_TEXT:"Bubble Chart",VIZ_COMMON_ADD_ONE_DIMENSION:"Add one Dimension",VIZ_COMMON_DUAL_COMBINATION_TEXT:"Combined Column Line Chart With 2 Y-Axes",VIZ_COMMON_NONE:"None",VIZ_COMMON_MIN_OF:"Minimum of",VIZ_COMMON_REGION:"Region",VIZ_COMMON_TABLE_DIMENSION:"Rows Axis",VIZ_COMMON_SUBTOTALS:"SUBTOTALS",VIZ_COMMON_COMBINATION_TEXT:"Combined Column Line Chart",VIZ_COMMON_COLUMN_TEXT:"Column Chart",VIZ_COMMON_SUM:"Sum",VIZ_COMMON_PIE_WITH_DEPTH_TEXT:"Pie With Variable Slice Depth",VIZ_COMMON_DONUT_TEXT:"Donut Chart",VIZ_COMMON_INVALID_SERIALIZATION_PACKAGE:"Invalid serialization package",VIZ_COMMON_SECONDARY_AREANAME:"Area Name2",}});sap.viz.framework.common.lang.LangManager.register({id:'language',value: {VIZ_ANNOTATION_COMMENT:"Comment",}});sap.viz.framework.common.lang.LangManager.register({id:'language',value: {VIZ_CHART_BACK:"Back",VIZ_CHART_ADD_EVENT_FAILED:"Failed to add chart event callback:",VIZ_CHART_UPDATE_CSS_FAILED:"Failed to update chart css:",VIZ_CHART_XAXIS_RANGE:"X Axis Range",VIZ_CHART_EXPORTSVG_FAILED:"Failed to export to svg string.",VIZ_CHART_TITLE_CONTEXT_MENU_EDIT:"Rename",VIZ_CHART_INCOMPLETE_DESCRIPTION:"Add more measures or dimensions",VIZ_CHART_END:"End",VIZ_CHART_UPDATE_PROPERTIES_FAILED:"Failed to update chart properties:",VIZ_CHART_GRADIENT:"Gradient",VIZ_CHART_TRIGGER_ACTION_FAILED:"Failed to trigger chart action:",VIZ_CHART_UPDATE_CHART_FAILED:"Failed to update chart:",VIZ_CHART_ESRI_MAP_AUTHENTICATION_FAIL:"Esri Authentication Fail",VIZ_CHART_START:"Start",VIZ_CHART_XAXIS2_RANGE:"X Axis2 Range",VIZ_CHART_AXIS_ZOOM:"Zoom",VIZ_CHART_XAXIS1_RANGE:"X Axis1 Range",VIZ_CHART_NO_DATA_MATCHES_YOUR_FILTER:"No data matches your filter(s)",VIZ_CHART_ESRI_SERVICES_UNACCESSIBLE:"An unknown error has occurred while accessing ESRI online services. Check your internet connection.",VIZ_CHART_UPDATE_FEEDING_FAILED:"Failed to update chart feeding:",VIZ_CHART_SEGMENTED:"Segmented",VIZ_CHART_SET_AXIS_RANGE:"Set axis range",VIZ_CHART_TRELLIS_DISABLED_WARN:"The trellis is disabled in either the Viz Frame or Feeding Panel",VIZ_CHART_SELECTION_FAILED:"Failed to get/set chart selection:",VIZ_CHART_IMPORT_ESRI_CUSTOM_SERVICE:"Import Esri Custom Service",VIZ_CHART_NEGATIVE_VALUES_INFO:"To display negative values, click the Settings button and select Show Negative Values from the contextual menu.",VIZ_CHART_ESRI_MAP_LOG_ON:"Logging in to Esri now",VIZ_CHART_CREATE_CHART_FAILED:"Failed to create chart:",VIZ_CHART_MEASURE_INCOMPLETE_DESCRIPTION:"Add more measures",VIZ_CHART_FIXED_RANGE:"Fixed",VIZ_CHART_NEXT:"Next",VIZ_CHART_YAXIS_RANGE:"Y Axis Range",VIZ_CHART_RESET:"Reset",VIZ_CHART_UPDATE_DATA_FAILED:"Failed to update chart data:",VIZ_CHART_GEO_INCOMPLETE_DESCRIPTION:"Add more geography dimensions",VIZ_CHART_NO_ESRI_SERVICE:"No feature service was found for your account.",VIZ_CHART_VIZINSTANCE_NOT_CREATED:"VizInstance is not created",VIZ_CHART_TITLE_TEXT_JOIN_BY:"{0} by {1}",VIZ_CHART_INVALID_VIZ_TYPE:"Cannot display this chart: {0}.",VIZ_CHART_ESRI_MAP_LOADING:"Loading Esri Map",VIZ_CHART_REMOVE_EVENT_FAILED:"Failed to remove chart event callback:",VIZ_CHART_AUTO_RANGE:"Automatic",VIZ_CHART_NEGATIVE_VALUES_WARN:"Negative values are not shown in this Bubble chart",VIZ_CHART_FEEDINGZONE_FAILED:"Failed to get chart feeding zone:",VIZ_CONTROLS_API_PARAMETER_ERROR:"API parameter error",VIZ_CHART_YAXIS2_RANGE:"Y Axis2 Range",VIZ_CHART_YAXIS1_RANGE:"Y Axis1 Range",VIZ_CHART_TITLE_CONTEXT_MENU_RESTORE:"Restore Default Title",VIZ_CHART_SET_COLOR_LAYER:"Set color to feature layer",VIZ_CHART_DESCRIPTION_FAILED:"Failed to get/set chart description:",VIZ_CHART_TITLE_TEXT_JOIN_AND:"and",VIZ_CHART_DIMENSION_INCOMPLETE_DESCRIPTION:"Add more dimensions",VIZ_CHART_SELECT_DATASET:"Select data set",VIZ_CHART_CONFIRM:"Confirm",VIZ_CHART_SERIALIZE_FAILED:"Failed to serialize chart:",}});sap.viz.framework.common.lang.LangManager.register({id:'language',value: {VIZ_CONTEXTMENU_SHOW_TITLE:"Show Title",VIZ_CONTEXTMENU_SHOW_NEGATIVE_VALUES:"Show Negative Values",VIZ_CONTEXTMENU_VERTICAL:"Vertical",VIZ_CONTEXTMENU_CHANGE_MBCLEGEND_COLOR:"Choose Legend Item Colors...",VIZ_CONTEXTMENU_NO_MENU_ITEMS:"No available items",VIZ_CONTEXTMENU_SHOW_ABOVE_ROWS:"Show Subtotals Above Rows",VIZ_CONTEXTMENU_SHOW_LEGEND:"Show Legend",VIZ_CONTEXTMENU_SHOW_MND_TOOLTIP:"Creates a new dimension with all the measures in the chart. The values are spread on a single axis, or separate charts for a trellis chart.",VIZ_CONTEXTMENU_HORIZONTAL:"Horizontal",VIZ_CONTEXTMENU_FULL_STACKING:"100% Stacking",VIZ_CONTEXTMENU_SET_AXIS_SCALE:"Set Axis Scale",VIZ_CONTEXTMENU_NORMAL_STACKING:"Normal Stacking",VIZ_CONTEXTMENU_INSERT_COMMENT:"Insert Comment...",VIZ_CONTEXTMENU_SHOW_DATALABELS:"Show Data Labels",VIZ_CONTEXTMENU_SHOW_GRIDLINES:"Show Gridlines",VIZ_CONTEXTMENU_SHOW_BEFORE_ROWS:"Show Subtotals Below Rows",VIZ_CONTEXTMENU_SHOW_MND:"Use Measures as a Dimension",VIZ_CONTEXTMENU_MENU_CHART_EDITOR:"Chart Editor...",VIZ_CONTEXTMENU_CREATE_SUBTOTALS:"Create Subtotals",VIZ_CONTEXTMENU_CALCULATE_ROWS_TOTALS_FIRST:"Calculate Rows Totals First",}});sap.viz.framework.common.lang.LangManager.register({id:'language',value: {VIZ_CUSTOMBUTTON_RESTORE_DOWN:"Restore Down",VIZ_CUSTOMBUTTON_SETTINGS:"Settings",VIZ_CUSTOMBUTTON_MAXIMIZE:"Maximize",}});sap.viz.framework.common.lang.LangManager.register({id:'language',value: {VIZ_FRAME_FILTERBAR_DESCRIPTION:"Select fields from the dataset to filter",VIZ_FRAME_FILTERMENU_FILTER:"Filter",VIZ_FRAME_CHART_EDITOR:"Chart Editor",VIZ_FRAME_FILTERMENU_EXCLUDE:"Exclude",}});sap.viz.framework.common.lang.LangManager.register({id:'language',value: {VIZ_FILTERBAR_DESCRIPTION:"Add filters",VIZ_FILTERBAR_ITEMS_INCLUDED:"items included",VIZ_FILTERBAR_GLOBAL_FILTER:"Global Filter:",VIZ_FILTERBAR_ITEMS_EXCLUDED:"items excluded",}});
});

define("sap/viz/controls/TemplateLoader", [], function(){
    (function() {
    var toString = Object.prototype.toString;
    function isArray(it){
        return toString.call(it) === '[object Array]';
    }
    function isObject(it){
        return toString.call(it) === '[object Object]';
    }
    function _merge(a, b){
        for(var key in b){
            if(isArray(b[key])){
                a[key] = b[key].slice();
            }else if(isObject(b[key])){
                a[key] = a[key] || {};
                _merge(a[key], b[key]);
            }else{
                a[key] = b[key];
            }
        }
        return a;
    }
    function merge(){
        var res = {};
        for(var i = 0; i < arguments.length; ++i){
            _merge(res, arguments[i]);
        }
        return res;
    }

    var axisColor = "#333333";

    var background = {
        background: {
            border: {
                left: {
                    visible: false
                },

                right: {
                    visible: false
                },

                top: {
                    visible: false
                },

                bottom: {
                    visible: false
                }
            }
        }
    };

    var title = {
        title: {
            visible: false
        }
    };

    var tooltip = {
        tooltip: {
            visible: false
        }
    };

    var legend = {
        legend: {
            visible: false
        }
    };

    var interaction = {
        interaction: {
            selectability: {
                mode: "none"
            },
            enableMouseOver: false,
            enableMouseOut: false,
            enableMouseMove: false,
            enableHover: false
        }
    };

    var plotArea = {
        plotArea: {
            animation: {
                dataLoading: false,
                dataUpdating: false,
                resizing: false
            }
        }
    };

    var axis = {
        color: axisColor,
        label: {
            visible: true
        },
        axisline: {
            visible: true
        },
        enableLabelSelection: false
    };

    var horizontalEffect = {
        xAxis: axis,
        yAxis: axis,
        xAxis2: axis
    };

    var verticalEffect = {
        yAxis: axis,
        xAxis: axis,
        yAxis2: axis
    };

    var xyEffect = {
        xAxis: axis,
        yAxis: axis
    };

    var zAxis = {
        zAxis: axis
    };

    var multiAxisProperty = {
        color: axisColor,
        gridline: {
            color: axisColor
        },
        enableLabelSelection: false
    };

    var multiple = {
        rowAxis: multiAxisProperty,
        columnAxis: multiAxisProperty
    };

    var rotate = {
        rotate: {
            enableRotate: false
        }
    };

    var base = merge(background, title, tooltip, legend, interaction, plotArea, multiple);
    //-----------------------------------------------

    var ghost_properties_vertical_bar = merge(base, verticalEffect);

    var ghost_properties_horizontal_bar = merge(base, horizontalEffect);

    var ghost_properties_horizontal_3dbar = merge(base, xyEffect, zAxis, rotate);

    var ghost_properties_vertical_3dbar = merge(base, xyEffect, zAxis, rotate);

    var ghost_properties_horizontal_stackedbar = merge(base, horizontalEffect);

    var ghost_properties_vertical_stackedbar = merge(base, verticalEffect);

    var ghost_properties_horizontal_line = merge(base, horizontalEffect, {
        plotArea: {
            marker: {
                visible: false
            },
            tooltipVisble: false
        }
    });

    var ghost_properties_vertical_line = merge(base, verticalEffect, {
        plotArea: {
            marker: {
                visible: false
            }
        }
    });

    var ghost_properties_horizontal_combination = merge(base, horizontalEffect, {
        plotArea: {
            line: {
                marker: {
                    visible: false
                }
            },
            tooltipVisble: false
        }
    });

    var ghost_properties_vertical_combination = merge(base, verticalEffect, {
        plotArea: {
            line: {
                marker: {
                    visible: false
                }
            }
        }
    });

    var ghost_properties_bubble = merge(base, xyEffect, {
        sizeLegend: {
            visible: false
        }
    });

    var ghost_properties_scatter = merge(base, xyEffect);

    var ghost_properties_scattermatrix = merge(base, xyEffect, {
        xAxis: {
            gridline: {
                visible: false
            }
        },
        multiLayout: {
            plotTitle: {
                visible: false
            }
        }
    });

    var ghost_properties_heatmap = merge(base, xyEffect);

    var ghost_properties_treemap = merge(base);

    var ghost_properties_tagcloud = merge(base);

    var ghost_properties_pie = merge(base);

    var ghost_properties_donut = merge(base);

    var ghost_properties_pie_with_depth = merge(base, rotate);

    var ghost_properties_donut_with_depth = merge(base, rotate);

    var ghost_properties_radar = merge(base, {
        plotArea: {
            polarAxis: {
                title: {
                    visible: false
                }
            },
            valueAxis: {
                visible: true
            }
        }
    });

    var ghost_properties_vertical_boxplot = merge(base, verticalEffect);

    var ghost_properties_horizontal_boxplot = merge(base, horizontalEffect);

    var ghost_properties_vertical_waterfall = merge(base, verticalEffect);

    var ghost_properties_horizontal_waterfall = merge(base, horizontalEffect);

    var ghost_properties_mekko = merge(base, horizontalEffect);

    var ghost_properties_horizontal_mekko = merge(base, verticalEffect);

    var ghost_properties_network = merge(base, {
        plotArea: {
            draggable: false,
            label: {
                visible: false
            }
        }
    });

    var ghost_properties_tree = merge(base, {
        plotArea: {
            clickAble: false,
            label: {
                visible: false
            }
        }
    });

    sap.viz.extapi.env.Template.register({
        id: "incomplete_ghost",
        name: "Incomplete Ghost",
        version: "4.0.0",
        isGhost: true,
        properties: {
            'viz/bar': ghost_properties_horizontal_bar,
            'viz/image_bar': ghost_properties_horizontal_bar,
            'viz/multi_bar': ghost_properties_horizontal_bar,
            'viz/dual_bar': ghost_properties_horizontal_bar,
            'viz/multi_dual_bar': ghost_properties_horizontal_bar,
            'viz/column': ghost_properties_vertical_bar,
            'viz/multi_column': ghost_properties_vertical_bar,
            'viz/dual_column': ghost_properties_vertical_bar,
            'viz/multi_dual_column': ghost_properties_vertical_bar,
            'viz/stacked_bar': ghost_properties_horizontal_stackedbar,
            'viz/multi_stacked_bar': ghost_properties_horizontal_stackedbar,
            'viz/dual_stacked_bar': ghost_properties_horizontal_stackedbar,
            'viz/multi_dual_stacked_bar': ghost_properties_horizontal_stackedbar,
            'viz/100_stacked_bar': ghost_properties_horizontal_stackedbar,
            'viz/multi_100_stacked_bar': ghost_properties_horizontal_stackedbar,
            'viz/100_dual_stacked_bar': ghost_properties_horizontal_stackedbar,
            'viz/multi_100_dual_stacked_bar': ghost_properties_horizontal_stackedbar,
            'viz/stacked_column': ghost_properties_vertical_stackedbar,
            'viz/multi_stacked_column': ghost_properties_vertical_stackedbar,
            'viz/dual_stacked_column': ghost_properties_vertical_stackedbar,
            'viz/multi_dual_stacked_column': ghost_properties_vertical_stackedbar,
            'viz/100_stacked_column': ghost_properties_vertical_stackedbar,
            'viz/multi_100_stacked_column': ghost_properties_vertical_stackedbar,
            'viz/100_dual_stacked_column': ghost_properties_vertical_stackedbar,
            'viz/multi_100_dual_stacked_column': ghost_properties_vertical_stackedbar,
            'riv/cbar': ghost_properties_vertical_bar,

            'viz/3d_bar': ghost_properties_horizontal_3dbar,
            'viz/3d_column': ghost_properties_vertical_3dbar,

            'viz/combination': ghost_properties_vertical_combination,
            'viz/horizontal_combination': ghost_properties_horizontal_combination,
            'viz/dual_combination': ghost_properties_vertical_combination,
            'viz/dual_horizontal_combination': ghost_properties_horizontal_combination,

            'viz/boxplot': ghost_properties_vertical_boxplot,
            'viz/horizontal_boxplot': ghost_properties_horizontal_boxplot,

            'viz/waterfall': ghost_properties_vertical_waterfall,
            'viz/horizontal_waterfall': ghost_properties_horizontal_waterfall,

            'viz/stacked_waterfall': ghost_properties_vertical_waterfall,
            'viz/horizontal_stacked_waterfall': ghost_properties_horizontal_waterfall,

            'viz/line': ghost_properties_vertical_line,
            'viz/multi_line': ghost_properties_vertical_line,
            'viz/dual_line': ghost_properties_vertical_line,
            'viz/multi_dual_line': ghost_properties_vertical_line,
            'viz/horizontal_line': ghost_properties_horizontal_line,
            'viz/multi_horizontal_line': ghost_properties_horizontal_line,
            'viz/dual_horizontal_line': ghost_properties_horizontal_line,
            'viz/multi_dual_horizontal_line': ghost_properties_horizontal_line,

            'viz/area': ghost_properties_vertical_line,
            'viz/multi_area': ghost_properties_vertical_line,
            'viz/100_area': ghost_properties_vertical_line,
            'viz/multi_100_area': ghost_properties_vertical_line,
            'viz/horizontal_area': ghost_properties_horizontal_line,
            'viz/multi_horizontal_area': ghost_properties_horizontal_line,
            'viz/100_horizontal_area': ghost_properties_horizontal_line,
            'viz/multi_100_horizontal_area': ghost_properties_horizontal_line,

            'viz/pie': ghost_properties_pie,
            'viz/multi_pie': ghost_properties_pie,
            'viz/donut': ghost_properties_donut,
            'viz/multi_donut': ghost_properties_donut,

            'viz/pie_with_depth': ghost_properties_pie_with_depth,
            'viz/donut_with_depth': ghost_properties_donut_with_depth,

            'viz/bubble': ghost_properties_bubble,
            'viz/multi_bubble': ghost_properties_bubble,
            'viz/scatter': ghost_properties_scatter,
            'viz/multi_scatter': ghost_properties_scatter,
            'viz/scatter_matrix': ghost_properties_scattermatrix,

            'viz/radar': ghost_properties_radar,
            'viz/multi_radar': ghost_properties_radar,

            'viz/tagcloud': ghost_properties_tagcloud,

            'viz/heatmap': ghost_properties_heatmap,
            'viz/treemap': ghost_properties_treemap,
            'viz/mekko': ghost_properties_mekko,
            'viz/100_mekko': ghost_properties_mekko,
            'viz/horizontal_mekko': ghost_properties_horizontal_mekko,
            'viz/100_horizontal_mekko': ghost_properties_horizontal_mekko,

            'viz/network': ghost_properties_network,
            'viz/tree': ghost_properties_tree,
            'viz/number': {
                plotArea: {
                    valuePoint: {
                        label: {
                            fontColor: '#000000'
                        }
                    }
                }
            },

            // info charts
            'info/column': info(ghost_properties_vertical_bar),
            'info/bar': info(ghost_properties_horizontal_bar),
            'info/line': info(ghost_properties_vertical_line),
            'info/pie': infoPie(ghost_properties_pie),
            'info/donut': infoPie(ghost_properties_donut),
            'info/scatter': infoBubble(ghost_properties_scatter),
            'info/bubble': infoBubble(ghost_properties_bubble),
            'info/stacked_column': info(ghost_properties_vertical_stackedbar),
            'info/stacked_bar': info(ghost_properties_horizontal_stackedbar),
            'info/combination': info(ghost_properties_vertical_combination),
            'info/stacked_combination': info(ghost_properties_vertical_combination),
            'info/dual_stacked_combination': infoDual(ghost_properties_vertical_combination),
            'info/dual_column': infoDual(ghost_properties_vertical_bar),
            'info/dual_line': infoDual(ghost_properties_vertical_line),
            'info/dual_bar': infoDual(ghost_properties_horizontal_bar),
            'info/100_stacked_column': info(ghost_properties_vertical_stackedbar),
            'info/100_stacked_bar': info(ghost_properties_horizontal_stackedbar),
            'info/horizontal_line': info(ghost_properties_horizontal_line),
            'info/dual_horizontal_line': infoDual(ghost_properties_horizontal_line),
            'info/horizontal_combination': info(ghost_properties_horizontal_combination),
            'info/horizontal_stacked_combination': info(ghost_properties_horizontal_combination),
            'info/dual_horizontal_stacked_combination': infoDual(ghost_properties_horizontal_combination),
            'info/treemap': infoTreemap(ghost_properties_treemap),

            'info/trellis_column': info(ghost_properties_vertical_bar),
            'info/trellis_bar': info(ghost_properties_horizontal_bar),
            'info/trellis_line': info(ghost_properties_vertical_line),
            'info/trellis_pie': infoPie(ghost_properties_pie),
            'info/trellis_donut': infoPie(ghost_properties_donut),
            'info/trellis_scatter': infoBubble(ghost_properties_scatter),
            'info/trellis_bubble': infoBubble(ghost_properties_bubble),
            'info/trellis_stacked_column': info(ghost_properties_vertical_stackedbar),
            'info/trellis_stacked_bar': info(ghost_properties_horizontal_stackedbar),
            'info/trellis_combination': info(ghost_properties_vertical_combination),
            'info/trellis_dual_column': infoDual(ghost_properties_vertical_bar),
            'info/trellis_dual_line': infoDual(ghost_properties_vertical_line),
            'info/trellis_dual_bar': infoDual(ghost_properties_horizontal_bar),
            'info/trellis_100_stacked_column': info(ghost_properties_vertical_stackedbar),
            'info/trellis_100_stacked_bar': info(ghost_properties_horizontal_stackedbar),
            'info/trellis_horizontal_line': info(ghost_properties_horizontal_line),
            'info/trellis_dual_horizontal_line': infoDual(ghost_properties_horizontal_line),
            'info/trellis_horizontal_combination': info(ghost_properties_horizontal_combination),
            'info/trellis_dual_stacked_bar': infoDual(ghost_properties_horizontal_stackedbar),
            'info/trellis_dual_stacked_column': infoDual(ghost_properties_vertical_stackedbar),

            'info/dual_stacked_bar': infoDual(ghost_properties_horizontal_stackedbar),
            'info/100_dual_stacked_bar': infoDual(ghost_properties_horizontal_stackedbar),
            'info/dual_stacked_column': infoDual(ghost_properties_vertical_stackedbar),
            'info/100_dual_stacked_column': infoDual(ghost_properties_vertical_stackedbar),
            'info/time_bubble': infoBubble(ghost_properties_bubble),
            'info/bullet' : info(base),
            'info/vertical_bullet' : info(base),
            'info/trellis_bullet' : info(base),
            'info/trellis_vertical_bullet' : info(base)
        }
        // properties
    });

    function info(obj) {
        var ret = {};
        for (var i in obj) {
            if (obj.hasOwnProperty(i)) {
                ret[i] = obj[i];
            }
        }

        ret.interaction = {
            selectability: {
                mode: "none",
                axisLabelSelection: false,
                legendSelection: false,
                plotLassoSelection: false,
                plotStdSelection: false
            }
        };

        ret.valueAxis = {
            color: axisColor,
            label: {
                visible: true
            },
            axisline: {
                visible: true
            }
        };

        ret.categoryAxis = {
            color: axisColor,
            label: {
                visible: true
            },
            axisline: {
                visible: true
            }
        };

        ret.plotArea = ret.plotArea || {};
        ret.plotArea.gridline = {
            color: "#efefef"
        };

        general(ret);
        return ret;
    }

    function infoDual(obj) {
        var ret = info(obj);

        ret.valueAxis2 = {
            color: axisColor,
            label: {
                visible: true
            },
            axisline: {
                visible: true
            }
        };

        general(ret);
        return ret;
    }

    function infoBubble(obj) {
        var ret = info(obj);

        delete ret.categoryAxis;

        ret.valueAxis2 = {
            color: axisColor,
            label: {
                visible: true
            },
            axisline: {
                visible: true
            }
        };

        general(ret);
        return ret;
    }

    function infoPie(obj) {
        var ret = {};
        for (var i in obj) {
            if (obj.hasOwnProperty(i)) {
                ret[i] = obj[i];
            }
        }

        ret.interaction = {
            selectability: {
                mode: "none",
                axisLabelSelection: false,
                legendSelection: false,
                plotLassoSelection: false,
                plotStdSelection: false
            }
        };

        general(ret);
        return ret;
    }

    function general(obj) {
        obj.plotArea = obj.plotArea || {};
        obj.plotArea.background = obj.background || background;
        delete obj.background;

        delete obj.xAxis;
        delete obj.xAxis2;
        delete obj.yAxis;
        delete obj.yAxis2;
        delete obj.rowAxis;
        delete obj.columnAxis;
    }
    
    function infoTreemap(obj) {
        obj = merge(background, obj);
        return info(obj);
    }
})();
(function(){
var axisColor = "#333333";

var backgroundProperty = {
    border:{
        left:{
            visible: false
        },
        
        right:{
            visible: false
        },
        
        top:{
            visible: false
        },
        
        bottom:{
            visible: false
        }
    }
};

var interactionProperty = {
    selectability : {
        mode : "none"
    },
    enableMouseOver : false,
    enableMouseOut : false,
    enableMouseMove : false
};

var animationProperty = {
    dataLoading : false,
    dataUpdating : false
};

var multiAxisProperty = {
    color:axisColor,
    gridline:{
      color: axisColor
    },
    label:{
      visible:false
    }
};
var ghostPropertiesGeoChart = {
    
    plotArea : {
        animation : animationProperty
    },
    
    title: {
        visible: false
    },
    
    legend: {
        visible: false
    },

    sizeLegend : {
        visible : false
    },
    
    background : backgroundProperty,
    interaction : interactionProperty,

    rowAxis:multiAxisProperty,
    columnAxis:multiAxisProperty,

    geoController : {
        disableInteraction : true
    }
};

sap.viz.extapi.env.Template.register({
     id : "incomplete_ghost",
     properties :{
        'viz/geobubble' : ghostPropertiesGeoChart,
        'viz/geopie' : ghostPropertiesGeoChart,
        'viz/choropleth' : ghostPropertiesGeoChart,
        'viz/multi_geobubble' : ghostPropertiesGeoChart,
        'viz/multi_choropleth' : ghostPropertiesGeoChart
    }
});
})();
var axisColor = "#333333";
  var backgroundProperty = {
    border : {
      left : {
        visible : false
      },
  
      right : {
        visible : false
      },
  
      top : {
        visible : false
      },
  
      bottom : {
        visible : false
      }
    }
  };
  
  var interactionProperty = {
    selectability : {
      mode : "none"
    },
    enableMouseOver : false,
    enableMouseOut : false,
    enableMouseMove : false,
    enableHover : false
  };
  
   
  var incomplete_ghostFunnelEffect = {    
    title : {
      visible : false
    },
  
    legend : {
      visible : false
    },
  
    background : backgroundProperty,
    interaction : interactionProperty
  };

 var incomplete_ghostPCEffect = {    
    title : {
      visible : false
    },
  
    legend : {
      visible : false
    },
  
    background : backgroundProperty
  };


sap.viz.extapi.env.Template.register({ id : "incomplete_ghost", 
	  properties : {
        'viz/ext/pa/funnel' : incomplete_ghostFunnelEffect,
        'viz/ext/pa/pc' : incomplete_ghostPCEffect       
    },
	css : "\
		.v-m-main .v-background-body{fill:;}\
		 svg {font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:12px;}\
		.axis line{fill: none;stroke: #333333;shape-rendering: crispEdges;}\
	    .axis path{fill: none;stroke: #333333;shape-rendering: crispEdges;}\
	   .axistext{fill: #333333; cursor : move;}\
	",
});
var axisColor = "#333333";
  var backgroundProperty = {
    border : {
      left : {
        visible : false
      },
  
      right : {
        visible : false
      },
  
      top : {
        visible : false
      },
  
      bottom : {
        visible : false
      }
    }
  };
  
  var interactionProperty = {
    selectability : {
      mode : "none"
    },
    enableMouseOver : false,
    enableMouseOut : false,
    enableMouseMove : false,
    enableHover : false
  };
  
   
  var incomplete_ghostFunnelEffect = {    
    title : {
      visible : false
    },
  
    legend : {
      visible : false
    },
  
    background : backgroundProperty,
    interaction : interactionProperty
  };

 var incomplete_ghostPCEffect = {    
    title : {
      visible : false
    },
  
    legend : {
      visible : false
    },
  
    background : backgroundProperty
  };


sap.viz.extapi.env.Template.register({ id : "incomplete_ghost", 
	  properties : {
        'viz/ext/pa/funnel' : incomplete_ghostFunnelEffect,
        'viz/ext/pa/pc' : incomplete_ghostPCEffect       
    },
	css : "\
		.v-m-main .v-background-body{fill:;}\
		 svg {font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:12px;}\
		.axis line{fill: none;stroke: #333333;shape-rendering: crispEdges;}\
	    .axis path{fill: none;stroke: #333333;shape-rendering: crispEdges;}\
	   .axistext{fill: #333333; cursor : move;}\
	",
});

});

define('sap/viz/controls/chart/morph/constant/MorphConst',[],function() {

    var MorphConst = {};

    // Shape Data Key
    MorphConst.SHAPE_DATA = "data";
    
    // Morphing Data Key
    MorphConst.MORPHING_DATA = "morph-data";

    MorphConst.SHAPE_GLOBAL_TRANSLATE_X = "translateX";
    MorphConst.SHAPE_GLOBAL_TRANSLATE_Y = "translateY";

    MorphConst.MORPHER_DISABLE_COLOR = "MORPHER_DISABLE_COLOR";
    MorphConst.MORPHER_DISABLE_LINE = "MORPHER_DISABLE_LINE";
    MorphConst.MORPHER_DISABLE_PATH = "MORPHER_DISABLE_PATH";
    MorphConst.MORPHER_DISABLE_RECT = "MORPHER_DISABLE_RECT";
    MorphConst.MORPHER_DISABLE_TEXT = "MORPHER_DISABLE_TEXT";
    MorphConst.MORPHER_DISABLE_TRANSFORM = "MORPHER_DISABLE_TRANSFORM";

    // Chart Types
    MorphConst.CHART_TYPE_COLUMN = "viz/column";
    MorphConst.CHART_TYPE_STACKED_COLUMN = "viz/stacked_column";
    MorphConst.CHART_TYPE_100_STACKED_COLUMN = "viz/100_stacked_column";
    MorphConst.CHART_TYPE_DUAL_COLUMN = "viz/dual_column";
    MorphConst.CHART_TYPE_3D_COLUMN = "viz/3d_column";

    MorphConst.CHART_TYPE_BAR = "viz/bar";
    MorphConst.CHART_TYPE_STACKED_BAR = "viz/stacked_bar";
    MorphConst.CHART_TYPE_100_STACKED_BAR = "viz/100_stacked_bar";
    MorphConst.CHART_TYPE_DUAL_BAR = "viz/dual_bar";
    MorphConst.CHART_TYPE_3D_BAR = "viz/3d_bar";

    MorphConst.CHART_TYPE_LINE = "viz/line";
    MorphConst.CHART_TYPE_HORIZONTAL_LINE = "viz/horizontal_line";
    MorphConst.CHART_TYPE_DUAL_LINE = "viz/dual_line";
    MorphConst.CHART_TYPE_DUAL_HORIZONTAL_LINE = "viz/dual_horizontal_line";

    MorphConst.CHART_TYPE_AREA = "viz/area";
    MorphConst.CHART_TYPE_HORIZONTAL_AREA = "viz/horizontal_area";
    MorphConst.CHART_TYPE_100_AREA = "viz/100_area";
    MorphConst.CHART_TYPE_100_HORIZONTAL_AREA = "viz/100_horizontal_area";

    MorphConst.CHART_TYPE_COMBINATION = "viz/combination";
    MorphConst.CHART_TYPE_HORIZONTAL_COMBINATION = "viz/horizontal_combination";
    MorphConst.CHART_TYPE_DUAL_COMBINATION = "viz/dual_combination";
    MorphConst.CHART_TYPE_DUAL_HORIZONTAL_COMBINATION = "viz/dual_horizontal_combination";

    MorphConst.CHART_TYPE_BOXPLOT = "viz/boxplot";
    MorphConst.CHART_TYPE_HORIZONTAL_BOXPLOT = "viz/horizontal_boxplot";

    MorphConst.CHART_TYPE_WATERFALL = "viz/waterfall";
    MorphConst.CHART_TYPE_HORIZONTAL_WATERFALL = "viz/horizontal_waterfall";

    MorphConst.CHART_TYPE_PIE = "viz/pie";
    MorphConst.CHART_TYPE_DONUT = "viz/donut";
    MorphConst.CHART_TYPE_PIE_WITH_DEPTH = "viz/pie_with_depth";

    MorphConst.CHART_TYPE_SCATTER = "viz/scatter";
    MorphConst.CHART_TYPE_BUBBLE = "viz/bubble";
    MorphConst.CHART_TYPE_SCATTER_MATRIX = "viz/scatter_matrix";

    MorphConst.CHART_TYPE_GEO_BUBBLE = "viz/geobubble";
    MorphConst.CHART_TYPE_GEO_CHOROPLETH = "viz/choropleth";
    MorphConst.CHART_TYPE_GEO_PIE = "viz/geopie";

    MorphConst.CHART_TYPE_HEATMAP = "viz/heatmap";
    MorphConst.CHART_TYPE_TREEMAP = "viz/treemap";

    MorphConst.CHART_TYPE_TABLE = "viz/ext/table";
    MorphConst.CHART_TYPE_CROSSTAB = "viz/ext/crosstab";

    MorphConst.CHART_TYPE_RADAR = "viz/radar";

    MorphConst.CHART_TYPE_TAG_CLOUD = "viz/tagcloud";
    
    MorphConst.CHART_TYPE_INFO_BAR = "info/bar";
    MorphConst.CHART_TYPE_INFO_COLUMN = "info/column";
    MorphConst.CHART_TYPE_INFO_LINE = "info/line";
    MorphConst.CHART_TYPE_INFO_HORIZONTAL_LINE = "info/horizontal_line";
    MorphConst.CHART_TYPE_INFO_DONUT = "info/donut";

    // Chart Horizontal - Vertical Mapping
    var _CHART_VERTICAL_HORIZONTAL_MAPPING = {};
    var mapChartVH = function(vType, hType) {
        _CHART_VERTICAL_HORIZONTAL_MAPPING[vType] = hType;
    };
    mapChartVH(MorphConst.CHART_TYPE_COLUMN, MorphConst.CHART_TYPE_BAR);
    mapChartVH(MorphConst.CHART_TYPE_STACKED_COLUMN, MorphConst.CHART_TYPE_STACKED_BAR);
    mapChartVH(MorphConst.CHART_TYPE_100_STACKED_COLUMN, MorphConst.CHART_TYPE_100_STACKED_BAR);
    mapChartVH(MorphConst.CHART_TYPE_DUAL_COLUMN, MorphConst.CHART_TYPE_DUAL_BAR);
    mapChartVH(MorphConst.CHART_TYPE_3D_COLUMN, MorphConst.CHART_TYPE_3D_BAR);
    mapChartVH(MorphConst.CHART_TYPE_LINE, MorphConst.CHART_TYPE_HORIZONTAL_LINE);
    mapChartVH(MorphConst.CHART_TYPE_DUAL_LINE, MorphConst.CHART_TYPE_DUAL_HORIZONTAL_LINE);
    mapChartVH(MorphConst.CHART_TYPE_AREA, MorphConst.CHART_TYPE_HORIZONTAL_AREA);
    mapChartVH(MorphConst.CHART_TYPE_100_AREA, MorphConst.CHART_TYPE_100_HORIZONTAL_AREA);
    mapChartVH(MorphConst.CHART_TYPE_COMBINATION, MorphConst.CHART_TYPE_HORIZONTAL_COMBINATION);
    mapChartVH(MorphConst.CHART_TYPE_DUAL_COMBINATION, MorphConst.CHART_TYPE_DUAL_HORIZONTAL_COMBINATION);
    mapChartVH(MorphConst.CHART_TYPE_BOXPLOT, MorphConst.CHART_TYPE_HORIZONTAL_BOXPLOT);
    mapChartVH(MorphConst.CHART_TYPE_WATERFALL, MorphConst.CHART_TYPE_HORIZONTAL_WATERFALL);
    mapChartVH(MorphConst.CHART_TYPE_INFO_COLUMN, MorphConst.CHART_TYPE_INFO_BAR);
    mapChartVH(MorphConst.CHART_TYPE_INFO_LINE, MorphConst.CHART_TYPE_INFO_HORIZONTAL_LINE);
    
    /**
     *
     * @param {String} type1
     * @param {String} type2
     *
     * @return {Boolean}
     */
    MorphConst.IS_V_H_MAP = function(type1, type2) {
        if(_CHART_VERTICAL_HORIZONTAL_MAPPING[type1] && _CHART_VERTICAL_HORIZONTAL_MAPPING[type1] === type2) {
            return true;
        }
        if(_CHART_VERTICAL_HORIZONTAL_MAPPING[type2] && _CHART_VERTICAL_HORIZONTAL_MAPPING[type2] === type1) {
            return true;
        }
        return false;
    };
    return MorphConst;
});

define('sap/viz/controls/chart/morph/utils/Utils',[],function() {
    var utils = {};

    // static private in globale to make sure id is not duplicated
    var _morph_util_GEN_UID = 0;
    /**
     * return the global uid for HTML elements in the same window scope.
     *
     */
    utils.genUID = function() {
        if(!_morph_util_GEN_UID) {
            _morph_util_GEN_UID = 0;
        }
        return "mgen_" + (_morph_util_GEN_UID++);
    };
    var class2type = {
        '[object Boolean]' : 'boolean',
        '[object Number]' : 'number',
        '[object String]' : 'string',
        '[object Function]' : 'function',
        '[object Array]' : 'array',
        '[object Date]' : 'date',
        '[object RegExp]' : 'regexp',
        '[object Object]' : 'object'
    };

    utils.type = function(obj) {
        return !obj ? String(obj) : class2type[Object.prototype.toString.call(obj)] || "object";
    };

    utils.isFunction = function(obj) {
        return utils.type(obj) === "function";
    };

    utils.isBoolean = function(obj) {
        return utils.type(obj) === "boolean";
    };

    utils.isString = function(obj) {
        return utils.type(obj) === "string";
    };

    utils.isArray = function(obj) {
        return utils.type(obj) === "array";
    };

    utils.isNumber = function(obj) {
        return utils.type(obj) === "number";
    };

    utils.isRegExp = function(obj) {
        return utils.type(obj) === "regexp";
    };
    /**
     * Sort an object Array.
     *
     * @param {Array} arr The object Array to sort.
     * @param {String} prop The object field for the sort.
     * @param {Boolean} [desc] Sort by ASC or DESC, by default is ASC.
     *
     */
    utils.sortArrayOn = function(arr, prop, desc) {
        if(utils.isArray(arr) && utils.isString(prop)) {
            arr.sort(function(a, b) {
                return desc ? (a[prop] < b[prop]) - (a[prop] > b[prop]) : (a[prop] > b[prop]) - (a[prop] < b[prop]);
            });
        }
    };
    /**
     * An empty function doing nothing.
     */
    utils.noop = function() {
    };
    return utils;
});

define('sap/viz/controls/chart/morph/utils/SVGShapeMetadata',[],function() {
    var SVGShapeMetadata = {};

    var SHAPE_MP_METADATA = "__vizmp__";

    SVGShapeMetadata.set = function(shapeEl, name, value) {
        if(!shapeEl[SHAPE_MP_METADATA]) {
            shapeEl[SHAPE_MP_METADATA] = {};
        }
        shapeEl[SHAPE_MP_METADATA][name] = value;
    };

    SVGShapeMetadata.get = function(shapeEl, name) {
        if(shapeEl && shapeEl[SHAPE_MP_METADATA] !== null && shapeEl[SHAPE_MP_METADATA] !== undefined) {
            return shapeEl[SHAPE_MP_METADATA][name];
        }
        return undefined;
    };

    SVGShapeMetadata.clone = function(newShapeEl, oldShapeEl) {
        newShapeEl[SHAPE_MP_METADATA] = oldShapeEl[SHAPE_MP_METADATA];
        // TODO use deep clone?
        return newShapeEl;
    };
    return SVGShapeMetadata;
});

define('sap/viz/controls/chart/morph/vo/VizShape',[],function() {
    /**
     * VizShape VO
     */
    var VizShape = function(from, to, display) {
        this.from = from;
        this.to = to;
        this.display = display;
    };
    return VizShape;
});

define('sap/viz/controls/chart/morph/vo/VizShapesHolder',[],function() {
    /**
     * VizShapes VO
     */
    var VizShapesHolder = function() {
        this.plotShapes = [];
        //[sap.viz.morph.vo.VizShape]
        this.plotLines = [];
        //[sap.viz.morph.vo.VizShape]
        this.xAxisLabels = [];
        //[sap.viz.morph.vo.VizShape]
        this.xAxis2Labels = [];
        //[sap.viz.morph.vo.VizShape]
        this.yAxisLabels = [];
        //[sap.viz.morph.vo.VizShape]
        this.yAxis2Labels = [];
        //[sap.viz.morph.vo.VizShape]
        this.backgrounds = [];
        //[sap.viz.morph.vo.VizShape]
    };
    
    VizShapesHolder.prototype.empty = function() {
        this.plotShapes = [];
        this.plotLines = [];
        this.xAxisLabels = [];
        this.xAxis2Labels = [];
        this.yAxisLabels = [];
        this.yAxis2Labels = [];
        this.backgrounds = [];
    };
    
    /**
     * convert to a single array with all the shapes
     *
     * @return {[sap.viz.morph.vo.VizShape]}
     */
    VizShapesHolder.prototype.allByOrder = function() {
        // defined the drawing order, upper is deeper
        return [].concat(this.backgrounds,
                         this.xAxis2Labels,
                         this.xAxisLabels, 
                         this.yAxis2Labels,
                         this.yAxisLabels, 
                         this.plotLines,
                         this.plotShapes 
                         );
    };

    VizShapesHolder.prototype.toShapesBySvgType = function() {
        var allByType = {};
        var allShapes = [];
        allByType["all"] = allShapes;
        var allVizShapes = this.allByOrder();
        for(var i = 0; i < allVizShapes.length; i++) {
            var vizShape = allVizShapes[i];
            if(vizShape.to) {
                var type = vizShape.to.localName;
                var typeShapes = allByType[type];
                if(!typeShapes) {
                    allByType[type] = typeShapes = [];
                }
                typeShapes.push(vizShape);
                allShapes.push(vizShape);
            }
        }
        return allByType;
    };
    return VizShapesHolder;
});

define('sap/viz/controls/chart/morph/viz/MpShapesCapturer',[
// @formatter:off
    'sap/viz/controls/chart/morph/constant/MorphConst',
    'sap/viz/controls/chart/morph/utils/SVGShapeMetadata',
    'sap/viz/controls/chart/morph/vo/VizShape',
    'sap/viz/controls/chart/morph/vo/VizShapesHolder',
    'sap/viz/controls/common/utils/ChartTypeUtil'],
// @formatter:on
function(MorphConst, SVGShapeMetadata, VizShape, VizShapesHolder, ChartTypeUtil) {
    var MpShapesCapturer = {};
    /**
     * @param {HTMLDivElement} vizDiv
     * @return {sap.viz.morph.vo.VizShapesHolder} cloned mp shapes added as "to shape" in a flaten graphic structure
     */
    MpShapesCapturer.getShapes = function(vizDiv, vizType) {
        var vizShapesHolder = new VizShapesHolder();
        // the root svg
        var vizRootSvg = d3.select(vizDiv).select(".v-m-root");
        // except title and legend
        var vizMainArea = d3.select(vizDiv).select(".v-m-main");

        var rootSvgNode = vizRootSvg.node();

        if(rootSvgNode &&
                // Make sure the svg node is visible (not display:none or under a display:none parent),
                // otherwise, the getScreenCTM function will throw error in IE9.
                rootSvgNode.clientHeight > 0 && rootSvgNode.clientWidth > 0 &&
                // check for only SVG node
                rootSvgNode.getScreenCTM !== undefined) {
            // calculate gradient color
            var vizGradientColors = parseGradientColors(vizRootSvg);
            // calculate x y position
            var vizRootCTM = rootSvgNode.getScreenCTM();

            vizShapesHolder.plotShapes   = captureShapes(vizRootSvg,   ".v-m-root .v-morphable-datapoint", vizRootCTM, vizGradientColors, vizType);
            vizShapesHolder.plotLines    = captureShapes(vizRootSvg,   ".v-m-root .v-morphable-line, " + 
                                                                        ".v-m-root .v-morphable-areabg", vizRootCTM, vizGradientColors);
            vizShapesHolder.xAxisLabels  = captureShapes(vizMainArea,   ".v-m-xAxis .v-morphable-label", vizRootCTM);
            vizShapesHolder.xAxis2Labels = captureShapes(vizMainArea,   ".v-m-xAxis2 .v-morphable-label", vizRootCTM);
            vizShapesHolder.yAxisLabels  = captureShapes(vizMainArea,   ".v-m-yAxis .v-morphable-label", vizRootCTM);
            vizShapesHolder.yAxis2Labels = captureShapes(vizMainArea,   ".v-m-yAxis2 .v-morphable-label", vizRootCTM);
            vizShapesHolder.backgrounds  = captureShapes(vizRootSvg,    ".v-m-root .v-morphable-background", vizRootCTM);

            // disable size morphing for background
            for(var i = 0; i < vizShapesHolder.backgrounds.length; i++) {
                var vizShape = vizShapesHolder.backgrounds[i];
                SVGShapeMetadata.set(vizShape.to, MorphConst.MORPHER_DISABLE_RECT, true);
            }
            // TODO: disable too complex and too many path morphing
        }

        return vizShapesHolder;
    };

    /**
     * @param {D3Selection} d3Selection
     * @param {String} shapeSelector
     * @param {Matrix} offsetCTM
     *
     * @return [{sap.viz.morph.vo.VizShape}] each VizShape has .to property keep the shape SVGElement
     */
    var captureShapes = function(d3Selection, shapeSelector, offsetCTM, vizGradientColors, vizType) {
        var shapes = d3Selection.selectAll(shapeSelector);
        var clonedShapes = [];
        shapes.each(function(d, i) {
            // the force ignore list
            if(this.localName === "path" && String(this.getAttribute("class")).indexOf("v-geo-choropleth-feature") >= 0) {
                return;
            }
            // clone the shape
            var shape = this.cloneNode(true);
            if (String(this.getAttribute("class")).indexOf("v-morphable-datapoint") >= 0) {
                if (vizType) {
                    if (ChartTypeUtil.isInfoChart(vizType)) {
                        shape = this.firstChild ? this.firstChild.cloneNode(true) : shape;
                    }
                }
            }

            // keep d3 element's metadata
            SVGShapeMetadata.set(shape, MorphConst.SHAPE_DATA, this.__data__);
            // process shape state for different viz types
            processShape(shape, this, vizGradientColors);
            // flaten shape to one single SVG
            alignPosition(this, offsetCTM, shape);
            // new captured shape is always "to shape"
            clonedShapes.push(new VizShape(null, shape, null));
        });
        return clonedShapes;
    };
    /**
     * // TODO handle more gradient cases introduced by Viz side to get "avg" color for morphing
     *
     * @param {SVGElement} vizRootSvg
     *
     * @return {id, fillColor}
     */
    var parseGradientColors = function(vizRootSvg) {
        var gradientColorMap = {};
        var hasGradientColor = false;
        var vizDefs = vizRootSvg.selectAll("defs");
        vizDefs.each(function() {
            var defNode = this;
            if(defNode.firstChild) {
                var children = defNode.childNodes;
                for(var i = 0; i < children.length; i++) {
                    var gradientNode = children[i];
                    // refered from sap.viz.util.EffectManager
                    if(gradientNode) {
                        var gradientId = "";
                        var stops = [];
                        var fillColor = "#000000";
                        if(gradientNode.localName === "linearGradient") {
                            gradientId = gradientNode.getAttribute("id");
                            stops = gradientNode.childNodes;
                            if(stops.length === 2) {
                                fillColor = stops[1].getAttribute("stop-color");
                            } else if(stops.length === 4) {
                                fillColor = stops[3].getAttribute("stop-color");
                            } else {
                                fillColor = stops[stops.length - 1].getAttribute("stop-color");
                            }
                            gradientColorMap[gradientId] = fillColor;
                            hasGradientColor = true;
                        } else if(gradientNode.localName === "radialGradient") {
                            gradientId = gradientNode.getAttribute("id");
                            stops = gradientNode.childNodes;
                            if(stops.length === 3) {
                                fillColor = stops[1].getAttribute("stop-color");
                            } else if(stops.length === 4) {
                                fillColor = stops[3].getAttribute("stop-color");
                            } else {
                                fillColor = stops[stops.length - 1].getAttribute("stop-color");
                            }
                            gradientColorMap[gradientId] = fillColor;
                            hasGradientColor = true;
                        }
                    }
                }
            }
        });
        if(hasGradientColor) {
            // TODO const the special key
            gradientColorMap["__hasGradientColor"] = true;
        }
        return gradientColorMap;
    };
    /**
     *
     * @param {SVGElement} originalShapeEl
     * @param {Matrix} originalRootCTM
     * @param {SVGElement} newShapeEl
     */
    var alignPosition = function(originalShapeEl, originalRootCTM, newShapeEl) {
        // TODO handle Matrix abcd
        var originalCTM = originalShapeEl.getScreenCTM();
        var left = originalCTM.e - originalRootCTM.e;
        var top = originalCTM.f - originalRootCTM.f;
        newShapeEl.setAttribute("transform", "translate(" + left + "," + top + ")");

        SVGShapeMetadata.set(newShapeEl, MorphConst.SHAPE_GLOBAL_TRANSLATE_X, left);
        SVGShapeMetadata.set(newShapeEl, MorphConst.SHAPE_GLOBAL_TRANSLATE_Y, top);
        return newShapeEl;
    };

    /**
     *
     * @param {SVGElement} shapeEl
     * @param {SVGElement} originalShapeEl shape captured on the SVG with parents
     */
    var processShape = function(shapeEl, originalShapeEl, vizGradientColors) {
        // TODO process and merge g.text struction
        // TODO these shapes special processing should be marked by viz side
        if(shapeEl.localName === "path" && 
            originalShapeEl.getAttribute("class") && originalShapeEl.getAttribute("class").indexOf("v-morphable-line") >= 0) {
            shapeEl.setAttribute("fill-opacity", 0);
        }
        if(shapeEl.localName === "path" && 
            originalShapeEl.getAttribute("class") && originalShapeEl.getAttribute("class").indexOf("v-morphable-datapoint") >= 0 && 
            originalShapeEl.getAttribute("visibility") === "hidden") {
            shapeEl.setAttribute("visibility", "");
            shapeEl.setAttribute("d", "M0,0L0,0Z");
        }
        if(shapeEl.localName === "rect" && 
            originalShapeEl.getAttribute("opacity") === "0" && 
            originalShapeEl.parentNode && 
            originalShapeEl.parentNode.parentNode && 
            originalShapeEl.parentNode.parentNode.getAttribute("class") && 
            originalShapeEl.parentNode.parentNode.getAttribute("class").indexOf("v-heatmap") >= 0){
            shapeEl.setAttribute("opacity", 1);
        }
        if(vizGradientColors && vizGradientColors["__hasGradientColor"] === true && 
            shapeEl.getAttribute("fill") && shapeEl.getAttribute("fill").indexOf("url(#") === 0){
            var gradientId = shapeEl.getAttribute("fill");
            // sample: url(#glossyrectangleeacf5e1horizontal)
            gradientId = gradientId.substring(5, gradientId.length - 1);
            var fillColor = vizGradientColors[gradientId];
            fillColor = fillColor ? fillColor : "#000000";
            shapeEl.setAttribute("fill", fillColor);
        }
    };
    return MpShapesCapturer;
});

define('sap/viz/controls/chart/morph/utils/SVGShapeReplacer',[
// @formatter:off
    'sap/viz/controls/chart/morph/utils/SVGShapeMetadata'],
// @formatter:on
function(SVGShapeMetadata) {

    var SVGShapeReplacer = {};

    var xmlns = "http://www.w3.org/2000/svg";

    var ignoredAttributes = ["x", "y", "width", "height", "rx", "ry", "x1", "x2", "y1", "y2"];

    var getAttrAsFloat = function(svgEl, attrName) {
        var ret = parseFloat(svgEl.getAttribute(attrName));
        return isNaN(ret) ? 0 : ret;
    };

    SVGShapeReplacer.replace = function(shapeEl, newShapeType, attributes, keepOriginalAttrs) {
        if(shapeEl && newShapeType) {
            var newShapeEl = document.createElementNS(xmlns, newShapeType);
            if(keepOriginalAttrs) {
                var originalAttrs = shapeEl.attributes;
                for(var i = 0; i < originalAttrs.length; i++) {
                    var originalAttr = originalAttrs[i];
                    if(ignoredAttributes.indexOf(originalAttr.localName) === -1) {
                        newShapeEl.setAttribute(originalAttr.localName, originalAttr.value);
                    }
                }
            }
            for(var name in attributes) {
                if (attributes.hasOwnProperty(name)) {
                    newShapeEl.setAttribute(name, attributes[name]);
                }
            }
            SVGShapeMetadata.clone(newShapeEl, shapeEl);
            if(shapeEl.parentNode) {
                // replace in the DOM
                shapeEl.parentNode.replaceChild(newShapeEl, shapeEl);
            }
            return newShapeEl;
        }
        return null;
    };

    SVGShapeReplacer.replaceToPath = function(shapeEl) {
        if(shapeEl) {
            var pathStr = null;
            switch(shapeEl.localName) {
                case "rect":
                    var x = getAttrAsFloat(shapeEl, "x");
                    var y = getAttrAsFloat(shapeEl, "y");
                    var w = getAttrAsFloat(shapeEl, "width");
                    var h = getAttrAsFloat(shapeEl, "height");
                    var rx = getAttrAsFloat(shapeEl, "rx");
                    var ry = getAttrAsFloat(shapeEl, "ry");
                    // TODO handle rx ry
                    pathStr = "M" + x + "," + y + "L" + (w + x) + "," + y + "L" + (w + x) + "," + (h + y) + "L" + x + "," + (h + y) + "L" + x + "," + y + "Z";
                    break;
                case "line":
                    var x1 = getAttrAsFloat(shapeEl, "x1");
                    var y1 = getAttrAsFloat(shapeEl, "y1");
                    var x2 = getAttrAsFloat(shapeEl, "x2");
                    var y2 = getAttrAsFloat(shapeEl, "y2");
                    pathStr = "M" + x1 + "," + y1 + "L" + x2 + "," + y2;
                    break;
                default:
            }
            if(pathStr) {
                var attrs = {
                    d : pathStr
                };
                return SVGShapeReplacer.replace(shapeEl, "path", attrs, true);
            }
        }
        return null;
    };
    return SVGShapeReplacer;
});

define('sap/viz/controls/chart/morph/utils/DeepEqual',[],function() {

    // From https://github.com/substack/node-deep-equal
    // TODO replace with own implementation

    var pSlice = Array.prototype.slice;
    var Object_keys = typeof Object.keys === 'function' ? Object.keys : function(obj) {
        var keys = [];
        for(var key in obj) {
            if (obj.hasOwnProperty(key)) {
                keys.push(key);
            }
        }
        return keys;
    };
    var deepEqual = function(actual, expected) {
        // 7.1. All identical values are equivalent, as determined by ===.
        if(actual === expected) {
            return true;

        } else if( actual instanceof Date && expected instanceof Date) {
            return actual.getTime() === expected.getTime();

            // 7.3. Other pairs that do not both pass typeof value == 'object',
            // equivalence is determined by ==.
        } else if( typeof actual != 'object' && typeof expected != 'object') {
            return actual == expected;

            // 7.4. For all other Object pairs, including Array objects, equivalence is
            // determined by having the same number of owned properties (as verified
            // with Object.prototype.hasOwnProperty.call), the same set of keys
            // (although not necessarily the same order), equivalent values for every
            // corresponding key, and an identical 'prototype' property. Note: this
            // accounts for both named and indexed properties on Arrays.
        } else {
            return objEquiv(actual, expected);
        }
    };
    function isUndefinedOrNull(value) {
        return value === null || value === undefined;
    }

    function isArguments(object) {
        return Object.prototype.toString.call(object) == '[object Arguments]';
    }

    function objEquiv(a, b) {
        if(isUndefinedOrNull(a) || isUndefinedOrNull(b)) {
            return false;
        }
        // an identical 'prototype' property.
        if(a.prototype !== b.prototype) {
            return false;
        }
        //~~~I've managed to break Object.keys through screwy arguments passing.
        // Converting to array solves the problem.
        if(isArguments(a)) {
            if(!isArguments(b)) {
                return false;
            }
            a = pSlice.call(a);
            b = pSlice.call(b);
            return deepEqual(a, b);
        }
        var ka,kb, key, i;
        try {
            ka = Object_keys(a);
            kb = Object_keys(b);
        } catch (e) {//happens when one is a string literal and the other isn't
            return false;
        }
        // having the same number of owned properties (keys incorporates
        // hasOwnProperty)
        if(ka.length != kb.length) {
            return false;
        }
        //the same set of keys (although not necessarily the same order),
        ka.sort();
        kb.sort();
        //~~~cheap key test
        for(i = ka.length - 1; i >= 0; i--) {
            if(ka[i] != kb[i]) {
                return false;
            }
        }
        //equivalent values for every corresponding key, and
        //~~~possibly expensive deep test
        for(i = ka.length - 1; i >= 0; i--) {
            key = ka[i];
            if(!deepEqual(a[key], b[key])) {
                return false;
            }
        }
        return true;
    }

    return deepEqual;
});

define('sap/viz/controls/chart/morph/viz/MpShapesMapper',[
// @formatter:off
    'sap/viz/controls/chart/morph/constant/MorphConst',
    'sap/viz/controls/chart/morph/utils/Utils',
    'sap/viz/controls/chart/morph/utils/SVGShapeMetadata',
    'sap/viz/controls/chart/morph/utils/SVGShapeReplacer',
    'sap/viz/controls/chart/morph/utils/DeepEqual',
    'sap/viz/controls/chart/morph/vo/VizShape',
    'sap/viz/controls/common/utils/ChartTypeUtil'],
// @formatter:on
function(MorphConst, utils, SVGShapeMetadata, SVGShapeReplacer, DeepEqual, VizShape, ChartTypeUtil) {

    var MpShapesMapper = {};

    /**
     * find related existing shape.display for new.from
     * via comparing newShape.to == currentShape.display
     * then put new.from = existingVizShape.display
     *
     * @param {[sap.viz.morph.vo.VizShape]} newVizShapes
     * @param {[sap.viz.morph.vo.VizShape]} existingVizShapes
     * @param {String} newVizType
     * @param {String} existingVizType
     * @param {Object} chartData
     *
     * @return mapped new shapes
     */
    MpShapesMapper.map = function(newVizShapes, existingVizShapes, newVizType, existingVizType, chartData) {
        convertDatapointMorphData(newVizType, newVizShapes, chartData);
        mapFromShapes(newVizShapes.plotShapes, existingVizShapes.plotShapes, isSameShapeByMorphData);
        
        convertLineMorphData(newVizType, newVizShapes, chartData);
        mapFromShapes(newVizShapes.plotLines, existingVizShapes.plotLines, isSameShapeByMorphData);
        
        convertLabelMorphData(newVizType, newVizShapes);
        if(MorphConst.IS_V_H_MAP(newVizType, existingVizType)) {
            mapFromShapes(newVizShapes.xAxisLabels, existingVizShapes.yAxisLabels, isSameShapeByMorphData);
            mapFromShapes(newVizShapes.xAxis2Labels, existingVizShapes.yAxis2Labels, isSameShapeByMorphData);
            mapFromShapes(newVizShapes.yAxisLabels, existingVizShapes.xAxisLabels, isSameShapeByMorphData);
            mapFromShapes(newVizShapes.yAxis2Labels, existingVizShapes.xAxis2Labels, isSameShapeByMorphData);
        } else {
            mapFromShapes(newVizShapes.xAxisLabels, existingVizShapes.xAxisLabels, isSameShapeByMorphData);
            mapFromShapes(newVizShapes.xAxis2Labels, existingVizShapes.xAxis2Labels, isSameShapeByMorphData);
            mapFromShapes(newVizShapes.yAxisLabels, existingVizShapes.yAxisLabels, isSameShapeByMorphData);
            mapFromShapes(newVizShapes.yAxis2Labels, existingVizShapes.yAxis2Labels, isSameShapeByMorphData);
        }
        mapFromShapes(newVizShapes.backgrounds, existingVizShapes.backgrounds, isSameBackground);
        return newVizShapes;
    };
    
    /**
     * @private
     * 
     * @param {String} vizType
     * @param {[sap.viz.morph.vo.VizShape]} newShapes
     * @param {Object} chartData
     *
     */
    var convertDatapointMorphData = function(vizType, newShapes, chartData) {
        if (ChartTypeUtil.isInfoChart(vizType)) {
            convertInfoChartDatapoint(newShapes, chartData);
        } else {
            convertVizChartDatapoint(newShapes, chartData);
        }
    };
    
    /**
     * @private
     * 
     * @param {String} vizType
     * @param {[sap.viz.morph.vo.VizShape]} newShapes
     * @param {Object} chartData
     *
     */
    var convertLineMorphData = function(vizType, newShapes, chartData) {
        if (ChartTypeUtil.isInfoChart(vizType)) {
            convertInfoChartLine(newShapes);
        } else {
            convertVizChartLine(newShapes, chartData);
        }
    };
    
    /**
     * @private
     * 
     * @param {String} vizType
     * @param {[sap.viz.morph.vo.VizShape]} newShapes
     *
     */
    var convertLabelMorphData = function(vizType, newShapes) {
        var axisLabelShapes = newShapes.xAxisLabels.concat(newShapes.xAxis2Labels)
                                .concat(newShapes.yAxisLabels).concat(newShapes.yAxis2Labels);
        if (ChartTypeUtil.isInfoChart(vizType)) {
            convertInfoChartLabel(axisLabelShapes);
        } else {
            convertVizChartLabel(axisLabelShapes);
        }
    };
    
    var convertInfoChartDatapoint = function(newShapes, chartData) {
        var measures = getInfoChartMeasureInfo(chartData);
               
        for (var i in newShapes.plotShapes) {
            var morphData = {};
            var data = SVGShapeMetadata.get(newShapes.plotShapes[i].to, MorphConst.SHAPE_DATA);
            for (var key in measures) {
                if (data.hasOwnProperty(key)) { 
                    morphData.measureName = measures[key];
                }
            }
            var j = 0;
            var metaData = chartData.data().metadata;
            var dataset = chartData.data().data;
            var dimensions = [], indexes = [];
            for(var pro in data){
                if (pro !== "measureNames"){
                    for (j = 0; j < metaData.fields.length; j++){
                        if (metaData.fields[j].id === pro){
                            dimensions.push(data[pro]);
                            indexes.push(j);
                            break;
                        }
                    }
                }
            }
            
            for(var index = 0; index < dataset.length; index++){
                var tempArray = [], find = true, dataItem = dataset[index];
                for (j = 0; j < indexes.length; j++){
                    tempArray.push(dataItem[indexes[j]]);
                }
                for (j = 0; j < dimensions.length; j++){
                    if (tempArray[j] !== dimensions[j]){
                        find = false;
                        break;
                    }
                }
                if (find){
                    morphData.dimensionId = index;
                    break;
                }
            }
            SVGShapeMetadata.set(newShapes.plotShapes[i].to, MorphConst.MORPHING_DATA, morphData);
        }
    };
    
    var convertVizChartDatapoint = function(newShapes, chartData) {    
        var measures = getVizChartMeasureInfo(chartData);
        var lenDimA2 = getVizChartDimensionLength(chartData);
        
        for (var i in newShapes.plotShapes) {
            var morphData = {};
            var data = SVGShapeMetadata.get(newShapes.plotShapes[i].to, MorphConst.SHAPE_DATA);
            var ctx = utils.isArray(data.ctx) ? data.ctx[0] : data.ctx;
            morphData.dimensionId = ctx.path.dii_a1 * lenDimA2 + ctx.path.dii_a2;
            morphData.measureName = measures[ctx.path.mg][ctx.path.mi];
            SVGShapeMetadata.set(newShapes.plotShapes[i].to, MorphConst.MORPHING_DATA, morphData);
        }
    };
    
    var convertInfoChartLine = function(newShapes) {       
        for (var i in newShapes.plotLines) {
            var morphData = [];
            var data = SVGShapeMetadata.get(newShapes.plotLines[i].to, MorphConst.SHAPE_DATA);
            for (var j in newShapes.plotShapes) {
                var pointData = SVGShapeMetadata.get(newShapes.plotShapes[j].to, MorphConst.SHAPE_DATA);
                var match = true;
                for (var key in data) {
                    if (key !== 'measureNames') {
                        if (!pointData.hasOwnProperty(key) || pointData[key] !== data[key]) {
                            match = false;
                        }
                    } else if (utils.isArray(data[key])) {
                        continue;
                    } else if (!pointData.hasOwnProperty(data[key])) {
                        match = false;
                    }
                }
                if (match) {
                    morphData.push(SVGShapeMetadata.get(newShapes.plotShapes[j].to, MorphConst.MORPHING_DATA));
                }
            }
            SVGShapeMetadata.set(newShapes.plotLines[i].to, MorphConst.MORPHING_DATA, morphData);
        }
    };
    
    var convertVizChartLine = function(newShapes, chartData) {
        var measures = getVizChartMeasureInfo(chartData);
        var lenDimA2 = getVizChartDimensionLength(chartData);
        for (var i in newShapes.plotLines) {
            var morphData = [];
            var data = SVGShapeMetadata.get(newShapes.plotLines[i].to, MorphConst.SHAPE_DATA);
            if (utils.isArray(data)) {
                data.forEach(function(e, i) {
                    var ctx = utils.isArray(e.ctx) ? e.ctx[0] : e.ctx;
                    var ctxData = {};
                    ctxData.dimensionId = ctx.path.dii_a1 * lenDimA2 + ctx.path.dii_a2;
                    ctxData.measureName = measures[ctx.path.mg][ctx.path.mi];
                    morphData.push(ctxData);
                });
            }
            SVGShapeMetadata.set(newShapes.plotLines[i].to, MorphConst.MORPHING_DATA, morphData);
        }
    };
    
    var convertInfoChartLabel = function(axisLabelShapes) {
        for (var i in axisLabelShapes) {
            var morphData = {};
            morphData.labelText = "";
            if (axisLabelShapes[i].to.firstChild.localName === "text") {
                morphData.labelText = axisLabelShapes[i].to.firstChild.textContent;
            } else {
                var childLabelShape = axisLabelShapes[i].to.lastChild.cloneNode(true);
                if (childLabelShape && childLabelShape.firstChild && childLabelShape.firstChild.localName === "text") {
                    morphData.labelText = childLabelShape.firstChild.textContent;
                }
            }
            SVGShapeMetadata.set(axisLabelShapes[i].to, MorphConst.MORPHING_DATA, morphData);
        }
    };
    
    var convertVizChartLabel = function(axisLabelShapes) {
        for (var i in axisLabelShapes) {
            var morphData = {};
            morphData.labelText = axisLabelShapes[i].to.firstChild.textContent;
            SVGShapeMetadata.set(axisLabelShapes[i].to, MorphConst.MORPHING_DATA, morphData);
        }
    };
    
    var getInfoChartMeasureInfo = function(chartData) {
        var measures = {};
        var metadata = chartData ? chartData._FlatTableD._dataset.metadata : {};
        if (metadata.fields) {
            metadata.fields.forEach(function(e, i) {
                if (e.semanticType === "Measure") {
                    measures[e.id] = e.name;
                }
            });
        }
        return measures;
    };
    
    var getVizChartMeasureInfo = function(chartData) {
        var measures = [];
        var measureValuesGroup = chartData ? chartData._crosstableDataset._dataSet.measureValuesGroup : [];
        measureValuesGroup.forEach(function (e, i) {
            measures[e.index - 1] = [];
            for (var j in e.data) {
                measures[e.index - 1][j] = e.data[j].name;
            }
        });
        return measures;
    };
    
    var getVizChartDimensionLength = function(chartData) {
        var numDimA1 = 0, numDimA2 = 0, lenDimA2 = 1;
        var analysisAxis = chartData ? chartData._crosstableDataset._dataSet.analysisAxis : [];
        analysisAxis.forEach(function (e, i) {
            if (e.index === 1) {
                numDimA1 = e.data.length;
            }
            if (e.index === 2) {
                numDimA2 = e.data.length;
                lenDimA2 = e.data[0].values.length;
            }
        });
        return lenDimA2;
    };
    
    /**
     * @private
     * 
     * compare morphing data in two shapes
     * if they are totally equal(have same length/key/value), we regard two shapes are matching
     *
     * @param {SVGElement} fromShapeEl
     * @param {SVGElement} toShapeEl
     *
     * @return {Boolean}
     */
    var isSameShapeByMorphData = function(fromShapeEl, toShapeEl) {
        var data1 = SVGShapeMetadata.get(toShapeEl, MorphConst.MORPHING_DATA);
        var data2 = SVGShapeMetadata.get(fromShapeEl, MorphConst.MORPHING_DATA);
        if(DeepEqual(data1, data2)){
            return true;
        }
        return false;
    };
    
    /**
     * @private
     *
     * @param {SVGElement} fromShapeEl
     * @param {SVGElement} toShapeEl
     *
     * @return {Boolean}
     */
    var isSameBackground = function(fromShapeEl, toShapeEl) {
        if (toShapeEl && fromShapeEl && 
                toShapeEl.localName == fromShapeEl.localName && 
                toShapeEl.hasAttribute("class", "v-background-body v-morphable-background") && 
                fromShapeEl.hasAttribute("class", "v-background-body v-morphable-background")) {
            return true;
        }
        return false;
    };
    
    /**
     * if "new.to" maps to "current.display"
     *    "new.from" = "current.display"
     */
    var mapFromShapes = function(newShapes, currentShapes, mapFunc, allowNodeMap) {
        var mappedCurrentShapes = [];
        for(var i = 0; i < newShapes.length; i++) {
            var newShape = newShapes[i];
            for(var j = 0; j < currentShapes.length; j++) {
                var currentShape = currentShapes[j];
                if(allowNodeMap || mappedCurrentShapes.indexOf(currentShape) === -1) {
                    if(mapFunc(newShape.to, currentShape.display)) {
                        // covert current shape to same type as new shape
                        var replacedShapes = replaceShape(newShape.to, currentShape.display);
                        // update new shape
                        newShape.to = replacedShapes.newShape;
                        // put current shape as new shape's from
                        newShape.from = replacedShapes.currentShape;
                        // temp hold mapped shape to avoid duplicate map
                        mappedCurrentShapes.push(currentShape);
                        break;
                    }
                }
            }
        }
    };
    
    var replaceShape = function(newShapeEl, currentShapeEl) {
        var replacedShapes = {
            newShape : newShapeEl,
            currentShape : currentShapeEl
        };
        var replacedShape;
        if(newShapeEl.localName === "path" && currentShapeEl.localName !== "path") {
            replacedShape = SVGShapeReplacer.replaceToPath(currentShapeEl);
            if(replacedShape) {
                replacedShapes.currentShape = replacedShape;
            }
        }
        if(newShapeEl.localName !== "path" && currentShapeEl.localName === "path") {
            replacedShape = SVGShapeReplacer.replaceToPath(newShapeEl);
            if(replacedShape) {
                replacedShapes.newShape = replacedShape;
            }
        }
        return replacedShapes;
    };
    return MpShapesMapper;
});

define('sap/viz/controls/chart/morph/utils/Cache',[],function() {
    var Cache = {};

    var repush = function(array, item) {
        // remove the item, and re-push to the end of array
        for(var i = 0, ii = array.length; i < ii; i++) {
            if(array[i] === item) {
                return array.push(array.splice(i, 1)[0]);
            }
        }
    };

    Cache.func = function(f, scope, postprocessor) {
        function newf() {
            var arg = Array.prototype.slice.call(arguments, 0), args = arg.join("\u2400"), // key
            cache = newf.cache = newf.cache || {}, // result
            count = newf.count = newf.count || [];
            // args
            if(cache.hasOwnProperty(args)) {
                repush(count, args);
                return postprocessor ? postprocessor(cache[args]) : cache[args];
            }count.length >= 1e3 &&
            delete cache[count.shift()];
            count.push(args);
            cache[args] = f.apply(scope, arg);
            return postprocessor ? postprocessor(cache[args]) : cache[args];
        }

        return newf;
    };
    return Cache;
});

define('sap/viz/controls/chart/morph/utils/ColorUtil',[
// @formatter:off
    'sap/viz/controls/chart/morph/utils/Utils',
    'sap/viz/controls/chart/morph/utils/Cache'],
// @formatter:on
function(utils, Cache) {
    var ColorUtil = {};

    /**
     * parse color string
     * @param {String} color_string rgb(123, 234, 45) or #FF22CC or ff22cc or #f0c or F2C
     * @return {[r, g, b]}
     */
    var _parseCacheFunc = null;
    ColorUtil.parse = function(colorString) {
        if (!_parseCacheFunc) {
            // global name RGBColorStatic
            _parseCacheFunc = Cache.func(RGBColorStatic.parse);
        }
        return _parseCacheFunc(colorString);
    };
    /**
     * convert number to hex String.
     * @param {Number} color the color to be converted
     * @return {String} the color in hex string
     */
    ColorUtil.numberToHexString = function(color) {
        var r = ((color & 0xff0000) >> 16).toString(16), g = ((color & 0x00ff00) >> 8).toString(16), b = (color & 0x0000ff).toString(16);
        var hex = "#" + ((r.length === 1) ? "0" + r : r) + ((g.length === 1) ? "0" + g : g) + ((b.length === 1) ? "0" + b : b);
        return hex;
    };
    /**
     * @param {String} hexColor
     * @return {Number} 0x000000-0xFFFFFF
     * @private
     */
    ColorUtil.hexStringToNumber = function(hexColor) {
        if (!hexColor) {
            return 0;
        }

        if (hexColor.charAt(0) === '#') {
            hexColor = hexColor.substr(1);
        }
        var r = parseInt(hexColor.substr(0, 2), 16), g = parseInt(hexColor.substr(2, 2), 16), b = parseInt(hexColor.substr(4, 2), 16);

        var hex = (Math.max(0, Math.min(255, r)) * 65536) + (Math.max(0, Math.min(255, g)) * 256) + Math.max(0, Math.min(255, b));
        return hex;
    };
    /**
     * Convert number to rgba color: rgba(r,g,b,a);
     * @param {Number} color
     * @param {Number} a
     *          alpha
     * @return {string}
     * @private
     */
    ColorUtil.numberToRGB = function(color) {
        var r = (color & 0xff0000) >> 16, g = (color & 0x00ff00) >> 8, b = color & 0x0000ff;
        return 'rgb(' + r + ',' + g + ',' + b + ')';
    };
    /**
     * Convert number to rgba color: rgba(r,g,b,a);
     * @param {Number} color
     * @param {Number} a
     *          alpha
     * @return {string}
     * @private
     */
    ColorUtil.numberToRGBA = function(color, alpha) {
        var r = (color & 0xff0000) >> 16, g = (color & 0x00ff00) >> 8, b = color & 0x0000ff;
        if (alpha === undefined || alpha <= 0 || alpha > 1) {
            alpha = 1;
        }
        return 'rgba(' + r + ',' + g + ',' + b + ',' + alpha + ')';
    };
    /**
     * To color Number
     * @param {Number} r 0-255
     * @param {Number} g 0-255
     * @param {Number} b 0-255
     * @return {Number} the color number 0x000000-0xFFFFFF
     */
    ColorUtil.RGBToNumber = function(r, g, b) {
        var hex = (Math.max(0, Math.min(255, r)) * 65536) + (Math.max(0, Math.min(255, g)) * 256) + Math.max(0, Math.min(255, b));
        return hex;
    };
    /**
     * returns a color from a point between two colors
     * @param {Number} color1
     * @param {Number} color2
     * @param {Number} percentage 0.0-1.0
     * @return {Number}
     */
    ColorUtil.getColorMix = function(color1, color2, percentage) {
        return ColorUtil.getPercentageOfColor(color1, 1 - percentage) + ColorUtil.getPercentageOfColor(color2, percentage);
    };
    /**
     * @param {Number} baseColor
     * @param {Number} percentage 0.0-1.0
     * @return {Number}
     */
    ColorUtil.getPercentageOfColor = function(baseColor, percentage) {
        percentage = Math.min(1, Math.max(0, percentage));
        var red/*Number*/ = (baseColor & 0xff0000) >> 16;
        var green/*Number*/ = (baseColor & 0x00ff00) >> 8;
        var blue/*Number*/ = baseColor & 0x0000ff;
        return (red * percentage) << 16 | (green * percentage) << 8 | (blue * percentage);
    };

    /**
     * Adjust brightness of rgb color
     *
     * @param {Number} rgb
     * @param {Number} briteness
     *
     * @return {Number} new rgb
     *
     */

    ColorUtil.adjustBrightness = function(rgbColor, briteness) {
        var r = Math.min(((rgbColor >> 16) & 0xFF) + briteness, 255);
        r = Math.max(r, 0);
        var g = Math.min(((rgbColor >> 8) & 0xFF) + briteness, 255);
        g = Math.max(g, 0);
        var b = Math.min((rgbColor & 0xFF) + briteness, 255);
        b = Math.max(b, 0);
        return (r << 16) | (g << 8) | b;
    };

    /**
     * Adjust brightness of rgb color, scaled
     *
     * @param {Number} rgb
     * @param {Number} briteness
     *
     * @return {Number} new rgb
     *
     */

    ColorUtil.adjustBrightness2 = function(rgbColor, briteness) {
        var r = NaN, g = NaN, b = NaN;
        if (briteness === 0) {
            return rgbColor;
        } else if (briteness > 0) {
            briteness /= 100;
            r = ((rgbColor >> 16) & 0xFF);
            g = ((rgbColor >> 8) & 0xFF);
            b = (rgbColor & 0xFF);
            r += ((0xFF - r) * briteness);
            g += ((0xFF - g) * briteness);
            b += ((0xFF - b) * briteness);
            r = Math.min(r, 255);
            g = Math.min(g, 255);
            b = Math.min(b, 255);
        } else {
            briteness = (100 + briteness) / 100;
            r = ((rgbColor >> 16) & 0xFF) * briteness;
            g = ((rgbColor >> 8) & 0xFF) * briteness;
            b = (rgbColor & 0xFF) * briteness;
        }

        return (r << 16) | (g << 8) | b;
    };

    /**
     * Multiply 2 colors
     *
     * @param {Number} color1
     * @param {Number} color2
     *
     * @return {Number} new color
     */
    ColorUtil.rgbMultiply = function(color1, color2) {
        var r1 = (color1 >> 16) & 0xFF, g1 = (color1 >> 8) & 0xFF, b1 = color1 & 0xFF;
        var r2 = (color2 >> 16) & 0xFF, g2 = (color2 >> 8) & 0xFF, b2 = color2 & 0xFF;

        return ((r1 * r2 / 255) << 16) | ((g1 * g2 / 255) << 8) | (b1 * b2 / 255);
    };
    return ColorUtil;
});

define('sap/viz/controls/chart/morph/morphers/ColorMorpher',[
// @formatter:off
    'sap/viz/controls/chart/morph/utils/Utils',
    'sap/viz/controls/chart/morph/utils/ColorUtil'],
// @formatter:on
function(utils, ColorUtil) {

    var ColorMorpher = {};

    var getOpacityAsFloat = function(svgEl, attrName) {
        var ret = parseFloat(svgEl.getAttribute(attrName));
        return isNaN(ret) ? 1 : ret;
    };
    /**
     *
     * @param {String|Number} from
     * @param {String|Number} to
     * @param {Number} percentage
     * @return {String} CSS color string rgb(0,0,0)
     */
    ColorMorpher.getPercentage = function(from, to, percentage) {
        percentage = percentage > 100 ? 100 : percentage < 0 ? 0 : percentage;
        var fromRGB = ColorUtil.parse(from);
        var toRGB = ColorUtil.parse(to);
        // no morph
        if(fromRGB.length === 0 && toRGB.length === 0) {
            return "";
        }
        // from transparent to new color
        
        if (fromRGB.length === 0 && toRGB.length === 3) {
            return "rgb(" + toRGB[0] + "," + toRGB[1] + "," + toRGB[2] + ")";
        }

        // from old color to transparent
        if(fromRGB.length === 3 && toRGB.length === 0) {
            return "";
        }

        return "rgb("+ 
                Math.round(fromRGB[0] + (toRGB[0] - fromRGB[0]) * percentage / 100) + ","+ 
                Math.round(fromRGB[1] + (toRGB[1] - fromRGB[1]) * percentage / 100) + ","+ 
                Math.round(fromRGB[2] + (toRGB[2] - fromRGB[2]) * percentage / 100) + ")";
    };
    /**
     *
     * @param {SVGElement} fromShape
     * @param {SVGElement} toShape
     * @param {SVGElement} displayShape
     * @param {Number} percentage
     */
    ColorMorpher.svg = function(fromShape, toShape, displayShape, percentage) {
        if (displayShape && toShape) {
            var fromStroke = fromShape ? fromShape.getAttribute("stroke") : "";
            var toStroke = toShape.getAttribute("stroke");

            var fromFill = fromShape ? fromShape.getAttribute("fill") : "";
            var toFill = toShape.getAttribute("fill");
            
            if (fromStroke === toStroke) {
                displayShape.setAttribute("stroke", toStroke);
            } else {
                displayShape.setAttribute("stroke", ColorMorpher.getPercentage(fromStroke, toStroke, percentage));
            }
            // BITSDC4-461: set fill-opacity="0" if fill="transparent" or invalid
            var displayShapeFill = "";
            if (fromFill === toFill) {
                displayShapeFill = toFill;
                displayShape.setAttribute("fill", displayShapeFill);
            } else {
                if (toFill) {
                    displayShapeFill = ColorMorpher.getPercentage(fromFill, toFill, percentage);
                    displayShape.setAttribute("fill", displayShapeFill);
                } else {
                    displayShapeFill = null;
                }
            }

            var toFillOpacity;
            var toStrokeOpacity;
            if(fromShape) {
                // fill-opacity
                if (displayShapeFill === "") {
                    displayShape.setAttribute("fill-opacity", 0);
                } else {
                    var fromFillOpacity = getOpacityAsFloat(fromShape, "fill-opacity");
                    toFillOpacity = getOpacityAsFloat(toShape, "fill-opacity");
                    if (fromFillOpacity != toFillOpacity) {
                        displayShape.setAttribute("fill-opacity",
                                                  fromFillOpacity + (toFillOpacity - fromFillOpacity) * percentage / 100);
                    }
                }
                // stroke-opacity
                var fromStrokeOpacity = getOpacityAsFloat(fromShape, "stroke-opacity");
                toStrokeOpacity = getOpacityAsFloat(toShape, "stroke-opacity");
                if (fromStrokeOpacity != toStrokeOpacity) {
                    displayShape.setAttribute("stroke-opacity",
                                              fromStrokeOpacity + (toStrokeOpacity - fromStrokeOpacity) * percentage / 100);
                }
            } else {
                // fill-opacity
                if (toShape.getAttribute("fill-opacity") !== "") {
                    if (displayShapeFill === "") {
                        toFillOpacity = 0;
                    } else {
                        toFillOpacity = getOpacityAsFloat(toShape, "fill-opacity");
                    }
                    displayShape.setAttribute("fill-opacity",
                                          0 + (toFillOpacity - 0) * percentage / 100);
                } else {
                    displayShape.setAttribute("fill-opacity", "");
                }
                // stroke-opacity
                if (toShape.getAttribute("stroke-opacity") !== "") {
                    toStrokeOpacity = getOpacityAsFloat(toShape, "stroke-opacity");
                    displayShape.setAttribute("stroke-opacity",
                                              0 + (toStrokeOpacity - 0) * percentage / 100);
                } else {
                    displayShape.setAttribute("stroke-opacity", "");
                }
            }
        }
    };
    return ColorMorpher;
});

define('sap/viz/controls/chart/morph/morphers/RectMorpher',[
// @formatter:off
    'sap/viz/controls/chart/morph/constant/MorphConst',
    'sap/viz/controls/chart/morph/utils/SVGShapeMetadata'],
// @formatter:on
function(MorphConst, SVGShapeMetadata) {
   
    var RectMorpher = {};
    
    RectMorpher.NO_DEFAULT_DIRECTION = 0;
    RectMorpher.DEFAULT_DIRECTION_TO_NORTH = 1;
    RectMorpher.DEFAULT_DIRECTION_TO_SOUTH = 2;
    RectMorpher.DEFAULT_DIRECTION_TO_EAST = 4;
    RectMorpher.DEFAULT_DIRECTION_TO_WEST = 8;
    
    /**
     * 
     * @param {Object} from {w, h, x, y, r}
     * @param {Object} to {w, h, x, y, r}
     * @param {Number} percentage
     * @return {Object} {w, h, x, y, r}
     */
    RectMorpher.getPercentageRect = function(from, to, percentage) {
        return {
            w: from.w + (to.w - from.w) * percentage / 100,
            h: from.h + (to.h - from.h) * percentage / 100,
            x: from.x + (to.x - from.x) * percentage / 100,
            y: from.y + (to.y - from.y) * percentage / 100,
            r: from.r + (to.r - from.r) * percentage / 100
        };
    };
    
    var getAttrAsInt = function(svgEl, attrName) {
        var ret = parseInt(svgEl.getAttribute(attrName), 10);
        return isNaN(ret) ? 0 : ret;
    };
    
    var getAttrAsFloat = function(svgEl, attrName) {
        var ret = parseFloat(svgEl.getAttribute(attrName));
        return isNaN(ret) ? 0 : ret;
    };
    
    /**
     *
     * @param {SVGElement} fromShape
     * @param {SVGElement} toShape
     * @param {SVGElement} displayShape
     * @param {Number} percentage
     */
    RectMorpher.svg = function(fromShape, toShape, displayShape, percentage, defaultDirection) {
        if(displayShape && toShape && toShape.localName === "rect") {
            var toX;
            var toRX;
            var toY;
            var toRY;
            var toW;
            var toH;
            if(SVGShapeMetadata.get(toShape, MorphConst.MORPHER_DISABLE_RECT) === true){
                toX = getAttrAsFloat(toShape, "x");
                toRX = getAttrAsFloat(toShape, "rx");
                toY = getAttrAsFloat(toShape, "y");
                toRY = getAttrAsFloat(toShape, "ry");
                toW = getAttrAsFloat(toShape, "width");
                toH = getAttrAsFloat(toShape, "height");
                
                var toX2 = getAttrAsFloat(displayShape, "x");
                var toRX2 = getAttrAsFloat(displayShape, "rx");
                var toY2 = getAttrAsFloat(displayShape, "y");
                var toRY2 = getAttrAsFloat(displayShape, "ry");
                var toW2 = getAttrAsFloat(displayShape, "width");
                var toH2 = getAttrAsFloat(displayShape, "height");
                
                if(toX !== toX2){
                    displayShape.setAttribute("x", toX);
                }
                if(toRX !== toRX2){
                    displayShape.setAttribute("rx", toRX);
                }
                if(toY !== toY2){
                    displayShape.setAttribute("y", toY);
                }
                if(toRY !== toRY2){
                    displayShape.setAttribute("ry", toRY);
                }
                if(toW !== toW2){
                    displayShape.setAttribute("width", toW);
                }
                if(toH !== toH2){
                    displayShape.setAttribute("height",toH);
                }
                
            }else if(fromShape && fromShape.localName === "rect") {
                // rect - rect
                var fromX = getAttrAsFloat(fromShape, "x");
                toX = getAttrAsFloat(toShape, "x");
                
                var fromRX = getAttrAsFloat(fromShape, "rx");
                toRX = getAttrAsFloat(toShape, "rx");
                
                var fromY = getAttrAsFloat(fromShape, "y");
                toY = getAttrAsFloat(toShape, "y");
                
                var fromRY = getAttrAsFloat(fromShape, "ry");
                toRY = getAttrAsFloat(toShape, "ry");
                
                var fromW = getAttrAsFloat(fromShape, "width");
                toW = getAttrAsFloat(toShape, "width");
                
                var fromH = getAttrAsFloat(fromShape, "height");
                toH = getAttrAsFloat(toShape, "height");
                
                // if both from and to shapes are invisible, disable animation for them
                var fromVisible = (fromW >= 1 && fromH >= 1);
                var toVisible = (toW >= 1 && toH >= 1);
                if(!fromVisible && !toVisible){
                    percentage = 100;
                }
                
                displayShape.setAttribute("x",
                                          fromX + (toX - fromX) * percentage / 100);
                displayShape.setAttribute("y",
                                          fromY + (toY - fromY) * percentage / 100);
                displayShape.setAttribute("rx",
                                          fromRX + (toRX - fromRX) * percentage / 100);
                displayShape.setAttribute("ry",
                                          fromRY + (toRY - fromRY) * percentage / 100);
                displayShape.setAttribute("width",
                                          fromW + (toW - fromW) * percentage / 100);
                displayShape.setAttribute("height",
                                          fromH + (toH - fromH) * percentage / 100);
                                          
            }else if(!fromShape) {
                // none to rect
                toX = getAttrAsFloat(toShape, "x");
                toRX = getAttrAsFloat(toShape, "rx");
                toY = getAttrAsFloat(toShape, "y");
                toRY = getAttrAsFloat(toShape, "ry");
                toW = getAttrAsFloat(toShape, "width");
                toH = getAttrAsFloat(toShape, "height");
                
                if(defaultDirection == null || defaultDirection < 0) {
                    defaultDirection = RectMorpher.DEFAULT_DIRECTION_TO_NORTH | RectMorpher.DEFAULT_DIRECTION_TO_WEST;
                }
                
                if((defaultDirection & RectMorpher.DEFAULT_DIRECTION_TO_NORTH) && (defaultDirection & RectMorpher.DEFAULT_DIRECTION_TO_SOUTH)){
                    displayShape.setAttribute("y", 
                                          toY + (toH - 0) * (100 - percentage) / 100 / 2);
                    displayShape.setAttribute("height",
                                          0 + (toH - 0) * percentage / 100);
                }else if(defaultDirection & RectMorpher.DEFAULT_DIRECTION_TO_NORTH){
                    displayShape.setAttribute("y", 
                                          toY + (toH - 0) * (100 - percentage) / 100);
                    displayShape.setAttribute("height",
                                          0 + (toH - 0) * percentage / 100);
                }else if(defaultDirection & RectMorpher.DEFAULT_DIRECTION_TO_SOUTH){
                    displayShape.setAttribute("y", 
                                          toY);
                    displayShape.setAttribute("height",
                                          0 + (toH - 0) * percentage / 100);
                }else{
                    displayShape.setAttribute("y", toY);
                    displayShape.setAttribute("height", toH);
                }
                
                if((defaultDirection & RectMorpher.DEFAULT_DIRECTION_TO_EAST) && (defaultDirection & RectMorpher.DEFAULT_DIRECTION_TO_WEST)){
                    displayShape.setAttribute("x", 
                                          toX + (toW - 0) * (100 - percentage) / 100 / 2);
                    displayShape.setAttribute("width",
                                          0 + (toW - 0) * percentage / 100);
                }else if(defaultDirection & RectMorpher.DEFAULT_DIRECTION_TO_EAST){
                    displayShape.setAttribute("x", 
                                          toX + (toW - 0) * (100 - percentage) / 100);
                    displayShape.setAttribute("width",
                                          0 + (toW - 0) * percentage / 100);
                }else if(defaultDirection & RectMorpher.DEFAULT_DIRECTION_TO_WEST){
                    displayShape.setAttribute("x", 
                                          toX);
                    displayShape.setAttribute("width",
                                          0 + (toW - 0) * percentage / 100);
                }else{
                    displayShape.setAttribute("x", toX);
                    displayShape.setAttribute("width", toW);
                }
            }
        }
    };

    return RectMorpher;
});
define('sap/viz/controls/chart/morph/morphers/LineMorpher',[],function() {

    var LineMorpher = {};

    /**
     *
     * @param {Object} from {x, y, x2, y2}
     * @param {Object} to {x, y, x2, y2}
     * @param {Number} percentage
     * @return {Object} {x, y, x2, y2}
     */
    LineMorpher.getPercentageLine = function(from, to, percentage) {
        return {
            x : from.x + (to.x - from.x) * percentage / 100,
            y : from.y + (to.y - from.y) * percentage / 100,
            x2 : from.x2 + (to.x2 - from.x2) * percentage / 100,
            y2 : from.y2 + (to.y2 - from.y2) * percentage / 100
        };
    };
    var getAttrAsInt = function(svgEl, attrName) {
        var ret = parseInt(svgEl.getAttribute(attrName), 10);
        return isNaN(ret) ? 0 : ret;
    };
    var getAttrAsFloat = function(svgEl, attrName) {
        var ret = parseFloat(svgEl.getAttribute(attrName));
        return isNaN(ret) ? 0 : ret;
    };
    /**
     *
     * @param {SVGElement} fromShape
     * @param {SVGElement} toShape
     * @param {SVGElement} displayShape
     * @param {Number} percentage
     */
    LineMorpher.svg = function(fromShape, toShape, displayShape, percentage) {
        if(displayShape && toShape && toShape.localName === "line") {
            var toX1;
            var toX2;
            var toY1;
            var toY2;
            if(fromShape && fromShape.localName === "rect") {
                // rect - rect
                var fromX1 = getAttrAsFloat(fromShape, "x1");
                toX1 = getAttrAsFloat(toShape, "x1");

                var fromX2 = getAttrAsFloat(fromShape, "x2");
                toX2 = getAttrAsFloat(toShape, "x2");

                var fromY1 = getAttrAsFloat(fromShape, "y1");
                toY1 = getAttrAsFloat(toShape, "y1");

                var fromY2 = getAttrAsFloat(fromShape, "y2");
                toY2 = getAttrAsFloat(toShape, "y2");

                displayShape.setAttribute("x1", fromX1 + (toX1 - fromX1) * percentage / 100);
                displayShape.setAttribute("y1", fromY1 + (toY1 - fromY1) * percentage / 100);
                displayShape.setAttribute("x2", fromX2 + (toX2 - fromX2) * percentage / 100);
                displayShape.setAttribute("y2", fromY2 + (toY2 - fromY2) * percentage / 100);

            } else if(!fromShape) {
                // none to rect
                toX1 = getAttrAsFloat(toShape, "x1");
                toX2 = getAttrAsFloat(toShape, "x2");
                toY1 = getAttrAsFloat(toShape, "y1");
                toY2 = getAttrAsFloat(toShape, "y2");

                displayShape.setAttribute("x1", toX1);
                displayShape.setAttribute("y1", toY1);
                displayShape.setAttribute("x2", 0 + (toX2 - 0) * percentage / 100);
                displayShape.setAttribute("y2", 0 + (toY2 - 0) * percentage / 100);
            }

        }

    };
    return LineMorpher;
});

define('sap/viz/controls/chart/morph/morphers/PathMorpher',[
// @formatter:off
    'sap/viz/controls/chart/morph/utils/Utils',
    'sap/viz/controls/chart/morph/utils/Cache',
    'sap/viz/controls/chart/morph/constant/MorphConst',
    'sap/viz/controls/chart/morph/utils/SVGShapeMetadata'],
// @formatter:on
function(utils, Cache, MorphConst, SVGShapeMetadata) {

    //-------------------------------------------
    // PathMorpher algorithm refered from RaphaelJS
    //-------------------------------------------

    var concat = "concat", apply = "apply", has = "hasOwnProperty", split = "split",
    lowerCase = String.prototype.toLowerCase, upperCase = String.prototype.toUpperCase,
    toFloat = parseFloat, toInt = parseInt, math = Math, mmax = math.max, mmin = math.min,
    abs = math.abs, pow = math.pow, PI = math.PI, nu = "number", string = "string", array = "array",
    toString = "toString";

    var p2s = /,?([achlmqrstvxz]),?/gi,
    pathCommand = /([achlmrqstvz])[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*)+)/ig,
    pathValues = /(-?\d*\.?\d*(?:e[\-+]?\d+)?)[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*/ig;

    var _path2string = function(inputArray) {
        return inputArray ? inputArray.join(",").replace(p2s, "$1") : this.join(",").replace(p2s, "$1");
    };
    // http://schepers.cc/getting-to-the-point
    var _catmullRom2bezier = function(crp, z) {
        var d = [];
        for(var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {
            var p = [{
                x : +crp[i - 2],
                y : +crp[i - 1]
            }, {
                x : +crp[i],
                y : +crp[i + 1]
            }, {
                x : +crp[i + 2],
                y : +crp[i + 3]
            }, {
                x : +crp[i + 4],
                y : +crp[i + 5]
            }];
            if(z) {
                if(!i) {
                    p[0] = {
                        x : +crp[iLen - 2],
                        y : +crp[iLen - 1]
                    };
                } else if(iLen - 4 === i) {
                    p[3] = {
                        x : +crp[0],
                        y : +crp[1]
                    };
                } else if(iLen - 2 === i) {
                    p[2] = {
                        x : +crp[0],
                        y : +crp[1]
                    };
                    p[3] = {
                        x : +crp[2],
                        y : +crp[3]
                    };
                }
            } else {
                if(iLen - 4 === i) {
                    p[3] = p[2];
                } else if(!i) {
                    p[0] = {
                        x : +crp[i],
                        y : +crp[i + 1]
                    };
                }
            }
            d.push(["C", (-p[0].x + 6 * p[1].x + p[2].x) / 6, (-p[0].y + 6 * p[1].y + p[2].y) / 6, (p[1].x + 6 * p[2].x - p[3].x) / 6, (p[1].y + 6 * p[2].y - p[3].y) / 6, p[2].x, p[2].y]);
        }

        return d;
    };
    var parsePathString = function(pathString) {
        if(!pathString) {
            return null;
        }
        var paramCounts = {
            a : 7,
            c : 6,
            h : 1,
            l : 2,
            m : 2,
            r : 4,
            q : 4,
            s : 4,
            t : 2,
            v : 1,
            z : 0
        }, data = [];
        if(!data.length) {
            String(pathString).replace(pathCommand, function(a, b, c) {
                var params = [], name = b.toLowerCase();
                c.replace(pathValues, function(a, b) {
                    b && params.push(+b);
                });
                if(name === "m" && params.length > 2) {
                    data.push([b][concat](params.splice(0, 2)));
                    name = "l";
                    b = b === "m" ? "l" : "L";
                }
                if(name === "r") {
                    data.push([b][concat](params));
                } else {
                    while(params.length >= paramCounts[name]) {
                        data.push([b][concat](params.splice(0, paramCounts[name])));
                        if(!paramCounts[name]) {
                            break;
                        }
                    }
                }
            });
        }
        // TODO move to util function
        data.toString = _path2string;
        return data;
    };
    var pathToAbsolute = function(pathArray/*String*/) {
        if(!utils.isArray(pathArray) || !utils.isArray(pathArray && pathArray[0])) {// rough assumption
            pathArray = parsePathString(pathArray);
        }
        if(!pathArray || !pathArray.length) {
            return [["M", 0, 0]];
        }
        var res = [], x = 0, y = 0, mx = 0, my = 0, start = 0;
        if(pathArray[0][0] === "M") {
            x = +pathArray[0][1];
            y = +pathArray[0][2];
            mx = x;
            my = y;
            start++;
            res[0] = ["M", x, y];
        }
        var crz = pathArray.length === 3 && pathArray[0][0] === "M" && pathArray[1][0].toUpperCase() === "R" && pathArray[2][0].toUpperCase() === "Z";
        for(var r, pa, i = start, ii = pathArray.length; i < ii; i++) {
            res.push( r = []);
            pa = pathArray[i];
            var dots;
            if(pa[0] != upperCase.call(pa[0])) {
                r[0] = upperCase.call(pa[0]);
                switch (r[0]) {
                    case "A":
                        r[1] = pa[1];
                        r[2] = pa[2];
                        r[3] = pa[3];
                        r[4] = pa[4];
                        r[5] = pa[5];
                        r[6] = +(pa[6] + x);
                        r[7] = +(pa[7] + y);
                        break;
                    case "V":
                        r[1] = +pa[1] + y;
                        break;
                    case "H":
                        r[1] = +pa[1] + x;
                        break;
                    case "R":
                        dots = [x, y][concat](pa.slice(1));
                        for(var j = 2, jj = dots.length; j < jj; j++) {
                            dots[j] = +dots[j] + x;
                            dots[++j] = +dots[j] + y;
                        }
                        res.pop();
                        res = res[concat](_catmullRom2bezier(dots, crz));
                        break;
                    case "M":
                        mx = +pa[1] + x;
                        my = +pa[2] + y;
                        break;
                    default:
                        for( j = 1, jj = pa.length; j < jj; j++) {
                            r[j] = +pa[j] + ((j % 2) ? x : y);
                        }
                }
            } else if(pa[0] === "R") {
                dots = [x, y][concat](pa.slice(1));
                res.pop();
                res = res[concat](_catmullRom2bezier(dots, crz));
                r = ["R"][concat](pa.slice(-2));
            } else {
                for(var k = 0, kk = pa.length; k < kk; k++) {
                    r[k] = pa[k];
                }
            }
            switch (r[0]) {
                case "Z":
                    x = mx;
                    y = my;
                    break;
                case "H":
                    x = r[1];
                    break;
                case "V":
                    y = r[1];
                    break;
                case "M":
                    mx = r[r.length - 2];
                    my = r[r.length - 1];
                    break;
                default:
                    x = r[r.length - 2];
                    y = r[r.length - 1];
            }
        }
        res.toString = _path2string;
        return res;
    };
    var l2c = function(x1, y1, x2, y2) {
        return [x1, y1, x2, y2, x2, y2];
    };
    var q2c = function(x1, y1, ax, ay, x2, y2) {
        var _13 = 1 / 3, _23 = 2 / 3;
        return [_13 * x1 + _23 * ax, _13 * y1 + _23 * ay, _13 * x2 + _23 * ax, _13 * y2 + _23 * ay, x2, y2];
    };
    var a2c = function(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {
        // for more information of where this math came from visit:
        // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes
        var f1,f2,cx,cy;
        var _120 = PI * 120 / 180, rad = PI / 180 * (+angle || 0), res = [], xy, rotate = Cache.func(function(x, y, rad) {
            var X = x * math.cos(rad) - y * math.sin(rad), Y = x * math.sin(rad) + y * math.cos(rad);
            return {
                x : X,
                y : Y
            };
        });
        if(!recursive) {
            xy = rotate(x1, y1, -rad);
            x1 = xy.x;
            y1 = xy.y;
            xy = rotate(x2, y2, -rad);
            x2 = xy.x;
            y2 = xy.y;
            var cos = math.cos(PI / 180 * angle), sin = math.sin(PI / 180 * angle), x = (x1 - x2) / 2, y = (y1 - y2) / 2;
            var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);
            if(h > 1) {
                h = math.sqrt(h);
                rx = h * rx;
                ry = h * ry;
            }
            var rx2 = rx * rx, ry2 = ry * ry, k = (large_arc_flag == sweep_flag ? -1 : 1) * math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x)));
            cx = k * rx * y / ry + (x1 + x2) / 2;
            cy = k * -ry * x / rx + (y1 + y2) / 2;
            f1 = math.asin(((y1 - cy) / ry).toFixed(9));
            f2 = math.asin(((y2 - cy) / ry).toFixed(9));
            f1 = x1 < cx ? PI - f1 : f1;
            f2 = x2 < cx ? PI - f2 : f2; f1 < 0 && ( f1 = PI * 2 + f1); f2 < 0 && ( f2 = PI * 2 + f2);
            if(sweep_flag && f1 > f2) {
                f1 = f1 - PI * 2;
            }
            if(!sweep_flag && f2 > f1) {
                f2 = f2 - PI * 2;
            }
        } else {
            f1 = recursive[0];
            f2 = recursive[1];
            cx = recursive[2];
            cy = recursive[3];
        }
        var df = f2 - f1;
        if(abs(df) > _120) {
            var f2old = f2, x2old = x2, y2old = y2;
            f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);
            x2 = cx + rx * math.cos(f2);
            y2 = cy + ry * math.sin(f2);
            res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);
        }
        df = f2 - f1;
        var c1 = math.cos(f1), s1 = math.sin(f1), c2 = math.cos(f2), s2 = math.sin(f2), t = math.tan(df / 4), hx = 4 / 3 * rx * t, hy = 4 / 3 * ry * t, m1 = [x1, y1], m2 = [x1 + hx * s1, y1 - hy * c1], m3 = [x2 + hx * s2, y2 - hy * c2], m4 = [x2, y2];
        m2[0] = 2 * m1[0] - m2[0];
        m2[1] = 2 * m1[1] - m2[1];
        if(recursive) {
            return [m2, m3, m4][concat](res);
        } else {
            res = [m2, m3, m4][concat](res).join()[split](",");
            var newres = [];
            for(var i = 0, ii = res.length; i < ii; i++) {
                newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;
            }
            return newres;
        }
    };
    var path2curveImpl = function(path, path2) {
        var p = pathToAbsolute(path), p2 = path2 && pathToAbsolute(path2), attrs = {
            x : 0,
            y : 0,
            bx : 0,
            by : 0,
            X : 0,
            Y : 0,
            qx : null,
            qy : null
        }, attrs2 = {
            x : 0,
            y : 0,
            bx : 0,
            by : 0,
            X : 0,
            Y : 0,
            qx : null,
            qy : null
        }, processPath = function(path, d) {
            var nx, ny;
            if(!path) {
                return ["C", d.x, d.y, d.x, d.y, d.x, d.y];
            }!(path[0] in {
                T : 1,
                Q : 1
            }) && (d.qx = d.qy = null);
            switch (path[0]) {
                case "M":
                    d.X = path[1];
                    d.Y = path[2];
                    break;
                case "A":
                    path = ["C"][concat](a2c[apply](0, [d.x, d.y][concat](path.slice(1))));
                    break;
                case "S":
                    nx = d.x + (d.x - (d.bx || d.x));
                    ny = d.y + (d.y - (d.by || d.y));
                    path = ["C", nx, ny][concat](path.slice(1));
                    break;
                case "T":
                    d.qx = d.x + (d.x - (d.qx || d.x));
                    d.qy = d.y + (d.y - (d.qy || d.y));
                    path = ["C"][concat](q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));
                    break;
                case "Q":
                    d.qx = path[1];
                    d.qy = path[2];
                    path = ["C"][concat](q2c(d.x, d.y, path[1], path[2], path[3], path[4]));
                    break;
                case "L":
                    path = ["C"][concat](l2c(d.x, d.y, path[1], path[2]));
                    break;
                case "H":
                    path = ["C"][concat](l2c(d.x, d.y, path[1], d.y));
                    break;
                case "V":
                    path = ["C"][concat](l2c(d.x, d.y, d.x, path[1]));
                    break;
                case "Z":
                    path = ["C"][concat](l2c(d.x, d.y, d.X, d.Y));
                    break;
            }
            return path;
        }, fixArc = function(pp, i) {
            if(pp[i].length > 7) {
                pp[i].shift();
                var pi = pp[i];
                while(pi.length) {
                    pp.splice(i++, 0, ["C"][concat](pi.splice(0, 6)));
                }
                pp.splice(i, 1);
                ii = mmax(p.length, p2 && p2.length || 0);
            }
        }, fixM = function(path1, path2, a1, a2, i) {
            if(path1 && path2 && path1[i][0] === "M" && path2[i][0] !== "M") {
                path2.splice(i, 0, ["M", a2.x, a2.y]);
                a1.bx = 0;
                a1.by = 0;
                a1.x = path1[i][1];
                a1.y = path1[i][2];
                ii = mmax(p.length, p2 && p2.length || 0);
            }
        };
        for(var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {
            p[i] = processPath(p[i], attrs);
            fixArc(p, i);
            p2 && (p2[i] = processPath(p2[i], attrs2));
            p2 && fixArc(p2, i);
            fixM(p, p2, attrs, attrs2, i);
            fixM(p2, p, attrs2, attrs, i);
            var seg = p[i], seg2 = p2 && p2[i], seglen = seg.length, seg2len = p2 && seg2.length;
            attrs.x = seg[seglen - 2];
            attrs.y = seg[seglen - 1];
            attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;
            attrs.by = toFloat(seg[seglen - 3]) || attrs.y;
            attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);
            attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);
            attrs2.x = p2 && seg2[seg2len - 2];
            attrs2.y = p2 && seg2[seg2len - 1];
        }
        return p2 ? [p, p2] : p;
    };
    var _path2curveCacheFunc = null;
    var path2curve = function(path, path2) {
        if(!_path2curveCacheFunc) {
            _path2curveCacheFunc = Cache.func(path2curveImpl);
        }
        return _path2curveCacheFunc(path, path2);
    };
    //-------------------------------------------
    // PathMorpher class definition
    //-------------------------------------------

    var PathMorpher = {};

    /**
     * @param {String} fromPath Path String
     * @param {String} toPath Path String
     * @param {Number} percentage
     *
     * @return {String} current path by percentage
     */
    PathMorpher.getPercentagePath = function(from, to, percentage) {
        if(!from || !to) {
            // error case
            return "";
        }
        var curvePathes = path2curve(String(from), String(to));
        var fromPathArray = curvePathes[0];
        var toPathArray = curvePathes[1];
        var currentPathArray = [];
        for(var i = 0, ii = fromPathArray.length; i < ii; i++) {
            currentPathArray[i] = [fromPathArray[i][0]];
            for(var j = 1, jj = fromPathArray[i].length; j < jj; j++) {
                currentPathArray[i][j] = fromPathArray[i][j] + (toPathArray[i][j] - fromPathArray[i][j]) * percentage / 100;
            }
        }
        return _path2string(currentPathArray);
    };
    /**
     *
     * @param {SVGElement} fromShape
     * @param {SVGElement} toShape
     * @param {SVGElement} displayShape
     * @param {Number} percentage
     */
    PathMorpher.svg = function(fromShape, toShape, displayShape, percentage) {
        if(displayShape && toShape && toShape.localName == "path" && (!fromShape || fromShape.localName == "path")) {
            var toPathStr = toShape.getAttribute("d");
            if(toPathStr && toPathStr.length > 1) {
                var displayPathStr;
                if(SVGShapeMetadata.get(toShape, MorphConst.MORPHER_DISABLE_PATH) === true) {
                    displayPathStr = displayShape.getAttribute("d");
                    if(toPathStr !== displayPathStr) {
                        displayShape.setAttribute("d", toPathStr);
                    }
                } else {
                    var fromPathStr = "";
                    if(fromShape) {
                        fromPathStr = fromShape.getAttribute("d");
                    }
                    if(!fromPathStr) {
                        // search for the first init point from toShape's path
                        var cmds = toPathStr.match(pathCommand);
                        if(cmds.length > 0) {
                            fromPathStr = cmds[0];
                        } else {
                            fromPathStr = "M0,0";
                        }
                    }
                    displayPathStr = PathMorpher.getPercentagePath(fromPathStr, toPathStr, percentage);
                    displayShape.setAttribute("d", displayPathStr);
                }
            }
        }
    };
    return PathMorpher;
});

define('sap/viz/controls/chart/morph/utils/TransformParser',[],function() {
    var TransformParser = {};

    var trimString = function(string/*string*/)/*string*/
    {
        return string.replace(/^\s*/, "").replace(/\s*$/, "");
    };

    TransformParser.parse = function(transform) {
        var rotateParams = [];
        var translateParams = [];
        var scaleParams = [];
        if(transform) {
            var trimmedValue;
            if(transform.indexOf("rotate(") >= 0) {
                var transformRotate = transform.substring(transform.indexOf("rotate("));
                transformRotate = transformRotate.substring("rotate(".length, transformRotate.indexOf(")"));
                transformRotate = trimString(transformRotate);
                var rawRotateParams = [];
                if(transformRotate.indexOf(",") > 0) {
                    // number divided by ,
                    rawRotateParams = transformRotate.split(",");
                } else {
                    rawRotateParams = transformRotate.split(" ");
                }
                for(var i = 0; i < rawRotateParams.length && rotateParams.length < 3; i++) {
                    trimmedValue = trimString(rawRotateParams[i]);
                    if(trimmedValue !== "") {
                        trimmedValue = parseFloat(trimmedValue);
                        if(isNaN(trimmedValue)) {
                            trimmedValue = 0;
                        }
                        rotateParams.push(trimmedValue);
                    }
                }
                if(rotateParams.length < 3) {
                    // rotate by 0, 0
                    rotateParams[1] = 0;
                    rotateParams[2] = 0;
                }

            }

            if(transform.indexOf("translate(") >= 0) {
                var transformTranslate = transform.substring(transform.indexOf("translate("));
                transformTranslate = transformTranslate.substring("translate(".length, transformTranslate.indexOf(")"));
                transformTranslate = trimString(transformTranslate);
                var rawTranslateParams = [];
                if(transformTranslate.indexOf(",") > 0) {
                    // number divided by ,
                    rawTranslateParams = transformTranslate.split(",");
                } else {
                    rawTranslateParams = transformTranslate.split(" ");
                }
                for(var j = 0; j < rawTranslateParams.length && translateParams.length < 2; j++) {
                    trimmedValue = trimString(rawTranslateParams[j]);
                    if(trimmedValue !== "") {
                        trimmedValue = parseFloat(trimmedValue);
                        if(isNaN(trimmedValue)) {
                            trimmedValue = 0;
                        }
                        translateParams.push(trimmedValue);
                    }
                }
                if(translateParams.length < 2) {
                    // translate by 0, 0
                    translateParams[1] = 0;
                }
            }

            if(transform.indexOf("scale(") >= 0) {
                var transformScale = transform.substring(transform.indexOf("scale("));
                transformScale = transformScale.substring("scale(".length, transformScale.indexOf(")"));
                transformScale = trimString(transformScale);
                var rawScaleParams = [];
                if(transformScale.indexOf(",") > 0) {
                    // number divided by ,
                    rawScaleParams = transformScale.split(",");
                } else {
                    rawScaleParams = transformScale.split(" ");
                }
                for(var k = 0; k < rawScaleParams.length && scaleParams.length < 2; k++) {
                    trimmedValue = trimString(rawScaleParams[k]);
                    if(trimmedValue !== "") {
                        trimmedValue = parseFloat(trimmedValue);
                        if(isNaN(trimmedValue)) {
                            trimmedValue = 0;
                        }
                        scaleParams.push(trimmedValue);
                    }
                }
                if(scaleParams.length < 2) {
                    // scale by 0, 0
                    scaleParams[1] = 0;
                }
            }
        }

        return {
            rotate : rotateParams.length > 0 ? rotateParams : null,
            translate : translateParams.length > 0 ? translateParams : null,
            scale : scaleParams.length > 0 ? scaleParams : null
        };
    };
    return TransformParser;
});

define('sap/viz/controls/chart/morph/morphers/TransformMorpher',[
// @formatter:off
    'sap/viz/controls/chart/morph/constant/MorphConst',
    'sap/viz/controls/chart/morph/utils/SVGShapeMetadata',
    'sap/viz/controls/chart/morph/utils/TransformParser'],
// @formatter:on
function(MorphConst, SVGShapeMetadata, TransformParser) {
    var TransformMorpher = {};
    /**
     *
     * @param {Number} fromX
     * @param {Number} fromY
     * @param {Number} toX
     * @param {Number} toY
     * @param {Number} percentage
     * @return {String} current translate string, translate(10, 20)
     */
    TransformMorpher.applyTransform = function(fromX, fromY, toX, toY, percentage) {
        var x = fromX + (toX - fromX) * percentage / 100;
        var y = fromY + (toY - fromY) * percentage / 100;
        return "translate(" + x + "," + y + ")";
    };

    /**
     *
     * @param {SVGElement} fromShape
     * @param {SVGElement} toShape
     * @param {SVGElement} displayShape
     * @param {Number} percentage
     */
    TransformMorpher.svg = function(fromShape, toShape, displayShape, percentage, useOriginalTranslate) {
        if(displayShape && toShape) {
            var currentTransform = "";
            // translate
            if(fromShape) {
                var fromTransform = TransformParser.parse(fromShape.getAttribute("transform"));
                var toTransform = TransformParser.parse(toShape.getAttribute("transform"));

                if(useOriginalTranslate){
                    // original transform attribute
                    if(fromTransform.translate || toTransform.translate){
                        if(!fromTransform.translate){
                            fromTransform.translate = [0, 0];
                        }
                        if(!toTransform.translate){
                            toTransform.translate = [0, 0];
                        }
                        currentTransform += (currentTransform ? " " : "") +
                                            "translate(" +
                                            (fromTransform.translate[0] + (toTransform.translate[0] - fromTransform.translate[0]) * percentage / 100) + "," +
                                            (fromTransform.translate[1] + (toTransform.translate[1] - fromTransform.translate[1]) * percentage / 100) + ")";
                    }
                }else{
                    // global transform
                    var fromX = SVGShapeMetadata.get(fromShape, MorphConst.SHAPE_GLOBAL_TRANSLATE_X) || 0;
                    var fromY = SVGShapeMetadata.get(fromShape, MorphConst.SHAPE_GLOBAL_TRANSLATE_Y) || 0;
                    var toX = SVGShapeMetadata.get(toShape, MorphConst.SHAPE_GLOBAL_TRANSLATE_X) || 0;
                    var toY = SVGShapeMetadata.get(toShape, MorphConst.SHAPE_GLOBAL_TRANSLATE_Y) || 0;
                    var displayTranslateX = fromX + (toX - fromX) * percentage / 100;
                    var displayTranslateY = fromY + (toY - fromY) * percentage / 100;
                    currentTransform += (currentTransform ? " " : "") +
                                        "translate(" +
                                        displayTranslateX + "," +
                                        displayTranslateY + ")";
                }
                // rotation
                if(fromTransform.rotate || toTransform.rotate){
                    if(!fromTransform.rotate){
                        fromTransform.rotate = [0, 0, 0];
                    }
                    if(!toTransform.rotate){
                        toTransform.rotate = [0, 0, 0];
                    }
                    currentTransform += (currentTransform ? " " : "") +
                                        "rotate(" +
                                        (fromTransform.rotate[0] + (toTransform.rotate[0] - fromTransform.rotate[0]) * percentage / 100) + "," +
                                        (fromTransform.rotate[1] + (toTransform.rotate[1] - fromTransform.rotate[1]) * percentage / 100) + "," +
                                        (fromTransform.rotate[2] + (toTransform.rotate[2] - fromTransform.rotate[2]) * percentage / 100) + ")";
                }
                // scale
                if(fromTransform.scale || toTransform.scale){
                    if(!fromTransform.scale){
                        fromTransform.scale = [0, 0];
                    }
                    if(!toTransform.scale){
                        toTransform.scale = [0, 0];
                    }
                    currentTransform += (currentTransform ? " " : "") +
                                        "scale(" +
                                        (fromTransform.scale[0] + (toTransform.scale[0] - fromTransform.scale[0]) * percentage / 100) + "," +
                                        (fromTransform.scale[1] + (toTransform.scale[1] - fromTransform.scale[1]) * percentage / 100) + ")";
                }

                displayShape.setAttribute("transform", currentTransform);
            }
        }
    };

	return TransformMorpher;
});
define('sap/viz/controls/chart/morph/morphers/TextMorpher',[
// @formatter:off
    'sap/viz/controls/chart/morph/morphers/TransformMorpher'],
// @formatter:on
function(TransformMorpher) {
    var TextMorpher = {};

    var getAttrAsInt = function(svgEl, attrName) {
        var ret = parseInt(svgEl.getAttribute(attrName), 10);
        return isNaN(ret) ? 0 : ret;
    };

    var getAttrAsFloat = function(svgEl, attrName) {
        var ret = parseFloat(svgEl.getAttribute(attrName));
        return isNaN(ret) ? 0 : ret;
    };

    var reg = /(\d+)(in|cm|mm|pt|pc|em|ex|px)/i;

    var getFontSize = function(from, to, percentage) {
        var fromTokens = reg.exec(from);
        if (!fromTokens) {
            // when from = "10", no unit
            fromTokens = [from, from, ""];
        }
        var fromSize = parseInt(fromTokens[1], 10);
        var fromUnit = fromTokens[2];

        var toTokens = reg.exec(to);
        if (!toTokens) {
            // when to = "10", no unit
            toTokens = [to, to, ""];
        }
        var toSize = parseInt(toTokens[1], 10);
        var toUnit = toTokens[2];

        var fromSizeInToUnit = fromSize;

        // TODO add more font size unit support
        // conver from_unit to px
        switch (fromUnit) {
            case "pt":
                fromSizeInToUnit = fromSizeInToUnit * 1.33;
                break;
            case "px":
                fromSizeInToUnit = fromSizeInToUnit;
                break;
            default:
                fromSizeInToUnit = fromSizeInToUnit;
        }

        // conver px to to_unit
        switch (toUnit) {
            case "pt":
                fromSizeInToUnit = fromSizeInToUnit / 1.33;
                break;
            case "px":
                fromSizeInToUnit = fromSizeInToUnit;
                break;
            default:
                fromSizeInToUnit = fromSizeInToUnit;
        }

        return String(Math.round(fromSizeInToUnit + (toSize - fromSizeInToUnit) * percentage / 100)) + toUnit;
    };

    /**
     *
     * @param {SVGElement} fromShape
     * @param {SVGElement} toShape
     * @param {SVGElement} displayShape
     * @param {Number} percentage
     */
    TextMorpher.svg = function(fromShape, toShape, displayShape, percentage) {
        if (displayShape && toShape.localName === "g" && toShape.firstChild && toShape.firstChild.localName === "text") {
            if (fromShape && fromShape.localName === "g" && fromShape.firstChild && fromShape.firstChild.localName === "text") {
                // displayShape is g element
                // displayShape.firstChild is text element
                var textFromX = getAttrAsFloat(fromShape.firstChild, "x");
                var textToX = getAttrAsFloat(toShape.firstChild, "x");
                var textFromY = getAttrAsFloat(fromShape.firstChild, "y");
                var textToY = getAttrAsFloat(toShape.firstChild, "y");
                displayShape.firstChild.setAttribute("x", textFromX + (textToX - textFromX) * percentage / 100);
                displayShape.firstChild.setAttribute("y", textFromY + (textToY - textFromY) * percentage / 100);

                var fromFontSize = fromShape.getAttribute("font-size");
                var toFontSize = toShape.getAttribute("font-size");
                if (fromFontSize && toFontSize && fromFontSize != toFontSize) {
                    var displayFontSize = getFontSize(fromFontSize, toFontSize, percentage);
                    displayShape.setAttribute("font-size", displayFontSize);
                }

                TransformMorpher.svg(fromShape.firstChild, toShape.firstChild, displayShape.firstChild, percentage, true);
            } else if (!fromShape) {
                displayShape.setAttribute("opacity", percentage / 100);
            }
        }
    };

    return TextMorpher;
});
define('sap/viz/controls/chart/morph/VizMorpher',[
// @formatter:off
    'jquery',
    'sap/viz/controls/chart/morph/constant/MorphConst',
    'sap/viz/controls/chart/morph/utils/Utils',
    'sap/viz/controls/chart/morph/utils/SVGShapeMetadata',
    'sap/viz/controls/chart/morph/vo/VizShape',
    'sap/viz/controls/chart/morph/vo/VizShapesHolder',
    'sap/viz/controls/chart/morph/viz/MpShapesCapturer',
    'sap/viz/controls/chart/morph/viz/MpShapesMapper',
    'sap/viz/controls/chart/morph/morphers/ColorMorpher',
    'sap/viz/controls/chart/morph/morphers/RectMorpher',
    'sap/viz/controls/chart/morph/morphers/LineMorpher',
    'sap/viz/controls/chart/morph/morphers/PathMorpher',
    'sap/viz/controls/chart/morph/morphers/TextMorpher',
    'sap/viz/controls/chart/morph/morphers/TransformMorpher'],
function($, MorphConst, utils, SVGShapeMetadata, VizShape, VizShapesHolder, MpShapesCapturer, MpShapesMapper, ColorMorpher,
    RectMorpher, LineMorpher, PathMorpher, TextMorpher, TransformMorpher) {
// @formatter:on
    /**
     * @param {String|HTMLDivElement} vizDiv
     * @param {String|HTMLDivElement} morphDiv
     */
    var VizMorpher = function(morphDiv) {
        // TODO move this creatation out of vizMorpher to Chart
        this._morphDiv = morphDiv;

        this._currentVizType = "";
        this._currentVizShapesHolder = new VizShapesHolder();

        this._tween = null;


    };

    VizMorpher.prototype.bindViewLayer = function (vizDiv) {
        this._vizDiv = vizDiv;
    };

    VizMorpher.prototype.getMorphingLayer = function () {
        return this._morphDiv;
    };

    /**
     * clean up morph div
     */
    VizMorpher.prototype.resetMorphSvg = function() {
        var vizDiv = get$Div(this._vizDiv);
        var vizWidth = vizDiv.width();
        var vizHeight = vizDiv.height();
        var morphDiv = get$Div(this._morphDiv);
        morphDiv.empty();
        var morphSvgDiv = get$Div(document.createElement("DIV"));
        morphSvgDiv.css("overflow", "hidden").appendTo(morphDiv).width(vizWidth).height(vizHeight);
        // clone viz level css class
        var vizSvg = vizDiv.find("svg");
        if (vizSvg.length > 0) {
            // TODO put css class into const
            morphSvgDiv.attr("class", "vc-morph-svg-host " + vizSvg.parent().attr("class"));
        }
        return d3.select(morphSvgDiv.get(0)).append("svg").attr("width", vizWidth).attr("height", vizHeight).node();
    };

    VizMorpher.prototype.resetMorphCache = function() {
        this.resetMorphSvg();
        this._currentVizShapesHolder = new VizShapesHolder();
    };

    /**
     * @return {String} the current viz type
     */
    VizMorpher.prototype.getCurrentVizType = function() {
        return this._currentVizType;
    };

    /**
     * @return {Boolean} whether is playing morphing
     */
    VizMorpher.prototype.isPlaying = function() {
        return (this._tween !== null);
    };

    /**
     * switch viz and morphing layers' visibility
     * @param {Boolean} morphingVisible
     * @param {Boolean} vizVisible
     *
     */
    VizMorpher.prototype.showMorphing = function(morphingVisible, vizVisible) {
        var morphDiv = get$Div(this._morphDiv);
        var vizDiv = get$Div(this._vizDiv);
        if (morphingVisible) {
            morphDiv.css("display", "");
        } else {
            morphDiv.css("display", "none");
        }
        if (vizVisible) {
            vizDiv.css("visibility", "visible");
        } else {
            vizDiv.css("visibility", "hidden");
        }
    };

    /**
     * Update viz with morphing
     *
     * @param {String} newVizType help to define different kinds of morph rules
     * @param {Number} ms morphing time in ms, if ms <= 0, update morphing directly
     * @param {Object} data, crosstable dataset or flattentable dataset
     * @param {Function} completeCallback
     */
    VizMorpher.prototype.morphVizType = function(newVizType, ms, dataset, completeCallback) {
        ms = utils.isNumber(ms) ? ms : 1000;
        newVizType = utils.isString(newVizType) ? newVizType : this.getCurrentVizType();
        var vizDiv = get$Div(this._vizDiv);
        var morphDiv = get$Div(this._morphDiv);
        // synch the opacity of morphDiv with the vizDiv
        if(vizDiv) {
            morphDiv.css({
                'opacity' : vizDiv.css('opacity') ? vizDiv.css('opacity') : 1
            });
        }

        
        if (this._tween) {
            // morphing is not completed, so do not trigger completeCallback
            this._tween.stop(true, false);
            this._tween = null;
            vizDiv.css("visibility", "visible");
            morphDiv.css("display", "none");
        }
        // capture new shapes
        var newVizShapesHolder = MpShapesCapturer.getShapes(vizDiv.get(0), newVizType);
        // whether able to play morphing due to performance consideration of too many shapes
        var canPlayMorphing = ableToPlayMorphing(newVizShapesHolder);
        // whether to animate the morphing, or reach to finaly state directly
        var shouldAnimate = (canPlayMorphing && ms > 0);
        // check play morphing, or clean up and do nothing 
        if (canPlayMorphing) {
            // map new shape's from to current display shapes
            MpShapesMapper.map(newVizShapesHolder, this._currentVizShapesHolder, newVizType, this._currentVizType, dataset);
            // flaten to single array
            var allVizShapes = newVizShapesHolder.allByOrder();
            // clean up morph area
            var morphingLayerSvg = this.resetMorphSvg();
            // start morphing
            if (shouldAnimate) {
                vizDiv.css("visibility", "hidden");
                morphDiv.css("display", "");
                // make sure newVizShapes are updated (has .display SVGElement) and ready to be this._currentVizShapesHolder
                placeShapes(morphingLayerSvg, allVizShapes, 0);
                var me = this;
                this._startMorphShapes(allVizShapes, ms, function() {
                    vizDiv.css("visibility", "visible");
                    morphDiv.css("display", "none");
                    if (me._tween) {
                        me._tween.stop(true, false);
                    }
                    me._tween = null;
                    if (utils.isFunction(completeCallback)) {
                        completeCallback.call(null);
                    }
                });
            } else {
                // make sure newVizShapes are updated (has .display SVGElement) and ready to be this._currentVizShapesHolder
                placeShapes(morphingLayerSvg, allVizShapes, 100);
                this._tween = null;
                vizDiv.css("visibility", "visible");
                morphDiv.css("display", "none");
                if (utils.isFunction(completeCallback)) {
                    completeCallback.call(null);
                }
            }
        } else {
            newVizShapesHolder.empty();
            // clean up morph area
            this.resetMorphSvg();
            this._tween = null;
            vizDiv.css("visibility", "visible");
            morphDiv.css("display", "none");
            if (utils.isFunction(completeCallback)) {
                completeCallback.call(null);
            }
        }
        
        // update current shapes
        $('*', morphDiv).removeAttr('id');
        this._currentVizType = newVizType;
        this._currentVizShapesHolder = newVizShapesHolder;
    };
    
    

    var ableToPlayMorphing = function(newVizShapesHolder) {
        var toShapesBySvgType = newVizShapesHolder.toShapesBySvgType();
        if (toShapesBySvgType["all"].length > newVizShapesHolder.backgrounds.length) {
            // check rules
            if (toShapesBySvgType["path"] && toShapesBySvgType["path"].length > 200) {
                return false;
            }
            if (toShapesBySvgType["rect"] && toShapesBySvgType["rect"].length > 300) {
                return false;
            }
            if (toShapesBySvgType["all"].length > 400) {
                return false;
            }

            return true;
        }
        return false;
    };
    /**
     * @private
     *
     * @param {SVGDocument} svg
     * @param {[sap.viz.morph.vo.VizShape]} visShapes
     */
    VizMorpher.prototype._startMorphShapes = function(visShapes, ms, completeCallback) {
        this._tween = $({
            percentage : 1
        });
        this._tween.animate({
            percentage : 100
        }, {
            duration : ms,
            easing : "swing", //or "linear"
            step : function() {
                var percentage = this.percentage;
                morphShapes(visShapes, percentage);
            },
            complete : function() {
                completeCallback();
            }
        });

    };

    /**
     * @param {String|HTMLDivElement} div
     * @return {jQuery Object}
     */
    var get$Div = function(div) {
        if (utils.isString(div)) {
            if (div.indexOf("#") !== 0) {
                return $("#" + div);
            }
        }
        return $(div);
    };

    /**
     * add to shapes to morphing svg and morph them to initial state
     *
     * @private
     * @param {SVGDocument} svg
     * @param {[VizShape]} visShapes
     * @param {Number} percentage
     */
    var placeShapes = function(svg, visShapes, percentage) {
        percentage = percentage ? percentage : 0;
        for (var i = 0; i < visShapes.length; i++) {
            var vizShape = visShapes[i];
            var fromShape = vizShape.from;
            var toShape = vizShape.to;
            if (toShape) {
                var displayShape = vizShape.display = toShape.cloneNode(true);
                SVGShapeMetadata.clone(displayShape, toShape);
                if (percentage !== 100) {
                    morphShape(fromShape, toShape, displayShape, percentage);
                }
                svg.appendChild(displayShape);
            }
        }
    };

    /**
     * morph all the shapes by percentage
     *
     * @private
     * @param {[VizShape]} visShapes
     * @param {Number} percentage
     */
    var morphShapes = function(visShapes, percentage) {
        for (var i = 0; i < visShapes.length; i++) {
            var vizShape = visShapes[i];
            var fromShape = vizShape.from;
            var toShape = vizShape.to;
            var displayShape = vizShape.display;
            morphShape(fromShape, toShape, displayShape, percentage);
        }
    };

    /**
     * morph every single shape
     *
     * @private
     * @param {SVGElement} fromShape
     * @param {SVGElement} toShape
     * @param {Number} percentage
     */
    var morphShape = function(fromShape, toShape, displayShape, percentage) {
        RectMorpher.svg(fromShape, toShape, displayShape, percentage);
        LineMorpher.svg(fromShape, toShape, displayShape, percentage);
        PathMorpher.svg(fromShape, toShape, displayShape, percentage);
        ColorMorpher.svg(fromShape, toShape, displayShape, percentage);
        TextMorpher.svg(fromShape, toShape, displayShape, percentage);
        TransformMorpher.svg(fromShape, toShape, displayShape, percentage);
    };

    /**
     * For testing
     *
     * @param {String} targetDivId
     */
    VizMorpher.prototype.testDrawShapes = function(newVizType, percentage) {
        var vizDiv = get$Div(this._vizDiv);
        var morphDiv = get$Div(this._morphDiv);
        // capture new shapes
        var newVizShapesHolder = MpShapesCapturer.getShapes(vizDiv.get(0), newVizType);
        // map new shape's from to current display shapes
        MpShapesMapper.map(newVizShapesHolder, this._currentVizShapesHolder, newVizType, this._currentVizType);
        // flaten to single array
        var allVizShapes = newVizShapesHolder.allByOrder();
        // clean up morph area
        var morphingLayerSvg = this.resetMorphSvg();
        // make sure newVizShapes are updated (has .display SVGElement) and ready to be this._currentVizShapesHolder
        placeShapes(morphingLayerSvg, allVizShapes, percentage);
        // update current shapes
        this._currentVizType = newVizType;
        this._currentVizShapesHolder = newVizShapesHolder;
    };

    return VizMorpher;
});

define('sap/viz/controls/chart/views/WarningView',
[
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/VizUtils',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/managers/LangManager'
],
function($, OOUtil, VizUtils, UIControl, ChartConst, CSSConst, Event, LangManager){
    var NegativeValuesView = function(dom, uiconfig){
        NegativeValuesView.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.view.NegativeValuesView";

        this._createChildren();
    };

    OOUtil.extend(NegativeValuesView, UIControl);

    NegativeValuesView.prototype._createChildren = function(){
        //create dialog
        this._confirmDialog$ = $(document.createElement('div'));
        this._confirmDialog$.addClass(CSSConst.CHART_PREFIX + 'warning');

        this._container$ = $(document.createElement('div'));
        $(document.createElement('div')).appendTo(this._container$).addClass(CSSConst.CHART_PREFIX + 'warning-separator');
        var title$ = $(document.createElement('div')).appendTo(this._container$).addClass(CSSConst.CHART_PREFIX + 'warning-title');
        var warningIcon$ = $(document.createElement('div')).appendTo(title$);
        warningIcon$.addClass(CSSConst.CHART_PREFIX + 'warning-title-icon');
        var titleText$ = $(document.createElement('span')).appendTo(title$).text(LangManager.get("VIZ_CHART_NEGATIVE_VALUES_WARN"));
        titleText$.addClass(CSSConst.CHART_PREFIX + 'warning-title-text');
        var info$ = $(document.createElement('div')).appendTo(this._container$).addClass(CSSConst.CHART_PREFIX + 'warning-info');
        var infoText$ = $(document.createElement('span')).appendTo(info$).text(LangManager.get("VIZ_CHART_NEGATIVE_VALUES_INFO"));
        infoText$.addClass(CSSConst.CHART_PREFIX + 'warning-info-text');

        var deleteIcon$ = $(document.createElement('div')).appendTo(this._container$);
        deleteIcon$.addClass(CSSConst.CHART_PREFIX + 'warning-delete-icon');
        deleteIcon$.addClass(CSSConst.COMMON_PREFIX + 'UVBSharedSprite');
        deleteIcon$.click($.proxy(function(e) {
            this.hide();
        }, this));
        this._confirmDialog$.append(this._container$);


        this._blockLayout$ = $(document.createElement('div'));
        this._blockLayout$.addClass(CSSConst.CHART_PREFIX + 'block-layer');
    };

    NegativeValuesView.prototype.show = function(type, properties, axis){
        this._visible = true;
        var left = this._dom$.offset().left + this._dom$.width() / 2;
        var top = this._dom$.offset().top + this._dom$.height() / 2;
        $(document.body).append(this._blockLayout$);
        $(document.body).append(this._confirmDialog$);
        this._confirmDialog$.css({
            position : "absolute",
            left : left - this._confirmDialog$.width() / 2,
            top : top - this._confirmDialog$.height() / 2
        });
        this._container$.css({
                "display" : "block"
            });
    };

    NegativeValuesView.prototype.hide = function() {
        this._visible = false;
        this._blockLayout$.detach();
        this._confirmDialog$.detach();
    };

    return NegativeValuesView;
}
);

// @formatter:off
define('sap/viz/controls/chart/views/View',[
    'jquery',
    'sap/viz/controls/LanguageLoader',
    'sap/viz/controls/TemplateLoader',
    'sap/viz/controls/common/config/GlobalConfig',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/constants/MapProviderConst',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/utils/DatasetUtil',
    'sap/viz/controls/common/utils/TrellisUtils',
    'sap/viz/controls/common/utils/VizUtils',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/chart/morph/VizMorpher',
    'sap/viz/controls/chart/views/ChartEvent',
    'sap/viz/controls/chart/views/DropZone',
    'sap/viz/controls/chart/views/WarningView',
    'sap/viz/controls/chart/ChartConfig',
    'sap/viz/controls/common/utils/IncompleteGhost',
    'sap/viz/controls/common/feeds/FeedItem',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/services/FeedValidationService',
    'sap/viz/controls/common/metadata/MetadataFactory'
],

function($, LanguageLoader, TemplateLoader, GlobalConfig, ChartConst, MapProviderConst, FeedItemType, FeedUtils, LangManager,
    OOUtil, utils, ChartTypeUtil, DatasetUtil, TrellisUtils, VizUtils, CSSConst, UIControl, VizMorpher,
    ChartEvent, DropZone, WarningView, ChartConfig, IncompleteGhost, FeedItem, AnalyticalType, Event, FeedValidationService, MetadataFactory) {
// @formatter:on
    /**
     * View Class
     */
    var View = function(div, options, libFolderPath, chartModelProvider, chartProxy, helper) {
        View.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.view.View";

        this._div = div;
        this._chartHolder$ = null;
        this._chartLayer$ = null;
        this._descriptionLayer$ = null;
        this._loadingIcon$ = null;

        this._chartModelProvider = chartModelProvider;
        this._helper = helper;
        this._options = options;
        this._cssCache = null;
        this._libFolderPath = libFolderPath;
        // add "/" in the path  because geo don't handle in geo's code.
        var geoResourcePath = sap.viz.api.env.Resource.path("sap.viz.geo.geographicInfo.localStorage.resourcePath");
        // TODO: throw errors if no resource path set.
        this._geoResourcePath = geoResourcePath ? geoResourcePath : this._libFolderPath + "/sap.viz.geo/geocharts/resources/data/geo/";

        this._enableTrellis = true;
        this._enablePropertyZone = false;

        this._hasChartInstance = false;
        this._changedProperties = null;

        this._size = {
            width : View.DEFAULT_VIZ_WIDTH,
            height : View.DEFAULT_VIZ_HEIGHT
        };

        //TODO: set padding to viz chart instance
        this._padding = 24;
        // chart instance
        this._chart = null;
        this._chartProxy = chartProxy;
        this._onEventMap = {};

        this._isFeedsValid = false;
        this._templateId = View.TEMPLATE_DEFAULT;

        this._requestMorphing = false;

        // Reset activeElement, since chart will stopPropagation of mousedown
        this._mouseDownHandler = $.proxy(function(event) {
            // Add condition for activeElement.tagName because in IE10/IE11, executing blur() method will cause page to vanish if current activeElement is HTMLBodyElement.
            if (document.activeElement && document.activeElement.tagName && document.activeElement.tagName.toLowerCase() != "body" && !$.contains(this._dom$[0], document.activeElement) && $.contains(this._dom$.parent()[0], event.target)) {
                document.activeElement.blur();
            }
        }, this);
        $(document).on('mousedown', this._mouseDownHandler);

        this._changeTemplateFunc = $.proxy(this.changeTemplate, this);
        sap.viz.api.env.Template.addListener(this._changeTemplateFunc);
    };

    OOUtil.extend(View, UIControl);

    // Default viz size when create new visualization
    View.DEFAULT_VIZ_WIDTH = 380;
    View.DEFAULT_VIZ_HEIGHT = 280;

    // Template ID
    View.TEMPLATE_DEFAULT = "default";
    View.TEMPLATE_INCOMPLETE = "incomplete_ghost";
    View.TEMPLATE_EMPTY = "empty_ghost";

    View.prototype.requestMorphing = function() {
        return this._requestMorphing;
    };

    View.prototype._createChildren = function() {
        this._createChartHolder();
        this._createChartLayer();
        this._createDescriptionLayer();
        this._createLoadingIcon();
        this._createWarningDialog();
    };

    View.prototype._createChartHolder = function() {
        this._chartHolder$ = $(document.createElement('div')).addClass([CSSConst.PREFIX + 'chart-holder', CSSConst.COMMON_PREFIX + 'scrollable'].join(' '));
        this._chartHolder$.appendTo($(this._div));
        this._chartHolder$.css({
            position : 'relative'
        });
    };

    View.prototype._createChartLayer = function() {
        this._chartLayer$ = $(document.createElement('div')).addClass(CSSConst.PREFIX + 'chart-layer');
        this._chartLayer$.appendTo(this._chartHolder$);
        this._chartLayer$.css({
            position : 'absolute'
        });
    };
    View.prototype._createDescriptionLayer = function() {
        this._descriptionLayer$ = $(document.createElement('div')).addClass(CSSConst.PREFIX + "chart-description");
        this._descriptionLayer$.css({
            position : 'absolute'
        });
        this._descriptionLayer$.appendTo(this._chartHolder$);
    };

    View.prototype._createLoadingIcon = function() {
        this._loadingIcon$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + "loading-icon");
        this._loadingIcon$.appendTo(this._chartHolder$);
        this._loadingIcon$.css({
            width : this._chartHolder$.width() + "px",
            height : this._chartHolder$.height() + "px"
        });
    };

    View.prototype._createWarningDialog = function() {
        this._warningView = new WarningView(this._chartHolder$.get(0), null);
    };

    View.prototype._showWarningDialog = function() {
        this._warningView.show();
    };

    View.prototype._createDropZone = function() {
        var chartDiv$ = this._chartLayer$;
        this._dropZone = new DropZone(chartDiv$.get(0), $.proxy(this._getFeedingZone, this), $.proxy(this._dropZoneFeedValidator, this));
        this._dropZone.addEventListener(DropZone.DROP_ITEM_EVENT, this._dropItemHandler, this);
    };

    View.prototype._getFeedingZone = function() {
        if (!this._chart) {
            return [];
        }

        try {
            return this._chartProxy.get('feedingZone', []);
        } catch(error) {
            return [];
        }
    };

    /**
     * Check whether new feed can be added to chart model.
     * @param {Object} feedDef
     * @param {<sap.viz.controls.common.feeds.AnalysisObject>} analysisObject
     * @param {String} zoneName
     * @return {Boolean}
     */
    View.prototype._dropZoneFeedValidator = function(dropTo, analysisObject) {
        var vizModel = this._chartModelProvider();
        var feeds = FeedUtils.cloneFeeds(vizModel.feedingItems());
        if (!vizModel.isMNDVisible()) {
            feeds = FeedUtils.removeMND(feeds);
        }
        var replaceable = FeedValidationService.replaceable(vizModel.type(), feeds, dropTo, analysisObject);
        return replaceable;
    };

    /**
     * Handle drop item.
     */
    View.prototype._dropItemHandler = function(e) {
        //create feed items
        this._dispatchEvent(new ChartEvent(ChartEvent.ANALYSIS_DROPPED, this, e.data));
    };

    View.DISPATCH_PROPERTY_EVENT = 'dispatchPropertyEvent';

    View.prototype.modelChanged = function(model, options) {

    };

    View.prototype._getMinSize = function() {
        return this._size;
    };

    View.prototype._setChartSize = function(width, height) {
        if (this._chart) {
            this._chartProxy.set('size', {
                width : width,
                height : height
            });
        }
    };

    View.prototype._updateChartSize = function(applyToChart) {
        //update chart size for trilles
        var minSize = this._getMinSize();
        var width = minSize.width;
        var height = minSize.height;
        var cssObj = {
            width : this._size.width + "px",
            height : this._size.height + "px",
            'overflow-x' : minSize['overflow-x'] || 'hidden',
            'overflow-y' : minSize['overflow-y'] || 'hidden'
        };

        if (applyToChart) {
            this._setChartSize(width, height);
        }
        this._chartLayer$.css({
            width : width + "px",
            height : height + "px"
        });

        this._chartHolder$.css(cssObj);

        return minSize;
    };
    /**
     * update customized description from user.
     */
    View.prototype.updateDescription = function(description) {
        this._destroyChartInstance();
        this._updateDescription(description);

    };
    /**
     * updata ghost description.
     */
    View.prototype._updateDescription = function(description) {

        if (description) {
            if (this._descriptionLayer$) {
                this._descriptionLayer$.show();
                this._descriptionLayer$.text(description);
            }
            this._showDescription();
        } else {
            if (this._descriptionLayer$) {
                this._descriptionLayer$.hide();
                this._descriptionLayer$.text("");
            }
            var children = this._chartHolder$.children();
            for(var i = 0 ; i < children.length; i++)
            {
                var child$ = $(children[i]);
                child$.css({
                    'opacity' : ""
                });
            }
        }
        this.hideLoadingIcon();
    };
    function isFeedingAddEnough (defs, feedItems, type, isGeoDimension) {
        for (var i = 0; i < feedItems.length; i++) {
            if (feedItems[i].type() === type) {
                for (var j = 0; j < defs.length; j++) {
                    if (feedItems[i].id() === defs[j].id()) {
                        //same defs
                        if ((feedItems[i].id() !== "geoFeatures" && !isGeoDimension) || (feedItems[i].id() === "geoFeatures" && isGeoDimension)) {
                            if (feedItems[i].values().length < defs[j].min()) {
                                return false;
                            }
                        }
                    }
                }
            }
        }
        return true;
    }

    function getDescription (type, feeding, feedItems) {
        var description = LangManager.get("VIZ_CHART_INCOMPLETE_DESCRIPTION");
        var defs = MetadataFactory.get(type).getBindingDefs();

        var onlyDimentions = true;
        var onlyMeasures = true;
        var i;
        for ( i = 0; i < defs.length; i++) {
            if (!onlyMeasures && !onlyDimentions) {
                break;
            }
            var def = defs[i];
            if (onlyMeasures && def.type() === 'dimension') {
                onlyMeasures = false;
                continue;
            }
            if (onlyDimentions && def.type() === 'measure') {
                onlyDimentions = false;
            }
        }

        if (onlyDimentions) {
            description = LangManager.get("VIZ_CHART_DIMENSION_INCOMPLETE_DESCRIPTION");
            return description;
        }
        if (onlyMeasures) {
            description = LangManager.get("VIZ_CHART_MEASURE_INCOMPLETE_DESCRIPTION");
            return description;
        }

        if (!feeding) {
            return description;
        }
        var isMeasuresAddEnough = isFeedingAddEnough(defs, feedItems, FeedItemType.MEASURE, false);
        var isDimensionsAddEnough = isFeedingAddEnough(defs, feedItems, FeedItemType.DIMENSION, false);
        var isGeoAddEnough = isFeedingAddEnough(defs, feedItems, FeedItemType.DIMENSION, true);

        if (isGeoAddEnough) {
            //not need to add Geography Dimension
            if (!isMeasuresAddEnough && isDimensionsAddEnough) {
                //add Measures
                description = LangManager.get("VIZ_CHART_MEASURE_INCOMPLETE_DESCRIPTION");
            }
            if (isMeasuresAddEnough && !isDimensionsAddEnough) {
                //add Dimentions
                description = LangManager.get("VIZ_CHART_DIMENSION_INCOMPLETE_DESCRIPTION");
            }
        } else {
            //need to add Geography Dimension
            if (isMeasuresAddEnough && isDimensionsAddEnough) {
                //add GeoDimentions
                description = LangManager.get("VIZ_CHART_GEO_INCOMPLETE_DESCRIPTION");
            }
            if (isMeasuresAddEnough && !isDimensionsAddEnough) {
                //add Dimentions
                description = LangManager.get("VIZ_CHART_DIMENSION_INCOMPLETE_DESCRIPTION");
            }
        }

        return description;
    }
    View.prototype._showDescription = function() {
        var children = this._chartHolder$.children();
        for(var i = 0; i < children.length; i++) {
            var child$ = $(children[i]);
            child$.css({
                'opacity' : ".3"
            });
        }

        if (this._descriptionLayer$) {
            this._descriptionLayer$.css({
                width : this._size.width + "px",
                height : this._size.height / 2 + 50 + "px",
                color : "black",
                'font-size' : "28px",
                'text-align' : "center",
                'top' : this._size.height / 2 - 50 + "px",
                'word-wrap' : "break-word"
            });
        }
    };

    View.prototype._destroyChartInstance = function() {
        if (this._chart) {
            this._offEvent();
            this._chart.destroy();
            this._chart = null;
            this._hasChartInstance = false;
        }
    };

    
    View.prototype._updateChartOpacity = function(data) {
        if (arguments.length === 0) {
            this._chartLayer$.css('opacity', '0');
        } else {
            if (VizUtils.hasFakeData(data)) {
                this._chartLayer$.css('opacity', '.3');
            } else {
                this._chartLayer$.css('opacity', '');
            }
        }

    }; 


    View.prototype._updateDescriptionByOptions = function(options) {
        // whether this options has error
        var hasError = false, msg;
        if (ChartTypeUtil.isEmptyData(options.type, options.data)) {
            //TODO: if table also need to show error message for empty data?
            msg = LangManager.get('VIZ_CHART_NO_DATA_MATCHES_YOUR_FILTER');
            hasError = true;
        } else {
            // update description for different type and feeding.
            var vizType = options.type;
            var feeding = options.feeding;
            if (!this._enableTrellis && ChartTypeUtil.isMultipleChart(vizType)) {
                msg = LangManager.get('VIZ_CHART_TRELLIS_DISABLED_WARN');
                hasError = true;
            } else if (!this._isFeedsValid) {
                msg = getDescription(vizType, feeding, this._chartModelProvider().feedingItems());
            }
            this._updateChartOpacity(options.data);
        }
        this._updateChartSize(false);
        this._updateDescription(msg);
        if (hasError){
            this._updateChartOpacity();
        } 
        return hasError;
    };

    View.prototype._createChartInstance = function() {

    };
    /**
     * Get current template id used in view.
     * If dataset is specified, will return the templated id for the dataset.
     */
    View.prototype.getTemplateId = function(dataset) {
        if (arguments.length > 0) {
            return this._templateId;
        } else {
            return sap.viz.api.env.Template.get();
        }
    };
    /** Get Template ID.
     * @param {JSON} dataset
     * return {String}
     */
    View.prototype._getTemplateId = function(dataset) {
        var templateId = sap.viz.api.env.Template.get();
        if (templateId !== View.TEMPLATE_INCOMPLETE && templateId !== View.TEMPLATE_EMPTY) {
            this._templateId = templateId;
        }

        this._isFeedsValid = !VizUtils.hasFakeData(dataset) && !ChartTypeUtil.isEmptyData(this._options.type, dataset);
        templateId = this._isFeedsValid ? this._templateId : View.TEMPLATE_INCOMPLETE;
        return templateId;
    };
    /**
     * need to request data from server, show loading icon.
     */
    View.prototype.showLoadingIcon = function() {
        //leave loading icon show&hide behavior to app layer
        /*
         this._loadingIcon$.css({
         display : "block"
         });
         */
    };
    /**
     * Get data from server, need to hide loading icon.
     */
    View.prototype.hideLoadingIcon = function() {
        this._loadingIcon$.css({
            display : ""
        });
    };

    /**
     * Chart instance was created or not.
     */
    View.prototype.hasChartInstance = function() {
        return this._hasChartInstance;
    };

    /*
     * Could export or not
     */
    View.prototype.exportable = function() {
       return false;
    };

    /**
     * @param {width: Number, height: Number} size
     */
    View.prototype.size = function(size) {
        if (arguments.length > 0) {
            this._size = {
                width : size.width,
                height : size.height
            };

            this._updateChartSize(true);

            var descriptionDiv$ = this._descriptionLayer$;
            if (descriptionDiv$ !== null && descriptionDiv$.size() > 0) {
                descriptionDiv$.css({
                    width : this._size.width + "px",
                    height : this._size.height / 2 + 50 + "px",
                    'top' : this._size.height / 2 - 50 + "px"
                });
            }

            this._loadingIcon$.css({
                width : this._size.width + "px",
                height : this._size.height + "px"
            });

            return this;
        }
        return {
            width : this._size.width,
            height : this._size.height
        };
    };

    /**
     * change template if we detect templateChanged event.
     */
    View.prototype.changeTemplate = function() {
        var templateId = sap.viz.api.env.Template.get();
        if (templateId !== View.TEMPLATE_INCOMPLETE && templateId !== View.TEMPLATE_EMPTY && templateId !== this._templateId) {
            var templateIdFromData = this._getTemplateId(this._options.data);
            if (templateIdFromData === templateId) {
                this._requestMorphing = true;
                this._createChartInstance();

                // return empty selection array
                this._dispatchEvent(new ChartEvent(ChartEvent.CHANGED_SELECTED_DATA, this));
            }
        }
    };

    /**
     * Create ChartView with new options and templateId.
     * @param {Object} options
     */
    View.prototype.create = function(options) {
        if (options) {
            this._options = options;
            this._requestMorphing = true;

            var templateId = this._getTemplateId(options.data);
            this.__templateId = templateId;
            var _this = this;
            sap.viz.api.env.Template.set(templateId, function() {
                if (_this.__templateId === templateId) {
                    _this._createChartInstance();
                }
            });
            // return empty selection array
            this._dispatchEvent(new ChartEvent(ChartEvent.CHANGED_SELECTED_DATA, this));
        }
    };

    /**
     * Destroy the chart object.
     */
    View.prototype.destroy = function() {
        $(document).off('mousedown', this._mouseDownHandler);

        this.removeAllEventListeners();
        this._onEventMap = {};
        if (this._chart) {
            this._chart.destroy();
            this._chart = null;
        }
        // TODO use chartHolder as the root node of View
        this._chartHolder$.remove();

        sap.viz.api.env.Template.removeListener(this._changeTemplateFunc);
    };
    /**
     * Update chart data.
     * @param {Object} data
     */
    
    View.prototype.data = function(data) {
        var hasError, errorMsg;
        try {
            if (arguments.length > 0) {
                this._options.data = data;
                if (this._chart) {
                    hasError = this._updateDescriptionByOptions(this._options);
                    if (hasError) {
                        // send event to clean comments
                        this._dispatchEvent(new ChartEvent(ChartEvent.CHART_CHANGING, this));
                        this._dispatchEvent(new ChartEvent(ChartEvent.CHANGED_SELECTED_DATA, this));
                        this._requestMorphing = false;
                    } else {
                        this._chartProxy.set('data', this._options.data);
                        return this;
                    }
                } else {
                    errorMsg = LangManager.get('VIZ_CHART_UPDATE_CHART_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
                    this._updateDescription(errorMsg);
                    throw errorMsg;
                }
            } else {
                // TODO Remove get method
                return this._chartProxy.get('data', this._options.data);
            }
        } catch (error) {
            //if (console) {
            //    console.log("Failed to update chart data : " + error);
            //}
            errorMsg = LangManager.get('VIZ_CHART_UPDATE_CHART_FAILED') + error;
            this._updateDescription(errorMsg);
            throw errorMsg;
        }
    }; 

    /**
     * Update chart feeding.
     * @param {Object} feeding
     */
    View.prototype.feeding = function(feeding) {
        if (arguments.length > 0) {
            this._options.feeding = feeding;
            return this;
        } else {
            return this._options.feeding;
        }
    };
    /**
     * Update chart css.
     * @param {Object} css
     */
    View.prototype.css = function(css) {
        if (arguments.length > 0) {
            this._options.css = css;
            return this;
        } else {
            return this._options.css;
        }
    };

    View.prototype.getValidProperties = function(properties, chartType) {
        return VizUtils.getValidProperties(properties, chartType);
    };

    /**
     * Update chart css.
     * @param {Object} css
     */
    View.prototype.properties = function(properties) {
        if (arguments.length > 0) {
            this._options.properties = properties;
            return this;
        } else {
            return this._options.properties;
        }
    };

    View.prototype.scales = function(scales) {
    };
    /**
     * Update chart with updated options.
     * @param {Object} updates
     */
    View.prototype.update = function(updates, disableMorphing) {
        if (!updates) {
            return;
        }
        if (!disableMorphing) {
            this._requestMorphing = true;
        }

        if (updates.css) {
            // update css cache according to new css
            this._updateCssCacheByNewCss(updates.css);
            this._options.css = updates.css;
        }
        if (updates.feeding) {
            this._options.feeding = updates.feeding;
        } else if (updates.bindings) { //info chart
            this._options.feeding = updates.bindings;
        }
        if (updates.data) {
            this._options.data = updates.data;
        }
        if (updates.properties) {
            this._options.properties = updates.properties;
            this._addChangedProperties(updates.properties);
            this._checkBehaviorType(updates.properties);
        }
        
        if (updates.scales) {
            this._options.scales = updates.scales;
        }

        var errorMsg, hasError;
        try {
            if (this._chart) {

                //Show warning message
                var showNegativeValues = false;
                if (updates.properties && updates.properties.plotArea && updates.properties.plotArea.showNegativeValues === true) {
                    showNegativeValues = true;
                }
                var feedItems = this._chartModelProvider().feedingItems();
                if (!showNegativeValues && this._options.type && DatasetUtil.hasNegativeMeasureValue(this._options.type, feedItems, updates.data)) {
                    this._showWarningDialog();
                }

                hasError = this._updateDescriptionByOptions(this._options);
                if (hasError){
                    // send event to clean comments
                    this._dispatchEvent(new ChartEvent(ChartEvent.CHART_CHANGING, this));
                    this._dispatchEvent(new ChartEvent(ChartEvent.CHANGED_SELECTED_DATA, this));
                    this._requestMorphing = false;
                } 
                else {
                    this._updateChartSize(true);
                    this._chartProxy.execute('update', updates);
                }
                return this;
            } else {
                errorMsg = LangManager.get('VIZ_CHART_UPDATE_CHART_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
                this._updateDescription(errorMsg);
                throw errorMsg;
            }
        } catch (error) {
            //if (console) {
            //    console.log("Failed to update chart : " + error);
            //}
            errorMsg = LangManager.get('VIZ_CHART_UPDATE_CHART_FAILED') + error;
            this._updateDescription(errorMsg);
            throw errorMsg;
        }
    };
    /**
     * Listen the events sent by the host
     * @param {String} eventType
     * @param {Function} callback
     *
     */
    View.prototype.on = function(evtType, callback) {
        try {
            if (this._chart) {
                if (arguments.length > 0) {
                    this._chart.on(evtType, callback);
                }
            }

            this._onEventMap[evtType] = callback;
            return this;
        } catch (error) {
            //if (console) {
            //    console.log("Failed to add chart event callback : " + error);
            //}
            throw LangManager.get('VIZ_CHART_ADD_EVENT_FAILED') + error;
        }
    };
    /**
     * Turn off the event.
     * @param {String} eventType
     *
     */
    View.prototype.off = function(evtType) {
        try {
            if (this._chart) {
                if (arguments.length > 0) {
                    this._chart.off(evtType);
                }
            }
            delete this._onEventMap[evtType];
            return this;
        } catch (error) {
            //if (console) {
            //    console.log("Failed to remove chart event callback : " + error);
            //}
            throw LangManager.get('VIZ_CHART_REMOVE_EVENT_FAILED') + error;
        }
    };

    /**
     * Update chart selection.
     * @param {Object} points
     * @param {Object} options
     */
    View.prototype.selection = function(points, options) {
        try {
            if (this._chart) {
                //TODO: cvom bug, code will be removed if bug fixed
                if (this._options.type === ChartConst.TYPE_TREE ||
                    this._options.type === ChartConst.TYPE_TABLE || this._options.type === ChartConst.TYPE_CROSSTAB) {
                    return null;
                }
                if (arguments.length >= 2) {
                    this._chart.selection(points, options);
                    return this;
                } else if (arguments.length === 1) {
                    if (utils.isArray(arguments[0])) {
                        this._chart.selection(arguments[0]);
                        return this;
                    } else {
                        return this._chart.selection(arguments[0]);
                    }
                } else {
                    return this._chart.selection();
                }
            } else {
                if (arguments.length >= 2) {
                    throw LangManager.get('VIZ_CHART_SELECTION_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
                } else if (arguments.length === 1) {
                    if (utils.isArray(arguments[0])) {
                        throw LangManager.get('VIZ_CHART_SELECTION_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
                    } else {
                        return null;
                    }
                } else {
                    return null;
                }
            }
        } catch (error) {
            //if (console) {
            //    console.log("Failed to selection chart : " + error);
            //}
            throw LangManager.get('VIZ_CHART_SELECTION_FAILED') + error;
        }
    };

    View.prototype.feedingZone = function() {
        return [];
    };
    /**
     * Update chart description.
     * @param {Object} description
     */
    View.prototype.description = function(description) {
        try {
            if (arguments.length > 0) {
                if (this._chart) {
                    this._chart.description(description);
                    return this;
                } else {
                    throw LangManager.get('VIZ_CHART_DESCRIPTION_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
                }
            } else {
                if (this._chart) {
                    return this._chart.description();
                } else {
                    return null;
                }
            }
        } catch (error) {
            //if (console) {
            //    console.log("Failed to description chart : " + error);
            //}
            throw LangManager.get('VIZ_CHART_DESCRIPTION_FAILED') + error;
        }
    };
    /**
     * Trigger chart action.
     * @param {String} keyName
     * @param {Object} args
     */
    View.prototype.action = function(keyName, args) {
        try {
            if (this._chart) {
                if (arguments.length > 0) {
                    return this._chartProxy.execute('action', keyName, args);
                }
            } else {
                throw LangManager.get('VIZ_CHART_TRIGGER_ACTION_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
            }
        } catch (error) {
            //if (console) {
            //    console.log("Failed to trigger chart action: " + error);
            //}
            throw LangManager.get('VIZ_CHART_TRIGGER_ACTION_FAILED') + error;
        }
    };

    /**
     * @param {JSON} options
     *      optional
     *      supported options: {emptyDataset : false}
     * Return the chart JSON String.
     */
    View.prototype.exportViz = function(options) {
        if (this._chart) {
            var result = this._chartProxy.execute('toJSON', options);
            if (result) {
                result.properties = this._options.properties;
                this._updateCssOfOptions();
                result.css = this._options.css;
            }
            return result;
        } else {
            throw LangManager.get('VIZ_CHART_SERIALIZE_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
        }
    };

    View.prototype.loadViz = function(vizJSON) {
        this.create(vizJSON);
    };
    /*
     * Get/set enableTrellis.
     */
    View.prototype.enableTrellis = function(value) {
        if (arguments.length > 0) {
            this._enableTrellis = (value !== false);
            return this;
        } else {
            return this._enableTrellis;
        }
    };

    /**
     * Get/set enablePropertyZone
     */
    View.prototype.enablePropertyZone = function(value) {
        if (arguments.length > 0) {
            if (this._enablePropertyZone !== value) {
                this._enablePropertyZone = (value === true);
            }
            return this;
        } else {
            return this._enablePropertyZone;
        }
    };

    View.prototype.getTitleByFeeding = function() {
        var newTitle = "";
        var measureNamesAry = [];
        var dimensionNamesAry = [];
        var feedItems = this._chartModelProvider().feedingItems();
        for (var i = 0; i < feedItems.length; i++) {
            var feedItem/*FeedItem*/ = feedItems[i];
            // do not add the subtotal feed items to the title of the chart
            if( feedItem._id === FeedItemType.ROW_SUBTOTALS || feedItem._id === FeedItemType.COLUMNS_SUBTOTALS ) {
                continue;
            }
            var values = feedItem.values();
            var curFeedItemNamesAry = (feedItem.type() === FeedItemType.MEASURE) ? measureNamesAry : dimensionNamesAry;
            for (var j = 0; j < values.length; j++) {
                var value/*AnalysisObject*/ = values[j];
                if (value.id() === AnalyticalType.MND) {
                    continue;
                }
                var hierLevel/*HierarchyLevelObj*/ = value.selectedHierarchyLevel();
                var name = hierLevel ? hierLevel.name() : value.name();
                curFeedItemNamesAry.push(name);
            }
        }

        var measureNames = View._getNames(measureNamesAry);
        var dimensionNames = View._getNames(dimensionNamesAry);
        if (measureNames !== "" && dimensionNames !== "") {
            newTitle = utils.substitute(LangManager.get('VIZ_CHART_TITLE_TEXT_JOIN_BY'), measureNames, dimensionNames);
        } else if (measureNames !== "") {
            newTitle = measureNames;
        } else if (dimensionNames !== "") {
            newTitle = dimensionNames;
        }
        if (newTitle === "") {
            newTitle = null;
        }
        return newTitle;
    };
    View._getNames = function(names) {
        var retName = "";
        for (var i = 0; i < names.length; i++) {
            var name = names[i];
            retName += name;
            if (i + 2 === names.length) {
                retName += " " + LangManager.get('VIZ_CHART_TITLE_TEXT_JOIN_AND') + " ";
            } else if (i + 2 < names.length) {
                retName += ", ";
            }
        }
        return retName;
    };

    View.prototype.resetProperties = function(properties, vizType) {
        return properties;
    };

    View.prototype.copyData = function(type, data) {
        return utils.clone(data);
    };

    View.prototype.buildFeedings = function(type, data, feeds) {
        return null;
    };

    View.prototype.supportUpdate = function(type) {
        return true;
    };

    View.prototype.setPropertyZones = function(propertyZones) {
    };

    View.prototype.FeedsToJSON = function(feeds) {
        return FeedItem.toJSON(feeds);
    };

    View.prototype.save = function() {
    };

    View.prototype.load = function(json, vizInstanceProps) {
    };

    View.prototype.FeedsFromJSON = function(valueJSON) {
        var feeds = FeedItem.fromJSON(valueJSON);
        return feeds;
    };

    View.prototype.exportToSVGString = function(option) {
        if (this._chart) {
            return this._chartProxy.execute('exportToSVGString', option);
        } else {
            throw LangManager.get('VIZ_CHART_EXPORTSVG_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
        }
    };

    View.prototype.supportExportToSVG = function() {
        if (this._chart) {
            return this._chartProxy.execute('supportExportToSVG');
        } else {
            throw LangManager.get('VIZ_CHART_EXPORTSVG_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
        }
    };

    View.prototype.getPropertyZones = function() {
        return [];
    };

    View.prototype.getZoneName = function(point) {
    };

    View.prototype.setAxisScale = function(axis) {
    };

    View.prototype.getDataPointsPosition = function(dataPoints){
        return [];
    };

    View.prototype.updateProperties = function(options) {
    };

    View.prototype.getChangedProperties = function() {
        return this._changedProperties;
    }
    /**
     * Save properties changed by user
     * Merge current changed properties with previous changed properties
     */
    View.prototype._addChangedProperties = function(prop) {
        this._changedProperties = utils.updateJSON(this._changedProperties, prop);
        return this._changedProperties;
    };
    /**
     * Reset changed properties to null when user create new instance
     */
    View.prototype._resetChangedProperties = function() {
        this._changedProperties = null;
    };
    /**
     * update css map
     * @param {String} selector css selector
     * @param {String} propName css property name
     * @param {String} propValue css property value
     */
    View.prototype._updateCssCache = function(selector, propName, propValue) {
        if (!this._cssCache) {
            this._updateCssCacheByOptions();
        }
        this._cssCache = this._cssCache || {};
        this._cssCache[selector] = this._cssCache[selector] || {};
        this._cssCache[selector][propName] = propValue;
    };

    /**
     * Update css cache at first time
     */
    View.prototype._updateCssCacheByOptions = function() {
        if (this._options && this._options.css) {
            this._updateCssCacheByCssString(this._options.css);
        }
    };

    /**
     * update css map according to new css, update css cache by current options.css if cache is null
     * @param {String} css string sample: 'selector1{prop1:value1;prop2:value2} selector2{prop3:value3}'
     */
    View.prototype._updateCssCacheByNewCss = function(cssStr) {
        if (!this._cssCache) {
            this._updateCssCacheByOptions();
        }

        this._updateCssCacheByCssString(cssStr);
    };

    /**
     * update css map
     * @param {String} css string sample: 'selector1{prop1:value1;prop2:value2} selector2{prop3:value3}'
     */
    View.prototype._updateCssCacheByCssString = function(cssStr) {
        if (!cssStr) {
            return;
        }
        this._cssCache = this._cssCache || {};
        var cssAry = cssStr.split('}');

        var i, j, aCssStr, aCssAry = [], selector,
            propStr, propAry, aPropStr, aPropAry, propName, propValue;
        for (i = 0; i < cssAry.length; i++) {
            aCssStr = cssAry[i];
            aCssAry = aCssStr.split('{');
            if (aCssAry.length === 2) {
                selector = aCssAry[0].trim();
                propStr = aCssAry[1];
                propAry = propStr.split(';');
                this._cssCache[selector] = this._cssCache[selector] || {};
                for (j = 0; j < propAry.length; j++) {
                    aPropStr = propAry[j];
                    aPropAry = aPropStr.split(':');
                    if (aPropAry.length === 2) {
                        propName = aPropAry[0].trim();
                        propValue = aPropAry[1];
                        this._cssCache[selector][propName] = propValue;
                    }
                }
            }
        }
    };

    /**
     * update css content of this._options according to css cache
     */
    View.prototype._updateCssOfOptions = function() {
        if (!this._cssCache) {
            return;
        }
        var newCssText = "", sel, name, value;
        for (sel in this._cssCache) {
            if (this._cssCache.hasOwnProperty(sel)) {
                newCssText += ' '+ sel + '{';
                for (name in this._cssCache[sel]) {
                    if (this._cssCache[sel].hasOwnProperty(name)) {
                        newCssText += name + ':' + this._cssCache[sel][name] +';';
                    }
                }
                newCssText += '}';
            }
        }
        if (newCssText !== "") {
            this._options.css = this._options.css ? this._options.css + newCssText : newCssText;
        }
    };

    View.prototype.cssProperty = function(selector, propName, propValue) {
        if (this._chart) {
            if (arguments.length > 2) {
                this._updateCssCache(selector, propName, propValue);
                return this._chart.cssProperty(selector, propName, propValue);
            } else if (arguments.length === 2) {
                return this._chart.cssProperty(selector, propName);
            }
        }

        return this;
    };

    View.prototype.selectedPropertyZone = function(propertyZone) {
        if (this._chart) {
            if (arguments.length > 0) {
                return this._chartProxy.set('selectedPropertyZone', propertyZone);
            } else {
                return this._chartProxy.get('selectedPropertyZone');
            }
        }

        return this;
    };

    View.prototype.onEventMap = function(onEventMap) {
        if (arguments.length > 0) {
            this._onEventMap = onEventMap;
            return this;
        } else {
            return this._onEventMap;
        }
    };

    View.prototype.showChartLayer = function () {
        this._chartLayer$.css("visibility", "");
    };

    View.prototype.hideChartLayer = function () {
        this._chartLayer$.css("visibility", "hidden");
    };


    View.prototype._postVizProcess = function(options) {
        if (!!this._chart.on) {
            Object.keys(this._onEventMap).forEach($.proxy(function(key) {
                var callback = this._onEventMap[key];
                this._chart.on(key, callback);
            }, this));
        }

        this._chart.on("initialized.view", $.proxy(function() {
            this._dispatchEvent(new Event("ChartInstance_Initialized", this, {
                chartLayer : this._chartLayer$[0],
                requestMorphing : this._requestMorphing
            }));
            var data = this.data();

            this._requestMorphing = false;
        }, this));
    };

    View.prototype._offEvent = function() {
        if (!!this._chart.off) {
            Object.keys(this._onEventMap).forEach($.proxy(function(key) {
                var callback = this._onEventMap[key];
                this._chart.off(key, callback);
            }, this));
        }
    };

    View.prototype._getCssProperties = function(css, properties) {
        var result = null;
        for (var i = 0; i < properties.length; ++i) {
            var value = this._chart.cssProperty(css, properties[i]);
            if (value != null) {
                result = result || {};
                result[properties[i]] = value;
            }
        }
        return result;
    };

    View.prototype.queryProperties = function(options) {
        if (!options || !options.css) {
            return this.properties();
        }

        var properties = options.css.properties;
        var selector = options.css.selector;
        var result = null;
        if (utils.isArray(selector)) {
            for (var i = 0; i < selector.length; ++i) {
                result = this._getCssProperties(selector[i], properties);
                if (result) {
                    break;
                }
            }
        } else {
            result = this._getCssProperties(selector, properties);
        }
        return result;
    };

    View.prototype.updateProperties = function(options) {
        if (!options) {
            return;
        }
        if (options.css && options.css.selector) {
            var css;
            var selector = options.css.selector;
            var value = options.css.value;
            var a = value.split('font-size');
            if (a.length === 2) {
                // Add important tag to font-size, since the priority is higher than uxScale in ChartView
                a[1] = a[1].replace(/;/, '!important;');
                value = a.join('font-size');
            }

            if (utils.isArray(selector)) {
                css = "";
                for (var i = 0; i < selector.length; ++i) {
                    css += selector[i] + value;
                }
            } else {
                css = selector + value;
            }
            this._helper.vizCss(css);
        } else if (options.hasOwnProperty("properties")) {
            this._addChangedProperties(options.properties);
            // the value of disableDispatchEvent is true the UserInteractionComplete Event will be sent then the vizProperties function will be called
            if (options.hasOwnProperty("disableDispatchInteractionCompleteEvent") && options.disableDispatchInteractionCompleteEvent) {
                this._helper.vizProperties(options.properties);
            }
            else {
                this._helper.propertiesWithEvents(options.properties);
            }
        }
    };

    // check whether the properties change needs morphing. Only show/hide title, legend need morphing
    View.prototype._needMorphing = function(newProperties) {
        var currentProperties = this._chartProxy.get('properties', this._options.properties);
        if (newProperties.title && newProperties.title.visible !== undefined && currentProperties.hasOwnProperty("title") && currentProperties.title.visible !== newProperties.title.visible) {
            return true;
        }
        if (newProperties.legend && newProperties.legend.visible !== undefined && currentProperties.hasOwnProperty("legend") && currentProperties.legend.visible !== newProperties.legend.visible) {
            return true;
        }
        //TODO add more morphing situation
        return false;
    };
    View.prototype.store = function() {

    };
    View.prototype.restore = function() {

    };

    View.prototype.reset = function() {

    };
    
    View.prototype._checkBehaviorType = function(properties) {

    };
    
    View.prototype.runtimeScales = function() {
        return [];
    };
    
    View.prototype.sharedRuntimeScales = function(value) {
        if (arguments.length < 1){
            return [];
        } else {
            return this;
        }
        
    };

    return View;
});

define('sap/viz/controls/common/property/VizPropertyZone',['sap/viz/controls/common/utils/Utils'], function(Utils) {
    var VizPropertyZone = function(type, context, extraContext, measureNames) {
        this._type = type;
        this._context = context;
        this._extraContext = extraContext;
        this._measureNames = measureNames;
        if (Utils.isArray(measureNames)) {
            this._dimensionContext = this._filterDimensionContext(measureNames.concat('_id'));
        }
    };

    VizPropertyZone.CHART_AREA = 'CHART_AREA';
    VizPropertyZone.CHART_TITLE = 'CHART_TITLE';
    VizPropertyZone.PLOT_AREA = 'PLOT_AREA';
    VizPropertyZone.GRID_LINE = 'GRID_LINE';
    VizPropertyZone.LEGEND = 'LEGEND';
    VizPropertyZone.CATEGORY_AXIS = 'CATEGORY_AXIS';
    VizPropertyZone.CATEGORY_AXIS_TITLE = 'CATEGORY_AXIS_TITLE';
    VizPropertyZone.CATEGORY_AXIS2 = 'CATEGORY_AXIS2';
    VizPropertyZone.CATEGORY_AXIS2_TITLE = 'CATEGORY_AXIS2_TITLE';
    VizPropertyZone.VALUE_AXIS = 'VALUE_AXIS';
    VizPropertyZone.VALUE_AXIS_TITLE = 'VALUE_AXIS_TITLE';
    VizPropertyZone.VALUE_AXIS2 = 'VALUE_AXIS2';
    VizPropertyZone.VALUE_AXIS2_TITLE = 'VALUE_AXIS2_TITLE';
    VizPropertyZone.DATA_POINT = 'DATA_POINT';
    VizPropertyZone.DATA_POINT_MARKER = 'DATA_POINT_MARKER';
    VizPropertyZone.DATA_LABEL = 'DATA_LABEL';
    VizPropertyZone.LINE = 'LINE';
    VizPropertyZone.COMBINATION_LINE = 'COMBINATION_LINE';
    VizPropertyZone.ROW_AXIS = 'ROW_AXIS';
    VizPropertyZone.ROW_AXIS_TITLE = 'ROW_AXIS_TITLE';   
    VizPropertyZone.COLUMN_AXIS = 'COLUMN_AXIS';
    VizPropertyZone.COLUMN_AXIS_TITLE = 'COLUMN_AXIS_TITLE';
    VizPropertyZone.ROW_AXIS2 = 'ROW_AXIS2';
    VizPropertyZone.ROW_AXIS2_TITLE = 'ROW_AXIS2_TITLE';    
    VizPropertyZone.COLUMN_AXIS2 = 'COLUMN_AXIS2';
    VizPropertyZone.COLUMN_AXIS2_TITLE = 'COLUMN_AXIS2_TITLE';
    VizPropertyZone.TRELLIS_PLOT_AREA = 'TRELLIS_PLOT_AREA';
    VizPropertyZone.DIMENSION_LABEL = 'DIMENSION_LABEL';

    VizPropertyZone.prototype.type = function(value) {
        if (arguments.length > 0) {
            this._type = value;
            return this;
        } else {
            return this._type;
        }
    };

    VizPropertyZone.prototype.context = function(value) {
        if (arguments.length > 0) {
            this._context = value;
            if (Utils.isArray(this._measureNames)) {
               this._dimensionContext = this._filterDimensionContext(this._measureNames.concat('_id'));
            }
            return this;
        } else {
            return this._context;
        }
    };

    VizPropertyZone.prototype.dimensionContext = function () {
        return this._dimensionContext;
    };

    VizPropertyZone.prototype.getDimensionContext = function () {
        if (this._selectAllData) {//data context is undefined, which means it is all data's context
            return undefined;
        }
        if (this._seriesData) {// seriesData can be an empty object if no binding in regionColor
            for (var i in this._seriesData) {
                if (this._seriesData.hasOwnProperty(i)) {
                    return this._seriesData;
                }
            }
            return undefined;
        }
        return this._dimensionContext;
    };

    VizPropertyZone.prototype._filterDimensionContext = function(array) {
        var ret;
        for (var key in this._context) {
            if (!ret) {
                ret = {};
            }
            var isDimension = true;
            for (var i = 0; i < array.length; i++) {
                if (key === array[i]) {
                    array.splice(i, 1);
                    isDimension = false;
                    break;
                }
            }
            if (!isDimension) {
                continue;
            }
            ret[key] = this._context[key];
        }
        return ret;
    };
    
    VizPropertyZone.prototype.extraContext = function(value) {
        if (arguments.length > 0) {
            this._extraContext = value;
            return this;
        } else {
            return this._extraContext;
        }
    };

    VizPropertyZone.prototype.stackContext = function(value) {
        if (arguments.length > 0) {
            this._stackContext = value;
            return this;
        } else {
            return this._stackContext;
        }
    };

    VizPropertyZone.prototype.seriesContext = function(series) {
        if (arguments.length > 0) {
            this._seriesData = series;
            return this;
        } else {
            return this._seriesData;
        }
    };
    
    VizPropertyZone.prototype.selectAllData = function(selectAllData) {
        if (arguments.length > 0) {
            this._selectAllData = selectAllData;
            return this;
        } else {
            return this._selectAllData;
        }
    };

    return VizPropertyZone;
});

// @formatter:off
define('sap/viz/controls/chart/views/ChartView',[
    'jquery',
    'sap/viz/controls/common/constants/FeedConst',
    'sap/viz/controls/common/config/GlobalConfig',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/constants/MapProviderConst',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/utils/DatasetUtil',
    'sap/viz/controls/common/utils/TrellisUtils',
    'sap/viz/controls/common/utils/VizUtils',
    'sap/viz/controls/common/utils/FakeDataUtils',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/chart/views/AxisSizeAdjustHelper',
    'sap/viz/controls/chart/views/AxisSplitter',
    'sap/viz/controls/chart/views/ChartEvent',
    'sap/viz/controls/chart/views/DataPointFinder',
    'sap/viz/controls/chart/views/DropZone',
    'sap/viz/controls/chart/views/EditAxisView',
    'sap/viz/controls/chart/ChartConfig',
    'sap/viz/controls/chart/views/PropertyZone',
    'sap/viz/controls/chart/views/View',
    'sap/viz/controls/common/utils/IncompleteGhost',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/property/VizPropertyZone',
    'sap/viz/controls/common/utils/binding/BindingGeneratorFactory'
],
function($, FeedConst, GlobalConfig, ChartConst, MapProviderConst, FeedItemType, FeedUtils, LangManager,
    OOUtil, utils, ChartTypeUtil, DatasetUtil, TrellisUtils, VizUtils, FakeDataUtils, CSSConst,
    AxisSizeAdjustHelper, AxisSplitter, ChartEvent, DataPointFinder, DropZone, EditAxisView,
    ChartConfig, PropertyZone, View, IncompleteGhost, AnalyticalType, VizPropertyZone, BindingGeneratorFactory) {
// @formatter:on
    /**
     * ChartView View represent a CVOM chart.
     */
    var ChartView = function(div/*HTMLDivElement*/, options, libFolderPath, chartModelProvider) {
        ChartView.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.view.ChartView";

        this._morphingLayer$ = null;
        this._supportMorphing = true;
        this._requestMorphing = false;
        // viz morpher
        this._vizMorpher = null;

        options = options||{};
        this._enablePropertyZone = false;
        // this._useBuiltInPropertyZoneInteraction = options.useBuiltInPropertyZoneInteraction;
        this._useDefaultChartSizeForTrellis = options.useDefaultChartSizeForTrellis;
        this._createChildren();
    };

    OOUtil.extend(ChartView, View);

    var SupportedZoneNames = ["legend", "sizeLegend"];

    ChartView.prototype._createChildren = function() {
        this._createChartHolder();
        this._createChartLayer();

        this._editAxisView = new EditAxisView(this._chartHolder$.get(0), null);
        this._editAxisView.addEventListener(EditAxisView.AxisScaleChanged, this._axisScalerChangedHandler, this);

        this._axisSplitter = new AxisSplitter(this._chartHolder$.get(0), $.proxy(this.properties, this), $.proxy(this._getPropertyZone, this));
        this._axisSplitter.addEventListener(AxisSplitter.AxisSplitChanged, this._axisSplitChangedHandler, this);

        this._createDescriptionLayer();
        this._createLoadingIcon();
        this._createWarningDialog();

        this._createDropZone();
        var chartDiv$ = this._chartLayer$;

        this._propertyZone = new PropertyZone(chartDiv$.get(0), $.proxy(this._getPropertyZone, this));
        this._propertyZone.addEventListener(PropertyZone.SELECT_ZONE, $.proxy(function(e) {
            this._dispatchEvent(new ChartEvent(ChartEvent.SELECT_PROPERTY_ZONE, this, e.data));
        }, this));

        this._uxScaleIndex = null;
    };

    ChartView.prototype.getZoneName = function(point) {
        if (!point || !this._chart) {
            return null;
        }
        var zoneName = this._getZoneName(point);
        if (zoneName) {
            if (VizUtils.isValueAxis(this._options.type, zoneName)) {
                return zoneName;
            } else {
                for (var i = 0; i < SupportedZoneNames.length; i++) {
                    if (SupportedZoneNames[i] === zoneName) {
                        return zoneName;
                    }
                }
            }
        }
        return null;
    };

    ChartView.prototype._getZoneName = function(point) {
        var zones = this._getPropertyZone();
        for (var i = 0; i < zones.length; i++) {
            var areas = zones[i].bound;
            var name = zones[i].name;
            for (var n = 0; n < areas.length; n++) {
                if (areas[n][0][0] < point.x && areas[n][1][0] > point.x && areas[n][1][1] < point.y && areas[n][2][1] > point.y) {
                    return name;
                }
            }
        }
        return null;
    };

    ChartView.prototype.setAxisScale = function(axis) {
        if (this._chart) {
            var type = this._options.type;
            this._editAxisView.show(type, axis, this._chartProxy.get('properties', this._options.properties));
        }
    };

    ChartView.prototype._axisScalerChangedHandler = function(e) {
        if (!this._chart) {
            return;
        }
        this._requestMorphing = true;
        this._helper.propertiesWithEvents(e.data);
    };

    ChartView.prototype._axisSplitChangedHandler = function(e) {
        var categoryScaleProperties = AxisSizeAdjustHelper(this._chart, this._getFeedingZone(), e.data.axisName, e.data.direction, e.data.offset);
        if (categoryScaleProperties) {
            this._helper.propertiesWithEvents(categoryScaleProperties);
        }
    };

    ChartView.prototype._titleText = function(value) {
        try {
            if (this._chart) {
                if (!this.properties().title) {
                    return this;
                }
                if (arguments.length > 0) {
                    if (value != this.properties().title.text) {
                        this._dispatchEvent(new ChartEvent(ChartEvent.TITLE_CHANGED, this, {
                            text : value
                        }));
                    }
                    return this;
                } else {
                    var titleText = this.properties().title.text;
                    return titleText;
                }
            } else {
                throw LangManager.get('VIZ_CHART_UPDATE_PROPERTIES_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
            }
        } catch (error) {
            //if(console) {
            //    console.log("Failed to update chart data : " + error);
            //  }
            throw LangManager.get('VIZ_CHART_UPDATE_PROPERTIES_FAILED') + error;
        }
    };

    ChartView._ZoneMap = {
        xAxis : {
            text : "VIZ_COMMON_XAXIS"
        },
        xAxis2 : {
            text : "VIZ_COMMON_XAXIS"
        },
        yAxis : {
            text : "VIZ_COMMON_YAXIS",
            rotate : true
        },
        yAxis2 : {
            text : "VIZ_COMMON_YAXIS",
            rotate : true
        }
    };
    ChartView._ZoneMap[FeedConst.ID_TRELLIS_COLUMN] = {
        text : "VIZ_COMMON_COLUMNS"
    };
    ChartView._ZoneMap[FeedConst.ID_TRELLIS_ROW] = {
        text : "VIZ_COMMON_ROWS",
        rotate : true
    };

    /**
     * Check whether zone is null or the bound size is empty
     * @param {Object} zone
     * @returns {Boolean}
     */
    ChartView.prototype._isEmptyZone = function(zone) {
        if (!zone || !zone.bound) {
            return true;
        }

        var area = zone.bound[0];
        if (!area) {
            return true;
        }

        var width = area[2][0] - area[0][0];
        var height = area[2][1] - area[0][1];
        if (width < 1 || height < 1) {
            return true;
        }
        return false;
    };
    /**
     * update text info
     * @param {Object} zone
     */
    ChartView.prototype._updateTextInfo = function(zone) {
        if (!zone) {
            return;
        }
        //update text and rotate
        for (var n = 0; n < zone.length; n++) {
            var item = ChartView._ZoneMap[zone[n].name];
            if (item) {
                zone[n].text = LangManager.get(item.text);
                zone[n].rotate = item.rotate;
            }
        }
    };

    /**
     * Get title zone for chart instance.
     * @returns {Array}
     */
    ChartView.prototype.getTitleZone = function() {
        if (!this._chart) {
            return [];
        }

        var thisChartId = this._options.type;

        var zone;
        try {
            zone = this._chartProxy.get('propertyZone', []);
        } catch(error) {
            return [];
        }
        var titleZone = [];
        for (var i = 0; i < zone.length; i++) {
            if (zone[i].name == 'title') {
                titleZone = zone[i].bound[0];
                break;
            }
        }
        return titleZone;
    };
    /**
     * Get feeding zone for chart instance. If multi does not exist, we will use chart padding to create them.
     * @returns {Array}
     */
    ChartView.prototype._getFeedingZone = function() {
        if (!this._chart) {
            return [];
        }

        var thisChartId = this._options.type;

        var zone;
        try {
            zone = this._chartProxy.get('feedingZone', []);
        } catch(error) {
            return [];
        }

        if (!ChartTypeUtil.supportMultiChart(thisChartId)) {
            this._updateTextInfo(zone);
            return zone;
        }

        var isMultiChart = ChartTypeUtil.isMultipleChart(thisChartId);
        var column = null;
        var row = null;

        if (isMultiChart) {
            for (var i = zone.length - 1; i >= 0; i--) {
                var zoneName = zone[i].name;
                if (zoneName === 'multiplier') {
                    column = {
                        name : FeedConst.ID_TRELLIS_COLUMN,
                        bound : [zone[i].bound[0]],
                        feedDef : zone[i].feedDef
                    };
                    row = {
                        name : FeedConst.ID_TRELLIS_ROW,
                        bound : [zone[i].bound[1]],
                        feedDef : zone[i].feedDef
                    };
                    zone.splice(i, 1);
                } else if (zoneName !== "mainPlot" && zoneName !== "legend") {
                    if (TrellisUtils.providerName(thisChartId) === TrellisUtils.MULTIPLE) {
                        //For multi chart, we use mainPlot&legend
                        zone.splice(i, 1);
                    }
                }
            }
        }
        //remove row and column if disable trellis by uiconfig
        if (!this._enableTrellis) {
            this._updateTextInfo(zone);
            return zone;
        }

        //check multiXAxis&multiYAxis size
        if (this._isEmptyZone(column)) {
            column = null;
        }
        if (this._isEmptyZone(row)) {
            row = null;
        }

        var padding = this._padding;
        var feedDef = {
            "id" : 'multiplier',
            "name" : "ChartView Multiplier",
            "type" : FeedItemType.DIMENSION,
            "min" : 1,
            "max" : 1,
            "aaIndex" : 1,
            "acceptMND" : 0
        };
        var bound;
        if (!column) {
            //add multiXAxis zone in chart top padding
            bound = [[[padding, 0], [this._size.width - padding, 0], [this._size.width - padding, padding], [0, padding]]];
            column = {
                "name" : FeedConst.ID_TRELLIS_COLUMN,
                "feedDef" : [feedDef],
                "bound" : bound
            };
        }
        if (!row) {
            //add multiYAxis zone in chart left padding
            bound = [[[0, padding], [padding, padding], [padding, this._size.height - padding], [0, this._size.height - padding]]];
            row = {
                "name" : FeedConst.ID_TRELLIS_ROW,
                "feedDef" : [feedDef],
                "bound" : bound
            };
        }

        zone.push(column, row);
        this._updateTextInfo(zone);
        return zone;
    };

    /**
     * update morphing to use current viz as base
     */
    ChartView.prototype._updateMorphingSnapshot = function() {
        if (this._canMorphing() && this._hasChartInstance && this._vizMorpher && !this._vizMorpher.isPlaying()) {
            this._vizMorpher.morphVizType(null, -1);
        }
    };
    /**
     * Set target.path.property to value if property is not specified.
     */
    ChartView.prototype._setDefaultValue = function(target, path, property, value) {
        var properties = path.split('.');
        var result = target;
        for (var i = 0; i < properties.length; i++) {
            result[properties[i]] = result[properties[i]] || {};
            result = result[properties[i]];
        }
        if (!result.hasOwnProperty(property)) {
            result[property] = value;
        }
    };
    /**
     * Apply default properties to options.properties.
     */
    ChartView.prototype._applyDefaultProperties = function(options) {
        options = options || {};
        options.properties = options.properties || {};
        this._setDefaultValue(options.properties, 'background.border.left', 'visible', false);
        this._setDefaultValue(options.properties, 'background.border.top', 'visible', false);
        this._setDefaultValue(options.properties, 'background.border.right', 'visible', false);
        this._setDefaultValue(options.properties, 'background.border.bottom', 'visible', false);

        return options;
    };
    function getDimCount(data, feedItemValues, mesuareValuesCount) {
        if (feedItemValues == null || feedItemValues.length === 0) {
            return 1;
        }

        var valueTag = [];
        var result = 1;
        var index = 0;
        var hasMND = false;
        for (var n = 0; n < feedItemValues.length; n++) {
            if (feedItemValues[n].type() === AnalyticalType.HIERARCHY) {
                var hierarchyLevels = feedItemValues[n].hierarchyLevels();
                for (var j = 0; j < hierarchyLevels.length; j++) {
                    if (hierarchyLevels[j].selected()) {
                        break;
                    }
                    index++;
                }
            } else if (feedItemValues[n].type() === AnalyticalType.MND) {
                hasMND = true;
                continue;
            }
            if (index < data.length) {
                var values = data[index].values;
                valueTag[n] = {};
                var itemCount = 0;
                for (var i = 0; i < values.length; i++) {
                    if (!valueTag[n].hasOwnProperty(values[i])) {
                        valueTag[n][values[i]] = true;
                        itemCount++;
                    }
                }
                result *= itemCount;
                index++;
            }
        }

        if (hasMND) {
            result *= mesuareValuesCount;
        }

        return result;
    }
    ChartView.prototype._getRowColumn = function(analysisAxis, mesuareValuesCount) {
        var result = {
            row : 1,
            column : 1
        };

        if (!analysisAxis || analysisAxis.length === 0) {
            return result;
        }

        var multiplierAxis = analysisAxis[0].data;
        if (!multiplierAxis || multiplierAxis.length === 0) {
            return result;
        }

        var rowCount = 0;
        var feedItemValuesRow = null;
        var feedItemsValuesColumn = null;
        var feedItems = this._chartModelProvider().feedingItems();
        for (var i = 0; i < feedItems.length; i++) {
            if (feedItems[i].id() === FeedConst.ID_TRELLIS_ROW) {
                feedItemValuesRow = feedItems[i].values();
                for (var j = 0; j < feedItemValuesRow.length; j++) {
                    if (feedItemValuesRow[j].type() === AnalyticalType.HIERARCHY) {
                        var hierarchyLevels = feedItemValuesRow[j].hierarchyLevels();
                        for (var k = 0; k < hierarchyLevels.length; k++) {
                            rowCount++;
                            if (hierarchyLevels[k].selected()) {
                                break;
                            }
                        }
                    } else if (feedItemValuesRow[j].type() !== AnalyticalType.MND) {
                        rowCount++;
                    }
                }
            } else if (feedItems[i].id() === FeedConst.ID_TRELLIS_COLUMN) {
                feedItemsValuesColumn = feedItems[i].values();
            }
        }

        result.row = getDimCount(multiplierAxis.slice(0, rowCount), feedItemValuesRow, mesuareValuesCount);
        result.column = getDimCount(multiplierAxis.slice(rowCount), feedItemsValuesColumn, mesuareValuesCount);

        return result;
    };

    ChartView.prototype._getMinSize = function() {
        var width = this._size.width;
        var height = this._size.height;
        var options = this._options;
        var result = {
            width : width,
            height : height
        };
        if (!this._useDefaultChartSizeForTrellis && ChartTypeUtil.isMultipleChart(options.type) && TrellisUtils.providerName(options.type) === TrellisUtils.MULTIPLE) {
            if (!options.data || !options.data.data()) {
                //Do not update size if we use default data
                return result;
            }

            var measureValuesGroup = options.data.data().measureValuesGroup;
            var mesuareValuesCount = 0;
            for (var i = 0; i < measureValuesGroup.length; i++) {
                mesuareValuesCount += measureValuesGroup[i].data.length;
            }

            var rowColumn = this._getRowColumn(options.data.data().analysisAxis, mesuareValuesCount);
            //For Multi-chart, min size for one cell is 200*200.
            var minWidth = rowColumn.column * 200;
            var minHeight = rowColumn.row * 200;
            if (width < minWidth) {
                width = minWidth;
                result['overflow-x'] = 'auto';
            }
            if (height < minHeight) {
                height = minHeight;
                result['overflow-y'] = 'auto';
            }
        }
        result.width = width;
        result.height = height;
        return result;
    };

    ChartView.prototype._updateChartSize = function(applyToChart) {
        var minSize = ChartView.superclass._updateChartSize.apply(this, arguments);
        this._updateUXScale();
        return minSize;
    };

    ChartView.prototype._destroyChartInstance = function() {
        ChartView.superclass._destroyChartInstance.apply(this, arguments);
        this._axisSplitter.reset();
    };
    /**
     * create chart instance
     */
    ChartView.prototype._createChartInstance = function() {
        this._hasChartInstance = false;

        var options = this._options;
        options = this._applyDefaultProperties(options);
        // if (this._useBuiltInPropertyZoneInteraction === true) {
            // options.properties = options.properties || {};
            // options.properties.interaction = options.properties.interaction || {};
            // options.properties.interaction.selectability = options.properties.interaction.selectability || {};
            // options.properties.interaction.selectability.plotLassoSelection = false;
            // options.properties.interaction.selectability.mode = "none";
// 
            // options.properties.tooltip = options.properties.tooltip || {};
            // options.properties.tooltip.visible = false;
        // }

        var chartDiv$ = this._chartLayer$;
        var descriptionDiv$ = this._descriptionLayer$;
        var chartHolderDiv$ = this._chartHolder$;

        var vizType = options.type;


        this._destroyChartInstance();

        //TODO: make sure the data is valid.
        if (options.data === null || options.data === undefined) {
            //invalid data
            return;
        }

        var showNegativeValues = false;
        if (options.properties && options.properties.plotArea && options.properties.plotArea.showNegativeValues === true) {
            showNegativeValues = true;
        }
        var feedItems = this._chartModelProvider().feedingItems();
        if (!showNegativeValues && DatasetUtil.hasNegativeMeasureValue(vizType, feedItems, options.data)) {
            this._showWarningDialog();
        }

        if (!options.properties) {
            options.properties = {};
        }

        try {
            if (!this._enableTrellis && ChartTypeUtil.isMultipleChart(vizType)) {
                this._propertyZone.updateZone(false);
                return;
            }

            if (ChartTypeUtil.supportAnimation(vizType)) {
                if (!options.properties.plotArea) {
                    options.properties.plotArea = {};
                }
                if (!options.properties.plotArea.animation) {
                    options.properties.plotArea.animation = {};
                }
                options.properties.plotArea.animation.dataLoading = options.properties.plotArea.animation.dataLoading === false ? false:true;
                options.properties.plotArea.animation.dataUpdating = options.properties.plotArea.animation.dataUpdating === false ? false:true;
                options.properties.plotArea.animation.resizing = options.properties.plotArea.animation.resizing === false ? false:true;
                if (!options.properties.geoContainer) {
                    options.properties.geoContainer = {};
                }
            }
            // send chart changing event
            this._dispatchEvent(new ChartEvent(ChartEvent.CHART_CHANGING, this, vizType));
            var hasError = this._updateDescriptionByOptions(options);
            var properties = options.properties;
            if (properties) {
                this._resetChangedProperties();
                this._addChangedProperties(properties);
            }
            
            if (!hasError) {
                // need to show and restore because chartInstance need the layer not be hidden
                var originalValue = this._chartLayer$.css("visibility");
                this._chartLayer$.css("visibility", "visible");
                var merged = this._mergeUXScale(properties, options.css);
                this._chart = this._chartProxy.execute('sap.viz.api.core.createViz', {
                    type : vizType,
                    data : options.data,
                    feeding : options.feeding,
                    properties : merged ? merged.properties : properties,
                    css : merged ? merged.css : options.css,
                    events : options.events,
                    container : chartDiv$.get(0)
                });

                this._chartLayer$.css("visibility", originalValue);

                if (this._chart) {
                    this._postVizProcess(options);
                }
            }

            
        } catch (error) {
            //if(console) {
            //    console.log("Failed to create chart : " + error);
            //  }
            var errorMsg = LangManager.get('VIZ_CHART_CREATE_CHART_FAILED') + error;
            this._propertyZone.updateZone(false);
            if (ChartTypeUtil.isValid(vizType)) {
                this._updateDescription(utils.substitute(LangManager.get("VIZ_CHART_INVALID_VIZ_TYPE"), vizType));
            } else {
                this._updateDescription(errorMsg);
            }
            // clean up
            chartDiv$.html("");
            this._chart = null;
            this._hasChartInstance = false;
            throw errorMsg;
        }
    };

    ChartView.prototype.setCloseAnimation = function (options) {
        $.extend(true, options, {
            properties: { plotArea: { animation: {
                dataLoading: false,
                dataUpdating: false,
                resizing: false
            }}}
        });
    };
    /**
     * Post process after create viz instance.
     */
    ChartView.prototype._postVizProcess = function(options) {
        ChartView.superclass._postVizProcess.apply(this, arguments);

        var triggerCVOM = $.proxy(function(type, data) {
            this._dispatchEvent(new ChartEvent(ChartEvent.TRIGGER_CVOM_EVENT, this, {
                type : type,
                data : data
            }));
        }, this);

        this._chart.on("lassoStart.chartview", $.proxy(function() {
            this._axisSplitter.deactive();
        }, this));
        this._chart.on("lassoEnd.chartview", $.proxy(function() {
            this._axisSplitter.active();
        }, this));
        this._chart.on("initialized.chartview", $.proxy(function(data) {
            if (this._isFeedsValid) {
                this._axisSplitter.init(options.type);
            }
            var enablePropertyZone = this._enablePropertyZone && this._isFeedsValid;
            this._propertyZone.updateZone(enablePropertyZone);

            triggerCVOM("initialized", data);
        }, this));

        var _this = this;
        this._chart.on("selectData.chartview", function(selectData) {
            //TODO CVOM's bug, wait for their fix, then delete if
            if (_this._options.type !== ChartConst.TYPE_NETWORK) {
                // return current complete selection.
                _this._dispatchEvent(new ChartEvent(ChartEvent.CHANGED_SELECTED_DATA, this));

                triggerCVOM("selectData", selectData);
            }
        });

        this._chart.on("deselectData.chartview", function(deselectData) {
            //TODO CVOM's bug, wait for their fix, then delete if
            if (_this._options.type !== ChartConst.TYPE_NETWORK && _this._options.type !== ChartConst.TYPE_TREE) {
                // return current complete selection.
                _this._dispatchEvent(new ChartEvent(ChartEvent.CHANGED_SELECTED_DATA, this));

                triggerCVOM("deselectData", deselectData);
            }
        });

        this._chart.on("showTooltip.chartview", function(data) {
            triggerCVOM("showTooltip", data);
        });

        this._chart.on("hideTooltip.chartview", function(data) {
            triggerCVOM("hideTooltip", data);
        });

        this._chart.on('contextualData.chartview', $.proxy(function(event) {
            this._dispatchEvent(new ChartEvent(ChartEvent.CONTEXT_MENU_TRIGGERED, this, event));
        }, this));

        this._hasChartInstance = true;

        this._dispatchEvent(new ChartEvent(ChartEvent.CHART_CHANGED, this, this._chart));
    };

    ChartView.prototype.getTemplateId = function(dataset) {
        var data = dataset || this.data();
        if (VizUtils.hasFakeData(data)) {
            return View.TEMPLATE_INCOMPLETE;
        } else {
            return this._templateId;
        }

    };

    ChartView.prototype.size = function(size) {
        if (arguments.length > 0) {
            ChartView.superclass.size.apply(this, arguments);

            if (this._dropZone) {
                this._dropZone.size(this._size);
            }

            this._propertyZone.size(this._size);

            // take current morphing snapshot,
            // this is workaround, may need to update snapshot in viz initialized.* event,
            // and check whether the sequence is after resize

            return this;
        } else {
            return ChartView.superclass.size.apply(this, arguments);
        }
    };

    /**
     * Update chart data.
     * @param {Object} data
     */
    ChartView.prototype.data = function(data, disableMorphing) {
        if (arguments.length > 0) {
            if (!disableMorphing) {
                this._requestMorphing = true;
            }
        }
        return ChartView.superclass.data.apply(this, arguments);
    };
    /**
     * Update chart feeding.
     * @param {Object} feeding
     */
    ChartView.prototype.feeding = function(feeding, disableMorphing) {
        try {
            if (this._chart) {
                if (arguments.length > 0) {
                    if (!disableMorphing) {
                        this._requestMorphing = true;
                    }
                    this._options.feeding = feeding;
                    this._chartProxy.set('feeding', feeding);
                    return this;
                } else {
                    return this._chartProxy.get('feeding', this._options.feeding);
                }
            } else {
                throw LangManager.get('VIZ_CHART_UPDATE_FEEDING_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
            }
        } catch (error) {
            //if(console) {
            //    console.log("Failed to update chart feeding : " + error);
            //  }
            throw LangManager.get('VIZ_CHART_UPDATE_FEEDING_FAILED') + error;
        }
    };
    /**
     * Update chart css.
     * @param {Object} css
     */
    ChartView.prototype.css = function(css, disableMorphing) {
        try {
            if (arguments.length > 0) {
                if (!disableMorphing) {
                    this._requestMorphing = false;
                }
                // update css cache according to new css before apply new css
                this._updateCssCacheByNewCss(css);
                // update css by new css
                this._options.css = css;
                if (this._chart) {
                    this._chartProxy.set('css', css);
                    return this;
                } else {
                    throw LangManager.get('VIZ_CHART_UPDATE_CSS_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
                }
            } else {
                return this._chartProxy.get('css', this._options.css);
            }
        } catch (error) {
            //if(console) {
            //    console.log("Failed to update chart css : " + error);
            //  }
            throw LangManager.get('VIZ_CHART_UPDATE_CSS_FAILED') + error;
        }
    };
    /**
     * Update chart properties.
     * @param {Object} properties
     */
    ChartView.prototype.properties = function(properties, disableMorphing) {
        try {
            if (arguments.length > 0) {
                if (!disableMorphing && this._needMorphing(properties)) {
                    this._requestMorphing = true;
                }
                this._addChangedProperties(properties);
                this._options.properties = properties;
                if (this._chart) {
                    this._chartProxy.set('properties', properties);
                    return this;
                } else {
                    throw LangManager.get('VIZ_CHART_UPDATE_PROPERTIES_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
                }
            } else {
                return this._chartProxy.get('properties', this._options.properties);
            }
        } catch (error) {
            //if(console) {
            //    console.log("Failed to update chart properties : " + error);
            //  }
            throw LangManager.get('VIZ_CHART_UPDATE_PROPERTIES_FAILED') + error;
        }
    };
    /**
     * Update chart with updated options.
     * @param {Object} updates
     */
    ChartView.prototype.update = function(updates, disableMorphing) {
        if (!disableMorphing) {
            this._requestMorphing = true;
        }

        return ChartView.superclass.update.apply(this, arguments);
    };
    /**
     * Get chart feeding zone.
     * @return {Object}
     */
    ChartView.prototype.feedingZone = function() {
        try {
            if (this._chart) {
                return this._chartProxy.get('feedingZone', []);
            } else {
                throw LangManager.get('VIZ_CHART_FEEDINGZONE_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
            }
        } catch (error) {
            //if(console) {
            //    console.log("Failed to feedingZone chart : " + error);
            //  }
            throw LangManager.get('VIZ_CHART_FEEDINGZONE_FAILED') + error;
        }
    };

    /*
     * Get current property zones of chart instance
     */
    ChartView.prototype._getPropertyZone = function() {
        if (!this._chart) {
            return [];
        }
        var zone;
        try {
            zone = this._chartProxy.get('propertyZone', []);
        } catch(error) {
            return [];
        }
        return zone;
    };

    /**
     * Get/set enablePropertyZone
     */
    ChartView.prototype.enablePropertyZone = function(value) {
        if (arguments.length > 0) {
            if (this._enablePropertyZone !== value) {
                this._enablePropertyZone = (value === true);
                //Update property zone, enable property zone only if this flag is true and chart is not goast
                var enabled = this._enablePropertyZone && this._isFeedsValid;
                this._propertyZone.updateZone(enabled);
            }
            return this;
        } else {
            return this._enablePropertyZone;
        }
    };

    ChartView.prototype._getCategoryAxisScale = function(type){
        var result = null;
        var categoryAxis = VizUtils.getCategoryAxis(type);
        if(categoryAxis){
            result = [];
            for(var i=0; i<categoryAxis.length; i++){
                result.push(categoryAxis[i]+".maxSizeRatio");
            }
        }
        return result;
    };

    ChartView.prototype.resetProperties = function(properties, vizType){
        //remove axis scale properties
        if(this._options && this._options.type){
            var type = this._options.type;
            VizUtils.convertValueAxisScale(properties, type, vizType);
            var categoryAxis = this._getCategoryAxisScale(type);
            if(categoryAxis && categoryAxis.length>0){
                VizUtils.removeProperties(properties, categoryAxis);
            }
        }
        return properties;
    };

    ChartView.prototype.copyData = function(type, data) {
        var result = new sap.viz.api.data.CrosstableDataset();
        result.data(utils.clone(data.data()));
        result.info(utils.clone(data.info('additionalData')));

        return result;
    };

    ChartView.prototype.buildFeedings = function(type, dataset, feeds) {
        if(dataset && !ChartTypeUtil.isEmptyData(type, dataset)) {
            var generator = BindingGeneratorFactory.create(type);
            var feeding = generator.generate(feeds);
            if (VizUtils.hasFakeData(dataset) || FeedUtils.isEmptyFeeds(feeds)) {
                feeding = FakeDataUtils.buildFakeFeeding(type, feeding, $.extend(true, {}, dataset.data()));
            }
            return feeding;
        }
    };

    ChartView.prototype.getDataPointsPosition = function(dataPoints){
        return DataPointFinder.findDataPointsPosition(dataPoints);
    };

    ChartView.prototype.getPropertyZones = function() {
        // Always show CHART_AREA currently, add an VizInteractionAdapter for all property zones
        return [new VizPropertyZone(VizPropertyZone.CHART_AREA)];
    };
    
    // Rows
    // 0: Chart width and height Ã¯Â¿0px (unchanged)!
    // 1: 260 Ã¯Â¿Â½Chart width or height < 360px!
    // 2: 160 Ã¯Â¿Â½Chart width or height < 260px!
    // 3: Chart width or height < 160px!
    // Columns
    // 0: Chart padding
    // 1: Chart title, donut chart center label
    // 2: Axis titles, legend titles
    // 3: Dimension / measure values in tooltip
    // 4: Axis labels,dimension / measure names and Ã¢â¬Ëx values selectedÃ¯Â¿Â½in tooltip, legend labels, data labels
    var _UX_SCALES = {
        'padding': ['24px', '16px', '9px', '2px'],
        'font_size_1': ['16px', '15px', '14px', '13px'],
        'font_size_2': ['14px', '13px', '12px', '11px'],
        'font_size_3': ['13px', '12px', '11px', '10px'],
        'font_size_4': ['12px', '11px', '10px', '9px']
    };
    
    
    ChartView.prototype._updateUXScale = function() {
        if (this._chart) {
            var merged = this._mergeUXScale(undefined, undefined, this._options.css);
            if (merged) {
                this._chartProxy.execute('update', merged);
            }
        }
    };
    
    ChartView.prototype._mergeUXScale = function(properties, css, currentCss) {
        var merged;
        var size = this.size();
        var width = size.width, height = size.height;
        // 0: Chart width and height Ã¯Â¿0px (unchanged)!
        // 1: 260 Ã¯Â¿Â½Chart width or height < 360px!
        // 2: 160 Ã¯Â¿Â½Chart width or height < 260px!
        // 3: Chart width or height < 160px!
        var uxScaleIndex = 0;
        if (width < 160 || height < 160) {
            uxScaleIndex = 3;
        } else if (width < 260 || height < 260) {
            uxScaleIndex = 2;
        } else if (width < 360 || height < 360) {
            uxScaleIndex = 1;
        }
        if (this._uxScaleIndex !== uxScaleIndex) {
            var i = this._uxScaleIndex = uxScaleIndex;
            
            merged = {};
            merged.properties = $.extend({}, properties, {
                'general': {
                    'layout': {
                        'padding': parseInt(_UX_SCALES.padding[i],10)
                    }
                }
            });
            currentCss = (css || '') + (currentCss || '');

            var getCssValue = function (selector, style, value) {
                var result;
                var index = currentCss.lastIndexOf(selector);
                if (index !== -1) {
                    var content = currentCss.substring(currentCss.indexOf('{'), currentCss.indexOf('}') + 1);
                    index = content.lastIndexOf(style);
                    if (index !== -1) {
                        var end = content.indexOf(';', index);
                        if (end === -1) {
                            end = content.indexOf('}', index);
                        }
                        content = content.substring(index, end);
                    }
                    var kv = content.split(':');
                    if (kv && kv.length > 1) {
                        return kv[1].trim();
                    }
                }
            };
            var getUxCss = function(selectors, style, value, important) {
                if (utils.isString(selectors)) {
                    selectors = [selectors];
                }
                var exists = false;
                selectors.forEach(function(selector) {
                    if (exists) {
                        return;
                    }
                    var currentValue = getCssValue(selector, style);
                    if (currentValue && currentValue !== value) {
                        exists = true;
                    }
                });

                if (!exists) {
                    return selectors[0] + '{' + style + ':' + value + (important ? '!important' : '') + ';}';
                } else {
                    return '';
                }
            };
            // @formatter:off
            merged.css = (css || '') + getUxCss(['.v-m-root .v-m-title .v-title', '.viz-title-label.v-title'], 'font-size', _UX_SCALES.font_size_1[i], false) +
                    getUxCss(['.v-m-root .v-m-main .v-m-yAxis .v-title', '.viz-axis-title.v-title'], 'font-size', _UX_SCALES.font_size_2[i], false) +
                    getUxCss(['.v-m-root .v-m-main .v-m-xAxis .v-title', '.viz-axis-title.v-title'], 'font-size', _UX_SCALES.font_size_2[i], false) +
                    getUxCss('.v-m-tooltip .v-body-dimension-value', 'font-size', _UX_SCALES.font_size_3[i], true) +
                    getUxCss('.v-m-tooltip .v-body-measure-value', 'font-size', _UX_SCALES.font_size_3[i], true) +
                    getUxCss('.v-m-tooltip .v-body-dimension-label', 'font-size', _UX_SCALES.font_size_4[i], true) +
                    getUxCss('.v-m-tooltip .v-body-measure-label', 'font-size', _UX_SCALES.font_size_4[i], true) +
                    getUxCss('.v-m-tooltip .v-footer-label', 'font-size', _UX_SCALES.font_size_4[i], true) +
                    getUxCss(['.v-m-root .v-m-main .v-m-yAxis .v-label', '.viz-axis-label.v-label'], 'font-size', _UX_SCALES.font_size_4[i], false) +
                    getUxCss(['.v-m-root .v-m-main .v-m-xAxis .v-label', '.viz-axis-label.v-label'], 'font-size', _UX_SCALES.font_size_4[i], false) +
                    getUxCss(['.v-m-root .v-m-main .v-m-datalabel .v-datalabel', '.v-datalabel'], 'font-size', _UX_SCALES.font_size_4[i], false) +
                    getUxCss(['.v-m-root .v-m-legends .v-m-legend .v-label', '.viz-legend-valueLabel.v-label'], 'font-size', _UX_SCALES.font_size_4[i], false);
            // @formatter:on
        }
        return merged;
    };
    ChartView.prototype.updateCss = function(options, css) {
        var ret;
        
        if (options.directionChanged && css) {
            //switch 'xAxis' and 'yAxis' only for vizChart
            ret = css.replace(new RegExp('xAxis','gm'), '0Axis');
            ret = ret.replace(new RegExp('yAxis','gm'), 'xAxis');
            ret = ret.replace(new RegExp('0Axis','gm'), 'yAxis');
        }
        
        return ret;
    };
    ChartView.prototype.updatePropertyForPropertyZoneInteraction = function(properties, useBuiltInPropertyZoneInteraction){
        properties = properties || {};
        properties.interaction = properties.interaction || {};
        properties.interaction.selectability = properties.interaction.selectability || {};
        properties.interaction.selectability.plotLassoSelection = false;
        properties.interaction.selectability.mode = "none";

        properties.tooltip = properties.tooltip || {};
        properties.tooltip.visible = false;
        return properties;
    };
    
    return ChartView;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/InteractionAdapter',[
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/events/EventDispatcher',
    'sap/viz/controls/common/property/VizPropertyZone',
    'sap/viz/controls/chart/views/ChartEvent'
],
function($, OOUtil, utils, EventDispatcher,
    VizPropertyZone,
    ChartEvent) {
// @formatter:on

    var InteractionAdapter = function(helper) {
        InteractionAdapter.superclass.constructor.apply(this, arguments);
        this.__className = 'sap.viz.controls.chart.adapters.InteractionAdapter';

        this._helper = helper;
        var selectRequested = true;
        this._helper.vizOn('selectPropertyZone', $.proxy(function(event) {

            selectRequested = true;
            this._selectPropertyZoneHandler(event);
        }, this));
        this._helper.vizOn('deselectPropertyZone', $.proxy(function(event) {
            selectRequested = false;
            // Defer to wait selectPropertyZone event
            utils.defer($.proxy(function() {
                // Trigger handler when no selectPropertyZone event dispatched
                if (!selectRequested) {
                    this._selectPropertyZoneHandler(event);
                }
            }, this));
        }, this));
        // selection change
        this._propertyZones = null;
    };
    OOUtil.extend(InteractionAdapter, EventDispatcher);

    var _translate = {
        'dataPoint' : VizPropertyZone.DATA_POINT,
        'dataPointMarker' : VizPropertyZone.DATA_POINT_MARKER,
        'title' : VizPropertyZone.CHART_TITLE,
        'plotArea' : VizPropertyZone.PLOT_AREA,
        'legend' : VizPropertyZone.LEGEND,
        'axis.category' : VizPropertyZone.CATEGORY_AXIS,
        'axisTitle.category' : VizPropertyZone.CATEGORY_AXIS_TITLE,
        'axis.category2' : VizPropertyZone.CATEGORY_AXIS2,
        'axisTitle.category2' : VizPropertyZone.CATEGORY_AXIS2_TITLE,
        'axis.value' : VizPropertyZone.VALUE_AXIS,
        'axisTitle.value' : VizPropertyZone.VALUE_AXIS_TITLE,
        'axis.value2' : VizPropertyZone.VALUE_AXIS2,
        'axisTitle.value2' : VizPropertyZone.VALUE_AXIS2_TITLE,
        'chart' : VizPropertyZone.CHART_AREA,
        'dataLabel' : VizPropertyZone.DATA_LABEL,
        'dataLine' : VizPropertyZone.LINE,
        'combinationDataLine' : VizPropertyZone.COMBINATION_LINE,
        'gridline' : VizPropertyZone.GRID_LINE,
        'trellisPlotArea' : VizPropertyZone.TRELLIS_PLOT_AREA,
        'trellisRowAxis' : VizPropertyZone.ROW_AXIS,
        'trellisRowAxisTitle' : VizPropertyZone.ROW_AXIS_TITLE,
        'trellisColumnAxis' : VizPropertyZone.COLUMN_AXIS,
        'trellisColumnAxisTitle' : VizPropertyZone.COLUMN_AXIS_TITLE,
        'trellisRowAxis2' : VizPropertyZone.ROW_AXIS2,
        'trellisRowAxisTitle2' : VizPropertyZone.ROW_AXIS2_TITLE,
        'trellisColumnAxis2' : VizPropertyZone.COLUMN_AXIS2,
        'trellisColumnAxisTitle2' : VizPropertyZone.COLUMN_AXIS2_TITLE,
        'dimensionLabel': VizPropertyZone.DIMENSION_LABEL      
    };

    var _invertTranslate = utils.invert(_translate);

    InteractionAdapter.prototype._getPropertyZones = function() {
        var spz = this._helper.selectedPropertyZone();
        if (!spz) {
            return [];
        }

        var type = spz.type;
        if (type === 'axisItem') {
            type = 'axis';
        }
        // Map spz type to zone
        var propertyZoneType = null;
        var from = type + (spz.subType ? '.' + spz.subType : '');
        if (_translate[from]) {
            propertyZoneType = _translate[from];
        } else {
        }

        var zones = [];
        var measureNames = this._helper.vizData().measures();
        if (spz.data && spz.data.length > 0) {
            spz.data.forEach(function(ctx, index) {
                var zone = new VizPropertyZone(propertyZoneType, ctx, spz.extraData ? spz.extraData[index] : undefined, measureNames);
                var stackContext = spz.stackData ? spz.stackData[index] : null;
                if (stackContext) {
                    zone.stackContext(stackContext);
                }
                var seriesContext = spz.seriesData ? spz.seriesData : null;
                if (seriesContext) {
                    zone.seriesContext(seriesContext);
                }
                if (spz.selectAllData) {
                    zone.selectAllData(spz.selectAllData);
                }
                zones.push(zone);
            });
        } else {
            zones.push(new VizPropertyZone(propertyZoneType));
        }
        return zones;
    };

    InteractionAdapter.prototype._selectPropertyZoneHandler = function(event) {
        this._propertyZones = this._getPropertyZones();
        utils.defer( function() {
            this._dispatchEvent(new ChartEvent(ChartEvent.PROPERTY_ZONES_CHANGED, this, {
                'propertyZones' : this._propertyZones
            }));
        }.bind(this));
    };

    InteractionAdapter.prototype.propertyZones = function(value) {
        if (arguments.length > 0) {
            this._propertyZones = value;

            var to = null;
            value = value || [];
            value.forEach(function(zone) {
                var toType = _invertTranslate[zone.type()];
                if (!toType) {
                    return;
                }
                to = to || {};
                to.data = to.data || [];
                var array = toType.split('.');
                to.type = array[0];
                if (array.length > 1) {
                    to.subType = array[1];
                }
                if (zone.context()) {
                    to.data.push(zone.context());
                }
            });
            if (to) {
                this._helper.selectedPropertyZone(to);
            } else {
                this._helper.selectedPropertyZone(null);
            }
            return this;
        } else {
            var zones = this._getPropertyZones();
            if (this._helper.vizType() === 'info/donut' && this._propertyZones &&
                this._propertyZones[0] && this._propertyZones[0].type() === VizPropertyZone.DATA_POINT){
                // A workaround, we should move set first slice logic from DonutDataPointView init to SectionPicker
                if (this._propertyZones[0].extraContext() === undefined && this._propertyZones[0].context()) {
                    return zones;
                } else {
                    return this._propertyZones;
                }
            } else {
                if (!zones || zones.length === 0) {
                    return this._propertyZones;
                } else {
                    return zones;
                }
            }
        }
    };

    return InteractionAdapter;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/renderer/RendererInfoBase',[
    'jquery','require', 'sap/viz/controls/common/utils/Utils'
],
function($, require, Utils) {
// @formatter:on
    var RendererInfoBase = function(id, vizPath) {
        this.implClassPath = 'sap/viz/controls/chart/adapters/renderer/RendererInfoBase';

        this.id = id;
        this.vizPath = vizPath;

        this.generator = null;
        /**
         * parameters: [
         *         {
         *             ctx : {...},
         *             paras : {
         *                 'key1' : '...',
         *                 'key2' : '...',
         *                 ...
         *             }
         *         },
         *         ...
         *     ]
         */
        this._parameters = [];
        this._fallbackParas = null;
    };

    RendererInfoBase.prototype.parameters = function(value) {
        if (arguments.length > 0) {
            this._parameters = value;
            return this;
        } else {
            return this._parameters;
        }
    };

    RendererInfoBase.prototype.fallbackParas = function() {
        return this._fallbackParas;
    };

    RendererInfoBase.prototype.simplify = function() {
        var remain = [];
        var renderGeneral = false;
        this._iterate('general', $.proxy(function(parameter) {
            if (this._renderGeneral(parameter.paras)) {
                renderGeneral = true;
                remain.push(parameter);
            } else {
                this._fallbackParas = parameter.paras;
            }
        }, this));
        this._iterate('specified', $.proxy(function(parameter) {
            if (renderGeneral || this._renderSpecified(parameter.paras)) {
                remain.push(parameter);
            }
        }, this));

        return remain;
    };

    RendererInfoBase.prototype._updatePropsAll = function(context, key, value) {
        var paras = this._parameters, isUpdated;
        for (var i = 0; i < paras.length; i++) {
            if (Utils.deepEqual(paras[i].ctx, context)) {//[China], [China]. Set [China]'s input value to [China]'s value
                paras[i].paras[key] = value;
                isUpdated = true;
            } 
        }
        return isUpdated;
    };

    RendererInfoBase.prototype._updatePropsGeneral = function(context, key, value) {
        var addParas, isUpdated;
        if (context) {
            var paras = this._parameters, result;

            // paras should be already sorted (most specific one first).
            paras.some(function(para) {
                if (RendererInfoBase._compareCtx(para.ctx, context)) {
                    result = para.paras;
                    return true;
                }
            });

            if (result) {
                addParas = Utils.clone(result);
            } else {
                // Default is the last one (the most common one which has no context).
                if (paras.length > 0 && paras[paras.length - 1].ctx === undefined) {
                    addParas = Utils.clone(paras[paras.length - 1].paras);
                }
            }
        }

        addParas = addParas || {};
        addParas[key] = value;
        this._parameters.push({
            'ctx' : context,
            'paras' : addParas
        });
        isUpdated = true;
    };

    RendererInfoBase.prototype._updatePropsSpecified = function(context, key, value) {
       var paras = this._parameters;
       for (var i = 0; i < paras.length; i++) {
            if (!Utils.deepEqual(paras[i].ctx, context) && RendererInfoBase._compareCtx(context, paras[i].ctx)) {
                //input [China], existing [China, 2001]. Set [China]'s input value to [China, 2001]'s value
                //set current paras value to input value, not set isUpdate to true to add context to paras
                paras[i].paras[key] = value;
            }
        }
        // Sync the specified paras when gerneral para set
        if (!context) {
            for (var j = 0; j < paras.length; j++) {
                paras[j].paras[key] = value;
            }
        }
    };

    // Set ['China', 'Profit'] to red by series, switch dimension feed in aa1 and aa2, then set ['Q1', 'Profit'] to blue, add ['China', 'Q1', 'Profit'] blue
    RendererInfoBase.prototype._mergeAndAddSeriesProps = function(context, key, value) {
        var paras = this._parameters, addContext, addParas;
        for (var i = 0; i < paras.length; i++) {// Two contexts do not match each other and they have at least one common key/value
            if (!RendererInfoBase._compareCtx(context, paras[i].ctx) && !RendererInfoBase._compareCtx(paras[i].ctx, context) && Utils.hasCommonKeyValue(context, paras[i].ctx)) {
                addContext = Utils.updateJSON(paras[i].ctx, context);// ['China', 'Profit'], ['2001', 'Profit'] merge to ['USA', '2001', 'Profit']
                var addContextLength = RendererInfoBase._contextLength(addContext);
                if (addContextLength > RendererInfoBase._contextLength(context) && addContextLength > RendererInfoBase._contextLength(paras[i].ctx)) {
                    // Add new context if it's context is more detailed
                    var obj = {};
                    obj[key] = value;
                    addParas = Utils.updateJSON(paras[i].paras, obj);// ['color'], ['shape'] merge to ['color', 'shape']
                    this._parameters.push({
                        'ctx' : addContext,
                        'paras' : addParas
                    });
                }
            }
        }
    }; 

    RendererInfoBase._contextLength = function(context) {
        var length = 0;
        if (context) {
            for (var i in context) {
                if (context.hasOwnProperty(i)) {
                    length++;
                }
            }
        }
        return length;
    };

    RendererInfoBase.prototype.setProperty = function(context, key, value) {
        var isUpdated = false;
        isUpdated = this._updatePropsAll(context, key, value);
        if (!isUpdated) {
            this._updatePropsGeneral(context, key, value);
        }
        this._updatePropsSpecified(context, key, value);
        this._mergeAndAddSeriesProps(context, key, value);
    };

    function getKeysCount (obj, cache) {
        if (obj == null) { return 0; }
        if (obj.__keysCount) { return obj.__keysCount; }
        var len = Object.keys(obj).length;

        if (cache && Object.defineProperty) {
            Object.defineProperty(obj, "__keysCount", { value: len });                
        }
        return len;
    }
    
    RendererInfoBase.prototype._sortParameters = function() {         
        this._parameters.sort(function (para1, para2) {
            // sort by most concret
            return getKeysCount(para2.ctx, true) - getKeysCount(para1.ctx, true);
        });
    };



    /**
     * Returns a value after match input context with existing context
     * 
     * @returns Return undefined if it is not set.
     *          Return null means mixed status for triCheckBox or if specified value is different from general value.
     *          Return value if it is specified.
     */
    RendererInfoBase.prototype.getProperty = function(context, key) {
        this._sortParameters();
        var paras = this._parameters,
            findedValue = [];        
        
        paras.some(function (para) {
            if ( RendererInfoBase._compareCtx(para.ctx, context) ) {
                findedValue.push( para.paras[key] );
                return true;
            }
        });
        if (findedValue.length) {
            return findedValue[0];
        }

        if (paras[ paras.length -1 ].ctx === undefined) {
            return paras[ paras.length -1 ].paras[key];
        }

        return undefined;
    };

    RendererInfoBase.prototype.getMergedProperties = function(keys, defaultValues) {
        var paras = this._parameters.slice(0);

        if ( !keys ) { return {}; }

        return paras.reduce(function (merged, para) {
            if (keys.length === 0) {
                return merged;
            }
            var parameters = para.paras;
            keys = keys.filter(function (key) {
                if ( parameters[key] === undefined ) {
                    // use defalut value if the value is unknown
                    parameters[key] = defaultValues[key];
                }
                if ( merged[key] === undefined ) {
                    merged[key] = parameters[key];
                }
                else if ( !Utils.deepEqual(merged[key], parameters[key] )) {
                    merged[key] = null;
                    return false;
                }
                return true;
            });

            return merged;
        }, {} );
    };

    RendererInfoBase.prototype.getProperties = function(context, keys, skipSort) {
        var paras = this._parameters,
            findedValue;

        if ( !keys ) { return {}; }

        if ( skipSort !== true ) {
            this._sortParameters();
            paras = this._parameters;
        }

        paras.some(function (para) {
            if ( RendererInfoBase._compareCtx(para.ctx, context) ) {
                findedValue = 
                    keys.reduce(function (obj, key) {
                        obj[key] = para.paras[key];
                        return obj;
                    }, {});
                return true;
            }
        });
        if (findedValue) {
            return findedValue;
        }

        // if no match found, fallback on the undefined context match
        if (paras[ paras.length -1 ].ctx === undefined) {
            var para = paras[ paras.length -1 ];
            findedValue = 
                keys.reduce(function (obj, key) {
                        obj[key] = para.paras[key];
                    return obj;
                }, {});
        }
        if (findedValue) {
            return findedValue;
        }

        return {};
    };

    RendererInfoBase.prototype.toJSON = function() {
        return {
            'id' : this.id,
            'vizPath' : this.vizPath,
            'generator' : this.generator,
            'parameters' : this._parameters,
            'implClassPath' : this.implClassPath
        };
    };
    RendererInfoBase.fromJSON = function(json) {
        var clazz = require(json.implClassPath);
        return new clazz(json.id, json.vizPath).parameters(json.parameters);
    };

    // Override by implementation
    RendererInfoBase.prototype._renderGeneral = function(paras) {
        return true;
    };

    // Override by implementation
    RendererInfoBase.prototype._renderSpecified = function(paras) {
        return true;
    };

    RendererInfoBase.prototype._iterate = function(type, callback, context) {
        this._parameters.forEach(function(parameter, i, parameters) {
            if (type === 'all') {
                callback(parameter);
            } else if (type === 'general') {
                if (!parameter.ctx || RendererInfoBase._compareCtx(parameter.ctx, context)) {
                    callback(parameter);
                }
            } else if (type === 'specified' && parameter.ctx) {
                callback(parameter);
            }
        });
    };
    RendererInfoBase._compareCtx = function(ctx1, ctx2) {
        if ( ctx1 instanceof Object && ctx2 instanceof Object) {
            var keys1 = Object.keys(ctx1);
            var keys2 = Object.keys(ctx2);

            return (keys2.length > 0) && keys1.every(function(key) {
                return RendererInfoBase._compareCtx(ctx1[key], ctx2[key]);
            });
        } else {
            return ctx1 === ctx2;
        }
    };

    RendererInfoBase.prototype.isConflict = function(props, paraKey, renderParaName) {
        var isConflict = false;

        var _this = this;
        this._iterate('all', function(parameter) {
            if (_this._ignoreKey(paraKey, parameter.paras, props)) {
                return;
            } else {
                if (parameter.paras[renderParaName] !== props[paraKey]) {
                    isConflict = true;
                }
            }
        });

        return isConflict;
    };

    // Override by implementation
    RendererInfoBase.prototype._ignoreKey = function(paraKey, paras, props) {
        return false;
    };

    return RendererInfoBase;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/renderer/DataLabelRendererInfo',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/chart/adapters/renderer/RendererInfoBase'
],
function(OOUtil, RendererInfoBase) {
// @formatter:on

    var DataLabelRendererInfo = function(id, vizPath) {
        DataLabelRendererInfo.superclass.constructor.apply(this, arguments);

        this.implClassPath = 'sap/viz/controls/chart/adapters/renderer/DataLabelRendererInfo';
        this.generator = 'dataLabelRenderer';
    };

    OOUtil.extend(DataLabelRendererInfo, RendererInfoBase);

    DataLabelRendererInfo.prototype._renderGeneral = function(paras) {
        if (paras.iconVisible === true || paras.textVisible === false) {
            return true;
        } else {
            return false;
        }
    };
    
    DataLabelRendererInfo.prototype._renderSpecified = function(paras) {
        if (paras.iconVisible === true || paras.textVisible === false) {
            return true;
        } else {
            return paras.fontFamily !== undefined || paras.fontSize !== undefined || paras.fontWeight !== undefined || paras.fontColor !== undefined || paras.fontStyle !== undefined;
        }
    };

    DataLabelRendererInfo.prototype._ignoreKey = function(paraKey, paras, props) {
        switch (paraKey) {
            case 'textVisible' :
                if (props.textVisible === undefined) {
                    if (paras.textVisible === props.dataLabelVisible) {
                        return true;
                    }
                }
                break;
            case 'iconVisible' :
                if (props.iconVisible === undefined) {
                    return true;
                }
                break;
            case 'fontFamily' :
                if (paras.fontFamily === undefined) {
                    return true;
                }
                break;
            case 'fontSize' :
                if (paras.fontSize === undefined) {
                    return true;
                }
                break;
            case 'fontWeight' :
                if (paras.fontWeight === undefined) {
                    return true;
                }
                break;
            case 'fontColor' :
                if (paras.fontColor === undefined) {
                    return true;
                }
                break;
            case 'fontStyle' :
                if (paras.fontStyle === undefined) {
                    return true;
                }
                break;
        }

        return false;
    };

    return DataLabelRendererInfo;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/config/DataLabelPropConfig',[
    'sap/viz/controls/chart/adapters/renderer/DataLabelRendererInfo'
],
function(DataLabelRendererInfo) {
// @formatter:on
    var DataLabelPropConfig = {};

    var _getCfgRenderer = function(paraName) {
        return {
            'id' : 'plotArea.dataLabel.renderer',
            'infoClass' : DataLabelRendererInfo,
            'vizPath' : 'plotArea.dataLabel.renderer',
            'paraName' : paraName
        };
    };

    DataLabelPropConfig.instance = function() {
        return {
            'dataLabelVisible' : {
                'vizPath' : 'plotArea.dataLabel.visible'
            },
            'textVisible' : {
                'renderer' : _getCfgRenderer('textVisible')
            },
            'fontFamily' : {
                'renderer' : _getCfgRenderer('fontFamily'),
                'vizPath' : 'plotArea.dataLabel.style.fontFamily'
            },
            'fontSize' : {
                'renderer' : _getCfgRenderer('fontSize'),
                'vizPath' : 'plotArea.dataLabel.style.fontSize'
            },
            'fontWeight' : {
                'renderer' : _getCfgRenderer('fontWeight'),
                'vizPath' : 'plotArea.dataLabel.style.fontWeight'
            },
            'fontColor' : {
                'renderer' : _getCfgRenderer('fontColor'),
                'vizPath' : 'plotArea.dataLabel.style.color'
            },
            'fontStyle' : {
                'renderer' : _getCfgRenderer('fontStyle'),
                'vizPath' : 'plotArea.dataLabel.style.fontStyle'
            },
            'iconVisible' : {
                'renderer' : _getCfgRenderer('iconVisible')
            },
            'iconSVG' : {
                'renderer' : _getCfgRenderer('iconSVG')
            },
            'iconColor' : {
                'renderer' : _getCfgRenderer('iconColor')
            },
            'iconSize' : {
                'renderer' : _getCfgRenderer('iconSize')
            }
        };
    };

    return DataLabelPropConfig;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/renderer/StackDecoratorInfo',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/chart/adapters/renderer/RendererInfoBase'
],
function(OOUtil, RendererInfoBase) {
// @formatter:on
    var StackDecoratorInfo = function(id, vizPath) {
        StackDecoratorInfo.superclass.constructor.apply(this, arguments);

        this.implClassPath = 'sap/viz/controls/chart/adapters/renderer/StackDecoratorInfo';
        this.generator = 'stackDecorator';
    };
    OOUtil.extend(StackDecoratorInfo, RendererInfoBase);

    StackDecoratorInfo.prototype._renderSpecified = function(paras) {
        if (paras.stackShape) {
            return true;
        } else {
            return false;
        }
    };

    return StackDecoratorInfo;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/renderer/BarShapeRendererInfo',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/chart/adapters/renderer/RendererInfoBase'
],
function(OOUtil, RendererInfoBase) {
// @formatter:on
    var BarShapeRendererInfo = function(id, vizPath) {
        BarShapeRendererInfo.superclass.constructor.apply(this, arguments);

        this.implClassPath = 'sap/viz/controls/chart/adapters/renderer/BarShapeRendererInfo';
        this.generator = 'barShapeRenderer';
    };
    OOUtil.extend(BarShapeRendererInfo, RendererInfoBase);

    BarShapeRendererInfo.prototype._renderGeneral = function(paras) {
        if (paras.dataPointShape || paras.dataPointShapeFill || paras.dataPointShapeRenderer) {
            return true;
        } else {
            return false;
        }
    };

    BarShapeRendererInfo.prototype._renderSpecified = function(paras) {
        if (paras.dataPointShape || paras.dataPointShapeFill || paras.dataPointShapeRenderer) {
            return true;
        } else {
            return false;
        }
    };

    return BarShapeRendererInfo;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/renderer/StackedBarShapeRendererInfo',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/chart/adapters/renderer/RendererInfoBase'
],
function(OOUtil, RendererInfoBase) {
// @formatter:on
    var StackedBarShapeRendererInfo = function(id, vizPath) {
        StackedBarShapeRendererInfo.superclass.constructor.apply(this, arguments);

        this.implClassPath = 'sap/viz/controls/chart/adapters/renderer/StackedBarShapeRendererInfo';
        this.generator = 'stackedBarShapeRenderer';
    };
    OOUtil.extend(StackedBarShapeRendererInfo, RendererInfoBase);

    StackedBarShapeRendererInfo.prototype._renderGeneral = function(paras) {
        if (paras.dataPointShape || paras.dataPointShapeFill || paras.dataPointShapeRenderer) {
            return true;
        } else {
            return false;
        }
    };

    StackedBarShapeRendererInfo.prototype._renderSpecified = function(paras) {
        if (paras.dataPointShape || paras.dataPointShapeFill || paras.dataPointShapeRenderer) {
            return true;
        } else {
            return false;
        }
    };

    return StackedBarShapeRendererInfo;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/renderer/PieDataPointRendererInfo',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/chart/adapters/renderer/RendererInfoBase'
],
function(OOUtil, RendererInfoBase) {
// @formatter:on
    var PieDataPointRendererInfo = function(id, vizPath) {
        PieDataPointRendererInfo.superclass.constructor.apply(this, arguments);

        this.implClassPath = 'sap/viz/controls/chart/adapters/renderer/PieDataPointRendererInfo';
        this.generator = 'pieSliceRenderer';
    };
    OOUtil.extend(PieDataPointRendererInfo, RendererInfoBase);

    PieDataPointRendererInfo.prototype._renderGeneral = function(paras) {
        if (paras.sliceShape) {
            return true;
        } else {
            return false;
        }
    };

    PieDataPointRendererInfo.prototype._renderSpecified = function(paras) {
        if (paras.sliceShape) {
            return true;
        } else {
            return false;
        }
    };

    return PieDataPointRendererInfo;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/renderer/LineDataPointRendererInfo',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/chart/adapters/renderer/RendererInfoBase'
],
function(OOUtil, RendererInfoBase) {
// @formatter:on
    var LineDataPointRendererInfo = function(id, vizPath) {
        LineDataPointRendererInfo.superclass.constructor.apply(this, arguments);

        this.implClassPath = 'sap/viz/controls/chart/adapters/renderer/LineDataPointRendererInfo';
        this.generator = 'lineMarkerRenderer';
    };
    OOUtil.extend(LineDataPointRendererInfo, RendererInfoBase);

    LineDataPointRendererInfo.prototype._renderGeneral = function(paras) {
        if (paras.iconSVG || paras.iconColor || paras.iconSize) {
            return true;
        } else {
            return false;
        }
    };

    LineDataPointRendererInfo.prototype._renderSpecified = function(paras) {
        if (paras.iconSVG || paras.iconColor || paras.iconSize) {
            return true;
        } else {
            return false;
        }
    };

    return LineDataPointRendererInfo;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/renderer/ScatterDataPointRendererInfo',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/chart/adapters/renderer/RendererInfoBase'
],
function(OOUtil, RendererInfoBase) {
// @formatter:on
    var ScatterDataPointRendererInfo = function(id, vizPath) {
        ScatterDataPointRendererInfo.superclass.constructor.apply(this, arguments);

        this.implClassPath = 'sap/viz/controls/chart/adapters/renderer/ScatterDataPointRendererInfo';
        this.generator = 'scatterMarkerRenderer';
    };
    OOUtil.extend(ScatterDataPointRendererInfo, RendererInfoBase);

    ScatterDataPointRendererInfo.prototype._renderGeneral = function(paras) {
        if (paras.iconSVG || paras.iconColor || paras.iconSize) {
            return true;
        } else {
            return false;
        }
    };

    ScatterDataPointRendererInfo.prototype._renderSpecified = function(paras) {
        if (paras.iconSVG || paras.iconColor || paras.iconSize) {
            return true;
        } else {
            return false;
        }
    };

    return ScatterDataPointRendererInfo;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/renderer/BubbleDataPointRendererInfo',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/chart/adapters/renderer/RendererInfoBase'
],
function(OOUtil, RendererInfoBase) {
// @formatter:on
    var BubbleDataPointRendererInfo = function(id, vizPath) {
        BubbleDataPointRendererInfo.superclass.constructor.apply(this, arguments);

        this.implClassPath = 'sap/viz/controls/chart/adapters/renderer/BubbleDataPointRendererInfo';
        this.generator = 'bubbleMarkerRenderer';
    };
    OOUtil.extend(BubbleDataPointRendererInfo, RendererInfoBase);

    BubbleDataPointRendererInfo.prototype._renderGeneral = function(paras) {
        if (paras.iconSVG || paras.iconColor || paras.iconSize) {
            return true;
        } else {
            return false;
        }
    };

    BubbleDataPointRendererInfo.prototype._renderSpecified = function(paras) {
        if (paras.iconSVG || paras.iconColor || paras.iconSize) {
            return true;
        } else {
            return false;
        }
    };

    return BubbleDataPointRendererInfo;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/renderer/CombinationDataPointRendererInfo',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/chart/adapters/renderer/RendererInfoBase'
],
function(OOUtil, RendererInfoBase) {
// @formatter:on
    var CombinationDataPointRendererInfo = function(id, vizPath) {
        CombinationDataPointRendererInfo.superclass.constructor.apply(this, arguments);

        this.implClassPath = 'sap/viz/controls/chart/adapters/renderer/CombinationDataPointRendererInfo';
        this.generator = 'combinationDataPointRenderer';
    };
    OOUtil.extend(CombinationDataPointRendererInfo, RendererInfoBase);

    CombinationDataPointRendererInfo.prototype._renderGeneral = function(paras) {
        if (paras.dataPointShape || paras.dataPointShapeFill || paras.dataPointShapeRenderer || paras.iconSVG || paras.iconColor || paras.iconSize) {
            return true;
        } else {
            return false;
        }
    };

    CombinationDataPointRendererInfo.prototype._renderSpecified = function(paras) {
        if (paras.dataPointShape || paras.dataPointShapeFill || paras.dataPointShapeRenderer || paras.iconSVG || paras.iconColor || paras.iconSize) {
            return true;
        } else {
            return false;
        }
    };

    return CombinationDataPointRendererInfo;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/config/DataPointPropConfig',[
    'sap/viz/controls/chart/adapters/renderer/StackDecoratorInfo',
    'sap/viz/controls/chart/adapters/renderer/BarShapeRendererInfo',
    'sap/viz/controls/chart/adapters/renderer/StackedBarShapeRendererInfo',
    'sap/viz/controls/chart/adapters/renderer/PieDataPointRendererInfo',
    'sap/viz/controls/chart/adapters/renderer/LineDataPointRendererInfo',
    'sap/viz/controls/chart/adapters/renderer/ScatterDataPointRendererInfo',
    'sap/viz/controls/chart/adapters/renderer/BubbleDataPointRendererInfo',
    'sap/viz/controls/chart/adapters/renderer/CombinationDataPointRendererInfo'
],
function(StackDecoratorInfo, BarShapeRendererInfo, StackedBarShapeRendererInfo, PieDataPointRendererInfo, 
        LineDataPointRendererInfo, ScatterDataPointRendererInfo, BubbleDataPointRendererInfo, CombinationDataPointRendererInfo) {
// @formatter:on
    var DataPointPropConfig = {};

    var _getBarShapeRenderer = function(paraName) {
        return {
            'id' : 'plotArea.markerRenderer.barShapeRenderer',
            'infoClass' : BarShapeRendererInfo,
            'vizPath' : 'plotArea.markerRenderer',
            'paraName' : paraName
        };
    };
    
    var _getStackedBarShapeRenderer = function(paraName) {
        return {
            'id' : 'plotArea.markerRenderer.stackedBarShapeRenderer',
            'infoClass' : StackedBarShapeRendererInfo,
            'vizPath' : 'plotArea.markerRenderer',
            'paraName' : paraName
        };
    };    
    
    var _getStackDecorator = function(paraName) {
        return {
            'id' : 'plotArea.stackDecorator.stackDecorator',
            'infoClass' : StackDecoratorInfo,
            'vizPath' : 'plotArea.stackDecorator',
            'useStackContext' : true,
            'paraName' : paraName
        };
    };
    // TODO Check does it deprecated?
    var _getDonutRenderer = function(paraName) {
        return {
            'id' : 'plotArea.sliceRenderer.pieSliceRenderer',
            'infoClass' : PieDataPointRendererInfo,
            'vizPath' : 'plotArea.sliceRenderer',
            'paraName' : paraName
        };
    };
    var _getLineMarkerRenderer = function(paraName) {
        return {
            'id' : 'plotArea.markerRenderer.lineMarkerRenderer',
            'infoClass' : LineDataPointRendererInfo,
            'vizPath' : 'plotArea.markerRenderer',
            'paraName' : paraName
        };
    };
    var _getScatterMarkerRenderer = function(paraName) {
        return {
            'id' : 'plotArea.markerRenderer.scatterMarkerRenderer',
            'infoClass' : ScatterDataPointRendererInfo,
            'vizPath' : 'plotArea.markerRenderer',
            'paraName' : paraName
        };
    };
    var _getBubbleMarkerRenderer = function(paraName) {
        return {
            'id' : 'plotArea.markerRenderer.bubbleMarkerRenderer',
            'infoClass' : BubbleDataPointRendererInfo,
            'vizPath' : 'plotArea.markerRenderer',
            'paraName' : paraName
        };
    };
    var _getCombinationDataPointRenderer = function(paraName) {
        return {
            'id' : 'plotArea.markerRenderer.dataPointRenderer',
            'infoClass' : CombinationDataPointRendererInfo,
            'vizPath' : 'plotArea.markerRenderer',
            'paraName' : paraName
        };
    };
    DataPointPropConfig.instance = function(isStacked, isCombination) {
        return {
            'line.iconSVG' : {
                'renderer' : isCombination ? _getCombinationDataPointRenderer('iconSVG') :
                    _getLineMarkerRenderer('iconSVG')
            },
            'line.iconColor' : {
                'renderer' : isCombination ? _getCombinationDataPointRenderer('iconColor') :
                    _getLineMarkerRenderer('iconColor')
            },
            'line.iconSize' : {
                'renderer' : isCombination ? _getCombinationDataPointRenderer('iconSize') :
                    _getLineMarkerRenderer('iconSize')
            },
            'dataPointShape' : {
                'renderer': (function() {
                    if (isStacked) {
                        return _getStackedBarShapeRenderer("dataPointShape");
                    } else if (isCombination) {
                        return _getCombinationDataPointRenderer("dataPointShape");
                    } else {
                        return _getBarShapeRenderer('dataPointShape');
                    }
                }())
            },
            'stackShape' : {
                'renderer' : _getStackDecorator('stackShape')
            },
            'dataPointShapeFill' : {
                'renderer': (function() {
                    if (isStacked) {
                        return _getStackedBarShapeRenderer("dataPointShapeFill");
                    } else if (isCombination) {
                        return _getCombinationDataPointRenderer("dataPointShapeFill");
                    } else {
                        return _getBarShapeRenderer('dataPointShapeFill');
                    }
                }())
            },
            'dataPointShapeRenderer' : {
                'renderer': (function() {
                    if (isStacked) {
                        return _getStackedBarShapeRenderer("dataPointShapeRenderer");
                    } else if (isCombination) {
                        return _getCombinationDataPointRenderer("dataPointShapeRenderer");
                    } else {
                        return _getBarShapeRenderer('dataPointShapeRenderer');
                    }
                }())
            },
            'sliceShape' : {
                'renderer' : _getDonutRenderer('sliceShape')
            },
            'sliceShapeFill' : {
                'renderer' : _getDonutRenderer('sliceShapeFill')
            },
            'scatter.iconSVG' : {
                'renderer' : _getScatterMarkerRenderer('iconSVG')
            },
            'scatter.iconColor' : {
                'renderer' : _getScatterMarkerRenderer('iconColor')
            },
            'scatter.iconSize' : {
                'renderer' : _getScatterMarkerRenderer('iconSize')
            },
            'bubble.iconSVG' : {
                'renderer' : _getBubbleMarkerRenderer('iconSVG')
            },
            'bubble.iconColor' : {
                'renderer' : _getBubbleMarkerRenderer('iconColor')
            },
            'bubble.iconSize' : {
                'renderer' : _getBubbleMarkerRenderer('iconSize')
            },
            'centerName.fontFamily' : {
                'vizPath' : 'plotArea.highlight.centerName.style.fontFamily'
            },
            'centerName.fontSize' : {
                'vizPath' : 'plotArea.highlight.centerName.style.fontSize'
            },
            'centerName.fontWeight' : {
                'vizPath' : 'plotArea.highlight.centerName.style.fontWeight'
            },
            'centerName.fontColor' : {
                'vizPath' : 'plotArea.highlight.centerName.style.color'
            },
            'centerName.fontStyle' : {
                'vizPath' : 'plotArea.highlight.centerName.style.fontStyle'
            },
            'centerValue.fontFamily' : {
                'vizPath' : 'plotArea.highlight.centerValue.style.fontFamily'
            },
            'centerValue.fontSize' : {
                'vizPath' : 'plotArea.highlight.centerValue.style.fontSize'
            },
            'centerValue.fontWeight' : {
                'vizPath' : 'plotArea.highlight.centerValue.style.fontWeight'
            },
            'centerValue.fontColor' : {
                'vizPath' : 'plotArea.highlight.centerValue.style.color'
            },
            'centerValue.fontStyle' : {
                'vizPath' : 'plotArea.highlight.centerValue.style.fontStyle'
            }
        };
    };

    return DataPointPropConfig;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/config/ChartTitlePropConfig',[
],
function() {
// @formatter:on
    var ChartTitlePropConfig = {};

    ChartTitlePropConfig.instance = function() {
        return {
            'fontFamily' : {
                'vizPath' : 'title.style.fontFamily'
            },
            'fontSize' : {
                'vizPath' : 'title.style.fontSize'
            },
            'fontWeight' : {
                'vizPath' : 'title.style.fontWeight'
            },
            'fontColor' : {
                'vizPath' : 'title.style.color'
            },
            'fontStyle' : {
                'vizPath' : 'title.style.fontStyle'
            }
        };
    };

    return ChartTitlePropConfig;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/config/ChartAreaPropConfig',[
],
function() {
// @formatter:on
    var ChartAreaPropConfig = {};

    ChartAreaPropConfig.instance = function() {
        return {
            'fill' : {
                'vizPath' : 'general.background.color'
            }
        };
    };

    return ChartAreaPropConfig;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/config/PlotAreaPropConfig',[
],
function() {
// @formatter:on
    var PlotAreaPropConfig = {};

    PlotAreaPropConfig.instance = function() {
        return {
            'fill' : {
                'vizPath' : 'plotArea.background.color'
            }
        };
    };

    return PlotAreaPropConfig;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/renderer/CategoryAxisLabelRendererInfo',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/chart/adapters/renderer/RendererInfoBase'
],
function(OOUtil, RendererInfoBase) {
// @formatter:on
    var CategoryAxisLabelRendererInfo = function(id, vizPath) {
        CategoryAxisLabelRendererInfo.superclass.constructor.apply(this, arguments);

        this.implClassPath = 'sap/viz/controls/chart/adapters/renderer/CategoryAxisLabelRendererInfo';
        this.generator = 'categoryAxisLabelRenderer';
    };
    OOUtil.extend(CategoryAxisLabelRendererInfo, RendererInfoBase);

    CategoryAxisLabelRendererInfo.prototype._renderGeneral = function(paras) {
        if (paras.iconVisible === true || paras.textVisible === false) {
            return true;
        } else {
            return false;
        }
    };

    CategoryAxisLabelRendererInfo.prototype._renderSpecified = function(paras) {
        if (paras.iconVisible === true || paras.textVisible === false) {
            return true;
        } else {
            return paras.fontFamily !== undefined || paras.fontSize !== undefined || paras.fontWeight !== undefined || paras.fontColor !== undefined || paras.fontStyle !== undefined;
        }
    };

    CategoryAxisLabelRendererInfo.prototype._ignoreKey = function(paraKey, paras, props) {
        switch (paraKey) {
            case 'fontFamily' :
                if (paras.fontFamily === undefined) {
                    return true;
                }
                break;
            case 'fontSize' :
                if (paras.fontSize === undefined) {
                    return true;
                }
                break;
            case 'fontWeight' :
                if (paras.fontWeight === undefined) {
                    return true;
                }
                break;
            case 'fontColor' :
                if (paras.fontColor === undefined) {
                    return true;
                }
                break;
            case 'fontStyle' :
                if (paras.fontStyle === undefined) {
                    return true;
                }
                break;
        }

        return false;
    };

    return CategoryAxisLabelRendererInfo;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/config/CategoryAxisPropConfig',[
    'sap/viz/controls/chart/adapters/renderer/CategoryAxisLabelRendererInfo'
],
function(CategoryAxisLabelRendererInfo) {
// @formatter:on

    var CategoryAxisPropConfig = {};

    var _getCategoryAxisLabelRenderer = function(paraName) {
        return {
            'id' : 'categoryAxis.labelRenderer.categoryAxisLabelRenderer',
            'infoClass' : CategoryAxisLabelRendererInfo,
            'vizPath' : 'categoryAxis.labelRenderer',
            'paraName' : paraName
        };
    };

    CategoryAxisPropConfig.instance = function() {
        return {
            'textVisible' : {
                'renderer' : _getCategoryAxisLabelRenderer('textVisible')
            },
            'iconSVG' : {
                'renderer' : _getCategoryAxisLabelRenderer('iconSVG')
            },
            'iconColor' : {
                'renderer' : _getCategoryAxisLabelRenderer('iconColor')
            },
            'iconSize' : {
                'renderer' : _getCategoryAxisLabelRenderer('iconSize')
            },
            'iconVisible' : {
                'renderer' : _getCategoryAxisLabelRenderer('iconVisible')
            },       
            'fontFamily' : {
                'renderer' : _getCategoryAxisLabelRenderer('fontFamily'),
                'vizPath' : 'categoryAxis.label.style.fontFamily'
            },
            'fontSize' : {
                'renderer' : _getCategoryAxisLabelRenderer('fontSize'),
                'vizPath' : 'categoryAxis.label.style.fontSize'
            },
            'fontWeight' : {
                'renderer' : _getCategoryAxisLabelRenderer('fontWeight'),
                'vizPath' : 'categoryAxis.label.style.fontWeight'
            },
            'fontColor' : {
                'renderer' : _getCategoryAxisLabelRenderer('fontColor'),
                'vizPath' : 'categoryAxis.label.style.color'
            },
            'fontStyle' : {
                'renderer' : _getCategoryAxisLabelRenderer('fontStyle'),
                'vizPath' : 'categoryAxis.label.style.fontStyle'
            }
        };
    };

    return CategoryAxisPropConfig;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/config/CategoryAxis2PropConfig',[
    'sap/viz/controls/chart/adapters/renderer/CategoryAxisLabelRendererInfo'
],
function(CategoryAxisLabelRendererInfo) {
// @formatter:on

    var CategoryAxisPropConfig = {};

    var _getCategoryAxisLabelRenderer = function(paraName) {
        return {
            'id' : 'categoryAxis.labelRenderer.categoryAxisLabelRenderer',
            'infoClass' : CategoryAxisLabelRendererInfo,
            'vizPath' : 'categoryAxis.labelRenderer',
            'paraName' : paraName
        };
    };

    CategoryAxisPropConfig.instance = function() {
        return {
            'textVisible' : {
                'renderer' : _getCategoryAxisLabelRenderer('textVisible')
            },
            'iconSVG' : {
                'renderer' : _getCategoryAxisLabelRenderer('iconSVG')
            },
            'iconColor' : {
                'renderer' : _getCategoryAxisLabelRenderer('iconColor')
            },
            'iconSize' : {
                'renderer' : _getCategoryAxisLabelRenderer('iconSize')
            },
            'iconVisible' : {
                'renderer' : _getCategoryAxisLabelRenderer('iconVisible')
            },
            'fontFamily' : {
                'renderer' : _getCategoryAxisLabelRenderer('fontFamily'),
                'vizPath' : 'categoryAxis.label.style.fontFamily'
            },
            'fontSize' : {
                'renderer' : _getCategoryAxisLabelRenderer('fontSize'),
                'vizPath' : 'categoryAxis.label.style.fontSize'
            },
            'fontWeight' : {
                'renderer' : _getCategoryAxisLabelRenderer('fontWeight'),
                'vizPath' : 'categoryAxis.label.style.fontWeight'
            },
            'fontColor' : {
                'renderer' : _getCategoryAxisLabelRenderer('fontColor'),
                'vizPath' : 'categoryAxis.label.style.color'
            },
            'fontStyle' : {
                'renderer' : _getCategoryAxisLabelRenderer('fontStyle'),
                'vizPath' : 'categoryAxis.label.style.fontStyle'
            }
        };
    };

    return CategoryAxisPropConfig;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/config/CategoryAxisTitlePropConfig',[
],
function(CategoryAxisLabelRendererInfo) {
// @formatter:on
    var CategoryAxisTitlePropConfig = {};

    CategoryAxisTitlePropConfig.instance = function() {
        return {
            'fontFamily' : {
                'vizPath' : 'categoryAxis.title.style.fontFamily'
            },
            'fontSize' : {
                'vizPath' : 'categoryAxis.title.style.fontSize'
            },
            'fontWeight' : {
                'vizPath' : 'categoryAxis.title.style.fontWeight'
            },
            'fontColor' : {
                'vizPath' : 'categoryAxis.title.style.color'
            },
            'fontStyle' : {
                'vizPath' : 'categoryAxis.title.style.fontStyle'
            }
        };
    };

    return CategoryAxisTitlePropConfig;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/config/CategoryAxis2TitlePropConfig',[
],
function(CategoryAxisLabelRendererInfo) {
// @formatter:on
    var CategoryAxisTitlePropConfig = {};

    CategoryAxisTitlePropConfig.instance = function() {
        return {
            'fontFamily' : {
                'vizPath' : 'categoryAxis.title.style.fontFamily'
            },
            'fontSize' : {
                'vizPath' : 'categoryAxis.title.style.fontSize'
            },
            'fontWeight' : {
                'vizPath' : 'categoryAxis.title.style.fontWeight'
            },
            'fontColor' : {
                'vizPath' : 'categoryAxis.title.style.color'
            },
            'fontStyle' : {
                'vizPath' : 'categoryAxis.title.style.fontStyle'
            }
        };
    };

    return CategoryAxisTitlePropConfig;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/config/ValueAxisPropConfig',[
],
function() {
// @formatter:on
    var ValueAxisPropConfig = {};

    ValueAxisPropConfig.instance = function() {
        return {
            'fontFamily' : {
                'vizPath' : 'valueAxis.label.style.fontFamily'
            },
            'fontSize' : {
                'vizPath' : 'valueAxis.label.style.fontSize'
            },
            'fontWeight' : {
                'vizPath' : 'valueAxis.label.style.fontWeight'
            },
            'fontColor' : {
                'vizPath' : 'valueAxis.label.style.color'
            },
            'fontStyle' : {
                'vizPath' : 'valueAxis.label.style.fontStyle'
            } 
        };
    };

    return ValueAxisPropConfig;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/config/ValueAxis2PropConfig',[
],
function() {
// @formatter:on
    var ValueAxisPropConfig = {};

    ValueAxisPropConfig.instance = function() {
        return {
            'fontFamily' : {
                'vizPath' : 'valueAxis.label.style.fontFamily'
            },
            'fontSize' : {
                'vizPath' : 'valueAxis.label.style.fontSize'
            },
            'fontWeight' : {
                'vizPath' : 'valueAxis.label.style.fontWeight'
            },
            'fontColor' : {
                'vizPath' : 'valueAxis.label.style.color'
            },
            'fontStyle' : {
                'vizPath' : 'valueAxis.label.style.fontStyle'
            }
        };
    };

    return ValueAxisPropConfig;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/config/ValueAxisTitlePropConfig',[
],
function() {
// @formatter:on
    var ValueAxisTitlePropConfig = {};

    ValueAxisTitlePropConfig.instance = function() {
        return {
            'fontFamily' : {
                'vizPath' : 'valueAxis.title.style.fontFamily'
            },
            'fontSize' : {
                'vizPath' : 'valueAxis.title.style.fontSize'
            },
            'fontWeight' : {
                'vizPath' : 'valueAxis.title.style.fontWeight'
            },
            'fontColor' : {
                'vizPath' : 'valueAxis.title.style.color'
            },
            'fontStyle' : {
                'vizPath' : 'valueAxis.title.style.fontStyle'
            }
        };
    };

    return ValueAxisTitlePropConfig;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/config/ValueAxis2TitlePropConfig',[
],
function(CategoryAxisLabelRendererInfo) {
// @formatter:on
    var ValueAxisTitlePropConfig = {};

    ValueAxisTitlePropConfig.instance = function() {
        return {
            'fontFamily' : {
                'vizPath' : 'valueAxis.title.style.fontFamily'
            },
            'fontSize' : {
                'vizPath' : 'valueAxis.title.style.fontSize'
            },
            'fontWeight' : {
                'vizPath' : 'valueAxis.title.style.fontWeight'
            },
            'fontColor' : {
                'vizPath' : 'valueAxis.title.style.color'
            },
            'fontStyle' : {
                'vizPath' : 'valueAxis.title.style.fontStyle'
            }
        };
    };

    return ValueAxisTitlePropConfig;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/config/LegendPropConfig',[
],
function() {
// @formatter:on
    var LegendPropConfig = {};

    LegendPropConfig.instance = function() {
        return {
            'fontFamily' : {
                'vizPath' : 'legend.label.style.fontFamily'
            },
            'fontSize' : {
                'vizPath' : 'legend.label.style.fontSize'
            },
            'fontWeight' : {
                'vizPath' : 'legend.label.style.fontWeight'
            },
            'fontColor' : {
                'vizPath' : 'legend.label.style.color'
            },
            'fontStyle' : {
                'vizPath' : 'legend.label.style.fontStyle'
            },
            'title-fontFamily' : {
                'vizPath' : 'legend.title.style.fontFamily'
            },
            'title-fontSize' : {
                'vizPath' : 'legend.title.style.fontSize'
            },
            'title-fontWeight' : {
                'vizPath' : 'legend.title.style.fontWeight'
            },
            'title-fontColor' : {
                'vizPath' : 'legend.title.style.color'
            },
            'title-fontStyle' : {
                'vizPath' : 'legend.title.style.fontStyle'
            }
        };
    };

    return LegendPropConfig;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/renderer/LineRendererInfo',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/chart/adapters/renderer/RendererInfoBase'
],
function(OOUtil, RendererInfoBase) {
// @formatter:on
    var LineRendererInfo = function(id, vizPath) {
        LineRendererInfo.superclass.constructor.apply(this, arguments);

        this.implClassPath = 'sap/viz/controls/chart/adapters/renderer/LineRendererInfo';
        this.generator = 'lineRenderer';
    };
    OOUtil.extend(LineRendererInfo, RendererInfoBase);

    LineRendererInfo.prototype._renderGeneral = function(paras) {
        if (paras.dash || paras.color ||paras.width) {
            return true;
        } else {
            return false;
        }
    };

    LineRendererInfo.prototype._renderSpecified = function(paras) {
        if (paras.dash || paras.color || paras.width) {
            return true;
        } else {
            return false;
        }
    };

    return LineRendererInfo;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/config/LinePropConfig',[
    'sap/viz/controls/chart/adapters/renderer/LineRendererInfo'
],
function(LineRendererInfo) {
// @formatter:on
    var LinePropConfig = {};

    var _getLineRenderer = function(paraName) {
        return {
            'id' : 'plotArea.lineRenderer',
            'infoClass' : LineRendererInfo,
            'vizPath' : 'plotArea.lineRenderer',
            'paraName' : paraName
        };
    };
    LinePropConfig.instance = function() {
        return {
            'lineFill' : {
                'renderer' : _getLineRenderer('color')
            },
            'lineStyle' : {
                'renderer' : _getLineRenderer('dash')
            },
            'plotArea.width' : {
                'renderer' : _getLineRenderer('width'),
                'vizPath' : 'plotArea.width'
            }
        };
    };

    return LinePropConfig;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/config/CombinationLinePropConfig',[
    'sap/viz/controls/chart/adapters/renderer/LineRendererInfo'
],
function(LineRendererInfo) {
// @formatter:on
    var LinePropConfig = {};

    var _getLineRenderer = function(paraName) {
        return {
            'id' : 'plotArea.line.lineRenderer',
            'infoClass' : LineRendererInfo,
            'vizPath' : 'plotArea.line.lineRenderer',
            'paraName' : paraName
        };
    };
    LinePropConfig.instance = function() {
        return {
            'lineFill' : {
                'renderer' : _getLineRenderer('color')
            },
            'lineStyle' : {
                'renderer' : _getLineRenderer('dash')
            },
            'plotArea.line.width' : {
                'renderer' : _getLineRenderer('width'),
                'vizPath' : 'plotArea.line.width'
            }
        };
    };

    return LinePropConfig;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/config/TrellisAxisPropConfig',[],
function() {
// @formatter:on
    var TrellisAxisPropConfig = {};
    
    TrellisAxisPropConfig.instance = function() {
        return {
            'rowAxisLabelStyle' : {
                'vizPath' : 'rowAxis.label.style'
            },
            'rowAxisLabelVisible' : {
                'vizPath' : 'rowAxis.label.visible'
            },
            'columnAxisLabelStyle' : {
                'vizPath' : 'columnAxis.label.style'
            },
            'columnAxisLabelVisible' : {
                'vizPath' : 'columnAxis.label.visible'
            },
            'rowAxisTitleStyle' : {
                'vizPath' : 'rowAxis.title.style'
            },
            'rowAxisTitleVisible' : {
                'vizPath' : 'rowAxis.title.visible'
            },
            'columnAxisTitleStyle' : {
                'vizPath' : 'columnAxis.title.style'
            },
            'columnAxisTitleVisible' : {
                'vizPath' : 'columnAxis.title.visible'
            },
            'categoryAxisLabelStyle' : {
                'vizPath' : 'categoryAxis.label.style'
            },
            'categoryAxisLabelVisible' : {
                'vizPath' : 'categoryAxis.label.visible'
            },
            'valueAxisLabelStyle' : {
                'vizPath' : 'valueAxis.label.style'
            },
            'valueAxisLabelVisible' : {
                'vizPath' : 'valueAxis.label.visible'
            },   
            'categoryAxisTitleStyle' : {
                'vizPath' : 'categoryAxis.title.style'
            },
            'categoryAxisTitleVisible' : {
                'vizPath' : 'categoryAxis.title.visible'
            },
            'valueAxisTitleStyle' : {
                'vizPath' : 'valueAxis.title.style'
            },
            'valueAxisTitleVisible' : {
                'vizPath' : 'valueAxis.title.visible'
            },
            'valueAxis2LabelStyle' : {
                'vizPath' : 'valueAxis2.label.style'
            },
            'valueAxis2LabelVisible' : {
                'vizPath' : 'valueAxis2.label.visible'
            },
            'valueAxis2TitleVisible' : {
                'vizPath' : 'valueAxis2.title.visible'
            },
            'valueAxis2TitleStyle' : {
                'vizPath' : 'valueAxis2.title.style'
            }       
        };
    };

    return TrellisAxisPropConfig;
});
define('sap/viz/controls/chart/adapters/renderer/DimensionLabelRendererInfo',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/chart/adapters/renderer/DataLabelRendererInfo'
],
function(OOUtil, DataLabelRendererInfo) {
// @formatter:on

    var DimensionLabelRendererInfo = function(id, vizPath) {
        DimensionLabelRendererInfo.superclass.constructor.apply(this, arguments);

        this.implClassPath = 'sap/viz/controls/chart/adapters/renderer/DimensionLabelRendererInfo';
        this.generator = 'dimensionLabelRenderer';
    };

    OOUtil.extend(DimensionLabelRendererInfo, DataLabelRendererInfo);

    DimensionLabelRendererInfo.prototype._ignoreKey = function(paraKey, paras, props) {
        switch (paraKey) {
            case 'textVisible' :
                if (props.textVisible === undefined) {
                    if (paras.textVisible === props.dimensionLabelVisible) {
                        return true;
                    }
                }
                break;
            case 'iconVisible' :
                if (props.iconVisible === undefined) {
                    return true;
                }
                break;
            case 'fontFamily' :
                if (paras.fontFamily === undefined) {
                    return true;
                }
                break;
            case 'fontSize' :
                if (paras.fontSize === undefined) {
                    return true;
                }
                break;
            case 'fontWeight' :
                if (paras.fontWeight === undefined) {
                    return true;
                }
                break;
            case 'fontColor' :
                if (paras.fontColor === undefined) {
                    return true;
                }
                break;
            case 'fontStyle' :
                if (paras.fontStyle === undefined) {
                    return true;
                }
                break;
        }

        return false;
    };

    DimensionLabelRendererInfo.prototype._updatePropsGeneral = function(context, key, value) {
        DimensionLabelRendererInfo.superclass._updatePropsGeneral.apply(this, arguments);
        this._sortParameters();        
    };

    return DimensionLabelRendererInfo;
});
// @formatter:off
define('sap/viz/controls/chart/adapters/config/DimensionLabelPropConfig',[
    'sap/viz/controls/chart/adapters/renderer/DimensionLabelRendererInfo'
],
function(DimensionLabelRendererInfo) {
// @formatter:on
    var DimensionLabelPropConfig = {};

    var _getCfgRenderer = function(paraName) {
        return {
            'id' : 'plotArea.dimensionLabel.renderer',
            'infoClass' : DimensionLabelRendererInfo,
            'vizPath' : 'plotArea.dimensionLabel.renderer',
            'paraName' : paraName
        };
    };

    DimensionLabelPropConfig.instance = function() {
        return {
            'dimensionLabelVisible' : {
                'vizPath' : 'plotArea.dimensionLabel.visible'
            },
            'textVisible' : {
                'renderer' : _getCfgRenderer('textVisible')
            },
            'fontFamily' : {
                'renderer' : _getCfgRenderer('fontFamily'),
                'vizPath' : 'plotArea.dimensionLabel.style.fontFamily'
            },
            'fontSize' : {
                'renderer' : _getCfgRenderer('fontSize'),
                'vizPath' : 'plotArea.dimensionLabel.style.fontSize'
            },
            'fontWeight' : {
                'renderer' : _getCfgRenderer('fontWeight'),
                'vizPath' : 'plotArea.dimensionLabel.style.fontWeight'
            },
            'fontColor' : {
                'renderer' : _getCfgRenderer('fontColor'),
                'vizPath' : 'plotArea.dimensionLabel.style.color'
            },
            'fontStyle' : {
                'renderer' : _getCfgRenderer('fontStyle'),
                'vizPath' : 'plotArea.dimensionLabel.style.fontStyle'
            }
        };
    };

    return DimensionLabelPropConfig;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/PropertyMap',[
    'sap/viz/controls/chart/adapters/config/DataLabelPropConfig',
    'sap/viz/controls/chart/adapters/config/DataPointPropConfig',
    'sap/viz/controls/chart/adapters/config/ChartTitlePropConfig',
    'sap/viz/controls/chart/adapters/config/ChartAreaPropConfig',
    'sap/viz/controls/chart/adapters/config/PlotAreaPropConfig',
    'sap/viz/controls/chart/adapters/config/CategoryAxisPropConfig',
    'sap/viz/controls/chart/adapters/config/CategoryAxis2PropConfig',
    'sap/viz/controls/chart/adapters/config/CategoryAxisTitlePropConfig',
    'sap/viz/controls/chart/adapters/config/CategoryAxis2TitlePropConfig',
    'sap/viz/controls/chart/adapters/config/ValueAxisPropConfig',
    'sap/viz/controls/chart/adapters/config/ValueAxis2PropConfig',
    'sap/viz/controls/chart/adapters/config/ValueAxisTitlePropConfig',
    'sap/viz/controls/chart/adapters/config/ValueAxis2TitlePropConfig',
    'sap/viz/controls/chart/adapters/config/LegendPropConfig',
    'sap/viz/controls/chart/adapters/config/LinePropConfig',
    'sap/viz/controls/chart/adapters/config/CombinationLinePropConfig',
    'sap/viz/controls/chart/adapters/config/TrellisAxisPropConfig',
    'sap/viz/controls/common/property/VizPropertyZone',
    'sap/viz/controls/chart/adapters/config/DimensionLabelPropConfig'
],
function(DataLabelPropConfig, DataPointPropConfig, ChartTitlePropConfig, ChartAreaPropConfig, PlotAreaPropConfig,
    CategoryAxisPropConfig, CategoryAxis2PropConfig, CategoryAxisTitlePropConfig, CategoryAxis2TitlePropConfig, 
    ValueAxisPropConfig, ValueAxis2PropConfig, ValueAxisTitlePropConfig, ValueAxis2TitlePropConfig, LegendPropConfig, 
    LinePropConfig, CombinationLinePropConfig, TrellisAxisPropConfig, VizPropertyZone, DimensionLabelPropConfig) {
// @formatter:on

    var PropertyMap = {};

    PropertyMap.getPropConfig = function(zoneType, isHorizontal, isStacked, isCombination) {
        switch (zoneType) {
            case VizPropertyZone.DATA_LABEL :
                return DataLabelPropConfig.instance();
            case VizPropertyZone.DATA_POINT :
                return DataPointPropConfig.instance(isStacked, isCombination);
            case VizPropertyZone.DATA_POINT_MARKER :
                return DataPointPropConfig.instance(isStacked, isCombination);   
            case VizPropertyZone.CATEGORY_AXIS :
                return CategoryAxisPropConfig.instance();
            case VizPropertyZone.CATEGORY_AXIS2 :
                return CategoryAxis2PropConfig.instance();
            case VizPropertyZone.CATEGORY_AXIS_TITLE :
                return CategoryAxisTitlePropConfig.instance();
            case VizPropertyZone.CATEGORY_AXIS2_TITLE :
                return CategoryAxis2TitlePropConfig.instance();
            case VizPropertyZone.VALUE_AXIS :
                return ValueAxisPropConfig.instance();
            case VizPropertyZone.VALUE_AXIS2 :
                return ValueAxis2PropConfig.instance();
            case VizPropertyZone.VALUE_AXIS_TITLE :
                return ValueAxisTitlePropConfig.instance();
            case VizPropertyZone.VALUE_AXIS2_TITLE :
                return ValueAxis2TitlePropConfig.instance();
            case VizPropertyZone.CHART_TITLE :
                return ChartTitlePropConfig.instance();
            case VizPropertyZone.CHART_AREA :
                return ChartAreaPropConfig.instance();
            case VizPropertyZone.PLOT_AREA :
                return PlotAreaPropConfig.instance();
            case VizPropertyZone.LEGEND :
                return LegendPropConfig.instance();
            case VizPropertyZone.LINE :
                return LinePropConfig.instance();
            case VizPropertyZone.COMBINATION_LINE : 
                return CombinationLinePropConfig.instance();
            case VizPropertyZone.ROW_AXIS :
                return TrellisAxisPropConfig.instance();
            case VizPropertyZone.COLUMN_AXIS :
                return TrellisAxisPropConfig.instance();
            case VizPropertyZone.ROW_AXIS_TITLE :
                return TrellisAxisPropConfig.instance();
            case VizPropertyZone.COLUMN_AXIS_TITLE :
                return TrellisAxisPropConfig.instance();
            case VizPropertyZone.ROW_AXIS2 :
                return TrellisAxisPropConfig.instance();
            case VizPropertyZone.COLUMN_AXIS2 :
                return TrellisAxisPropConfig.instance();
            case VizPropertyZone.ROW_AXIS2_TITLE:
                return TrellisAxisPropConfig.instance();
            case VizPropertyZone.COLUMN_AXIS2_TITLE :
                return TrellisAxisPropConfig.instance(); 
            case VizPropertyZone.DIMENSION_LABEL:
                return DimensionLabelPropConfig.instance();       
        }
    };

    return PropertyMap;
});

define('sap/viz/controls/chart/adapters/PropFnGenerator',[],function() {
    var PropFnGenerator = function(name, fn) {
        this.__className = "sap.viz.controls.chart.adapters.PropFnGenerator";
        this._name = name;
        this._fn = fn;
    };

    var prototype = PropFnGenerator.prototype;
    prototype.generateFn = function(paras) {
        return this._fn.apply(null, [paras]);
    };

    prototype.getName = function() {
        return this._name;
    };

    return PropFnGenerator;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/PropFnGeneratorRegistry',[
	'sap/viz/controls/chart/adapters/PropFnGenerator'
], function(PropFnGenerator) {
// @formatter:on
    var PropFnGeneratorRegistry = {};

    var _generators = {};

    PropFnGeneratorRegistry.register = function(name, fn) {
        var generators = _generators;
        if (generators.hasOwnProperty(name)) {
            throw "PropFnGenerator '" + name + "' exists.";
        }

        generators[name] = new PropFnGenerator(name, fn);
    };

    PropFnGeneratorRegistry.unregister = function(name) {
        delete _generators[name];
    };

    PropFnGeneratorRegistry.get = function(name) {
        return _generators[name];
    };

    return PropFnGeneratorRegistry;
});

// @formatter:off
define('sap/viz/controls/chart/adapters/PropertyAdapter',[
    'require',
    'jquery',
    'sap/viz/controls/chart/adapters/PropertyMap',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/events/EventDispatcher',
    'sap/viz/controls/common/property/VizPropertyZone',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/chart/adapters/PropFnGeneratorRegistry',
    'sap/viz/controls/chart/adapters/renderer/RendererInfoBase',
    'sap/viz/controls/common/utils/ChartTypeUtil'
],
function(r, $, PropertyMap, ChartConst, EventDispatcher, VizPropertyZone, OOUtil, Utils, PropFnGeneratorRegistry,
    RendererInfoBase, ChartTypeUtil) {
// @formatter:on

    var require = r || require;
    var PropertyAdapter = function(helper, rendererInfoJSON) {
        PropertyAdapter.superclass.constructor.apply(this, arguments);
        this.__className = 'sap.viz.controls.chart.adapters.PropertyAdapter';

        this._helper = helper;

        /*
         * {
         *     id1 : rendererInfo1,
         *     id2 : rendererInfo2,
         *  ...
         * }
         */
        this._rendererInfo = {};
        if (rendererInfoJSON) {
            this.loadRendererInfo(rendererInfoJSON);
        }
    };

    PropertyAdapter.VALID = "VALID";
    PropertyAdapter.INVALID = "INVALID";
    PropertyAdapter.MIX = "MIX";

    OOUtil.extend(PropertyAdapter, EventDispatcher);

    function getProp(cache, obj, propPath) {
        if ( cache.hasOwnProperty(propPath) ) {
            return cache[ propPath ];
        }
        var path = propPath.split('.'),
            i, len, prop = obj;

        for (i = 0, len = path.length; i < len; i++) {
            prop = prop[ path[i] ];
            if ( prop === undefined ) {
                return (cache[ propPath ] = undefined);
            }
        }
        return (cache[ propPath ] = prop);
    }

    function getPropertyValueFromZoneContext (zone, key) {
        switch (zone.type() + ":" + key) {
        case "LINE:color":
        case "COMBINATION_LINE:color":
        case "DATA_POINT:iconColor":
        case "DATA_POINT_MARKER:iconColor":
        case "DATA_POINT:dataPointShapeFill":
            return (zone.extraContext() || {}).color;
        }
        return undefined;
    }

    function mixPropertiesForZones (zones, keys, paraNames, info, propConfig, getVizProp) {
        var mixedValues = {},
            defaultValues = {};

        paraNames = paraNames.slice();

        // get default values
        keys.forEach(function (key, i) {
            defaultValues[ paraNames[i] ] = getVizProp( propConfig[key].vizPath || key );
        });

        if ( zones.length === 1 && zones[0].dimensionContext() === undefined ) {
            // the condition means selected all, so we merge all customer renderer info properties
            if (info) {
                mixedValues = info.getMergedProperties( paraNames, defaultValues );
            }
            else {
                mixedValues = defaultValues;
            }
        }
        else {
            zones.some(function (zone, i) {
                if (paraNames.length === 0) { return true; }

                var values = {};

                if (info) {
                    values = info.getProperties( zone.dimensionContext(), paraNames, i > 0 );
                }

                paraNames = paraNames.filter(function (key) {

                    if ( values[key] === undefined ) {
                        values[key] = getPropertyValueFromZoneContext(zone, key);
                    }
                    if ( values[key] === undefined ) {
                        values[key] = defaultValues[key];
                    }
                    if ( mixedValues[key] === undefined ) {
                        mixedValues[key] = values[key];
                    }
                    else if ( !Utils.deepEqual(values[key], mixedValues[key] )) {
                        mixedValues[key] = null;
                        // filter this key because it's value is mixed, no need to judge from other zones any more
                        return false;
                    }

                    return true;
                });
            });
        }

        return mixedValues;
    }

    PropertyAdapter.prototype.query = function(options) {
        if ( (options && options.propertyZones) == null ) {
            return null;
        }
        if ( options.propertyZones.length === 0 ) { return {}; }

        var zones = options.propertyZones,
            propFields = options.propertyFields,
            chartType = options.chartType,
            propNames,
            self = this,
            merged = {},
            propFieldsLookup,
            propConfig,

            // get viz properties once and save them for all query this time
            // big enhancement compering with old _getVizProp
            getVizProp = Utils.currying( getProp, {}, self._helper.vizProperties() );

        // put all prop fields to an array to be iterated later
        // loop on array is big faster than for/in loop
        propNames = Object.keys(propFields).filter(function (key) {
            return propFields[key];
        });

        propConfig = PropertyMap.getPropConfig(zones[0].type(), ChartTypeUtil.isHorizontal(chartType), 
            !!ChartTypeUtil.getStacking(chartType), chartType === "info/combination" || chartType === "info/horizontal_combination");

        if ( propConfig == null) {
            // if no propConfig, return values from viz properties
            return propNames.reduce(function (obj, key) {
                obj[key] = getVizProp(key);
                return obj;
            }, {});
        }

        // grep prop names that has no propConfig or renderer
        propFieldsLookup = propNames.filter(function (key) {
            var cfg = propConfig[key];
            if ( cfg == null) {
                merged[key] = getVizProp(key);
                return false;
            }
            if ( cfg.renderer == null) {
                merged[key] = getVizProp(cfg.vizPath || key);
                return false;
            }
            return true;

        }).reduce(function (idx, key) {
            // collect prop names group by renederer.id
            var cfg = propConfig[key],
                list = idx[ cfg.renderer.id ] || ( idx[ cfg.renderer.id ] = [] );
            list.push( key );
            return idx;
        }, {});

        Object.keys(propFieldsLookup).forEach(function (rendererId) {
            var keys = propFieldsLookup[ rendererId ],
                info = self._rendererInfo[ rendererId ],
                paraNames, mixedValues;

            // map prop field names to renderer.paraName
            paraNames = keys.map(function (key) {
                return propConfig[key].renderer.paraName || key;
            });

            mixedValues = mixPropertiesForZones( zones, keys, paraNames, info, propConfig, getVizProp );

            // merge mixedValues to merged
            keys.forEach(function (key, i) {
                merged[key] = mixedValues[ paraNames[i] ];
            });
        });

        // fill up undefiend props, undefined means value unknown
        propNames.forEach(function (key) {
            if (merged[key] === undefined) {
                merged[key] = getVizProp( propConfig[key] ? (propConfig[key].vizPath || key) : key);
            }
        });

        return merged;
    };

    PropertyAdapter.prototype._getCfg = function(propertyConfigs, rProperty) {
        for (var link in propertyConfigs) {
            if (propertyConfigs && propertyConfigs[link] && propertyConfigs[link].renderer && 
                propertyConfigs[link].renderer.paraName === rProperty) {
                return propertyConfigs[link];
            }
        }
        return null;
    };
    /*
     * options:
     * {
     *     propertyZones : [
     *         {...},
     *         ...
     *     ],
     *     properties : {
     *         'link1' : '...',
     *         'link2' : '...',
     *         ...
     *     }
     * }
     */
    PropertyAdapter.prototype.update = function(options) {
        if (!options || !options.propertyZones) {
            return;
        }

        var propertyZones = options.propertyZones;
        var properties = options.properties;
        var chartType = options.chartType;

        /**
         * link: Name between PropertyEditor & PropertyConfig
         * rProperty: para name in renderer
         * nPath: property path in viz instance
         */
        var rendererProperties = {};
        var nativeProperties = {};
        var info;

        for (var i in propertyZones) {
            var propertyZone = propertyZones[i];
            // TODO: Should get config by section type, will refactor in next version
            var propConfig = PropertyMap.getPropConfig( propertyZone.type(), ChartTypeUtil.isHorizontal(chartType),
                !!ChartTypeUtil.getStacking(chartType), chartType === "info/combination" || chartType === "info/horizontal_combination");

            var rendererInfos = {};
            var cfg;
            // Store properties into rendererInfo or nativeProperties
            for (var propName in properties) {
                var propValue = properties[propName];
                if (propConfig && propConfig[propName]) {
                    cfg = propConfig[propName];
                    if (cfg.renderer) {
                        /*
                         * Assign as renderer info:
                         * renderer : {
                         *     'id' : '...',
                         *     'infoClass' : {...},
                         *     'vizPath' : '...',
                         *     'paraName' : '...'
                         * }
                         */
                        var rendererCfg = cfg.renderer;
                        if (!this._rendererInfo[rendererCfg.id]) {
                            this._rendererInfo[rendererCfg.id] = new rendererCfg.infoClass(rendererCfg.id, 
                                rendererCfg.vizPath);
                        }
                        rendererInfos[rendererCfg.id] = this._rendererInfo[rendererCfg.id];
                        var context = propertyZone.getDimensionContext();
//                        if (rendererCfg.useStackContext === true) {
//                            context = propertyZone.stackContext();
//                        }
                        this._rendererInfo[rendererCfg.id].setProperty(context, rendererCfg.paraName, propValue);
                    } else if (cfg.vizPath) {
                        /*
                         * Assign as property:
                         * vizPath : '...'
                         */
                        nativeProperties[cfg.vizPath] = propValue;
                    }
                } else {
                    // Assign as property by default
                    nativeProperties[propName] = propValue;
                }
            }

            // Filter rendererInfo to use rendererProperties or fall back to nativeProperties
            for (var id in rendererInfos) {
                info = rendererInfos[id];

                // Filter rendererInfo for rendererProperties
                if (info.simplify().length > 0) {
                    rendererProperties[info.vizPath] = info;
                } else {
                    rendererProperties[info.vizPath] = undefined;
                }

                // Fall back filtered rendererInfo to nativeProperties
                if (info.fallbackParas()) {
                    var paras = info.fallbackParas();
                    for (var paraName in paras) {
                        var paraValue = paras[paraName];

                        cfg = this._getCfg(propConfig, paraName);
                        if (cfg && cfg.vizPath) {
                            /*
                             * Assign as property:
                             * vizPath : '...'
                             */
                            nativeProperties[cfg.vizPath] = paraValue;
                        }
                    }
                }
            }
        }

        // Update properties from rendererProperties and nativeProperties
        properties = {};
        var vizPath;
        for (vizPath in rendererProperties) {
            info = rendererProperties[vizPath];
            if (info) {
                PropertyAdapter._parseVizPath(vizPath, PropertyAdapter._getRenderer(info.generator, info.parameters()), properties);
            } else {
                PropertyAdapter._parseVizPath(vizPath, null, properties);
            }
        }
        for (vizPath in nativeProperties) {
            PropertyAdapter._parseVizPath(vizPath, nativeProperties[vizPath], properties);
        }
        this._helper.propertiesWithEvents(properties);
    };

    /*
     * Get corresponding viz property value.
     */
    PropertyAdapter.prototype._getVizProp = function(propPath) {
        var vizProp = this._helper.vizProperties();

        try {
            var pathArray = propPath.split('.');
            for (var i in pathArray) {
                vizProp = vizProp[pathArray[i]];
            }
        } catch(e) {
            return undefined;
        }
        return vizProp;
    };

    PropertyAdapter.prototype.saveRendererInfo = function() {
        var json = {};
        var type = this._helper.vizType();
        for (var id in this._rendererInfo) {
            if (this._validRendererInfo(id, type) !== PropertyAdapter.VALID) {
                continue;
            }
            json[id] = this._rendererInfo[id].toJSON();
            var infoJSON = this._rendererInfo[id];
            var validParameters = this._validateParameters(id, infoJSON.parameters());
            json[id].parameters = validParameters;
        }
        return json;
    };
    PropertyAdapter.prototype.validateRenderer = function(properties) {
        var type = this._helper.vizType();
        properties = properties || {};

        for (var id in this._rendererInfo) {
            var infoJSON = this._rendererInfo[id];
            if (this._validRendererInfo(id, type) === PropertyAdapter.INVALID) {
                PropertyAdapter._parseVizPath(infoJSON.vizPath, null, properties);
                continue;
            } else if (this._validRendererInfo(id, type) === PropertyAdapter.MIX){
                continue;
            }
            var validParameters = this._validateParameters(id, infoJSON.parameters());
            // Parse to properties
            PropertyAdapter._parseVizPath(infoJSON.vizPath, PropertyAdapter._getRenderer(infoJSON.generator, validParameters), properties);
        }
        return properties;
    };

    // 1. Validation returns VALID when render id and chart type match.
    // 2. Validation returns MIX when render id and chart type match, and property exists in render info.
    // 3. Validation returns VALID if render id is not listed.
    var rendererValidationTable = [ {        
        id: "categoryAxis.labelRenderer.categoryAxisLabelRenderer",
        type: [
            ChartConst.TYPE_BAR,
            ChartConst.TYPE_COLUMN,
            ChartConst.TYPE_DUAL_BAR,
            ChartConst.TYPE_DUAL_COLUMN,
            ChartConst.TYPE_LINE,
            ChartConst.TYPE_HORIZONTAL_LINE,
            ChartConst.TYPE_DUAL_LINE,
            ChartConst.TYPE_DUAL_HORIZONTAL_LINE,
            ChartConst.TYPE_COMBINATION,
            ChartConst.TYPE_HORIZONTAL_COMBINATION

        ] 
    },{
        id: "plotArea.markerRenderer.dataPointRenderer",
        type: [
            ChartConst.TYPE_COMBINATION,
            ChartConst.TYPE_HORIZONTAL_COMBINATION
            // ChartConst.TYPE_BAR,
            // ChartConst.TYPE_COLUMN

        ]
    },{
        id: "plotArea.markerRenderer.barShapeRenderer",
        type: [
            ChartConst.TYPE_BAR,
            ChartConst.TYPE_COLUMN,
            ChartConst.TYPE_DUAL_BAR,
            ChartConst.TYPE_DUAL_COLUMN
            // ChartConst.TYPE_COMBINATION,
            // ChartConst.TYPE_HORIZONTAL_COMBINATION
        ] 
    }, {
        id: "plotArea.markerRenderer.barShapeRenderer",
        property: "plotArea.markerRenderer.lineMarkerRenderer",
        type: [
            ChartConst.TYPE_LINE,
            ChartConst.TYPE_HORIZONTAL_LINE,
            ChartConst.TYPE_DUAL_LINE,
            ChartConst.TYPE_DUAL_HORIZONTAL_LINE
            // ChartConst.TYPE_COMBINATION,
            // ChartConst.TYPE_HORIZONTAL_COMBINATION
        ]
    }, {
        id: "plotArea.markerRenderer.lineMarkerRenderer",
        type: [
            ChartConst.TYPE_LINE,
            ChartConst.TYPE_HORIZONTAL_LINE,
            ChartConst.TYPE_DUAL_LINE,
            ChartConst.TYPE_DUAL_HORIZONTAL_LINE
            // ChartConst.TYPE_COMBINATION,
            // ChartConst.TYPE_HORIZONTAL_COMBINATION
        ]
    }, {
        id: "plotArea.markerRenderer.lineMarkerRenderer",
        property: "plotArea.markerRenderer.barShapeRenderer",
        type: [
            ChartConst.TYPE_BAR,
            ChartConst.TYPE_COLUMN,
            ChartConst.TYPE_DUAL_BAR,
            ChartConst.TYPE_DUAL_COLUMN
            // ChartConst.TYPE_COMBINATION,
            // ChartConst.TYPE_HORIZONTAL_COMBINATION
        ]
    }, {
        id: "plotArea.dataLabel.renderer",
        type: [
            ChartConst.TYPE_BAR,
            ChartConst.TYPE_COLUMN,
            ChartConst.TYPE_DUAL_BAR,
            ChartConst.TYPE_DUAL_COLUMN,
            ChartConst.TYPE_LINE,
            ChartConst.TYPE_HORIZONTAL_LINE,
            ChartConst.TYPE_DUAL_LINE,
            ChartConst.TYPE_DUAL_HORIZONTAL_LINE,
            ChartConst.TYPE_PIE,
            ChartConst.TYPE_DONUT,
            // ChartConst.TYPE_COMBINATION,
            // ChartConst.TYPE_HORIZONTAL_COMBINATION,
            ChartConst.TYPE_SCATTER,
            ChartConst.TYPE_BUBBLE,
            ChartConst.TYPE_TREEMAP,
            ChartConst.TYPE_TRELLIS_BAR,
            ChartConst.TYPE_TRELLIS_LINE,
            ChartConst.TYPE_TRELLIS_HORIZONTAL_LINE,
            ChartConst.TYPE_TRELLIS_COLUMN,
            ChartConst.TYPE_TRELLIS_DUAL_COLUMN,
            ChartConst.TYPE_TRELLIS_DUAL_LINE,
            ChartConst.TYPE_TRELLIS_DUAL_HORIZONTAL_LINE,
            ChartConst.TYPE_TRELLIS_DUAL_BAR,
            ChartConst.TYPE_TRELLIS_SCATTER,
            ChartConst.TYPE_TRELLIS_BUBBLE,
            ChartConst.TYPE_TRELLIS_100_STACKED_COLUMN,
            ChartConst.TYPE_TRELLIS_STACKED_COLUMN,
            ChartConst.TYPE_TRELLIS_STACKED_BAR,
            ChartConst.TYPE_TRELLIS_100_STACKED_BAR,
            ChartConst.TYPE_TRELLIS_COMBINATION,
            ChartConst.TYPE_TRELLIS_HORIZONTAL_COMBINATION,
            ChartConst.TYPE_TRELLIS_PIE,
            ChartConst.TYPE_TRELLIS_DONUT
        ]
    },{
        id: "plotArea.dimensionLabel.renderer",
        type: [
            ChartConst.TYPE_TREEMAP
        ]
    } ];

    PropertyAdapter.prototype._validRendererInfo = function(id, type) {
        var i, j, info, checked = false;
        for (i = 0; i < rendererValidationTable.length; i++) {
            info = rendererValidationTable[i];

            if (id === info.id) {
                checked = true;
                for (j = 0; j < info.type.length; j++) {
                    if (type === info.type[j]) {
                        if (info.property) {
                            if (this._rendererInfo.hasOwnProperty(info.property)) {
                                return PropertyAdapter.MIX;
                            } else {
                                return PropertyAdapter.INVALID;
                            }
                        } else {
                            return PropertyAdapter.VALID;
                        }
                    }
                }
            }
        }
        return checked ? PropertyAdapter.INVALID : PropertyAdapter.VALID;
    };

    /*PropertyAdapter.prototype._validRendererInfo = function(id, type) {
        if (id === "categoryAxis.labelRenderer.categoryAxisLabelRenderer") {
            if (type !== ChartConst.TYPE_LINE && type !== ChartConst.TYPE_HORIZONTAL_LINE &&
                type !== ChartConst.TYPE_BAR && type !== ChartConst.TYPE_COLUMN &&
                type !== ChartConst.TYPE_DUAL_BAR && type !== ChartConst.TYPE_DUAL_COLUMN)  {
                return PropertyAdapter.INVALID;
            }
        } else if (id === "plotArea.markerRenderer.barShapeRenderer") {
            if (type !== ChartConst.TYPE_BAR && type !== ChartConst.TYPE_COLUMN &&
                type !== ChartConst.TYPE_LINE && type !== ChartConst.TYPE_HORIZONTAL_LINE &&
                type !== ChartConst.TYPE_DUAL_BAR && type !== ChartConst.TYPE_DUAL_COLUMN)  {
                return PropertyAdapter.INVALID;
            } else if (type === ChartConst.TYPE_LINE || type === ChartConst.TYPE_HORIZONTAL_LINE) {
                if (!this._rendererInfo.hasOwnProperty("plotArea.markerRenderer.lineMarkerRenderer")) {
                    return PropertyAdapter.INVALID;
                }
                return PropertyAdapter.MIX;
            }
        } else if (id === "plotArea.markerRenderer.lineMarkerRenderer") {
            if (type !== ChartConst.TYPE_BAR && type !== ChartConst.TYPE_COLUMN &&
                type !== ChartConst.TYPE_LINE && type !== ChartConst.TYPE_HORIZONTAL_LINE &&
                type !== ChartConst.TYPE_DUAL_BAR && type !== ChartConst.TYPE_DUAL_COLUMN) {
                return PropertyAdapter.INVALID;
            } else if (type === ChartConst.TYPE_BAR || type === ChartConst.TYPE_COLUMN ||
                type === ChartConst.TYPE_DUAL_BAR || type === ChartConst.TYPE_DUAL_COLUMN) {
                if (!this._rendererInfo.hasOwnProperty("plotArea.markerRenderer.barShapeRenderer")) {
                    return PropertyAdapter.INVALID;
                }
                return PropertyAdapter.MIX;
            }
        } else if (id === "plotArea.dataLabel.renderer") {
            if (type !== ChartConst.TYPE_BAR && type !== ChartConst.TYPE_COLUMN &&
                type !== ChartConst.TYPE_LINE && type !== ChartConst.TYPE_HORIZONTAL_LINE &&
                type !== ChartConst.TYPE_DUAL_BAR && type !== ChartConst.TYPE_DUAL_COLUMN &&
                type !== ChartConst.TYPE_PIE && type !== ChartConst.TYPE_DONUT) {
                return PropertyAdapter.INVALID;
            }
        }
        return PropertyAdapter.VALID;
    };*/

    PropertyAdapter.prototype._validateParameters = function(id, parameters) {
        var type = this._helper.vizType();
        if (type === ChartConst.TYPE_BAR || type === ChartConst.TYPE_COLUMN || type === ChartConst.TYPE_DUAL_BAR || type === ChartConst.TYPE_DUAL_COLUMN) {
            return parameters;
        }

        var validParameters = Utils.clone(parameters);
        for (var i in validParameters) {
            if (id === "plotArea.dataLabel.renderer") {
                validParameters[i].paras.iconVisible = false;
            }
        }
        return validParameters;
    };
    PropertyAdapter.parseRendererInfo = function(rendererInfo, properties) {
        properties = properties || {};

        for (var id in rendererInfo) {
            var infoJSON = rendererInfo[id];
            // Parse to properties
            PropertyAdapter._parseVizPath(infoJSON.vizPath, PropertyAdapter._getRenderer(infoJSON.generator, infoJSON.parameters), properties);
        }
        return properties;
    };
    PropertyAdapter.prototype.loadRendererInfo = function(rendererInfo) {
        var requires = [];
        var id;
        for (id in rendererInfo) {
            var infoJSON = rendererInfo[id];
            // Load impl classes
            requires.push(infoJSON.implClassPath);
        }
        // Update render info with instance
        for(id in rendererInfo) {
            this._rendererInfo[id] = RendererInfoBase.fromJSON(rendererInfo[id]);
        }
    };

    PropertyAdapter.prototype.reset = function() {
        this._rendererInfo = {};
    };

    /*
     * Choose renderer and update it to the corresponding property in viz instance.
     */
    PropertyAdapter._getRenderer = function(name, parameters) {
        var generator = PropFnGeneratorRegistry.get(name);

        return (generator) ? generator.generateFn(parameters) : null;
    };

    PropertyAdapter._parseVizPath = function(vizPath, value, properties) {
        var pathArray = vizPath.split('.');
        if (pathArray.length > 0) {
            var temp = properties;
            for (var i = 0; i < pathArray.length; i++) {
                if (i === pathArray.length - 1) {
                    temp[pathArray[i]] = value;
                    break;
                }
                temp[pathArray[i]] = temp[pathArray[i]] || {};
                temp = temp[pathArray[i]];
            }
        }
        return properties;
    };

    return PropertyAdapter;
});

// @formatter:off
define('sap/viz/controls/chart/views/DropZoneProvider',[
    'jquery',
    'sap/viz/controls/common/constants/FeedConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/utils/TrellisUtils',
    'sap/viz/controls/common/metadata/MetadataFactory'
],
function($, FeedConst, LangManager, FeedUtils,
    ChartTypeUtil, TrellisUtils, MetadataFactory) {
// @formatter:on

    var trellisNameMapping = {'trellisRow': "trellisRow", 'trellisColumn': "trellisColumn"};

    var feedingZoneTextIdx = {
        "trellisRow":               "VIZ_COMMON_ROWS",
        "trellisColumn":            "VIZ_COMMON_COLUMNS",

        "horizontal:valueAxis":     "VIZ_COMMON_XAXIS",
        "horizontal:valueAxis2":    "VIZ_COMMON_XAXIS",
        "horizontal:categoryAxis":  "VIZ_COMMON_YAXIS",
        "vertical:valueAxis":       "VIZ_COMMON_YAXIS",
        "vertical:valueAxis2":      "VIZ_COMMON_YAXIS",
        "vertical:categoryAxis":    "VIZ_COMMON_XAXIS",
        "scatter:valueAxis":        "VIZ_COMMON_XAXIS",
        "scatter:valueAxis2":       "VIZ_COMMON_YAXIS",

        "rotate:scatter:valueAxis2":    true,
        "rotate:horizontal:categoryAxis": true,
        "rotate:vertical:valueAxis":    true,
        "rotate:vertical:valueAxis2":   true,
        "rotate:yAxis":                 true,
        "rotate:yAxis2":                true,
        "rotate:trellisRow":            true
    };

    function updateZoneText (zones, vizType) {
        var prefix = ChartTypeUtil.isHorizontal( vizType ) ? "horizontal" : "vertical";

        if ( vizType === "info/scatter" || vizType === "info/bubble" ) {
            prefix = "scatter";
        }

        zones.forEach(function (zone) {
            var name = zone.name;
            zone.text = LangManager.get( feedingZoneTextIdx[ prefix + ":" + name ] || feedingZoneTextIdx[ name ] );
            zone.rotate = feedingZoneTextIdx[ "rotate:" + prefix + ":" + name ] || feedingZoneTextIdx[ "rotate:" + name ] || false;
        });
    }

    function isEmptyBound (zone) {
        if (!zone || !zone.bound) {
            return true;
        }

        var area = zone.bound[0];
        if (!area) {
            return true;
        }

        var width = area[2][0] - area[0][0];
        var height = area[2][1] - area[0][1];
        if (width < 1 || height < 1) {
            return true;
        }
        return false;
    }

    function provide (vizType, feedingZone, viewPadding, viewSize, enableTrellis) {
        var metaData = MetadataFactory.get(vizType),
            zones = feedingZone;

        var bindingIdxById = metaData.getBindingDefs().reduce(function (idx, def) {
            idx[ trellisNameMapping[ def.id() ] || def.id() ] = {
                id: def.id(),
                name: def.id(),
                type: def.type()
            };
            return idx;
        }, {} );

        zones.forEach(function (zone) {
            zone.feedDef = zone.bindDef.map(function (bindDef) {
                return bindingIdxById[ bindDef.id ];
            });
        });

        if ( !ChartTypeUtil.supportMultiChart(vizType) ) {
            updateZoneText( zones, vizType );
            return zones;
        }

        var isMultiChart = ChartTypeUtil.isMultipleChart(vizType),
            column, row;

        if (isMultiChart) {
            for (var i = zones.length - 1; i >= 0; i--) {
                var zoneName = zones[i].name;
                if ( zoneName === "trellisColumn" ) {
                    column = {
                        name : FeedConst.ID_TRELLIS_COLUMN,
                        bound : [zones[i].bound[0]],
                        feedDef : zones[i].feedDef
                    };
                    zones.splice(i, 1);
                }
                else if ( zoneName === "trellisRow" ) {
                    row = {
                        name : FeedConst.ID_TRELLIS_ROW,
                        bound : [zones[i].bound[0]],
                        feedDef : zones[i].feedDef
                    };
                    zones.splice(i, 1);
                } else if (zoneName !== "plot" && zoneName !== "legend") {
                    if ( TrellisUtils.providerName(vizType) === "trellis" ) {
                        //For multi chart, we use mainPlot&legend
                        zones.splice(i, 1);
                    }
                }
            }
            if ( column && !isEmptyBound(column) ) {
                zones.push(column);
            }
            if ( row && !isEmptyBound(row) ) {
                zones.push(row);
            }
        }
        if ( enableTrellis ) {
            appendTrellisZones(zones, viewPadding, viewSize, column, row);
        }
        updateZoneText( zones, vizType );
        return zones;
    }

    function appendTrellisZones (zones, padding, size, column, row) {
        var bound, feedDef;

        feedDef = {
            "id" : 'multiplier',
            "name" : "ChartView Multiplier",
            "type" : "dimension"
        };

        if (!column) {
            //add multiXAxis zone in chart bottom padding
            bound = [[[padding, size.height - padding], [size.width - padding, 0], [size.width - padding, size.height], [0, padding]]];
            column = {
                "name" : FeedConst.ID_TRELLIS_COLUMN,
                "feedDef" : [feedDef],
                "bound" : bound
            };
        }
        if (!row) {
            //add multiYAxis zone in chart left padding
            bound = [[[0, padding], [padding, padding], [padding, size.height - padding], [0, size.height - padding]]];
            row = {
                "name" : FeedConst.ID_TRELLIS_ROW,
                "feedDef" : [feedDef],
                "bound" : bound
            };
        }

        zones.push(column, row);
    }
    
    return {
        provide: provide
    };
});


define('sap/viz/controls/chart/TrellisMap',[],function() {
   return {
       'info/trellis_bar' : {
           'categoryAxis.label' : 'rowAxis.label',
           'categoryAxis.title' : 'rowAxis.title',
           'valueAxis.label' : 'columnAxis.label',
           'valueAxis.title' : 'columnAxis.title'  
       },
       'info/trellis_line': {
           'categoryAxis.label' : 'columnAxis.label',
           'categoryAxis.title' : 'columnAxis.title',
           'valueAxis.label' : 'rowAxis.label',
           'valueAxis.title' : 'rowAxis.title'  
       },
       'info/trellis_horizontal_line': {
           'categoryAxis.label' : 'rowAxis.label',
           'categoryAxis.title' : 'rowAxis.title',
           'valueAxis.label' : 'columnAxis.label',
           'valueAxis.title' : 'columnAxis.title'  
       },
       'info/trellis_column': {
           'categoryAxis.label' : 'columnAxis.label',
           'categoryAxis.title' : 'columnAxis.title',
           'valueAxis.label' : 'rowAxis.label',
           'valueAxis.title' : 'rowAxis.title'  
       },
       'info/trellis_dual_column': {
           'categoryAxis.label' : 'columnAxis.label',
           'categoryAxis.title' : 'columnAxis.title',
           'valueAxis.label' : 'rowAxis.label',
           'valueAxis.title' : 'rowAxis.title'  
       },
       'info/trellis_dual_line': {
           'categoryAxis.label' : 'columnAxis.label',
           'categoryAxis.title' : 'columnAxis.title',
           'valueAxis.label' : 'rowAxis.label',
           'valueAxis.title' : 'rowAxis.title'  
       },
       'info/trellis_dual_horizontal_line' : {
           'categoryAxis.label' : 'rowAxis.label',
           'categoryAxis.title' : 'rowAxis.title',
           'valueAxis2.label' : 'columnAxis.label',
           'valueAxis2.title' : 'columnAxis.title'  
       },
       'info/trellis_dual_bar' : {
           'categoryAxis.label' : 'rowAxis.label',
           'categoryAxis.title' : 'rowAxis.title',
           'valueAxis2.label' : 'columnAxis.label',
           'valueAxis2.title' : 'columnAxis.title'  
       },
       'info/trellis_scatter' : {
           'valueAxis.label' : 'columnAxis.label',
           'valueAxis.title' : 'columnAxis.title',
           'valueAxis2.label' : 'rowAxis.label',
           'valueAxis2.title' : 'rowAxis.title'  
       },
       'info/trellis_bubble' : {
           'valueAxis.label' : 'columnAxis.label',
           'valueAxis.title' : 'columnAxis.title',
           'valueAxis2.label' : 'rowAxis.label',
           'valueAxis2.title' : 'rowAxis.title'  
       },
       'info/trellis_100_stacked_column' : {
           'categoryAxis.label' : 'columnAxis.label',
           'categoryAxis.title' : 'columnAxis.title',
           'valueAxis.label' : 'rowAxis.label',
           'valueAxis.title' : 'rowAxis.title'  
       },
       'info/trellis_stacked_column' : {
           'categoryAxis.label' : 'columnAxis.label',
           'categoryAxis.title' : 'columnAxis.title',
           'valueAxis.label' : 'rowAxis.label',
           'valueAxis.title' : 'rowAxis.title'  
       },
       'info/trellis_stacked_bar' : {
           'categoryAxis.label' : 'rowAxis.label',
           'categoryAxis.title' : 'rowAxis.title',
           'valueAxis.label' : 'columnAxis.label',
           'valueAxis.title' : 'columnAxis.title'  
       },
       'info/trellis_100_stacked_bar' : {
           'categoryAxis.label' : 'rowAxis.label',
           'categoryAxis.title' : 'rowAxis.title',
           'valueAxis.label' : 'columnAxis.label',
           'valueAxis.title' : 'columnAxis.title'  
       },
       'info/trellis_combination' : {
           'categoryAxis.label' : 'columnAxis.label',
           'categoryAxis.title' : 'columnAxis.title',
           'valueAxis.label' : 'rowAxis.label',
           'valueAxis.title' : 'rowAxis.title'  
       },
       'info/trellis_horizontal_combination' : {
           'categoryAxis.label' : 'rowAxis.label',
           'categoryAxis.title' : 'rowAxis.title',
           'valueAxis.label' : 'columnAxis.label',
           'valueAxis.title' : 'columnAxis.title'  
       }
   };
});

// @formatter:off
define('sap/viz/controls/chart/views/InfoChartView',[
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/feeds/AnalysisObject',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/property/VizPropertyZone',
    'sap/viz/controls/common/utils/InfoChartUtil',
    'sap/viz/controls/chart/adapters/InteractionAdapter',
    'sap/viz/controls/chart/adapters/PropertyAdapter',
    'sap/viz/controls/chart/views/ChartEvent',
    'sap/viz/controls/chart/views/View',
    'sap/viz/controls/chart/views/EditAxisView',
    'sap/viz/controls/common/utils/binding/BindingGeneratorFactory',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/services/BVRService',
    'sap/viz/controls/common/utils/FlatTableFakeDataUtil',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/utils/VizUtils',
    'sap/viz/controls/common/utils/TrellisUtils',
    'sap/viz/controls/chart/views/DropZoneProvider',
    'sap/viz/controls/chart/views/PropertyZone',
    'sap/viz/controls/chart/views/AxisSizeAdjustHelper',
    'sap/viz/controls/chart/views/AxisSplitter',
    'sap/viz/controls/common/metadata/MetadataFactory',
    'sap/viz/controls/chart/TrellisMap'    
],
function($, OOUtil, CSSConst, ChartConst, LangManager, AnalysisObject, AnalyticalType, FeedUtils,
    VizPropertyZone, InfoChartUtil, InteractionAdapter, PropertyAdapter, ChartEvent, View, EditAxisView, BindingGeneratorFactory,
    utils,BVRService, FlatTableFakeDataUtil, ChartTypeUtil, VizUtils, TrellisUtils, DropZoneProvider, PropertyZone,
    AxisSizeAdjustHelper, AxisSplitter, MetadataFactory, TrellisMap) {
// @formatter:on

    /**
     * InfoChartView View represent an info chart.
     */
    var InfoChartView = function(dom/*HTMLDivElement*/, options, libFolderPath, chartModelProvider) {
        InfoChartView.superclass.constructor.apply(this, arguments);
        this.__className = 'sap.viz.controls.chart.views.InfoChartView';

        // this._useBuiltInPropertyZoneInteraction = options.useBuiltInPropertyZoneInteraction;

        this._iAdapter = null;
        this._pAdapter = null;
        this._rendererInfo = null;

        this._createChildren();
    };

    OOUtil.extend(InfoChartView, View);

    InfoChartView.prototype._createChildren = function() {
        InfoChartView.superclass._createChildren.apply(this, arguments);

        this._createDropZone();

        this._axisSplitter = new AxisSplitter(this._chartHolder$.get(0), $.proxy(this.properties, this), $.proxy(this._getPropertyZone, this));
        this._axisSplitter.addEventListener(AxisSplitter.AxisSplitChanged, this._axisSplitChangedHandler, this);

        this._propertyZone = new PropertyZone(this._chartLayer$.get(0), this._getPropertyZone.bind( this ) );
        this._propertyZone.addEventListener(PropertyZone.SELECT_ZONE, $.proxy(function(e) {
            this._dispatchEvent(new ChartEvent(ChartEvent.SELECT_PROPERTY_ZONE, this, e.data));
        }, this));

        this._editAxisView = new EditAxisView(this._chartHolder$.get(0), null);
        this._editAxisView.addEventListener(EditAxisView.AxisScaleChanged, this._axisScalerChangedHandler, this);
    };

    InfoChartView.prototype._getFeedingZone = function() {
        if (!this._chart) {
            return [];
        }

        var vizType = this._options.type, zones;
        try {
            zones = this._chartProxy.get("properties")["feedingZone"] || [];
        } catch(error) {
            return [];
        }

        return DropZoneProvider.provide(vizType, zones, this._padding, this._size, this._enableTrellis);
    };

    InfoChartView.prototype._getPropertyZone = function() {
        if (!this._chart) {
            return [];
        }
        var zone = [], propertyZoneInfo;

        // get propertyZone from properties
        propertyZoneInfo = this._chartProxy.get("properties")["propertyZone"] || [];

        return propertyZoneInfo;
    };

    InfoChartView.prototype.getTemplateId = function(dataset) {
        if(arguments.length > 0) {
            var data = dataset || this.data();
            if(VizUtils.hasFakeData(data)) {
                return View.TEMPLATE_INCOMPLETE;
            }
            else
            {
                return View.TEMPLATE_DEFAULT;
            }
        } else {
            return sap.viz.api.env.Template.get();
        }
    };

    InfoChartView.prototype._createChartInstance = function() {
        if (!this._options) {
            return;
        }

        var options = this._options;
        // if (this._useBuiltInPropertyZoneInteraction === true) {
            // options.properties = options.properties || {};
            // options.properties.interaction = {
                // behaviorType : 'DesignTimeBehavior'
            // };
        // }

        try {
            this._destroyChartInstance();
            var hasError = this._updateDescriptionByOptions(options);
            if (options.properties) {
                this._resetChangedProperties();
                this._addChangedProperties(options.properties);
                this._checkBehaviorType(options.properties);
            }
            
            if (!hasError) {
                this._chart = this._chartProxy.execute('sap.viz.api.core.createViz', {
                    type : options.type,
                    data : options.data,
                    bindings : options.feeding,
                    properties : options.properties,
                    events : options.events,
                    scales : options.scales,
                    sharedRuntimeScales: options.sharedRuntimeScales,
                    container : this._chartLayer$.get(0)
                });
                if (this._chart) {
                    this._postVizProcess(options);
                }
            }

        } catch(error) {
            var vizType = options.type;
            var errorMsg = LangManager.get('VIZ_CHART_CREATE_CHART_FAILED') + error;
            if (!MetadataFactory.get(vizType).getBindingDefs()) {
                this._updateDescription(utils.substitute(LangManager.get("VIZ_CHART_INVALID_VIZ_TYPE"), vizType));
            } else {
                this._updateDescription(errorMsg);
            }
            // clean up
            this._chartLayer$.html("");
            this._chart = null;
            this._hasChartInstance = false;
            throw errorMsg;
        }

    };

    InfoChartView.prototype.getValidProperties = function(properties, chartType) {
        var validProperties = VizUtils.getValidProperties(properties, chartType);
        if (this._pAdapter) {
            this._pAdapter.validateRenderer(validProperties);
        }
        var trellisMap = TrellisMap[chartType];
        if(trellisMap){
            if(validProperties && validProperties.plotArea && validProperties.plotArea.gridline && validProperties.plotArea.gridline.visible){
                validProperties.plotArea.gridline.visible = false;
            }
        }
        var prop = validProperties;
        for (var key in trellisMap) {
            var node = key.split('.');
            var trellisNode = trellisMap[key].split('.');
            var value = validProperties;
            for (var i = 0; i < node.length - 1; i++) {
                prop[trellisNode[i]] = prop[trellisNode[i]] || {};
                value = value[node[i]];
                prop = prop[trellisNode[i]];
            }
            if (value) {
                prop[trellisNode[trellisNode.length - 1]] = value[node[i]];                    
            } else {
                prop[trellisNode[trellisNode.length - 1]] = undefined;
            }       
            prop = validProperties;
        }
        return validProperties;
    };

    InfoChartView.prototype.setAxisScale = function(axis) {
        if (this._chart) {
            var type = this._options.type;
            this._editAxisView.show(type, axis, this._chartProxy.get('properties', this._options.properties), this.scales());
        }
    };

    InfoChartView.prototype._axisScalerChangedHandler = function(e) {
        if (!this._chart) {
            return;
        }
        this._helper.scalesWithEvents(e.data, [ChartEvent.SCALES_CHANGED]);
    };

    InfoChartView.prototype._axisSplitChangedHandler = function(e) {
        var categoryScaleProperties = AxisSizeAdjustHelper(this._chart, this._getFeedingZone(), e.data.axisName, e.data.direction, e.data.offset);
        if (categoryScaleProperties) {
            this._helper.propertiesWithEvents(categoryScaleProperties);
        }
    };

    /**
     * Post process after create viz instance.
     */
    InfoChartView.prototype._postVizProcess = function(options) {
        InfoChartView.superclass._postVizProcess.apply(this, arguments);

        this._chart.on('initialized.create', $.proxy(function() {
            if (!this._chart) {
                return;
            }
            this._chart.off('initialized.create');

            if (!this._iAdapter) {
                this._iAdapter = new InteractionAdapter(this._helper);
                this._iAdapter.addEventListener(ChartEvent.PROPERTY_ZONES_CHANGED, function(event) {
                    this._dispatchEvent(new ChartEvent(ChartEvent.PROPERTY_ZONES_CHANGED, this, event.data));
                }, this);
            }
            if (!this._pAdapter) {
                this._pAdapter = new PropertyAdapter(this._helper, this._rendererInfo);
                // TODO Just a workaround
                this._pAdapter._ownerDom$ = this._dom$;
            }
            // Dispatch default property zone after chart is initialized.
            this._dispatchEvent(new ChartEvent(ChartEvent.PROPERTY_ZONES_CHANGED, this, {
                'propertyZones' : [new VizPropertyZone(VizPropertyZone.CHART_AREA)]
            }));
        }, this));
        this._chart.on("lassoStart.chartview", (function() {
            this._axisSplitter.deactive();
        }).bind( this ) );

        this._chart.on("lassoEnd.chartview", (function() {
            this._axisSplitter.active();
        }).bind( this ) );

        this._chart.on("initialized.chartview", (function(data) {
            if (this._isFeedsValid) {
                this._axisSplitter.init(options.type);
            }
            var enablePropertyZone = this._enablePropertyZone && this._isFeedsValid;
            this._propertyZone.updateZone(enablePropertyZone);

            triggerCVOM("initialized", data);
        }).bind( this ) );

        this._chart.on('contextualData.chartview', $.proxy(function(event) {
            this._dispatchEvent(new ChartEvent(ChartEvent.CONTEXT_MENU_TRIGGERED, this, event));
        }, this));

        var triggerCVOM = $.proxy(function(type, data) {
            this._dispatchEvent(new ChartEvent(ChartEvent.TRIGGER_CVOM_EVENT, this, {
                type : type,
                data : data
            }));
        }, this);

        var _this = this;
        this._chart.on("selectData.chartview", function(selectData) {
            _this._dispatchEvent(new ChartEvent(ChartEvent.CHANGED_SELECTED_DATA, this));
            triggerCVOM("selectData", selectData);
        });

        this._chart.on("deselectData.chartview", function(deselectData) {
            _this._dispatchEvent(new ChartEvent(ChartEvent.CHANGED_SELECTED_DATA, this));
            triggerCVOM("deselectData", deselectData);
        });

        this._hasChartInstance = true;
        this._dispatchEvent(new ChartEvent(ChartEvent.CHART_CHANGED, this, this._chart));
    };

    InfoChartView.prototype.hasChartInstance = function() {
        return this._chart !== null;
    };

    InfoChartView.prototype.properties = function(value, disableMorphing) {
        if (arguments.length > 0) {
            if (!disableMorphing && this._needMorphing(value)) {
                this._requestMorphing = true;
            }
            this._options.properties = value;
            this._addChangedProperties(value);
            this._checkBehaviorType(value);
            if (this._chart) {
                this._chartProxy.set('properties', value);
                return this;
            } else {
                throw LangManager.get('VIZ_CHART_UPDATE_PROPERTIES_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
            }
        } else {
            return this._chartProxy.get('properties', this._options.properties);
        }
    };

    InfoChartView.prototype.copyData = function(type, dataset) {
        if (dataset instanceof sap.viz.api.data.FlatTableDataset) {
            return new sap.viz.api.data.FlatTableDataset(dataset.data());
        } else {
            return new sap.viz.api.data.CrosstableDataset(dataset.data());
        }
    };

    InfoChartView.prototype.buildFeedings = function(type, data, feeds) {
        if (data && !ChartTypeUtil.isEmptyData(type, data)) {
            var binding;
            if (VizUtils.hasFakeData(data) || FeedUtils.isEmptyFeeds(feeds)) {
                binding = FlatTableFakeDataUtil.buildFakeBinding(type, feeds);
            } else {
                var generator = BindingGeneratorFactory.create(type, 'FlatTableDataset');
                binding = generator.generate(BVRService.suggestMND(type, feeds));
            }
            return binding;
        }
    };

    /**
     * Update chart feeding.
     * @param {Object} feeding
     */
    InfoChartView.prototype.feeding = function(feeding, disableMorphing) {
        try {
            if (this._chart) {
                if (arguments.length > 0) {
                    if (!disableMorphing) {
                        this._requestMorphing = true;
                    }
                    this._chartProxy.set('feeding', feeding);
                    return this;
                } else {
                    return this._chartProxy.get('feeding', this._options.feeding);
                }
            } else {
                throw LangManager.get('VIZ_CHART_UPDATE_FEEDING_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
            }
        } catch (error) {
            throw LangManager.get('VIZ_CHART_UPDATE_FEEDING_FAILED') + error;
        }
    };

    InfoChartView.prototype.feedingZone = function() {
        try {
            if (this._chart) {
                // return this._chartProxy.get('feedingZone', []);
                return this._chartProxy.get("properties")["feedingZone"] || [];
            } else {
                throw LangManager.get('VIZ_CHART_FEEDINGZONE_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
            }
        } catch (error) {
            //if(console) {
            //    console.log("Failed to feedingZone chart : " + error);
            //  }
            throw LangManager.get('VIZ_CHART_FEEDINGZONE_FAILED') + error;
        }
    };

    InfoChartView.prototype.getPropertyZones = function() {
        if (this._iAdapter) {
            return this._iAdapter.propertyZones();
        } else {
            return [];
        }
    };

    InfoChartView.prototype.setPropertyZones = function(propertyZones) {
        if (this._iAdapter) {
            this._iAdapter.propertyZones(propertyZones);
        }
    };

    InfoChartView.prototype.queryProperties = function(options) {
        return this._pAdapter ? this._pAdapter.query(options) : {};
    };

    InfoChartView.prototype.updateProperties = function(options) {
        if (this._pAdapter) {
            this._addChangedProperties(options.properties);
            this._pAdapter.update(options);
        }
    };

    InfoChartView.prototype.save = function() {
        if (this._pAdapter) {
            return {
                'pAdapter' : {
                    'rendererInfo' : this._pAdapter.saveRendererInfo()
                }
            };
        } else {
            return {};
        }
    };

    /**
     * Migrate xAxis.labelRenderer or yAxis.labelRenderer to categoryAxis.labelRenderer.
     */
    InfoChartView._migrateRenderInfo = function(rendererInfo) {
        var categoryAxisRendererID = "categoryAxis.labelRenderer.categoryAxisLabelRenderer";
        if (!rendererInfo || rendererInfo[categoryAxisRendererID]) {
            return;
        }

        var categoryAxisLabelRenderer;
        var xAxisRendererID = "xAxis.labelRenderer.categoryAxisLabelRenderer";
        var yAxisRendererID = "yAxis.labelRenderer.categoryAxisLabelRenderer";
        if (rendererInfo[xAxisRendererID]) {
            categoryAxisLabelRenderer = rendererInfo[xAxisRendererID];
            delete rendererInfo[xAxisRendererID];
        } else if (rendererInfo[yAxisRendererID]) {
            categoryAxisLabelRenderer = rendererInfo[yAxisRendererID];
            delete rendererInfo[yAxisRendererID];
        }

        if (categoryAxisLabelRenderer) {
            rendererInfo[categoryAxisRendererID] = categoryAxisLabelRenderer;
            categoryAxisLabelRenderer.id = categoryAxisRendererID;
            categoryAxisLabelRenderer.vizPath = "categoryAxis.labelRenderer";
        }
    };

    InfoChartView.prototype.load = function(json, vizInstanceProps) {
        if (json && json.pAdapter) {
            InfoChartView._migrateRenderInfo(json.pAdapter.rendererInfo);
            this._rendererInfo = json.pAdapter.rendererInfo;
            if (this._pAdapter) {
                this._pAdapter.loadRendererInfo(this._rendererInfo);
            }
            PropertyAdapter.parseRendererInfo(json.pAdapter.rendererInfo, vizInstanceProps);
        }
    };

    /**
     * Update chart css.
     * @param {Object} css
     */
    InfoChartView.prototype.css = function(css, disableMorphing) {
        try {
            if (arguments.length > 0) {
                if (!disableMorphing) {
                    this._requestMorphing = false;
                }
                // update css cache according to new css before apply new css
                this._updateCssCacheByNewCss(css);
                // update css by new css
                this._options.css = css;
                if (this._chart) {
                    this._chartProxy.set('css', css);
                    return this;
                } else {
                    throw LangManager.get('VIZ_CHART_UPDATE_CSS_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
                }
            } else {
                return this._chartProxy.get('css', this._options.css);
            }
        } catch (error) {
            throw LangManager.get('VIZ_CHART_UPDATE_CSS_FAILED') + error;
        }
    };

    InfoChartView.prototype.data = function(data, disableMorphing) {
        if (this._chart) {
            try {
                if (arguments.length > 0) {
                    if (!disableMorphing) {
                        this._requestMorphing = true;
                    }
                    this._chartProxy.set('data', data);
                } else {
                    return this._chartProxy.get('data', this._options.data);
                }
            } catch (error) {
                var errorMsg = LangManager.get('VIZ_CHART_UPDATE_CHART_FAILED') + error;
                this._updateDescription(errorMsg);
                throw errorMsg;
            }
        } else {
            return InfoChartView.superclass.data.apply(this, arguments);
        }
    };

    InfoChartView.prototype.exportViz = function(options) {
        if (this._chart) {
            var result = this._chartProxy.execute('toJSON', options);
            return result;
        } else {
            throw LangManager.get('VIZ_CHART_SERIALIZE_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
        }
    };

    /**
     * Update chart with updated options.
     * @param {Object} updates
     */
    InfoChartView.prototype.update = function(updates, disableMorphing) {
        if (!disableMorphing) {
            this._requestMorphing = true;
        }
        updates.bindings = updates.feeding;
        delete updates.feeding;

        return InfoChartView.superclass.update.apply(this, arguments);
    };

    InfoChartView.prototype.scales = function(scales) {
        if (this._chart) {
            if (arguments.length > 0) {
                this._requestMorphing = true;
                this._options.scales = scales;
                this._chart.scales(scales);
            } else {
                return this._chart.scales();
            }
        }
    };

    /**
     * Get title zone for chart instance.
     * @returns {Array}
     */
    InfoChartView.prototype.getTitleZone = function() {
        if (!this._chart) {
            return [];
        }

        var thisChartId = this._options.type;

        var zone;
        try {
            zone = this._chartProxy.get('propertyZone', []);
        } catch(error) {
            return [];
        }
        var titleZone = [];
        for (var i = 0; i < zone.length; i++) {
            if (zone[i].name == 'title') {
                titleZone = zone[i].bound[0];
                break;
            }
        }
        return titleZone;
    };

    /**
     * TODO: should not destroy chart view instance.
     * after that should remove store/restore.
     */
    InfoChartView.prototype.store = function() {
        return {
            iAdapter : this._iAdapter,
            pAdapter : this._pAdapter,
            rendererInfo : this._rendererInfo
        };
    };

    InfoChartView.prototype.restore = function(values) {
        this._iAdapter = values.iAdapter;
        this._pAdapter = values.pAdapter;
        this._rendererInfo = values.rendererInfo;
    };

    InfoChartView.prototype.reset = function() {
        if (this._pAdapter) {
            this._pAdapter.reset();
        }
    };
    
    InfoChartView.prototype._checkBehaviorType = function(properties) {
        if (properties && properties.interaction && properties.interaction.hasOwnProperty('behaviorType')) {
            this._dispatchEvent(new ChartEvent(ChartEvent.BEHAVIOR_TYPE_CHANGED, this, {'behaviorType': properties.interaction.behaviorType}));
        }
    };

    InfoChartView.prototype.runtimeScales = function() {
        if (!this._chart){
            return [];
        }
        return this._chart.runtimeScales.apply(this._chart, arguments);
    };
    
    InfoChartView.prototype.sharedRuntimeScales = function(value) {
        if (!this._chart){
            if (arguments.length < 1){
                return [];
            } else {
                return this;
            }
        }
        return this._chart.sharedRuntimeScales.apply(this._chart, arguments);
    };
    
    InfoChartView.prototype.updatePropertyForPropertyZoneInteraction = function(properties, useBuiltInPropertyZoneInteraction){
        properties = properties || {};
        properties.interaction = {
            behaviorType : 'DesignTimeBehavior'
        };
        return properties;
    };

    return InfoChartView;
});

define('sap/viz/controls/chart/views/ESRIServicePanel',[
// @formatter:off
'jquery', 
'sap/viz/controls/common/constants/CSSConst', 
'sap/viz/controls/common/utils/OOUtil', 
'sap/viz/controls/common/VizControlBase',
'sap/viz/controls/common/managers/LangManager',
'sap/viz/controls/chart/views/ChartEvent'],
// @formatter:on
function($, CSSConst, OOUtil, VizControlBase, LangManager, ChartEvent) {

    var ESRIServicePanel = function(div, uiconfig) {
      
      ESRIServicePanel.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.views.ESRIServicePanel";
        this._uiconfig = uiconfig;
        this._div = div;
        this._serviceGallery$ = null;
        this.createChildren();
    };

    OOUtil.extend(ESRIServicePanel, VizControlBase);


    ESRIServicePanel.prototype.createChildren = function() {
               
        this._serviceGallery$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-gallery').appendTo(this._div);
        
    };    
            
    ESRIServicePanel.prototype.init = function(services, selectedServiceId){
      
        var self = this;
        var serviceClick = function(){
            $('.' + CSSConst.CHART_PREFIX + 'map-service-selector-services-item-icon').removeClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-item-icon-selected');
            $(this).addClass(CSSConst.CHART_PREFIX + "map-service-selector-services-item-icon-selected");
            
            self._dispatchEvent(new ChartEvent(ChartEvent.ESRI_CUSTOMIZED_SERVICE_CHANGED, this, {
              serviceId : $('.' + CSSConst.CHART_PREFIX + "map-service-selector-services-item-icon-selected").data("__serviceId")
            }));
            
        };
        
        this._serviceGallery$.empty();
        if(services && services.length > 0 ){
           var item$, icon$, title$, thumbnailURL;
           //no service by default 
         
           for(var i = 0; i < services.length; i++){
              item$ =  $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-item').appendTo(this._serviceGallery$);
              icon$ =  $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-item-icon').appendTo(item$);
              icon$.attr("title", services[i].description);
              icon$.data("__serviceId", services[i].id);
              icon$.data("__serviceFields", services[i].featureServicesFields);
              icon$.on("click", serviceClick);
              
              title$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-item-title').appendTo(item$);
              title$.html(services[i].title);
              
              icon$.css({"background-image": services[i].thumbnailURL});
              
              if(selectedServiceId && selectedServiceId === services[i].id){
                 icon$.addClass(CSSConst.CHART_PREFIX + "map-service-selector-services-item-icon-selected");
              }
           }
        }
        
    };
    
    ESRIServicePanel.prototype.getSelectedService = function(){
        return {
                 id: $('.' + CSSConst.CHART_PREFIX + "map-service-selector-services-item-icon-selected").data("__serviceId"),
                 fields: $('.' + CSSConst.CHART_PREFIX + "map-service-selector-services-item-icon-selected").data("__serviceFields")
        };
    };
    
    ESRIServicePanel.prototype.show = function(){
        this._serviceGallery$.show();
    };
    
    ESRIServicePanel.prototype.hide= function(){
        this._serviceGallery$.hide();
    };
   
    return ESRIServicePanel;
});

define('sap/viz/controls/chart/views/ESRIServiceColor',[
// @formatter:off
'jquery', 
'sap/viz/controls/common/constants/CSSConst', 
'sap/viz/controls/common/utils/OOUtil', 
'sap/viz/controls/common/VizControlBase',
'sap/viz/controls/common/managers/LangManager',
'sap/viz/controls/chart/views/ChartEvent'],
// @formatter:on
function($, CSSConst, OOUtil, VizControlBase, LangManager, ChartEvent) {

    var ESRIServiceColor = function(div, uiconfig) {
      
      ESRIServiceColor.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.views.ESRIServiceColor";
        this._uiconfig = uiconfig;
        this._div = div;
        this._serviceColor$ = null;
        this._fieldsSelector$ = null;
        
        this._startVal$ = null;
        this._startColor$ = null;
        this._endVal$ = null;
        this._endColor$ = null;
        
        this.createChildren();
    };

    OOUtil.extend(ESRIServiceColor, VizControlBase);

    ESRIServiceColor.prototype.createChildren = function() {
               
        this._serviceColor$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-panel').appendTo(this._div);
        $(document.createElement('div')).html(LangManager.get('VIZ_CHART_SELECT_DATASET'))
          .addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-field-title')
          .appendTo(this._serviceColor$);
        
        this._fieldsSelector$ = $(document.createElement('select')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-field-selector').appendTo(this._serviceColor$ );
        
        this.createGradient();
    }    
    
    ESRIServiceColor.prototype.createGradient = function(){
      
        var group$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-title-group').appendTo(this._serviceColor$);
        $(document.createElement('div')).html(LangManager.get('VIZ_CHART_SET_COLOR_LAYER')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-title-label').appendTo(group$);
        this._reset$ = $(document.createElement('div')).html(LangManager.get("VIZ_CHART_RESET")).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-reset') .on("click", function(){
          this._startVal$.val(this._startVal$.prop("defaultValue"));
          this._endVal$.val(this._endVal$.prop("defaultValue"));
       }.bind(this)).appendTo(group$);
        
               
        
        var gradient$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-field-gradient')
         .appendTo(this._serviceColor$);
        
        $(document.createElement('div')).html(LangManager.get("VIZ_CHART_START"))
          .addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-field-gradient-start').appendTo(gradient$);
        var startGroup$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-field-gradient-value-group1').appendTo(gradient$);

        this._startVal$ = $(document.createElement('input')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-field-gradient-value')
        .attr("value", "0")
        .appendTo(startGroup$);
        
        this._startColor$ =$(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-field-gradient-colorpicker')
        .css("background-color", "#c2e3a9")
        .appendTo(startGroup$);
        
        $(document.createElement('div')).html(LangManager.get("VIZ_CHART_END"))
        .addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-field-gradient-end').appendTo(gradient$);
        
        startGroup$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-field-gradient-value-group2').appendTo(gradient$);
        this._endVal$ = $(document.createElement('input')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-field-gradient-value')
          .attr("value", "100")
          .appendTo(startGroup$);
       
        this._endColor$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-color-field-gradient-colorpicker')
          .css("background-color", "#35581C")
          .appendTo(startGroup$);
        
    }
    
    
    ESRIServiceColor.prototype.init = function(serviceFields, color){
        this._fieldsSelector$.empty();
        for(var i = 0; i < serviceFields.length; i++){
            $(document.createElement('option')).attr('value', serviceFields[i].name).html(serviceFields[i].name).appendTo(this._fieldsSelector$);
        }
    };
    
    
    ESRIServiceColor.prototype.show = function(){
        this._serviceColor$.show();
    };
    
    ESRIServiceColor.prototype.hide= function(){
        this._serviceColor$.hide();
    };
    
    ESRIServiceColor.prototype.getColor = function(){
        return {
           type: "gradient",
           bindedField: this._fieldsSelector$.val(),
           start: {
              val:    this._startVal$.val(),
              color:  this._startColor$.css("background-color")
           },
           end :{
             val:   this._endVal$.val(),
             color: this._endColor$.css("background-color")
           }
        }
    }
   
    return ESRIServiceColor;
});
define('sap/viz/controls/chart/views/ESRIServiceSelector',[
// @formatter:off
'jquery', 
'sap/viz/controls/common/constants/CSSConst', 
'sap/viz/controls/common/utils/OOUtil', 
'sap/viz/controls/common/VizControlBase',
'sap/viz/controls/common/managers/LangManager',
'sap/viz/controls/chart/views/ChartEvent',
'sap/viz/controls/chart/views/ESRIServicePanel',
'sap/viz/controls/chart/views/ESRIServiceColor'],
// @formatter:on
function($, CSSConst, OOUtil, VizControlBase, LangManager, ChartEvent, ESRIServicePanel, ESRIServiceColor) {

    var ESRIMapServiceSelector = function(div, uiconfig) {
      
      ESRIMapServiceSelector.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.views.ESRIMapServiceSelector";
        this._uiconfig = uiconfig;
        this._div = div;
        this._titleDiv$ = null;
        this._footerDiv$ = null;
        this._servicesDiv$ = null;
        this._servicePanel = null;
        this._serviceColor = null;
        this._btnDone$ = null;
        this._btnLayer$ = null;
        this._btnConfirm$ = null;
        
        this.createChildren();
    };

    OOUtil.extend(ESRIMapServiceSelector, VizControlBase);


    ESRIMapServiceSelector.prototype.createChildren = function() {
        
        this._titleDiv$ =  $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-title').
        html(LangManager.get('VIZ_CHART_IMPORT_ESRI_CUSTOM_SERVICE')).appendTo($(this._div));
      
        this._servicesDiv$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-panel').appendTo($(this._div));
        
        this._servicePanel = new ESRIServicePanel(this._servicesDiv$);
       
        this._serviceColor = new ESRIServiceColor(this._servicesDiv$);
               
        $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-gallery-close').on("click", function(){
           this.hide();
        }.bind(this))
        .appendTo($(this._div));
        
        this._servicePanel.addEventListener(ChartEvent.ESRI_CUSTOMIZED_SERVICE_CHANGED, function(event){
            if(event.data.serviceId){
              this._btnConfirm$.show();
              this._btnDone$.hide();
            }else{
              this._btnConfirm$.hide();
              this._btnDone$.show();
            }
            
        }.bind(this));
        
        this._footerDiv$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-footer').appendTo($(this._div));
          
        this._btnDone$ =  $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-button-done')
          .html(LangManager.get('VIZ_CHART_CONFIRM'))
          .on("click", function(){
              this.hide();
              this._dispatchEvent(new ChartEvent(ChartEvent.ESRI_CUSTOMIZED_SERVICE_CHANGED, this, {
                   serviceId : this._servicePanel.getSelectedService().id,
                   color: this._serviceColor.getColor()
              }));
             
          }.bind(this))
          .appendTo(this._footerDiv$);
        
        this._btnConfirm$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-button-confirm')
        .html(LangManager.get('VIZ_CHART_NEXT'))
        .on("click", function(){
          this._btnConfirm$.hide();
          this._btnDone$.show();
          this._btnLayer$.show();
          this._servicePanel.hide();
          this._serviceColor.init(this._servicePanel.getSelectedService().fields);
          this._serviceColor.show();
        }.bind(this))
        .appendTo(this._footerDiv$);
          
        this._btnLayer$ =  $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-button-layer')
           .html(LangManager.get('VIZ_CHART_BACK'))
           .on("click", function(){
             this._servicePanel.show();
             this._serviceColor.hide();
             this._btnConfirm$.show();
             this._btnLayer$.hide();
             this._btnDone$.hide();
          }.bind(this))
         .appendTo(this._footerDiv$);
      
        
        this._servicePanel.show();
        this._serviceColor.hide();
        this._btnConfirm$.show();
        this._btnLayer$.hide();
        this._btnDone$.hide();
    };
    
    ESRIMapServiceSelector.prototype.show = function(services, selectedServiceId){
      
        
        this._servicePanel.init(services, selectedServiceId);
        
        if(!selectedServiceId){
          this._btnConfirm$.hide();
          this._btnDone$.show();
        }else{
          this._btnLayer$.hide();
          this._btnDone$.hide();
          this._btnConfirm$.show();
        }
        
        this._servicePanel.show();
        this._serviceColor.hide();
        
        $(this._div).show();
    }
    
    ESRIMapServiceSelector.prototype.hide = function(){
      $(this._div).hide();
    }
    
    return ESRIMapServiceSelector;
});


define('sap/viz/controls/chart/views/EsriMessageDialog',['jquery', 
        'sap/viz/controls/common/constants/CSSConst', 'sap/viz/controls/common/managers/LangManager' ], function setup($, CSSConst, langManager){
     var EsriNoService = function(div){
       this.__className = "sap.viz.controls.chart.views.EsriNoSerive";
         this._div = div;
         this._titleDiv$ =  $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-no-service-title').
         html(langManager.get('VIZ_CHART_IMPORT_ESRI_CUSTOM_SERVICE')).appendTo($(this._div));
         this._messageDiv$ =   $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-no-serive-message').
         html(langManager.get('VIZ_CHART_NO_ESRI_SERVICE')).appendTo($(this._div));
         $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector-services-gallery-close').on("click", function(){
           this.hide();
        }.bind(this))
        .appendTo($(this._div));
         
     };
     
     EsriNoService.prototype.hide = function(){
       $(this._div).hide();
     };
     
     EsriNoService.prototype.show = function(message){
       this._messageDiv$.html(message);
       $(this._div).show();
     };
     
     return EsriNoService;
});
// @formatter:off
define('sap/viz/controls/chart/views/MapView',[
    'require',
    'jquery',
    'sap/viz/controls/common/config/GlobalConfig',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/constants/DatasetTypeConst',
    'sap/viz/controls/common/constants/MapProviderConst',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/events/FeedEvent',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/utils/TrellisUtils',
    'sap/viz/controls/common/utils/VizUtils',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/chart/views/ChartEvent',
    'sap/viz/controls/chart/ChartConfig',
    'sap/viz/controls/chart/views/View',
    'sap/viz/controls/common/utils/IncompleteGhost',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/feeds/FeedItem',
    'sap/viz/controls/chart/views/ESRIServiceSelector',
    'sap/viz/controls/chart/views/EsriMessageDialog'
],
function(r, $, GlobalConfig, ChartConst, DatasetTypeConst, MapProviderConst, Event, FeedEvent,
           FeedItemType, FeedUtils, LangManager,
           OOUtil, utils, ChartTypeUtil, TrellisUtils, VizUtils, CSSConst,
           ChartEvent, ChartConfig, View, IncompleteGhost, AnalyticalType, FeedItem,
           ESRIServiceSelector, MessageDialog) {
// @formatter:on
    var require = r || require;

    var reorderArray = function(array, from, to) {
      array.splice(to, 0, array.splice(from, 1)[0]);
    };
    
    function queryFeatureServicesFields(featureServiceURL, onSuccess, onFail){
      $.ajax({
        url : featureServiceURL,
        data : {
            f : "json"
        },
        dataType : "json",
        type : "POST",
        success : function (response) {                
                    if(response.fields){
                       var validFields = [];
                       validFields = response.fields.filter(function(field){
                                                          return  field.type === "esriFieldTypeSmallInteger" ||
                                                           field.type === "esriFieldTypeInteger" ||
                                                           field.type === "esriFieldTypeSingle" ||
                                                           field.type === "esriFieldTypeDouble" ;
                                                           
                                  });
                      onSuccess(validFields);
                    }else if(response.error){
                      onFail(response.error);
                    }else{
                      onFail("Unknown Error");
                    }
              
        },
        error: function(jqXHR, textStatus, errorThrown){
               onFail(errorThrown);
        }
        
       });
    }
    
    function queryEsriCustomerServices(credential, callback){
      var queryURL = "https://www.arcgis.com/sharing/rest/content/users/" + credential.username;
      $.ajax({
        url : queryURL,
        data : {
            token : credential.accessToken,
            f : "json"
        },
        dataType : "json",
        type : "POST",
        success :  function (response) {
                    if(response.items){//For new account, the response.items.length === 0
  
                      var featureServices = response.items.filter(function(item){
                                               return item.type === "Feature Service";// only support feature service now.
                                             });
                         
                      if(featureServices.length === 0){
                         callback([]);
                         return;
                      }
                                     
                      var testServices = 0;
                      featureServices.forEach(function(service, index){
                                               
                                               queryFeatureServicesFields(service.url, function(fields){
                                                   testServices++;
                                                   if(fields.length){
                                                      service.thumbnailURL = "url(https://www.arcgis.com/sharing/rest/content/items/" + service.id + "/info/" + service.thumbnail + "?token=" + credential.accessToken + ")";
                                                      service.featureServicesFields = fields;
                                                   }
                                                   
                                                   if(testServices === featureServices.length){
                                                      callback(featureServices.filter(function(item){
                                                        return item.featureServicesFields != null;
                                                        }));
                                                   }
                                                   
                                                },function(){
                                                   testServices++;
                                                   if(testServices === featureServices.length){
                                                      callback(featureServices.filter(function(item){
                                                        return item.featureServicesFields != null;
                                                       }));
                                                   }
                                                });
                      });
  
                      
                    }else if(response.error){
                      callback([]);
                    }else{
                      callback([]);
                    }
  
                   },
        error : function(jqXHR, textStatus, errorThrown) {               
                     callback([]);
                }
        
      });
    }

    /**
     * MapView View represent a CVOM chart.
     */
    var MapView = function(div/*HTMLDivElement*/, options, libFolderPath, chartModelProvider) {
        MapView.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.view.MapView";
        this._mapselector$ = null;
        this._messageDialog$ = null;
        this._messageDialog = null;
        this._mapServiceSelector = null;
        //this._refresh$ = null;
        this._esriservices = null;
        this._selectedServiceId = undefined;
        this._loadedViz = null;
        this._mapInitialized = false;
        this._updateCache = null; //to cache update parameter before ESRI initialized
        this._createChildren();

        //should remove this in map view, will cause recreate in some cases
        sap.viz.api.env.Template.removeListener(this._changeTemplateFunc);
    };

    OOUtil.extend(MapView, View);

    MapView.prototype._createChildren = function() {
       MapView.superclass._createChildren.apply(this, arguments);

       this._createESRIMapServiceSelector();

    };

    MapView.prototype._createESRIMapServiceSelector = function(){
       this._mapselector$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX + 'map-service-selector').appendTo($(this._div));
       this._messageDialog$ = $(document.createElement('div')).addClass(CSSConst.CHART_PREFIX  + 'map-no-service').appendTo($(this._div));
       this._messageDialog = new MessageDialog(this._messageDialog$);
       this._messageDialog.hide();
       this._mapServiceSelector = new ESRIServiceSelector(this._mapselector$);
       this._mapServiceSelector.addEventListener(ChartEvent.ESRI_CUSTOMIZED_SERVICE_CHANGED, this._esriServiceChanged.bind(this));
       this._mapServiceSelector.hide();
    }

    MapView.prototype._esriServiceChanged = function(e){
       var serviceId = e.data.serviceId;
       this._selectedServiceColor = e.data.color;
       this._enableService = true;

       if(!this._selectedServiceId){
          this._chartModelProvider().extensionValues({
           mapBuilder : {
               mapservice : {
                   showRadio : true,
                   checked :  this._enableService
               }
           }
        });
       }

        this._selectedServiceId = serviceId;
        this._changeBaseMap({serviceId:serviceId, color: this._selectedServiceColor});

    };

    MapView.prototype._changeBaseMap = function (data){
      var id = data.serviceId;
      var color = data.color;
      var esriProvider;
      if(!id){
         esriProvider = new sap.viz.geo.basemap.esri.Provider({ basemap: this._chart.baseMap().toJSON().options.basemap});

      }else{

         var selectedService = this._esriservices.filter(function(service){
           return service.id === id;
        });

         var service = [{}];
         service[0].type = sap.viz.geo.basemap.esri.Provider.ARCGIS_SERVICE_TYPE_FEATURE;
         service[0].url =  selectedService[0].url;
         service[0].options = { outFields: ["*"]};
         service[0].color = color;
         esriProvider = new sap.viz.geo.basemap.esri.Provider({
                         // global name esri
                         extent : new esri.geometry.Extent(-115, -34, 115, 7),
                         basemap: this._chart.baseMap().toJSON().options.basemap},
                         service);
      }
      this._chart.baseMap(esriProvider);
    };

    MapView.prototype._showRefreshButton = function(){
       this._refresh$.css( { left : $(this._div).width()/2 - this._refresh$.width()/2 });
       this._refresh$.css( { top : $(this._div).height()/2 - this._refresh$.height()/2 + 40});
       this._refresh$.show();
    };

    MapView.prototype.modelChanged = function(model, options){
        if (options.vizTypeChanged) {
            this.showLoadingIcon();
        }
        var idx;
        if(options.feedingItemsChanged && options.feedsChangedInfo && options.feedsChangedInfo.items){
            idx = options.feedsChangedInfo.items[0];
            var feeds = model.feedingItems()[idx];
            var data = new FeedEvent(FeedEvent.FEEDS_CHANGED, this, {
                'datasetType' : DatasetTypeConst.FLAT_TABLE,
                'feeds' : feeds,
                'layerIdx' : idx
            });
            this._dispatchEvent(new Event(View.DISPATCH_PROPERTY_EVENT, this, data));
        }

        if (options.extensionValuesChanged) {
            var extensionValues = model.extensionValues();

            if (extensionValues.mapBuilder) {
                var values = extensionValues.mapBuilder;
                var map = this._chart;

                if (values && map) {

                    if (values.layer) {
                        var action = values.layer.action;
                        idx = values.layer.idx;
                        var fromIdx = values.layer.from;
                        var toIdx = values.layer.to;
                        var feedingItems;
                        var layer;
                        var legendVisible = true;
                        if (this._options.properties.legend && this._options.properties.legend.visible === false){
                            legendVisible = false;
                        }
                        
                        var dataLabelVisible = false;
                        if (this._options.properties.dataLabel && this._options.properties.dataLabel.visible === true){
                            dataLabelVisible = true;
                        } 

                        if (action === 'add') {
                            map.addLayer(new sap.viz.geo.dataviz.Layer({
                                viz : new sap.viz.geo.dataviz.Choropleth({dataLabel:{visible:dataLabelVisible}}),
                                legendVisible : legendVisible
                            }), true);

                            feedingItems = model.feedingItems();
                            feedingItems.push(values.layer.feeds);
                            model.feedingItems(feedingItems, false);
                            if (!this._options.data) {
                                this._options.data = [];
                            }
                            if (!this._options.feeding) {
                                this._options.feeding = [];
                            }
                            this._options.data.push(undefined);
                            this._options.feeding.push(undefined);

                        } else if (action === 'delete' && idx >= 0) {
                            // TODO: The map might be not containing any layer at that time, so maybe we should use
                            // map.then() function in the future.
                            map.removeLayer(map.getLayer(idx));

                            //update viz model but no need to notify
                            feedingItems = model.feedingItems();
                            feedingItems.splice(idx,1);
                            model.feedingItems(feedingItems, false);
                            this._options.data.splice(idx, 1);
                            this._options.feeding.splice(idx, 1);

                        } else if (action === 'reorder' && fromIdx >= 0 && toIdx >= 0) {

                            map.reorderLayer(map.getLayer(fromIdx), toIdx);

                            //update viz model but no need to notify
                            var feedingItem = model.feedingItems();
                            reorderArray(feedingItem, fromIdx, toIdx);
                            model.feedingItems(feedingItem, false);
                            reorderArray(this._options.data, fromIdx, toIdx);
                            reorderArray(this._options.feeding, fromIdx, toIdx);

                        } else if (action === 'show' && idx >= 0) {
                            layer = map.getLayer(idx);
                            layer.visibility(true);

                        } else if (action === 'hide' && idx >= 0) {
                            layer = map.getLayer(idx);
                            layer.visibility(false);

                        } else if (action === 'changeVizType' && idx >= 0) {
                            layer = map.getLayer(idx);
                            var layerVizType = values.layer.vizType;
                            var feedItems = values.layer.feeding;
                            var feeding,feedItem,geoLocationFeed,geoFeatureColorFeed,colorAnalysisType,geoFeatureSizeFeed;
                            if(feedItems !== null) {
                                for(var i = 0; i < feedItems.length ; i++ ){
                                    feedItem = feedItems[i];
                                    if(feedItem) {
                                        for(var j = 0; j < feedItem.values().length; j++){
                                            var id = feedItem.values()[j].id();
                                            if(feedItem.id() === "location"){
                                                geoLocationFeed = id;
                                            }else if(feedItem.id() === "color"){
                                                geoFeatureColorFeed = id;
                                                colorAnalysisType = feedItem.type();
                                            }else if(feedItem.id() === "size"){
                                                geoFeatureSizeFeed = id;
                                            }
                                        }
                                    }
                                }
                                layer.data(null);
                            }
                            if (layerVizType === 'choropleth') {
                                feeding = null;
                                if(feedItems !== null) {
                                    feeding = {};
                                    if(geoLocationFeed) {
                                        feeding.location = geoLocationFeed;
                                    }
                                    if(colorAnalysisType === FeedItemType.MEASURE && geoFeatureColorFeed) {
                                        feeding.color = geoFeatureColorFeed;
                                    }
                                }

                                layer.viz(new sap.viz.geo.dataviz.Choropleth({dataLabel:{visible:dataLabelVisible}}), feeding);
                            } else if (layerVizType === 'bubble') {
                                feeding = null;
                                if(feedItems !== null) {
                                    feeding = {};
                                    if(geoLocationFeed) {
                                        feeding.location = geoLocationFeed;
                                    }
                                    if(geoFeatureSizeFeed) {
                                        feeding.size = geoFeatureSizeFeed;
                                    }
                                    if(colorAnalysisType === FeedItemType.DIMENSION && geoFeatureColorFeed) {
                                        feeding.color = geoFeatureColorFeed;
                                    }
                                }

                                  layer.viz(new sap.viz.geo.dataviz.Bubble({
                                      cluster : {
                                          enabled : false
                                      },
                                      dataLabel:{visible:dataLabelVisible}
                                  }), feeding);
                                
                            } else if (layerVizType === 'marker') {
                                feeding = null;
                                if(feedItems !== null) {
                                    feeding = {};
                                    if(geoLocationFeed) {
                                        feeding.location = geoLocationFeed;
                                    }
                                }
                                layer.viz(new sap.viz.geo.dataviz.Marker({
                                        width : 12,
                                        height : 20,
                                        xoffset : -6,
                                        yoffset : -20,
                                        cluster : {
                                            enabled : false
                                        },
                                        dataLabel:{visible:dataLabelVisible}
                                }), feeding);
                               
                            }
                        } else if (action === 'changeProperties' && idx >= 0) {
                            layer = map.getLayer(idx);
                            var propKey = values.layer.propKey;
                            var propValue = values.layer.propValue;
                            if (propKey === 'markerCluster' || propKey === 'bubbleCluster') {
                                // TODO: Consolidate the duplicate code new Marker().
                                layer.viz().properties({
                                  cluster : {
                                    enabled : propValue
                                  }
                                });

                            }
                        }
                    }else if(values.mapservice){
                       if(values.mapservice.action === 'choose'){
                         this._chooseMapServiceAsBaseMap();
                       }else if(values.mapservice.action === 'enable'){
                       /* var topPos = $(this._div).height()/2 - this._mapselector$.height()/2;
                        var leftPos = $(this._div).width()/2 - this._mapselector$.width()/2;
                        this._mapselector$.css({top: topPos, left: leftPos});
                         */
                         this._enableService = true;
                         this._changeBaseMap({serviceId: this._selectedServiceId, color: this._selectedServiceColor});
                       } else if(  values.mapservice.action === 'disable' ){
                         this._mapServiceSelector.hide();
                         this._enableService = false;
                         this._changeBaseMap({});
                       }
                    }

                }
            }
        }

    };
      
    MapView.prototype.data = function(data) {
        if(arguments.length > 0) {
            this._options.data = data;
            if(this._chart) {
                this._chartProxy.set('map_doData', data);
                return this;
            } else {
                throw LangManager.get('VIZ_CHART_UPDATE_DATA_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
            }
        } else {
            return this._chartProxy.get('map_doData', this._options.data);
        }
    };
      
    MapView.prototype.doData = function(data) {
        try {
            var layers;
            if(arguments.length > 0) {
                if(this._chart) {
                    if(!data.length) {
                        return this;
                    }
                    layers = this._chart.getLayers ? this._chart.getLayers() : this._chart._layers;
                    var len = layers.length > data.length ? data.length : layers.length;
                    for(var i = 0; i < len; ++i) {
                        if(data[i]) {
                            layers[i].data(data[i]);
                        }
                    }
                    return this;
                } else {
                    throw LangManager.get('VIZ_CHART_UPDATE_DATA_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
                }
            } else {
                var dataArr = [];
                // TODO Remove get method
                if(this._chart) {
                    layers = this._chart.getLayers ? this._chart.getLayers() : this._chart._layers;
                    for(var j = 0; j < layers.length; ++j) {
                        dataArr.push(layers[j].data());
                    }
                }
                return dataArr;
            }
        } catch (error) {
            //if (console) {
            //  console.log("Failed to update chart data : " + error);
            //}
            throw LangManager.get('VIZ_CHART_UPDATE_DATA_FAILED') + error;
        }
    };

    MapView.prototype.action = function(keyName, args) {
      if (this._chart) {
        if(this._chart.__instance){
          return this._chart.__instance.action(keyName, args);
        }else{
          return this._chart;
        }
      } else {
          throw LangManager.get('VIZ_CHART_TRIGGER_ACTION_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
      }
  };

    /**
     * @param {JSON} options
     *      optional
     *      supported options: {emptyDataset : false}
     * Return the chart JSON String.
     */
    MapView.prototype.exportViz = function(options) {
      if(!this._isMapInitialized() && this._loadedViz){
         //something wrong, but need to return original definition after calling load viz
         return this._loadedViz;
      }

        if(this._chart) {
            var result = this._chartProxy.execute('toJSON', options);
            if (result) {
                result.esriServices = [this._exportEsriService()];
            }
            return result;
        } else {
            throw LangManager.get('VIZ_CHART_SERIALIZE_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
        }

    };

    MapView.prototype._exportEsriService = function(){
     return {serivceId: this._selectedServiceId, color: this._selectedServiceColor, enableService: !!this._enableService};
    };

    MapView.prototype._loadEsriService = function(vizJSON){
      if(vizJSON.esriServices && vizJSON.esriServices.length > 0){
        this._selectedServiceId = vizJSON.esriServices[0].serivceId;
        this._selectedServiceColor = vizJSON.esriServices[0].color;
        this._enableService = vizJSON.esriServices[0].enableService;
      }
    };
    
    function useLocalLocationRepository() {
        sap.viz.geo.LocationRepository.useLocal({
          'resourcePath' : this._geoResourcePath
        });
     }

    /**
     * Create ChartView with new options and templateId.
     * @param {JSON} options
     */


    MapView.prototype.loadViz = function(vizJSON) {

      this._destroyChartInstance();

      if(!vizJSON.baseMap){
         this._options = this._options || {};
         this._options.properties = this._options.properties || {};
         this._options.properties.tooltip = vizJSON.properties.tooltip;
         this._createChartInstance();
         return;
      }

      this._options = this._options || {};
      this._options.data = vizJSON.data;
      this._options.feeding = vizJSON.feeding;
      this._options.properties = vizJSON.properties;
      
      if(vizJSON.layers && vizJSON.layers.length > 0 &&
              vizJSON.layers[0].options && vizJSON.layers[0].options.legendVisible === false){
          if(!this._options.properties.legend){
              this._options.properties.legend = {};
          }
          this._options.properties.legend.visible = false;
      }
      
      if(vizJSON.vizs && vizJSON.vizs.length > 0 &&
              vizJSON.vizs[0].options && vizJSON.vizs[0].options.dataLabel &&
              vizJSON.vizs[0].options.dataLabel.visible === true){
          if(!this._options.properties.dataLabel){
              this._options.properties.dataLabel = {};
          }
          this._options.properties.dataLabel.visible = true;
      }
                
      this._loadedViz = utils.clone(vizJSON);
      this._loadEsriService(this._loadedViz);

      this._hasChartInstance = true; //set to true for updating cases
      this._mapInitialized = false;
      this._dispatchEvent(new ChartEvent(ChartEvent.CHART_CHANGING, this, vizJSON.type));
      this._updateDescription();
      this.showLoadingIcon();

      var properties = {
          //tooltip : this.properties().tooltip
      };

      if(vizJSON.properties && vizJSON.properties.tooltip){
         properties.tooltip = vizJSON.properties.tooltip;
      }

      var chartDiv$ = this._chartLayer$;

      // need to show and hide because chartInstance need the layer not be hidden
      var originalValue = this._chartLayer$.css("visibility");
      this._chartLayer$.css("visibility", "visible");
      var ins = sap.viz.api.core.createViz({
        type : vizJSON.type,
        container : chartDiv$.get(0),
        options: properties
      });
      this._chartLayer$.css("visibility", originalValue);

      this._chart = ins.action("getMap");
      
      //when the map is invisible and to load , the getMap will return nothing
      if(this._chart){
         this._chart.__instance = ins;

        /*
         * bind event listener registered by application by vizframe.vizOn
         */
        this._bindExternalEventListener();

        useLocalLocationRepository.call(this);
        if(vizJSON.baseMap.id.indexOf("esri") !== -1){
          this._logonESRI(function(){
             this._updateDescription(LangManager.get('VIZ_CHART_ESRI_MAP_LOADING'));
             this._chart.fromJSON(vizJSON);
             this._postVizProcess(this._options);
          }.bind(this), function(){

            //set to false
            this._hasChartInstance = false;

            this._chartModelProvider().extensionValues({
              map:{
                logOnFail: true
              }
            });

            //TODO refactor this to more reasonable way
            if(this._chart){
               this._chart._fireEvent("initialized");
            }

          }.bind(this));

        }else if(vizJSON.baseMap.id.indexOf("cvom") !== -1){
          this._chart.fromJSON(vizJSON);
          this._postVizProcess(this._options);
        }else if(vizJSON.baseMap.id.indexOf("navtaq")){
          this._chart.fromJSON(vizJSON);
          this._postVizProcess(this._options);
        }
     }
      

    };

    MapView.prototype._setChartSize = function(width, height){
        if(this._chart && this._chart.__instance){
             this._chart.__instance.size({
                width : width,
                height : height
            });
        }
    };

    /**
     * updata ghost description.
     */
    MapView.prototype._updateDescription = function(description) {
        if (description) {
            this._descriptionLayer$.show();
            this._descriptionLayer$.text(description);
            this._showDescription();
        } else {
            this._descriptionLayer$.hide();
            var children = this._chartHolder$.children();
            for(var i = 0 ; i < children.length; i++)
            {
                var child$ = $(children[i]);
                child$.css({
                    'opacity' : ""
                });
            }
            
        }
        this.hideLoadingIcon();
    };

    MapView.prototype.getTitleByFeeding = function(){
        return '';
    };

    MapView.prototype._logonESRI = function(onSuccess, onFail){
      var disabled = sap.viz.geo.basemap.esri.Authentication.credential().disabled;
      if(disabled){
         this._updateDescription(sap.viz.geo.basemap.esri.Authentication.credential().description);
         onFail.call(this);
         return;
      }

      var credential = sap.viz.geo.basemap.esri.Authentication.credential();
      if(!credential.accessToken || !credential.username){
         this._updateDescription(LangManager.get('VIZ_CHART_ESRI_MAP_AUTHENTICATION_FAIL'));
         onFail.call(this);
      }else{
         this._updateDescription(LangManager.get('VIZ_CHART_ESRI_MAP_LOADING'));
         onSuccess.call(this);
      }
      
    };

    /**
     * create chart instance
     */
    MapView.prototype._createChartInstance = function() {

        var options = this._options;

        var chartDiv$ = this._chartLayer$;
        var descriptionDiv$ = this._descriptionLayer$;
        var chartHolderDiv$ = this._chartHolder$;
        var vizType = ChartConst.TYPE_GEO_MAP;

        this._destroyChartInstance();

        try {
            // send chart changing event
            this._dispatchEvent(new ChartEvent(ChartEvent.CHART_CHANGING, this, vizType));

            //this._updateDescriptionByOptions(options);

            // need to show and hide because chartInstance need the layer not be hidden
            var originalValue = this._chartLayer$.css("visibility");
            this._chartLayer$.css("visibility", "visible");

            var ins = sap.viz.api.core.createViz({
              type : vizType,
              container : chartDiv$.get(0),
              options : {
                  tooltip : this.properties().tooltip
              }
            });
            
            this._chartLayer$.css("visibility", originalValue);

            this._chart = ins.action("getMap");
            this._chart.__instance = ins;

            /*
             * bind event listener registered by application by vizframe.vizOn
             */
            this._bindExternalEventListener();

            /*
             * set has instance now for updating case, esri is async log on if update is called immediately
             * want to go for update workflow
             */
            this._hasChartInstance = true;
            this._mapInitialized = false;

            //Hard code now. There has bugs that when switching between other chart, the default properties will lost
            //As a result, the exception will throw if could not access this._options.geomap.provider, check change history
            var provider = options.properties && options.properties.provider ? options.properties.provider : MapProviderConst.ESRI;

            if(provider === MapProviderConst.ESRI){
              this._logonESRI(function(){

                this._updateDescription(LangManager.get('VIZ_CHART_ESRI_MAP_LOADING'));

                var basemap =  this.createBaseMap(provider, {});

                this._chart.baseMap(basemap, this._afterMapInitialized.bind(this));

                this._postVizProcess(options);

              }.bind(this), function(){

                //set to false
                this._hasChartInstance = false;

                this._chartModelProvider().extensionValues({
                  map:{
                    logOnFail: true
                  }
                });

                //Refactor to more reason way
                if(this._chart){
                   this._chart._fireEvent("initialized");
                }

              }.bind(this));
            }else{
                var basemap =  this.createBaseMap(provider, {});
                this._chart.baseMap(basemap, this._afterMapInitialized.bind(this));
                this._postVizProcess(options);
            }


        } catch (error) {
            //if (console) {
            //    console.log("Failed to create chart : " + error);
            //}
            var errorMsg = LangManager.get('VIZ_CHART_CREATE_CHART_FAILED') + error;
            if (ChartTypeUtil.isValid(vizType)) {
                this._updateDescription(utils.substitute(LangManager.get("VIZ_CHART_INVALID_VIZ_TYPE"), vizType));
            } else {
                this._updateDescription(errorMsg);
            }
            // clean up
            chartDiv$.html("");
            this._chart = null;
            this._hasChartInstance = false;
            throw errorMsg;
        }

    };


    MapView.prototype._afterMapInitialized = function(data) {

      var triggerCVOM = $.proxy(function(type, data) {
        this._dispatchEvent(new ChartEvent(ChartEvent.TRIGGER_CVOM_EVENT, this, {
            type : type,
            data : data
        }));
      }, this);

      this.hideLoadingIcon();
      this._updateDescription();
      var vizModel = this._chartModelProvider();

      triggerCVOM("initialized", data);

      if(!this._loadedViz && this._isMapInitialized() === false){

        //not reload and initialize first time, when add map service, the initialized will thrown again, need to refine in map later
        this._chartModelProvider().extensionValues({
          map : {
              created : true,
              provider : this._options.properties.provider
          }
        });
      }else if(this._loadedViz){
        this._restoreMapBuilder();
      }

      this._mapInitialized = true;

      if(this._updateCache){
         this.update(this._updateCache);
         this._updateCache = null;
      }


    };

    /**
     *  bind event listener registered by application
     */
    MapView.prototype._bindExternalEventListener = function(){

      if(this._chart){
        Object.keys(this._onEventMap).forEach($.proxy(function(key) {
          var callback = this._onEventMap[key];
          this._chart.on(key, callback);
        }, this));
      }
    };

    /**
     * Post process after create viz instance.
     */
    MapView.prototype._postVizProcess = function(options) {

        var triggerCVOM = $.proxy(function(type, data) {
          this._dispatchEvent(new ChartEvent(ChartEvent.TRIGGER_CVOM_EVENT, this, {
              type : type,
              data : data
          }));
        }, this);


        this._chart.on("initialized.chartview", this._afterMapInitialized.bind(this));


        this._chart.on("mapChanged.chartview", function(){this._chartModelProvider().extensionValues({})}.bind(this));

        var _this = this;
        this._chart.on("selectData.chartview", function(selectData) {
            _this._dispatchEvent(new ChartEvent(ChartEvent.CHANGED_SELECTED_DATA, this));
            triggerCVOM("selectData", selectData);
        });

        this._chart.on("deselectData.chartview", function(deselectData) {
            _this._dispatchEvent(new ChartEvent(ChartEvent.CHANGED_SELECTED_DATA, this));
            triggerCVOM("deselectData", deselectData);
        });

        this._chart.on("showTooltip.chartview", function(data) {
            triggerCVOM("showTooltip", data);
        });

        this._chart.on("hideTooltip.chartview", function(data) {
            triggerCVOM("hideTooltip", data);
        });

        this._chart.on('contextualData.chartview', function(event) {
            this._dispatchEvent(new ChartEvent(ChartEvent.CONTEXT_MENU_TRIGGERED, this, event));
        }.bind(this));
        
        this._hasChartInstance = true;

        this._dispatchEvent(new ChartEvent(ChartEvent.CHART_CHANGED, this, this._chart));
    };

    MapView.prototype.getTemplateId = function(dataset){
        return this._templateId;
    };

    MapView.prototype._isMapInitialized = function(){
        return  this._mapInitialized;
    }
    
    /**
     * Update chart with updated options.
     * @param {Object} updates
     */
    MapView.prototype.update = function(updates) {
        if(this._isMapInitialized()) {
            var errorMsg;
            try {
                if(updates.data) {
                    if (!this._options.data) {
                        this._options.data = [];
                    }

                    for(var i = 0; i < updates.data.length; i++) {
                        if (updates.data[i] !== undefined) {
                            this._options.data[i] = updates.data[i]; 
                        }
                    }
                }
                var updateProps = updates.properties;
                if(updateProps) {
                    this._options.properties = updateProps;
                }
                if(updates.feeding) {
                    this._options.feeding = updates.feeding;
                }
                if(!this._chart) {
                    errorMsg = LangManager.get('VIZ_CHART_UPDATE_CHART_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
                    this._updateDescription(errorMsg);
                    throw errorMsg;
                }

                this._updateDescription();
                this._chartLayer$.css('opacity', '');
                //  this._updateChartSize(true);

                var map = this._chart;
                if(map) {
                    this._chartProxy.execute('map_doUpdate', map, updates);
                }

              return this;
          } catch (error) {
              //if (console) {
              //    console.log("Failed to update chart : " + error);
              //}
              errorMsg = LangManager.get('VIZ_CHART_UPDATE_CHART_FAILED') + error;
              this._updateDescription(errorMsg);
              throw errorMsg;
          }
        }else{
          this._updateCache = updates;
        }
    };

    MapView.prototype.doUpdate = function(map, updates) {
        if (!map || !updates) {
            return;
        }
        
        if(updates.data) {
            for(var i = 0; i < updates.data.length; i++) {
                if(updates.data[i] || updates.data[i] === null) {
                    var layer = map.getLayer(i);
                    var feeding = updates.feeding ? updates.feeding[i] : null;

                    if(layer) {
                        layer.data(updates.data[i], feeding, true);
                    }

                }
            }
        }

        if(updates.properties) {
            var layersProps = updates.properties.layers;
            if(layersProps) {
                layersProps.forEach(function(props, index) {
                    if(props) {
                        updateFormats(map.getLayer(index), props.formats);
                    }
                });
            }
        }
    };
    
    var legendFeedMap = {
      bubble : {
        measureFeedId : "size",
        legendPropName : "sizeLegend"
      },
      choropleth : {
        measureFeedId : "color",
        legendPropName : "mbcLegend"
      }
    };

    
    function updateFormats(layer, formats) {
       function getFormat(category) {
                var format = formats[category];
                if (format) {
                    format = format[feedId];
                    format = format && format[0];
                }

                return format;
            }
        if (layer && formats) {
            var viz = layer.viz();
            var vizType;
            if ( viz instanceof sap.viz.geo.dataviz.Marker) {
                vizType = "marker";
            } else if ( viz instanceof sap.viz.geo.dataviz.Bubble) {
                vizType = "bubble";
            } else if ( viz instanceof sap.viz.geo.dataviz.Choropleth) {
                vizType = "choropleth";
            }
            if (vizType) {
                var legendFeed = legendFeedMap[vizType];
                if (legendFeed) {
                    var feedId = legendFeed.measureFeedId;
                    var defaultFormat = getFormat("viz");

                    if (defaultFormat) {
                        var props = {};
                        props[legendFeed.legendPropName] = {
                            formatString : defaultFormat
                        };
                        props.dataLabel = {format: defaultFormat};
                        viz.properties(props);
                    }

                    var tooltipFormat = getFormat("tooltip") || defaultFormat;
                    if (tooltipFormat) {
                        layer.tooltipFormat(tooltipFormat);
                    }
                }
            }
        }
    }

    /**
     * Update chart feeding.
     * @param {Object} feeding
     */
    MapView.prototype.feeding = function(feeding, disableMorphing) {
        if(this._chart) {
            if(arguments.length > 0 && feeding.length > 0) {
                this._options.feeding = feeding;
                this._chartProxy.set('map_doFeeding', feeding, disableMorphing);
                return this;
            } else {
                return this._chartProxy.get('map_doFeeding', this._options.feeding);
            }
        } else {
            throw LangManager.get('VIZ_CHART_UPDATE_FEEDING_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
        }
    };
    
    
    MapView.prototype.doFeeding = function(feeding, disableMorphing) {
        try {
            if (this._chart) {
                var layers;
                if (arguments.length > 0 && feeding.length > 0) {
                    layers = this._chart.getLayers ? this._chart.getLayers() : this._chart._layers;
                    var length = layers.length > feeding.length ? feeding.length : layers.length;
                    for (var i = 0; i < length; ++i) {
                        if (feeding[i]) {
                            layers[i].feeding(feeding[i]);
                        }
                    }
                    return this;
                } else {
                    var feeds = [];
                    layers = this._chart.getLayers ? this._chart.getLayers() : this._chart._layers;
                    for (var j = 0; j < layers.length; ++j) {

                        var feed = layers[j].feeding();
                        feeds.push(feed);
                    }
                    return feeds;
                }
            } else {
                throw LangManager.get('VIZ_CHART_UPDATE_FEEDING_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
            }
        } catch (error) {
            //if (console) {
            //  console.log("Failed to update chart feeding : " + error);
            //}
            throw LangManager.get('VIZ_CHART_UPDATE_FEEDING_FAILED') + error;
        }
    }; 

      MapView.prototype.getValidProperties = function(properties, chartType) {
          if (chartType === ChartConst.TYPE_GEO_MAP) {
              return properties;
          }
          return VizUtils.getValidProperties(properties, chartType);
      };

        /**
         * Update chart properties.
         *
         * @param {Object} properties
         */
    MapView.prototype.properties = function(properties) {
        if (arguments.length > 0) {
            this._options.properties = $.extend(true, this._options.properties, properties);
            if (this._chart) {
                this._chartProxy.set('map_doProperties', properties);
                return this;
            } else {
                throw LangManager.get('VIZ_CHART_UPDATE_PROPERTIES_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
            }
        } else {
            return this._options.properties;
        }
    };
    
    MapView.prototype.doProperties = function(properties) {
        try {
            if (arguments.length > 0) {
                if (this._chart) {
                    var map = this._chart;
                    var mapLayers = this._chart.getLayers ? this._chart.getLayers() : this._chart._layers;
                    for (var i = 0; i < mapLayers.length; i++) {
                         var layer = mapLayers[i];
                         if (layer && properties.legend) {
                             layer.legendVisibility(properties.legend.visible);
                         }
                         
                         if(layer && properties.dataLabel){
                             layer.viz().properties({dataLabel:properties.dataLabel});
                          }
                    }
                    return this;
                } else {
                    throw LangManager.get('VIZ_CHART_UPDATE_PROPERTIES_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
                }
            }
        } catch (error) {
            throw LangManager.get('VIZ_CHART_UPDATE_PROPERTIES_FAILED') + error;
        }
    };


    MapView.prototype.copyData = function(type, data) {
      if (data && data.length > 0) {
         var result = [];
          for ( var i = 0; i < data.length; i++) {
            if (data[i] && data[i].id && 
               (data[i].id === "sap.viz.data.FlatTableDataset")) {
              var ftData = sap.viz.api.data.FlatTableDataset.fromJSON(data[i]);
              result.push(ftData);
            } else {
                result.push(data[i]);
            }
          }
          return result;
      } else {
        return data;
      }
    };

    MapView.prototype.buildFeedings = function(type, data, feeds){
        var result = [];
        for(var i=0; i<feeds.length; i++){
            result[i] = {};
            if(!feeds[i] || feeds[i].length ===0){
                continue;
            }
            feeds[i].forEach(function(f) {
                if (f._values && f._values.length) {
                   if(f._values[0].type() === AnalyticalType.HIERARCHY) {
                      for(var j = 0; j < f._values[0].hierarchyLevels().length; j++) {
                        var level = f._values[0].hierarchyLevels()[j];
                        // use hierarchy level object id, in case its
                        // analysis object is also used in another
                        // hierarchy level object, but with a
                        // different hierarchy level name.
                        if(level.selected()) {
                           result[i][f._id] = level._id;
                           break;
                        }
                      }
                    }else{
                      result[i][f._id] = f._values[0]._id;
                    }

                }
            });
        }

        return result;
    };
    /*
     * Create base map with different types for Geo Map.
     */
    MapView.prototype.createBaseMap = function(mapType, options) {
        var baseMap = null;
        var option;
        
        //use offline content for ESRI
        useLocalLocationRepository.call(this);
        if (mapType === MapProviderConst.ESRI) {
          // Default base map type is 'topo'.
          var type = 'topo';
          if (options && options.type) {
              type = options.type;
          }

          return new sap.viz.geo.basemap.esri.Provider({
              //extent : new esri.geometry.Extent(-115, -34, 115, 76),
              basemap : type
          });

        } else if (mapType === MapProviderConst.NAVTEQ) {
            option = {
                center : [40.72, -84],
                zoom : 5
            };

            return new sap.viz.geo.basemap.navteq.Provider(option);

        } else {
            option = {
                center : [-84, 40.72],
                scale : 6000
            };

            return new sap.viz.geo.basemap.cvom.Provider(options);
        }
    };

    MapView.prototype.FeedsToJSON = function(feeds) {
        var feedingItemsJSON = [];
        for(var i = 0; i < feeds.length; i++) {
            feedingItemsJSON[i] = FeedItem.toJSON(feeds[i]);
        }
        return feedingItemsJSON;
    };

    MapView.prototype.FeedsFromJSON = function(valueJSON){
        var feeds = [];
        for(var i = 0; i < valueJSON.length; i++) {
            feeds[i] = FeedItem.fromJSON(valueJSON[i]);
        }
        return feeds;
    };

    MapView.prototype._queryEsriServices = function(callback){
      var credential = sap.viz.geo.basemap.esri.Authentication.credential();
      if(credential != null && credential.username && credential.accessToken){
   
         queryEsriCustomerServices.call(this, credential, function(esriFeatureServices){
               callback.call(this, esriFeatureServices);
         }.bind(this));
         
      }else{
         this._showMessage(LangManager.get('VIZ_CHART_ESRI_MAP_AUTHENTICATION_FAIL'));
      }
      
    };
    
    MapView.prototype._showMessage = function(message){
       var topPos = $(this._div).height()/2 - this._messageDialog$.height()/2;
       var leftPos = $(this._div).width()/2 - this._messageDialog$.width()/2;
       this._messageDialog$.css({top: topPos, left: leftPos});
       this._messageDialog.show(message);
    };

    MapView.prototype._chooseMapServiceAsBaseMap = function(){

      //this._showMessage(LangManager.get('VIZ_CHART_QUERY_ESRI_FEATURE_SERVICE'));
      
      this._queryEsriServices(function(esriServices){
        this._messageDialog.hide();
        this._esriservices = esriServices;
        if(this._esriservices && this._esriservices.length > 0){
          var topPos = $(this._div).height()/2 - this._mapselector$.height()/2;
          var leftPos = $(this._div).width()/2 - this._mapselector$.width()/2;
          this._mapselector$.css({top: topPos, left: leftPos});
          this._mapServiceSelector.show(this._esriservices, this._selectedServiceId);
        }else{
          this._showMessage(LangManager.get('VIZ_CHART_NO_ESRI_SERVICE'));
        }


      }.bind(this));


    }

    MapView.prototype._getVizTypeByVizId = function(vizId){
        if(vizId === "sap.viz.geo.dataviz.Bubble"){
           return "bubble";
        }else if(vizId === "sap.viz.geo.dataviz.Marker"){
           return "marker";
        }else{
           return "choropleth";
        }

    };

    MapView.prototype._restoreMapBuilder = function(loadedViz){
         if(this._loadedViz){
            var builderstatus = [];
            if(this._loadedViz.layers.length > 0){
              var feedingItems = this._chartModelProvider().feedingItems();
              for(var i = 0; i < this._loadedViz.layers.length; i++){
                  var vizType = this._getVizTypeByVizId(this._loadedViz.vizs[this._loadedViz.layers[i].vizIndex].id);
                  var title = "";
                  if(feedingItems[i].length > 0){
                     if(feedingItems[i][0].values().length > 0){
                        title = feedingItems[i][0].values()[0].name();
                     }
                  }

                  var clusterChecked = false;
                  if(vizType === "bubble" || vizType === "marker"){
                    clusterChecked = this._loadedViz.vizs[this._loadedViz.layers[i].vizIndex].options.cluster.enabled;
                  }
                  var section = {
                      checked: this._loadedViz.layers[i].options.visible,
                      feeding: {
                        feeding: this.FeedsToJSON(feedingItems[i])
                      },
                      title : title,
                      titleText : vizType,
                      vizType: vizType,
                      sortable: true,
                      clusterChecked : clusterChecked
                 };

                 builderstatus.push(section);
              }
            }
            
            this._chartModelProvider().extensionValues({
              mapBuilder:{
                status: builderstatus,
                provider : this._loadedViz.properties.provider
              }
            });
         }
         if(this._loadedViz && this._selectedServiceId)
         {
           this._queryEsriServices(function(esriServices){
             this._esriservices = esriServices;
             if(this._esriservices && this._esriservices.length > 0){
             this._chartModelProvider().extensionValues({
               mapBuilder : {
                 mapservice : {
                     showRadio : true,
                     checked : !!this._enableService
                 }
               }
             });
           }

         }.bind(this));
        }
         this._loadedViz = null;
    };

   MapView.prototype.exportable = function() {
      return this._chart != null;
   };

   MapView.prototype.exportToSVGString = function(option) {
       return "";
   };

   MapView.prototype.queryProperties = function(options) {
       return {};
   };

   MapView.prototype.updateProperties = function(options) {
   };

   // Currently map does not support property zone
   MapView.prototype.selectedPropertyZone = function() {
      if (arguments.length) {
        return this;
      }

      return null;
   };

    return MapView;
});

// @formatter:off
define('sap/viz/controls/chart/views/TableView',[
    'jquery',
    'sap/viz/controls/common/config/GlobalConfig',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/constants/DatasetTypeConst',
    'sap/viz/controls/common/constants/MapProviderConst',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/events/FeedEvent',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/utils/TrellisUtils',
    'sap/viz/controls/common/utils/VizUtils',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/chart/views/ChartEvent',
    'sap/viz/controls/chart/ChartConfig',
    'sap/viz/controls/chart/views/View',
    'sap/viz/controls/common/utils/IncompleteGhost'
],
function($, GlobalConfig, ChartConst, DatasetTypeConst, MapProviderConst, Event, FeedEvent, FeedUtils, LangManager,
    OOUtil, utils, ChartTypeUtil, TrellisUtils, VizUtils, CSSConst,
    ChartEvent, ChartConfig, View, IncompleteGhost) {
// @formatter:on
    /**
     * TableView View represent a CVOM chart.
     */
    var TableView = function(div/*HTMLDivElement*/, options, libFolderPath, chartModelProvider) {
        TableView.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.view.TableView";

        this._createChildren();
    };

    OOUtil.extend(TableView, View);

    TableView.prototype._createChildren = function() {
        TableView.superclass._createChildren.apply(this, arguments);

        this._createDropZone();
    };

    /**
     * Copied from ChartView for supporting Title
     * Get title zone for chart instance.
     * @returns {Array}
     */
    TableView.prototype.getTitleZone = function() {
        if (!this._chart) {
            return [];
        }
        var thisChartId = this._options.type;
        var zone;
        try {
            zone = this._chartProxy.get('propertyZone', []);
        } catch(error) {
            return [];
        }
        var titleZone = [];
        for (var i = 0; i < zone.length; i++) {
            if (zone[i].name == 'title') {
                titleZone = zone[i].bound[0];
                break;
            }
        }
        return titleZone;
    };

    /**
     * Copied from ChartView for supporting Title
     * Update chart properties.
     * @param {Object} properties
     */
    TableView.prototype.properties = function(properties, disableMorphing) {
        try {
            if (!disableMorphing) {
                this._requestMorphing = true;
            }
            if (arguments.length > 0) {
                this._options.properties = properties;
                if (this._chart) {
                    this._chartProxy.set('properties', properties);
                    return this;
                } else {
                    throw LangManager.get('VIZ_CHART_UPDATE_PROPERTIES_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
                }
            } else {
                return this._chartProxy.get('properties', this._options.properties);
            }
        } catch (error) {
            //if(console) {
                //console.log("Failed to update chart properties : " + error);
                //}
            throw LangManager.get('VIZ_CHART_UPDATE_PROPERTIES_FAILED') + error;
        }
    };
    
    /**
     * Update chart css.
     * @param {Object} css
     */
    TableView.prototype.css = function(css) {
        try {
            if (arguments.length > 0) {
                // update css cache according to new css
                this._updateCssCacheByNewCss(css);
                this._options.css = css;
                if (this._chart) {
                    this._chartProxy.set('css', css);
                    return this;
                } else {
                    throw LangManager.get('VIZ_CHART_UPDATE_CSS_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
                }
            } else {
                return this._chartProxy.get('css', this._options.css);
            }
        } catch (error) {
            throw LangManager.get('VIZ_CHART_UPDATE_CSS_FAILED') + error;
        }
    };

    /**
     * create chart instance
     */
    TableView.prototype._createChartInstance = function() {
        this._hasChartInstance = false;
        var options = this._options;
        var chartDiv$ = this._chartLayer$;
        var descriptionDiv$ = this._descriptionLayer$;
        var chartHolderDiv$ = this._chartHolder$;
        var vizType = options.type;

        this._destroyChartInstance();

        try {
            // send chart changing event
            this._dispatchEvent(new ChartEvent(ChartEvent.CHART_CHANGING, this, vizType));
            var hasError = this._updateDescriptionByOptions(options);
            
            if (!hasError) {

                // need to show and hide because chartInstance need the layer not be hidden
                var originalValue = this._chartLayer$.css("visibility");
                this._chartLayer$.css("visibility", "visible");

                this._chart = this._chartProxy.execute('sap.viz.api.core.createViz', {
                    type : vizType,
                    data : options.data,
                    feeding : options.feeding,
                    properties : options.properties,
                    css : options.css,
                    events : options.events,
                    container : chartDiv$.get(0)
                });
                this._chartLayer$.css("visibility", originalValue);

                if (this._chart) {
                    this._postVizProcess(options);
                }
            }

        } catch (error) {
            //if (console) {
            //    console.log("Failed to create chart : " + error);
            //}
            var errorMsg = LangManager.get('VIZ_CHART_CREATE_CHART_FAILED') + error;

            if (ChartTypeUtil.isValid(vizType)) {
                this._updateDescription(utils.substitute(LangManager.get("VIZ_CHART_INVALID_VIZ_TYPE"), vizType));
            } else {
                this._updateDescription(errorMsg);
            }
            // clean up
            chartDiv$.html("");
            this._chart = null;
            this._hasChartInstance = false;
            throw errorMsg;
        }
    };
    /**
     * Post process after create viz instance.
     */
    TableView.prototype._postVizProcess = function(options) {
        Object.keys(this._onEventMap).forEach($.proxy(function(key) {
            var callback = this._onEventMap[key];
            this._chart.on(key, callback);
        }, this));

        this._hasChartInstance = true;
        this._dispatchEvent(new ChartEvent(ChartEvent.CHART_CHANGED, this, this._chart));
    };

    TableView.prototype.buildFeedings = function(type, data, feeds) {
        var feeding = null;
        if (!data || ChartTypeUtil.isEmptyData(type, data)) {
            return feeding;
        }
        if (!VizUtils.hasFakeData(data) && !ChartTypeUtil.isEmptyData(type, data) && !FeedUtils.isEmptyFeeds(feeds)) {
            feeding = [];
            feeds.forEach(function(feedItem) {
                var id = feedItem.id();
                feeding[id] = [];
                feedItem.values().forEach(function(analysisObj) {
                    var item = {
                        "id" : analysisObj.id(),
                        "name" : analysisObj.name(),
                        "type" : analysisObj.type()
                    }
                    feeding[id].push(item);
                });
            });
        }
        return feeding;
    };

    /**
     * @param {JSON} options
     *      optional
     *      supported options: {emptyDataset : false}
     * Need to override the function in View class for keeping the properties 
     * that will be updated by Table itself
     * Return the chart JSON String.
     */
    TableView.prototype.exportViz = function(options) {
      if (this._chart) {
        var result = this._chartProxy.execute('toJSON', options);
        return result;
      } else {
          throw LangManager.get('VIZ_CHART_SERIALIZE_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
      }

    };
    
    return TableView;
});

// @formatter:off
define('sap/viz/controls/chart/ViewManager',[
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/chart/views/ChartView',
    'sap/viz/controls/chart/views/InfoChartView',
    'sap/viz/controls/chart/views/MapView',
    'sap/viz/controls/chart/views/TableView'
],
function(ChartConst, ChartTypeUtil, ChartView, InfoChartView, MapView, TableView){
// @formatter:on

    var typeView = {};
    var ViewManager = {};
    
    ViewManager._register = function(type, viewClass){
        if(type && viewClass){
            typeView[type] = viewClass;
        }
    };
    
    ViewManager._getViewClass = function(type){
        if(typeView.hasOwnProperty(type)){
            return typeView[type];
        } else if(ChartTypeUtil.isInfoChart(type)){
            return InfoChartView;
        } else {
            return ChartView;
        }
    };
    
    ViewManager.getViewClass = function(type){
        return ViewManager._getViewClass(type);
    };
    
    ViewManager._register(ChartConst.TYPE_GEO_MAP, MapView);
    ViewManager._register(ChartConst.TYPE_TABLE, TableView);
    ViewManager._register(ChartConst.TYPE_CROSSTAB, TableView);

    return ViewManager;
}
);

define('sap/viz/controls/common/services/scalesharing/ScaleMixer',
// @formatter:off
[
"sap/viz/controls/common/utils/Utils"
], 
function( Utils ) {
// @formatter:on
    var clone = Utils.clone;

    /* To convert context to a unique string representing this context content(values only, no keys included). */
    function uniKey (context) {
        if ( context == null ) {
            return undefined;
        }

        var values = [];
        Object.keys(context).forEach(function (key) {
            var v = context[key];
            if ( v ) {
                values.push( v );
            }
        });
        
        // compute a hash based on the length of each string
        values.sort();
        var i = 0, len = values.length, hash = 0;
        for ( ; i< len; i++ ) {
            hash = (hash << 5) - hash + values[i].length;
            hash |= 0;
        }
        values.unshift( hash );
        return values.join(",");
    }

    function ScaleMixer () {
        this.scalesLookup = {}; // key: uniKey, value: scale info holder
    }

    ScaleMixer.prototype.mergeScale = function (scale) {
        var unikey = uniKey(scale.dataContext),
            savedScale = this.scalesLookup[ unikey ];

        if ( !savedScale ) {
            savedScale = this.scalesLookup[ unikey ] = {
                // unikey: unikey,
                contexts: [ scale.dataContext ],
                scale: scale.scaleResult
            };
        }

    };

    ScaleMixer.prototype.getMergedScales = function () {
        var lookup = this.scalesLookup;
        return Object.keys(lookup).reduce(function (list, key) {
            var value = lookup[key];

            Array.prototype.push.apply(list,
                value.contexts.map(function (context) {
                    return {
                        dataContext: context,
                        scaleResult: value.scale
                    };
                })
            );

            return list;
        }, []);
    };

    return ScaleMixer;
});

define('sap/viz/controls/common/services/scalesharing/ScaleGroup',
// @formatter:off
[
"sap/viz/controls/common/utils/Utils",
"sap/viz/controls/common/services/scalesharing/ScaleMixer"
], 
function( Utils, ScaleMixer ) {
// @formatter:on
    var clone = Utils.clone;

    // merge scales from sharingObj in list into scaleMixerLookup, scaleMixerLookup is a plain object.
    function merge (scaleMixerLookup, list) {

        function getScaleMixer (name) {
            var si = scaleMixerLookup[ name ];
            if (si == null) {
                si = scaleMixerLookup[ name ] = new ScaleMixer();
            }
            return si;
        }

        list.forEach( function (e) { // loop on scalableOjbects, like vizframe
            var sharingObj = e,
                scales = sharingObj.runtimeScales();

            scales.forEach( function (scale) { // loop on "color", "axis" ...
                var scaleMixer = getScaleMixer(scale.feed);

                scale.results.forEach( function (e) {
                    scaleMixer.mergeScale( e );
                } );
            } );
        } );

        return scaleMixerLookup;
    }

    function ScaleGroup () {
        this._list = [];
        this._sharedRuntimeScales = [];
    }

    ScaleGroup.prototype.add = function (sharingObj, index) {
        var idx = this._list.indexOf(sharingObj);
        if (idx > -1) {
            return;
        }
        if ( index == null ) {
            this._list.push( sharingObj );
        }
        else if ( this._list[ index ] == null ) {
            this._list[ index ] = sharingObj;
        }
        else {
            this._list.splice(index, 0, sharingObj);
        }
    };

    ScaleGroup.prototype.remove = function (sharingObj) {
        var idx = this._list.indexOf(sharingObj);
        if ( idx > -1 ) {
            this._list.splice(idx, 1);
        }
    };

    ScaleGroup.prototype.indexOf = function (sharingObj) {
        var idx = this._list.indexOf(sharingObj);
        return idx;
    }

    ScaleGroup.prototype.load = function (sharingObj, index, sharedRuntimeScales) {
        this.add(sharingObj, index);

        this._sharedRuntimeScales = toRuntimeScales(
            merge ( {}, [
                {
                    runtimeScales: (function () {
                        return this._sharedRuntimeScales;
                    }).bind(this)
                },
                {
                    runtimeScales: function () {
                        return sharedRuntimeScales;
                    }
                }
            ])
        );
    };

    function toRuntimeScales (scaleMixerLookup) {
        return Object.keys(scaleMixerLookup).map( function (key) {
            var runtimeScaleResults = scaleMixerLookup[ key ].getMergedScales();
            return {
                feed: key,
                results: runtimeScaleResults
            };
        } );
    }

    ScaleGroup.prototype.getRuntimeScales = function (beforeObject) {
        var scaleMixerLookup,
            runtimeScales,
            list = [];

        if ( beforeObject ) { // specified using all sharingObj before "beforeObject", not included "beforeObject"
            this._list.some( function (e) {
                var is = ( e === beforeObject );
                if ( !is ) {
                    list.push(e);
                }
                return is;
            } );
        }
        else {
            list = this._list.slice();
        }

        list = list.filter( function (e) {
            return e != null;
        } );

        if ( this._sharedRuntimeScales ) {
            list.push( {
                runtimeScales: (function () {
                    return this._sharedRuntimeScales;
                }).bind(this)
            } );
        }

        scaleMixerLookup = merge( {}, list );

        // output to runtime scales
        runtimeScales = toRuntimeScales( scaleMixerLookup );
        this._sharedRuntimeScales = runtimeScales;
        return runtimeScales;
    };

    // fromScalable is supposed in the list. split the list by the position of fromScalable.
    // if cannot find fromScalabe or not provided, return [ [], list ];
    function split ( list, fromScalable ) {
        var list1, list2, idx;

        if ( fromScalable == null ) {
            return [ [], list.slice() ];
        }

        list.some( function (e, i) {
            if ( e === fromScalable ) {
                idx = i;
                return true;
            }
        } );

        if ( idx != null ) {
            list1 = list.slice();
            list2 = list1.splice(idx);
            return [ list1, list2 ];
        }
        else {
            return [ [], list.slice() ];
        }
    }

    ScaleGroup.prototype.syncScales = function (fromScalable) {
        var splitList = split( this._list, fromScalable );
        var scaleMixerLookup = {};

        merge( scaleMixerLookup, splitList[0] );

        splitList[1].forEach( function (e) {
            var runtimeScales = toRuntimeScales( scaleMixerLookup );
            e.sharedRuntimeScales( runtimeScales );

            merge( scaleMixerLookup, [e] );
        } );
    };

    return ScaleGroup;
});

define('sap/viz/controls/common/services/ScaleSharingService',
// @formatter:off
[
"sap/viz/controls/common/services/scalesharing/ScaleGroup"
], 
function(ScaleGroup) {
// @formatter:on
    var service = {};

    var groupLookup = {}, // key: group name, value: ScaleGroup
        groupNameLookup = {}; // key: vizUid, value: group name

    function getScaleGroup (name) {
        var group = groupLookup[ name ];
        if (group == null) {
            group = groupLookup[ name ] = new ScaleGroup();
        }
        return group;
    }

    function removeFromScaleGroup (sharingObj, group) {
        var scaleGroup = getScaleGroup( group );
        scaleGroup.remove( sharingObj );
        delete groupNameLookup[ sharingObj.vizUid() ];
    }

    /**
     * Add VizFrame instance to a group.
     * If chart is already in another group, it will be moved to the new assgined group.
     *
     * @param {VizFrame} chart
     * @param {String} group
     * @param {Number} [index]
     *                      The VizFrame index in the group, index decides the order to merge scale results
     */
    service.add = function (sharingObj, group, index) {
        var groupName = groupNameLookup[ sharingObj.vizUid() ],
            scaleGroup;

        if (groupName) {
            // remove sharingObj from current group
            removeFromScaleGroup( sharingObj, groupName );
        }

        // add sharingObj to group
        groupNameLookup[ sharingObj.vizUid() ] = group;
        scaleGroup = getScaleGroup( group );
        scaleGroup.add( sharingObj, index );
    };

    /**
     * Load VizFrame instance to a group. The difference between add and load is the index parameter and
     * sharedRuntimeScales parameter.
     * If chart is already in another group, it will be moved to the new assgined group.
     *
     * @param {VizFrame} chart
     * @param {String} group
     * @param {Number} index
     *                      The VizFrame index in the group, index decides the order to merge scale results
     * @param {JSON} sharedRuntimeScales
     *              sharedRuntimeScales which saved before
     */
    service.load = function (sharingObj, group, index, sharedRuntimeScales) {
        var groupName = groupNameLookup[ sharingObj.vizUid() ],
            scaleGroup;

        if ( groupName === group ) {
            return; // if alreay exist in group, do nothing
        }

        if ( groupName ) {
            // remove sharingObj from current group
            removeFromScaleGroup( sharingObj, groupName );
        }

        // add sharingObj to group
        groupNameLookup[ sharingObj.vizUid() ] = group;
        scaleGroup = getScaleGroup( group );
        scaleGroup.load( sharingObj, index, sharedRuntimeScales );
    };

    /**
     * Remove VizFrame finstance rom its group
     *
     * @param {VizFrame} chart
     **/
    service.remove = function (sharingObj) {
        var groupName = groupNameLookup[ sharingObj.vizUid() ];

        if (groupName) {
            // remove sharingObj from current group
            removeFromScaleGroup( sharingObj, groupName );
            return true;
        }
        return false;
    };

    /**
     * Retrieve merged runtime scales of the chart in its group by index order
     *
     * @param {VizFrame} [chart]
     *
     * @return {Array} runtimeScales
     */
    service.getSharedRuntimeScales = function (sharingObj) {
        var group;
        if ( typeof sharingObj === "string" ) {
            group = sharingObj;
        }
        else {
            group = groupNameLookup[ sharingObj.vizUid() ];
        }
        if (group == null) {
            return undefined;
        }
        var scaleGroup = getScaleGroup( group );
        if (scaleGroup == null) {
            return undefined;
        }

        return scaleGroup.getRuntimeScales();
    };

    /**
     * Get group by chart
     */
    service.getGroup = function (sharingObj) {
        var group = groupNameLookup[ sharingObj.vizUid() ];
        return group;
    };

    service.getIndexInGroup = function (sharingObj) {
        var group = groupNameLookup[ sharingObj.vizUid() ];
        if (group == null) {
            return undefined;
        }
        var scaleGroup = getScaleGroup( group );
        if (scaleGroup == null) {
            return undefined;
        }

        return scaleGroup.indexOf( sharingObj );
    };

    return service;
});

define('sap/viz/controls/chart/VizProxyHandler',['sap/viz/controls/runtime/VizProxy', 'sap/viz/controls/chart/views/ChartEvent'], function(VizProxy, ChartEvent) {
    var VizProxyHandler = function(chart) {
        this.__className = "sap.viz.controls.chart.VizProxyHandler";
        this._chart = chart;
        this._init();
    };

    VizProxyHandler.prototype._init = function() {
        this._operationMap = {};
        this._operationMap[VizProxy.GetTitleZoneOperation] = this._getTitleZone;
        this._operationMap[VizProxy.GetTitleTextOperation] = this._getTitleText;
        this._operationMap[VizProxy.SetTitleTextOperation] = this._setTitleText;
        this._operationMap[VizProxy.GetTitleTextByFeedingOperation] = this._getTitleTextByFeeding;
        this._operationMap[VizProxy.RestoreTitleTextOperation] = this._restoreTitleText;
        this._operationMap[VizProxy.SetTitleModeOperation] = this._setTitleMode;
        this._operationMap[VizProxy.IsFakeChartOperation] = this._isFakeChart;
        this._operationMap[VizProxy.IsTitleCustomizedOperation] = this._isTitleCustomized;
        this._operationMap[VizProxy.GetPropertiesOperation] = this._getProperties;
        this._operationMap[VizProxy.SetPropertiesOperation] = this._setProperties;
        this._operationMap[VizProxy.GetSelectionOperation] = this._getSelection;
        this._operationMap[VizProxy.SetDatasetOperation] = this._setDataset;
        this._operationMap[VizProxy.GetPropertyZonesOperation] = this._getPropertyZones;
        this._operationMap[VizProxy.SetPropertyZonesOperation] = this._setPropertyZones;
        this._operationMap[VizProxy.QueryPropertiesOperation] = this._queryProperties;
        this._operationMap[VizProxy.UpdatePropertiesOperation] = this._updateProperties;
        this._operationMap[VizProxy.GetDatasetOperation] = this._getDataset;
        this._operationMap[VizProxy.AddEventListenerOperation] = this._addEventListener;
        this._operationMap[VizProxy.RemoveEventListenerOperation] = this._removeEventListener;
        this._operationMap[VizProxy.SetAxisScaleOperation] = this._setAxisScaleListener;
        this._operationMap[VizProxy.GetDataPointsPosition] = this._getDataPointsPosition;
        this._operationMap[VizProxy.GetTypeOperation] = this._getType;
        this._operationMap[VizProxy.OnOperation] = this._on;
        this._operationMap[VizProxy.OffOperation] = this._off;
        this._operationMap[VizProxy.GetSizeOperation] = this._getSize;
        this._operationMap[VizProxy.SetSizeOperation] = this._setSize;
        this._operationMap[VizProxy.GetVizFeedingOperation] = this._getVizFeeding;
        this._operationMap[VizProxy.GetScalesOperation] = this._getScales;
        this._operationMap[VizProxy.SetScalesOperation] = this._setScales;
    };

    VizProxyHandler.prototype.response = function(data) {
        var operation = data.operation;
        var args = data.args;
        data.result = this._operationMap[operation].apply(this, args);
    };
    VizProxyHandler.prototype._getTitleZone = function() {
        return this._chart.getTitleZone();
    };
    VizProxyHandler.prototype._getTitleText = function() {
        return this._chart.titleWithInteracionEvent();
    };
    VizProxyHandler.prototype._setTitleText = function(titleText) {
        this._chart.titleWithInteracionEvent(titleText);
    };
    VizProxyHandler.prototype._getTitleTextByFeeding = function() {
        return this._chart.getTitleTextByFeeding();
    };
    VizProxyHandler.prototype._restoreTitleText = function() {
        this._chart.restoreTitleText();
    };
    VizProxyHandler.prototype._setTitleMode = function(mode) {
        this._chart.vizTitleMode(mode);
    };
    VizProxyHandler.prototype._isFakeChart = function() {
        return this._chart.isFake();
    };
    VizProxyHandler.prototype._isTitleCustomized = function() {
        return this._chart.isTitleCustomized();
    };
    VizProxyHandler.prototype._getProperties = function() {
        return this._chart.propertiesWithEvents();
    };
    VizProxyHandler.prototype._setProperties = function(newProperties, trigger) {
        this._chart.propertiesWithEvents(newProperties, [
            ChartEvent.USER_INTERACTION_COMPLETE,
            ChartEvent.VIZ_PROPERTIES_CHANGED
        ], trigger);
    };

    VizProxyHandler.prototype._setDataset = function(options) {
        this._chart.vizUpdate({data:options});
    };

    VizProxyHandler.prototype._getSelection = function() {
        return this._chart.vizSelection();
    };
    VizProxyHandler.prototype._getType = function() {
        return this._chart.vizType();
    };

    VizProxyHandler.prototype._getPropertyZones = function() {
        return this._chart.getPropertyZones();
    };

    VizProxyHandler.prototype._setPropertyZones = function(value) {
        this._chart.setPropertyZones(value);
    };

    VizProxyHandler.prototype._queryProperties = function(options) {
        return this._chart.queryProperties(options);
    };

    VizProxyHandler.prototype._updateProperties = function(options, trigger) {
        this._chart.updateProperties(options, trigger);
    };

    VizProxyHandler.prototype._getDataset = function() {
        return this._chart.vizData();
    };

    VizProxyHandler.prototype._addEventListener = function(type, listener, scope, priority) {
        this._chart.addEventListener(type, listener, scope, priority);
    };

    VizProxyHandler.prototype._removeEventListener = function(type, listener, scope) {
        this._chart.removeEventListener(type, listener, scope);
    };

    VizProxyHandler.prototype._setAxisScaleListener = function(zone){
        return this._chart.setAxisScale.apply(this._chart, arguments);
    };

    VizProxyHandler.prototype._getDataPointsPosition = function(dataPoints){
        return this._chart.getDataPointsPosition.apply(this._chart, arguments);
    };

    VizProxyHandler.prototype._on = function(evtType, callback){
        return this._chart.vizOn.apply(this._chart, arguments);
    };

    VizProxyHandler.prototype._off = function(evtType){
        return this._chart.vizOff.apply(this._chart, arguments);
    };

    VizProxyHandler.prototype._getSize = function() {
        return this._chart.size();
    };
    VizProxyHandler.prototype._setSize = function(size) {
        if (size) {
            this._chart.size(size);
            this._chart._dom$.parent().width(size.width);
            this._chart._dom$.parent().height(size.height);
        }
    };

    VizProxyHandler.prototype._getVizFeeding = function() {
        return this._chart.getFeeding();
    };

    VizProxyHandler.prototype._getScales = function() {
        return this._chart.vizScales();
    };

    VizProxyHandler.prototype._setScales = function(scales) {
        return this._chart.vizScales(scales);
    };

    return VizProxyHandler;
});

/**
 * Class Chart control
 */
// @formatter:off
define('sap/viz/controls/chart/Chart',[
    'jquery',
    'sap/viz/controls/common/constants/FeedConst',
    'sap/viz/controls/common/VizControlBase',
    'sap/viz/controls/common/config/GlobalConfig',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/constants/DatasetTypeConst',
    'sap/viz/controls/common/constants/EventTypeConst',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/events/FeedEvent',
    'sap/viz/controls/common/feeds/FeedItem',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/VizUtils',
    'sap/viz/controls/common/utils/InfoChartUtil',
    'sap/viz/controls/common/utils/migrators/ChartMigrator',
    'sap/viz/controls/common/metadata/MetadataFactory',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/chart/ChartConfig',
    'sap/viz/controls/chart/ChartPreHandler',
    'sap/viz/controls/chart/ChartProxy',
    'sap/viz/controls/common/utils/IncompleteGhost',
    'sap/viz/controls/chart/views/ChartView',
    'sap/viz/controls/chart/views/ChartEvent',
    'sap/viz/controls/chart/views/View',
    'sap/viz/controls/chart/views/InfoChartView',
    'sap/viz/controls/chart/ViewManager',
    'sap/viz/controls/runtime/RuntimeManager',
    'sap/viz/controls/common/services/BVRService',
    'sap/viz/controls/common/services/FeedValidationService',
    'sap/viz/controls/common/services/ScaleSharingService',
    'sap/viz/controls/runtime/VizProxy',
    'sap/viz/controls/chart/VizProxyHandler',
    'sap/viz/controls/chart/morph/VizMorpher',
    'sap/viz/controls/common/constants/CSSConst'
    ],
function($, FeedConst, VizControlBase, GlobalConfig, ChartConst, DatasetTypeConst, EventTypeConst, Event,
    FeedEvent, FeedItem, FeedItemType, FeedUtils, ChartTypeUtil,
    OOUtil, utils, VizUtils, InfoChartUtil, ChartMigrator, MetadataFactory, LangManager,
    ChartConfig, ChartPreHandler, ChartProxy, IncompleteGhost, ChartView, ChartEvent, View, InfoChartView, ViewManager, RuntimeManager, BVRService, FeedValidationService, ScaleSharingService,
    VizProxy, VizProxyHandler, VizMorpher, CSSConst) {
// @formatter:on

    /**
     * The Chart class is a control to wrap a viz instance.
     * @class sap.viz.controls.chart.Chart
     * @param {HTMLElement} div
     *                      The dom element to host the VizFrame.
     * @param {JSON} [uiConfig]
     *               UIConfig for Chart.
     * @extends sap.viz.controls.common.VizControlBase
     */
    var Chart = function Chart(div/*HTMLDivElement*/, uiConfig/*JSON*/) {
        if (div == null) {
            throw new Error("div param is required in constructor of Chart.");
        }
        Chart.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.Chart";
        /** container of Chart */
        this._div = div;
        /** default config */
        this._uiConfig = uiConfig ? uiConfig : ChartConfig.instance();
        this._uiConfig.libFolderPath = GlobalConfig.defaultAssetsRoot() + '/common/libs';

        /** layout of Chart */
        this._layout = null;
        /** chart */
        // TODO Rename to _chartView
        this._chartViewInstance = null;
        this._chartViewManager = {};
        /** chart type */
        this._type = null;
        /** last vizChart direction, only for viz chart css update */
        this._vizDirection = null;
        /** chart data */
        this._data = null;
        /*only store custmized properties of user input*/
        this._properties = null;
        this._scales = [];
        this._categoryAxis = [];
        this._valueAxis = [];
        this._labelFormats = null;
        /** chart style */
        this._css = null;
        this._description = null;

        this._vizCreated = false;
        this._enableVizDefChangedEvent = true;

        /**
         *userInteractionComplete is enabled
         */
        this._enableUserInteractionComplete = true;

        this._loadingModel = false;
        this._loadingInstance = false;
        this._titleMode = Chart.VIZ_TITLE_MODE.auto;
        this._titleGeneratorFunc = null;

        this._enableTrellis = (this._uiConfig.enableTrellis !== false);
        this._enableMorphing = (this._uiConfig.enableMorphing !== false);
        this._vizMorpher =  null;
        //Chart does not have connect API, so we need to register model and set vizUid.
        RuntimeManager.getRuntime().registerModel(this._uid, this._vizModel());

        this._vizProxyHandler = new VizProxyHandler(this);
        this._vizModel().addEventListener(VizProxy.VizProxyEvent, function(event) {
            this._vizProxyHandler.response(event.data);
        }, this);

        this._chartPreHandler = new ChartPreHandler();

        this._chartProxy = new ChartProxy(this);

        //create Chart
        this._createChildren();

        // Store the events which are listened via vizOn().
        this._onEventMap = {};
    };
    // API document: events
    /**
     * Dispatches "vizTypeChanged" event when visualization type changes by UI operation.
     * <pre>
     * type: "vizTypeChanged"
     * handler: function({
     *                    type: "vizTypeChanged",
     *                    token: "<uuid>",
     *                    data: {
     *                      type : "<vizType>"
     *                    }
     * })
     * </pre>
     * @event sap.viz.controls.chart.Chart#vizTypeChanged
     * @param {String} evt.type "vizTypeChanged".
     * @param {Object} evt.data
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var chart = new Chart(...);
     * var vizTypeChangedHandler = function(event) {
     *     console.log("vizTypeChanged event from Chart( type: '" + e.data.type + "' ).");
     * };
     * chart.addEventListener('vizTypeChanged', vizTypeChangedHandler);
     * </pre>
     */

    /**
     * Dispatches "feedsChanged" event when the feeding changes due to add/remove/change feeding items on feeding panel,
     * drag and drop object onto Chart, or switch chart type by UI operation.<br/><br/>
     * Application should listen to "feedsChanged" event to get the corresponding data and set it back to Chart to
     * update the visualization with the new data.
     *
     * <pre>
     * type: "feedsChanged"
     * handler: function({
     *                    type: "feedsChanged",
     *                    data.feeds: [{feedId, binding}]
     * })
     * </pre>
     * @event sap.viz.controls.chart.Chart#feedsChanged
     * @param {String} evt.type "feedsChanged".
     * @param {Object} evt.data
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var chart = new Chart(...);
     * var feedsChangedHandler = function(event) {
     *     // an array of FeedItem objects
     *     var feedItems = event.data.feeds;
     *
     *     // Application could restore to initial value, if there is no feeding
     *     if (feedItems || feedItems.length === 0) {
     *         var dataSet = new sap.viz.api.data.CrosstableDataset();
     *         dataSet.data(null);
     *         chart.vizUpdate({
     *             data : null
     *         });
     *         return;
     *     }
     *
     *     // Application should handle some logic to get new data based on the feedItems
     *     var newFeedData; // You can get data from database, data service, local data, etc.
     *
     *     // update chart
     *     var updateChart = function(feedData) {
     *         var dataSet = new sap.viz.api.data.CrosstableDataset();
     *         dataSet.data(feedData);
     *
     *         chart.vizUpdate({
     *             'data' : dataSet
     *         });
     *     };
     *     upateChart(newFeedData);
     * };
     * chart.addEventListener('feedsChanged', feedsChangedHandler);
     * </pre>
     */

    /**
     * Dispatches "vizDefinitionChanged" event when viz definition is changed by user interaction or API, for example,
     * <pre>
     * 1. Change chart type.
     * 2. Feed new data.
     * 3. Edit title.
     * 4. Edit property.
     * 5. etc.
     * </pre>
     *
     * Application may listen to this event to inform user to save the document.
     *
     * <pre>
     * type: "vizDefinitionChanged"
     * handler: function({
     *                    type: "vizDefinitionChanged",
     *                    data: {
     *                         vizTypeChanged,
     *                         vizPropertiesChanged,
     *                         vizCssChanged,
     *                         feedingItemsChanged
     *                    }
     * })
     * </pre>
     * @event sap.viz.controls.chart.Chart#vizDefinitionChanged
     * @param {String} evt.type "vizDefinitionChanged".
     * @param {Object} evt.data
     *          Identify the changed property.
     */

    /**
     * Dispatches "userInteractionComplete" event when there are UI interaction , for example:
     * <pre>
     * 1. Change chart type.
     * 2. Change FeedItems.
     * 3. Edit title in title editor
     * 4. Operate in context menu, such as: show/hide title, show/hide legend, MDN, show/hide Data Labels and so on
     * 5. Operate in the filter menu
     * 6. Edit property
     * 7. etc.
     * </pre>

     *
     * VizFrame will dispatch this event.
     *
     * <pre>
     * type: "userInteractionComplete"
     * handler: function({
     *                    type: "userInteractionComplete"
     * })
     * </pre>
     * @event sap.viz.controls.chart.Chart#userInteractionComplete
     * @param {String} evt.type "userInteractionComplete".
     */

    OOUtil.extend(Chart, VizControlBase);

    Chart.VIZ_TITLE_MODE = {
        manual : "manual",
        auto : "auto"
    };

    /**
     * Get/Set vizType.
     * @method sap.viz.controls.chart.Chart.prototype.vizType
     * @param {String} value
     * @return {String}
     */
    Chart.prototype.vizType = function(type) {
        if (arguments.length > 0) {
            if (!utils.isString(type)) {
                return;
            }

            this._beginUpdateProperty();
            // Migrate parameters
            type = ChartMigrator.migrateChartType(type);
            this._vizType = type;
            this._vizModel().type(this._vizType);
            this._endUpdateProperty();

            return this;
        } else {
            return this._vizModel().type();
        }
    };

    /**
     * Get/Set title properties.
     * @method sap.viz.controls.chart.Chart.prototype.vizTitle
     * @param {String} [value]
     * @return {String} title
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var chart = new Chart(...);
     * var oldTitle = chart.vizTitle();
     * var newTitle = 'new Title';
     * chart.vizTitle(newTitle);
     * </pre>
     */
    // this function will use by external not send interactionComplete event
    Chart.prototype.vizTitle = function(title) {
        if (arguments.length > 0) {

            this._setTitle(title);
            return this;
        } else {
            return this._getTitle();
        }
    };


    // this function is for internal use this function will send the userInteractionComplete Event
    Chart.prototype.titleWithInteracionEvent = function(title) {
        if (arguments.length > 0) {
            this._setTitle(title);
            this._dispatchInteractionCompleteEvent();
            return this;
        } else {
            return this._getTitle();
        }
    };


    // this function is used to set title , private function
    Chart.prototype._setTitle = function(title) {

        if (VizUtils.hasFakeData(this._data) || title.trim() === '') {
            title = null;
        }

        var titleObj = this.vizProperties() ? this.vizProperties().title : null;
        // if there is no title property or title has a different value
        if (!titleObj || title !== titleObj.text) {
            if (!titleObj) {
                titleObj = {};
            }

            titleObj.text = title;
            this._setProperties({
                'title' : titleObj
            });
        }

    };

    // this function is used to get the title
    Chart.prototype._getTitle = function() {
        var title = this._getProperties() ? this._getProperties().title : null;
        return title ? title.text : null;
    };


    /**
     * Clear the selected property zone when 'useBuiltInPropertyZoneInteraction' is true in ui config.
     * @method sap.viz.controls.chart.Chart.prototype.clearSelectedPropertyZone
     * @return {undefined}
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var chart = new Chart(...);
     * chart.clearSelectedPropertyZone();
     * </pre>
     */
    Chart.prototype.clearSelectedPropertyZone = function() {
        this._chartViewInstance.selectedPropertyZone(null);
    };

    Chart.prototype.isFake = function() {
        return VizUtils.hasFakeData(this._data);
    };

    Chart.prototype.setTitleGeneratorFunc = function(value) {
        if (value !== null && value !== undefined && !utils.isFunction(value)) {
            return;
        }

        this._titleGeneratorFunc = value;
    };

    Chart.prototype.vizTitleMode = function(mode) {
        if (arguments.length > 0) {
            if (mode == Chart.VIZ_TITLE_MODE.auto || mode == Chart.VIZ_TITLE_MODE.manual) {
                this._titleMode = mode;
            }
        } else {
            return this._titleMode;
        }
    };

    Chart.prototype.isTitleCustomized = function() {
        return this._titleMode === Chart.VIZ_TITLE_MODE.manual;
    };

    Chart.prototype.getTitleZone = function() {
        if (this._chartView().getTitleZone) {
            return this._chartView().getTitleZone();
        } else {
            return [];
        }
    };

    Chart.prototype.getTitleTextByFeeding = function() {
        if (this._titleGeneratorFunc) {
            var args = [this.vizUid()];
            return this._titleGeneratorFunc.apply(null, args);
        }
        return this._chartView().getTitleByFeeding();
    };

    Chart.prototype.restoreTitleText = function() {
        this.titleWithInteracionEvent(this.getTitleTextByFeeding());
    };
    /**
     * handler for chart title properties changed
     */
    Chart.prototype._titleChangedHandler = function(e) {
        var title = e.data.text;
        this.titleWithInteracionEvent(title);
    };

    /**
     * @override
     */
    Chart.prototype.destroy = function() {
        this._destroyViz();
        ScaleSharingService.remove(this);
        Chart.superclass.destroy.apply(this, arguments);
    };
    /**
     * Update or add feed FeedItem.
     *
     * @method sap.viz.controls.feeding.Chart.prototype.feedAnalysisObjects
     *
     * @param {Array<{@link sap.viz.controls.common.feeds.AnalysisObject}>} analysisObjects
     * @param {Boolean} [append]
     *                      optional, default value is false.
     *                      If append is true, append new feeds.
     *                      If append is false, clean existing feeds.
     *
     * @return {Array<{@link sap.viz.controls.common.feeds.FeedItem}>} actually applied feeds by BVR
     */
    Chart.prototype.feedAnalysisObjects = function(analysisObjects, append) {
        this._beginUpdateProperty();

        append = append === true;
        var vizModel = this._vizModel();
        var visualizationType = vizModel.type();
        var feeds = vizModel.explicitFeedingItems();
        var bvrResult;
        if (append) {
            bvrResult = BVRService.suggestFeeds(visualizationType, feeds, analysisObjects);
        } else {
            bvrResult = BVRService.suggestFeeds(visualizationType, analysisObjects);
        }
        if (append && FeedUtils.equal(feeds, bvrResult.feeds)) {
            analysisObjects.forEach(function(analysisObject) {
                var replaced = false;
                var defs = MetadataFactory.get(visualizationType).getBindingDefs();
                defs.forEach(function(def) {
                    if (!replaced && FeedValidationService.replaceable(visualizationType, feeds, def.id(), analysisObject)) {
                        replaceFeed(visualizationType, feeds, analysisObject);
                        replaced = true;
                    }
                });
            });
        } else {
            feeds = bvrResult.feeds;
        }
        vizModel.feedingItems(feeds);

        this._endUpdateProperty();
        return feeds;
    };

    /**
     *
     * Get default incomplete ghost options for createViz.
     * @method sap.viz.controls.chart.Chart.getDefaultIncompleteOptions
     * @param {String} vizType
     * @return {JSON}
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var options = Chart.getDefaultIncompleteOptions(ChartConst.TYPE_LINE);
     * var chart = new Chart(...);
     * chart.createViz(options);
     * </pre>
     */

    Chart.getDefaultIncompleteOptions = function(type) {
        if (!utils.isString(type)) {
            return;
        }
        // Migrate parameters
        type = ChartMigrator.migrateChartType(type);
        var properties = Chart._getDefaultProperties(type, ChartConfig.instance());


        //Don't need to remove invalid properties in this point.
        //Invalid properties will be removed when pass to chart view.

        return {
            'type' : type,
            'properties' : properties,
            'data' : IncompleteGhost.getDataset(type)
        };
    };

    /**
     * Update numberOfDimensionsInColumn property base on column feeding items.
     */
    Chart.prototype._updateColumnDimCount = function() {
        if (ChartTypeUtil.isMultipleChart(this._vizModel().type())) {
            var count = FeedUtils.getNumberOfDimensionsInColumn(this._vizModel().feedingItems());
            this._properties = this._properties || {};
            this._properties.multiLayout = this._properties.multiLayout || {};
            this._properties.multiLayout.numberOfDimensionsInColumn = count;
        }
    };
    /**
     * Dispatch vizDefinitionChanged event
     */
    Chart.prototype._dispatchVizDefChangedEvent = function(changes) {
        var data = {
            vizTypeChanged : (changes.vizTypeChanged === true),
            vizPropertiesChanged : (changes.vizPropertiesChanged === true),
            vizCssChanged : (changes.vizCssChanged === true),
            feedingItemsChanged : (changes.feedingItemsChanged === true),
            filterChanged : (changes.filterChanged === true),
            vizTitleChanged : (changes.vizTitleChanged === true)
        };
        if (this._vizDefChangedData) {
            //merge
            for (var p in this._vizDefChangedData) {
                if (this._vizDefChangedData.hasOwnProperty(p)) {
                    data[p] = data[p] || this._vizDefChangedData[p];
                }
            }
            this._vizDefChangedData = null;
        }
        if (this._enableVizDefChangedEvent) {
            this._dispatchEvent(new Event(EventTypeConst.VIZ_DEFINITION_CHANGED, this, data));
        } else {
            this._vizDefChangedData = data;
        }
    };

    /**
     * dispatch the userInteractionComplete event
     */
    Chart.prototype._dispatchInteractionCompleteEvent = function(){
        if (this._enableUserInteractionComplete){
            this._dispatchEvent(new Event(ChartEvent.USER_INTERACTION_COMPLETE,this));
            //console.log('vizFrame has dispatch the userInteraction Event');
        }
    };

    Chart.prototype._updateView = function(type) {
        var viewClass = ViewManager.getViewClass(type);
        if (this._chartViewInstance instanceof viewClass) {
            return;
        }

        if (this._chartViewInstance) {
            if (!this._chartViewManager[this._chartViewInstance.__className]) {
                this._chartViewManager[this._chartViewInstance.__className] = this._chartViewInstance.store();
            }

            //TODO: should not destroy chart view instance.
            this._chartViewInstance.destroy();
            this._chartViewInstance = null;
            this._data = null;
        }
        this._createChartView(viewClass);

        if (this._chartViewManager[this._chartViewInstance.__className]) {
            this._chartViewInstance.restore(this._chartViewManager[this._chartViewInstance.__className]);
        }

        // Update event map to new chart view.
        this._chartView().onEventMap(this._onEventMap);

        var size = {
            width : $(this._div).width(),
            height : $(this._div).height()
        };
        this._chartView().size(size);
        if (ChartTypeUtil.isTable(type)) {
            this._data = IncompleteGhost.getDataset(type);
        }
        var data = {
            type : type
        };
        this._dispatchEvent(new ChartEvent(ChartEvent.VIZ_VIEW_CHANGED, this, data));
    };
    /**
     * handler for chart model properties changed
     */
    Chart.prototype._onVizModelChanged = function(e) {

        if (!this._inUpdatingProperty() && (e.data.feedingItemsChanged || e.data.vizTypeChanged || e.data.isMNDVisibleChanged || e.data.sliceDimensionChanged)) {
                // the api call will change the value of updatingProperty ,
                // if the value is 0 then the change is called by user
                this._dispatchInteractionCompleteEvent();
            }

        this._dispatchVizDefChangedEvent(e.data);

        var vizType = this._vizModel().type();

        if (e.data.vizTypeChanged) {
            if ( ChartTypeUtil.isSupportMorphing(vizType) && this._enableMorphing) {
                // if next type supportMorphing, show morphingLayer first
                // because if View class changed, there was a time gap between views destroy/creation

                // if view class need be change, show morphing layer first
                // need to judge here because if view class doesn't chage, showing morphing layer first
                // cause error
                // this._vizMorpher.morphVizType(null, -1, this._data);
                this._vizMorpher.showMorphing(true, false);
            }
            else {
                this._vizMorpher.resetMorphCache();
            }

            this._updateView(vizType);

            // hide chartLayer again because chartLayer maybe replaced in _updateView()
            if ( ChartTypeUtil.isSupportMorphing(vizType) && this._enableMorphing) {
                this._chartView().hideChartLayer();
            }
        }
        if (this._loadingModel) {
            return;
        }

        if (e.data.vizTypeChanged) {
            //TODO: check if this logic can be replaced with VizUtils.convertProperties
            if (!this._inUpdatingProperty()) {
                // remove value axis scale
                this._properties = this._chartView().resetProperties(this._properties, vizType);
            }
            this._updateAxisProperties(vizType);
            this._updateLabelFormats(vizType);

            if (ChartTypeUtil.isVizChart(vizType) && ChartTypeUtil.getDirection(vizType)) {
                var direction = ChartTypeUtil.getDirection(vizType);
                if (this._vizDirection === null) {
                    this._vizDirection = direction;
                } else if (this._vizDirection !== direction) {
                    this._css = this._chartView().updateCss({'directionChanged' : true}, this._css);
                    this._vizDirection = direction;
                }
            }

            this._dispatchPropertyEvent(new ChartEvent(ChartEvent.VIZTYPE_CHANGED, this, {
                type : vizType
            }));
        }

        if (!this._chartView()) {
            return;
        }

        if (e.data.feedingItemsChanged && !ChartTypeUtil.isGeo(vizType)) {

            this._updateColumnDimCount();
            if (!this._inUpdatingProperty()) {
                //update the current title according to the current feedItems by joining each feed item's name
                this._updateTitle();
                this.showLoadingIcon();
                var datasetType = ChartTypeUtil.getDatasetType(vizType);
                this._dispatchPropertyEvent(new FeedEvent(FeedEvent.FEEDS_CHANGED, this, {
                    datasetType : datasetType,
                    feeds : this.feeds()
                }));
                return;
            }
        }

        this._chartView().modelChanged(this._vizModel(), e.data);
        if (e.data.extensionValuesChanged) {
            var extensionValues = this._vizModel().extensionValues();
            //feeding panel enable trellis flag changed
            if (extensionValues.feedingPanel && this._enableTrellis !== extensionValues.feedingPanel.enableTrellis) {
                this._enableTrellis = extensionValues.feedingPanel.enableTrellis;
                this._chartView().enableTrellis(this._enableTrellis);
            }
        }

        // if need to create viz.
        // if user switch type in switch bar, onVizModelChanged triggered by switchbar, we need to create viz here.
        if (this._needCreateViz(vizType, false) && (e.data.vizTypeChanged || e.data.feedingItemsChanged)) {
            this._createVizInstance();
        }
    };

    function applyAxis(properties, props, values) {
        if (props && values) {
            var i, prop, value;
            for ( i = 0; i < props.length; i++) {
                prop = props[i];
                if (values.length > i) {
                    value = values[i];
                    properties[prop] = utils.clone(values[i]);
                }
            }
        }
    }

    Chart.prototype._updateAxisProperties = function(type) {
        if (this._properties) {
            // category axis
            var categoryAxisProps = VizUtils.getCategoryAxis(type);
            applyAxis(this._properties, categoryAxisProps, this._categoryAxis);

            // value axis
            var valueAxisProps = VizUtils.getValueAxis(type);
            applyAxis(this._properties, valueAxisProps, this._valueAxis);
        }
    };
    /**
     * Update the current label formats according to current type and current properties and history properties,
     * called when vizType changed.
     */
    Chart.prototype._updateLabelFormats = function(newType) {
        //convert properties names between vertical and horizontal
        var axisPros = ['xAxis', 'xAxis2', 'yAxis', 'yAxis2', 'valueAxis'];
        var proNamesMap = {
            'xAxis' : 'yAxis',
            'xAxis2' : 'yAxis2',
            'yAxis' : 'xAxis',
            'yAxis2' : 'xAxis2'
        };
        var i, pro;
        //this._labelFormats was null after calling vizProperties() or at initialized time
        if (!this._labelFormats && this._properties) {
            for ( i = 0; i < axisPros.length; i++) {
                pro = axisPros[i];
                var proValue;
                if (pro === 'valueAxis' && !ChartTypeUtil.isInfoChart(newType)) {
                    proValue = this._properties.plotArea ? this._properties.plotArea.valueAxis : null;
                } else {
                    proValue = this._properties[pro];
                }
                var hasLabelFormat = (proValue && proValue.label && proValue.label.hasOwnProperty('formatString')) ? true : false;
                if (hasLabelFormat) {
                    this._labelFormats = this._labelFormats || {};
                    this._labelFormats[pro] = proValue.label.formatString;
                }
            }
        }
        //get all support properties according to cvom
        var newProsDef = MetadataFactory.get(newType).getPropertiesDef();
        if (!newProsDef) {
            return;
        }
        //the properties set which is unsupported for label formats
        var unsupported;
        for ( i = 0; i < axisPros.length; i++) {
            pro = axisPros[i];
            var proDef;
            if (pro === 'valueAxis' && !ChartTypeUtil.isInfoChart(newType)) {
                if (newProsDef.plotArea && newProsDef.plotArea.valueAxis) {
                    proDef = newProsDef.plotArea.valueAxis.supportedValues;
                }
            } else {
                proDef = newProsDef[pro];
            }
            // @formatter: off
            //whether this property supports label format
            var supportLabelFormat = false;
            if (ChartTypeUtil.isInfoChart(newType)) {
                supportLabelFormat = proDef && proDef.children && proDef.children.label && proDef.children.label.children && proDef.children.label.children.formatString;
            } else {
                supportLabelFormat = proDef && proDef.label && proDef.label.supportedValues && proDef.label.supportedValues.hasOwnProperty('formatString')
            }
            // @formatter: on
            if (supportLabelFormat) {
                var formatString;
                //step1 : get format string from the last properties
                if (this._properties) {
                    var curProValue;
                    if (pro === 'valueAxis' && !ChartTypeUtil.isInfoChart(newType)) {
                        if (this._properties.plotArea && this._properties.plotArea.valueAxis) {
                            curProValue = this._properties.plotArea.valueAxis;
                            if (curProValue && curProValue.label && curProValue.label.hasOwnProperty('formatString')) {
                                formatString = curProValue.label.formatString;
                            }
                        }
                    } else {
                        curProValue = utils.clone(this._properties[pro]);
                        if (curProValue && curProValue.label && curProValue.label.hasOwnProperty('formatString')) {
                            formatString = curProValue.label.formatString;
                        }
                    }
                }

                //step2 : get format string from properties history if not get it from step1
                if (formatString === undefined && this._labelFormats) {
                    formatString = this._labelFormats[pro];
                    if (formatString === undefined && !(pro === 'valueAxis' && !ChartTypeUtil.isInfoChart(newType))) {
                        var originalPro = proNamesMap[pro];
                        if (originalPro) {
                            formatString = this._labelFormats[originalPro];
                        }
                    }
                }

                //step3 : get format string from uiconfig if not get it from step2
                if (formatString === undefined) {
                    formatString = this._uiConfig.defaultLabelFormatString;
                }
                if (formatString !== undefined) {
                    this._properties = this._properties || {};
                    if (pro === 'valueAxis' && !ChartTypeUtil.isInfoChart(newType)) {
                        this._properties.plotArea = this._properties.plotArea || {};
                        this._properties.plotArea.valueAxis = this._properties.plotArea.valueAxis || {};
                        this._properties.plotArea.valueAxis.label = this._properties.plotArea.valueAxis.label || {};
                        this._properties.plotArea.valueAxis.label.formatString = formatString;
                    } else {
                        this._properties[pro] = this._properties[pro] || {};
                        this._properties[pro].label = this._properties[pro].label || {};
                        this._properties[pro].label.formatString = formatString;
                    }
                }
            } else {
                unsupported = unsupported || [];
                unsupported.push(pro);
            }
        }
        //remove formatString property from this._properties according to the current properties;
        if (unsupported && this._properties) {
            for ( i = 0; i < unsupported.length; i++) {
                pro = unsupported[i];
                if (pro === 'valueAxis' && !ChartTypeUtil.isInfoChart(newType)) {
                    if (this._properties.plotArea && this._properties.plotArea.valueAxis && this._properties.plotArea.valueAxis.label) {
                        delete this._properties.plotArea.valueAxis.label.formatString;
                    }
                } else {
                    if (this._properties[pro] && this._properties[pro].label) {
                        if (!ChartTypeUtil.isInfoChart(newType)) {
                            delete this._properties[pro].label.formatString;
                        }
                    }
                }
            }
        }
    };
    /**
     * Create chart
     */
    Chart.prototype._createChartView = function(viewClass) {
        var view = this._chartViewInstance = new viewClass($(this._div), {
            'type' : this._vizModel().type(),
            'useBuiltInPropertyZoneInteraction' : this._uiConfig.useBuiltInPropertyZoneInteraction,
            'useDefaultChartSizeForTrellis' : this._uiConfig.useDefaultChartSizeForTrellis
        }, this._uiConfig.libFolderPath, $.proxy(this._vizModel, this), this._chartProxy, {
            'vizProperties' : $.proxy(this.vizProperties, this),
            'vizCss' : $.proxy(this.vizCss, this),
            'vizCssProperty' : $.proxy(this.vizCssProperty, this),
            'vizOn' : $.proxy(this.vizOn, this),
            'vizType' : $.proxy(this.vizType, this),
            'selectedPropertyZone' : $.proxy(this.selectedPropertyZone, this),
            'vizData' : $.proxy(this.vizData, this),
            'propertiesWithEvents' : (function (newProperties) {
                this.propertiesWithEvents(newProperties, [
                    ChartEvent.USER_INTERACTION_COMPLETE
                ]);
            }).bind(this),
            'scalesWithEvents' : $.proxy(this.scalesWithEvents, this)
        });

        view.enableTrellis(this._enableTrellis);
        view.addEventListener(ChartEvent.TITLE_CHANGED, this._titleChangedHandler, this);
        view.addEventListener(ChartEvent.ANALYSIS_DROPPED, this._analysisDroppedHandler, this);

        view.addEventListener(ChartEvent.CHART_CHANGED, function(e) {
            this._dispatchEvent(e);
        }, this);

        view.addEventListener(ChartEvent.CHART_CHANGING, function(e) {
            this._dispatchEvent(e);
        }, this);

        view.addEventListener(ChartEvent.CHANGED_SELECTED_DATA, function(e) {
            this._dispatchEvent(new ChartEvent(ChartEvent.CHANGED_SELECTED_DATA, this, e.data));
        }, this);

        view.addEventListener(ChartEvent.SELECT_PROPERTY_ZONE, function(e) {
            this._dispatchEvent(new ChartEvent(ChartEvent.SELECT_PROPERTY_ZONE, this, e.data));
        }, this);

        view.addEventListener(View.DISPATCH_PROPERTY_EVENT, function(e) {
            var evt = e.data;
            this._dispatchPropertyEvent(evt);
        }, this);

        view.addEventListener(ChartEvent.PROPERTY_ZONES_CHANGED, function(event) {
            this._dispatchEvent(new ChartEvent(ChartEvent.PROPERTY_ZONES_CHANGED, this, event.data));
        }, this);

        view.addEventListener(ChartEvent.CONTEXT_MENU_TRIGGERED, function(event) {
            this._dispatchEvent(new ChartEvent(ChartEvent.CONTEXT_MENU_TRIGGERED, this, event.data));
        }, this);

        view.addEventListener("ChartInstance_Initialized", function(event) {
            if ( !this._enableMorphing ||
                 !event.data.requestMorphing ||
                 !ChartTypeUtil.isSupportMorphing(this._vizModel().type()) ) {
                return;
            }

            this._vizMorpher.bindViewLayer( event.data.chartLayer );
            this._vizMorpher.morphVizType(this._vizModel().type(), 800, view.data(), function() {
            });
        }, this);
        
        view.addEventListener(ChartEvent.BEHAVIOR_TYPE_CHANGED, function(event) {
            this._dispatchEvent(new ChartEvent(ChartEvent.BEHAVIOR_TYPE_CHANGED, this, event.data));
        }, this);
    };

    /**
     * Create all the children of Chart
     */
    Chart.prototype._createChildren = function() {
        this._validateSize();
        var morphDiv = this._morphingLayer = document.createElement('div');
        morphDiv.className = CSSConst.PREFIX + 'morphing-layer';
        morphDiv.style.position = "absolute";
        this._div.appendChild( morphDiv );
        this._vizMorpher = new VizMorpher(morphDiv);
        //create Chart
        this._createChartView(ChartView);
    };
    /**
     * Handler for chart feed changed
     * @param {Event} e
     */
    Chart.prototype._analysisDroppedHandler = function(e) {
        var vizModel = this._vizModel();
        var feeds = vizModel.explicitFeedingItems();

        var zone = e.data.zone;
        var feedingDefs = zone.feedDef;
        var analysisObject = e.data.analysisObject;
        var scope = [];
        var visualizationType = vizModel.type();
        feedingDefs.forEach(function(feedingDef) {
            if (feedingDef.id === 'multiplier') {
                if (zone.name === FeedConst.ID_TRELLIS_ROW) {
                    scope.push(FeedConst.ID_TRELLIS_ROW);
                } else if (zone.name === FeedConst.ID_TRELLIS_COLUMN) {
                    scope.push(FeedConst.ID_TRELLIS_COLUMN);
                } else {
                    scope.push(FeedConst.ID_TRELLIS_ROW);
                    scope.push(FeedConst.ID_TRELLIS_COLUMN);
                }
                visualizationType = ChartTypeUtil.toMultiChartType(visualizationType);
            } else {
                scope.push(feedingDef.id);
            }
        });
        var bvrResult = BVRService.suggestFeeds(visualizationType, feeds, [analysisObject], scope);
        if (bvrResult) {
            if (FeedUtils.equal(feeds, bvrResult.feeds)) {
                if(scope.length === 1) {
                    var feed = FeedUtils.getFeed(feeds, scope[0]);
                    feed.values().splice(0, 1);
                    feed.values().push(analysisObject);
                } else {
                    replaceFeed(vizModel.type(), feeds, analysisObject);
                }
            } else {
                feeds = bvrResult.feeds;
            }
        }
        vizModel.feedingItems(feeds, this._enableTrellis);
    };

    /**
     * Remove current when feed fail, Replace one current analysisObject.
     */
    function replaceFeed(type, feeds, analysisObject) {
        // var type = this._vizModel().type();
        var bvrResult = BVRService.suggestFeeds(type, [analysisObject]);
        var feedItemID, i, feedItem;
        for ( i = 0; i < bvrResult.feeds.length; i++) {
            feedItem = bvrResult.feeds[i];
            if (feedItem.values().length === 1) {
                feedItemID = feedItem.id();
                break;
            }
        }
        for ( i = 0; i < feeds.length; i++) {
            feedItem = feeds[i];
            if (feedItem.id() === feedItemID) {
                var isExisted = false;
                var analysisObjects = feedItem.values();
                for (var index in analysisObjects) {
                    if (analysisObjects[index].id() === analysisObject.id()) {
                        isExisted = true;
                        break;
                    }
                }
                // if AnalysisObject already exists, don't do replacing
                if (!isExisted && feedItem.values().length > 0) {
                    feedItem.values().splice(0, 1);
                    feedItem.values().push(analysisObject);
                }
            }
        }
    }

    var delayMorphSnapshot = (function (x) {
        return function (chart) {
            if (x) {
                window.clearTimeout(x);
                x = null;
            }
            !x && (x = window.setTimeout(function () {
                chart._vizMorpher.morphVizType(null, -1, chart._data);
            }, 1200) );
        };
    })();

    /**
     * measure the size
     * @Override
     */
    Chart.prototype._validateSize = function() {
        var w = $(this._div).width();
        var h = $(this._div).height();
        $(this._layout).css({
            width : w + "px",
            height : h + "px",
            visibility : "visible",
            display : ''
        });
        if (this._chartView()) {
            this._chartView().size({
                width : w,
                height : h
            });
        }

        // take snapshot
        delayMorphSnapshot(this);
    };

    // Save data to local instance
    Chart.prototype._updateData = function(type, data) {
        this._data = this._chartViewInstance.copyData(type, data);
    };
    /**
     * Get the chart
     * @return {Chart}
     */
    Chart.prototype._chartView = function() {
        return this._chartViewInstance;
    };
    /**
     * If need to create viz instance when update viz.
     */
    Chart.prototype._needCreateViz = function(type, needChangeTemplate) {
        // need to create viz if templateChanged.
        if (needChangeTemplate === true) {
            return true;
        }
        var needCreateViz = false;
        if (ChartTypeUtil.isTable(type)) {
            // if type is table, always need to create viz.
            needCreateViz = true;
        } else {
            // if type changed, need to create viz.
            if (type !== this._type) {
                needCreateViz = true;
            }
        }
        // if viz instance not created, we need to create viz?
        if (!this._chartView().hasChartInstance()) {
            needCreateViz = true;
        }

        return needCreateViz;
    };
    /**
     * If hasFakeData changed.
     */
    Chart.prototype._needChangeTemplate = function(type, data) {
        var currentTemplate = this._chartViewInstance.getTemplateId();
        var newTemplate = this._chartViewInstance.getTemplateId(data);
        return (currentTemplate !== newTemplate);
    };
    /**
     *  TODO: remove loading icon?
     * need to request data from server, show loading icon.
     */
    Chart.prototype.showLoadingIcon = function() {
        this._chartView().showLoadingIcon();
    };
    /**
     * Override this method and throw exception to prevent application from calling it directly.
     * @ignore
     * @method sap.viz.controls.chart.Chart.prototype.connect
     * @param {String} vizUid
     *                 The uid of the viz instance.
     */
    Chart.prototype.connect = function(vizUid) {
        //if (console) {
        //    console.log("Error: Chart instance does not support connect function!");
        //}
    };
    /**
     * Override this method and throw exception to prevent application from calling it directly.
     * @ignore
     * @method sap.viz.controls.chart.Chart.prototype.disconnect
     */
    Chart.prototype.disconnect = function() {
        //if (console) {
        //    console.log("Info: Chart instance does not support disconnect function!");
        //}
    };
    /**
     * Get the chart model
     * @return {Chart}
     */
    Chart.prototype.chartModel = function() {
        return this._vizModel();
    };
    /**
     * Get the uid of Chart.
     * @method sap.viz.controls.chart.Chart.prototype.vizUid
     * @return {String}
     */
    Chart.prototype.vizUid = function() {
        return this._uid;
    };
    
    /**
     * Get/Set Chart scale group.
     * @method sap.viz.controls.chart.Chart.prototype.scaleGroup
     * @param {String} group
     * @return {String} scale group name
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var chart = new Chart(...);
     * ...
     * chart.scaleGroup("GroupA");
     * </pre>
     */
    Chart.prototype.scaleGroup = function(group, index) {
        if (arguments.length > 0) {
            ScaleSharingService.add(this, group, index);
        } else {
            return {
                'group' : ScaleSharingService.getGroup(this),
                'index' : ScaleSharingService.getIndexInGroup(this)
            };
        }
    };
    
    /**
     * Get/Set Chart data. Viz Container provides a wrapper of CVOM
     * {@link sap.viz.api.core.VizInstance}.data() to get/set data.
     * @method sap.viz.controls.chart.Chart.prototype.vizData
     * @param {sap.viz.api.data.CrosstableDataset} [value] chart data
     * @return {sap.viz.api.data.CrosstableDataset}
     */
    Chart.prototype.vizData = function(data) {
        if (arguments.length > 0) {
            // Save to local variable
            var type = this._vizModel().type();
            // Migrate parameters
            data = ChartMigrator.migrateData(data, type, this._vizModel().feedingItems());

            this._updateData(type, data);
            if (this._vizCreated) {
                // Apply to chartView
                var needChangeTemplate = this._needChangeTemplate(type, data);
                if (needChangeTemplate || ChartTypeUtil.isTable(type)) {
                    // change template
                    this._createVizInstance();
                } else {
                    this._chartView().update({
                        'data' : this._data,
                        'sharedRuntimeScales': ScaleSharingService.getSharedRuntimeScales(this)
                    });
                }
            } else {
                throw LangManager.get('VIZ_CHART_UPDATE_DATA_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
            }

            return this;
        } else {
            if (this._chartView()) {
                return this._chartView().data();
            }
            return null;
        }
    };
    /**
     * Get/Set Chart css. Viz Container provides a wrapper of CVOM
     * {@link sap.viz.api.core.VizInstance}.css() to get/set css.
     * @method sap.viz.controls.chart.Chart.prototype.vizCss
     * @param {CSS} [value]
     * @return {CSS}
     */
    Chart.prototype.vizCss = function(css) {
        if (arguments.length > 0) {

            // Save to local variable
            this._css = css;
            if (this._vizCreated) {
                // Apply to chartView
                this._chartView().css(this._css);
                this._css = this._chartView().css();
            } else {
                throw LangManager.get('VIZ_CHART_UPDATE_CSS_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
            }
            this._dispatchVizDefChangedEvent({
                'vizCssChanged' : true
            });

            return this;
        } else {
            return this._chartView().css();
        }
    };
    /**
     * Get/Set Chart properties.
     * @method sap.viz.controls.chart.Chart.prototype.vizProperties
     * @param {JSON} [value] 
     * @return {JSON}
     */
    // for external use don't send the userInteraction Event
    Chart.prototype.vizProperties = function(properties) {
        if (arguments.length > 0) {
            // Migrate parameters
            ChartMigrator.migrateProperties(properties, this._vizModel().type(), this._vizModel().feedingItems());
            this._setProperties(properties);
            return this;
        } else {
            return this._getProperties();
        }
    };

    // this function is used to update properties by internal call
    Chart.prototype.propertiesWithEvents = function(properties, eventNames, trigger) {
        if (arguments.length > 0) {
            var self = this;
            this._setProperties(properties);
            eventNames.forEach(function(eventName) {
                if (eventName === ChartEvent.USER_INTERACTION_COMPLETE) {
                    self._dispatchInteractionCompleteEvent();
                }
                else {
                    self._dispatchEvent( new Event(eventName, this, {properties: properties, trigger: trigger}) );
                }
            });
            return this;
        } else {
            return this._getProperties();
        }
    };


    // this is used to get the properties prviate function
    Chart.prototype._getProperties = function(){
        return this._chartView().properties();
    };

    // this is used to set the properties private function
    Chart.prototype._setProperties = function(properties){
        this._enableVizDefChangedEvent = false;
        var type = this._vizModel().type();
        var chartType = this._initOptions({
            properties : properties
        });

        this._labelFormats = null;
        if (chartType !== type) {
            this._vizModel().type(chartType);
            // Apply to chartView
            if (this._vizCreated) {
                this._createVizInstance();
            } else {
                this._enableVizDefChangedEvent = true;
                throw LangManager.get('VIZ_CHART_UPDATE_PROPERTIES_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
            }
        } else {
            // Apply to chartView
            if (this._vizCreated) {
                if (this._chartView().hasChartInstance()) {
                    var validProperties = this._chartView().getValidProperties(this._properties, chartType);
                    //hide chart and show morphing before chartView properties update
                    if (this._enableMorphing && ChartTypeUtil.isSupportMorphing(this._vizModel().type()))
                    {
                        // this._vizMorpher.showMorphing(true, false);
                    }
                    
                    this._chartView().properties(validProperties);
                    
                    //There is no need to handle morphing if _enableMorphing is false
                    if (this._enableMorphing)
                    {
                        if (!this._chartView().requestMorphing() ||
                            !ChartTypeUtil.isSupportMorphing(this._vizModel().type()))
                        {
                            var _this = this;
                            setTimeout(function(){
                                // _this._vizMorpher.showMorphing(false, true);
                                _this._vizMorpher.morphVizType(null, -1, _this._chartViewInstance.data());
                            },0);
                            
                        }
                    }
                }
            } else {
                this._enableVizDefChangedEvent = true;
                throw LangManager.get('VIZ_CHART_UPDATE_PROPERTIES_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
            }
        }

        var event = {
            vizPropertiesChanged : true
        };
        if (properties.hasOwnProperty("title")) {
            event.vizTitleChanged = true;
        }
        this._enableVizDefChangedEvent = true;
        this._dispatchVizDefChangedEvent(event);
    };

    /**
     * Get viz instance description.
     * @return {Object}
     */
    Chart.prototype.vizDescription = function() {
        return this._chartView().description();
    };
    /**
     * Update viz instance by passing options in single function.
     * @method sap.viz.controls.chart.Chart.prototype.vizUpdate
     * @param {JSON} updates
     *               The update options with below data structure:
     * <pre>
     * {
     *     'data' : dataset,
     *     'css' : cssString,
     *     'properties' : {},
     *     'feeds' : [], // Array of FeedItem object
     *     'filters' : [] // Array of ValueFilter|NumericRangeFilter|DateRangeFilter object
     * }
     * All the options (data, css, properties, feeds and filters) are optional and you can pass partial options.
     * </pre>
     * @return {Object} {@link sap.viz.controls.chart.Chart} Chart itself.
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var chart = new Chart(...);
     * var dataset = new sap.viz.api.data.CrosstableDataset();
     * //dataset.data(your data);
     * var cssString = '';
     * chart.vizUpdate({
     *     'properties' : {},
     *     'feeds' : [] // Array of FeedItem object
     * });
     * </pre>
     */
    Chart.prototype.vizUpdate = function(updates) {
        if (!updates) {
            return;
        }
        // Migrate parameters
        if (updates.type) {
            updates.type = ChartMigrator.migrateChartType(updates.type);
        }
        var type = updates.type || this._vizModel().type();
        if (updates.feeds) {
            // for backward compatibility, we expose feeds option using {'feeds' : {'value' : [feedItems]}}
            updates.feeds = updates.feeds.value ? updates.feeds.value : updates.feeds;
            updates.feeds = ChartMigrator.migrateFeeds(updates.feeds, type);
        } else if (updates.feeds === null) {
            updates.feeds = [];
        } else {
            updates.feeds = null;
        }
        var feedingItems = updates.feeds;
        if (updates.properties) {
            updates.properties = ChartMigrator.migrateProperties(updates.properties, type, feedingItems || this._vizModel().feedingItems());
        }
        if (updates.data) {
            updates.data = ChartMigrator.migrateData(updates.data, type, feedingItems || this._vizModel().feedingItems());
        }

        // Viz update
        //hide chart and show morphing before viz update
        if (this._enableMorphing && ChartTypeUtil.isSupportMorphing(this._vizModel().type()))
        {
            this._vizMorpher.showMorphing(true, false);
        }
        
        updates = this._chartPreHandler.preVizUpdate(updates);
        
        this._beginUpdateProperty();
        var needChangeTemplate = false;

        if (updates.hasOwnProperty("type")) {
            this._updateView(updates.type);
        }
        if (updates.hasOwnProperty('data')) {
            needChangeTemplate = this._needChangeTemplate(type, updates.data);
        }

        type = this._initOptions(updates);
        var isTypeChanged = (type !== this._vizModel().type());

        //handle data is null
        if (!ChartTypeUtil.isGeo(type) && updates.data === null) {
            needChangeTemplate = true;
            this._updateData(type, IncompleteGhost.getDataset(type));
        }

        // TODO: handle new GEO
        // type and feedingItems changed in vizModel.
        var modelOption;
        if (isTypeChanged) {
            modelOption = {
                'type' : type
            };
            if (feedingItems) {
                modelOption['feedingItems'] = feedingItems;
            }
            this._vizModel().vizModelChanged(modelOption);
        } else {
            // only feedingItems changed in vizModel. call vizModelChanged and update viz.
            if (feedingItems) {
                modelOption = {
                    'feedingItems' : feedingItems
                };
                this._vizModel().vizModelChanged(modelOption);
            }

            // TODO: Refine the special case of Geo.
            if (this._vizCreated) {
                // if need create viz, call _createVizInstance
                // if not, call chartView.update()
                try {
                    if (this._needCreateViz(type, needChangeTemplate) || !this._chartView().supportUpdate(type)) {
                        this._createVizInstance();
                    } else {
                        this._updateVizInstance();
                    }
                } catch (error) {
                    this._endUpdateProperty();
                    throw error;
                }
            } else {
                //TODO: Maybe we need to create viz.
                //this._endUpdateProperty();
                //throw LangManager.get('VIZ_CHART_UPDATE_CHART_FAILED') +
                // LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
            }
        }

        this._endUpdateProperty();
        
        //There is no need to handle morphing if _enableMorphing is false
        if (this._enableMorphing)
        {
            if (!this._chartView().requestMorphing() ||
                !ChartTypeUtil.isSupportMorphing(this._vizModel().type()))
            {
                this._vizMorpher.showMorphing(false, true);
                this._vizMorpher.morphVizType(null, -1, this._chartViewInstance.data());
            }
        }
        
        return this;
    };
    /**
     * Add event listener on viz instance. Viz Container provides a wrapper of CVOM
     * {@link sap.viz.api.core.VizInstance}.on() to add event listener.
     * @method sap.viz.controls.chart.Chart.prototype.vizOn
     * @param {String} evtType
     * @param {Function} callback
     * @return {Object} {@link sap.viz.controls.chart.Chart} Chart itself.
     */
    Chart.prototype.vizOn = function(evtType, callback) {
        if (arguments.length > 0) {
            if (!utils.isString(evtType) || !utils.isFunction(callback)) {
                return;
            }

            this._chartView().on(evtType, callback);
            this._onEventMap[evtType] = callback;

            return this;
        }
    };
    /**
     * Remove event listener on viz instance. Viz Container provides a wrapper of CVOM
     * {@link sap.viz.api.core.VizInstance}.off() to remove event listener.
     * @method sap.viz.controls.chart.Chart.prototype.vizOff
     * @param {String} evtType
     * @return {Object} {@link sap.viz.controls.chart.Chart} Chart itself.
     */
    Chart.prototype.vizOff = function(evtType) {
        if (arguments.length > 0) {
            if (!utils.isString(evtType)) {
                return;
            }

            this._chartView().off(evtType);
            delete this._onEventMap[evtType];

            return this;
        }
    };
    /**
     * Trigger viz instance action.
     * @param {String} name
     * @param {Object} [args]
     *                 optional, the action arguments in JSON format
     * @return {Object} {@link sap.viz.controls.chart.Chart} Chart itself.
     */
    Chart.prototype.vizAction = function(keyName, args) {
        if (arguments.length > 0) {
            if (this._vizCreated) {
                return this._chartView().action(keyName, args);
            } else {
                throw LangManager.get('VIZ_CHART_TRIGGER_ACTION_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
            }

            return this;
        }
    };
    /**
     * Get/Set selected data points. Viz Container provides a wrapper of CVOM
     * {@link sap.viz.api.core.VizInstance}.selection() to get/set selected data points.
     * @method sap.viz.controls.chart.Chart.prototype.vizSelection
     * @param {Array<JSON>} [items]
     *                          optional, viz instance will hold the passed-in description,
     *                          but if the properties are changed, it must be re-pass to viz instance to take effect.
     *                          point:
     *                          {
     *                              data: {key: "value", ...},
     *                              ctx:  [{mi: 0, ...}, {...}, ...], // !important
     *                              info: [{obj}, null, ... } // optional
     *                          }
     * @param {Boolean} [clearFlag]
     *                          optional, whether to clear previous selection.
     *                          Default value is true.
     *                          If clearFlag is true, the selection will be incremental selection.
     *                          If clearFlag is false, the selection will not be incremental selection.
     */
    Chart.prototype.vizSelection = function(points, options) {
        if (this._vizCreated) {
            var selection = this._chartView().selection.apply(this._chartView(), arguments);
            return selection;
        } else {
            throw LangManager.get('VIZ_CHART_SELECTION_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
        }
    };
    /**
     * Get viz instance feeding zone.
     * @method sap.viz.controls.chart.Chart.prototype.vizFeedingZone
     * @return {Object}
     */
    Chart.prototype.vizFeedingZone = function() {
        if (this._vizCreated) {
            try {
                return this._chartView().feedingZone();
            } catch(error) {
                return [];
            }
        } else {
            throw LangManager.get('VIZ_CHART_FEEDINGZONE_FAILED') + LangManager.get('VIZ_CHART_VIZINSTANCE_NOT_CREATED');
        }
    };
    /**
     * change template if we detect templateChanged event.
     */
    Chart.prototype.changeTemplate = function() {
        return this._chartView().changeTemplate.apply(this._chartView());
    };

    Chart.prototype._initOptions = function(options) {
        if (!options) {
            return;
        }
        var type = options.type || this._vizModel().type();
        if (options.hasOwnProperty('css')) {
            this._css = options.css;
        }

        if (options.properties) {
            var properties = utils.clone(options.properties);
            type = ChartTypeUtil.updateType(type, properties);
            // update axis cache for switching type
            this._updateAxisCache(type, properties);
            this._properties = this._properties || {};
            if (properties.title && properties.title.text) {
                properties.title.text = properties.title.text.trim();
            }
            this._properties = utils.updateJSON(this._properties, properties);
        }
        if (options.scales) {
            this._updateScales(options.scales);
        }
        if (options.data) {
            // BITVDC5-113: Fix a bug to show CVOM table in case of vizImgExporter and CEF. Error happened when vizType
            // was 'viz/ext/table'.
            // Before this fix _updateView() was not called and _chartViewInstance referred to a ChartView instead of a
            // TableView.
            this._updateView(type);
            this._updateData(type, options.data);
        }

        return type;
    };

    Chart.prototype._updateAxis = function(props, axis, newProperties) {
        var i, prop, value, newValue;
        if (props) {
            for ( i = 0; i < props.length; i++) {
                prop = props[i];
                if (newProperties.hasOwnProperty(prop)) {
                    newValue = utils.clone(newProperties[prop]);
                    if (axis.length > i) {
                        value = axis[i];
                        //merge src value and new value
                        axis[i] = utils.updateJSON(value, newValue);
                    } else {
                        if (this._properties.hasOwnProperty(prop)) {
                            axis.push(utils.updateJSON(this._properties[prop], newValue));
                        } else {
                            axis.push(newValue);
                        }
                    }
                }
            }
        }
    };

    /**
     * update axis cache according to user properties
     */
    Chart.prototype._updateAxisCache = function(type, newProperties) {
        if (newProperties) {
            // category axis
            var categoryAxisProps = VizUtils.getCategoryAxis(type);
            this._updateAxis(categoryAxisProps, this._categoryAxis, newProperties);

            // value axis
            var valueAxisProps = VizUtils.getValueAxis(type);
            this._updateAxis(valueAxisProps, this._valueAxis, newProperties);
        }
    };
    /**
     * clear axis cache when load viz
     */
    Chart.prototype._clearAxisCache = function() {
        if (this._categoryAxis) {
            this._categoryAxis.length = 0;
        }
        if (this._valueAxis) {
            this._valueAxis.length = 0;
        }
    };
    /**
     * save axis cache
     */
    Chart.prototype._saveAxisCache = function() {
        var axisCache = {};
        axisCache['categoryAxis'] = this._categoryAxis;
        axisCache['valueAxis'] = this._valueAxis;
        return axisCache;
    };
    /**
     * load axis cache
     */
    Chart.prototype._loadAxisCache = function(axis) {
        if (axis['categoryAxis']) {
            this._categoryAxis = axis['categoryAxis'];
        }
        if (axis['valueAxis']) {
            this._valueAxis = axis['valueAxis'];
        }
    };
    /**
     * @method sap.viz.controls.chart.Chart.prototype.createViz
     * @param {JSON} options
     *                          {
     *                              type: String, // refer to propDoc.html for all supported viz chart TypeUtils
     *                              data: sap.viz.api.data.CrosstableDataset,
     *                              feeds: Array of FeedItem,
     *                              properties: Object, // refer to propDoc.html for all supported options for each viz
     * type
     *                              css: String, // refer to propDoc.html for all supported css items for each viz type
     *                              description: Object,
     *                              events: Object // events is an object with key and value pair. Key is the event name,
     * and the value is the listener function
     *                          }
     */
    Chart.prototype.createViz = function(options) {
        if (arguments.length > 0) {
            // Migrate parameters
            options.type = ChartMigrator.migrateChartType(options.type);
            if (options.feeds) {
                // for backward compatibility, we expose feeds option using {'feeds' : {'value' : [feedItems]}}
                options.feeds = options.feeds.value ? options.feeds.value : options.feeds;
                options.feeds = ChartMigrator.migrateFeeds(options.feeds, options.type);
            } else if (options.feeds === null) {
                options.feeds = [];
            } else {
                options.feeds = null;
            }
            var feedingItems = options.feeds;
            if (options.properties) {
                options.properties = ChartMigrator.migrateProperties(options.properties, options.type, feedingItems);
            }
            options.data = ChartMigrator.migrateData(options.data, options.type, feedingItems);

            // Create viz
            options = this._chartPreHandler.preCreateViz(options);
            this._beginUpdateProperty();
            this._type = null;
            this._vizModel().type(null);
            this._data = null;
            this._css = null;
            this._categoryAxis = [];
            this._valueAxis = [];
            this._properties = {};

            this._vizModel().reset();
            if (options.hasOwnProperty("type")) {
                this._updateView(options.type);
            }
            var type = this._initOptions(options);

            this._vizCreated = true;

            // if feedingItems = null, we will not update feedingItems in vizModel
            try {
                this._vizModel().vizModelChanged({
                    'type' : type,
                    'feedingItems' : feedingItems
                });
            } finally {
                this._endUpdateProperty();
            }
        }
    };
    /**
     * Destroy viz instance and its configuration.
     */
    Chart.prototype._destroyViz = function() {
        this._data = null;
        this._vizModel().type(null);
        this._properties = null;
        this._css = null;
        this._onEventMap = {};
        this._chartViewManager = {};

        this._chartView().destroy();

        this._vizCreated = false;
    };
    /**
     * To achieve interoperability with prior CVOM based application. Viz Container provides a wrapper of CVOM
     * {@link sap.viz.api.core.VizInstance}.toJSON(), which exports CVOM viz instance into a JSON object which contains
     * all information of the CVOM visualization including type, data, properties, css, feeding and size.<br/>
     *
     * @deprecated
     * @method sap.viz.controls.chart.Chart.prototype.exportViz
     * @param {JSON} options
     *      optional
     *      supported options: {emptyDataset : false}
     * @return {JSON}
     */
    Chart.prototype.exportViz = function(options) {
        return (this._chartView().hasChartInstance() || this._chartView().exportable()) ? this._updateExportJSON(this._chartView().exportViz(options)) : null;
    };
    /**
     * Create viz instance from JSON object which contains all information of the CVOM visualization including
     * type, data, properties, css, feeding and size.
     * 
     * @deprecated
     * @method sap.viz.controls.chart.Chart.prototype.loadViz
     * @param {JSON} vizJSON
     */
    Chart.prototype.loadViz = function(vizJSON) {
        if (arguments.length === 1) {
            vizJSON = sap.viz.api.serialization.migrate(vizJSON);
            var vizType = vizJSON.type;
            if (vizJSON.data && vizJSON.data.type) {
                if (vizJSON.data.type === 'Crosstable') {
                    var data = new sap.viz.api.data.CrosstableDataset();
                    data.data(vizJSON.data.val);
                    if (vizJSON.data.val.infos) {
                        data.info([{
                            'type' : 'additionalData',
                            'info' : vizJSON.data.val.infos
                        }]);
                    }
                    vizJSON.data = data;
                } else if (vizJSON.data.type === 'FlatTable') {
                    vizJSON.data = new sap.viz.api.data.FlatTableDataset(vizJSON.data.val);
                } else {
                    vizJSON.data = vizJSON.data.val;
                }
            }
            if (vizType !== this._vizModel().type()) {
                this._loadingModel = true;
                this._vizModel().vizModelChanged({
                    'type' : vizType
                });
                this._loadingModel = false;
            }

            this._properties = {};
            vizJSON.properties = vizJSON.properties || {};
            this._applyLeanLayout(vizJSON);
            //In _initOption method, this._properties will be filled with new properties which is entered by user for new
            // chart.
            this._initOptions(vizJSON);

            var defaultProperties = Chart._getDefaultProperties(vizType,this._uiConfig);
            //Use user input to override default properties
            vizJSON.properties = utils.updateJSON(defaultProperties, vizJSON.properties);
            vizJSON.properties = this._chartView().getValidProperties(vizJSON.properties, vizType);

            this._clearAxisCache();

            this._type = vizType;
            this._scales = vizJSON.scales;
            this._vizCreated = true;

            this._updateFeeding(vizJSON, vizType);
            this._chartViewInstance.loadViz(vizJSON);
        }
    };

    Chart.prototype._applyLeanLayout = function(vizJSON) {
        if (this._chartViewInstance instanceof InfoChartView && this._uiConfig.forceLeanLayout === true) {
            this._properties.title = this._properties.title || {};
            this._properties.title.visible = false;
            this._properties.legend = this._properties.legend || {};
            this._properties.legend.visible = false;

            this._properties.categoryAxis = this._properties.categoryAxis || {};
            this._properties.categoryAxis.title = this._properties.categoryAxis.title || {};
            this._properties.categoryAxis.title.visible = false;
            this._properties.categoryAxis2 = this._properties.categoryAxis2 || {};
            this._properties.categoryAxis2.title = this._properties.categoryAxis2.title || {};
            this._properties.categoryAxis2.title.visible = false;
            this._properties.valueAxis = this._properties.valueAxis || {};
            this._properties.valueAxis.title = this._properties.valueAxis.title || {};
            this._properties.valueAxis.title.visible = false;
            this._properties.valueAxis2 = this._properties.valueAxis2 || {};
            this._properties.valueAxis2.title = this._properties.valueAxis2.title || {};
            this._properties.valueAxis2.title.visible = false;

            vizJSON.properties = vizJSON.properties || {};
            vizJSON.properties = utils.updateJSON(vizJSON.properties, this._properties);
        }
    };

    Chart.prototype._updateVizInstance = function() {
        var type = this._vizModel().type();
        var feeds = this.feeds({
            'withMND' : true
        });

        var properties = this._chartView().getValidProperties(this._properties, type);

        var options = {
            'properties' : properties,
            'scales' : this._scales,
            'css' : this._css,
            'data' : this._data,
            'sharedRuntimeScales': ScaleSharingService.getSharedRuntimeScales(this)
        };

        this._updateFeeding(options, type);
        this._data = options.data;

        this._chartView().update(options);
    };

    /**
     * Create viz instance
     * @param {Boolean} fromAPI
     */
    Chart.prototype._createVizInstance = function(fromAPI) {
        if (!this._vizCreated) {
            return;
        }
        try {
            var type = this._vizModel().type();
            var defaultProperties = Chart._getDefaultProperties(type,this._uiConfig);
            
            // Need rebuild properties from viz Chart to info Chart or from info Chart to viz Chart
            if (ChartTypeUtil.isVizChart(this._type) && ChartTypeUtil.isInfoChart(type)) {
                this._properties = InfoChartUtil.buildInfoProperties(this._type, this._properties);
            } else if (ChartTypeUtil.isVizChart(type) && ChartTypeUtil.isInfoChart(this._type)) {
                this._properties = InfoChartUtil.buildVizProperties(type, this._properties);
            }
             
            var properties = utils.updateJSON(defaultProperties, this._properties);
            properties = this._chartView().getValidProperties(properties, type);
            var options = {
                'type' : type,
                'data' : this._data,
                'css' : this._css,
                'properties' : properties,
                'scales' : this._scales,
                'sharedRuntimeScales': ScaleSharingService.getSharedRuntimeScales(this)
            };
            this._updateFeeding(options, type);
            this._data = options.data;
            // update the cached type when create viz instance.
            this._type = options.type;
            // console.log(options.data, options.feeding);

            //do not hide loading icon for new geo map
            if (!ChartTypeUtil.isGeo(this._type)) {
                this._chartView().hideLoadingIcon();
            }

            if ( this._enableMorphing &&
                 ChartTypeUtil.isSupportMorphing( type ) &&
                 this._chartView().setCloseAnimation ) {

                this._chartView().setCloseAnimation(options);
            }

            this._chartView().create(options);
        } catch (error) {
            this._vizMorpher.resetMorphCache();

            //TODO when throw error???
            if (RuntimeManager.getRuntime()._modelRefs[this._uid] === 1) {
                throw error;
            }
        }
    };

    Chart.prototype._updateFeeding = function(options, type) {
        var feeds = this.feeds({
            'withMND' : true
        });
        if (!ChartTypeUtil.isTable(type)) {
            if (!ChartTypeUtil.isGeo(type) && FeedUtils.isEmptyFeeds(feeds)) {
                if (VizUtils.getDatasetType(options.data) !== DatasetTypeConst.CROSS_TABLE || VizUtils.hasFakeData(options.data)) {
                    options.data = IncompleteGhost.getDataset(type);
                    if(InfoChartUtil.isInfoChart(type)) {
                        options.feeding = IncompleteGhost.getFeeding(type);
                    }
                }
            } else {
                options.feeding = this._chartViewInstance.buildFeedings(type, options.data, feeds);
            }
        } else {
            if (!options.data || VizUtils.hasFakeData(options.data)) {
                options.data = IncompleteGhost.getDataset(type);
            }
            options.feeding = this._chartViewInstance.buildFeedings(type, options.data, feeds);
        }
    };

    /**
     * Save chart control into a JSON object which contains 2 kinds of information:
     * 1. information of viz instance, including type, data, properties, css, feeding and size.
     * 2. information of chart control, including title mode, chart type, feedingItems.
     * @method sap.viz.controls.chart.Chart.prototype.save
     * @param {JSON} options
     *      optional
     *      supported options: {emptyDataset : false}
     * @return {JSON}
     */
    Chart.prototype.save = function(options) {
        var jsonValue = {};
        //viz instance
        jsonValue["vizInstance"] = this.exportViz(options);
        var feedingItems = this.feeds();
        var feedsJSON = this._chartViewInstance.FeedsToJSON(feedingItems);
        jsonValue["feedingItems"] = feedsJSON;
        jsonValue["type"] = this._vizModel().type();
        jsonValue["vizTitleMode"] = this._titleMode;
        jsonValue["vizView"] = this._chartViewInstance.save();
        jsonValue["axis"] = this._saveAxisCache();

        var scaleGroup = ScaleSharingService.getGroup(this);
        if (scaleGroup) {
            jsonValue["runtimeScales"] = {
                group: scaleGroup,
                index: ScaleSharingService.getIndexInGroup(this),
                runtimeScales: this._chartView().runtimeScales({merged: true})
            }
        }
        return jsonValue;
    };
    /**
     * Load chart control from JSON object which contains 2 kinds of information:</br>
     * 1. load information of chart control, including title mode, chart type, feedingItems.</br>
     * 2. create viz instance from JSON object which including type, data, properties,
     * css, feeding and size.
     * @method sap.viz.controls.chart.Chart.prototype.load
     * @param {JSON} valueJSON
     */
    Chart.prototype.load = function(valueJSON) {
        valueJSON = ChartMigrator.migrate(valueJSON);
        valueJSON = this._chartPreHandler.preLoadChart(valueJSON);
        this._beginUpdateProperty();

        var titleMode = valueJSON["vizTitleMode"];
        if (titleMode) {
            this.vizTitleMode(titleMode);
        }
        this._loadingModel = true;
        var type = valueJSON["type"];

        this._updateView(type);
        var feeds = null;
        var feedsJSON = valueJSON['feedingItems'];
        if (feedsJSON) {
            feeds = this._chartViewInstance.FeedsFromJSON(feedsJSON);
        }
        this._vizModel().load({
            "type" : type,
            "feedingItems" : feeds
        });
        this._loadingModel = false;

        var runtimeScales = valueJSON["runtimeScales"];
        if (runtimeScales) {
            ScaleSharingService.load(this, runtimeScales.group, runtimeScales.index, runtimeScales.runtimeScales);
        }

        var vizInstance = valueJSON["vizInstance"];
        if (vizInstance) {
            this._loadingInstance = true;
            
            vizInstance.properties = this._chartViewInstance.updatePropertyForPropertyZoneInteraction(vizInstance.properties, this._uiConfig.useBuiltInPropertyZoneInteraction);
            
            if (valueJSON["vizView"]) {
                this._chartViewInstance.load(valueJSON["vizView"], vizInstance.properties);
            }
            if (runtimeScales) {
                vizInstance["sharedRuntimeScales"] = ScaleSharingService.getSharedRuntimeScales(this);
            }
            this.loadViz(vizInstance);
            this._loadingInstance = false;
        }

        var axisCache = valueJSON["axis"];
        if (axisCache) {
            this._loadAxisCache(axisCache);
        }
        this._endUpdateProperty();

    };

    /**
     * Get/Set all feeds data.
     * To get feeds, please use feeds() or feeds({withMND: true/false}). The feeds order is always same with the feeding
     * definition of chart.
     * If the user shows MND in UI,
     * with option {withMND : true}, return current feeds with MND;
     * with option {withMND : false}, return current feeds without MND;
     * with no option, return current feeds.
     * If the user doesn't show MND in UI, get feeds always return current feeds, the option value will be ignored.
     * To set feeds, please use feeds(feedItems).
     * @method sap.viz.controls.chart.Chart.prototype.feeds
     * @param {Array<{@link sap.viz.controls.common.feeds.FeedItem}>|JSON} value
     * @return {Array<{@link sap.viz.controls.common.feeds.FeedItem}>} Current feed items.
     *     An array of {@link sap.viz.controls.common.feeds.FeedItem}.
     */
    Chart.prototype.feeds = function(value) {
        if (arguments.length > 0 && utils.isArray(value)) {
            if (value !== null && value !== undefined && !VizUtils.isArrayOfFeedItem(value)) {
                return;
            }

            this._beginUpdateProperty();
            // Migrate parameters
            var type = this._vizModel().type();
            value = ChartMigrator.migrateFeeds(value, type);

            var newValue = value.slice(0);
            this._vizModel().feedingItems(newValue, this._enableTrellis);

            try {
                if (this._needCreateViz(type, false)) {
                    this._createVizInstance();
                } else {
                    this._updateVizInstance();
                }
            } catch (error) {
                this._endUpdateProperty();
                throw error;
            }

            this._endUpdateProperty();
            return this;
        } else {
            return this._vizModel().explicitFeedingItems(value);
        }
    };

    /**
     * Enable or disable morphing.</br>
     * Note: The following viz types are not supporting morphing:
     * - ChartConst.TYPE_GEO_BUBBLE
     * - ChartConst.TYPE_GEO_CHOROPLETH
     * - ChartConst.TYPE_GEO_PIE
     * - ChartConst.TYPE_GEO_MAP
     * - ChartConst.TYPE_TABLE
     * - ChartConst.TYPE_CROSSTAB
     * @method sap.viz.controls.chart.Chart.prototype.enableMorphing
     * @param {Boolean} value
     *                  Default value is true.
     *                  If value is true, enable morphing.
     *                  If value is false, disable morphing.
     */
    Chart.prototype.enableMorphing = function(value) {
        // TODO: There is no determined behavior definition for the situation if chart view is not existing. The if
        // (this._chartView) needs to be refined in Chart control.
        if (arguments.length > 0) {
            this._enableMorphing = !!value;
        } else {
            return this._enableMorphing;
        }
        return this;
    };
    /**
     * Get/set enablePropertyZone.
     * Note: This flag is referred to whether property zones of chart can be selected,
     * and it means properties of these zones can be edited.
     * @method sap.viz.controls.chart.Chart.prototype.enablePropertyZone
     * @param {Boolean} value
     *                  Default value is false.
     *                  If value is false, disable selecting property zone.
     *                  If value is true, enable selecting property zone.
     * @returns {Boolean} Current value of enablePropertyZone
     */
    Chart.prototype.enablePropertyZone = function(value) {
        if (arguments.length > 0) {
            if (this._chartView()) {
                return this._chartView().enablePropertyZone(!!value);
            }
        } else {
            if (this._chartView()) {
                return this._chartView().enablePropertyZone();
            }
        }
        return this;
    };
    /**
     * Update title according to the current feedItems and set this title back for chart instance.
     */
    Chart.prototype._updateTitle = function() {
        if (this.isTitleCustomized()) {
            return;
        }
        var newTitle = this.getTitleTextByFeeding();
        this._properties.title = this._properties.title || {};
        if(newTitle !== null)
        {
            newTitle = newTitle.trim();
        }
        if (this._properties.title.text != newTitle) {
            this._properties.title.text = newTitle;
        }
    };

    Chart.prototype.feeding = function() {
        if (this._chartViewInstance) {
            return this._chartViewInstance.feeding();
        } else {
            return [];
        }
    };

    /**
     * Show customized message and destory the viz instance.
     * @method sap.viz.controls.chart.Chart.prototype.showMessage
     * @param {String} message
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var chart = new Chart(...);
     * ...
     * case 1:
     * if (errorHappened) {
     *     chart.showMessage("your error message");
     * } else {
     *     chart.vizUpdate(); // or chart.vizXXX();
     * }

     * case 2:
     * try {
     *     chart.vizUpdate(); // or chart.vizXXX();
     * } catch (error) {
     *     chart.showMessage(error);
     * }
     * </pre>
     */
    Chart.prototype.showMessage = function(message) {
        if (arguments.length == 1) {
            if (this._chartView()) {
                return this._chartView().updateDescription(message);
            }
        }
    };
     /**
     * Export the current viz as SVG String.
     * The viz is ready to be exported to svg ONLY after the initialization is finished.
     * Any attempt to export to svg before that will result in an empty svg string.
     * @method sap.viz.controls.chart.Chart.prototype.exportToSVGString
     * @param {Object} [option]  {
     *                              width: Number - the exported svg will be scaled to the specific width.
     *                              height: Number - the exported svg will be scaled to the specific height.
     *                              hideTitleLegend: Boolean - flag to indicate if the exported svg includes the original title and legend.
     *                              hideAxis: Boolean - flag to indicate if the exported svg includes the original axis.
     *                           }
     * @return {String} the SVG string of the current viz or empty svg if error occurs.
     */
    Chart.prototype.exportToSVGString = function(option) {
        return this._chartView().exportToSVGString(option);
    };

    /**
     * Check whether the chart type supports API exportToSVGString.<br/>
     * @method sap.viz.controls.chart.Chart.prototype.supportExportToSVG
     * @return {Boolean}
     */
    Chart.prototype.supportExportToSVG = function() {
        return this._chartView().supportExportToSVG();
    };

    Chart.prototype._updateExportJSON = function(JSON) {
        if (JSON && JSON.properties && JSON.properties.tooltip && JSON.properties.tooltip.preRender) {
            JSON.properties = utils.clone(JSON.properties);
            delete JSON.properties.tooltip.preRender;
        }
        return JSON;
    };

    Chart.prototype.getPropertyZones = function() {
        return this._chartView().getPropertyZones();
    };

    Chart.prototype.setPropertyZones = function(propertyZones) {
        this._chartView().setPropertyZones(propertyZones);
    };

    Chart.prototype.queryProperties = function(options) {
        var ret = this._chartView().queryProperties(options);
        return ret;
    };

    Chart.prototype.updateProperties = function(options, trigger) {
        // play control will call this function , the userInteractionComplete will send twice
        this._chartView().updateProperties(options);
        this._dispatchEvent( new Event(ChartEvent.VIZ_PROPERTIES_CHANGED, this, {properties: options.properties, trigger: trigger}) );
    };

    Chart.prototype.selectedPropertyZone = function(selection) {
        var cv = this._chartView();
        return cv.selectedPropertyZone.apply(cv, arguments);
    };

    Chart.prototype.getZoneName = function(point) {
        return this._chartView().getZoneName.apply(this._chartView(), arguments);
    };

    Chart.prototype.getDataPointsPosition = function(dataPoints) {
        return this._chartView().getDataPointsPosition.apply(this._chartView(), arguments);
    };

    Chart.prototype.setAxisScale = function(axis) {
        return this._chartView().setAxisScale.apply(this._chartView(), arguments);
    };

    Chart.prototype.vizCssProperty = function(selector, propName, propValue) {
        return this._chartView().cssProperty.apply(this._chartView(), arguments);
    };

    Chart.prototype.getFeeding = function() {
        return this._chartView().feeding();
    };

    Chart._getDefaultProperties = function(type,uiConfig) {
        if (!type) {
            return {};
        }
        var properties;
        var chartId = ChartTypeUtil.getChartId(type);
        if (uiConfig && uiConfig.hasOwnProperty('specificProperties')) {
            properties = utils.updateJSON(uiConfig.defaultProperties, uiConfig.specificProperties[chartId]);
        } else {
            properties = uiConfig ? uiConfig.defaultProperties : null;
        }
        properties = VizUtils.convertProperties(properties, ChartTypeUtil.getVizType(type), type);
        if (ChartTypeUtil.isInfoChart(type)) {
            properties = InfoChartUtil.buildInfoProperties(type, properties);
        }
        return properties;
    };

    /**
     * Pause render for the viz instance. Call resumeRender for resume.<br/>
     * @method sap.viz.controls.chart.Chart.prototype.pauseRender
     */
    Chart.prototype.pauseRender = function() {
        this._chartProxy.pauseRender();
    };
    /**
     * Resume render for the viz instance.<br/>
     * @method sap.viz.controls.chart.Chart.prototype.resumeRender
     */
    Chart.prototype.resumeRender = function() {
        this._chartProxy.resumeRender();
    };

    /**
     * Get properties changed by api or user interaction.<br/>
     * @method sap.viz.controls.chart.Chart.prototype.getChangedProperties
     * @return {JSON}
     */
    Chart.prototype.getChangedProperties = function() {
        return this._chartView().getChangedProperties();
    };

    /**
     * Get/Set Chart scales.
     * @method sap.viz.controls.chart.Chart.prototype.vizScales
     * @param {JSON} [value] 
     * @return {JSON}
     */
    Chart.prototype.vizScales = function(scales) {
        if (arguments.length > 0) {
            this._updateScales(scales);
            return this._chartView().scales(scales);
        } else {
            return this._chartView().scales();
        }
    };

    /*
     * this function is used to update scales by internal call
     */
    Chart.prototype.scalesWithEvents = function(scales, eventNames) {
        if (arguments.length > 0) {
            var self = this;
            this._updateScales(scales);
            this._chartView().scales(scales);
            eventNames.forEach(function(eventName) {
                self._dispatchEvent( new Event(eventName, this, {scales : scales}) );
            });
            return this;
        } else {
            return this._chartView().scales();
        }
    };

    /*
     * merge scales
     */
    Chart.prototype._updateScales = function(values) {
        var added = [];
        var found = false;
        for (var i in values) {
            found = false;
            for (var j in this._scales)  {
                if (this._scales[j].feed === values[i].feed) {
                    this._scales[j] = values[i];
                    found = true;
                    break;
                }
            }
            if (!found) {
                added.push(values[i]);
            }
        }
        if (added.length > 0) {
            this._scales = this._scales.concat(added);
        }
    };
    
    /**
     * This function is used to clear this._properties.
     * Case: user add a new chart, need to clear this._properties to use default options.
     */
    Chart.prototype.reset = function() {
        if (this._properties) {
            this._properties = {};
            this._clearAxisCache();
            this._chartView().reset();
        }
        
        if (this._scales) {
            this._scales = [];
        }
    };
    
    Chart.prototype.runtimeScales = function(options) {
        if (options) {
            return this._chartView().runtimeScales(options);
        } else {
            return this._chartView().runtimeScales();
        }
    };
    
    Chart.prototype.sharedRuntimeScales = function(value) {
        return this._chartView().sharedRuntimeScales(value);
    };

    return Chart;
});


define('sap/viz/controls/chart/Metadata',[
// @formatter:off  
    'sap/viz/controls/common/constants/DatasetTypeConst',
    'sap/viz/controls/common/metadata/MetadataFactory',
    'sap/viz/controls/common/utils/migrators/ChartMigrator'
], function(DatasetTypeConst, MetadataFactory, ChartMigrator){
// @formatter:on
    /**
     * Metadata Class
     * @class sap.viz.controls.chart.Metadata
     */
    var Metadata = {};

    /**
     * According to different chart type to get supported datasets.
     * @method sap.viz.controls.chart.Metadata.getSupportedDatasets
     * @param {String} vizType
     * @return {Array} Array of dataset types
     * @example 
     * <pre>
     * var supportedDatasets = Metadata.getSupportedDatasets(ChartConst.TYPE_LINE);
     * // ["FlatTableDataset"]
     * supportedDatasets = Metadata.getSupportedDatasets(ChartConst.TYPE_RADAR);
     * // ["CrosstableDataset"]
     * supportedDatasets = Metadata.getSupportedDatasets(ChartConst.TYPE_GEO_MAP);
     * // ["ArrayOfFlatTableDataset"]
     * supportedDatasets = Metadata.getSupportedDatasets(ChartConst.TYPE_TABLE);
     * // ["RawDataset"]
     * </pre>
     */
    Metadata.getSupportedDatasets = function(visualizationType) {
        var datasets = [];
        visualizationType = ChartMigrator.migrateChartType(visualizationType);
        var metadata = MetadataFactory.get(visualizationType);
        if (metadata) {
            var support = metadata.support();
            if (support.dataset[DatasetTypeConst.FLAT_TABLE]) {
                datasets.push(DatasetTypeConst.FLAT_TABLE);
            }
            if (support.dataset[DatasetTypeConst.CROSS_TABLE]) {
                datasets.push(DatasetTypeConst.CROSS_TABLE);
            } 
            if (support.dataset[DatasetTypeConst.ARRAY_FLAT_TABLE]) {
                datasets.push(DatasetTypeConst.ARRAY_FLAT_TABLE);
            }
            if (support.dataset[DatasetTypeConst.RAW]) {
                datasets.push(DatasetTypeConst.RAW);
            }
        }
        return datasets;
    };   
    return Metadata;
});
define('sap/viz/controls/plugins/infochart/getPropertiesByCtx',['sap/viz/controls/common/utils/Utils'], function(Utils) {
    function equalCtx(ctx1, ctx2) {
        var keys1 = Object.keys(ctx1), keys2 = Object.keys(ctx2);
        return (keys1.length > 0) && keys1.every(function(key) {
            return ctx1[key] === ctx2[key];
        });
    }

    function match(configCtx, dpCtx) {
        if (!configCtx) {
            return false;
        }
        if (!Array.isArray(configCtx)) {
            configCtx = [configCtx];
        }

        return configCtx.some(function(ctx) {
            if (!ctx) {
                return true;
            }

            return equalCtx(ctx, dpCtx);
        });
    }

    function filterDimensionContext(context, measureIds) {
        var ret;
        for (var key in context) {
            if (!ret) {
                ret = {};
            }
            var isDimension = true;
            for (var i = 0; i < measureIds.length; i++) {
                if (key === measureIds[i]) {
                    measureIds.splice(i, 1);
                    isDimension = false;
                    break;
                }
            }
            if (!isDimension) {
                continue;
            }
            ret[key] = context[key];
        }
        return ret;
    }

    return function(context, configs) {
        var ctx = context.ctx;

        if (!Array.isArray(configs)) {
            configs = [configs];
        }

        var defaultResult, paras, i, len, config, configCtx;
        for (i = 0, len = configs.length; i < len; i++) {
            config = configs[i];
            configCtx = config.ctx;
            paras = config.paras;
            if (!configCtx) {
                defaultResult = paras;
            }
        }

        paras = this._parameters;
        var isUpdated, contextNum = -1, number, paraNum;
        for (i = 0, len = configs.length; i < len; i++) {
            config = configs[i];
            configCtx = config.ctx;
            paras = config.paras;
            if (match(configCtx, ctx)) {
                number = 0;
                for (var j in configCtx) {// Get context key number
                    number++;
                }
                if (contextNum < number) {// Get most detailed context
                    contextNum = number;
                    paraNum = i;
                }
            }
        }
        if (configs[paraNum]) {
            return configs[paraNum].paras;
        }
        return defaultResult;
    };
}); 

define('sap/viz/controls/plugins/infochart/SVG',[],function() {
  var svgNS = 'http://www.w3.org/2000/svg';

  var ELLIPSIS_SUFFIX = "...";

  var textMeasureNode;

  function create(tagName, refNode, insert) {
    var doc = refNode ? refNode.ownerDocument : window.document;
    var ns = tagName.toLowerCase() === "svg" ? svgNS
        : (refNode ? refNode.namespaceURI : svgNS);
    var node = doc.createElementNS(ns, tagName);
    return refNode ? (insert ? refNode.parentNode.insertBefore(node, refNode)
        : refNode.appendChild(node)) : node;
  }

  function getTextMeasureNode(text, style) {
    if (!textMeasureNode) {
      var svg = create("svg", document.body);
      svg.style.cssText = "position:absolute;left:-1000px;top:-1000px;z-index:-9000;width:1px;height:1px";
      textMeasureNode = create("text", svg);
    }
    textMeasureNode.style.cssText = toCSSText(style);
    textMeasureNode.textContent = text;
    return textMeasureNode;
  }

  function toCSSText(style) {
    var cssText = "";
    if (Object.prototype.toString.call(style) === '[object String]') {
      cssText = style;
    } else {
      for ( var i in style) {
        if (style.hasOwnProperty(i)) {
          var value = style[i];
          if (value !== null && value !== undefined && value !== "") {
            cssText += i + ":" + value + ";";
          }
        }
      }
    }

    return cssText;
  }

  return {
    create : create,
    measureText : function(text, style) {
      if (!text) {
        return {
          width : 0,
          height : 0,
          x : 0,
          y : 0
        };
      }

      return getTextMeasureNode(text, style).getBBox();
    },
    toCSSText : toCSSText,
    createTextNode : function(text, style, measure, maxWidth, maxHeight) {
      style = toCSSText(style);

      var hasMaxWidth = maxWidth !== undefined, hasMaxHeight = maxHeight !== undefined;

      var title;
      if (measure || hasMaxWidth || hasMaxHeight) {
        var measureNode = getTextMeasureNode(text, style);

        var change = false;
        if (hasMaxWidth) {
          var length = measureNode.getComputedTextLength();

          if (length > maxWidth) {
            measureNode.textContent = ELLIPSIS_SUFFIX;
            length = measureNode.getComputedTextLength();
            maxWidth -= length;
            if (maxWidth <= 0) {
              return;
            }

            measureNode.textContent = text;
            var num = text.length - 1;
            while (num > 0 &&
                (measureNode.getSubStringLength(0, num) > maxWidth)) {
              num--;
            }

            if (num > 0) {
              title = text;
              text = text.substr(0, num) + ELLIPSIS_SUFFIX;
              change = true;
            } else {
              return;
            }
          }
        }

        if (measure || hasMaxHeight) {
          if (change) {
            measureNode.textContent = text;
          }

          if (measure) {
            measure = measureNode.getBBox();
          }

          if (hasMaxHeight && measure.height > maxHeight) {
            return;
          }
        }
      }

      var ret = create("text");
      ret.setAttribute("style", style);
      ret.textContent = text;

      if (title) {
        var titleNode = create("title", ret);
        titleNode.textContent = title;
      }

      return measure ? {
        measure : measure,
        node : ret
      } : ret;
    }
  };
});
define('sap/viz/controls/plugins/infochart/Icon',[ "./SVG" ], function(SVG) {

  var _cache = {};
  var Icon = function(content) {
    var container = document.createElement("div");
    container.innerHTML = content;
    var childNodes = container.childNodes;
    var svgNode;
    for (var i in childNodes) {
        var localName = childNodes[i].localName;
        if (localName && localName.toLowerCase() === "svg") {
            svgNode = this._svgNode = childNodes[i];
            break;
        }
    }
    if(!_cache[content]){
        document.body.appendChild(container);
        _cache[content] = svgNode.getBBox();
    }
    var bbox = _cache[content];
    this._width = bbox.width;
    this._height = bbox.height;
    this._x = bbox.x;
    this._y = bbox.y;
  };

  var prototype = Icon.prototype;

  prototype.render = function(parent, scale, fill) {
    var group = SVG.create("g", parent);
    var svgNode = this._svgNode;
    var node = this._svgNode.firstChild;
    while (node) {
      var sibling = node.nextSibling;
      group.appendChild(node);
      node = sibling;
    }
    if (scale) {
      if (Array.isArray(scale)) {
        scale = scale.join(" ");
      }
      group.setAttribute("transform", "scale(" + scale + ")");
    }
    if (fill) {
      group.setAttribute("fill", fill);
    }
    return group;
  };

  prototype.clipPath = function(parent){
    var svgNode = this._svgNode;
    var node = this._svgNode.firstChild;
    while (node) {
      var sibling = node.nextSibling;
      parent.appendChild(node);
      node = sibling;
    }
  };

  prototype.destroy = function() {
    var container = this._svgNode.parentNode;
    if(container && container.parentNode){
        container.parentNode.removeChild(container);
    }
    delete this._svgNode;
  };
  prototype.getWidth = function() {
    return this._width;
  };
  prototype.getHeight = function() {
    return this._height;
  };
  prototype.getX = function() {
    return this._x;
  };
  prototype.getY = function() {
    return this._y;
  };
  return Icon;

});
define('sap/viz/controls/plugins/infochart/StackDecoratorGenerator',
    [ "./getPropertiesByCtx", "./SVG", "./Icon" ],
    function(getPropertiesByCtx, SVG, Icon) {

      var ARROW_LENGTH = 50;
      var _ID =0;

      function triangle(width, height, isHorizontal, negative) {
        var points;
        if (negative) {
          points = [ [ width, 0 ] ];
          if (isHorizontal) {
            points.push([ 0, height / 2 ], [ width, height ]);
          } else {
            points.push([ 0, 0 ], [ width / 2, height ]);
          }
        } else {
          points = [ [ 0, height ] ];
          if (isHorizontal) {
            points.push([ 0, 0 ], [ width, height / 2 ]);
          } else {
            points.push([ width / 2, 0 ], [ width, height ]);
          }
        }
        return points;
      }

      var pathGens = {
        "pike" : function(width, height, isHorizontal, negative) {
          var points = triangle(width, height, isHorizontal, negative);
          if (negative) {
            if (isHorizontal) {
              if (width > ARROW_LENGTH) {
                points.splice(1, 0, [ ARROW_LENGTH, 0 ]);
                points.splice(3, 0, [ ARROW_LENGTH, height ]);
              }
            } else {
              if (height > ARROW_LENGTH) {
                points.splice(2, 0, [ 0, height - ARROW_LENGTH ]);
                points.splice(4, 0, [ width, height - ARROW_LENGTH ]);
              }
            }
          } else {
            if (isHorizontal) {
              if (width > ARROW_LENGTH) {
                points.splice(2, 0, [ width - ARROW_LENGTH, 0 ]);
                points.splice(4, 0, [ width - ARROW_LENGTH, height ]);
              }
            } else {
              if (height > ARROW_LENGTH) {
                points.splice(1, 0, [ 0, ARROW_LENGTH ]);
                points.splice(3, 0, [ width, ARROW_LENGTH ]);
              }
            }
          }

          return points;
        },
        "triangle" : triangle,
        "trapezoid" : function(width, height, isHorizontal, negative) {
          var points;
          if (negative) {
            points = [ [ width, 0 ] ];
            if (isHorizontal) {
              if (width > ARROW_LENGTH) {
                points.push([ ARROW_LENGTH, 0 ]);
              }
              points.push([ 0, height ]);
            } else {
              points.push([ 0, 0 ]);
              if (height > ARROW_LENGTH) {
                points.push([ 0, height - ARROW_LENGTH ]);
              }
            }
          } else {
            points = [ [ 0, height ] ];
            if (isHorizontal) {
              points.push([ 0, 0 ]);
              if (width > ARROW_LENGTH) {
                points.push([ width - ARROW_LENGTH, 0 ]);
              }
              points.push([ width, height ]);
            } else {
              if (height > ARROW_LENGTH) {
                points.push([ 0, ARROW_LENGTH ]);
              }
              points.push([ width, 0 ]);
            }
          }
          points.push([ width, height ]);
          return points;
        }
      };

      return {
        name : "stackDecorator",
        fn : function(configs) {
          return function(context) {
            var props = getPropertiesByCtx(context, configs);

            if (!props) {
                return;
            }
            
            var graphic = context.graphic, width = graphic.width, height = graphic.height;
            var stackShape = props.stackShape || {};
            var stackShapeValue = stackShape.value;
            var node = context.g;
            var clipPath = SVG.create("clipPath", node);
            var id = "clipPath_" + (_ID++);
            clipPath.setAttribute("id", id);
            node.setAttribute("clip-path", "url(#"+id+")");
            if (stackShape.type === "svg") {
                  var iconSVG = new Icon(stackShapeValue);
                  var imageWidth = iconSVG.getWidth();
                  var imageHeight = iconSVG.getHeight();
                  var wScale = width / imageWidth;
                  var hScale = height / imageHeight;
                  iconSVG.clipPath(clipPath);
                  clipPath.setAttribute("transform", "translate( "+ graphic.x +","+ graphic.y+") scale(" + wScale +" "+ hScale+ ")");
                  iconSVG.destroy();
              } else {
                  if (!stackShapeValue || stackShapeValue === "rectangle") {
                      var rect = SVG.create("rect", clipPath);
                      rect.setAttribute("width", width);
                      rect.setAttribute("height", height);
                  } else {
                      var path = SVG.create("path", clipPath);
                      var d = "";
                      pathGens[stackShapeValue](width, height,
                          context.horizontal, context.negative).forEach(
                          function(point, index) {
                            d += (index === 0 ? "M" : "L") + point[0] + " " +
                                point[1];
                          });
                      d += "Z";
    
                      path.setAttribute("d", d);
                    }
                    clipPath.setAttribute("transform", "translate( "+ graphic.x +","+ graphic.y+")");
              }

          };
        }
      };
    });

define('sap/viz/controls/plugins/infochart/shapeHelper',[], function() {
    var ARROW_LENGTH = 50;

    function triangle(width, height, isHorizontal, negative) {
        var points;
        if (negative) {
            points = [
                [width, 0]
            ];
            if (isHorizontal) {
                points.push([0, height / 2], [width, height]);
            } else {
                points.push([0, 0], [width / 2, height]);
            }
        } else {
            points = [
                [0, height]
            ];
            if (isHorizontal) {
                points.push([0, 0], [width, height / 2]);
            } else {
                points.push([width / 2, 0], [width, height]);
            }
        }
        return points;
    }

    var pathGens = {
        "pike": function(width, height, isHorizontal, negative) {
            var points = triangle(width, height, isHorizontal, negative);
            if (negative) {
                if (isHorizontal) {
                    if (width > ARROW_LENGTH) {
                        points.splice(1, 0, [ARROW_LENGTH, 0]);
                        points.splice(3, 0, [ARROW_LENGTH, height]);
                    }
                } else {
                    if (height > ARROW_LENGTH) {
                        points.splice(2, 0, [0, height - ARROW_LENGTH]);
                        points.splice(4, 0, [width, height - ARROW_LENGTH]);
                    }
                }
            } else {
                if (isHorizontal) {
                    if (width > ARROW_LENGTH) {
                        points.splice(2, 0, [width - ARROW_LENGTH, 0]);
                        points.splice(4, 0, [width - ARROW_LENGTH, height]);
                    }
                } else {
                    if (height > ARROW_LENGTH) {
                        points.splice(1, 0, [0, ARROW_LENGTH]);
                        points.splice(3, 0, [width, ARROW_LENGTH]);
                    }
                }
            }

            return points;
        },
        "triangle": triangle,
        "trapezoid": function(width, height, isHorizontal, negative) {
            var points;
            if (negative) {
                points = [
                    [width, 0]
                ];
                if (isHorizontal) {
                    if (width > ARROW_LENGTH) {
                        points.push([ARROW_LENGTH, 0]);
                    }
                    points.push([0, height]);
                } else {
                    points.push([0, 0]);
                    if (height > ARROW_LENGTH) {
                        points.push([0, height - ARROW_LENGTH]);
                    }
                }
            } else {
                points = [
                    [0, height]
                ];
                if (isHorizontal) {
                    points.push([0, 0]);
                    if (width > ARROW_LENGTH) {
                        points.push([width - ARROW_LENGTH, 0]);
                    }
                    points.push([width, height]);
                } else {
                    if (height > ARROW_LENGTH) {
                        points.push([0, ARROW_LENGTH]);
                    }
                    points.push([width, 0]);
                }
            }
            points.push([width, height]);
            return points;
        }
    };

    function generateId() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            var r = Math.random() * 16 | 0,
                v = c == 'x' ? r : r & 0x3 | 0x8;
            return v.toString(16);
        });
    }

    function removeAllColorAttributes(rootNode) {
        var childNodes = rootNode.childNodes;
        for (var i = 0; i < childNodes.length; i++) {
            if (childNodes[i].nodeType !== 1) {
                continue;
            }
            if (childNodes[i].getAttribute("fill")) {
                childNodes[i].removeAttribute("fill");
            }
            if (childNodes[i].getAttribute("stroke")) {
                childNodes[i].removeAttribute("stroke");
            }
            if (childNodes[i].getAttribute("stroke-width")) {
                childNodes[i].removeAttribute("stroke-width");
            }
            removeAllColorAttributes(childNodes[i]);
        }
    }
    return {
        pathGens: pathGens,
        uuid: generateId,
        removeAllColorAttributes: removeAllColorAttributes
    };
});
define('sap/viz/controls/plugins/infochart/BarShapeRendererGenerator',
    ["./getPropertiesByCtx", "./SVG", "./Icon", "./shapeHelper"],
    function(getPropertiesByCtx, SVG, Icon, shapeHelper) {
        var pathGens = shapeHelper.pathGens,
            removeAllColorAttributes = shapeHelper.removeAllColorAttributes,
            generateId = shapeHelper.uuid;        

        function drawMask(selection, width, height, x, y, rxy, rectHW, imageHW, id, isHorizontal) {
            var className = 'v-mask';
            if (width < 0) {
                width = 0;
            }
            if (height < 0) {
                height = 0;
            }
            if (selection.select('.' + className).node() === null) {
                id = 'mask-' + id;
                var mask;
                //set the stroke of mask to 0px to avoid the highlight effect of datapoint
                if (isHorizontal) {
                    mask = selection.insert('mask', ':first-child').attr('class', className).attr('id', id)
                    .attr('width', imageHW).attr('height', height).attr('x', x).attr('y', y);
                    mask.append('rect').attr('x', rxy).attr('y', y).attr('width', rectHW)
                    .attr('height', height).attr('fill', '#202020').attr("fill-opacity", "1")
                    .attr("stroke-width", "0px");
                    mask.append('rect').attr('x', x).attr('y', y).attr('width', width)
                    .attr('height', height).attr('fill', '#ffffff').attr("fill-opacity", "1")
                    .attr("stroke-width", "0px");
                } else {
                    mask = selection.insert('mask', ':first-child').attr('class', className).attr('id', id)
                    .attr('width', width).attr('height', imageHW).attr('x', x).attr('y', y);
                    mask.append('rect').attr('x', x).attr('y', rxy).attr('width', width)
                    .attr('height', rectHW).attr('fill', '#202020').attr("fill-opacity", "1")
                    .attr("stroke-width", "0px");
                    mask.append('rect').attr('x', x).attr('y', y).attr('width', width)
                    .attr('height', height).attr('fill', '#ffffff').attr("fill-opacity", "1")
                    .attr("stroke-width", "0px");
                }
                return id;
            } else {
                if (isHorizontal) {
                    selection.select('.' + className).attr('width', imageHW)
                    .attr('height', height).attr('x', x).attr('y', y);
                    selection.select('.' + className).selectAll('rect')[0][0].attr('x', rxy).attr('y', y)
                    .attr('width', rectHW).attr('height', height).attr('fill', '#202020').attr("fill-opacity", "1")
                    .attr("stroke-width", "0px");
                    selection.select('.' + className).selectAll('rect')[0][1].attr('x', x).attr('y', y)
                    .attr('width', width).attr('height', height).attr('fill', '#ffffff').attr("fill-opacity", "1")
                    .attr("stroke-width", "0px");
                } else {
                    selection.select('.' + className).attr('width', width)
                    .attr('height', imageHW).attr('x', x).attr('y', y);
                    selection.select('.' + className).selectAll('rect')[0][0].attr('x', x).attr('y', rxy)
                    .attr('width', width).attr('height', rectHW).attr('fill', '#202020').attr("fill-opacity", "1")
                    .attr("stroke-width", "0px");
                    selection.select('.' + className).selectAll('rect')[0][1].attr('x', x).attr('y', y)
                    .attr('width', width).attr('height', height).attr('fill', '#ffffff').attr("fill-opacity", "1")
                    .attr("stroke-width", "0px");
                }
            }
            return selection.select('.' + className).attr('id');
        }

        function drawClipPath(selection, width, height, x, y, id, isHorizontal) {
            var className = 'v-clippath';
            if (width < 0) {
                width = 0;
            }
            if (height < 0) {
                height = 0;
            }
            if (selection.select('.' + className).node() === null) {
                id = 'clip-path-' + id;
                var clipath;
                if (isHorizontal) {
                    clipath = selection.insert('clipPath', ':first-child').attr('class', className).attr('id', id);
                    clipath.append('rect').attr('x', x).attr('y', y - 1)
                    .attr('width', width).attr('height', height + 2);
                } else {
                    clipath = selection.insert('clipPath', ':first-child').attr('class', className).attr('id', id);
                    clipath.append('rect').attr('x', x - 1).attr('y', y)
                    .attr('width', width + 2).attr('height', height);
                }
                return id;
            } else {
                if (isHorizontal) {
                    selection.select('.' + className).select('rect')
                    .attr('width', width).attr('height', height + 2).attr('x', x).attr('y', y - 1);
                } else {
                    selection.select('.' + className).select('rect')
                    .attr('width', width + 2).attr('height', height).attr('x', x - 1).attr('y', y);
                }
                return selection.select('.' + className).attr('id');
            }
        }

            function scale(configs, context) {
                var props = getPropertiesByCtx(context, configs);
                if (props) {
                    var graphic = context.graphic,
                        node, scaleNode, width = graphic.width,
                        height = graphic.height,
                        dataPointShapeFill = props.dataPointShapeFill,
                        color = dataPointShapeFill ||
                        graphic.fill,
                        dataPointShape = props.dataPointShape || {},
                        dataPointShapeType = dataPointShape.type,
                        dataPointShapeValue = dataPointShape.value;

                    if (dataPointShapeType === "svg") {
                        var iconSVG = new Icon(dataPointShapeValue);
                        node = SVG.create("g");
                        scaleNode = SVG.create("g");
                        var svgNode = SVG.create("svg");
                        var pathNode = iconSVG._svgNode.firstChild;
                        while (pathNode) {
                            var sibling = pathNode.nextSibling;
                            scaleNode.appendChild(pathNode);
                            pathNode = sibling;
                        }
                        var imageWidth = iconSVG.getWidth();
                        var imageHeight = iconSVG.getHeight();
                        var scaleRate, pr, svgRect, offset, bbox;

                        if (context.horizontal) {
                            scaleRate = width / imageHeight;
                            scaleNode.setAttribute("transform", " scale(" + scaleRate + "," +
                              scaleRate + ") rotate(90)");
                            node.appendChild(scaleNode);
                            removeAllColorAttributes(scaleNode);
                            if (color) {
                                scaleNode.setAttribute("fill", color);
                            }
                            if (dataPointShapeFill) {
                                context.data.color = dataPointShapeFill;
                            }
                            svgNode.appendChild(node);
                            document.body.appendChild(svgNode);
                            bbox = node.firstChild.getBBox();
                            offset = {
                                x: -bbox.x * scaleRate, 
                                y: bbox.y * scaleRate 
                            };
                            node.appendChild(scaleNode);
                            node.setAttribute("transform", "translate(" + (offset.y + width ) + "," + 
                                (offset.x - imageWidth / 2 * scaleRate + height / 2) + ")");
                        } else {
                            scaleRate = height / imageHeight;
                            scaleNode.setAttribute("transform", "scale(" + scaleRate + "," + scaleRate + ")");
                            node.appendChild(scaleNode);
                            removeAllColorAttributes(node);
                            if (color) {
                                node.setAttribute("fill", color);
                            }
                            if (dataPointShapeFill) {
                                context.data.color = dataPointShapeFill;
                            }
                            svgNode.appendChild(node);
                            document.body.appendChild(svgNode);
                            pr = node.getBoundingClientRect();
                            svgRect = node.firstChild.getBoundingClientRect();
                            bbox = node.firstChild.getBBox();
                            offset = {
                                x: -bbox.x * scaleRate, 
                                y: -bbox.y * scaleRate 
                            };
                            node.setAttribute("transform","translate(" + (offset.x - imageWidth / 2 * scaleRate +
                                width / 2) + "," + offset.y  + ")");
                        }
                        svgNode.parentNode.removeChild(svgNode);
                        iconSVG.destroy();
                    } else {
                        if (!dataPointShapeValue || dataPointShapeValue === "rectangle") {
                            node = SVG.create("rect");
                            node.setAttribute("width", width);
                            node.setAttribute("height", height);
                        } else {
                            node = SVG.create("path");
                            var d = "";
                            pathGens[dataPointShapeValue](width, height,
                                context.horizontal, context.negative).forEach(
                                function(point, index) {
                                    d += (index === 0 ? "M" : "L") + point[0] + " " +
                                        point[1];
                                });
                            d += "Z";

                            node.setAttribute("d", d);
                        }

                        if (dataPointShapeFill) {
                            context.data.color = dataPointShapeFill;
                        }
                        node.setAttribute("fill", color);
                    }

                    return node;
                }
            }

            function stack(configs, context) {
                var props = getPropertiesByCtx(context, configs);

                if (props) {
                    var graphic = context.graphic,
                        node, scaleNode, translateNode, width = graphic.width,
                        height = graphic.height,
                        dataPointShapeFill = props.dataPointShapeFill,
                        color = dataPointShapeFill ||
                        graphic.fill,
                        dataPointShape = props.dataPointShape || {},
                        dataPointShapeType = dataPointShape.type,
                        dataPointShapeValue = dataPointShape.value;

                    if (dataPointShapeType === "svg") {
                        var iconSVG = new Icon(dataPointShapeValue);
                        node = SVG.create("g");
                        scaleNode = SVG.create("g");
                        translateNode = SVG.create("g");
                        var scaleSvgNode = SVG.create("svg");
                        var imageWidth = iconSVG.getWidth();
                        var imageHeight = iconSVG.getHeight();
                        var pathNode = iconSVG._svgNode.firstChild;
                        while (pathNode) {
                            var sibling = pathNode.nextSibling;
                            scaleNode.appendChild(pathNode);
                            pathNode = sibling;
                        }
                        var scaleRate, pr, svgRect, offset, repeatedNum, mask_id, clippath_id, newNode;
                        translateNode.appendChild(scaleNode);
                        if (context.horizontal) {
                            scaleRate = height / imageWidth;
                            scaleSvgNode.appendChild(translateNode);
                            removeAllColorAttributes(scaleNode);
                            document.body.appendChild(scaleSvgNode);
                            offset = {
                                x: - iconSVG.getX() * scaleRate, 
                                y: iconSVG.getY() * scaleRate 
                            };
                            scaleNode.setAttribute("transform", "translate(" + offset.y + "," +
                               offset.x + ") scale(" + scaleRate + "," + scaleRate + ") rotate(90)");
                            var currentImageWidth = scaleNode.getBoundingClientRect().width ;
                            repeatedNum = Math.ceil(width / currentImageWidth);
                            var rectx = 0;
                            if (repeatedNum === 1) {
                                translateNode.setAttribute("transform", "translate(" + currentImageWidth + ", 0)");
                                rectx = width;
                                var rectWidth = currentImageWidth - width;
                                mask_id = drawMask(d3.select(node), width, height + 4, 0, -2, rectx, 
                                  rectWidth, currentImageWidth + 2, generateId(), context.horizontal);
                                node.setAttribute("mask", "url(#" + mask_id + ")");
                                node.appendChild(translateNode);
                            } else {
                                for (var i = 0; i < repeatedNum; i++) {
                                    newNode = scaleNode.cloneNode(true);
                                    translateNode = document.createElementNS('http://www.w3.org/2000/svg', "g");
                                    translateNode.setAttribute("transform", "translate(" +
                                      (currentImageWidth * (i + 1)) + ", 0)");
                                    translateNode.appendChild(newNode);
                                    node.appendChild(translateNode);
                                }
                                clippath_id = drawClipPath(d3.select(node), width, height, 
                                  0, 0, generateId(), context.horizontal);
                                node.setAttribute("clip-path", "url(#" + clippath_id + ")");
                            }
                        } else {
                            scaleRate = width / imageWidth;
                            scaleSvgNode.appendChild(translateNode);
                            removeAllColorAttributes(scaleNode);
                            document.body.appendChild(scaleSvgNode);
                            offset = {
                                x: -iconSVG.getX() * scaleRate, 
                                y: -iconSVG.getY() * scaleRate 
                            };
                            scaleNode.setAttribute("transform", "translate(" + offset.x + "," +
                              offset.y + ") scale(" + scaleRate + "," + scaleRate + ")");
                            var currentImageHeight = scaleNode.getBoundingClientRect().height ;
                            repeatedNum = Math.ceil(height / currentImageHeight);
                            var y = 0;
                            var recty = 0;
                            if (repeatedNum === 1) {
                                translateNode.setAttribute("transform", "translate(0," +
                                  (height - currentImageHeight) + ")");
                                y = height - currentImageHeight;
                                recty = y;
                                var rectHeight = currentImageHeight - height;
                                mask_id = drawMask(d3.select(node), width + 4, height, -2, 0, recty, rectHeight, 
                                  currentImageHeight + 2, generateId(), context.horizontal);
                                node.setAttribute("mask", "url(#" + mask_id + ")");
                                node.appendChild(translateNode);
                            } else {
                                for (var j = 0; j < repeatedNum; j++) {
                                    newNode = scaleNode.cloneNode(true);
                                    translateNode = document.createElementNS('http://www.w3.org/2000/svg', "g");
                                    translateNode.setAttribute("transform", "translate(0," + (height -
                                      currentImageHeight * (j + 1)) + ")");
                                    translateNode.appendChild(newNode);
                                    node.appendChild(translateNode);
                                }
                                clippath_id = drawClipPath(d3.select(node), width, height, 
                                  0, 0, generateId(), context.horizontal);
                                node.setAttribute("clip-path", "url(#" + clippath_id + ")");
                            }
                        }
                        if (color) {
                            node.setAttribute("fill", color);
                        }
                        if (dataPointShapeFill) {
                            context.data.color = dataPointShapeFill;
                        }
                        scaleSvgNode.parentNode.removeChild(scaleSvgNode);
                        iconSVG.destroy();
                    } else {
                        if (!dataPointShapeValue || dataPointShapeValue === "rectangle" || 
                          !pathGens[dataPointShapeValue]) {
                            node = SVG.create("rect");
                            node.setAttribute("width", width);
                            node.setAttribute("height", height);
                        } else {
                            node = SVG.create("path");
                            var d = "";
                            pathGens[dataPointShapeValue](width, height,
                                context.horizontal, context.negative).forEach(
                                function(point, index) {
                                    d += (index === 0 ? "M" : "L") + point[0] + " " +
                                        point[1];
                                });
                            d += "Z";

                            node.setAttribute("d", d);
                        }

                        if (dataPointShapeFill) {
                            context.data.color = dataPointShapeFill;
                        }
                        node.setAttribute("fill", color);
                    }
                    return node;
                }
            }

        return {
            name: 'barShapeRenderer',
            fn: function(configs) {
                return function(context) {
                    var cfg0 = configs[0];
                    if (cfg0 && cfg0.paras && cfg0.paras.dataPointShapeRenderer === "scale") {
                        return scale(configs, context);
                    } else {
                        return stack(configs, context);
                    }
                };
            }
        };
    });
define('sap/viz/controls/plugins/infochart/StackedBarShapeRendererGenerator',
    ["./getPropertiesByCtx", "./SVG", "./Icon", "./shapeHelper"],
    function(getPropertiesByCtx, SVG, Icon, shapeHelper) {
        var pathGens = shapeHelper.pathGens,
            removeAllColorAttributes = shapeHelper.removeAllColorAttributes,
            generateId = shapeHelper.uuid;

        function appendClipPath4Stacked(nodeGroup, rect, id) {
            var dpId = 'clip-path-' + id;
            var dg = d3.select(nodeGroup);
            var cp = dg.attr("clip-path", "url(#" + dpId + ")")
                .append("clipPath")
                .attr({
                id: dpId,
                "class": "v-clippath"
            });
            cp.append("rect").attr(rect);
        }
        
        function drawMask(node, dpRect, maskRect, id, horizontal) {
            var className = 'v-mask';

            if (node.select('.' + className).node() === null) {
                id = 'mask-' + id;
                var mask;
                //set the stroke of mask to 0px to avoid the highlight effect of datapoint
                if (horizontal) {
                    mask = node.insert('mask', ':first-child').attr('class', className).attr('id', id)
                    .attr('width', dpRect.width + maskRect.width).attr('height', dpRect.height);

                    mask.append('rect').attr('x', maskRect.x).attr('y', maskRect.y).attr('width', maskRect.width)
                    .attr('height', maskRect.height).attr('fill', '#202020').attr("fill-opacity", "1")
                    .attr("stroke-width", "0px");

                    mask.append('rect').attr('x', dpRect.x).attr('y', dpRect.y).attr('width', dpRect.width)
                    .attr('height', dpRect.height).attr('fill', '#ffffff').attr("fill-opacity", "1")
                    .attr("stroke-width", "0px");
                } else {
                    mask = node.insert('mask', ':first-child').attr('class', className).attr('id', id)
                    .attr('width', dpRect.width).attr('height', dpRect.height + maskRect.height);

                    mask.append('rect').attr('x', maskRect.x).attr('y', maskRect.y).attr('width', maskRect.width)
                    .attr('height', maskRect.height).attr('fill', '#202020').attr("fill-opacity", "1")
                    .attr("stroke-width", "0px");

                    mask.append('rect').attr('x', dpRect.x).attr('y', dpRect.y).attr('width', dpRect.width)
                    .attr('height', dpRect.height).attr('fill', '#ffffff').attr("fill-opacity", "1")
                    .attr("stroke-width", "0px");
                }
                return id;
            } else {
                if (horizontal) {
                    node.select('.' + className).attr('width', dpRect.width + maskRect.width)
                    .attr('height', dpRect.height);

                    node.select('.' + className).selectAll('rect')[0][0].attr('x', maskRect.x).attr('y', maskRect.y)
                    .attr('width', maskRect.width).attr('height', maskRect.height).attr('fill', '#202020').attr("fill-opacity", "1")
                    .attr("stroke-width", "0px");

                    node.select('.' + className).selectAll('rect')[0][1].attr('x', dpRect.x).attr('y', dpRect.y)
                    .attr('width', dpRect.width).attr('height', dpRect.height).attr('fill', '#ffffff').attr("fill-opacity", "1")
                    .attr("stroke-width", "0px");
                } else {
                    node.select('.' + className).attr('width', dpRect.width)
                    .attr('height', dpRect.height + maskRect.height);

                    node.select('.' + className).selectAll('rect')[0][0].attr('x', maskRect.x).attr('y', maskRect.y)
                    .attr('width', maskRect.width).attr('height', maskRect.height).attr('fill', '#202020').attr("fill-opacity", "1")
                    .attr("stroke-width", "0px");
                    
                    node.select('.' + className).selectAll('rect')[0][1].attr('x', dpRect.x).attr('y', dpRect.y)
                    .attr('width', dpRect.width).attr('height', dpRect.height).attr('fill', '#ffffff').attr("fill-opacity", "1")
                    .attr("stroke-width", "0px");
                }
            }
            return node.select('.' + className).attr('id');
        }

        function scale(configs, context) {
            var props;
            props = getPropertiesByCtx(context, configs);
            if (!props) {
                return;
            }

            var graphic = context.graphic,
                color = props && props.dataPointShapeFill ? props.dataPointShapeFill : graphic.fill,
                stackWidth = graphic.stackWidth,
                stackHeight = graphic.stackHeight,
                horizontal = context.horizontal;
            //draw
            /*
             node-group
             clip-path
             transform-group
             path-tranform
             path
             */
            var pathTransform = document.createElementNS('http://www.w3.org/2000/svg', "g");

            var dataPointShape = props.dataPointShape || {},
                dataPointShapeType = dataPointShape.type,
                dataPointShapeValue = dataPointShape.value;
            var pathNode, iconSVG;

            if (dataPointShapeType === "svg") { //pictogram
                iconSVG = new Icon(dataPointShapeValue);
                pathNode = iconSVG._svgNode.firstChild;
            } else { //shape
                if (!dataPointShapeValue || dataPointShapeValue === "rectangle") {
                    pathNode = SVG.create("rect");
                    pathNode.setAttribute("width", stackWidth);
                    pathNode.setAttribute("height", stackHeight);
                } else {
                    pathNode = SVG.create("path");
                    var d = "";
                    pathGens[dataPointShapeValue](stackWidth, stackHeight,
                        horizontal, context.negative).forEach(
                        function(point, index) {
                            d += (index === 0 ? "M" : "L") + point[0] + " " +
                                point[1];
                        });
                    d += "Z";

                    pathNode.setAttribute("d", d);
                }
            }
            var svgNode = SVG.create("svg");
            while (pathNode) {
                var sibling = pathNode.nextSibling;
                pathTransform.appendChild(pathNode);
                pathNode = sibling;
            }
            svgNode.appendChild(pathTransform);
            document.body.appendChild(svgNode);
            var pbbox = svgNode.getBBox();
            var scaleRate = horizontal ? stackWidth / pbbox.height : stackHeight / pbbox.height;
            function nice(num) {
                return Math.round(num * 1000) / 1000;
            }
            scaleRate = nice(scaleRate);
            var transform = "translate(" + nice(-pbbox.x) + "," + nice(-pbbox.y) + ")";
            if (horizontal) {
                transform = "translate(" + nice(pbbox.height * scaleRate) + ", " +
                    nice(-(pbbox.width * scaleRate - stackHeight) / 2) + ") rotate(90) scale(" +
                    nice(scaleRate) + ") " + transform;
            } else {
                transform = "translate(" + nice(-(pbbox.width * scaleRate - stackWidth) / 2) +
                    ",0) scale(" + nice(scaleRate) + ") " + transform;
            }
            pathTransform.setAttribute("transform", transform);


//            var cpBBox = pathTransform.getBBox();
            var transformGroup = document.createElementNS('http://www.w3.org/2000/svg', "g");
            transformGroup.appendChild(pathTransform);
            removeAllColorAttributes(transformGroup);
            transformGroup.setAttribute("fill", color);
            svgNode.appendChild(transformGroup);
            var cpBBox = transformGroup.getBBox();  

            var nodeGroup = document.createElementNS('http://www.w3.org/2000/svg', "g");
            //append clipPath
            var cpRect;
            if (horizontal) {
                cpRect = {
                    x: graphic.x, // position.x,
                    y: -(cpBBox.height - context.graphic.height) / 2, //y - (cpBBox.height - position.height) / 2,
                    width: graphic.width,
                    height: cpBBox.height
                };
            } else {
                cpRect = {
                    x: -(cpBBox.width - context.graphic.width) / 2, // - context.graphic.width
                    y: graphic.y,
                    width: cpBBox.width,
                    height: graphic.height
                };
            }
            appendClipPath4Stacked(nodeGroup, cpRect, generateId());
            nodeGroup.appendChild(transformGroup);

            svgNode.parentNode.removeChild(svgNode);
            if (iconSVG) {
                iconSVG.destroy();
            }
            return nodeGroup;
        }

        function stack(configs, context) {
            var props = getPropertiesByCtx(context, configs);
            if (!props) {
                return;
            }

            var graphic = context.graphic,
                color = props && props.dataPointShapeFill ? props.dataPointShapeFill : graphic.fill,
                left = 0,
                top = 0,
                width = graphic.stackWidth,
                height = graphic.stackHeight,
                horizontal = context.horizontal;

            var dataPointShape = props.dataPointShape || {},
                dataPointShapeType = dataPointShape.type,
                dataPointShapeValue = dataPointShape.value;
            var pathNode, scaleNode, sibling, translateNode, scaleSvgNode, newNode, nodeGroup;
            var scaleRate, transform, bbox, cpbbox, rect, repeat;

            if (dataPointShapeType === "svg") { //pictogram
                // Create svg node and get its dimension.
                var iconSVG = new Icon(dataPointShapeValue);
                pathNode = iconSVG._svgNode.firstChild;

                scaleNode = SVG.create("g");
                while (pathNode) {
                    sibling = pathNode.nextSibling;
                    scaleNode.appendChild(pathNode);
                    pathNode = sibling;
                }

                translateNode = SVG.create("g");
                scaleSvgNode = SVG.create("svg");
                translateNode.appendChild(scaleNode);
                scaleSvgNode.appendChild(translateNode);
                document.body.appendChild(scaleSvgNode);
                bbox = scaleSvgNode.getBBox();

                // Scale svg node to adapt to the chart.
                scaleRate = horizontal ? height / bbox.width : width / bbox.width;
                if (horizontal) {
                    transform = "translate(" + (bbox.y * scaleRate) + ", -" + (bbox.x * scaleRate) + 
                        ") rotate(90) scale(" + scaleRate + "," + scaleRate + ") ";
                } else {
                    transform = "translate(-" + (bbox.x * scaleRate) + ", -" + (bbox.y * scaleRate) + 
                        ") scale(" + scaleRate + "," + scaleRate + ") ";
                }
                scaleNode.setAttribute("transform", transform);

                // Get scaled svg node's dimension.
                cpbbox = scaleNode.getBoundingClientRect();

                translateNode = SVG.create("g");
                translateNode.appendChild(scaleNode);
                nodeGroup = SVG.create("g");
                
                var needMask = false;
                if (horizontal) {
                    needMask = ((graphic.x + graphic.width - left) === width) && (width < cpbbox.width);
                } else {
                    needMask = (graphic.y === top) && (height < cpbbox.height);
                }

                if (needMask) {
                    // Add mask for svg node when whole stacked bar's size is shorter than the image size.
                    var maskNode = SVG.create("g");
                    var dpRect, maskRect, maskId;                    
                    if (horizontal) {
                        translateNode.setAttribute("transform", "translate(" + (left + cpbbox.width) + ", " + graphic.y + ' )');

                        dpRect = {width: graphic.width, height: cpbbox.height + 4, x: graphic.x, y: graphic.y - 2};
                        maskRect = {width: cpbbox.width - width, height: cpbbox.height + 4, x: left + width, y: graphic.y - 2};
                        maskId = drawMask(d3.select(maskNode), dpRect, maskRect, generateId(), horizontal);

                        maskNode.setAttribute("mask", "url(#" + maskId + ")");
                    } else {
                        translateNode.setAttribute("transform", "translate(" + graphic.x + ', ' + (top + height - cpbbox.height) + ")");
                        
                        dpRect = {width: cpbbox.width + 4, height: graphic.height, x: graphic.x - 2, y: graphic.y};
                        maskRect = {width: cpbbox.width + 4, height: cpbbox.height - height, x: graphic.x - 2, y: height - cpbbox.height};
                        maskId = drawMask(d3.select(maskNode), dpRect, maskRect, generateId(), horizontal);

                        maskNode.setAttribute("mask", "url(#" + maskId + ")");
                    }

                    maskNode.appendChild(translateNode);
                    maskNode.setAttribute("fill", color);
                    nodeGroup.appendChild(maskNode);

                    // Add clip path.
                    if (horizontal) {
                        rect = {x: graphic.x, y: graphic.y, width: graphic.width + cpbbox.width - width, height: cpbbox.height};
                    } else {
                        rect = {x: graphic.x, y: height - cpbbox.height, width: cpbbox.width, height: graphic.height + cpbbox.height - height};
                    }

                    appendClipPath4Stacked(nodeGroup, rect, generateId());
                } else {
                    // Repeat n times of svg image.
                    if (horizontal) {
                        repeat = Math.ceil((graphic.x - left + graphic.width) / cpbbox.width) - 
                            Math.floor((graphic.x - left) / cpbbox.width);
                    } else {
                        repeat = Math.ceil((top + height - graphic.y) / cpbbox.height) - 
                            Math.floor((top + height - graphic.y - graphic.height) / cpbbox.height);
                    }

                    // Clone scaled svg node, and transform it to desired position.
                    for (var j = 0; j < repeat; j++) {
                        newNode = scaleNode.cloneNode(true);
                        removeAllColorAttributes(newNode);
                        newNode.setAttribute("fill", color);
                        translateNode = SVG.create("g");

                        if (horizontal) {
                            transform = left + Math.floor((graphic.x - left) / cpbbox.width) * cpbbox.width + 
                                cpbbox.width * (j + 1);
                            translateNode.setAttribute("transform", "translate(" + transform + ", " + graphic.y + 
                                ' )');
                        } else {
                            transform = top + height - Math.ceil((top + height - graphic.y) / cpbbox.height) * 
                                cpbbox.height + (repeat - j - 1) * cpbbox.height;
                            translateNode.setAttribute("transform", "translate(" + graphic.x + ', ' + transform + 
                                ")");
                        }
                        translateNode.appendChild(newNode);
                        nodeGroup.appendChild(translateNode);    
                    }

                    // Add clip path.
                    rect = {
                        x: graphic.x,
                        y: graphic.y,
                        width: horizontal ? graphic.width : cpbbox.width,
                        height: horizontal ? cpbbox.height : graphic.height
                    };

                    appendClipPath4Stacked(nodeGroup, rect, generateId());
                }

                scaleSvgNode.parentNode.removeChild(scaleSvgNode);
                iconSVG.destroy();
            } else {
                if (!dataPointShapeValue || dataPointShapeValue === "rectangle") {
                    pathNode = SVG.create("rect");
                    pathNode.setAttribute("width", width);
                    pathNode.setAttribute("height", height);
                } else {
                    pathNode = SVG.create("path");
                    var d = "";
                    pathGens[dataPointShapeValue](width, height,
                        horizontal, context.negative).forEach(
                        function(point, index) {
                            d += (index === 0 ? "M" : "L") + point[0] + " " +
                                point[1];
                        });
                    d += "Z";

                    pathNode.setAttribute("d", d);
                }

                scaleNode = SVG.create("g");
                while (pathNode) {
                    sibling = pathNode.nextSibling;
                    scaleNode.appendChild(pathNode);
                    pathNode = sibling;
                }
                scaleNode.setAttribute("fill", color);

                nodeGroup = SVG.create("g");
                nodeGroup.appendChild(scaleNode);

                // Add clip path.
                rect = {
                    x: graphic.x,
                    y: graphic.y,
                    width: graphic.width,
                    height: graphic.height
                };

                appendClipPath4Stacked(nodeGroup, rect, generateId());
            }

            return nodeGroup;
        }

        return {
            name: 'stackedBarShapeRenderer',
            fn: function(configs) {
                return function(context) {
                    var cfg0 = configs[0];
                    if (cfg0 && cfg0.paras && cfg0.paras.dataPointShapeRenderer === "scale") {
                        return scale(configs, context);
                    } else {
                        return stack(configs, context);
                    }
                };
            }
        };
    });
// @formatter:off
define('sap/viz/controls/plugins/infochart/CategoryAxisLabelRendererGenerator',[
    './getPropertiesByCtx',
    './SVG',
    './Icon'
], function(getPropertiesByCtx, SVG, Icon) {
// @formatter:on

    var PADDING = 5;
    var IMAGE_TEXT_GAP = 3;
    var DEFAULT_IMAGE_RATIO = 0.5;

    return {
        name : "categoryAxisLabelRenderer",
        fn : function(configs) {
            var categoryAxisLabelRenderer = function(context) {
                var props = getPropertiesByCtx(context, configs);

                if (props) {
                    var position = context.position;
                    var isLeft = position === "left";

                    var cellWidth = context.size.width;
                    var cellHeight = context.size.height;

                    var restWidth = cellWidth, restHeight = cellHeight;
                    if (isLeft) {
                        restWidth -= PADDING;
                    } else {
                        restHeight -= PADDING;
                    }

                    if (restWidth <= 0 || restHeight <= 0) {
                        return null;
                    }

                    var group = SVG.create("g");

                    var translateX, translateY;

                    // Store image prefer height value for text rotation usage.
                    var imageHeightOffset = 0;

                    if (props.iconVisible === true && props.iconSVG) {
                        var ratio = props.iconSize;
                        if (ratio === undefined) {
                            ratio = DEFAULT_IMAGE_RATIO;
                        }

                        if (ratio > 0) {
                            var iconSVG = new Icon(props.iconSVG);
                            var imageWidth = iconSVG.getWidth();
                            var imageHeight = iconSVG.getHeight();
                            var preferImageWidth, preferImageHeight;
                            if (isLeft) {
                                preferImageWidth = preferImageHeight = Math.min(cellHeight * ratio, restWidth);
                            } else {
                                preferImageWidth = preferImageHeight = Math.min(cellWidth * ratio, restHeight);
                            }
                            var scale = Math.min(preferImageWidth / imageWidth, preferImageHeight / imageHeight);
                            var imageGroup = SVG.create("g", group);

                            iconSVG.render(imageGroup, scale, props.iconColor);
                            iconSVG.destroy();

                            var imageX = iconSVG.getX() * scale;
                            var imageY = iconSVG.getY() * scale;

                            if (isLeft) {
                                translateX = restWidth - preferImageWidth - imageX;
                                translateY = restHeight / 2 - preferImageHeight / 2 - imageY;
                                restWidth -= preferImageWidth + IMAGE_TEXT_GAP;
                            } else {
                                translateX = restWidth / 2 - preferImageWidth / 2 - imageX;
                                translateY = PADDING - imageY;
                                restHeight -= preferImageHeight + IMAGE_TEXT_GAP;
                                // For text rotation usage.
                                imageHeightOffset = preferImageHeight + IMAGE_TEXT_GAP;
                            }

                            imageGroup.setAttribute("transform", "translate(" + translateX + " " + translateY + ")");
                        }
                    }

                    if (restWidth > 0 && restHeight > 0) {
                        if (props.textVisible !== false) {
                            // Note: The case to be rotated: horizontal axis.
                            var isRotated = !isLeft && context.rotated === true;

                            var textMaxWidth, textMaxHeight;
                            if (isRotated) {
                                textMaxWidth = isLeft ? undefined : restHeight;
                                textMaxHeight = restWidth;
                            } else {
                                textMaxWidth = restWidth;
                                textMaxHeight = isLeft ? undefined : restHeight;
                            }

                            var styles = context.styles;
                            var textNodeRet = SVG.createTextNode(context.text, {
                                "font-family" : props.fontFamily || styles["fontFamily"],
                                "font-size" : props.fontSize || styles["fontSize"],
                                "font-weight" : props.fontWeight || styles["fontWeight"],
                                "font-style" : props.fontStyle || styles["fontStyle"],
                                "fill" : props.fontColor || styles["fill"]
                            }, true, textMaxWidth, textMaxHeight);

                            if (textNodeRet) {
                                var measure = textNodeRet.measure;
                                if (isRotated) {
                                    // Set some static values according to CVOM default renderer implementation.
                                    var fontSize = props.fontSize || styles['fontSize'];
                                    var labelHeight = parseFloat(fontSize) * 1.2;
                                    var offset = 3;
                                    var labelOffset = 6;
                                    translateX = restWidth / 2 + labelHeight / 2 - offset;
                                    translateY = labelOffset;
                                } else {
                                    if (isLeft) {
                                        translateX = restWidth - measure.width - measure.x;
                                        translateY = restHeight / 2 - measure.height / 2 - measure.y;
                                        if (context.childCells && context.childCells.length > 1) {
                                            translateY -= context.childCells[0].cellHeight / 2;
                                        }
                                    } else {
                                        translateX = restWidth / 2 - measure.width / 2 - measure.x;
                                        translateY = cellHeight - restHeight - measure.y;
                                    }
                                }

                                var textNode = textNodeRet.node;
                                if (isRotated) {
                                    translateY += imageHeightOffset;
                                    textNode.setAttribute('x', translateX);
                                    textNode.setAttribute('y', translateY);
                                    textNode.setAttribute('text-anchor', 'end');
                                    textNode.setAttribute('transform', 'rotate(-90,' + translateX + ',' + translateY + ')');
                                } else {
                                    textNode.setAttribute("transform", "translate(" + translateX + " " + translateY + ")");
                                }

                                group.appendChild(textNode);
                            }
                        }
                    }

                    return group;
                }

            };

            categoryAxisLabelRenderer.getPreferredSize = function(context) {
                var textSize;
                var props = getPropertiesByCtx(context, configs);
                if (!props) {
                    return;
                }

                var cssString = categoryAxisLabelRenderer._buildCssString(context.styles, props);

                var isRotated = context.rotated;

                if (props.iconVisible === true) {
                    if (!props.iconSVG) {
                        return;
                    }
                } else {
                    if (props.textVisible === false) {
                        return {
                            cellWidth : 0,
                            cellHeight : 0
                        };
                    } else {
                        textSize = SVG.measureText(context.text, cssString);
                        if (context.position === 'left') {
                            return {
                                cellWidth : textSize.width + PADDING,
                                cellHeight : textSize.height
                            };
                        } else {
                            if (textSize.width > context.size) {
                                isRotated = true;
                                return {
                                    cellWidth : textSize.height + PADDING,
                                    cellHeight : textSize.width,
                                    rotated : true
                                };
                            } else {
                                return {
                                    cellWidth : textSize.width,
                                    cellHeight : textSize.height + PADDING
                                };
                            }
                        }
                    }
                }

                var cellWidth = PADDING;
                var cellHeight = PADDING;
                var ratio = props.iconSize;
                if (ratio === undefined) {
                    ratio = DEFAULT_IMAGE_RATIO;
                }

                if (ratio <= 0) {
                    return;
                }

                if (context.position === "top" || context.position === "bottom") {
                    cellWidth = context.size;
                    cellHeight += context.size * ratio;
                    if (props.textVisible !== false) {
                        textSize = SVG.measureText(context.text, cssString);
                        if (textSize.width > context.size) {
                            isRotated = true;
                            cellHeight += IMAGE_TEXT_GAP + textSize.width;
                        } else {
                            cellHeight += IMAGE_TEXT_GAP + textSize.height;
                        }
                    }
                } else {
                    cellHeight = context.size;
                    cellWidth += context.size * ratio;
                    if (props.textVisible !== false) {
                        textSize = SVG.measureText(context.text, cssString);
                        cellWidth += IMAGE_TEXT_GAP + textSize.width;
                    }
                }

                return {
                    cellWidth : cellWidth,
                    cellHeight : cellHeight,
                    rotated : isRotated
                };
            };

            categoryAxisLabelRenderer._buildCssString = function(styles, props) {
                var cssString = '';
                cssString += 'fill:' + (props.fontColor || styles['fill']) + ';';
                cssString += 'font-family:' + (props.fontFamily || styles['fontFamily']) + ';';
                cssString += 'font-size:' + (props.fontSize || styles['fontSize']) + ';';
                cssString += 'font-style:' + (props.fontStyle || styles['fontStyle']) + ';';
                cssString += 'font-weight:' + (props.fontWeight || styles['fontWeight']) + ';';

                return cssString;
            };

            categoryAxisLabelRenderer.autoHide = function() {
                return true;
            };

            return categoryAxisLabelRenderer;
        }
    };
});

define('sap/viz/controls/plugins/infochart/PieSliceRendererGenerator',["./getPropertiesByCtx", "./SVG"],
  function(getPropertiesByCtx, SVG) {
    return {
      name: "pieSliceRenderer",
      fn: function(configs) {
        return function(context, defaultRenderer) {
          var props = getPropertiesByCtx(context, configs);
          if (props && props.sliceShapeFill){
            context.graphic.color = props.sliceShapeFill;
          }
          return defaultRenderer(context);
        };
      }
    };
  });
define('sap/viz/controls/plugins/infochart/DataLabelRendererGenerator',[ "./getPropertiesByCtx", "./SVG", "./Icon" ], function(
    getPropertiesByCtx, SVG, Icon) {
  var IMAGE_TEXT_GAP = 5, IMAGE_RATIO = 0.8;

  return {
    name : "dataLabelRenderer",
    fn : function(configs) {
      return function(context) {
        var props = getPropertiesByCtx(context, configs);

        if (props) {

          var group = SVG.create("g");

          var textNode, textContent;

          if (props.textVisible !== false) {

            textContent = context.text;

            textNode = SVG.create("text", group);
            textNode.textContent = textContent;

            var style = "", styleValue;
            if ((styleValue = props.fontColor)) {
              style += "fill:" + styleValue + ";";
            }
            if ((styleValue = props.fontFamily)) {
              style += "font-family:" + styleValue + ";";
            }
            if ((styleValue = props.fontSize)) {
              style += "font-size:" + styleValue + ";";
            }
            if ((styleValue = props.fontWeight)) {
              style += "font-weight:" + styleValue + ";";
            }
            if ((styleValue = props.fontStyle)) {
              style += "font-style:" + styleValue + ";";
            }
            if (style) {
              textNode.setAttribute("style", style);
            }
          }

          if (props.iconVisible === true && props.iconSVG) {
            var iconSize = props.iconSize;
            if (iconSize !== 0) {
              iconSize = iconSize || IMAGE_RATIO;

              var iconSVG = new Icon(props.iconSVG);
              var imageGroup = SVG.create("g", group);

              var imageWidth = iconSVG.getWidth();
              var imageHeight = iconSVG.getHeight();

              var horizontal = context.horizontal;

              var originalSize = horizontal ? imageHeight : imageWidth;
              var dataPointSize = context[horizontal ? "dataPointHeight"
                  : "dataPointWidth"];

              if (dataPointSize === 0) {
                  iconSVG.destroy();
                  return group;
              }

              var scale = dataPointSize * iconSize / originalSize;
              iconSVG.render(imageGroup, scale, props.iconColor);
              iconSVG.destroy();

              if (textNode) {
                var styles = context.styles;
                var measure = SVG.measureText(textContent, {
                  "font-family" : props.fontFamily || styles["font-family"],
                  "font-size" : props.fontSize || styles["font-size"],
                  "font-weight" : props.fontWeight || styles["font-weight"],
                  "font-style" : props.fontStyle || styles["font-style"]
                });

                imageWidth *= scale;
                imageHeight *= scale;

                var imageX = iconSVG.getX() * scale;
                var imageY = iconSVG.getY() * scale;

                var translateX, translateY;
                if (horizontal) {
                  translateX = measure.x + measure.width + IMAGE_TEXT_GAP -
                      imageX;
                  translateY = measure.y + measure.height / 2 - imageY -
                      imageHeight / 2;
                } else {
                  translateX = measure.x + measure.width / 2 - imageX -
                      imageWidth / 2;
                  translateY = measure.y - IMAGE_TEXT_GAP - imageY -
                      imageHeight;
                }

                imageGroup.setAttribute("transform", "translate(" + translateX +
                    "," + translateY + ")");
              }
            }
          }

          return group;
        }

      };
    }
  };
});

define('sap/viz/controls/plugins/infochart/LineMarkerRendererGenerator',[ "./getPropertiesByCtx", "./SVG", "./Icon" ], function(
    getPropertiesByCtx, SVG, Icon) {
  return {
    name : "lineMarkerRenderer",
    fn : function(configs) {
      return function(context) {
        var props = getPropertiesByCtx(context, configs);

        if (props) {
          var graphic = context.graphic, iconSVG = props.iconSVG;
          if (iconSVG) {
            var iconSize = props.iconSize;
            if (iconSize === 0) {
              return null;
            }
            iconSize = props.iconSize; /* Math.min(props.iconSize, context.bandLength,
                context.plotSize[context.horizontal ? 0 : 1]);*/

            iconSVG = new Icon(iconSVG);
            var imageGroup = SVG.create("g");

            var imageWidth = iconSVG.getWidth();
            var imageHeight = iconSVG.getHeight();
            var xScale = iconSize / imageWidth;
            var yScale = iconSize / imageHeight;
            iconSVG.render(imageGroup, [ xScale, yScale ], props.iconColor|| graphic.fill);
            iconSVG.destroy();

            imageGroup.setAttribute("transform", "translate(" +
                (-iconSVG.getX() * xScale - iconSize / 2) + "," +
                (-iconSVG.getY() * yScale - iconSize / 2) + ")");

            return imageGroup;
          }
        }
      };
    }
  };
});

define('sap/viz/controls/plugins/infochart/LineRendererGenerator',[ "./getPropertiesByCtx" ], function(getPropertiesByCtx) {

  return {
    name : "lineRenderer",
    fn : function(configs) {
      return function(context) {
        var props = getPropertiesByCtx(context, configs);

        if (props) {
          var graphic = context.graphic;
          graphic.color = props.color || graphic.color;
          graphic.width = props.width || graphic.width;
          graphic.dash = props.dash || graphic.dash;
        }
      };
    }
  };
});

define('sap/viz/controls/plugins/infochart/ScatterMarkerGenerator',[ "./getPropertiesByCtx", "./SVG", "./Icon" ],function(getPropertiesByCtx, SVG, Icon) {
    return {
        name : "scatterMarkerRenderer",
        fn : function(configs) {
            return function(context) {
                var props = getPropertiesByCtx(context, configs);
                var shape = context.graphic.shape;
                var stroke = context.graphic.borderColor;
                if (props) {
                    var graphic = context.graphic, 
                        iconSVG = (props.iconSVG[shape] === undefined) ? props.iconSVG : props.iconSVG[shape];
                    if (iconSVG) {
                        var iconSize = props.iconSize;
                        if (iconSize === 0) {
                            return null;
                        }
                        iconSVG = new Icon(iconSVG);
                        var marker = SVG.create("g");
                        var imageWidth = iconSVG.getWidth();
                        var imageHeight = iconSVG.getHeight();
                        var xScale = iconSize / imageWidth;
                        var yScale = iconSize / imageHeight;
                        iconSVG.render(marker, [ xScale, yScale ], props.iconColor|| graphic.fill);
                        iconSVG.destroy();
                        marker.setAttribute("transform", "translate(" +
                                (-imageWidth / 2 - iconSVG.getX()) * xScale + "," +
                                (-imageHeight / 2 - iconSVG.getY()) * yScale + ")");
                        marker.setAttribute("stroke", stroke);
                        marker.setAttribute("stroke-width", 1/xScale + "px");
                        return marker;
                    }
                }
            };
        }
    };
});

define('sap/viz/controls/plugins/infochart/BubbleMarkerGenerator',[ "./getPropertiesByCtx", "./SVG", "./Icon" ],function(getPropertiesByCtx, SVG, Icon) {
    return {
        name : "bubbleMarkerRenderer",
        fn : function(configs) {
            return function(context) {
                var props = getPropertiesByCtx(context, configs);
                var shape = context.graphic.shape;
                var stroke = context.graphic.borderColor;
                var width = context.graphic.width;
                var height = context.graphic.height;
                if (props) {
                    var graphic = context.graphic, 
                        iconSVG = (props.iconSVG[shape] === undefined) ? props.iconSVG : props.iconSVG[shape];
                    if (iconSVG) {
                        iconSVG = new Icon(iconSVG);
                        var marker = SVG.create("g");
                        var imageWidth = iconSVG.getWidth();
                        var imageHeight = iconSVG.getHeight();
                        var xScale = width / imageWidth;
                        var yScale = height / imageHeight;
                        iconSVG.render(marker, [ xScale, yScale ], props.iconColor|| graphic.fill);
                        iconSVG.destroy();
                        marker.setAttribute("transform", "translate(" +
                                (-imageWidth / 2 - iconSVG.getX()) * xScale + "," +
                                (-imageHeight / 2 - iconSVG.getY()) * yScale + ")");
                        marker.setAttribute("stroke", stroke);
                        marker.setAttribute("stroke-width", 1/xScale + "px");
                        return marker;
                    }
                }
            };
        }
    };
});

define('sap/viz/controls/plugins/infochart/CombinationDataPointRendererGenerator',[ "./getPropertiesByCtx", "./SVG", "./Icon" ], function(
    getPropertiesByCtx, SVG, Icon) {
  var ARROW_LENGTH = 50;

        function triangle(width, height, isHorizontal, negative) {
            var points;
            if (negative) {
                points = [
                    [width, 0]
                ];
                if (isHorizontal) {
                    points.push([0, height / 2], [width, height]);
                } else {
                    points.push([0, 0], [width / 2, height]);
                }
            } else {
                points = [
                    [0, height]
                ];
                if (isHorizontal) {
                    points.push([0, 0], [width, height / 2]);
                } else {
                    points.push([width / 2, 0], [width, height]);
                }
            }
            return points;
        }

        var pathGens = {
            "pike": function(width, height, isHorizontal, negative) {
                var points = triangle(width, height, isHorizontal, negative);
                if (negative) {
                    if (isHorizontal) {
                        if (width > ARROW_LENGTH) {
                            points.splice(1, 0, [ARROW_LENGTH, 0]);
                            points.splice(3, 0, [ARROW_LENGTH, height]);
                        }
                    } else {
                        if (height > ARROW_LENGTH) {
                            points.splice(2, 0, [0, height - ARROW_LENGTH]);
                            points.splice(4, 0, [width, height - ARROW_LENGTH]);
                        }
                    }
                } else {
                    if (isHorizontal) {
                        if (width > ARROW_LENGTH) {
                            points.splice(2, 0, [width - ARROW_LENGTH, 0]);
                            points.splice(4, 0, [width - ARROW_LENGTH, height]);
                        }
                    } else {
                        if (height > ARROW_LENGTH) {
                            points.splice(1, 0, [0, ARROW_LENGTH]);
                            points.splice(3, 0, [width, ARROW_LENGTH]);
                        }
                    }
                }

                return points;
            },
            "triangle": triangle,
            "trapezoid": function(width, height, isHorizontal, negative) {
                var points;
                if (negative) {
                    points = [
                        [width, 0]
                    ];
                    if (isHorizontal) {
                        if (width > ARROW_LENGTH) {
                            points.push([ARROW_LENGTH, 0]);
                        }
                        points.push([0, height]);
                    } else {
                        points.push([0, 0]);
                        if (height > ARROW_LENGTH) {
                            points.push([0, height - ARROW_LENGTH]);
                        }
                    }
                } else {
                    points = [
                        [0, height]
                    ];
                    if (isHorizontal) {
                        points.push([0, 0]);
                        if (width > ARROW_LENGTH) {
                            points.push([width - ARROW_LENGTH, 0]);
                        }
                        points.push([width, height]);
                    } else {
                        if (height > ARROW_LENGTH) {
                            points.push([0, ARROW_LENGTH]);
                        }
                        points.push([width, 0]);
                    }
                }
                points.push([width, height]);
                return points;
            }
        };

        function drawMask(selection, width, height, x, y, rxy, rectHW, imageHW, id, isHorizontal) {
            var className = 'v-mask';
            if (width < 0) {
                width = 0;
            }
            if (height < 0) {
                height = 0;
            }
            if (selection.select('.' + className).node() === null) {
                id = 'mask-' + id;
                var mask;
                //set the stroke of mask to 0px to avoid the highlight effect of datapoint
                if (isHorizontal) {
                    mask = selection.insert('mask', ':first-child').attr('class', className).attr('id', id)
                    .attr('width', imageHW).attr('height', height).attr('x', x).attr('y', y);
                    mask.append('rect').attr('x', rxy).attr('y', y).attr('width', rectHW)
                    .attr('height', height).attr('fill', '#202020').attr("fill-opacity", "1")
                    .attr("stroke-width", "0px");
                    mask.append('rect').attr('x', y).attr('y', y).attr('width', width)
                    .attr('height', height).attr('fill', '#ffffff').attr("fill-opacity", "1")
                    .attr("stroke-width", "0px");
                } else {
                    mask = selection.insert('mask', ':first-child').attr('class', className).attr('id', id)
                    .attr('width', width).attr('height', imageHW).attr('x', x).attr('y', y);
                    mask.append('rect').attr('x', x).attr('y', rxy).attr('width', width)
                    .attr('height', rectHW).attr('fill', '#202020').attr("fill-opacity", "1")
                    .attr("stroke-width", "0px");
                    mask.append('rect').attr('x', x).attr('y', y).attr('width', width)
                    .attr('height', height).attr('fill', '#ffffff').attr("fill-opacity", "1")
                    .attr("stroke-width", "0px");
                }
                return id;
            } else {
                if (isHorizontal) {
                    selection.select('.' + className).attr('width', imageHW)
                    .attr('height', height).attr('x', x).attr('y', y);
                    selection.select('.' + className).selectAll('rect')[0][0].attr('x', rxy).attr('y', y)
                    .attr('width', rectHW).attr('height', height).attr('fill', '#202020').attr("fill-opacity", "1")
                    .attr("stroke-width", "0px");
                    selection.select('.' + className).selectAll('rect')[0][1].attr('x', 0).attr('y', y)
                    .attr('width', width).attr('height', height).attr('fill', '#ffffff').attr("fill-opacity", "1")
                    .attr("stroke-width", "0px");
                } else {
                    selection.select('.' + className).attr('width', width)
                    .attr('height', imageHW).attr('x', x).attr('y', y);
                    selection.select('.' + className).selectAll('rect')[0][0].attr('x', x).attr('y', rxy)
                    .attr('width', width).attr('height', rectHW).attr('fill', '#202020').attr("fill-opacity", "1")
                    .attr("stroke-width", "0px");
                    selection.select('.' + className).selectAll('rect')[0][1].attr('x', x).attr('y', 0)
                    .attr('width', width).attr('height', height).attr('fill', '#ffffff').attr("fill-opacity", "1")
                    .attr("stroke-width", "0px");
                }
            }
            return selection.select('.' + className).attr('id');
        }

        function drawClipPath(selection, width, height, x, y, id, isHorizontal) {
            var className = 'v-clippath';
            if (width < 0) {
                width = 0;
            }
            if (height < 0) {
                height = 0;
            }
            if (selection.select('.' + className).node() === null) {
                id = 'clip-path-' + id;
                var clipath;
                if (isHorizontal) {
                    clipath = selection.insert('clipPath', ':first-child').attr('class', className).attr('id', id);
                    clipath.append('rect').attr('x', x).attr('y', y - 1)
                    .attr('width', width).attr('height', height + 2);
                } else {
                    clipath = selection.insert('clipPath', ':first-child').attr('class', className).attr('id', id);
                    clipath.append('rect').attr('x', x - 1).attr('y', y)
                    .attr('width', width + 2).attr('height', height);
                }
                return id;
            } else {
                if (isHorizontal) {
                    selection.select('.' + className).select('rect')
                    .attr('width', width).attr('height', height + 2).attr('x', x).attr('y', y - 1);
                } else {
                    selection.select('.' + className).select('rect')
                    .attr('width', width + 2).attr('height', height).attr('x', x - 1).attr('y', y);
                }
                return selection.select('.' + className).attr('id');
            }
        }

        function generateId() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random() * 16 | 0,
                    v = c == 'x' ? r : r & 0x3 | 0x8;
                return v.toString(16);
            });
        }

        function removeAllColorAttributes(rootNode) {
            var childNodes = rootNode.childNodes;
            for (var i = 0; i < childNodes.length; i++) {
                if (childNodes[i].nodeType !== 1) {
                    continue;
                }
                if (childNodes[i].getAttribute("fill")) {
                    childNodes[i].removeAttribute("fill");
                }
                if (childNodes[i].getAttribute("stroke")) {
                    childNodes[i].removeAttribute("stroke");
                }
                if (childNodes[i].getAttribute("stroke-width")) {
                    childNodes[i].removeAttribute("stroke-width");
                }
                removeAllColorAttributes(childNodes[i]);
            }
        }

            function scale(configs, context) {
                var props = getPropertiesByCtx(context, configs);
                if (props) {
                    var graphic = context.graphic,
                        node, scaleNode, width = graphic.width,
                        height = graphic.height,
                        dataPointShapeFill = props.dataPointShapeFill,
                        color = dataPointShapeFill ||
                        graphic.fill,
                        dataPointShape = props.dataPointShape || {},
                        dataPointShapeType = dataPointShape.type,
                        dataPointShapeValue = dataPointShape.value;

                    if (dataPointShapeType === "svg") {
                        var iconSVG = new Icon(dataPointShapeValue);
                        node = SVG.create("g");
                        scaleNode = SVG.create("g");
                        var svgNode = SVG.create("svg");
                        var pathNode = iconSVG._svgNode.firstChild;
                        while (pathNode) {
                            var sibling = pathNode.nextSibling;
                            scaleNode.appendChild(pathNode);
                            pathNode = sibling;
                        }
                        var imageWidth = iconSVG.getWidth();
                        var imageHeight = iconSVG.getHeight();
                        var scaleRate, pr, svgRect, offset, bbox;

                        if (context.horizontal) {
                            scaleRate = width / imageHeight;
                            scaleNode.setAttribute("transform", " scale(" + scaleRate + "," +
                              scaleRate + ") rotate(90)");
                            node.appendChild(scaleNode);
                            removeAllColorAttributes(scaleNode);
                            if (color) {
                                scaleNode.setAttribute("fill", color);
                            }
                            if (dataPointShapeFill) {
                                context.data.color = dataPointShapeFill;
                            }
                            svgNode.appendChild(node);
                            document.body.appendChild(svgNode);
                            bbox = node.firstChild.getBBox();
                            offset = {
                                x: -bbox.x * scaleRate, 
                                y: bbox.y * scaleRate 
                            };
                            node.appendChild(scaleNode);
                            node.setAttribute("transform", "translate(" + (offset.y + width ) + "," + 
                                (offset.x - imageWidth / 2 * scaleRate + height / 2) + ")");
                        } else {
                            scaleRate = height / imageHeight;
                            scaleNode.setAttribute("transform", "scale(" + scaleRate + "," + scaleRate + ")");
                            node.appendChild(scaleNode);
                            removeAllColorAttributes(node);
                            if (color) {
                                node.setAttribute("fill", color);
                            }
                            if (dataPointShapeFill) {
                                context.data.color = dataPointShapeFill;
                            }
                            svgNode.appendChild(node);
                            document.body.appendChild(svgNode);
                            pr = node.getBoundingClientRect();
                            svgRect = node.firstChild.getBoundingClientRect();
                            bbox = node.firstChild.getBBox();
                            offset = {
                                x: -bbox.x * scaleRate, 
                                y: -bbox.y * scaleRate 
                            };
                            node.setAttribute("transform","translate(" + (offset.x - imageWidth / 2 * scaleRate +
                                width / 2) + "," + offset.y  + ")");
                        }
                        svgNode.parentNode.removeChild(svgNode);
                        iconSVG.destroy();
                    } else {
                        if (!dataPointShapeValue || dataPointShapeValue === "rectangle") {
                            node = SVG.create("rect");
                            node.setAttribute("width", width);
                            node.setAttribute("height", height);
                        } else {
                            node = SVG.create("path");
                            var d = "";
                            pathGens[dataPointShapeValue](width, height,
                                context.horizontal, context.negative).forEach(
                                function(point, index) {
                                    d += (index === 0 ? "M" : "L") + point[0] + " " +
                                        point[1];
                                });
                            d += "Z";

                            node.setAttribute("d", d);
                        }

                        if (dataPointShapeFill) {
                            context.data.color = dataPointShapeFill;
                        }
                        node.setAttribute("fill", color);
                    }

                    return node;
                }
            }

            function stack(configs, context) {
                var props = getPropertiesByCtx(context, configs);

                if (props) {
                    var graphic = context.graphic,
                        node, scaleNode, translateNode, width = graphic.width,
                        height = graphic.height,
                        dataPointShapeFill = props.dataPointShapeFill,
                        color = dataPointShapeFill ||
                        graphic.fill,
                        dataPointShape = props.dataPointShape || {},
                        dataPointShapeType = dataPointShape.type,
                        dataPointShapeValue = dataPointShape.value;

                    if (dataPointShapeType === "svg") {
                        var iconSVG = new Icon(dataPointShapeValue);
                        node = SVG.create("g");
                        scaleNode = SVG.create("g");
                        translateNode = SVG.create("g");
                        var scaleSvgNode = SVG.create("svg");
                        var imageWidth = iconSVG.getWidth();
                        var imageHeight = iconSVG.getHeight();
                        var pathNode = iconSVG._svgNode.firstChild;
                        while (pathNode) {
                            var sibling = pathNode.nextSibling;
                            scaleNode.appendChild(pathNode);
                            pathNode = sibling;
                        }
                        var scaleRate, pr, svgRect, offset, repeatedNum, mask_id, clippath_id, newNode;
                        translateNode.appendChild(scaleNode);
                        if (context.horizontal) {
                            scaleRate = height / imageWidth;
                            scaleSvgNode.appendChild(translateNode);
                            removeAllColorAttributes(scaleNode);
                            document.body.appendChild(scaleSvgNode);
                            offset = {
                                x: - iconSVG.getX() * scaleRate, 
                                y: iconSVG.getY() * scaleRate 
                            };
                            scaleNode.setAttribute("transform", "translate(" + offset.y + "," +
                               offset.x + ") scale(" + scaleRate + "," + scaleRate + ") rotate(90)");
                            var currentImageWidth = scaleNode.getBoundingClientRect().width ;
                            repeatedNum = Math.ceil(width / currentImageWidth);
                            var rectx = 0;
                            if (repeatedNum === 1) {
                                translateNode.setAttribute("transform", "translate(" + currentImageWidth + ", 0)");
                                rectx = width;
                                var rectWidth = currentImageWidth - width;
                                mask_id = drawMask(d3.select(node), width, height + 4, 0, -2, rectx, 
                                  rectWidth, currentImageWidth + 2, generateId(), context.horizontal);
                                node.setAttribute("mask", "url(#" + mask_id + ")");
                                node.appendChild(translateNode);
                            } else {
                                for (var i = 0; i < repeatedNum; i++) {
                                    newNode = scaleNode.cloneNode(true);
                                    translateNode = document.createElementNS('http://www.w3.org/2000/svg', "g");
                                    translateNode.setAttribute("transform", "translate(" +
                                      (currentImageWidth * (i + 1)) + ", 0)");
                                    translateNode.appendChild(newNode);
                                    node.appendChild(translateNode);
                                }
                                clippath_id = drawClipPath(d3.select(node), width, height, 
                                  0, 0, generateId(), context.horizontal);
                                node.setAttribute("clip-path", "url(#" + clippath_id + ")");
                            }
                        } else {
                            scaleRate = width / imageWidth;
                            scaleSvgNode.appendChild(translateNode);
                            removeAllColorAttributes(scaleNode);
                            document.body.appendChild(scaleSvgNode);
                            offset = {
                                x: -iconSVG.getX() * scaleRate, 
                                y: -iconSVG.getY() * scaleRate 
                            };
                            scaleNode.setAttribute("transform", "translate(" + offset.x + "," +
                              offset.y + ") scale(" + scaleRate + "," + scaleRate + ")");
                            var currentImageHeight = scaleNode.getBoundingClientRect().height ;
                            repeatedNum = Math.ceil(height / currentImageHeight);
                            var y = 0;
                            var recty = 0;
                            if (repeatedNum === 1) {
                                translateNode.setAttribute("transform", "translate(0," +
                                  (height - currentImageHeight) + ")");
                                y = height - currentImageHeight;
                                recty = y;
                                var rectHeight = currentImageHeight - height;
                                mask_id = drawMask(d3.select(node), width + 4, height, -2, 0, recty, rectHeight, 
                                  currentImageHeight + 2, generateId(), context.horizontal);
                                node.setAttribute("mask", "url(#" + mask_id + ")");
                                node.appendChild(translateNode);
                            } else {
                                for (var j = 0; j < repeatedNum; j++) {
                                    newNode = scaleNode.cloneNode(true);
                                    translateNode = document.createElementNS('http://www.w3.org/2000/svg', "g");
                                    translateNode.setAttribute("transform", "translate(0," + (height -
                                      currentImageHeight * (j + 1)) + ")");
                                    translateNode.appendChild(newNode);
                                    node.appendChild(translateNode);
                                }
                                clippath_id = drawClipPath(d3.select(node), width, height, 
                                  0, 0, generateId(), context.horizontal);
                                node.setAttribute("clip-path", "url(#" + clippath_id + ")");
                            }
                        }
                        if (color) {
                            node.setAttribute("fill", color);
                        }
                        if (dataPointShapeFill) {
                            context.data.color = dataPointShapeFill;
                        }
                        scaleSvgNode.parentNode.removeChild(scaleSvgNode);
                        iconSVG.destroy();
                    } else {
                        if (!dataPointShapeValue || dataPointShapeValue === "rectangle" || 
                          !pathGens[dataPointShapeValue]) {
                            node = SVG.create("rect");
                            node.setAttribute("width", width);
                            node.setAttribute("height", height);
                        } else {
                            node = SVG.create("path");
                            var d = "";
                            pathGens[dataPointShapeValue](width, height,
                                context.horizontal, context.negative).forEach(
                                function(point, index) {
                                    d += (index === 0 ? "M" : "L") + point[0] + " " +
                                        point[1];
                                });
                            d += "Z";

                            node.setAttribute("d", d);
                        }

                        if (dataPointShapeFill) {
                            context.data.color = dataPointShapeFill;
                        }
                        node.setAttribute("fill", color);
                    }
                    return node;
                }
            }

        return {
            name: 'combinationDataPointRenderer',
            fn: function(configs) {
                return function(context) {
                    if(context.isLineMarker === false){
                        var cfg0 = configs[0];
                        if (cfg0 && cfg0.paras && cfg0.paras.dataPointShapeRenderer === "scale") {
                            return scale(configs, context);
                        } else {
                            return stack(configs, context);
                            } 
                    }else{
                        var props = getPropertiesByCtx(context, configs);

                        if (props) {
                          var graphic = context.graphic, iconSVG = props.iconSVG;
                          if (iconSVG) {
                            var iconSize = props.iconSize;
                            if (iconSize === 0) {
                              return null;
                            }
                            iconSize = props.iconSize; /* Math.min(props.iconSize, context.bandLength,
                                context.plotSize[context.horizontal ? 0 : 1]);*/

                            iconSVG = new Icon(iconSVG);
                            var imageGroup = SVG.create("g");

                            var imageWidth = iconSVG.getWidth();
                            var imageHeight = iconSVG.getHeight();
                            var xScale = iconSize / imageWidth;
                            var yScale = iconSize / imageHeight;
                            iconSVG.render(imageGroup, [ xScale, yScale ], props.iconColor|| graphic.fill);
                            iconSVG.destroy();

                            imageGroup.setAttribute("transform", "translate(" +
                                (-iconSVG.getX() * xScale - iconSize / 2) + "," +
                                (-iconSVG.getY() * yScale - iconSize / 2) + ")");

                            return imageGroup;
                          }else{
                            var node = SVG.create("path");
                            if(graphic.d){
                                node.setAttribute("d", graphic.d);
                            }
                            var fill = context.effectManager.register({
                                drawingEffect: graphic.drawingEffect,
                                fillColor: graphic.fill
                            });
                            node.setAttribute("fill", fill);
                            var opacity = (graphic.opacity >= 0 && graphic.opacity <= 1) ? graphic.opacity : 1;
                            // node.setAttribute("fill-opacity", opacity);
                            node.setAttribute("stroke-opacity", opacity);

                            return node;
                          }
                        }
                    } 
                };
            }
        };
});

define('sap/viz/controls/plugins/infochart/interaction/DesignTimeUtils',[], function() {
    /*
     * utilities: you should NOT change their context
     */
    var _utils = {};
    var CSS_CLASS_STACK = 'v-stack';

    function hasClass (node, clz) {
        // svg element className is an object, not a string, so common utils like jquery.hasClass doesn't work
        if (!node || !node.getAttribute) { return false; }
        var nodeClz = node.getAttribute('class') || "";
        return (' ' + nodeClz + ' ').indexOf(' ' + clz + ' ') >= 0;
    }
    function findAncestor (clz, startIncl, EndExcl) {
        var node = startIncl;
        while (node !== EndExcl && !hasClass(node, clz) && node.parentNode) { node = node.parentNode; }
        return node === EndExcl ? null : node;
    }
    function hasChild(node, clz) {
        if(!node.childNodes || !node.childNodes[0]) {
            return false;
        }
        for (var child in node.childNodes) {
            if (hasClass(node.childNodes[child], clz)) {
                return true;
            }
        }
        return false;
    }
    function findParent (node) {
        return hasClass(node, "v-m-root") ? node : node.parentNode;
    }

    _utils.hasClass = hasClass;
    _utils.findAncestor = findAncestor;
    _utils.hasChild = hasChild;
    _utils.findParent = findParent;

    /*all possible axes names*/
    _utils.getAxisModules = function(modules) {
        var axisNames = ["xAxis", "xAxis2", "yAxis", "yAxis2"];
        var axes = [];
        axisNames.forEach(function(name, idx) {
            name = "main." + name;
            if (modules[name]) {
                axes.push(modules[name]);
            }
        });
        return axes;
    };
    
    
    /*
     * targetCtx: {Country: "China", Year: "2001"}
     * ctx: {Country: "China", Year: "2001", Product: "Trunk"}
     * return true
     */
    _utils.matchCtx = function(targetCtx, ctx) {
        var isMatch = true;
        for (var key in targetCtx) {
            if (targetCtx.hasOwnProperty(key)) {
                if (!ctx.hasOwnProperty(key) || ctx[key] !== targetCtx[key]) {
                    isMatch = false;
                    break;
                }
            }
        }
        return isMatch;
    };

    /*all types and their corresponding css classes*/
    _utils.featureClassesMap = {
        'plotArea': 'v-plot-bound',
        'dataPoint': 'v-datapoint',
        'dataPointMarker' : 'v-datapoint-marker',
        'stack': 'v-stack',
        'dataLine': 'v-lines',
        // 'combinationDataLine':'v-combination-lines',
        'legend': 'v-m-legend',
        'title': 'v-m-title',
        'axis': 'v-m-axisBody',
        'axisItem': 'v-axis-item',
        'axisTitle': 'v-m-axisTitle',
        'chart': 'v-m-root',
        'gridline': 'v-gridline-group',
        'dataLabel': 'v-datalabel',
        'trellisPlotArea': 'v-trellis-plot-bound',
        'trellisRowAxis' : 'v-m-axis-position-bound v-gridcontainer-left',
        'trellisRowAxis2' : 'v-m-axis-position-bound v-gridcontainer-right',
        'trellisRowAxisTitle' : "v-title viz-axis-title v-trellistitle-left",
        'trellisRowAxisTitle2' : "v-title viz-axis-title v-trellistitle-right",
        'trellisColumnAxis' : 'v-m-axis-position-bound v-gridcontainer-bottom',
        'trellisColumnAxis2' : 'v-m-axis-position-bound v-gridcontainer-top',
        'trellisColumnAxisTitle' : "v-title viz-axis-title v-trellistitle-bottom",
        'trellisColumnAxisTitle2' : "v-title viz-axis-title v-trellistitle-top",
        'dimensionLabel': 'v-treemapdimensionlabel',
        _unselectables: ['v-gridline-group'],
        _clz2NameMap: undefined,
        _allClzs: undefined,
        _init: function() {
            var val;
            if (!this._name2ClzMap) {
                this._clz2NameMap = {};
                this._allClzs = [];
                for (var key in this) {
                    if (this.hasOwnProperty(key) && typeof (val=this[key]) === 'string') {
                        this._allClzs.push(val);
                        this._clz2NameMap[val] = key;
                    }
                }
            }
        },
        clz2Name: function(clz) {
            this._init();
            return this._clz2NameMap[clz];
        },
        allClzs: function() {
            this._init();
            return this._allClzs;
        },
        featureClass: function(node) {
            node = node[0] || node;
            var featureClasses = this.allClzs();
            for (var i = -1; ++i < featureClasses.length; ) {
                if (hasClass(node, featureClasses[i])) {
                    return featureClasses[i];
                }
            }
        },
        isSelectable: function(node) {
            node = node[0] || node;
            var clz = this.featureClass(node);
            return this._unselectables.indexOf(clz) === -1;
        },
        isMultiselectable: function(node) {
            node = node[0] || node;
            var clz = this.featureClass(node);
            return [this.dataLabel, this.dataPoint, this.axisItem, this.dimensionLabel].indexOf(clz) > -1;
        },
        targetPattern: function(name) {
            if (!this[name]) {
                throw "Can't find class for " + name;
            }
            return "(\\s+|^)" + this[name] + "(\\s+|$)";
        },
        allSelectableTargetsPattern: function() {
            var allClzs = this.allClzs(),
                clzs = [];
            for (var i = -1; ++i < allClzs.length; ) {
                if (allClzs[i] !== this.chart && this._unselectables.indexOf(allClzs[i]) < 0) {
                    clzs.push(allClzs[i]);
                }
            }
            return "(\\s+|^)(" + clzs.join('|') + ")(\\s+|$)"; 
        }
    };
    
    /*determine which axis the node belong to*/
    _utils.axisSubType = function(node) {
        var axis = findAncestor('v-axis', node).parentNode,
            axisClz = axis.getAttribute('class'),
            groups = /\sv-m-(\S\S+)Axis(\d*)\s/.exec(' ' + axisClz + ' ');
        return groups && groups.length > 0 ? groups.slice(1, 3).join("") : null;
    };
    
    /*get type and subType*/
    _utils.typesOfUnit = function(clz, unit) {
        var type, subType;
        type = this.featureClassesMap.clz2Name(clz);
        if (!type) {
            throw 'unknow class: ' + clz;
        }
        if (type === 'axis' || type === 'axisItem' || type === 'axisTitle') {
            subType = this.axisSubType(unit);
        }
        return [type, subType];
    };
    
    /**
     * Get stack data for stacked bar/column.
     */
    _utils.getStackData = function(units){
        var stackData = [];
        var parentNode, ctx, datum, key;
        for(var i=0; i<units.length; i++){
            parentNode = units[i].parentNode;
            if(_utils.featureClassesMap.featureClass(parentNode) === CSS_CLASS_STACK){
                ctx = this.getExtraData(parentNode);
                if (!ctx) {
                    continue;
                }
                stackData[i] =ctx;
            }
        }
        return stackData;
    };

    _utils.getData = function(node) {
        return node["__data__"];
    };

    _utils.getExtraData = function(node) {
        return node["__extra_data__"];
    };

    _utils.getCorrectCombinationType = function(dom, type){
        var retValue = type;
        if(dom && dom.getAttribute("combination-marker") === "true"){
            retValue = "dataPointMarker";
        }else if(dom && dom.getAttribute("combination-line") === "true"){
            retValue = "combinationDataLine";
        }else{
            // No need to change the type.
        }

        return retValue;
    };

    /*
     * construct data for event and api, like:
                {
                                type: âdataPoint|axis|axisItem|axisTitle|legend|title|chartâ,
                                subType: âx|yâ //currently only needed by axis,
                                data: [ctx1, ctx2, â¦]
                }
     *
     */
    _utils.constructEventData = function(units, bySeries, selectAllData) {
        if (!units || units.length === 0) {
            return null;
        }
        var types, type, subType, 
            data = [], ctx, datum, extraData = [], extraDatumOrig, extraDatum,
            clz = this.featureClassesMap.featureClass(units[0]),
            key;

        types = this.typesOfUnit(clz, units[0]);
        type = types[0];
        if(units && units.length>0){
            type = _utils.getCorrectCombinationType(units[0], type);
        }

        subType = types[1];
        for (var i = -1; ++i < units.length; ) {
            ctx = d3.select(units[i]).datum();
            if (!ctx) {
                break; //axis, axistitle, title & legend have no datum/ctx
            }
            if (clz === 'v-axis-item') {
                ctx = ctx.ctx;
            }
            datum = {};
            for (key in ctx) {
                if (ctx.hasOwnProperty(key)/* && key !== '_id' && key !== 'MeasureNamesDimension'*/) {
                    datum[key] = ctx[key];
                }
            }
            data.push(datum);
            
            extraDatum = {};
            extraDatumOrig = _utils.getExtraData(units[i]);
            if (extraDatumOrig) {
                for (key in extraDatumOrig) {
                    if (extraDatumOrig.hasOwnProperty(key)) {
                        extraDatum[key] = extraDatumOrig[key];
                    }
                }   
            }
            extraData.push(extraDatum);
        }

        var result = {
            type: type,
            subType: subType,
            data: data,
            extraData: extraData
        };
        if(clz === 'v-datapoint' || clz=== "v-datapoint-marker"){
            var stackData = _utils.getStackData(units);
            if(stackData.length>0){
                result.stackData = stackData;
            }
        }
        if (bySeries && bySeries.isBySeries) {
            var seriesData = {};
            for (var j = 0; j < bySeries.seriesBindings.length; j++) {
                seriesData[bySeries.seriesBindings[j]] = data[0][bySeries.seriesBindings[j]];
            }
            result.seriesData = seriesData;
        }
        if (selectAllData && result.data.length) {
            result.selectAllData = true;
        }
        return result;
    };
    return _utils;
});

define('sap/viz/controls/plugins/infochart/interaction/DesignTimeLineUtils',["./DesignTimeUtils"], function(DesignTimeUtils) {
/************************************************************************/
/************************************************************************/    
/**************************** LINE UTILITY METHODS ****************************/    
    /*
     * line utilities: you should NOT change their context
     */
    var _lineUtils = {
        fuzzyDistance: 10,
        geoUtils: {
            distance: function(p1, p2) {
                return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
            },
            distanceFromPointToLine: function(point, line) {
                var a = this.distance(point, line.p1),
                    b = this.distance(point, line.p2),
                    c = this.distance(line.p1, line.p2),
                    p = (a + b + c) / 2,
                    s = Math.sqrt(p * (p - a) * (p - b) * (p - c));
                return 2 * s / c;
            },
            isObtuseAngle: function(a, b, c) {
                var ab = this.distance(a, b),
                    bc = this.distance(b, c),
                    ca = this.distance(c, a);
                return (ab * ab + bc * bc) < (ca * ca);
            }
        },
        
        centerOfDP: function(dp) {
            var rect = dp.getBoundingClientRect();
            return {
                x: rect.left + rect.width / 2,
                y: rect.top + rect.height / 2
            };
        },
        
        fuzzyDP: function(allDPs, point) {
            var minDis = this.fuzzyDistance + 10,
                minDP,
                p1,
                dp,
                dis;
            for (var i = -1; ++i < allDPs.length; ) {
                dp = allDPs[i];
                p1 = this.centerOfDP(dp);
                dis = this.geoUtils.distance(p1, point);
                if (dis < minDis && dis < this.fuzzyDistance) {
                    dis = minDis;
                    minDP = dp;
                }
            }
            return minDP;
        },
        
        fuzzyLineByGeo: function(allLines, allDPs, point) {
            var line,
                lineCtx,
                dpCtx,
                dps,
                dp,
                minDis = this.fuzzyDistance + 10,
                minDisLine,
                distance,
                p1, p2,
                i, j;
            for (i = -1; ++i < allLines.length; ) {
                line = allLines[i];
                lineCtx = d3.select(line).datum();
                dps = [];
                for (j = -1; ++j < allDPs.length; ) {
                    dp = allDPs[j];
                    dpCtx = d3.select(dp).datum();
                    if (DesignTimeUtils.matchCtx(lineCtx, dpCtx)) {
                        dps.push(dp);
                    }
                }
                //distance between point and line
                for (j = -1; ++j < dps.length - 1; ) {
                    p1 = this.centerOfDP(dps[j]);
                    p2 = this.centerOfDP(dps[j+1]);
                    distance = this.geoUtils.distanceFromPointToLine(point, {
                        p1: p1,
                        p2: p2
                    });
                    if (distance < minDis && distance < this.fuzzyDistance && !this.geoUtils.isObtuseAngle(point, p1, p2) && !this.geoUtils.isObtuseAngle(point, p2, p1)) {
                        minDis = distance;
                        minDisLine = i;
                    }
                }
            }
            if (minDis < this.fuzzyDistance) {
                return allLines[minDisLine];
            }            
        },
        
        fuzzyLine: function(lines, allDPs, point) {
            var line, 
                d, 
                newLine,
                i,
                tgt;
            for (i = -1; ++i < lines.length; ) {
                line = lines[i];
                d = line.getAttribute('d');
                newLine = document.createElementNS("http://www.w3.org/2000/svg", 'path');
                newLine.setAttribute('d', d);
                newLine.setAttribute('stroke-width', this.fuzzyDistance*2);
                newLine.setAttribute('fill', 'none');
                newLine.setAttribute('stroke', 'transparent');
                line.parentNode.appendChild(newLine);
                tgt = document.elementFromPoint(point.x, point.y);
                line.parentNode.removeChild(newLine);
                if (tgt === newLine) {
                    return line;
                }
            }            
        },
        
        fuzzilyMatch: function(rootNode, point) {
            var lines = rootNode.querySelectorAll('.' + DesignTimeUtils.featureClassesMap.dataLine);
            if (!lines.length) { //only support line chart
                return;
            }
            var allDPs = rootNode.querySelectorAll('.' + DesignTimeUtils.featureClassesMap.dataPoint),
                dp;
            //first find possible data point
            dp = this.fuzzyDP(allDPs, point);
            if (dp) {
                return dp;
            }
            //if no data point matches, find line
            return this.fuzzyLine(lines, allDPs, point);
        }        
    };
    return _lineUtils;
});

define('sap/viz/controls/plugins/infochart/interaction/PieBehaviorHelper',[
  "sap/viz/controls/common/utils/Utils"
], function(Utils) {

  var calcTranslate = function(decoras, dx, dy) {
    var dx_decoras = dx;
    var dy_decoras = dy;

    if (d3.select(decoras).attr('transform')) {
      var transformString = d3.select(decoras).attr('transform');
      if (transformString.indexOf('translate') > -1) {
        d3.select(decoras).attr("originalTransform", transformString);
        var transformObj = d3.transform(transformString);
        if (transformObj && transformObj.translate && transformObj.translate.length === 2) {
          dx_decoras = transformObj.translate[0] + dx;
          dy_decoras = transformObj.translate[1] + dy;
        }
      }
    }
    if (decoras) {
      d3.select(decoras).transition().attr('transform', "translate(" + dx_decoras + "," + dy_decoras + ")");
    }
  };

  var resetTransform = function(decoras) {
    var transformString = d3.select(decoras).attr("originalTransform");
    if (transformString) {
      d3.select(decoras).transition().attr('transform', transformString);
    }
  };

  var PieBehaviorHelper = {
    selectDataPoint: function(elements) {
      if (!Utils.isArray(elements)) {
        elements = [elements];
      }
      elements.forEach(function(e) {
        var d3Node = d3.select(e);

        var d = d3Node.node()["__extra_data__"];
        if (d) {
          var decoras = d.decoras;
          var dx = 0,
            dy = 0;
          var a = d.midAngle;
          var r = d.r;
          var sectorMoveOffset;

          sectorMoveOffset = 0.08 * r;

          dx = sectorMoveOffset * Math.sin(a);
          dy = -sectorMoveOffset * Math.cos(a);
          d3Node.attr('transform', "translate(" + dx + "," + dy + ")");
          d3Node.attr('translateOffsetX', dx);
          d3Node.attr('translateOffsetY', dy);
          if (decoras && (!d3Node.attr('offsetDone') || d3Node.attr('offsetDone') === "false")) {
            calcTranslate(decoras, dx, dy);
          }
          d3Node.attr('offsetDone', true);
        }
      });

    },
    deselectDataPoint: function(elements) {
      if (!Utils.isArray(elements)) {
        elements = [elements];
      }
      elements.forEach(function(e) {
          var d3Node = d3.select(e);
          if (d3Node) {
            if (d3Node.attr('offsetDone') === "true") {
              d3Node.attr('transform', "translate(0,0)");
              var offsetX = d3Node.attr('translateOffsetX');
              var offsetY = d3Node.attr('translateOffsetY');

              var d = d3Node.node()["__extra_data__"];
              var decoras = d.decoras;
              if (decoras && offsetX && offsetY) {
                resetTransform(decoras);
              }
              d3Node.attr('offsetDone', false);
            }

          }
        });
      }
    };
    return PieBehaviorHelper;
});

define('sap/viz/controls/plugins/infochart/interaction/DesignTimeBehavior',[
  "sap/viz/controls/plugins/infochart/interaction/DesignTimeUtils",
  "sap/viz/controls/plugins/infochart/interaction/DesignTimeLineUtils",
  "sap/viz/controls/plugins/infochart/interaction/PieBehaviorHelper",
  "sap/viz/controls/common/utils/Utils",
  "jquery"
], function(DesignTimeUtils, DesignTimeLineUtils, PieBehaviorHelper, Utils, $) {
    var behavior = new sap.viz.api.interaction.Behavior({
        id: "DesignTimeBehavior"
    });

    var plotAreaPattern = "v-plot-bound",
        dataPointPattern = "v-datapoint",
        dataLinePattern = "v-lines",
        dataLabelPattern = "v-datalabel",
        legendItemPattern = "v-m-legend",//original value is v-m-legend
        axisBodyPattern = "v-m-axisBody",
        axisTitlePattern = "v-m-axisTitle",
        titlePattern = "v-m-title";

    var barTypes = [ "info/bar", "info/column", "info/dual_column", "info/dual_bar", "info/stacked_bar", 
                    "info/stacked_column", "info/100_stacked_bar", "info/100_stacked_column"];
    var pieTypes = [ "info/donut", "info/pie" ];
    var lineTypes = [ "info/line", "info/horizontal_line", "info/dual_line", "info/dual_horizontal_line", 
                    "info/combination", "info/horizontal_combination"];
    var scatterTypes = [ "info/bubble", "info/scatter" ];
    var treeTypes = ["info/treemap"];//click dataPoint to select plotArea
    var typesWithoutInfographic = [ ];
    var lineTypesWithoutInfographic = [ ];
    var trellisTypes = [ 'info/trellis_bar', 'info/trellis_line', 'info/trellis_horizontal_line', 'info/trellis_column', 
    'info/trellis_donut','info/trellis_dual_column', 'info/trellis_dual_line', 'info/trellis_dual_horizontal_line', 'info/trellis_dual_bar',
        'info/trellis_pie', 'info/trellis_bubble', 'info/trellis_scatter', 'info/trellis_100_stacked_column', 'info/trellis_stacked_column',
        'info/trellis_stacked_bar', 'info/trellis_100_stacked_bar', 'info/trellis_combination', 'info/trellis_horizontal_combination' ];
    var trellisLineTypes = [ 'info/trellis_line', 'info/trellis_dual_line', 'info/trellis_dual_horizontal_line', 'info/trellis_horizontal_line',
        'info/trellis_combination', 'info/trellis_horizontal_combination' ];
/*  var typesWithoutPlotArea = ["info/horizontal_combination", "info/combination", "info/bubble", "info/treemap", "info/scatter" ];
 *  now all infocharts have PLOT_AREA in property editor
 */
    var hasClass = DesignTimeUtils.hasClass,
        findAncestor = DesignTimeUtils.findAncestor,
        hasChild = DesignTimeUtils.hasChild,
        findParent = DesignTimeUtils.findParent,
        getData = DesignTimeUtils.getData;

    function highlight(node, config, helperFn) {
        if ( Utils.isArray(node) ) {
            node.forEach(function (e) { highlight( e, config, helperFn ); });
            return;
        }

        var indicator = prepareHighlightTarget(node),
            isDP = isDataPoint(node),
            style = indicator.style,
            origStyle = {},
            ratio = 1;

        config = config || {
            "stroke": "blue",
            "stroke-width": ratio + "px",
            "stroke-dasharray": 3 * ratio + "," + 3 * ratio,
            "fill-opacity": 1,
            "stroke-opacity": 1
        };

        for (var key in config) {
            if (config.hasOwnProperty(key)) {
                if (isDP) {
                    origStyle[key] = style[key];
                }
                style[key] = config[key];
            }
        }
        if (isDP && !$(indicator).data("vizSelectOrigStyle")) {
            $(indicator).data("vizSelectOrigStyle", origStyle);
        }

    }

    function isDataPoint(node) {
        return hasClass(node, 'v-datapoint') || hasClass(node, 'v-datapoint-marker') || hasClass(node, 'v-lines') || 
        hasClass(node, 'v-combination-lines'); 
    }

    function targetOf(node) {
        if (isDataPoint(node)) {
            return node;
        }
        return $(node).data("v-select-indicator");
    }

    function prepareHighlightTarget(node) {
        var indicator = targetOf(node);
        if (isDataPoint(node)) {
            return indicator;
        }
        //append a rectangle for non-datapoint node ( legend, axis, axis item, etc.)
        var refNode = node,
            rect,
            parent, 
            parentRect;
        parent = findParent(node);
        if (indicator) {
            d3.select(indicator).remove();
        }
        indicator = d3.select(parent).append("rect")
            .attr("class", "v-select-indicator")
            .style({
                "visibility": "hidden",
                "fill": "none"
            })
            .node();
        parentRect = parent.getBoundingClientRect();
        
        if (hasClass(node, "v-m-title")) {
            refNode = node.querySelector(".v-title");
        } else if (hasClass(node, "v-m-axisTitle")) {
            refNode = node.querySelector("text");
        } else if (hasClass(node, "v-axis-item")) {
            refNode = node.querySelector(".viz-axis-label-rect");
        } else if (hasChild(node, "v-clippath")) {
            refNode = node.querySelector(".v-clippath");
        }
        rect = refNode.getBoundingClientRect();

        //in case that stack pictograms surpass plotarea, which causes the miscalculation of getBBox().x and getBBox().y 
        //this case is especially for indicator of .v-m-title and .v-m-root
        var offset = {
            x : parent.getBoundingClientRect().width < parent.getBBox().width ? 0 : parent.getBBox().x,
            y : parent.getBoundingClientRect().height < parent.getBBox().height ? 0 : parent.getBBox().y
        };
        d3.select(indicator)
            .attr({
                x: rect.left - parentRect.left + offset.x,
                y: rect.top  - parentRect.top + offset.y,
                width: rect.width,
                height: rect.height
            })
            .style("visibility", "visible");
        $(node).data("v-select-indicator", indicator);
        return indicator;
    }

    function unhighlight(node) {
        if ( Utils.isArray(node) ) {
            node.forEach(function (e) { unhighlight( e ); });
            return;
        }
        var indicator = targetOf(node);
        if (!indicator) {
            return;
        }
        if (isDataPoint(node)) {
            var origStyle = $(indicator).data("vizSelectOrigStyle") || {},
                style = indicator.style;
            for (var key in origStyle) {
                if (origStyle.hasOwnProperty(key)) {
                    if (origStyle[key] === undefined) {
                        delete style[key];
                    } else {
                        style[key] = origStyle[key];
                    }
                }
            }
            $(indicator).removeData("vizSelectOrigStyle");
        } else {
            d3.select(indicator).remove();
        }
    }

    /**
     * 
     * @param {type} sels
     * @param {type} series
     * @returns {string} 'none' - no point on the series is selected; 'some' - some points are selected; 'all' - all points of the series are selected
     */
    function seriesSelectionStatus(sels, series) {
        var hasSel = false;
        for (var i = -1; ++i < series.length; ) {
            if (sels && sels.indexOf(series[i]) > -1) {
                hasSel = true;
            } else {
                if (hasSel) {
                    return 'some';
                }
            }
        }
        return hasSel ? 'all' : 'none';
    }

    behavior.add({
        "id": "initialized_datapoint",
        "trigger": {
            "name": "afterBehaviorLoaded"
        },
        "handler": function(event, service) {
            var behavior = this;
            service.setStatus("selectedUnits", []);
            this.exposeMoreEvents("selectPropertyZone");
            this.exposeMoreEvents("deselectPropertyZone");
            
            service.getProperties().add("selectedPropertyZone", {
                set: function(sel) {
                    if (sel == null) {
                        clearSelection(service);
                    } else {
                        setSelection(behavior, service, sel);
                    }
                },
                get: function() {
                    return getSelection(behavior, service);
                }
            });
        }
    });

     behavior.add({
        "id": "selectItem_scatter",
        "trigger": {
            "name": "selectItem",
            "supportedChartTypes": scatterTypes
        },
        "handler": function(event, service) {
            var elements = event.data.targets;
            var ratio = strokeRatioOfElement(elements[0]);
            if (!Utils.isArray(elements)) {
                elements = [elements];
            }
            if (hasClass(elements[0], "v-datapoint") ) {
                elements.forEach(function(ele){
                    var calStroke = strokeRatioOfElement(ele);
                    var stroke = ele.children[0].getAttribute('stroke');
                    ratio = calStroke<ratio ? calStroke : ratio;
                    if(stroke !== null){
                        ele['__extra_data__']['stroke']=stroke;
                    }
                    ele.children[0].removeAttribute('stroke');
                });
            }
            highlight(elements, {
                "stroke": "blue",
                "stroke-width": ratio + "px",
                "stroke-dasharray": 3 * ratio + "," + 3 * ratio,
                "fill-opacity": 1,
                "stroke-opacity": 1
            });
        }
    });

    behavior.add({
        "id": "deselectItem_scatter",
        "trigger": {
            "name": "deselectItem",
            "supportedChartTypes": scatterTypes
        },
        "handler": function(event, service) {
            var elements = event.data.targets;
            if (!Utils.isArray(elements)) {
                elements = [elements];
            }
            unhighlight(elements);
            if (hasClass(elements[0], "v-datapoint") ) {
                elements.forEach(function(ele){
                    var stroke = ele['__extra_data__']['stroke'];
                    if(stroke !== null){
                        ele.children[0].setAttribute('stroke',stroke);
                    }
                });
            }
        }
    });

    behavior.add({
        "id": "afterChartRendered",
        "trigger": {
            "name": "afterChartRendered"
        },
        "handler": function(event, service) {
            if (service.getStatus("selectedPropertyZoneData") ) {
                setSelection(this, service, getSelection(this, service));

                var sel = service.getStatus("selectedUnits");
                if (sel && sel.length) {
                    // highlight again because resize cause selection unhighlighted
                    service.fireEvent("selectItem", {
                        targets: sel
                    });
                }
            }
        }
    });

    behavior.add({
        "id": "select_on_plotArea",
        "trigger": {
            "name": "click",
            "targets": [ "v-plot-bound" ],
            "supportedChartTypes": barTypes.concat(lineTypes).concat(pieTypes).concat(scatterTypes).concat(treeTypes)
        },
        "handler": function(event, service) {
            var status = service.getStatus("selected"),
                units = service.getStatus("selectedUnits"),
                target = event.data.currentTarget;

            var fuzzyTgt = DesignTimeLineUtils.fuzzilyMatch(service.getRootNode().node(), event.data.point),
                tgts;
            if (fuzzyTgt) {
                if ( hasClass(fuzzyTgt, "v-datapoint") ) {
                    selectOnSeriesItem(this, {
                        data: {
                            currentTarget: fuzzyTgt,
                            target: fuzzyTgt,
                            ctrlKey: event.data.ctrlKey
                        }
                    }, service, "v-datapoint");
                    return;
                }
                if ( hasClass(fuzzyTgt, "v-datapoint-marker") ) {
                    selectOnSeriesItem(this, {
                        data: {
                            currentTarget: fuzzyTgt,
                            target: fuzzyTgt,
                            ctrlKey: event.data.ctrlKey
                        }
                    }, service, "v-datapoint-marker");
                    return;
                }
                if ( hasClass(fuzzyTgt, "v-lines") || hasClass(fuzzyTgt, "v-combination-lines")) {
                    selectOnLine(this, {
                        data: {
                            currentTarget: fuzzyTgt,
                            target: fuzzyTgt,
                            ctrlKey: event.data.ctrlKey
                        }
                    }, service);
                    return;
                }
            }
            processSelection(this, service, {
                targets: target,
                ctrlKeyPressed: event.data.ctrlKey,
                force : true
            });
        }
    });
    
    behavior.add({
        "id": "select_on_plotArea_of_chart_withoutInfographic",
        "trigger": {
            "name": "click",
            "targets": [ "v-plot-bound" ],
            "supportedChartTypes": lineTypesWithoutInfographic.concat(typesWithoutInfographic)
        },
        "handler": function (event, service) {
                changeToSelectPlotArea(this, event, service);
        }
    });

    behavior.add({
        "id": "select_on_plotArea_of_trellis",
        "trigger": {
            "name": "click",
            "targets": [ "v-plot-bound" ],
            "supportedChartTypes": trellisTypes
        },
        "handler": function (event, service) {
                selectTrellisPlotArea(this, event, service);
        }
    });
    
    behavior.add({
        "id": "select_on_dataPoint_of_trellis",
        "trigger": {
            "name": "click",
            "targets": [ "v-datapoint" ],
            "supportedChartTypes": trellisTypes
        },
        "handler": function (event, service) {
                selectTrellisPlotArea(this, event, service);
        }
    });

    behavior.add({
        "id": "select_on_plotArea_when_axisItem_for_tree",
        "trigger": {
            "name": "click",
            "targets": [ "v-axis-item" ],
            "supportedChartTypes": "info/treemap"
        },
        "handler": function (event, service) {
                changeToSelectPlotArea(this, event, service);
        }
    });

    behavior.add({
        "id": "select_on_datalabel",
        "trigger": {
            "name": "click",
            "targets": [ "v-datalabel" ],
            "supportedChartTypes": barTypes.concat(lineTypes).concat(pieTypes).concat(trellisTypes).concat(scatterTypes)
        },
        "handler": function(event, service) {
            selectOnSeriesItem (this, event, service, "v-datalabel");
        }
    });

    behavior.add({
        "id": "select_on_datalabel_treemap",
        "trigger": {
            "name": "click",
            "targets": [ "v-datalabel" ],
            "supportedChartTypes": treeTypes
        },
        "handler": function (event, service) {
            selectTreemapDataLabels(this, event, service);
        }
    });

    behavior.add({
        "id": "select_on_all_datalabel",
        "trigger": {
            "name": "click",
            "targets": [ "v-datalabel" ],
            "supportedChartTypes": typesWithoutInfographic.concat(lineTypesWithoutInfographic)
        },
        "handler": function(event, service) {
            if (event.data.ctrlKey) {
                return;
            }
            selectOnAllDatalabel (this, event, service);
        }
    });

    behavior.add({
        "id": "select_on_treemap_dimensionlabel",
        "trigger": {
            "name": "click",
            "targets": [ "v-treemapdimensionlabel" ],
            "supportedChartTypes": treeTypes
        },
        "handler": function(event, service) {
            selectTreemapDimensionLabels(this, event, service);
        }
    });

    function selectTreemapDataLabels(behavior, event, service) {
        var selectedClass = service.getStatus("selected"),
            selected = service.getStatus("selectedUnits");
        if ( "v-datalabel" !== selectedClass || selected.length === 0) {
            selectOnAllDatalabel(behavior, event, service,  "v-datalabel");
        } else {
            processSelection(behavior, service, {
                targets: event.data.currentTarget,
                ctrlKeyPressed: event.data.ctrlKey,
                force: true
            });
        }
    }

    function selectTreemapDimensionLabels(behavior, event, service) {
        var selectedClass = service.getStatus("selected"),
            selected = service.getStatus("selectedUnits"),
            target = event.data.currentTarget,
            isLeaf = target && getData(target) && getData(target).level === getData(target).levelNum - 1,
            targetLevel = target && getData(target) ? target && getData(target).level : 0,
            selectedLevel = selected && selected[0] && getData(selected[0]) ? getData(selected[0]).level : 0;

        if ("v-treemapdimensionlabel" !== selectedClass || selected.length === 0 || targetLevel !== selectedLevel) {
            selectTreemapDimensionLabelsByLevel(behavior, event, service);
        } else { 
            if (isLeaf) {
                processSelection(behavior, service, {
                    targets: event.data.currentTarget,
                    ctrlKeyPressed: event.data.ctrlKey,
                    force: true
                });
            }
        }
    }

    function selectTreemapDimensionLabelsByLevel(behavior, event, service) {
        var target = event.data.currentTarget, level;

        if (target && getData(target)) {
            level = getData(target).level;
            target = getAllNodes(service, "v-treemapdimensionlabel").filter(function(node){
                return node && getData(node) && DesignTimeUtils.matchCtx({
                    level : level
                }, getData(node));
            });

            processSelection(behavior, service, {
                targets: target,
                force: true
            });
        }

    }

    function selectOnSeriesItem(behavior, event, service, itemClass) {
        var status = service.getStatus("selected"),
            units = service.getStatus("selectedUnits"),
            target = event.data.currentTarget;
        var series, selStatus, bySeries = false;

        function pSelection( target, bySeries ) {
            processSelection(behavior, service, {
                targets: target,
                ctrlKeyPressed: event.data.ctrlKey,
                force : true,
                bySeries : bySeries
            });
        }

        if (!event.data.ctrlKey) { //select series only when ctrl key is not pressed
            series = getSeriesNodes(service, target, itemClass);
            selStatus = seriesSelectionStatus(units, series);
            if (selStatus === 'none' || //no point is selected
                    (selStatus === 'all' && units.length > series.length) //all series points and some other points are selected
                ) {
                target = series;
                bySeries = true;
            }
        }
        pSelection(target, bySeries);
    }
    
    function selectOnSeriesItemForScatters(behavior, event, service, itemClass) {
        var status = service.getStatus("selected"),
            units = service.getStatus("selectedUnits"),
            target = event.data.currentTarget;
        var series, selStatus, bySeries = false;

        function pSelection( target, bySeries ) {
            processSelection(behavior, service, {
                targets: target,
                ctrlKeyPressed: event.data.ctrlKey,
                force : true,
                bySeries : bySeries
            });
        }

        if (!event.data.ctrlKey) { //select series only when ctrl key is not pressed
            series = getScatterSeriesNodes(service, target, itemClass);
            selStatus = seriesSelectionStatus(units, series);
            if (selStatus === 'none' || //no point is selected
                    (selStatus === 'all' && units.length > series.length) //all series points and some other points are selected
                ) {
                target = series;
                bySeries = true;
            }
        }
        pSelection(target, bySeries);
    }

    function selectOnAllDatalabel (behavior, event, service, itemClass){
        processSelection(behavior, service, {
            targets: getAllNodes(service, itemClass),
            ctrlKeyPressed: false,
            force : true
        });
    }
    
    function selectOnLine (behavior, event, service) {
        var status = service.getStatus("selected"),
            units = service.getStatus("selectedUnits"),
            target = event.data.currentTarget,
            series;

        processSelection(behavior, service, {
            targets: target,
            ctrlKeyPressed: event.data.ctrlKey,
            force : true
        });
    }

    behavior.add({
        "id": "select_on_datapoint",
        "trigger": {
            "name": "click",
            "targets": [ "v-datapoint" ],
            "excludeTargets": ["v-treemapdimensionlabel"],
            "supportedChartTypes": barTypes.concat(pieTypes).concat(lineTypes)
        },
        "handler": function(event, service) {
            selectOnSeriesItem (this, event, service, "v-datapoint");
        }
    });
    
    behavior.add({
        "id": "select_on_scatter_datapoint",
        "trigger": {
            "name": "click",
            "targets": [ "v-datapoint" ],
            "excludeTargets": ["v-treemapdimensionlabel"],
            "supportedChartTypes": barTypes.concat(scatterTypes)
        },
        "handler": function(event, service) {
            selectOnSeriesItemForScatters (this, event, service, "v-datapoint");
        }
    });

    behavior.add({
        "id": "select_on_datapoint_marker",
        "trigger": {
            "name": "click",
            "targets":["v-datapoint-marker"]
        },
        "handler": function(event, service) {
            selectOnSeriesItem (this, event, service, "v-datapoint-marker");
        }
    });
    
    // tree types have infographic
    behavior.add({
        "id": "select_on_datapoint_of_charts_without_infographic",
        "trigger": {
            "name": "click",
            "targets": [ "v-datapoint" ],
            "excludeTargets": ["v-treemapdimensionlabel"],
            "supportedChartTypes": typesWithoutInfographic.concat(lineTypesWithoutInfographic).concat(treeTypes)
        },
        "handler": function(event, service) {
            changeToSelectPlotArea(this, event, service);
        }
    });
    
    
    function changeToSelectPlotArea(behavior, event, service) {
            var status = service.getStatus("selected"),
                units = service.getStatus("selectedUnits"),
                target = Array.prototype.slice.call( service.getRootNode().node().querySelectorAll(".v-plot-bound") );
            processSelection(behavior, service, {
                targets: target,
                ctrlKeyPressed: event.data.ctrlKey,
                force : true,
                suppressEvent: false,
                selectAllData : false
            });
        }

    function selectTrellisPlotArea(behavior, event, service) {
        var status = service.getStatus("selected"),
                units = service.getStatus("selectedUnits"),
                target = Array.prototype.slice.call( service.getRootNode().node().querySelectorAll(".v-trellis-plot-bound") );
            processSelection(behavior, service, {
                targets: target,
                ctrlKeyPressed: event.data.ctrlKey,
                force : true,
                suppressEvent: false,
                selectAllData : false
            });
    }

    behavior.add({
        "id" : "select_on_line",
        "trigger" : {
            "name" : "click",
            "targets" : [ "v-lines", "v-combination-lines"],
            "supportedChartTypes" : lineTypes
        },
        "handler" : function (event, service) {
            selectOnLine(this, event, service);
        }
    });
    
    behavior.add({
        "id": "select_on_line_of_dual_line_chart",
        "trigger": {
            "name": "click",
            "targets": [ "v-lines"],
            "supportedChartTypes": lineTypesWithoutInfographic
        },
        "handler" : function (event, service) {
            changeToSelectPlotArea(this, event, service);
        }
    });
    
    behavior.add({
        "id" : "select_on_line_trellis",
        "trigger" : {
            "name" : "click",
            "targets" : [ "v-lines" ],
            "supportedChartTypes" : trellisLineTypes
        },
        "handler" : function (event, service) {
            selectTrellisPlotArea(this, event, service);
        }
    });

    function deselectAll (behavior, event, service) {
        var rUnits = service.getStatus("selectedUnits").splice(0); // get and empty
        resetPlot(service);
        service.fireEvent("deselectItem", {
            targets: rUnits
        });

        if (rUnits.length) {
            emitSelectionEvent(behavior, rUnits, "deselect");
        }
    }

    behavior.add({
        "id": "deselect_all",
        "trigger": {
            "name": "click",
            "excludeTargets": ["v-datapoint", "v-datapoint-marker", "v-m-legend", "v-axis-item", "v-datalabel", "v-m-axisBody", 
            "v-plot-bound", "v-m-axisTitle", "v-m-title", "v-lines" , "v-combination-lines", "v-treemapdimensionlabel"]
        },
        "handler": function(event, service) {
            var status = service.getStatus("selected"),
                units = service.getStatus("selectedUnits"),
                target = event.data.currentTarget;

            if ( event.data.ctrlKey ) {
                return;
            }
            deselectAll(this, event, service);
            target = service.getRootNode().node();
            service.setStatus("selected", "v-m-root");
            service.setStatus("selectedPropertyZoneData", DesignTimeUtils.constructEventData([target]) );
            units.push(target);
            service.fireEvent("selectItem", {
               targets : [target]
            });
            emitSelectionEvent(this, [target], "select");
        }
    });

    function maskPlot (service) {
        var dataShapesGroupNode = service.getRootNode().select(".v-plot-main").select(".v-datapoint-group").node();
        dataShapesGroupNode.setAttribute("fill-opacity", "0.2");
        dataShapesGroupNode.setAttribute("stroke-opacity", "0.2");
    }

    function resetPlot (service) {
        var dataShapesGroupNode = service.getRootNode().select(".v-plot-main").select(".v-datapoint-group").node();
        dataShapesGroupNode.removeAttribute("fill-opacity");
        dataShapesGroupNode.removeAttribute("stroke-opacity");
    }

    function strokeRatioOfElement (e) {
        var ratio = 1, marker, t;
        if ( isDataPoint(e) ) { //since marker is applied scale transform, eliminate the scale effect for stroke
            marker = e.querySelector("circle") || e.querySelector("rect") || e.querySelector("ellipse") ||
                    e.querySelector("line") || e.querySelector("polyline") || e.querySelector("polygon") ||
                    e.querySelector("path");
            if (marker) {
                t = marker.getTransformToElement(e);
                var rect = marker.getBoundingClientRect();
                var bbox = marker.getBBox();
                ratio = bbox.width / rect.width;
            }
        }
        return ratio;
    }

    behavior.add({
        "id": "selectItem_general",
        "trigger": {
            "name": "selectItem"
            // general // "supportedChartTypes": barTypes,
        },
        "handler": function(event, service) {
            var elements = event.data.targets;

            if (!Utils.isArray(elements)) {
                elements = [elements];
            }

            var ratio = strokeRatioOfElement(elements[0]);

            highlight(elements, {
                "stroke": "blue",
                "stroke-width": ratio + "px",
                "stroke-dasharray": 3 * ratio + "," + 3 * ratio,
                "fill-opacity": 1,
                "stroke-opacity": 1
            });
        }
    });

    behavior.add({
        "id": "selectItem_line",
        "trigger": {
            "name": "selectItem",
            "supportedChartTypes": lineTypes
        },
        "handler": function(event, service) {
            var elements = event.data.targets;

            if (!Utils.isArray(elements)) {
                elements = [elements];
            }
            if (hasClass(elements[0], "v-lines") || hasClass(elements[0], "v-combination-lines")) {
                highlight(elements, { "stroke-opacity": '1' });
            }
            else {
                elements.forEach(function (element) {
                    var ratio = strokeRatioOfElement(element);
                    highlight(element, {
                        "stroke": "blue",
                        "stroke-width": ratio + "px",
                        "stroke-dasharray": 3 * ratio + "," + 3 * ratio,
                        "fill-opacity": 1,
                        "stroke-opacity": 1
                    });
                });
            }
        }
    });

    behavior.add({
        "id": "deselectItem_general",
        "trigger": {
            "name": "deselectItem"
            // general // "supportedChartTypes": barTypes,
        },
        "handler": function(event, service) {
            var elements = event.data.targets;
            if (!Utils.isArray(elements)) {
                elements = [elements];
            }
            unhighlight(elements);
        }
    });
    behavior.add({
        "id": "selectItem_pie",
        "trigger": {
            "name": "selectItem",
            "supportedChartTypes": pieTypes
        },
        "handler": function(event, service) {
            var elements = event.data.targets;

            if (!Utils.isArray(elements)) {
                elements = [elements];
            }

            var ratio = strokeRatioOfElement(elements[0]);

            highlight(elements, {
                "stroke": "blue",
                "stroke-width": ratio + "px",
                "stroke-dasharray": 3 * ratio + "," + 3 * ratio,
                "fill-opacity": 1,
                "stroke-opacity": 1
            });
            if(hasClass(elements[0], 'v-datapoint')) {
                PieBehaviorHelper.selectDataPoint(elements);
            }
        }
    });

    behavior.add({
        "id": "deselectItem_pie",
        "trigger": {
            "name": "deselectItem",
            "supportedChartTypes": pieTypes
        },
        "handler": function(event, service) {
            var elements = event.data.targets;
            if (!Utils.isArray(elements)) {
                elements = [elements];
            }
            elements.forEach(function(e) {
                unhighlight(e);
            });
            if(hasClass(elements[0], 'v-datapoint')) {
                PieBehaviorHelper.deselectDataPoint(elements);
            }
        }
    });

    function generalItemFn(behavior, event, service) {
        var status = service.getStatus("selected"),
            units = service.getStatus("selectedUnits"),
            target = event.data.currentTarget;
        
        processSelection(behavior, service, {
            targets: target,
            ctrlKeyPressed: event.data.ctrlKey,
            force : true
        });
    }
    
    behavior.add({
        "id": "select_on_title",
        "trigger": {
            "name": "click",
            "targets": [ "v-m-title" ]
        },
        "handler": function(event, service) {
            generalItemFn(this, event, service);
        }
    });

    behavior.add({
        "id": "select_on_axisTitle",
        "trigger": {
            "name": "click",
            "targets": [ "v-m-axisTitle" ],
            "supportedChartTypes" : barTypes.concat(pieTypes).concat(lineTypes).concat(typesWithoutInfographic).concat(lineTypesWithoutInfographic)
            .concat(treeTypes).concat(scatterTypes)
        },
        "handler": function(event, service) {
            generalItemFn(this, event, service);
        }
    });
    
    behavior.add({
        "id": "select_on_axisTitle_trellis",
        "trigger": {
            "name": "click",
            "targets": [ "v-title viz-axis-title v-trellistitle-bottom", "v-title viz-axis-title v-trellistitle-left",
                         "v-title viz-axis-title v-trellistitle-top", "v-title viz-axis-title v-trellistitle-right" ],
            "supportedChartTypes" : trellisTypes
        },
        "handler": function(event, service) {
            generalItemFn(this, event, service);
        }
    });

    behavior.add({
        "id": "select_on_legend",
        "trigger": {
            "name": "click",
            "targets": [ "v-m-legend" ]
        },
        "handler": function(event, service) {
            generalItemFn(this, event, service);
        }
    });

    function emitSelectionEvent(behavior, targets, s) {
        var evtData = DesignTimeUtils.constructEventData(targets),
            evtName = s === "select" ? "selectPropertyZone" : "deselectPropertyZone";
        behavior.dispatchEvent(evtName, evtData);
    }
    
    function emitSelectedPropertyZone(behavior, selected, s) {
        var evtData = selected,
            evtName = s === "select" ? "selectPropertyZone" : "deselectPropertyZone";
        behavior.dispatchEvent(evtName, evtData);
    }

    function processSelection(behavior, service, config) {
        var lastSelectedUnits = service.getStatus("selectedUnits"),
            targets = config.targets,
            multiselectable = DesignTimeUtils.featureClassesMap.isMultiselectable(targets);

        if (!config.force && lastSelectedUnits.length === 1 && targets.length === 1 && lastSelectedUnits[0] === targets[0] && !multiselectable) {
            return;
        }

        if (config.ctrlKeyPressed && !multiselectable && lastSelectedUnits.length) {
            return;
        }

        if (!Utils.isArray(targets)) {
            targets = [targets];
        }

        if (lastSelectedUnits.length === 0) {
            // maskPlot(service);
        }

        var selection = [], deselection = [], idx, tgt;

        if (config.ctrlKeyPressed) {
            for (var i = -1; ++i < targets.length; ) {
                tgt = targets[i];
                if ((idx = lastSelectedUnits.indexOf(tgt)) > -1) { //deselect: remove if already selected
                    Array.prototype.push.apply(deselection, lastSelectedUnits.splice(idx, 1));
                } else if (!service.getStatus("selected") || hasClass(tgt, service.getStatus("selected"))) {
                    lastSelectedUnits.push(tgt);
                    selection.push(tgt);
                }
            }
            if (!lastSelectedUnits.length) { //for deselecting everything, select chart automatically
                var rootClz = DesignTimeUtils.featureClassesMap.chart;
                var root = service.getRootNode().node();
                if (!hasClass(root, rootClz)) {
                    root = root.querySelector("." + rootClz);
                }
                lastSelectedUnits.push(root);
                selection.push(root);
            }
        } else {
            /* this cause bug that after resize, selected item become unhighlight. */
            if (lastSelectedUnits.length === targets.length) {
                // if lastSelectedUnits is targets units, keep current status, do nothing and return
                if (
                    lastSelectedUnits.every(function (e, i) {
                       return e === targets[i]; 
                    })
                ) {
                    return;
                }
            }

            Array.prototype.push.apply(deselection, lastSelectedUnits);
            lastSelectedUnits.splice(0);
            Array.prototype.push.apply(lastSelectedUnits, targets);
            Array.prototype.push.apply(selection, targets);
        }
        var newUnitsClass = lastSelectedUnits.length === 0 ? null : DesignTimeUtils.featureClassesMap.featureClass(lastSelectedUnits[0]);
        if ( newUnitsClass !== service.getStatus("selected") && (newUnitsClass === "v-datapoint" || newUnitsClass === "v-datapoint-marker" || newUnitsClass === DesignTimeUtils.featureClassesMap.dataLine) || newUnitsClass === DesignTimeUtils.featureClassesMap.combinationDataLine) {
            maskPlot(service);
        } else if (newUnitsClass !== "v-datapoint" && newUnitsClass !== "v-datapoint-marker" && newUnitsClass !== DesignTimeUtils.featureClassesMap.dataLine && newUnitsClass !== DesignTimeUtils.featureClassesMap.combinationDataLine) {
            resetPlot(service);
        }
        service.setStatus("selected", newUnitsClass);
        var bySeries = {};
        bySeries.isBySeries = config.bySeries;
        bySeries.seriesBindings = ( service.getBindingMetaData()["color"] || [] ).map(function (o) { return o.id; });

        var dpLength = service.getRootNode().node().querySelectorAll("."+newUnitsClass).length;
        var selectedUnit = lastSelectedUnits[0];
        // Specify for combination chart.(v-datapoint can be column and line marker.)
        if(selectedUnit && selectedUnit.getAttribute("combination-marker") ===  "true"){ 
            dpLength = service.getRootNode().node().querySelectorAll('.v-datapoint[combination-marker="true"]').length;
        }else if(selectedUnit && selectedUnit.getAttribute("combination-column") ===  "true"){
            dpLength = service.getRootNode().node().querySelectorAll('.v-datapoint[combination-column="true"]').length;
        }else{
            // Specify for other dom with attritute if it's necessary.
         }
        
        var selectedAll = !!(service.getRootNode().node() && lastSelectedUnits.length === dpLength);

        service.setStatus("selectedPropertyZoneData", DesignTimeUtils.constructEventData(lastSelectedUnits, bySeries, selectedAll));

        if (deselection.length > 0) {
            service.fireEvent("deselectItem", {
                targets : deselection
            });
            if (!config.suppressEvent) {
                emitSelectionEvent(behavior, deselection, "deselect");
            }
        }
        if (selection.length > 0) {
            service.fireEvent("selectItem", {
              targets: selection
            });
            if (!config.suppressEvent) {
                emitSelectedPropertyZone(behavior, service.getStatus("selectedPropertyZoneData"), "select");
            }
        }
    }

    function getSeriesNodes (service, node, clz) {
        var ctx = d3.select(node).datum(),
            cond = {},
            dps = [],
            colorBinding = ( service.getBindingMetaData()["color"] || [] ).map(function (o) { return o.id; });
        for (var i = -1; colorBinding && ++i < colorBinding.length; ) {
            cond[colorBinding[i]] = ctx[colorBinding[i]];
        }
        service.getRootNode().selectAll('.' + clz).filter(function(d) {
            for (var key in cond) {
                if (cond.hasOwnProperty(key)) {
                    if (d[key] !== cond[key]) {
                        return;
                    }
                }
            }
            dps.push(this);
        });
        return dps;
    }
    
    function getScatterSeriesNodes (service, node, clz) {
        var ctx = d3.select(node).datum(),
            cond = {},
            dps = [],
            colorBinding = ( service.getBindingMetaData()["color"] || [] ).map(function (o) { return o.id; }),
            shapeBinding = ( service.getBindingMetaData()["shape"] || [] ).map(function (o) { return o.id; });
        if (colorBinding.length > 0) {
            cond[colorBinding[0]] = ctx[colorBinding[0]];
        }
        for (var j = -1; shapeBinding && ++j < shapeBinding.length;) {
            cond[shapeBinding[j]] = ctx[shapeBinding[j]];
        }
        service.getRootNode().selectAll('.' + clz).filter(function(d) {
            for (var key in cond) {
                if (cond.hasOwnProperty(key)) {
                    if (d[key] !== cond[key]) {
                        return;
                    }
                }
            }
            dps.push(this);
        });
        return dps;
    }
    
    function getAllNodes (service, clz) {
        return Array.prototype.slice.call( service.getRootNode().node().querySelectorAll('.' + clz) );
    }
    
    function getSeriesDataPoint (target, service) {
            var ctx = d3.select(target).datum(),
                cond = {},
                dps = [],
                colorBinding = ( service.getBindingMetaData()["color"] || [] ).map(function (o) { return o.id; });
            for (var i = -1; colorBinding && ++i < colorBinding.length; ) {
                cond[colorBinding[i]] = ctx[colorBinding[i]];
            }
            service.getRootNode().selectAll("." + DesignTimeUtils.featureClassesMap.dataPoint).filter(function(d) {
                for (var key in cond) {
                    if (cond.hasOwnProperty(key)) {
                        if (d[key] !== cond[key]) {
                            return;
                        }
                    }
                }
                dps.push(this);
            });
            return dps;
    }

    behavior.add({
        "id": "select_on_axisBody",
        "trigger": {
            "name": "click",
            "targets": [ "v-m-axisBody" ],
            "supportedChartTypes" : barTypes.concat(pieTypes).concat(lineTypes).concat(treeTypes).concat(scatterTypes)
        },
        "handler": function(event, service) {
            var status = service.getStatus("selected"),
                units = service.getStatus("selectedUnits"),
                target = event.data.currentTarget;
            var selected = units[0];
            if (selected && (selected === target || hasClass(selected, 'v-axis-item'))) {
                target = findAncestor('v-axis-item', event.data.target, target) || target;
            }
            processSelection(this, service, {
                targets: target,
                ctrlKeyPressed: event.data.ctrlKey,
                force : true
            });
        }
    });

    behavior.add({
        "id": "select_on_axisBody_withoutInfographic",
        "trigger": {
            "name": "click",
            "targets": [ "v-m-axisBody" ],
            "supportedChartTypes" : typesWithoutInfographic.concat(lineTypesWithoutInfographic)
        },
        "handler": function(event, service) {
            processSelection(this, service, {
                targets: event.data.currentTarget,
                ctrlKeyPressed: event.data.ctrlKey,
                force : true
            });
        }
    });

    behavior.add({
        "id": "select_on_axisBody_trellis",
        "trigger": {
            "name": "click",
            "targets": [ "v-m-axis-position-bound v-gridcontainer-left", "v-m-axis-position-bound v-gridcontainer-bottom",
                         "v-m-axis-position-bound v-gridcontainer-right","v-m-axis-position-bound v-gridcontainer-top" ],
            "supportedChartTypes" : trellisTypes
        },
        "handler": function(event, service) {
            processSelection(this, service, {
                targets: event.data.currentTarget,
                ctrlKeyPressed: event.data.ctrlKey,
                force : true,
                suppressEvent: false,
                selectAllData : false
            });
        }
    });
    /* be called by Interaction */
    behavior.add({
        "id": "getSelection",
        "trigger": {
            "name": "getSelection"
        },
        "handler": function(event, service) {
            return getSelection(this, service);
        }
    });

    /* be called by Interaction */
    behavior.add({
        "id": "setSelection",
        "trigger": {
            "name": "setSelection"
        },
        "handler": function(event, service) {
            return setSelection(this, service, event.data);
        }
    });

    /* be called by Interaction */
    behavior.add({
        "id": "clearSelection",
        "trigger": {
            "name": "clearSelection"
        },
        "handler": function(event, service) {
            return clearSelection(service);
        }
    });

    function clearSelection (service) {
        service.fireEvent("deselectItem", {
            targets : service.getStatus("selectedUnits").splice(0)
        });
        resetPlot(service);
        service.setStatus("selected", null);
        service.setStatus("selectedPropertyZoneData", null);
    }

    function getSelection (behavior, service) {
        return service.getStatus("selectedPropertyZoneData");
    }

    function setSelection (behavior, service, sel) {
        var clz;
        if(sel && sel.type === "dataPointMarker"){//Specify for combination/ horizontal_combination chart interaction
             clz = DesignTimeUtils.featureClassesMap["dataPoint"];
        }else if(sel && sel.type === "combinationDataLine"){
             clz = DesignTimeUtils.featureClassesMap["dataLine"];
        }else{
            clz = DesignTimeUtils.featureClassesMap[sel.type];
        }
        var targets = [], hasCtx = sel.data && sel.data.length;
        if (!clz) {
            throw "Unsupported property zone type: " + sel.type;
        }

        var candidates = service.getRootNode().selectAll("." + clz.replace(/ /g, ".")); 

        var dataPointFilter = function(d) {
            for (var i = -1; ++i < sel.data.length; ) {
                if (DesignTimeUtils.matchCtx(sel.data[i], d)) {
                    return true;
                }
            }
            return false;
        };
        var selectAllData = sel.selectAllData || false;
        switch (sel.type) {
            case "dataPoint":
                maskPlot(service);
                if (hasCtx) { //if no ctxes, select all data points
                    candidates = candidates.filter(dataPointFilter);
                } else {
                    selectAllData = true;
                }
                for(var i = 0;i < candidates.length;i++){
                    for(var j=0;j < candidates[i].length;j++){
                        var node = candidates[i][j];
                        if(node.getAttribute("combination-marker") === "true"){
                            candidates[i][j] = null;
                        } 
                    }
                }
                break;

            case "dataPointMarker":
                maskPlot(service);
                if (hasCtx) { //if no ctxes, select all data points
                    candidates = candidates.filter(dataPointFilter);
                } else {
                    selectAllData = true;
                }
                for(var n = 0;n < candidates.length;n++){
                    for(var m=0;m < candidates[n].length;m++){
                        var nodeItem= candidates[n][m];
                        if(nodeItem.getAttribute("combination-marker") !== "true"){
                            candidates[n][m] = null;
                        } 
                    }
                }
                break;
            case "dataLine":
                maskPlot(service);
                if (hasCtx) { //if no ctxes, select all data points
                    candidates = candidates.filter(dataPointFilter);
                } else {
                    selectAllData = true;
                }
                break;
            case "combinationDataLine":
                maskPlot(service);
                if (hasCtx) {
                    //special case for switching column to line to get the switched line selected by its' context;
                    if(service.getStatus("selected") === null && sel && sel.type === "combinationDataLine"){
                        candidates = candidates.filter(function(d) {
                            for(var h = 0; h < sel.data.length; h++){
                                if(DesignTimeUtils.matchCtx(d, sel.data[h])){
                                    return true;
                                }
                            }
                            return false;
                        });
                    }
                } else {
                    selectAllData = true;
                }
                break;
            case "dataLabel":
            case "dimensionLabel":
                if (hasCtx) { //if no ctxes, select all data labels
                    candidates = candidates.filter(dataPointFilter);
                } else {
                    selectAllData = true;
                }
                break;
            case "axis":
            case "axisItem":
            case "axisTitle":
                candidates = candidates.filter(function(d) {
                    var subType = DesignTimeUtils.axisSubType(this);
                    if (subType !== sel.subType) {
                        return false;
                    }
                    if (sel.type !== "axisItem" || !hasCtx) { //if no ctxes, select all axis items
                        if (sel.type === "axisTitle") {
                            return this.querySelector(".viz-axis-title");
                        }
                        return true;
                    }
                    //match ctx for axis items
                    for (var i = -1; ++i < sel.data.length; ) {
                        if (DesignTimeUtils.matchCtx(sel.data[i], d.ctx)) {
                            return true;
                        }
                    }             
                    return false;
                });
                break;
            case "title":
                candidates = candidates.filter(function(d) {
                    return this.querySelector(".v-title");
                });
                break;
            default: //legend, title, chart
                break;
        }

        candidates.each(function() {
            targets.push(this);
        });
        
        if (hasClass(service.getRootNode().node(), clz)) {
            targets.push(service.getRootNode().node());
        }
        
        processSelection(behavior, service, {
            targets: targets,
            ctrlKeyPressed: false,
            force : true,
            suppressEvent: true,
            selectAllData : selectAllData
        });

        if (!targets.length) { //in case targets are invisible
            service.setStatus("selectedPropertyZoneData", sel);
        }
        
        return true;
    }

    return behavior;
});

define('sap/viz/controls/plugins/infochart/DimensionLabelRendererGenerator',[ "./getPropertiesByCtx", "./SVG"], function(
    getPropertiesByCtx, SVG) {  

  return {
    name : "dimensionLabelRenderer",
    fn : function(configs) {
      var dimensionLabelRenderer = function(context) {
        var props = getPropertiesByCtx(context, configs);
        var textNode;
        if (props) {
          textNode = SVG.create("text");

          if (props.textVisible !== false) {
            textNode.textContent = context.text;

            var style = "";
            var styleValue;
            
            if ((styleValue = props.fontColor)) {
              style += "fill:" + styleValue + ";";
            }else if(context.defaultColor){
              style += "fill:" + context.defaultColor + ";";
            }

            if ((styleValue = props.fontFamily)) {
              style += "font-family:" + styleValue + ";";
            }
            if ((styleValue = props.fontSize)) {
              style += "font-size:" + styleValue + ";";
            }
            if ((styleValue = props.fontWeight)) {
              style += "font-weight:" + styleValue + ";";
            }
            if ((styleValue = props.fontStyle)) {
              style += "font-style:" + styleValue + ";";
            }
            if (style) {
              textNode.setAttribute("style", style);
            }
          }
        }
        return textNode;
      };

      dimensionLabelRenderer.getPreferedSize = function(context){        
        var props = getPropertiesByCtx(context, configs);
        if(!props){
          return;
        }    

        if(props.textVisible && props.textVisible===false){
          return;
        }
        
        var cssString="";
        
        if(props.fontColor && props.fontColor!==""){
          cssString += 'fill:' + props.fontColor + ';';        
        }
        if(props.fontFamily && props.fontFamily!==""){
          cssString += 'font-family:' + props.fontFamily + ';';          
        }
        if(props.fontSize && props.fontSize!==""){
          cssString += 'font-size:' + props.fontSize + ';';
        }
        if(props.fontStyle && props.fontStyle!==""){
          cssString += 'font-style:' + props.fontStyle + ';';
        }        
        if(props.fontWeight && props.fontWeight!==""){
          cssString += 'font-weight:' + props.fontWeight + ';';
        }        

        var textSize = SVG.measureText(context.text, cssString);

        return {
          width : textSize.width,
          height : textSize.height
        }
      };
      return dimensionLabelRenderer;
    }
  };
});

// @formatter:off
// TODO Check if it could be moved to build script
define('sap/viz/controls/plugins/infochart/setup',[
    'sap/viz/controls/chart/adapters/PropFnGeneratorRegistry',
    './StackDecoratorGenerator', 
    './BarShapeRendererGenerator', 
    './StackedBarShapeRendererGenerator', 
    './CategoryAxisLabelRendererGenerator',
    './PieSliceRendererGenerator',
    './DataLabelRendererGenerator',
    './LineMarkerRendererGenerator',
    './LineRendererGenerator',
    './ScatterMarkerGenerator',
    './BubbleMarkerGenerator',
    './CombinationDataPointRendererGenerator',
    './interaction/DesignTimeBehavior',
    './DimensionLabelRendererGenerator'
  ],
function(PropFnGeneratorRegistry,
    StackDecoratorGenerator,
    BarShapeRendererGenerator,
    StackedBarShapeRendererGenerator,
    CategoryAxisLabelRendererGenerator,
    PieSliceRendererGenerator,
    DataLabelRendererGenerator,
    LineMarkerRendererGenerator,
    LineRendererGenerator,
    ScatterMarkerGenerator,
    BubbleMarkerGenerator,
    CombinationDataPointRendererGenerator,
    designTimeBehavior,
    DimensionLabelRendererGenerator) {

// @formatter:on

    function register(generator) {
        PropFnGeneratorRegistry.register(generator.name, generator.fn);
    }

    var generators = [StackDecoratorGenerator, BarShapeRendererGenerator, StackedBarShapeRendererGenerator, CategoryAxisLabelRendererGenerator, PieSliceRendererGenerator, DataLabelRendererGenerator, LineMarkerRendererGenerator, LineRendererGenerator, ScatterMarkerGenerator, BubbleMarkerGenerator, CombinationDataPointRendererGenerator,DimensionLabelRendererGenerator];
    generators.forEach(register);

    sap.viz.api.interaction.add(designTimeBehavior);

});

// @formatter:off
define('sap/viz/controls/contextmenu/ContextMenuConfig',[
    'sap/viz/controls/common/config/GlobalConfig'
],
function(GlobalConfig) {
// @formatter:on
    var ContextMenuConfig = {};

    /**
     * Config built-in menus and customized menu <br/>
     * Built-in menu (key name is "menu"): array of sections, each section is an array of menu names <br/>
     * customized menu (key name is "customizedMenu"): array of menu configurations, <br/>
     * Each customized menu item configuration follows the following nested format:
     * <pre>
     *      {
     *          name: 'unique-name-of-menu-item',
     *          text: 'text to show in the menu item',
     *          isVisible: function(vizType){
     *              // determine whether to show this menu item
     *              return true;
     *          },
     *          submenu: [
     *              // arrary of submenu configurations
     *          ]
     *      }
     * </pre>
     * To add a separator line, just add an item like this:
     * <pre>
     *      {
     *          name: 'blank'
     *      }
     * </pre>
     * Note that adjacent separators will be merged into one.<br/>
     * And if a separator appears as the first (or last) item in a menu, it'll be omitted.<br/>
     *
     * Once a customized menu item is clicked, an event will be fired, so just listen on the following event:
     * <pre>
     *          vizFrame.addEventListener(itemMenuName + 'Clicked', function(){
     *              // click event handler here.
     *          });
     * </pre>
     */
    ContextMenuConfig.instance = function() {
        return {
            'menu' : [
                ["sap.viz.controls.contextmenu.item.direction",
                 "sap.viz.controls.contextmenu.item.stacking"],
                ["sap.viz.controls.contextmenu.item.title",
                 "sap.viz.controls.contextmenu.item.legend",
                 "sap.viz.controls.contextmenu.item.mbclegend",
                 "sap.viz.controls.contextmenu.item.datalabels",
                 "sap.viz.controls.contextmenu.item.negative" ,
                 "sap.viz.controls.contextmenu.item.mnd",
                 "sap.viz.controls.contextmenu.item.gridlines",
                 "sap.viz.controls.contextmenu.item.setAxisScale"]
                /*, ["sap.viz.controls.contextmenu.item.comment",
                 "sap.viz.controls.contextmenu.item.charteditor"]*/
            ]
        };
    };
    
    GlobalConfig.registerUIConfig(GlobalConfig.DEFAULT_UICONFIG_TYPE_CONTEXTMENU, ContextMenuConfig);
    return ContextMenuConfig;
});

define('sap/viz/controls/contextmenu/ContextMenuEvent',[
// @formatter:off
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function(OOUtil, Event) {

    var ContextMenuEvent = function(type, target, data) {
        ContextMenuEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.contextmenu.ContextMenuEvent";
    };

    OOUtil.extend(ContextMenuEvent, Event);

    ContextMenuEvent.POPUP_CONTEXT_MENU = "popupContextMenu";
    ContextMenuEvent.REQUEST_LEGEND_COLOR = "chooseLegendColors";
    ContextMenuEvent.POPUP_CHART_EDITOR = 'popupChartEditor';

    ContextMenuEvent.MENU_ITEM_SELECTED = 'menuItemSelected';

    return ContextMenuEvent;
});

define('sap/viz/controls/contextmenu/views/MenuItem',[
    'jquery',
    'sap/viz/controls/common/constants/CSSConst'
], function($, CSSConst) {

    var cssPrefix = CSSConst.CONTEXTMENU_PREFIX;
    var cssMenuItem = cssPrefix + "MnuItm";
    var cssMenuItemIcon = cssPrefix + "MnuItmIco";
    var cssMenuItemText = cssPrefix + "MnuItmTxt";
    var cssMenuItemShow = cssPrefix + "MnuItm-Show";
    var cssMenuItemHide = cssPrefix + "MnuItm-Hide";
    var cssMenuItemIconShow = cssPrefix + "MnuItmIco-Show";
    var cssMenuItemIconHide = cssPrefix + "MnuItmIco-Hide";
    var cssMenuItemOpen = cssPrefix + "MnuItmOpen";
    var cssMenuItemSubmenu = CSSConst.COMMON_PREFIX + 'menu-list-suffix-icon-submenu';
    var cssMenuItemArrow = CSSConst.COMMON_PREFIX + 'havanaSharedSprite16';
    var cssDisabledMenuItem =  CSSConst.CONTEXTMENU_PREFIX  + "disabled";

    /**
     * Menu item UI
     * @constructor
     * @param {Object} config - Menu item configuration
     * <pre>
     *      MenuItemConfig = {
     *          name: "unique menu name",
     *          text: "displayed menu content"
     *          icon: "icon image path",
     *          tooltip: "tooltip text",
     *          click: function(){},
     *          submenu: Array<MenuItemConfig>
     *      }
     * </pre>
     * @param {sap.viz.controls.contextmenu.views.Menu} parentMenu - The menu this item belongs to
     */
    function MenuItem(config, menu, Menu) {
        this.__className = "sap.viz.controls.contextmenu.views.MenuItem";
        config = config || {};
        var dom = this.dom = document.createElement('li');
        dom.className = cssMenuItem;
        dom.innerHTML = '<div id="' + config.name + '" class="' + cssMenuItem +
            '"><div class="' + cssMenuItemIcon +
            '"></div><div class="' + cssMenuItemText + '">' +
            (config.text === undefined ? '' : config.text) +
            '</div><div class="' + cssMenuItemSubmenu + ' ' + cssMenuItemArrow + '"></div></div>';
        this._menuItemNode = dom.firstChild;
        this._iconNode = this._menuItemNode.firstChild;
        this._textNode = this._iconNode.nextSibling;
        this._arrowNode = this._menuItemNode.lastChild;
        this._arrowNode.style.visibility = 'hidden';

        this.name = config.name;
        this.menu = menu;

        if (config.icon) {
            this.setIcon(config.icon);
        }

        if (config.tooltip) {
            this.setTooltip(config.tooltip);
        }

        if (config.disabled) {
            this.setDisablaed(config.disabled);
        }

        if ($.isArray(config.submenu) && config.submenu.length) {
            this.setSubmenu(new Menu(config.submenu, menu));
        }

        // if disabled dont setup events
        if (!config.disabled) {
            /**
             * Customiable execution logic when user clicks the menu item
             * @method sap.viz.controls.contextmenu.views.MenuItem.prototype.onExecute
             */
            this.onExecute = config.click;

            this._setupEvents();
        }
    }

    /**
     * Setup event handlers
     * @private
     * @method sap.viz.controls.contextmenu.views.MenuItem.prototype._setupEvents
     */
    MenuItem.prototype._setupEvents = function() {
        var self = this;
        var dom$ = $(this.dom);
        function onMouseOver() {
            self.showSubmenu();
        }
        function onClick() {
            if (!self._submenu) {
                self._onExecute();
            }
        }
        dom$.on('mouseenter', onMouseOver).
            on('click', onClick);

        self._cleanupEvents = function() {
            dom$.off('mouseenter', onMouseOver).
                off('click', onClick);
        };
    };

    MenuItem.prototype.setDisablaed = function (disabled) {
        $(this.dom).toggleClass(cssDisabledMenuItem, !!disabled);
    };

    /**
     * Completely destroy this widget
     * @method sap.viz.controls.contextmenu.views.MenuItem.prototype.destroy
     */
    MenuItem.prototype.destroy = function() {
        if (this._submenu) {
            this._submenu.destroy();
        }
        if (this._cleanupEvents) { this._cleanupEvents(); }
        $(this.dom).remove();
    };

    /**
     * Get the text shown on this menu item
     * @method sap.viz.controls.contextmenu.views.MenuItem.prototype.text
     * @returns {string}
     */
    MenuItem.prototype.text = function() {
        return this._textNode.innerHTML;
    };

    /**
     * Set the text to show on this menu item
     * @method sap.viz.controls.contextmenu.views.MenuItem.prototype.setText
     * @param {string} text
     */
    MenuItem.prototype.setText = function(text) {
        this._textNode.innerHTML = text;
    };

    /**
     * Set the icon of this menu item
     * @method sap.viz.controls.contextmenu.views.MenuItem.prototype.setIcon
     * @param {string} iconImgPath
     */
    MenuItem.prototype.setIcon = function(iconImgPath) {
        this._iconNode.innerHTML = '<img src="' + iconImgPath + '" />';
    };

    /**
     * Set the tooltip of this menu item
     * @method sap.viz.controls.contextmenu.views.MenuItem.prototype.setTooltip
     * @param {string} tooltip
     */
    MenuItem.prototype.setTooltip = function(tooltip) {
        // FIXME: tooltip does not hide when menu is closed.
        _bindTooltip(this.dom, tooltip, this.menu.container());
    };

    /**
     * Get the submenu of this menu item
     * @method sap.viz.controls.contextmenu.views.MenuItem.prototype.submenu
     * @returns {sap.viz.controls.contextmenu.views.Menu}
     */
    MenuItem.prototype.submenu = function() {
        return this._submenu;
    };

    /**
     * Set or remove the submenu of this menu item.
     * @method sap.viz.controls.contextmenu.views.MenuItem.prototype.setSubmenu
     * @param {sap.viz.controls.contextmenu.views.Menu} menu
     */
    MenuItem.prototype.setSubmenu = function(menu) {
        this._submenu = menu;
        this._arrowNode.style.visibility = menu ? '' : 'hidden';
    };

    /**
     * Show submenu
     * @method sap.viz.controls.contextmenu.views.MenuItem.prototype.showSubmenu
     */
    MenuItem.prototype.showSubmenu = function() {
        this.menu.hideSubmenus();
        if (this._submenu) {
            $(this.dom).addClass(cssMenuItemOpen);
            this._submenu.show({
                dock: this.dom
            }, this.menu._hDir + '-down'); // Inherite parent menu's horizontal direction only
        }
    };

    /**
     * Hide submenu
     * @method sap.viz.controls.contextmenu.views.MenuItem.prototype.hideSubmenu
     */
    MenuItem.prototype.hideSubmenu = function() {
        if (this._submenu) {
            $(this.dom).removeClass(cssMenuItemOpen);
            this._submenu.hideSubmenus();
            this._submenu.hide();
        }
    };

    /**
     * Call custom execution logic and hide the menu when user clicks this menu item
     * @private
     * @method sap.viz.controls.contextmenu.views.MenuItem.prototype._onExecute
     */
    MenuItem.prototype._onExecute = function() {
        if (this.onExecute) {
            this.onExecute();
        }
        this.menu.hideAll();
    };

    // Tooltip Related (moved here from ContextMenu.js)------------------------------------------------------------

    // Tooltip offset relative to mouse event point
    var TOOLTIP_OFFSET = {
        top: 15,
        left: 20
    };

    var cssMenuItemTooltip = CSSConst.CONTEXTMENU_PREFIX  + "MnuItmTooltip";

    /**
    * Bind tooltip to a specified element.
    */
    function _bindTooltip(element, text, container) {
        var setTimeoutConst;
        var element$ = $(element);
        var container$ = $(container);
        element$.on('mouseover', function(event) {
            var tooltip$ = $(document.createElement('div')).addClass(cssMenuItemTooltip).appendTo($("body"));
            tooltip$.text(text);

            _fixedPosition(container$,tooltip$, _toRelativePosition(container$, _getCenterPosition(element$)),
                TOOLTIP_OFFSET);

            setTimeoutConst = setTimeout(function() {
                // fade in effect
                $("." + cssMenuItemTooltip).animate({
                    opacity: 1
                }, 500); // the effect lasts 500ms
            }, 1000); // the tooltip shows afet 1 second
        });
        element$.on("mouseout mousedown", function() {
            $("." + cssMenuItemTooltip).remove();
            clearTimeout(setTimeoutConst);
        });
    }

    /**
    * Get the center position of the element
    */
    function _getCenterPosition(element$) {
        var pos = element$.offset(),
            width = element$.innerWidth(),
            height = element$.innerHeight();
        return {
            pageX : pos.left + width/2,
            pageY : pos.top + height/2
        };
    }

    /**
    * Converts the position relative to the container
    */
    function _toRelativePosition(container$, position) {
        return {
            pageX: position.pageX - container$.offset().left,
            pageY: position.pageY - container$.offset().top
        };
    }

    /**
    * Put a new element to a position relative to the container, plus an additional offset (optional).
    * The position will be converted to fixed position.
    * The container's right and bottom border are tested, the offset direction may be reverted to prevent overflow.
    */
    function _fixedPosition(container$, newElement$, position, offset) {
        if(!offset) {
            offset = {
                top : 0,
                left : 0
            };
        }
        if (position) {
            var containerWidth = container$.innerWidth();
            var newElementWidth = newElement$.outerWidth();
            var left = position.pageX + offset.left;
            if (containerWidth < newElementWidth + left) {
                left = position.pageX - newElementWidth - offset.left;
            }
            var top = position.pageY + offset.top;
            var containerHeight = container$.innerHeight();
            var newElementHeight = newElement$.outerHeight();
            if (containerHeight < newElementHeight + top) {
                top = position.pageY - newElementHeight - offset.top;
            }
            newElement$.css({
                position : "fixed",
                left : container$.offset().left + left + "px",
                top : container$.offset().top + top + "px"
            });
        }
    }


    return MenuItem;
});


define('sap/viz/controls/contextmenu/views/CheckedMenuItem',[
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/contextmenu/views/MenuItem'
], function($, OOUtil, CSSConst, MenuItem) {

    var cssCheckedMenuItemShow = CSSConst.CONTEXTMENU_PREFIX  + "MnuItm-Show";
    var cssCheckedMenuItemHide = CSSConst.CONTEXTMENU_PREFIX  + "MnuItm-Hide";
    var cssCheckedMenuItemIconShow = CSSConst.CONTEXTMENU_PREFIX  + "MnuItmIco-Show";
    var cssCheckedMenuItemIconHide = CSSConst.CONTEXTMENU_PREFIX  + "MnuItmIco-Hide";

    /**
     * Blank Menu Item UI
     * @constructor
     * @extends sap.viz.controls.contextmenu.views.MenuItem
     */
    function CheckedMenuItem(config) {
        CheckedMenuItem.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.contextmenu.views.CheckedMenuItem";
        this._iconNode.style.display = 'none';
        this.setChecked(config.checked);
    }

    OOUtil.extend(CheckedMenuItem, MenuItem);

    /**
     * Set the checked status of this menu item
     * @method sap.viz.controls.contextmenu.views.CheckedMenuItem.prototype.setChecked
     * @param {Boolean} checked
     */
    CheckedMenuItem.prototype.setChecked = function(checked) {
        $(this.dom).toggleClass(cssCheckedMenuItemIconShow, !!checked).
            toggleClass(cssCheckedMenuItemIconHide, !checked);

        $(this._menuItemNode).toggleClass(cssCheckedMenuItemShow, !!checked).
            toggleClass(cssCheckedMenuItemHide, !checked);
    };

    /**
     * Get the checked status of this menu item
     * @method sap.viz.controls.contextmenu.views.CheckedMenuItem.prototype.checked
     * @returns {Boolean}
     */
    CheckedMenuItem.prototype.checked = function() {
        return $(this.dom).hasClass(cssCheckedMenuItemIconShow);
    };

    CheckedMenuItem.prototype._onExecute = function() {
        this.setChecked(!this.checked());
        CheckedMenuItem.superclass._onExecute.apply(this, arguments);
    };

    return CheckedMenuItem;

});




define('sap/viz/controls/contextmenu/views/BlankMenuItem',[
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/contextmenu/views/MenuItem'
], function($, OOUtil, CSSConst, LangManager, MenuItem) {

    var cssBlankMenuItem = CSSConst.CONTEXTMENU_PREFIX  + "blank-MnuItem";
    var cssBlankMenuItemText = CSSConst.CONTEXTMENU_PREFIX  + 'blank-MnuItmTxt';

    /**
     * Blank Menu Item UI
     * @constructor
     * @extends sap.viz.controls.contextmenu.views.MenuItem
     */
    function BlankMenuItem() {
        BlankMenuItem.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.contextmenu.views.BlankMenuItem";

        $(this.dom).addClass(cssBlankMenuItem);
        $(this._textNode).addClass(cssBlankMenuItemText).
            text(LangManager.get('VIZ_CONTEXTMENU_NO_MENU_ITEMS'));
    }

    OOUtil.extend(BlankMenuItem, MenuItem);

    return BlankMenuItem;

});




define('sap/viz/controls/contextmenu/views/MenuSeparator',[
    'sap/viz/controls/common/constants/CSSConst'
], function(CSSConst) {

    /**
     * Draw a horizontal line to separate menu items
     * @constructor
     */
    function MenuSeparator() {
        this.__className = "sap.viz.controls.contextmenu.views.MenuSeparator";
        var dom = this.dom = document.createElement('div');
        dom.className = CSSConst.CONTEXTMENU_PREFIX + "MnuItem-separator";
    }

    return MenuSeparator;

});



define('sap/viz/controls/contextmenu/views/Menu',[
    'jquery',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/contextmenu/views/MenuItem',
    'sap/viz/controls/contextmenu/views/CheckedMenuItem',
    'sap/viz/controls/contextmenu/views/BlankMenuItem',
    'sap/viz/controls/contextmenu/views/MenuSeparator'
], function($, CSSConst, MenuItem, CheckedMenuItem, BlankMenuItem, MenuSeparator) {

    var cssMenu = CSSConst.PREFIX + 'contextmenu';
    var cssMenuList = CSSConst.CONTEXTMENU_PREFIX + 'list';
    var cssMenuListHovered = CSSConst.CONTEXTMENU_PREFIX + 'list-hovered';

    var doc = document;
    var win = window;

    /**
     * Menu UI, configurable and dynamically extensible, support multi-level menus
     * @constructor
     * @param {Object[]} [itemsConfig] - An array of menu item configurations
     * @param {sap.viz.controls.contextmenu.views.Menu} [parentMenu] - If given, this is a submenu, 
     * if not, this is a root menu
     * @param {DOMElment} [container] - The UI boundary that this menu should not exceed
     */
    function Menu(itemsConfig, parentMenu, container) {
        this.__className = "sap.viz.controls.contextmenu.views.Menu";

        var dom = this.dom = doc.createElement('div');
        dom.className = cssMenu;
        dom.innerHTML = '<ul class="' + cssMenuList + '"></ul>';

        this._listNode = dom.firstChild;
        this._items = [];
        this._parentMenu = parentMenu;
        this.setContainer(container);
        this._opennedSubmenuCount = 0;
        this._shown = 0;

        this._setupEvents();
        this.create(itemsConfig);
    }

    /**
     * The vertical margin offset of the menu (in px). Used to better align the submenu with the menu item.
     * @type {Number}
     */
    Menu.prototype.marginOffset = 6;

    /**
     * Setup event handlers
     * @private
     * @method sap.viz.controls.contextmenu.views.Menu.prototype._setupEvents
     */
    Menu.prototype._setupEvents = function() {
        var self = this;
        function nodeIsInMenuTree(menu, node){
            var result = false;
            for(var m = menu; m && !result; m = m._parentMenu){
                result = $.contains(m.dom, node);
            }
            return result;
        }
        function onDocMouseDown(evt) {
            if (self._shown && self._opennedSubmenuCount === 0 && !nodeIsInMenuTree(self, evt.target)) {
                self.hideAll();
            }
        }
        function onWindowBlur() {
            self.hide();
        }
        $(doc).on('mousedown', onDocMouseDown);
        $(win).on('blur', onWindowBlur);

        this._cleanupEvents = function() {
            $(doc).off('mousedown', onDocMouseDown);
            $(win).off('blur', onWindowBlur);
        };
    };

    /**
     * Create menu item according to different menu item types.
     * @private
     * @method sap.viz.controls.contextmenu.views.Menu.prototype._createMenuItem
     * @param {Object} config - menu item configuration
     */
    Menu.prototype._createMenuItem = function(config) {
        config = config || {};

        var menuItemType = {
            checked: CheckedMenuItem,
            blank: BlankMenuItem,
            separator: MenuSeparator
        }[config.menuItemType] || MenuItem;

        return new menuItemType(config, this, Menu);
    };

    /**
     * Re-create menu items according to given configurations.
     * @method sap.viz.controls.contextmenu.views.Menu.prototype.create
     * @param {Object[]} [itemsConfig] - An array of menu item configurations
     */
    Menu.prototype.create = function(items) {
        items = $.isArray(items) ? items : [];
        this._destroyChildren();
        $(this._listNode).toggleClass(cssMenuListHovered, !!items.length);

        if (!items.length) {
            items.push({
                menuItemType: 'blank'
            });
        }

        for (var i = 0; i < items.length; ++i) {
            var item = this._createMenuItem(items[i]);
            if (item) {
                this.addChild(item);
            }
        }
    };

    /**
     * Destroy child menu items
     * @private
     * @method sap.viz.controls.contextmenu.views.Menu.prototype.create
     */
    Menu.prototype._destroyChildren = function() {
        for (var i = 0; i < this._items.length; ++i) {
            var item = this._items[i];
            if (item.destroy) {
                item.destroy();
            }
        }
        this._listNode.innerHTML = '';
        this._items = [];
    };

    /**
     * Completely destroy this widget
     * @method sap.viz.controls.contextmenu.views.Menu.prototype.destroy
     */
    Menu.prototype.destroy = function() {
        this._destroyChildren();
        this._cleanupEvents();
        $(this.dom).remove();
    };

    /**
     * Set a container DOM node to constrain this menu UI
     * @method sap.viz.controls.contextmenu.views.Menu.prototype.setContainer
     * @param {DOMElement} container
     */
    Menu.prototype.setContainer = function(container) {
        this._container = container || (this._parentMenu && this._parentMenu.container()) || doc.body;
    };

    /**
     * Get the container DOM node
     * @method sap.viz.controls.contextmenu.views.Menu.prototype.setContainer
     * @returns {DOMElement}
     */
    Menu.prototype.container = function() {
        return this._container;
    };

    /**
     * Check whether the menu is shown
     * @method sap.viz.controls.contextmenu.views.Menu.prototype.isShown
     * @returns {Boolean}
     */
    Menu.prototype.isShown = function() {
        return !!this._shown;
    };

    /**
     * Limit the popup position within the constraining container
     * @private
     * @method sap.viz.controls.contextmenu.views.Menu.prototype._calcPopupPosition
     * @param {Object} position - An object with 3 posible properties: left, top and dock
     * @param {string} [preferredDirection='right-down'] - the preferred popup direction for this menu
     * @returns {Object}
     */
    Menu.prototype._calcPopupPosition = function(position, preferredDirection) {
        var dom = this.dom;
        var container = this._container;
        var left = 0;
        var top = 0;
        var dock;
        if (position) {
            left = position.left || 0;
            top = position.top || 0;
            dock = position.dock;
        }

        preferredDirection = String(preferredDirection).toLowerCase().split('-');
        var horizontalPreferredDir = preferredDirection[0];
        var verticalPreferredDir = preferredDirection[1];

        // default direction is right-down
        this._hDir = 'right';
        this._vDir = 'down';

        if (container) {
            // try to constrain the menu within the container
            var containerHeight = container.clientHeight;
            var containerWidth = container.clientWidth;
            var menuWidth = dom.offsetWidth;
            var menuHeight = dom.offsetHeight;
            var containerPos = $(container).offset();
            var containerLeft = containerPos.left;
            var containerTop = containerPos.top;

            if (dock) {
                // this is a submenu
                var dockPos = $(dock).offset();
                var dockLeft = dockPos.left;
                var dockTop = dockPos.top;
                var dockWidth = dock.offsetWidth;
                var dockHeight = dock.offsetHeight;
                var marginOffset = this.marginOffset;

                if ((horizontalPreferredDir === 'left' &&
                        containerLeft <= dockLeft - menuWidth) ||
                    (horizontalPreferredDir !== 'left' &&
                        containerLeft + containerWidth < dockLeft + dockWidth + menuWidth)) {
                    // need to popup to left
                    left = dockLeft - menuWidth;
                    this._hDir = 'left';
                } else {
                    // need to popup to right
                    left = dockLeft + dockWidth;
                }

                if ((verticalPreferredDir === 'up' &&
                    containerTop <= dockTop + dockHeight - menuHeight) ||
                    (verticalPreferredDir !== 'up' &&
                    containerTop + containerHeight < dockTop + menuHeight)) {
                    // need to popup upward
                    top = dockTop + dockHeight - menuHeight + marginOffset;
                    this._vDir = 'up';
                } else {
                    // need to popup downward
                    top = dockTop - marginOffset;
                }
            } else {
                // this is a root menu
                // NOTE: the given position is relative to the container
                if ((horizontalPreferredDir === 'left' && left >= menuWidth) ||
                    (horizontalPreferredDir !== 'left' && containerWidth < left + menuWidth)) {
                    // need to popup to left
                    left -= menuWidth;
                    this._hDir = 'left';
                }

                if ((verticalPreferredDir === 'up' && top >= menuHeight) ||
                    (verticalPreferredDir !== 'up' && containerHeight < top + menuHeight)) {
                    // need to popup upward
                    top -= menuHeight;
                    this._vDir = 'up';
                }

                left += containerLeft;
                top += containerTop;
            }

            left -= doc.body.scrollLeft;
            top -= doc.body.scrollTop;
        }

        return {
            left: left,
            top: top
        };
    };

    /**
     * Show this menu
     * @method sap.viz.controls.contextmenu.views.Menu.prototype.show
     * @param {Object} [position] - the position that this menu should show
     * @param {string} [preferredDirection='right-down'] - the preferred popup direction for this menu
     */
    Menu.prototype.show = function(position, preferredDirection) {
        if (!this._shown) {
            if (this._parentMenu) {
                this._parentMenu._opennedSubmenuCount++;
            }
            this._shown = 1;

            // display the dom in the dom tree first
            // so we can calculate it's position correctly
            doc.body.appendChild(this.dom);
            var domStyle = this.dom.style;
            domStyle.display = 'block';

            var pos = this._calcPopupPosition(position, preferredDirection);

            domStyle.left = pos.left + 'px';
            domStyle.top = pos.top + 'px';
        }
    };

    /**
     * Hide this menu
     * @method sap.viz.controls.contextmenu.views.Menu.prototype.hide
     */
    Menu.prototype.hide = function() {
        if (this._shown) {
            if (this._parentMenu) {
                this._parentMenu._opennedSubmenuCount--;
            }
            this._shown = 0;
            var dom = this.dom;
            dom.style.display = 'none';
            if (dom.parentNode) {
                dom.parentNode.removeChild(this.dom);
            }
        }
    };

    /**
     * Hide all the submenus and parent menus as well as this menu itself.
     * @method sap.viz.controls.contextmenu.views.Menu.prototype.hideAll
     */
    Menu.prototype.hideAll = function() {
        if (this._parentMenu) {
            this._parentMenu.hideAll();
        } else {
            this.hideSubmenus();
            this.hide();
        }
    };

    /**
     * Get all menu items in this menu
     * @method sap.viz.controls.contextmenu.views.Menu.prototype.children
     */
    Menu.prototype.children = function() {
        return this._items;
    };

    /**
     * Add a menu item to this menu
     * @method sap.viz.controls.contextmenu.views.Menu.prototype.addChild
     */
    Menu.prototype.addChild = function(menuItem) {
        var idx = this._items.indexOf(menuItem);
        if (idx < 0) {
            this._items.push(menuItem);
            this._listNode.appendChild(menuItem.dom);
        }
    };

    /**
     * Remove a menu item from this menu. Note the removed menu item is not destroyed.
     * @method sap.viz.controls.contextmenu.views.Menu.prototype.removeChild
     */
    Menu.prototype.removeChild = function(menuItem) {
        var idx = this._items.indexOf(menuItem);
        if (idx >= 0) {
            this._items.splice(idx, 1);
            this._listNode.removeChild(menuItem.dom);
        }
    };

    /**
     * Hide all submenus of this menu.
     * @method sap.viz.controls.contextmenu.views.Menu.prototype.hideSubmenus
     */
    Menu.prototype.hideSubmenus = function() {
        this._items.forEach(function(item) {
            if (item.hideSubmenu) {
                item.hideSubmenu();
            }
        });
    };

    return Menu;
});

// @formatter:off
define('sap/viz/controls/contextmenu/constants/MenuItemConst',[
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/managers/LangManager'
],
function(ChartConst, LangManager) {
// @formatter:on
    var MenuItemConst = {};

    MenuItemConst.getText = function(text) {
        return LangManager.get(text);
    };

    MenuItemConst.DEFAULT = {
        "icon" : "/contextmenu/uncheck.png"
    };

    MenuItemConst.LEGEND = (function() {
        var supportType = {};
        supportType[ChartConst.TYPE_BAR] = true;
        supportType[ChartConst.TYPE_COLUMN] = true;
        supportType[ChartConst.TYPE_STACKED_BAR] = true;
        supportType[ChartConst.TYPE_STACKED_COLUMN] = true;
        supportType[ChartConst.TYPE_DUAL_BAR] = true;
        supportType[ChartConst.TYPE_DUAL_COLUMN] = true;
        supportType[ChartConst.TYPE_3D_COLUMN] = true;
        supportType[ChartConst.TYPE_LINE] = true;
        supportType[ChartConst.TYPE_AREA] = true;
        supportType[ChartConst.TYPE_COMBINATION] = true;
        supportType[ChartConst.TYPE_DUAL_LINE] = true;
        supportType[ChartConst.TYPE_DUAL_COMBINATION] = true;
        supportType[ChartConst.TYPE_PIE] = true;
        supportType[ChartConst.TYPE_DONUT] = true;
        supportType[ChartConst.TYPE_PIE_WITH_DEPTH] = true;
        supportType[ChartConst.TYPE_GEO_BUBBLE] = true;
        supportType[ChartConst.TYPE_GEO_CHOROPLETH] = true;
        supportType[ChartConst.TYPE_GEO_PIE] = true;
        supportType[ChartConst.TYPE_GEO_MAP] = true;
        supportType[ChartConst.TYPE_SCATTER] = true;
        supportType[ChartConst.TYPE_BUBBLE] = true;
        supportType[ChartConst.TYPE_SCATTER_MATRIX] = true;
        supportType[ChartConst.TYPE_HEATMAP] = true;
        supportType[ChartConst.TYPE_TREEMAP] = true;
        supportType[ChartConst.TYPE_RADAR] = true;
        supportType[ChartConst.TYPE_BOXPLOT] = true;
        supportType[ChartConst.TYPE_TAG_CLOUD] = true;
        supportType[ChartConst.TYPE_FUNNEL] = true;
        supportType[ChartConst.TYPE_PC] = true;
        return {
            "name" : "sap.viz.controls.contextmenu.item.legend",
            "text" : "VIZ_CONTEXTMENU_SHOW_LEGEND",
            "supportType" : supportType
        };
    })();

    MenuItemConst.DATALABELS = (function() {
        var supportType = {};
        supportType[ChartConst.TYPE_BAR] = true;
        supportType[ChartConst.TYPE_COLUMN] = true;
        supportType[ChartConst.TYPE_STACKED_BAR] = true;
        supportType[ChartConst.TYPE_STACKED_COLUMN] = true;
        supportType[ChartConst.TYPE_DUAL_BAR] = true;
        supportType[ChartConst.TYPE_DUAL_COLUMN] = true;
        supportType[ChartConst.TYPE_LINE] = true;
        supportType[ChartConst.TYPE_AREA] = true;
        supportType[ChartConst.TYPE_COMBINATION] = true;
        supportType[ChartConst.TYPE_DUAL_LINE] = true;
        supportType[ChartConst.TYPE_DUAL_COMBINATION] = true;
        supportType[ChartConst.TYPE_PIE] = true;
        supportType[ChartConst.TYPE_DONUT] = true;
        supportType[ChartConst.TYPE_GEO_BUBBLE] = true;
        supportType[ChartConst.TYPE_GEO_CHOROPLETH] = true;
        supportType[ChartConst.TYPE_GEO_PIE] = true;
        supportType[ChartConst.TYPE_SCATTER] = true;
        supportType[ChartConst.TYPE_BUBBLE] = true;
        supportType[ChartConst.TYPE_SCATTER_MATRIX] = true;
        supportType[ChartConst.TYPE_HEATMAP] = true;
        supportType[ChartConst.TYPE_TREEMAP] = true;
        supportType[ChartConst.TYPE_RADAR] = true;
        supportType[ChartConst.TYPE_GEO_MAP] = true;
        supportType[ChartConst.TYPE_WATERFALL] = true;
        return {
            "name" : "sap.viz.controls.contextmenu.item.datalabels",
            "text" : "VIZ_CONTEXTMENU_SHOW_DATALABELS",
            "supportType" : supportType
        };
    })();

    MenuItemConst.DIRECTION = (function() {
        var supportType = {};
        supportType[ChartConst.TYPE_3D_COLUMN] = true;
        supportType[ChartConst.TYPE_LINE] = true;
        supportType[ChartConst.TYPE_AREA] = true;
        supportType[ChartConst.TYPE_COMBINATION] = true;
        supportType[ChartConst.TYPE_DUAL_LINE] = true;
        supportType[ChartConst.TYPE_DUAL_COMBINATION] = true;
        supportType[ChartConst.TYPE_BOXPLOT] = true;
        supportType[ChartConst.TYPE_WATERFALL] = true;
        return {
            "name" : "sap.viz.controls.contextmenu.item.direction",
            "text" : {
                "horizontal" : "VIZ_CONTEXTMENU_VERTICAL",
                "vertical" : "VIZ_CONTEXTMENU_HORIZONTAL"
            },
            "supportType" : supportType
        };
    })();
    
    MenuItemConst.STACKING = (function() {
        var supportType = {};
        supportType[ChartConst.TYPE_STACKED_BAR] = true;
        supportType[ChartConst.TYPE_STACKED_COLUMN] = true;
        supportType[ChartConst.TYPE_AREA] = true;
        return {
            "name" : "sap.viz.controls.contextmenu.item.stacking",
            "text" : {
                "full" : "VIZ_CONTEXTMENU_NORMAL_STACKING",
                "normal" : "VIZ_CONTEXTMENU_FULL_STACKING"
            },
            "supportType" : supportType
        };
    })();
    
    MenuItemConst.COMMENT = (function() {
        var supportType = {};
        supportType[ChartConst.TYPE_BAR] = true;
        supportType[ChartConst.TYPE_COLUMN] = true;
        supportType[ChartConst.TYPE_STACKED_BAR] = true;
        supportType[ChartConst.TYPE_STACKED_COLUMN] = true;
        supportType[ChartConst.TYPE_DUAL_BAR] = true;
        supportType[ChartConst.TYPE_DUAL_COLUMN] = true;
        supportType[ChartConst.TYPE_LINE] = true;
        supportType[ChartConst.TYPE_AREA] = true;
        supportType[ChartConst.TYPE_COMBINATION] = true;
        supportType[ChartConst.TYPE_DUAL_LINE] = true;
        supportType[ChartConst.TYPE_DUAL_COMBINATION] = true;
        supportType[ChartConst.TYPE_PIE] = true;
        supportType[ChartConst.TYPE_DONUT] = true;
        supportType[ChartConst.TYPE_GEO_BUBBLE] = true;
        supportType[ChartConst.TYPE_GEO_CHOROPLETH] = true;
        supportType[ChartConst.TYPE_GEO_PIE] = true;
        supportType[ChartConst.TYPE_SCATTER] = true;
        supportType[ChartConst.TYPE_BUBBLE] = true;
        supportType[ChartConst.TYPE_SCATTER_MATRIX] = true;
        supportType[ChartConst.TYPE_HEATMAP] = true;
        supportType[ChartConst.TYPE_TREEMAP] = true;
        supportType[ChartConst.TYPE_RADAR] = true;
        supportType[ChartConst.TYPE_BOXPLOT] = true;
        return {
            "name" : "sap.viz.controls.contextmenu.item.comment",
            "text" : "VIZ_CONTEXTMENU_INSERT_COMMENT",
            "supportType" : supportType
        };
    })();
    
    MenuItemConst.CHARTEDITOR = (function() {
        var supportType = {};
        supportType[ChartConst.TYPE_BAR] = true;
        supportType[ChartConst.TYPE_COLUMN] = true;
        supportType[ChartConst.TYPE_STACKED_BAR] = true;
        supportType[ChartConst.TYPE_STACKED_COLUMN] = true;
        supportType[ChartConst.TYPE_DUAL_BAR] = true;
        supportType[ChartConst.TYPE_DUAL_COLUMN] = true;
        supportType[ChartConst.TYPE_3D_COLUMN] = true;
        supportType[ChartConst.TYPE_LINE] = true;
        supportType[ChartConst.TYPE_AREA] = true;
        supportType[ChartConst.TYPE_COMBINATION] = true;
        supportType[ChartConst.TYPE_DUAL_LINE] = true;
        supportType[ChartConst.TYPE_DUAL_COMBINATION] = true;
        supportType[ChartConst.TYPE_PIE] = true;
        supportType[ChartConst.TYPE_DONUT] = true;
        supportType[ChartConst.TYPE_PIE_WITH_DEPTH] = true;
        supportType[ChartConst.TYPE_GEO_BUBBLE] = true;
        supportType[ChartConst.TYPE_GEO_CHOROPLETH] = true;
        supportType[ChartConst.TYPE_GEO_PIE] = true;
        supportType[ChartConst.TYPE_SCATTER] = true;
        supportType[ChartConst.TYPE_BUBBLE] = true;
        supportType[ChartConst.TYPE_SCATTER_MATRIX] = true;
        supportType[ChartConst.TYPE_HEATMAP] = true;
        supportType[ChartConst.TYPE_TREEMAP] = true;
        supportType[ChartConst.TYPE_RADAR] = true;
        supportType[ChartConst.TYPE_BOXPLOT] = true;
        supportType[ChartConst.TYPE_TAG_CLOUD] = true;
        supportType[ChartConst.TYPE_TREE] = true;
        supportType[ChartConst.TYPE_NETWORK] = true;
        supportType[ChartConst.TYPE_FUNNEL] = true;
        supportType[ChartConst.TYPE_PC] = true;
        return {
            "name" : "sap.viz.controls.contextmenu.item.charteditor",
            "text" : "VIZ_CONTEXTMENU_MENU_CHART_EDITOR",
            "supportType" : supportType
        };
    })();

    MenuItemConst.MBCLEGEND = (function() {
        var supportType = {};
        supportType[ChartConst.TYPE_GEO_CHOROPLETH] = true;
        supportType[ChartConst.TYPE_HEATMAP] = true;
        supportType[ChartConst.TYPE_TREEMAP] = true;
        supportType[ChartConst.TYPE_TAG_CLOUD] = true;
        return {
            "name" : "sap.viz.controls.contextmenu.item.mbclegend",
            "text" : "VIZ_CONTEXTMENU_CHANGE_MBCLEGEND_COLOR",
            "supportType" : supportType
        };
    })();
    
    MenuItemConst.MND = (function() {
        var supportType = {};
        supportType[ChartConst.TYPE_BAR] = true;
        supportType[ChartConst.TYPE_COLUMN] = true;
        supportType[ChartConst.TYPE_STACKED_BAR] = true;
        supportType[ChartConst.TYPE_STACKED_COLUMN] = true;
        supportType[ChartConst.TYPE_DUAL_BAR] = true;
        supportType[ChartConst.TYPE_DUAL_COLUMN] = true;
        supportType[ChartConst.TYPE_3D_COLUMN] = true;
        supportType[ChartConst.TYPE_LINE] = true;
        supportType[ChartConst.TYPE_AREA] = true;
        supportType[ChartConst.TYPE_COMBINATION] = true;
        supportType[ChartConst.TYPE_DUAL_LINE] = true;
        supportType[ChartConst.TYPE_DUAL_COMBINATION] = true;
        supportType[ChartConst.TYPE_PIE] = true;
        supportType[ChartConst.TYPE_DONUT] = true;
        supportType[ChartConst.TYPE_PIE_WITH_DEPTH] = true;
        supportType[ChartConst.TYPE_GEO_BUBBLE] = true;
        supportType[ChartConst.TYPE_GEO_CHOROPLETH] = true;
        supportType[ChartConst.TYPE_GEO_PIE] = true;
        supportType[ChartConst.TYPE_SCATTER] = true;
        supportType[ChartConst.TYPE_BUBBLE] = true;
        supportType[ChartConst.TYPE_SCATTER_MATRIX] = true;
        supportType[ChartConst.TYPE_HEATMAP] = true;
        supportType[ChartConst.TYPE_TREEMAP] = true;
        supportType[ChartConst.TYPE_RADAR] = true;
        supportType[ChartConst.TYPE_BOXPLOT] = true;
        supportType[ChartConst.TYPE_TAG_CLOUD] = true;
        supportType[ChartConst.TYPE_TREE] = true;
        supportType[ChartConst.TYPE_NETWORK] = true;
        supportType[ChartConst.TYPE_FUNNEL] = true;
        supportType[ChartConst.TYPE_PC] = true;
        return {
            "name" : "sap.viz.controls.contextmenu.item.mnd",
            "text" : "VIZ_CONTEXTMENU_SHOW_MND",
            "tooltip" : "VIZ_CONTEXTMENU_SHOW_MND_TOOLTIP",
            "supportType" : supportType
        };
    })();
    
    MenuItemConst.TITLE = {
        "name" : "sap.viz.controls.contextmenu.item.title",
        "text" : "VIZ_CONTEXTMENU_SHOW_TITLE",
        "notSupportType" : {
            "viz/geomap" : true
        }
    };
    
    MenuItemConst.SETAXISSCALE = (function() {
        var supportType = {};
        supportType[ChartConst.TYPE_BAR] = true;
        supportType[ChartConst.TYPE_COLUMN] = true;
        supportType[ChartConst.TYPE_STACKED_BAR] = true;
        supportType[ChartConst.TYPE_STACKED_COLUMN] = true;
        supportType[ChartConst.TYPE_DUAL_BAR] = true;
        supportType[ChartConst.TYPE_DUAL_COLUMN] = true;
        supportType[ChartConst.TYPE_LINE] = true;
        supportType[ChartConst.TYPE_AREA] = true;
        supportType[ChartConst.TYPE_COMBINATION] = true;
        supportType[ChartConst.TYPE_DUAL_LINE] = true;
        supportType[ChartConst.TYPE_DUAL_COMBINATION] = true;
        supportType[ChartConst.TYPE_SCATTER] = true;
        supportType[ChartConst.TYPE_BUBBLE] = true;
        supportType[ChartConst.TYPE_BOXPLOT] = true;
        supportType[ChartConst.TYPE_WATERFALL] = true;
        return {
            "name" : "sap.viz.controls.contextmenu.item.setAxisScale",
            "text" : "VIZ_CONTEXTMENU_SET_AXIS_SCALE",
            "supportType" : supportType
        };
    })();
    
    MenuItemConst.GRIDLINES = (function() {
        var supportType = {};
        supportType[ChartConst.TYPE_BAR] = true;        
        supportType[ChartConst.TYPE_COLUMN] = true;        
        supportType[ChartConst.TYPE_STACKED_BAR] = true;    
        supportType[ChartConst.TYPE_STACKED_COLUMN] = true;
        supportType[ChartConst.TYPE_DUAL_BAR] = true;
        supportType[ChartConst.TYPE_DUAL_COLUMN] = true;
        supportType[ChartConst.TYPE_LINE] = true;
        supportType[ChartConst.TYPE_AREA] = true;
        supportType[ChartConst.TYPE_SCATTER_MATRIX] = true;
        supportType[ChartConst.TYPE_COMBINATION] = true;        
        supportType[ChartConst.TYPE_DUAL_LINE] = true;
        supportType[ChartConst.TYPE_SCATTER] = true;        
        supportType[ChartConst.TYPE_BUBBLE] = true;
        supportType[ChartConst.TYPE_DUAL_COMBINATION] = true;
        


        return {
            "name" : "sap.viz.controls.contextmenu.item.gridlines",
            "text" : "VIZ_CONTEXTMENU_SHOW_GRIDLINES",
            "supportType" : supportType
        };
    })();
    
    MenuItemConst.NEGATIVE = (function() {
        var supportType = {};
        supportType[ChartConst.TYPE_GEO_BUBBLE] = true;
        supportType[ChartConst.TYPE_BUBBLE] = true;
        return {
            "name" : "sap.viz.controls.contextmenu.item.negative",
            "text" : "VIZ_CONTEXTMENU_SHOW_NEGATIVE_VALUES",
            "supportType" : supportType
        };
    })();

    return MenuItemConst;
});

// @formatter:off
define('sap/viz/controls/contextmenu/MenuModelGenerator',[
    'jquery',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/VizUtils',
    'sap/viz/controls/common/utils/DatasetUtil',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/property/VizPropertyZone',
    'sap/viz/controls/common/metadata/MetadataFactory',
    'sap/viz/controls/contextmenu/constants/MenuItemConst'
], function ($,ChartConst, Utils, VizUtils, DatasetUtil, FeedItemType, FeedUtils, ChartTypeUtil, LangManager, VizPropertyZone, MetadataFactory, MenuItemConst) {
// @formatter:on

    var defaultMetaIndex = (function (map) {
        var name, idx = {};

        for (name in map) {
            if ( map[name]["name"] ) {
                idx[ map[name]["name"] ] = map[name];
            }
        }

        return idx;
    })(MenuItemConst);

    /** whether {id} support {vizType} */
    function isSupport (id, vizType) {
        var e = defaultMetaIndex[id];
        if (!e) {
            return true;
        }
        if ( e.supportType ) {
            return !!e.supportType[vizType];
        }
        if ( e.notSupportType ) {
            return !e.notSupportType[vizType];
        }
        return true;
    }

    var defaultConfigIndex = {
        "separator": function (id, chartModelProvider, chartProxyProvider, vizType, propertyZone) {
            return {
                type: "separator"
            };
        },

        "sap.viz.controls.contextmenu.item.direction": function (id, chartModelProvider, chartProxyProvider, vizType, propertyZone) {
            var direction = ChartTypeUtil.getDirection( chartModelProvider().type() );
            return {
                id: id,
                label: LangManager.get( defaultMetaIndex[id].text[direction] )
            };
        },

        "sap.viz.controls.contextmenu.item.stacking": function (id, chartModelProvider, chartProxyProvider, vizType, propertyZone) {
            var stacking = ChartTypeUtil.getStacking( chartModelProvider().type() );
            return {
                id: id,
                label: LangManager.get( defaultMetaIndex[id].text[stacking] )
            };
        },

        "sap.viz.controls.contextmenu.item.title": function (id, chartModelProvider, chartProxyProvider, vizType, propertyZone) {
            var isChecked = function(vizType) {
                var properties = chartProxyProvider().getProperties();
                properties = properties || {};
                properties.title = properties.title || {
                    visible : true
                };
                var checkVisible = properties.title.visible;
                return checkVisible;
            };

            return {
                id: id,
                label: LangManager.get( defaultMetaIndex[id].text ),
                checked: isChecked(vizType)
            };
        },

        "sap.viz.controls.contextmenu.item.legend": function (id, chartModelProvider, chartProxyProvider, vizType, propertyZone) {
            var isChecked = function(vizType) {
                var properties = chartProxyProvider().getProperties();
                properties = properties || {};
                properties.legend = properties.legend || {
                    visible : true
                };
                var checkVisible = properties.legend.visible;
                if (vizType.search('geo') > -1) {
                    var sizeLegend = properties.sizeLegend;
                    checkVisible = checkVisible && (sizeLegend ? sizeLegend.visible : true);
                }
                return checkVisible;
            };

            return {
                id: id,
                label: LangManager.get( defaultMetaIndex[id].text ),
                checked: isChecked(vizType)
            };
        },

        "sap.viz.controls.contextmenu.item.mbclegend": function (id, chartModelProvider, chartProxyProvider, vizType, propertyZone) {
            var isVisible = function(vizType) {
                // ghost chart don't show mbc legend
                if(chartProxyProvider().isFakeChart()){
                    return false;
                }
                // only chart have color measure will show mbc legend
                var feedItems = chartModelProvider().feedingItems();
                for (var i = 0; i < feedItems.length; i++) {
                    var feedItem/*FeedItem*/ = feedItems[i];
                    // for tag cloud chart
                    if(vizType === ChartConst.TYPE_TAG_CLOUD && feedItem.id() === "tagFamily" && feedItem.values().length === 0) {
                            return false;
                    }
                    //for tree map chart
                    if(vizType === ChartConst.TYPE_TREEMAP && feedItem.id() === "rectangleColor" && feedItem.values().length === 0) {
                            return false;
                    }
                }

                return true;
            };
            if ( !isVisible(vizType) ) { return; }

            var isChecked = function(vizType) {
                var properties = chartProxyProvider().getProperties();
                properties = properties || {};
                properties.legend = properties.legend || {
                    visible : true
                };
                var checkVisible = properties.legend.visible;
                if (vizType.search('geo') > -1) {
                    var sizeLegend = properties.sizeLegend;
                    checkVisible = checkVisible && (sizeLegend ? sizeLegend.visible : true);
                }
                return checkVisible;
            };

            return {
                id: id,
                label: LangManager.get( defaultMetaIndex[id].text )
            };
        },

        "sap.viz.controls.contextmenu.item.datalabels": function (id, chartModelProvider, chartProxyProvider, vizType, propertyZone) {
            var needQueryRendererProperty = function(type) {
                if (type === 'info/bar' || type === 'info/column' || type === 'info/line' || type === 'info/horizontal_line' || type === 'info/donut') {
                    return true;
                }
                return false;
            }
            var isChecked = function(vizType) {  
                var chartProxy = chartProxyProvider();
                var properties = chartProxy.getProperties();
                properties = properties || {};
                if (ChartTypeUtil.isInfoChart(vizType) && properties.plotArea) {
                    properties.dataLabel = properties.plotArea.dataLabel;
                }
                properties.dataLabel = properties.dataLabel || {
                    visible : false
                };
                if (!needQueryRendererProperty(vizType)) {                   
                    return properties.dataLabel.visible;
                } else {
                    var isChecked = false;
                    var currentPropertyZones = chartProxy.getPropertyZones();
                    var zone = new VizPropertyZone(VizPropertyZone.DATA_LABEL);
                    chartProxy.setPropertyZones([zone]);
                    var propertyZones = chartProxy.getPropertyZones();
                    if (propertyZones) {
                        var textVisibleProperties = chartProxy.queryProperties({
                            'propertyZones' : propertyZones, 
                            'propertyFields' : {
                                'textVisible' : true
                            }, 
                            'chartType' : vizType
                        });
                        if (textVisibleProperties.textVisible === undefined) {
                            isChecked = properties.dataLabel.visible;
                        } else if (textVisibleProperties.textVisible === null || textVisibleProperties.textVisible === true) {
                            isChecked = true;
                        }
                    }
                    chartProxy.setPropertyZones(currentPropertyZones);
                    return isChecked;
                }
            };

            return {
                id: id,
                label: LangManager.get( defaultMetaIndex[id].text ),
                checked: isChecked(vizType)
            };
        },

        "sap.viz.controls.contextmenu.item.mnd": function (id, chartModelProvider, chartProxyProvider, vizType, propertyZone) {
            var isVisible = function(vizType) {
                var supportMND = false;
                var feeds;
                var k = -1;
                
                var metadata = MetadataFactory.get(vizType), defs;
                if (metadata) {
                    defs = metadata.getBindingDefs();
                    for(k = 0; k < defs.length; k++) {
                        if (defs[k].mndMode() !== 'none') {
                            supportMND = true;
                            break;
                        }
                    }
                }
                if (!supportMND && !ChartTypeUtil.isMultipleChart(vizType) && ChartTypeUtil.supportMultiChart(vizType)) {
                    var multiType = ChartTypeUtil.toMultiChartType(vizType);
                    metadata = MetadataFactory.get(multiType);
                    defs = metadata.getBindingDefs();
                    for(k = 0; k < defs.length; k++) {
                        if (defs[k].mndMode() !== 'none') {
                            supportMND = true;
                            break;
                        }
                    }
                }

                if (!supportMND) { return false; }

                var feedItems = chartModelProvider().feedingItems();
                for (var i = 0; i < feedItems.length; i++) {
                    var feedItem/*FeedItem*/ = feedItems[i];
                    if (feedItem.type() === FeedItemType.MEASURE && feedItem.values().length > 0) {
                        return true;
                    }
                }
                return false;
            };
            if ( !isVisible(vizType) ) { return; }

            return {
                id: id,
                label: LangManager.get( defaultMetaIndex[id].text ),
                tooltip: LangManager.get( defaultMetaIndex[id].tooltip ),
                checked: chartModelProvider().isMNDVisible()
            };
        },

        "sap.viz.controls.contextmenu.item.setAxisScale": function (id, chartModelProvider, chartProxyProvider, vizType, propertyZone) {
            if (ChartTypeUtil.isFullStacking(chartModelProvider().type())) {
                return;
            }

            var isVisible = function(vizType) {
                if(ChartTypeUtil.isMultipleChart(vizType)){
                    return false;
                }

                return true;
            };
            if ( !isVisible(chartModelProvider().type()) ) { return; }
            
            return {
                id: id,
                label: LangManager.get( defaultMetaIndex[id].text )
            };
        },

        /* NOT USED
        "sap.viz.controls.contextmenu.item.comment": function (id, chartModelProvider, chartProxyProvider, vizType, propertyZone) {
            return {
                id: id,
                label: LangManager.get( defaultMetaIndex[id].text )
            };
        },
        */

        /* NOT USED
        "sap.viz.controls.contextmenu.item.charteditor": function (id, chartModelProvider, chartProxyProvider, vizType, propertyZone) {
            return {
                id: id,
                label: LangManager.get( defaultMetaIndex[id].text )
            };
        },
        */

        "sap.viz.controls.contextmenu.item.negative": function (id, chartModelProvider, chartProxyProvider, vizType, propertyZone) {
            var isChecked = function(vizType) {
                var properties = chartProxyProvider().getProperties();
                properties = properties || {};
                properties.plotArea = properties.plotArea || {
                    showNagativeValues : false
                };
                var checkVisible = properties.plotArea.showNegativeValues;
                return checkVisible;
            };
            if ( !DatasetUtil.hasNegativeMeasureValue(
                    chartModelProvider().type(),
                    chartModelProvider().feedingItems(),
                    chartProxyProvider().getDataset()
                    ) ) {
                return;
            }
            return {
                id: id,
                label: LangManager.get( defaultMetaIndex[id].text ),
                checked: isChecked(vizType)
            };
        },
        "sap.viz.controls.contextmenu.item.gridlines": function (id, chartModelProvider, chartProxyProvider, vizType, propertyZone) {
            if (ChartTypeUtil.isMultipleChart(chartModelProvider().type())) {
                return;
            }
            var isChecked = function(vizType) {
                var properties = chartProxyProvider().getProperties();
                properties = properties || {};
                var chartType = chartModelProvider().type();
                var path;
                if (ChartTypeUtil.isVizChart(chartType)) {
                    if (ChartTypeUtil.isHorizontal(chartType)) {
                        path = 'xAxis.gridline.visible';
                    } else {
                        path = 'yAxis.gridline.visible';                       
                    }
                } else {                 
                    path = 'plotArea.gridline.visible';
                }
                return !!getProp(properties, path);
            };

            return {
                id: id,
                label: LangManager.get( defaultMetaIndex[id].text ),
                checked: isChecked(vizType)
            };
        }
    };

    function getProp(obj, propPath) {
        var path = propPath.split('.'),
            i, len, prop = obj;

        for (i = 0, len = path.length; i < len; i++) {
            prop = prop[ path[i] ];
            if ( prop === undefined ) {
                return undefined;
            }
        }
        return prop;
    }
    
    function goThroughMenuModel(menuModel, menuItemConfig, chartModelProvider, chartProxyProvider, vizType, propertyZone) {
        // deal menu group array
        var menuConfig = menuModel.reduce(function(list, e) {
            if (Utils.isArray(e)) {
                Array.prototype.push.apply(list, e);
                list.push({
                    type: "separator"
                });
            } else {
                if ( !( Utils.isBoolean(e.visible) && e.visible === false ) ) {
                    list.push(e);
                }
            }

            return list;
        }, [])
        .map(function(e) { // replace refrecene of built-in with built-in menuItem
            var f;
            if (e && e.id && e.id.charAt(7) === ":" && e.id.substring(0, 7) === "builtIn") {
                e.id = e.id.substring(8);
                f = menuItemConfig.generate([e.id], chartModelProvider, chartProxyProvider,
                    vizType, propertyZone)[0];
                // copy props from original menu model to the built-in menu model
                // so that the original properties keep remaining
                if (f) {
                    $.extend(true, f, e);
                }
                return f;
            }
            else {
                return e;
            }
        })
        .reduce(function(list, e) {
            // filter null items which maybe generated from builtin
            if (!e) {
                return list;
            }
            // dedupelicate neighboured separators
            if ( e.type === "separator" && list[ list.length -1 ] && list[ list.length -1 ].type === "separator" ) {
                return list;
            }

            list.push(e);
            if (e.subMenus) {
                e.subMenus = goThroughMenuModel(e.subMenus);
            }
            return list;
        }, []);

        // remove the first and last separator
        if ( menuConfig[0] && menuConfig[0].type === "separator" ) {
            menuConfig.shift();
        }
        if ( menuConfig[ menuConfig.length -1 ] && menuConfig[ menuConfig.length -1 ].type === "separator" ) {
            menuConfig.pop();
        }
        return menuConfig;
    }

    function MenuModelGenerator () {
        this.__className = "sap.viz.controls.contextmenu.MenuModelGenerator";
        this._index = {};
    }

    MenuModelGenerator.isSupport = isSupport;

    /* merge customized menu config model with built-in menu model */
    MenuModelGenerator.prototype.merge = function (menuModel, chartModelProvider, chartProxyProvider, vizType, propertyZone) {
        return goThroughMenuModel(menuModel, this, chartModelProvider, chartProxyProvider, vizType, propertyZone);
    };

    MenuModelGenerator.prototype.generate = function (names, chartModelProvider, chartProxyProvider, vizType, propertyZone) {

        var menuConfig = this, list;

        list = names.filter(function (id) {
            if (id === "separator") {
                return true;
            }
            return isSupport(id, vizType);
        }).map(function (id) {
            var fn = (menuConfig._index[id] || defaultConfigIndex[id]);
            if ( !Utils.isFunction(fn) ) {
                return fn;
            }
            return fn ? fn(id, chartModelProvider, chartProxyProvider, vizType, propertyZone) : null;
        }).filter(function (e) {
            return !!e;
        });

        if (list[0] && list[0].type === "separator") {
            list.shift();
        }
        if (list[list.length -1] && list[list.length -1].type === "separator") {
            list.pop();
        }

        return list;
    };

    MenuModelGenerator.prototype.put = function (id, config) {
        this._index[id] = config;
    };

    return MenuModelGenerator;
});

// @formatter:off
define('sap/viz/controls/contextmenu/DefaultMenuItemHandlers',[
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/utils/VizUtils',
    'sap/viz/controls/common/utils/DatasetUtil',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/property/VizPropertyZone'
], function (ChartConst, VizUtils, DatasetUtil, FeedItemType, FeedUtils, ChartTypeUtil, VizPropertyZone) {
// @formatter:on

    var index = {
        // "sap.viz.controls.chart.showTitle":
        "sap.viz.controls.contextmenu.item.title": function (chartModel, chartProxy, vizType, propertyZone) {
            var curProperties = chartProxy.getProperties();
            //get current visible flag according to current properties
            var visible = false;
            var maxHeight = 0;
            if (curProperties && curProperties.title) {
                visible = !curProperties.title.visible;
            }
            
            //set visible flag back
            var newProperties = {};
            newProperties.title = {};
            newProperties.title.visible = visible;
            
            chartProxy.setProperties(newProperties, {trigger : "CONTEXT_MENU"});
        },

        "sap.viz.controls.contextmenu.item.datalabels": function (chartModel, chartProxy, vizType, propertyZone, menuItem) {
            var needUpdateRendererProperty = function(type) {
                if (type === 'info/bar' || type === 'info/column' || type === 'info/line' || type === 'info/horizontal_line' || type === 'info/donut') {
                    return true;
                }
                return false;
            }
            var visible;
            if (menuItem && menuItem.hasOwnProperty('checked')) {
                visible = !menuItem.checked;
            } else {
                var curProperties = chartProxy.getProperties();
                if (ChartTypeUtil.isInfoChart(vizType)) {
                    visible = !curProperties.plotArea.dataLabel.visible;
                } else {
                    visible = !curProperties.dataLabel.visible;
                }
            }
            
            if (!needUpdateRendererProperty(vizType)) {
                var newProperties = {};
                if (ChartTypeUtil.isInfoChart(vizType)) {
                    newProperties.plotArea = {};
                    newProperties.plotArea.dataLabel = {};
                    newProperties.plotArea.dataLabel.visible = visible;
                } else {
                    newProperties.dataLabel = {};
                    newProperties.dataLabel.visible = visible;
                }
                chartProxy.setProperties(newProperties, {trigger : "CONTEXT_MENU"});
            } else {          
                // reset textVisible and iconVisible property of data label for chart in compose room
                var props = {};
                props['textVisible'] = visible;
                if (visible) {
                    props['dataLabelVisible'] = visible;
                }
                var lastZone = chartProxy.getPropertyZones();
                var zone = new VizPropertyZone(VizPropertyZone.DATA_LABEL);
                chartProxy.setPropertyZones([zone]);
                var propertyZones = chartProxy.getPropertyZones();
                if (propertyZones) {
                    chartProxy.updateProperties({
                        'propertyZones' : propertyZones,
                        'properties' : props,
                        'chartType' : vizType
                    }, {trigger : "CONTEXT_MENU"});
                }
                chartProxy.setPropertyZones(lastZone);
            }
        },

        "sap.viz.controls.contextmenu.item.direction": function (chartModel, chartProxy, vizType, propertyZone) {
            var curChartType = chartModel.type();
            var direction = ChartTypeUtil.getDirection(curChartType);
            if (direction == ChartConst.DIRECTION_VERTICAL) {
                direction = ChartConst.DIRECTION_HORIZONTAL;
            } else {
                direction = ChartConst.DIRECTION_VERTICAL;
            }
            
            //change chart type according to the current chartType and direction
            var newChartType = ChartTypeUtil.changeDirection(curChartType, direction);
            chartModel.type(newChartType);
        },

        "sap.viz.controls.contextmenu.item.legend": function (chartModel, chartProxy, vizType, propertyZone) {
            var curProperties = chartProxy.getProperties();
            //get current visible flag according to current properties
            var visible = false;
            if (curProperties && curProperties.legend) {
                visible = !curProperties.legend.visible;
            } else if (curProperties && curProperties.sizeLegend) {
                visible = !curProperties.sizeLegend.visible;
            } else if (curProperties && curProperties.geomap) {
                // Handle Geo map case, always use the first layer's visiblity setting.
                var layers = curProperties.geomap.layers;
                visible = !layers[0].options.legendVisible;
            }

            //set visible flag back
            var newProperties = {};
            newProperties.legend = {};
            newProperties.legend.visible = visible;
            if (chartModel.type().search('geo') > -1 || chartModel.type().search('bubble') > -1) {
                newProperties.sizeLegend = {};
                newProperties.sizeLegend.visible = visible;
            }

            chartProxy.setProperties(newProperties, {trigger : "CONTEXT_MENU"});
        },

        "sap.viz.controls.contextmenu.item.mbclegend": function (chartModel, chartProxy, vizType, propertyZone) {
            // DO NOTHING
        },

        "sap.viz.controls.contextmenu.item.mnd": function (chartModel, chartProxy, vizType, propertyZone) {
            var visible = chartModel.isMNDVisible();
            chartModel.isMNDVisible(!visible);
        },

        "sap.viz.controls.contextmenu.item.setAxisScale": function (chartModel, chartProxy, vizType, propertyZone) {
            var properties = chartProxy.getProperties();

            if ( ChartTypeUtil.isInfoChart(vizType) ) {
                if ( ["valueAxis", "valueAxis2"].indexOf(propertyZone) === -1 ) {
                    propertyZone = null;
                }
            }
            else {
                var valueAxis = VizUtils.getValueAxis(vizType);
                if ( !valueAxis || valueAxis.indexOf(propertyZone) === -1 ) {
                    propertyZone = null;
                }
            }
            chartProxy.setAxisScale(propertyZone);
        },

        "sap.viz.controls.contextmenu.item.negative": function (chartModel, chartProxy, vizType, propertyZone) {
            var curProperties = chartProxy.getProperties();
            curProperties = curProperties || {};
            curProperties.plotArea = curProperties.plotArea || {};
            var showNegativeValues = !curProperties.plotArea.showNegativeValues;

            var newProperties = {};
            newProperties.plotArea = {};
            newProperties.plotArea.showNegativeValues = showNegativeValues;

            chartProxy.setProperties(newProperties);
        },
        
        "sap.viz.controls.contextmenu.item.gridlines": function (chartModel, chartProxy, vizType, propertyZone) {
            var curProperties = chartProxy.getProperties();
            curProperties = curProperties || {};
            var chartType = chartModel.type();
            var path,visible;
            var prop = {};
            if (ChartTypeUtil.isVizChart(chartType)) {
                if (ChartTypeUtil.isHorizontal(chartType)) {
                    curProperties.xAxis = curProperties.xAxis || {};
                    path = ['xAxis.gridline.visible'];
                } else if (chartType === 'viz/scatter_matrix'){
                    curProperties.xAxis = curProperties.xAxis || {};
                    curProperties.yAxis = curProperties.yAxis || {};
                    path = ['xAxis.gridline.visible', 'yAxis.gridline.visible'];
                } else {
                    curProperties.xAxis = curProperties.yAxis || {};
                    path = ['yAxis.gridline.visible'];                 
                }
            } else {
                curProperties.plotArea = curProperties.plotArea || {};
                path = ['plotArea.gridline.visible'];
            }
                prop = getProp(curProperties, path);
                chartProxy.setProperties(prop, {trigger : "CONTEXT_MENU"});          
        },
        
		
        "sap.viz.controls.contextmenu.item.stacking": function (chartModel, chartProxy, vizType, propertyZone) {
            var curChartType = chartModel.type();
            var stacking = ChartTypeUtil.getStacking(curChartType);
            if (stacking == ChartConst.STACKING_NORMAL) {
                stacking = ChartConst.STACKING_FULL;
            } else {
                stacking = ChartConst.STACKING_NORMAL;
            }
            
            //change chart type according to the current chartType and stacking
            var newChartType = ChartTypeUtil.changeStacking(curChartType, stacking);
            chartModel.type(newChartType);
        }
    };
    
    function getProp(root, vizPath) {
        var prop = {};
        for (var j = 0; j < vizPath.length; j++){
            var props = prop;
            var node = root;
            var path = vizPath[j].split('.');
            for (var i = 0; i < path.length - 1; i++) {
                node = node[path[i]];
                props[path[i]] = {};
                props = props[path[i]];
        }
        //visible value changes for every menu item click
        props[path[path.length - 1]] = !node[path[path.length - 1]];            
        }
        return prop;
    }
       
    function getHandler (id) {
        return index[id];
    }

    return {
        get: getHandler
    };
});

// @formatter:off
define('sap/viz/controls/contextmenu/ContextMenu',[
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/VizControlBase',
    'sap/viz/controls/common/config/GlobalConfig',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/contextmenu/ContextMenuConfig',
    'sap/viz/controls/contextmenu/ContextMenuEvent',
    'sap/viz/controls/contextmenu/views/Menu',
    'sap/viz/controls/contextmenu/MenuModelGenerator',
    'sap/viz/controls/contextmenu/DefaultMenuItemHandlers'
    ],
function($, OOUtil, Utils, FeedUtils, VizControlBase, GlobalConfig, 
    ChartTypeUtil, ContextMenuConfig, ContextMenuEvent, Menu, MenuModelGenerator, DefaultMenuItemHandlers) {
// @formatter:on

    var ContextMenu = function(div/*HTMLDivElement*/, uiConfig) {
        ContextMenu.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.contextmenu.ContextMenu";

        //container
        this._div$ = $(div);
        this._uiConfig = uiConfig ? uiConfig : ContextMenuConfig.instance();
        this._uiConfig.contextMenuAssetFolderPath = GlobalConfig.defaultAssetsRoot() + '/common/assets';
        this._vizModelProvider = $.proxy(this._vizModel, this);
        this._vizProxyProvider = $.proxy(this._vizProxy, this);
        this._menu = new Menu();
        this._menuModelGenerator = new MenuModelGenerator();

        registeryDefaultHandler(this);
    };

    OOUtil.extend(ContextMenu, VizControlBase);

    function location2propertyZone (location) {
        // used to convet location string "sap.viz.controls.contextmenu.location.legend" to propertyZone string "legend".
        if ( !location ) { return location; }

        if ( location.charAt(37) === "." && location.substring(0, 38) === "sap.viz.controls.contextmenu.location." ) {
            return location.substring(38);            
        }
        return location;
    }

    function registeryDefaultHandler (contextmenu) {
        contextmenu.addEventListener("menuItemSelected", function (event) {
            var handler = DefaultMenuItemHandlers.get(event.data.menuItem.id);
            if (handler) {
                handler( contextmenu._vizModelProvider(),
                     contextmenu._vizProxyProvider(),
                     event.data.vizType,
                     location2propertyZone(event.data.location),
                     event.data.menuItem);
            }

            if (event.data.menuItem.id === "sap.viz.controls.contextmenu.item.mbclegend") {
                // dispatch event as another event name for this item
                contextmenu._dispatchEvent(new ContextMenuEvent("chooseLegendColors", contextmenu));
            }
        });
    }

    function currying (fn) {
        var carryArgs = Array.prototype.slice.call(arguments, 1);
        return function () {
            return fn.apply(this, carryArgs.concat( Array.prototype.slice.call(arguments) ) );
        };
    }

    function dispatchSelectedEvent (contextmenu, ctx) {
        var e = new ContextMenuEvent("menuItemSelected", contextmenu, ctx);
        contextmenu._dispatchEvent(e);
    }

    /**
     * handler for chart model properties changed
     */
    ContextMenu.prototype._onVizModelChanged = function(e) {
    };

    /**
     * Create a contextmenu view using specified menu model or default menu models.
     * @method sap.viz.controls.contextmenu.ContextMenu.prototype.create
     * @param {String} location is a string which represents which the contextmenu create for
     * @param {Array} menuModel is an array of menu item models which define the menu item
     * @return the contextmenu object itself
     * @example <caption>Sample Code:</caption>
     * <pre>
     *      contextmenu.create("sap.viz.controls.chart.datapoint", [
     *          { id: "sap.viz.controls.contextmenu.item.filter",
     *            label: "Filter This Datapoint"
     *          }
     *      ]).show(somePosition);
     * </pre>
     * Once the menuItem was triggered. A "menuItemSelected" event will be dispatched from contextmenu
     * instance, and through event.data.menuItem.id we can judge which menuItem is triggered.
     * @example <caption>Sample Code:</caption>
     * <pre>
     *      contextmenu.addEventListener("menuItemSelected", function (event) {
     *          if (event.data.menuItem.id === "sap.viz.controls.contextmenu.item.filter") {
     *              // do something
     *          }
     *      });
     * </pre>
     */
    ContextMenu.prototype.create = function (location, menuModel) {
        var vizType = ChartTypeUtil.getVizType(this._vizModel().type()),
            contextmenu = this,
            menuConfig,
            names;

        location = location || null; // make null if undefined

        if (menuModel) { // merge customized menu with built-in menu
            menuConfig = this._menuModelGenerator.merge(menuModel, this._vizModelProvider, this._vizProxyProvider,
                vizType, location2propertyZone(location));
        }

        if (!menuConfig) { // use default builtin items
            names = this._uiConfig.menu.reduce(function (list, b) {
                if (list.length >0) { list.push("separator"); }
                Array.prototype.push.apply(list, b);
                return list;
            }, []);
            menuConfig = this._menuModelGenerator.generate(names, this._vizModelProvider, this._vizProxyProvider,
                vizType, location2propertyZone(location));
        }

        function toMenuModel (menuConfig) {
            return menuConfig.map(function (e) {
                return {
                    name: e.id,
                    text: e.label,
                    tooltip: e.tooltip,
                    icon: e.icon && e.icon.url, // icon url
                    menuItemType: ( Utils.isBoolean(e.checked) ? "checked" : e.type ),
                    checked: e.checked,
                    disabled: (Utils.isBoolean(e.enabled) ? !e.enabled : false),
                    submenu: e.subMenus && toMenuModel(e.subMenus),
                    click: currying(dispatchSelectedEvent, contextmenu, {
                        menuItem: e,
                        vizType: vizType,
                        location: location
                    })
                };
            });
        }

        this._menu.create( toMenuModel(menuConfig) );

        return this;
    };

    /**
     * Show context menu at some position.
     * @param {Object} position
     * @method sap.viz.controls.contextmenu.ContextMenu.prototype.show
     */
    ContextMenu.prototype.show = function(position) {
        // Now the container should exist
        this._menu.setContainer(this._div$.parent().get(0));

        var vizType = ChartTypeUtil.getVizType(this._vizModel().type());
        if (ChartTypeUtil.isValid(vizType)) {
            this._menu.show(position && {
                left: position.pageX,
                top: position.pageY
            });
        }
    };

    /**
     * Hide context menu.
     * @method sap.viz.controls.contextmenu.ContextMenu.prototype.hide
     */
    ContextMenu.prototype.hide = function() {
        // this._menu$.find('*').removeData().off();
        this._menu.hide();
    };

    /**
     * Serialize ContextMenu to a JSON object.<br/>
     * @method sap.viz.controls.contextmenu.ContextMenu.prototype.save
     * @return {JSON}
     */
    ContextMenu.prototype.save = function() {
        //mndvisible
        var retJson = {};
        return retJson;
    };

    /**
     * Deserialize ContextMenu from JSON object.<br/>
     * @method sap.viz.controls.contextmenu.ContextMenu.prototype.load
     * @param {JSON} valueJSON
     */
    ContextMenu.prototype.load = function(valueJSON) {
        //mndvisible, default value : false
        // var isMNDVisible = (valueJSON['isMNDVisible'] === true);
        // if (isMNDVisible && this._vizModel()) {
            // this._vizModel().isMNDVisible(isMNDVisible);
        // }
    };

    /**
     * Add a menuItem<br/>
     * @method sap.viz.controls.contextmenu.ContextMenu.prototype.addMenuItem
     * @param {String} menuItem id
     * @param {Function|Object} a function return the config object or the config object
     * @deprecated
     */
    ContextMenu.prototype.addMenuItem = function(id, config) {
        this._menuModelGenerator.put(id, config);
        this._addDefaultMenuItem(id);
    };

    ContextMenu.prototype._addDefaultMenuItem = function (id) {
        var contained = this._uiConfig.menu.some(function (ls) {
            return ls.some(function (e) {
                return id === e;
            });
        });

        if (!contained) {
            this._uiConfig.menu.push([id]);
        }
        return !contained;
    };

    ContextMenu.prototype.getEventNames = function () {
        var ret = [
            ContextMenuEvent.MENU_ITEM_SELECTED,
            ContextMenuEvent.REQUEST_LEGEND_COLOR
            ];
        return ret;
    };

    return ContextMenu;
});

// @formatter:off
define('sap/viz/controls/custombutton/CustomButtonConfig',[
    'sap/viz/controls/common/config/GlobalConfig'
],
function(GlobalConfig) {
// @formatter:on
    var CustomButtonConfig = {};

    CustomButtonConfig.instance = function() {
        return {
            "visible" : true,
            "title" : "Button"//label of tooltip, please using a string after translation
        };
    };
    
    GlobalConfig.registerUIConfig(GlobalConfig.DEFAULT_UICONFIG_TYPE_CUSTOMBUTTON, CustomButtonConfig);
    return CustomButtonConfig;
});

define('sap/viz/controls/custombutton/CustomButtonEvent',[
// @formatter:off
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function( OOUtil, Event) {
    var CustomButtonEvent = function(type, target, data) {
        CustomButtonEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.custombutton.CustomButtonEvent";
    };
    OOUtil.extend(CustomButtonEvent, Event);

    CustomButtonEvent.CLICK_CUSTOM_BUTTON = "clickCustomButton";
    return CustomButtonEvent;
});

define('sap/viz/controls/custombutton/CustomButton',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/VizControlBase',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/custombutton/CustomButtonConfig',
    'sap/viz/controls/custombutton/CustomButtonEvent'],
// @formatter:on
function($, OOUtil, Utils, VizControlBase, CSSConst, CustomButtonConfig, CustomButtonEvent) {
    /**
     *  Filter Menu View
     */
    var CustomButton = function(div/*HTMLDivElement*/, uiConfig) {
        CustomButton.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.custombutton.CustomButton";

        this._div = div;
        this._uiConfig = uiConfig ? uiConfig : CustomButtonConfig.instance();
        this._button$ = null;
        this._icon$ = null;
        this._createChildren();
    };

    OOUtil.extend(CustomButton, VizControlBase);

    /**
     * Create CustomButton content.
     */
    CustomButton.prototype._createChildren = function() {
        if(this._uiConfig.visible !== false) {
            this._button$ = $(document.createElement("div")).appendTo(this._div);
            this._button$.addClass(CSSConst.CUSTOMBUTTON_PREFIX + "button");
            this._icon$ = $(document.createElement("div")).appendTo(this._button$);
            if (this._uiConfig.title) {
                this.setTitle(this._uiConfig.title);
            }
            var _this = this;
            this._button$.click(function(event) {
                var eventData = _this._button$.offset();
                _this._dispatchEvent(new CustomButtonEvent(CustomButtonEvent.CLICK_CUSTOM_BUTTON, _this, eventData));
            });
        }
    };
    /**
     * Set icon
     * @param {Object} iconCss
     */
    CustomButton.prototype.setIcon = function(iconCss) {
        if(arguments.length > 0) {
            this._icon$.removeAttr('class');
            this._icon$.addClass(iconCss);
            return this;
        }
    };
    /**
     * Set tooltip
     * @param {Object} iconCss
     */
    CustomButton.prototype.setTitle = function(title) {
        if(arguments.length > 0) {
            this._icon$.attr("title", title);
            return this;
        }
    };
    return CustomButton;
});

// @formatter:off
define('sap/viz/controls/common/VizControlHost',[
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/EventDispatcher',
    'sap/viz/controls/common/VizControlBase'],
function(OOUtil, EventDispatcher, VizControlBase) {
// @formatter:on

    /**
     * Host class for Viz UI control to group sub viz controls. For example VizFrame is a host control to group
     * Chart, FilterBar, ContextMenu, Annotation and CustomButton controls.
     * @class sap.viz.controls.common.VizControlHost
     * @extends sap.viz.controls.common.VizControlBase
     */
    var VizControlHost = function VizControlHost() {
        VizControlHost.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.common.VizControlHost";
        this._children = [];
    };

    OOUtil.extend(VizControlHost, VizControlBase);

    /**
     * @override
     */
    VizControlHost.prototype._onConnect = function(value) {
        VizControlHost.superclass._onConnect.apply(this, arguments);
        for (var i = 0; i < this._children.length; i++) {
            this._children[i].connect(value);
        }
    };

    /**
     * @override
     */
    VizControlHost.prototype._onDisconnect = function() {
        VizControlHost.superclass._onDisconnect.apply(this, arguments);
        for (var i = 0; i < this._children.length; i++) {
            this._children[i].disconnect();
        }
    };

    /**
     * Add child for the container, as well as the child's function name list and event type list.
     * @param {@link sap.viz.controls.common.VizControlBase} child
     * @param {Array} functions
     * @param {Array} events
     * @protected
     */
    VizControlHost.prototype._addChild = function(child, functions, events) {
        //add child if child is not null
        if (!child) {
            return;
        }
        this._children.push(child);

        var _this = this;

        functions && functions.forEach(function(fName) {
            _this[fName] = function() {
                return child[fName].apply(child, arguments);
            };
        });

        events && events.forEach(function(eName) {
            child.addEventListener(eName, function(event) {
                // TODO: Add event.clone() to avoid dispatch original event out.
                _this._dispatchEvent(event);
            });
        });

    };


    /**
     * @override
     */
    VizControlHost.prototype.destroy = function() {
        var child;

        while ( (child = this._children.shift()) ) {
            try {
                child.destroy();
            } catch (e) {}
        }

        VizControlHost.superclass.destroy.apply(this, arguments);
    };



    return VizControlHost;
});

// @formatter:off
define('sap/viz/controls/filterbar0/FilterBarConfig',[
    'sap/viz/controls/common/config/GlobalConfig'
],
function(GlobalConfig) {
// @formatter:on
    var FilterBarConfig = {};

    FilterBarConfig.instance = function() {
        return {
            "module" : {
                "visible" : true
            }
        };
    };
    
    GlobalConfig.registerUIConfig(GlobalConfig.DEFAULT_UICONFIG_TYPE_FILTERBAR0, FilterBarConfig);
    return FilterBarConfig;
});

// @formatter:off
define('sap/viz/controls/frame/VizFrameConfig',[
    'sap/viz/controls/common/config/GlobalConfig',
    'sap/viz/controls/annotation/AnnotationConfig',
    'sap/viz/controls/annotationcontrol/AnnotationControlConfig',
    'sap/viz/controls/chart/ChartConfig',
    'sap/viz/controls/filterbar0/FilterBarConfig',
    'sap/viz/controls/contextmenu/ContextMenuConfig',
    'sap/viz/controls/custombutton/CustomButtonConfig',
    'sap/viz/controls/common/constants/ChartConst'
],
function(GlobalConfig, AnnotationConfig, AnnotationControlConfig, ChartConfig, FilterBarConfig, ContextMenuConfig, CustomButtonConfig, ChartConst) {
// @formatter:on
    var VizFrameConfig = {};

    VizFrameConfig.instance = function() {
        var result = {
            "enableAnnotation" : false,
            "enableAnnotationControl" : false,
            "enableContextMenu": true,
            "enableFilterMenu" : true,
            "enableFilterBar" : true,
            "enableTitleEditor": true,
            "enableSettingButton" : true,
            "enableFullScreenButton" : true,
            "enablePlayControl": true,
            "enableResponsiveLegend" : false,
            "useCustomizedContextMenu" : false,
            "controls" : {
                "chart" : ChartConfig.instance(),
                "filterBar" : FilterBarConfig.instance(),
                "contextMenu" : ContextMenuConfig.instance(),
                "annotation" : AnnotationConfig.instance(),
                "annotationControl" : AnnotationControlConfig.instance(),
                "settingButton" : CustomButtonConfig.instance(),
                "fullScreenButton" : CustomButtonConfig.instance()
            }
        };

        return result;
    };
    
    GlobalConfig.registerUIConfig(GlobalConfig.DEFAULT_UICONFIG_TYPE_FRAME, VizFrameConfig);
    return VizFrameConfig;
});

define('sap/viz/controls/frame/VizFrameEvent',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function($, OOUtil, Event) {

    /**
     * The VizFrame Event.
     * @class sap.viz.controls.frame.VizFrameEvent
     */
    var VizFrameEvent = function(type, target, data) {
        VizFrameEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.frame.VizFrameEvent";
    };
    OOUtil.extend(VizFrameEvent, Event);

    /**
     * Event name for filter changed.
     * @memberof sap.viz.controls.frame.VizFrameEvent
     * @member FILTERS_CHANGED
     * @static
     */
    VizFrameEvent.FILTERS_CHANGED = "filtersChanged";

    /**
     * type: 'contextMenuChanged',
     */
    VizFrameEvent.CONTEXT_MENU_CHANGED = 'contextMenuChanged';

    /**
     * Event name for entering full screen.
     * @memberof sap.viz.controls.frame.VizFrameEvent
     * @member ENTER_FULL_SCREEN
     * @static
     */
    VizFrameEvent.ENTER_FULL_SCREEN = "enterFullScreen";
    /**
     * Event name for exiting full screen.
     * @memberof sap.viz.controls.frame.VizFrameEvent
     * @member EXIT_FULL_SCREEN
     * @static
     */
    VizFrameEvent.EXIT_FULL_SCREEN = "exitFullScreen";
    /**
     * type: 'addComment'
     */
    VizFrameEvent.ADD_COMMENT = 'addComment';
    /**
     * type: 'addFilter'
     */
    VizFrameEvent.ADD_FILTER = 'addFilter';
    /**
     * type: 'chooseLegendColors'
     */
    VizFrameEvent.REQUEST_LEGEND_COLOR = 'chooseLegendColors';
    /**
     * type: 'popupChartEditor'
     */
    VizFrameEvent.POPUP_CHART_EDITOR = 'popupChartEditor';

    VizFrameEvent.SLICE_DIMENSION_CHANGED = "sliceDimensionChanged";

    return VizFrameEvent;
});

define('sap/viz/controls/frame/chartEditor/ChartEditorEvent',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function($, OOUtil, Event) {
    var FilterMenuEvent = function(type, target, data) {
        FilterMenuEvent.superclass.constructor.apply(this, arguments);
    };
    OOUtil.extend(FilterMenuEvent, Event);

    FilterMenuEvent.FILTER_CLICKED = "filterClicked";
    FilterMenuEvent.EXCLUDE_CLICKED = "excludeClicked";

    return FilterMenuEvent;
});

define('sap/viz/controls/frame/chartEditor/ChartEditor',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/frame/chartEditor/ChartEditorEvent'],
// @formatter:on
function($, CSSConst, LangManager, OOUtil, UIControl, ChartEditorEvent) {
    var ChartEditor = function(dom, assetFolder) {
        ChartEditor.superclass.constructor.apply(this, arguments);

        this._dom$ = $(dom);

        this._createChildren(assetFolder);
    };
    OOUtil.extend(ChartEditor, UIControl);

    ChartEditor.prototype._createChildren = function(assetFolder) {
        var _this = this;
        this._dom$.addClass(CSSConst.FRAME_PREFIX + 'editor');

        var $main = $('<div/>').appendTo(this._dom$);
        $main.addClass(CSSConst.FRAME_PREFIX + 'editor-main');
        $main.addClass(CSSConst.COMMON_PREFIX + 'popUp');

        var $header = $('<div/>').appendTo($main).addClass(CSSConst.FRAME_PREFIX + 'editor-header');
        var $headerText = $('<h3/>').appendTo($header).text(LangManager.get("VIZ_FRAME_CHART_EDITOR"));

        var $content = $('<div/>').appendTo($main).addClass(CSSConst.FRAME_PREFIX + 'editor-content');
        var $ph = $('<img/>').appendTo($content).addClass(CSSConst.FRAME_PREFIX + 'editor-content-img');
        $ph.attr('src', assetFolder + '/chartEditorPH.png');

        var $footer = $('<div/>').appendTo($main).addClass(CSSConst.FRAME_PREFIX + 'editor-footer');
        var $btnOK = $('<button/>').appendTo($footer).text(LangManager.get("VIZ_COMMON_OK"));
        $btnOK.addClass(CSSConst.FRAME_PREFIX + 'editor-footer-button');
        $btnOK.addClass(CSSConst.COMMON_PREFIX + 'button');
        var $btnCancel = $('<button/>').appendTo($footer).text(LangManager.get("VIZ_COMMON_CANCEL"));
        $btnCancel.addClass(CSSConst.FRAME_PREFIX + 'editor-footer-button');
        $btnCancel.addClass(CSSConst.COMMON_PREFIX + 'button');

        var $btnClose = $('<div/>').appendTo($main);
        $btnClose.addClass(CSSConst.COMMON_PREFIX + 'havanaSharedSprite16');
        $btnClose.addClass(CSSConst.FRAME_PREFIX + 'editor-close');
        var cancelFn = function() {
            _this._dispatchEvent(new ChartEditorEvent(ChartEditorEvent.EDIT_CANCELED, this));
            _this._dispatchEvent(new ChartEditorEvent(ChartEditorEvent.EDITOR_CLOSED, this));

            _this._dom$.detach();
        };

        var confirmFn = function() {
            _this._dispatchEvent(new ChartEditorEvent(ChartEditorEvent.EDIT_CONFIRMED, this, {
                // TODO Set edited properties
            }));
            _this._dispatchEvent(new ChartEditorEvent(ChartEditorEvent.EDITOR_CLOSED, this));

            _this._dom$.detach();
        };

        $btnOK.click(confirmFn);
        $btnCancel.click(cancelFn);
        $btnClose.click(cancelFn);
    };

    return ChartEditor;
});

// @formatter:off
define('sap/viz/controls/frame/chartEditor/ChartEditorPlugin',[
    'jquery',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/frame/chartEditor/ChartEditor',
    'sap/viz/controls/frame/chartEditor/ChartEditorEvent'
    ],
function($, CSSConst, ChartEditor, ChartEditorEvent){
// @formatter:on
    /**
     * Chart Editor plugin class.
     */
    var ChartEditorPlugin = function(div, vizFrame, uiConfig) {
        this.__className = "sap.viz.controls.frame.chartEditor.ChartEditorPlugin";
        this._vizFrame = vizFrame;
        this._uiConfig = uiConfig;
        this._div = div;
        this._chartEditor = null;
    };
    ChartEditorPlugin.prototype.validateSize = function(w, h) {
        this._locateChartEditor();
    };
    /**
     * Destroy itself.
     */
    ChartEditorPlugin.prototype.destroy = function() {
        if (this._chartEditor) {
            this._chartEditor.removeAllEventListeners();
            this._chartEditor.destroy();
            this._chartEditor = null;
        }

    };
    /**
     * Popup editor
     */
    ChartEditorPlugin.prototype._popUpEditor = function() {
        var container$ = $(this._div);
        var assetFolder = this._uiConfig.chartEditorAssetFolderPath ? this._uiConfig.chartEditorAssetFolderPath : '../src/controls/frame/assets';
        container$.children().addClass(CSSConst.COMMON_PREFIX + 'blur');

        var dom$ = $(document.createElement('div')).appendTo(container$);

        this._chartEditor = new ChartEditor(dom$[0], assetFolder);
        this._locateChartEditor();

        this._chartEditor.addEventListener(ChartEditorEvent.EDITOR_CLOSED, function(event) {
            container$.children().removeClass(CSSConst.COMMON_PREFIX + 'blur');
        });
    };
    /**
     * set editor position
     */
    ChartEditorPlugin.prototype._locateChartEditor = function() {
        if (this._chartEditor) {
            var container$ = $(this._div);
            var dom$ = $(this._chartEditor._dom);

            dom$.css({
                'left' : (container$.width() - dom$.width()) / 2,
                'top' : Math.min(120, (container$.height() - dom$.height()) / 2)
            });
        }
    };
    return ChartEditorPlugin;
});

define('sap/viz/controls/common/utils/StyleUtils',[
// @formatter:off
],
function() {
// @formatter:on
    var StyleUtils = {};

    StyleUtils.inLumira = function() {
        var theme;
        try {
            theme = sap.ui.getCore().getConfiguration().getTheme();
        } catch(err) {
        }
        return theme === 'vi_theme';
    };

    return StyleUtils;
});

define('sap/viz/controls/common/constants/KeyboardEventConst',[],function() {

    var KeyboardEventConst = {};

    // Event types
    KeyboardEventConst.UP = 38;
    KeyboardEventConst.DOWN = 40;
    KeyboardEventConst.ENTER = 13;
    KeyboardEventConst.SPACE = 32;
    KeyboardEventConst.ESC = 27;
    KeyboardEventConst.SUBTRACT = 45;
    KeyboardEventConst.DECIMAL = 46;
    KeyboardEventConst.NUM_0 = 48;
    KeyboardEventConst.NUM_9 = 57;
    return KeyboardEventConst;
});
/**
 * FeedList in Feed Panel.
 */
// @formatter:off
define('sap/viz/controls/common/views/feed/FeedList',[
    'jquery',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/StyleUtils',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/common/views/feed/FeedListEvent',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/constants/KeyboardEventConst'],
function($, CSSConst, utils, OOUtil, StyleUtils, UIControl, FeedListEvent, LangManager, AnalyticalType, FeedItemType, FeedUtils, KeyboardEventConst) {
// @formatter:on
    /**
     * analyses: [{
     *  colName: 'PRODUCT',
     *     type: 'varchar'
     * }]
     */
    var FeedList = function(dom, analyses, feedItemType, excludes) {
        FeedList.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.common.views.FeedList";

        this._dom$ = $(dom);
        this._analyses = analyses;
        this._feedingType = feedItemType;

        this._dataProvider = [];
        var i, j;

        // TODO Grey out the excluded items
        var excluded = function(id) {
            for (var i = 0; i < excludes.length; i++) {
                if (excludes[i].id() === id) {
                    return true;
                }
            }
            return false;
        };
        if (analyses) {
            for ( i = 0; i < analyses.length; i++) {
                var analysis = analyses[i];
                if (excluded(analysis.id())) {
                    continue;
                }
                if (FeedUtils.feedCompatible(this._feedingType, analysis.type(), analysis.dataType())) {
                    this._dataProvider.push({
                        'label' : analysis.name(),
                        'analysis' : analysis
                    });
                }
            }
        }

        this._header = {
            'label' : LangManager.get(FeedList.langProps[this._feedingType]),
            'suffix' : this._dataProvider.length
        };

        this._container$ = null;
        this._content$ = null;
        this._header$ = null;
        this._ul$ = null;
        this._arrow$ = null;
        this._createChildren();
        this._dock = null;
        this._calDockPosFun = null;
        this._resizeHandler = null;
        this._documentHandler = null;
        this._keyDownHandlerProvider = $.proxy(this._keyDownHandler, this);
        this._mouseMoveHandlerProvider = $.proxy(this._mouseMoveHandler, this);
    };
    OOUtil.extend(FeedList, UIControl);

    FeedList.langProps = {
        'Measure': 'VIZ_COMMON_MEASURES',
        'Dimension': 'VIZ_COMMON_DIMENSIONS',
        'Geography': 'VIZ_COMMON_DIMENSIONS',
        'Subtotal': 'VIZ_COMMON_SUBTOTALS'
    };
    var SCROLL_DOWN = 'down';
    var SCROLL_UP = 'up';
    /**
     * set feedList position
     * @param {object} position of selectedfeedShelfListElement
     * @param {String} feedList orientation
     */
    FeedList.prototype.locate = function(dock, orientation) {
        var dom$ = this._dom$;

        var ul$ = this._ul$;
        var ulHeight = ul$.outerHeight();
        var bodyHeight = Math.max($(document.body).height(), $(window).height());
        var maxHeight = bodyHeight - this._header$.outerHeight() - 15;
        if (ulHeight > maxHeight) {
            ulHeight = maxHeight;
        }
        ul$.outerHeight(ulHeight);
        var contentHeight = ulHeight + this._header$.outerHeight() + 5;
        var contentWidth = Math.max(ul$.outerWidth(), this._header$.outerWidth());
        var arrowWidth = this._arrow$.outerWidth();
        var dockStrategy = 'left';
        if (orientation === 'left' || orientation === 'right') {
            dockStrategy = orientation;
        } else if (contentWidth + arrowWidth*3/4 > dock.x) {
            dockStrategy = 'right';
        }
        var arrowBottomOffset = 8;
        var arrowHeight = this._arrow$.outerHeight() + 18;
        // ajdust dock.y to avoid scroll  bar
        var dockYoffset = Math.max(0, dock.y - bodyHeight + arrowHeight / 2 + arrowBottomOffset);
        dock.y = Math.min(dock.y, bodyHeight - arrowHeight / 2 - arrowBottomOffset);
        var top = Math.max(dock.y - dockYoffset + arrowHeight / 2 + arrowBottomOffset - contentHeight, 5);
        var arrowTop = Math.min(dock.y - top - 12, bodyHeight - arrowHeight - arrowBottomOffset - top - dockYoffset);
        
        var listPadding = 2;        

        if (dockStrategy === 'right') {
            this._container$.addClass(CSSConst.COMMON_PREFIX + 'feedlist-container-right');
            dom$.css({
                "left" : dock.x + dock.shelfWidth + arrowWidth*3/4,
                "top" : top
            });
            this._arrow$.css({
                "left" : -arrowWidth/2 + listPadding,
                "top" : arrowTop
            });
        } else if (dockStrategy === 'left') {
            this._container$.addClass(CSSConst.COMMON_PREFIX + 'feedlist-container-left');
            dom$.css({
                "left" : dock.x - contentWidth - arrowWidth*3/4,
                "top" : top
            });
            this._arrow$.css({
                "left" : contentWidth - arrowWidth/2 - listPadding,
                "top" : arrowTop
            });
        }
        this._content$.css({
            'width' : contentWidth + 'px',
            'height' : contentHeight + 'px'
        });
        this._container$.css({
            'width' : contentWidth + 2 + 'px',
            'height' : contentHeight + 'px'
        });
    };
    /**
     * open feedList
     * @param {object} position or a callback function to calculate the position of selectedfeedShelfListElement
     * @param {String} feedList orientation
     */
    FeedList.prototype.open = function(dock) {
        if( typeof(dock) === 'function'){
            this._dock = dock();
            this._calDockPosFun = dock;
        }else{
            this._dock = dock;
        }
        var dom$ = this._dom$;
        dom$.appendTo($("body"));
        this._dispatchEvent(new FeedListEvent(FeedListEvent.DROP_DOWN_OPENED, this));
        // Animation
        // TODO Move animation to css
        // TODO Handle out of window
        this.locate(this._dock);
        // Handler document events: mousedown
        // We should listen the mousedown when event capturing, since cvom chart will stop event propagation when
        // bubbling
        this._documentHandler = $.proxy(function(event) {
            if (!$.contains(this._dom, event.target)) {
                this.close();
            }
        }, this);
        this._addEventListeners();
        document.addEventListener("mousedown", this._documentHandler, true);
        document.addEventListener("keydown", this._keyDownHandlerProvider, true);
        $(window).on('blur', this._documentHandler);
        this._cursorShowed = true;
    };
    /**
     *close feedList
     */
    FeedList.prototype.close = function() {
        var dom$ = this._dom$;
        var delay = 1;
        if (this._classVisible) {
            dom$.removeClass(this._classVisible);
            delay = 2000;
        }
        setTimeout(function() {
            dom$.detach();
        }, delay);

        document.removeEventListener("mousedown", this._documentHandler, true);
        document.removeEventListener("keydown", this._keyDownHandlerProvider, true);
        document.removeEventListener("mousemove", this._mouseMoveHandlerProvider, true);
        $(window).off('blur', this._documentHandler);
        $(window).off('resize', this._resizeHandler);
        this._dispatchEvent(new FeedListEvent(FeedListEvent.DROP_DOWN_CLOSED, this));
        //show cursor when close feedlist
        if (!this._cursorShowed) {
            $('.' + CSSConst.COMMON_PREFIX + 'hide-cursor').removeClass(CSSConst.COMMON_PREFIX + 'hide-cursor');
        }
        this._calDockPosFun = null;
        this.destroy();
    };
    /**
     *create feedList
     * @param {Array} value [{
     *  text: xxx,
     *  callback: function() {}
     * }]
     */
    FeedList.prototype._createChildren = function(analyses) {
        this._dom$.addClass(CSSConst.COMMON_PREFIX + 'feedlist');
        var _this = this;
        var container$ = this._container$ = $(document.createElement('div')).appendTo(this._dom$);
        container$.addClass(CSSConst.COMMON_PREFIX + 'feedlist-container');
        var arrow$ = this._arrow$ = $(document.createElement('div')).appendTo(container$);
        arrow$.addClass(CSSConst.COMMON_PREFIX + 'feedlist-arrow');
        arrow$.addClass(CSSConst.PREFIX + 'feedlist');
        var content$ = this._content$ = $(document.createElement('div')).appendTo(container$);
        content$.addClass(CSSConst.COMMON_PREFIX + 'feedlist-content');
        // Header
        var header$ = this._header$ = $(document.createElement('div')).appendTo(content$).text(this._header.label);
        header$.addClass(CSSConst.COMMON_PREFIX + 'feedlist-content-header');
        // List
        var ul$ = this._ul$ = $(document.createElement('ul')).appendTo(content$);
        ul$.addClass(CSSConst.COMMON_PREFIX + 'scrollable');
        ul$.addClass(CSSConst.COMMON_PREFIX + 'scrollable-y');

        var i;
        var dp;
        // TODO Support hierarchy with tree ui
        for ( i = 0; i < this._dataProvider.length; i++) {
            var li$ = $(document.createElement('li')).appendTo(ul$);
            var a$ = $(document.createElement('a')).appendTo(li$);
            dp = this._dataProvider[i];

            var iconContainer$, icon$;
            var dataType = dp.analysis.dataType();
            var isGeoHierarchy = FeedUtils.isGeoHierarchyFeed(this._feedingType, dp.analysis.type(), dataType);
            if (((this._feedingType === FeedItemType.DIMENSION || this._feedingType === FeedItemType.SUBTOTAL) &&
                dp.analysis.type() === AnalyticalType.HIERARCHY) || isGeoHierarchy) {
                var hierarchyAnalysis = this._setHierarchyAnalysis(dp.analysis.clone(), 0);
                li$.data('__item', hierarchyAnalysis);

                iconContainer$ = $(document.createElement('div')).appendTo(li$);
                iconContainer$.addClass(CSSConst.COMMON_PREFIX + 'feedlist-li-hierarchy-indicator');
                icon$ = $(document.createElement('div')).appendTo(iconContainer$);
                if (StyleUtils.inLumira()) {
                    if (dataType && dataType.toLowerCase() === FeedItemType.GEOGRAPHY.toLowerCase()) {
                        icon$.addClass('vxt-geo-icon-16');
                    } else {
                        icon$.addClass('vxt-hier-lvl-based-icon-16');
                    }
                } else {
                    icon$.addClass(CSSConst.COMMON_PREFIX + 'UVBSharedSprite');
                    if (dataType && dataType.toLowerCase() === FeedItemType.GEOGRAPHY.toLowerCase()) {
                        icon$.addClass(CSSConst.COMMON_PREFIX + 'geography');
                    } else {
                        icon$.addClass(CSSConst.COMMON_PREFIX + 'feedlist-li-hierarchy-Icon');
                    }
                }

                var expandButton$ = $(document.createElement('div')).appendTo(li$);
                expandButton$.data('__items', dp.analysis);
                expandButton$.addClass(CSSConst.COMMON_PREFIX + 'feedlist-li-button');
                var plusIcon$ = $(document.createElement('div')).appendTo(expandButton$);
                plusIcon$.addClass(CSSConst.COMMON_PREFIX + 'havanaVXTabSprite16 ' + CSSConst.COMMON_PREFIX + 'feedlist-li-plus-icon');
                expandButton$.attr('command', 'open');
                expandButton$.click(function(event) {
                    event.stopPropagation();
                    _this._expandButtonHandler(event);
                });
                li$.click($.proxy(this._analysisSelectedHandler, this));
            } else {
                if (dataType && dataType.toLowerCase() === FeedItemType.GEOGRAPHY.toLowerCase()) {
                    iconContainer$ = $(document.createElement('div')).appendTo(li$);
                    iconContainer$.addClass(CSSConst.COMMON_PREFIX + 'feedlist-li-hierarchy-indicator');
                    icon$ = $(document.createElement('div')).appendTo(iconContainer$);
                    icon$.addClass(CSSConst.COMMON_PREFIX + 'geography');
                }

                li$.data('__item', dp.analysis);
                li$.click($.proxy(this._analysisSelectedHandler, this));
            }
            li$.hover($.proxy(function(event) {
                this._highlightItem($(event.currentTarget));
            }, this), $.proxy(function(event) {
                this._unhighlightItem($(event.currentTarget));
            }, this));
            a$.text(dp.label);
            a$.addClass(CSSConst.COMMON_PREFIX + 'text-ellipsis');

            if (dp.suffix) {
                a$.addClass(CSSConst.COMMON_PREFIX + 'feedlist-li-a_suffix').attr('__suffix', dp.suffix);
            }
            if (dp.icon) {
                // TODO Support icon
            }
        }
    };
    /**
     *handle expande button click event
     *
     */
    FeedList.prototype._expandButtonHandler = function(event) {
        var expandButton$ = $(event.currentTarget);
        if (expandButton$.attr('command') === 'open') {
            this._openHierarchyItem(expandButton$);
        } else {
            this._closeHierarchyItem(expandButton$);
        }
    };
    /**
     *set the value of selected property of hierarchyAnalysis
     *
     */
    FeedList.prototype._setHierarchyAnalysis = function(hierarchyAnalysis, i) {
        var hierarchyLevels = hierarchyAnalysis.hierarchyLevels();
        for (var j = 0; j < hierarchyLevels.length; j++) {
            var level = hierarchyLevels[j];
            if (j === i) {
                level.selected(true);
            } else {
                level.selected(false);
            }
        }
        return hierarchyAnalysis;
    };
    /**
     *handle li click event
     *
     */
    FeedList.prototype._analysisSelectedHandler = function(event) {
        var _this = this;
        var li$ = $(event.currentTarget);

        var item = li$.data('__item');
        _this._dispatchEvent(new FeedListEvent(FeedListEvent.ITEM_SELECTED, _this, {
            'selectedItem' : item
        }));
        _this.close();
    };
    /**
     * Handle key down event 
     */
    FeedList.prototype._keyDownHandler = function(event) {
        //hide cursor
        var keyCode =  event.keyCode;
        if (!event.ctrlKey && (keyCode === KeyboardEventConst.DOWN || keyCode === KeyboardEventConst.UP)) {
            if (this._cursorShowed) {
                //TODO: hide cursor
                $("*").addClass(CSSConst.COMMON_PREFIX + 'hide-cursor');
                this._cursorShowed = false;
                setTimeout($.proxy(function() {
                    document.addEventListener('mousemove', this._mouseMoveHandlerProvider, true);
                },this),200);
            }
        }
        var li$ = $('.' + CSSConst.COMMON_PREFIX + 'feedlist-li-highlight', this._ul$);
        switch (keyCode) {
            case KeyboardEventConst.UP:
                if (event.ctrlKey) {
                    var minusIcon$ = $('.' + CSSConst.COMMON_PREFIX + 'feedlist-li-minus-icon', li$);
                    if (minusIcon$[0]) {
                        this._closeHierarchyItem(minusIcon$.parent());
                    }
                } else if (li$[0] != this._ul$[0].firstChild){
                    this._unhighlightItem(li$);
                    this._highlightItem(li$.prev());
                    if (li$.offset().top - this._ul$.offset().top < li$.height()) {
                        this._updateScrollBarPosition(li$, SCROLL_UP);
                    }
                }
                break;
            case KeyboardEventConst.DOWN:
                if (event.ctrlKey) {
                    var plusIcon$ = $('.' + CSSConst.COMMON_PREFIX + 'feedlist-li-plus-icon', li$);
                    if (plusIcon$[0]) {
                        this._openHierarchyItem(plusIcon$.parent());
                    }
                } else {
                    if (!li$[0]) {
                        this._highlightItem($(this._ul$[0].firstChild));
                    }else if (li$[0] != this._ul$[0].lastChild){
                        this._unhighlightItem(li$);
                        this._highlightItem(li$.next());
                        if (li$.offset().top + li$.height() > this._ul$.offset().top + this._ul$.height()) {
                            this._updateScrollBarPosition(li$, SCROLL_DOWN);
                        }
                    }
                }
                break;
            case KeyboardEventConst.ENTER:
            case KeyboardEventConst.SPACE:
                if (li$[0]) {
                    this._selectItem(li$);
                }
                break;
            case KeyboardEventConst.ESC:
                this.close();
                break; 
        }
    };
    /**
     * validate the position of feeding list when window resize
     */
    FeedList.prototype._validateSize = function() {
        if(!!this._calDockPosFun && typeof (this._calDockPosFun) === 'function') {
            this.locate(this._calDockPosFun());
        }
    };
    /**
     * Call when the window resize
     */
    FeedList.prototype._resizer = function(event) {
        var _this = this;
        if(!event.data.invalidateSize) {
            setTimeout(function() {
                event.data.invalidateSize = false;
                _this._validateSize();
            }, 1000 / 24);
        }
        event.data.invalidateSize = true;
    };
    /**
     * Use to add event listener
     */
    FeedList.prototype._addEventListeners = function() {
        this._resizeHandler = $.proxy(this._resizer, this);
        $(window).resize({
            'invalidateSize' : false
        }, this._resizeHandler);
    };
    /**
     * Handle mouse move event 
     */
    FeedList.prototype._mouseMoveHandler = function(event) {
        if (!this._cursorShowed) {
            $('.' + CSSConst.COMMON_PREFIX + 'hide-cursor').removeClass(CSSConst.COMMON_PREFIX + 'hide-cursor');
            this._cursorShowed = true;
            document.removeEventListener('mousemove', this._mouseMoveHandlerProvider, true);
            var li$ = $('.' + CSSConst.COMMON_PREFIX + 'feedlist-li-highlight', this._ul$);
            this._unhighlightItem(li$);
        }
    };
    /**
     * Highlight item
     */
    FeedList.prototype._highlightItem = function(li$) {
        li$.addClass(CSSConst.COMMON_PREFIX + 'feedlist-li-highlight');
    };
    /**
     * Remove highlight of item
     */
    FeedList.prototype._unhighlightItem = function(li$) {
        li$.removeClass(CSSConst.COMMON_PREFIX + 'feedlist-li-highlight');
    };
    /**
     * Select item
     */
    FeedList.prototype._selectItem = function(li$) {
        var item = li$.data('__item');
        this._dispatchEvent(new FeedListEvent(FeedListEvent.ITEM_SELECTED, this, {
            'selectedItem' : item
        }));
        this.close();
    };
    /**
     * Expand the hierarchy item
     */
    FeedList.prototype._openHierarchyItem = function(expandButton$) {
        var analysis = expandButton$.data('__items');
        var hierarchyLevels = analysis.hierarchyLevels();
        var borther$ = expandButton$.parent();
        for (var i = 0; i < hierarchyLevels.length; i++) {
            var li$ = $(document.createElement('li'));
            $(borther$).after(li$);
            borther$ = li$;
            var span$ = $(document.createElement('span')).appendTo(li$);
            var hierarchy = this._setHierarchyAnalysis(analysis.clone(), i);
            li$.data('__item', hierarchy);
            span$.text(hierarchyLevels[i].name());
            span$.addClass(CSSConst.COMMON_PREFIX + 'text-ellipsis');
            li$.click($.proxy(this._analysisSelectedHandler, this));
            li$.hover($.proxy(function(event) {
                this._highlightItem($(event.currentTarget));
            }, this), $.proxy(function(event) {
                this._unhighlightItem($(event.currentTarget));
            }, this));
        }
        
        expandButton$.attr('command', 'close');
        expandButton$.addClass(CSSConst.COMMON_PREFIX + 'feedlist-li-button-close');
        expandButton$.children().attr('class', CSSConst.COMMON_PREFIX + 'havanaVXTabSprite16 ' + CSSConst.COMMON_PREFIX + 'feedlist-li-minus-icon');
        this._updateAllExpandButtons();
    };
    /**
     * Collapse the hierarchy item
     */
    FeedList.prototype._closeHierarchyItem = function(expandButton$) {
        var analysis = expandButton$.data('__items');
        var hierarchyLevels = analysis.hierarchyLevels();
        for (var j = 0; j < hierarchyLevels.length; j++) {
            expandButton$.parent().next().remove();
        }
        expandButton$.attr('command', 'open');
        expandButton$.removeClass(CSSConst.COMMON_PREFIX + 'feedlist-li-button-close');
        expandButton$.children().attr('class', CSSConst.COMMON_PREFIX + 'havanaVXTabSprite16 ' + CSSConst.COMMON_PREFIX + 'feedlist-li-plus-icon');
        this._updateAllExpandButtons();
    };
    /**
     * Update position of all expand buttons 
     */
    FeedList.prototype._updateAllExpandButtons = function() {
        // ul has scroll bar
        var hasScroll = this._ul$[0].scrollHeight > this._ul$.outerHeight();
        $('.' + CSSConst.COMMON_PREFIX + 'feedlist-li-button').each(function() {
            $(this).removeClass(CSSConst.COMMON_PREFIX + 'feedlist-li-button-offset');
            if (hasScroll) {
                $(this).addClass(CSSConst.COMMON_PREFIX + 'feedlist-li-button-offset');
            }
        });
    };
    /**
     * Update scrollbar's position
     */
    FeedList.prototype._updateScrollBarPosition = function(li$, direction) {
        var currentPos = this._ul$.scrollTop();
        if (direction === SCROLL_DOWN) {
            var nextItems = li$.nextAll();
            var nextItemsHeight = li$.height() * nextItems.length;
            if (nextItemsHeight <= this._ul$.height()) {
                //scroll to bottom
                currentPos += nextItemsHeight;
            } else {
                //scroll to next page
                currentPos += (this._ul$.scrollHeight()/li$.height());
            }
        } else {
            var prevItems = li$.prevAll();
            var prevItemsHeight = li$.height() * prevItems.length;
            if (prevItemsHeight <= this._ul$.height()) {
                //scroll to top
                currentPos = 0;
            } else {
                //scroll to last page
                currentPos -= (this._ul$.scrollHeight()/li$.height());
            }
        }
        // Don't show cursor during mouse moving caused by scrolling
        this._cursorShowed = true;
        this._ul$.scrollTop(currentPos);
        setTimeout($.proxy(function() {
            this._cursorShowed = false;
        },this),500);
    };
    return FeedList;
});

define('sap/viz/controls/filterbar0/Tooltip',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/filter/AbstractFilter',
    'sap/viz/controls/common/managers/LangManager'
   ],
// @formatter:on
function($, CSSConst, AbstractFilter, LangManager) {
    var delay = 1000;
    var offset = {
        x : 8,
        y : 16
    };
    var Tooltip = function(div) {
        this._div = div;
        this._showing = false;
        this._tooltip$ = null;
    };

    Tooltip.prototype._getTitle = function(filter) {
        if(filter.getType() !== AbstractFilter.VALUE_TYPE) {
            return filter.filterTitle();
        }

        var count = filter.values().length;
        var title = filter.filterName() + ' (' + count + ' ';
        if(filter.isExcluded()) {
            title += LangManager.get('VIZ_FILTERBAR_ITEMS_EXCLUDED');
        } else {
            title += LangManager.get('VIZ_FILTERBAR_ITEMS_INCLUDED');
        }
        title += ')';

        return title;
    };

    Tooltip.prototype._showTooltip = function(filter) {
        if(!this._showing) {
            return;
        }
        if(!this._tooltip$) {
            this._tooltip$ = $(document.createElement('div')).appendTo(this._div);
        } else {
            this._tooltip$.empty();
        }

        var tooltip$ = this._tooltip$;
        tooltip$.addClass(CSSConst.FILTERBAR0_PREFIX + 'filter-item-tooltip');
        if(filter.isGlobalFilter()) {
            var globalFilterText = LangManager.get('VIZ_FILTERBAR_GLOBAL_FILTER');
            var tooltipGlobalFilter$ = $(document.createElement('span')).appendTo(tooltip$).text(globalFilterText);
            tooltipGlobalFilter$.addClass(CSSConst.FILTERBAR0_PREFIX + 'filter-item-tooltip-globalfilter');
        }
        var tooltipTitle$ = $(document.createElement('span')).appendTo(tooltip$).text(this._getTitle(filter));
        tooltipTitle$.addClass(CSSConst.FILTERBAR0_PREFIX + 'filter-item-tooltip-title');

        var tooltipText$ = $(document.createElement('span')).appendTo(tooltip$);
        tooltipText$.addClass(CSSConst.FILTERBAR0_PREFIX + 'filter-item-tooltip-value');
        if(filter.isExcluded()) {
            tooltipText$.addClass(CSSConst.FILTERBAR0_PREFIX + 'filter-exclude');
        }
        tooltipText$.text(filter.filterContent());
        
        //if the length of text over the line of 15, it will display '...'
        //only for browser which doesn't recognize '-webkit-line-clamp' in css
        var maxHeight = 15*15;
        while (tooltipText$.height() > maxHeight) {
            tooltipText$.text(tooltipText$.text().replace(/(\s)*([a-zA-Z0-9]+|\W)(\.\.\.)?$/, "..."));
        }

        var left = this._position.left + offset.x;
        var rightBorder = this._div.offset().left + this._div.outerWidth();
        left = Math.min(left, rightBorder - tooltip$.outerWidth());
        tooltip$.offset({
            "left" : left,
            "top" : this._position.top + offset.y
        });
    };

    Tooltip.prototype.show = function(filter, position) {
        this._position = position;
        if(this._showing) {
            return;
        }
        this._showing = true;
        var _this = this;
        setTimeout(function() {
            _this._showTooltip(filter);
        }, delay);
    };

    Tooltip.prototype.position = function(position) {
        this._position = position;
    };

    Tooltip.prototype.hide = function() {
        this._showing = false;
        if(this._tooltip$) {
            this._tooltip$.remove();
            this._tooltip$ = null;
        }
    };
    return Tooltip;
});

define('sap/viz/controls/filterbar0/FilterBarEvent',[
// @formatter:off
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function(OOUtil, Event) {

    var FilterBarEvent = function(type, target, data) {
        FilterBarEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.filterbar0.FilterBarEvent";
    };

    OOUtil.extend(FilterBarEvent, Event);

    FilterBarEvent.DELETE_FILTER = "deleteFilter";
    FilterBarEvent.HEIGHT_CHANGED = "heightExtend";

    return FilterBarEvent;
});

// @formatter:off
define('sap/viz/controls/filterbar0/FilterBar',[
    'jquery',
    'sap/viz/controls/common/VizControlBase',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/constants/EventTypeConst',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/managers/DragManager',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/common/views/drag/DropAction',
    'sap/viz/controls/common/views/feed/FeedList',
    'sap/viz/controls/common/views/feed/FeedListEvent',
    'sap/viz/controls/common/feeds/AnalyticalType',
    'sap/viz/controls/common/feeds/FeedItemType',
    'sap/viz/controls/common/helpers/Rectangle',
    'sap/viz/controls/common/filter/AbstractFilter',
    'sap/viz/controls/common/filter/DateRangeFilter',
    'sap/viz/controls/common/filter/NumericRangeFilter',
    'sap/viz/controls/common/filter/ValueFilter',
    'sap/viz/controls/common/filter/FilterHelper',
    'sap/viz/controls/filterbar0/Tooltip',
    'sap/viz/controls/filterbar0/FilterBarConfig',
    'sap/viz/controls/filterbar0/FilterBarEvent'],
function($, VizControlBase, CSSConst, EventTypeConst, Event, DragManager, LangManager, OOUtil, UIControl,
    DropAction, FeedList, FeedListEvent, AnalyticalType, FeedItemType, Rectangle, AbstractFilter, DateRangeFilter,
    NumericRangeFilter, ValueFilter, FilterHelper, Tooltip, FilterBarConfig, FilterBarEvent) {
// @formatter:on
    /**
     *  this._arrowWidth
     */
    var FilterBar = function(div/*HTMLDivElement*/, uiConfig/*JSON*/) {
        FilterBar.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.filterbar0.FilterBar";

        this._div = div;
        this._uiConfig = uiConfig ? uiConfig : FilterBarConfig.instance();
        this._containerCurrentPosition = 0;
        // Feeding
        this._allAnalyses = null;
        this._settings = null;
        this._visualLines = 2;
        this._description$ = null;
        this._layout$ = null;
        this._headerVisible = false;
        this._isFullScreen = false;
        this._tooltip = new Tooltip(this._div);
        this._createChildren();
    };
    // API document: events
    /**
     * Event:requestFilterValues.
     * <pre>
     * type: "requestFilterValues"
     * handler: function({
     *                    type: "requestFilterValues",
     *                    data: {
     *                        bounds, // an object contains left, top, width, height
     *                        filterName,
     *                        analysisObjectId,
     *                        filterItem, // an object of ValueFilter, DateRangeFilter or NumericRangeFilter
     *                        validate // function to validate filter item.
     *                    }
     * })
     * </pre>
     * @event sap.viz.controls.filterbar0.FilterBar#requestFilterValues
     * @param {String} evt.type "requestFilterValues".
     * @param {Object} evt.data
     *      It contains filterName, analysisObjectId and filterItem properties. User need to call validate(true) method
     * if changed filterItem or call validate(false) if no change happens.
     */
    var filterItemShrinks = 0.8;
    var filterItemHeightDefault = 40;
    var filterItemWidthDefault = 190;
    OOUtil.extend(FilterBar, VizControlBase);

    // const of data types
    FilterBar.TYPE_STRING = 'string';
    FilterBar.TYPE_INTEGER = 'integer';
    FilterBar.TYPE_NUMBER = 'number';
    FilterBar.TYPE_DATE = 'date';

    var ImageWidth = 16;
    /**
     * Get/Set filterBar filterItems.
     * @method sap.viz.controls.filterBar0.FilterBar.prototype.filterItems
     * @param {Array<sap.viz.controls.filterbar0.FilterItem>} filterItems
     * @return {Array<sap.viz.controls.filterbar0.FilterItem>}
     */
    FilterBar.prototype.filterItems = function(filterItems) {
        if(arguments.length > 0) {
            this._vizModel().filterItems(filterItems);
            return this;
        } else {
            return this._vizModel().filterItems();
        }
    };

    FilterBar.prototype.save = function() {
        var jsonValue = {};
        jsonValue['filterItems'] = FilterHelper.toJSON(this._vizModel().filterItems());
        return jsonValue;
    };

    FilterBar.prototype.load = function(valueJSON) {
        var filters = null;
        if(valueJSON && valueJSON.filterItems){
            filters = FilterHelper.fromJSON(valueJSON.filterItems);
        }
        filters = filters || [];
        this._vizModel().filterItems(filters );
    };

    /**
     * handler for chart model properties changed
     */
    FilterBar.prototype._onVizModelChanged = function(e) {
        if(e.data.filterChanged) {
            this._filtersChanged();
        }
    };
    /**
     * TODO: Add comments.
     */
    FilterBar.prototype._createChildren = function() {
        var _this = this;
        var filterBarModel = this._uiConfig.module;
        if(filterBarModel && (filterBarModel.visible !== false)) {
            this._headerVisible = true;
            this._plus$ = $(document.createElement("div")).appendTo(this._div);
            this._plus$.addClass(CSSConst.COMMON_PREFIX + 'havanaVXTabSprite16');
            this._plus$.addClass(CSSConst.FILTERBAR0_PREFIX + 'header-plus');
            this._plus$.click(function(e) {
                _this._plusClickHandler(e);
            });
            var label = filterBarModel.label ? filterBarModel.label : LangManager.get('VIZ_FILTERBAR_DESCRIPTION');
            this._description$ = $(document.createElement("span")).text(label).appendTo(this._div);
            this._description$.addClass(CSSConst.FILTERBAR0_PREFIX + "description");
        }

        this._layout$ = $(document.createElement('div')).appendTo(this._div);
        this._layout$.addClass(CSSConst.FILTERBAR0_PREFIX + 'layout');
        this._layout$.addClass(CSSConst.COMMON_PREFIX + 'scrollable');
        this._layout$.addClass(CSSConst.COMMON_PREFIX + 'scrollable-y');
        this._layout$.css({
            'max-height' : this._visualLines * filterItemHeightDefault
        });
        this._filterItemsContainer$ = $(document.createElement('div')).appendTo(this._layout$);
        this._filterItemsContainer$.addClass(CSSConst.FILTERBAR0_PREFIX + 'filterItems-container');
        if(this._headerVisible === true) {
            this._layout$.hide();
        } else {
            this._layout$.css({'left' : '0px'});
        }

        //support drop filter
        $(this._div).droppable({
            tolerance : 'pointer',
            accept : '.' + DragManager.DRAGGABLE_CLASS_ANALYSIS,
            over : $.proxy(this._dragOver, this),
            out : $.proxy(this._dragOut, this),
            drop : $.proxy(this._drop, this)
        });
    };
    /**
     * Get/Set available AnalysisObjects for object picker popup UI
     *
     * @method sap.viz.controls.filterbar0.FilterBar.prototype.analysisObjectsForPicker
     * @param {Array<sap.viz.controls.common.feeds.AnalysisObject>} analysisObjects
     * @returns {Array<sap.viz.controls.common.feeds.AnalysisObject>}
     */
    FilterBar.prototype.analysisObjectsForPicker = function(analysisObjects) {
        if(arguments.length > 0) {
            this._allAnalyses = analysisObjects;
        } else {
            return this._allAnalyses;
        }
    };

    FilterBar.prototype._plusClickHandler = function(e) {
        var dom = document.createElement('div');
        var newFilterItems = this._getExcludeGlobalFilter(this._vizModel().filterItems());
        var feedList = new FeedList(dom, this._allAnalyses, FeedItemType.DIMENSION, newFilterItems);
        feedList.addEventListener(FeedListEvent.ITEM_SELECTED, function(event) {
            var analysisObject = event.data.selectedItem;
            if(analysisObject) {
                this._addFilterItem(analysisObject);
            }
        }, this);
        var offset = this._plus$.offset();
        feedList.open({
            x : offset.left,
            y : offset.top,
            shelfWidth : this._plus$.width()
        });
    };
    
    
    //this just for the fiterbar0
    
    FilterBar.prototype._getExcludeGlobalFilter = function(filterItems) {
        var newFilterItems = [];
        if (filterItems) {
            for (var i = 0; i < filterItems.length; i++) {
                if (filterItems[i].isGlobalFilter() === false) {
                    newFilterItems.push(filterItems[i]);
                }
            }
        }
        return newFilterItems;
    };
    
    FilterBar.prototype._getDroppableAnalysisObject = function(token) {
        if (!token || !token.analysisObject) {
            return null;
        }

        var analysisObject = token.analysisObject;
        var tokenAnalyticalType = analysisObject.type();
        var info = FilterHelper.getFilterInfo(analysisObject);
        if (AnalyticalType.compatible(AnalyticalType.DIMENSION, tokenAnalyticalType) && !FilterHelper.isFilterItemExisted(this._vizModel(), info.id, info.hierarchyLevelId) && tokenAnalyticalType !== AnalyticalType.MND) {
            return analysisObject;
        } else {
            return null;
        }
    }; 

    /**
     * Hanlder for drag over.
     */
    FilterBar.prototype._dragOver = function(e, ui) {
        var token = DragManager.instance().getAnalysisToken(ui.helper);
        if(!token) {
            return;
        }

        var analysisObject = this._getDroppableAnalysisObject(token);
        if(analysisObject) {
            token.currentAction(DropAction.ACCEPT_AS_COPY);
        } else {
            token.currentAction(DropAction.DENY);
        }
    };
    /**
     * Hanlder for drag out.
     */
    FilterBar.prototype._dragOut = function(e, ui) {
        var token = DragManager.instance().getAnalysisToken(ui.helper);
        if(token) {
            token.currentAction(DropAction.DENY);
        }
    };
    /**
     * Handler for drag drop.
     */
    FilterBar.prototype._drop = function(e, ui) {
        var token = DragManager.instance().getAnalysisToken(ui.helper);
        if(!token) {
            return;
        }

        var analysisObject = this._getDroppableAnalysisObject(token);
        if(analysisObject) {
            token.currentAction(DropAction.ACCEPT_AS_COPY);
            this._addFilterItem(analysisObject);
        } else {
            token.currentAction(DropAction.DENY);
        }

        token.dropTarget(this._dom);
    };
    /**
     * add filter item to vizModel.
     * @param {sap.viz.controls.common.feeds.AnalysisObject} analysisObject
     */

    FilterBar.prototype._addFilterItem = function(analysisObject) {
        var filterInfo = FilterHelper.getFilterInfo(analysisObject);
        var name = filterInfo.name;
        var analysisObjectId = filterInfo.id;
        var dataType = analysisObject.dataType();
        var filterItem;
        // create different filter based on the data type of analysis object
        switch(dataType) {
            case FilterBar.TYPE_INTEGER:
            case FilterBar.TYPE_NUMBER:
                filterItem = new NumericRangeFilter(analysisObjectId, name);
                break;
            case FilterBar.TYPE_DATE:
                filterItem = new DateRangeFilter(analysisObjectId, name);
                break;
            // case FilterBar.TYPE_STRING:
            default:
                filterItem = new ValueFilter(analysisObjectId, name);
                if (filterInfo.hierarchyLevelId) {
                    filterItem.hierarchyLevelId = filterInfo.hierarchyLevelId;
                }
                break;
        }
        var filterItems = this._vizModel().filterItems();
        filterItems.push(filterItem);
        this._vizModel().filterItems(filterItems);

        this._dispatchRequestFilterEvent(filterItem);
    };
    /**
     * update Filter
     */
    FilterBar.prototype._filtersChanged = function() {
        if(this._filterItemsContainer$) {
            this._filterItemsContainer$.empty();
        }
        var filterItems = this._vizModel().filterItems();
        if(!filterItems || filterItems.length === 0) {
            this._updateDescription();
            return this;
        }
        if(this._headerVisible === true) {
            this._description$.hide();
            this._layout$.show();
        }
        this._updateFilterItemContainer();
    };
    FilterBar.prototype._dispatchRequestFilterEvent = function(filterItem) {
        //        console.log('edito filter...');
        var _this = this;
        var validateFilterItem = function(changed) {
            var filterItems = _this._vizModel().filterItems();
            if(filterItem.isEmpty()) {
                //remove filter item with empty values.
                var index = filterItems.indexOf(filterItem);
                if(index >= 0) {
                    filterItems.splice(index, 1);
                    _this._vizModel().filterItems(filterItems);
                    _this._tooltip.hide();
                }
                return;
            }

            if(changed) {
                //Dispatch filterChanged event.
                _this._vizModel().filterItems(filterItems);
            }
        };
        var filterItem$ = $('#' + filterItem.id(), this._filterItemsContainer$);
        var data = {
            bounds : Rectangle.toJSON(Rectangle.parseDOM(filterItem$)),
            filterName : filterItem.filterName(),
            analysisObjectId : filterItem.analysisObjectId(),
            filterItem : filterItem,
            validate : validateFilterItem
        };
        this._dispatchEvent(new Event(EventTypeConst.REQUEST_FILTER_VALUES, this, data));
    };
    FilterBar.prototype._createFilterTitle = function(filterItem, filterItem$) {
        if(filterItem.getType() !== AbstractFilter.VALUE_TYPE) {
            var filterText$ = $(document.createElement('span')).appendTo(filterItem$).text(filterItem.filterTitle());
            filterText$.addClass(CSSConst.FILTERBAR0_PREFIX + 'filter-item-text');
            filterText$.addClass(CSSConst.FILTERBAR0_PREFIX + 'range-filter-item-text');
            return;
        }

        var title$ = $(document.createElement('div')).appendTo(filterItem$);
        var name$ = $(document.createElement('div')).appendTo(title$).text(filterItem.filterName()).css("display", 'inline');
        name$.addClass(CSSConst.FILTERBAR0_PREFIX + 'filter-item-text').attr('id', 'filterName');
        var countInfo$ = $(document.createElement('div')).appendTo(title$).css("display", 'inline').attr('id', 'countInfo');
        countInfo$.addClass(CSSConst.FILTERBAR0_PREFIX + 'filter-item-info');
        $(document.createElement('span')).appendTo(countInfo$).text('(');
        var count$ = $(document.createElement('span')).appendTo(countInfo$).text(filterItem.values().length);
        if(filterItem.isExcluded()) {
            count$.addClass(CSSConst.FILTERBAR0_PREFIX + 'filter-exclude');
        }
        $(document.createElement('span')).appendTo(countInfo$).text(')');
    };
    /**
     * create Filter item
     * @param {sap.viz.controls.filterbar0.FilterItem} filterItem
     */
    FilterBar.prototype._createFilterItem = function(filterItem) {
        var filterName = filterItem.filterName();
        var _this = this;

        var dom = document.createElement('div');
        var filterItem$ = $(dom).appendTo(this._filterItemsContainer$);

        this._createFilterTitle(filterItem, filterItem$);
        if(filterItem.isGlobalFilter()) {
            filterItem$.attr({
                'id' : 'GLOBAL-'+filterItem.id()
                });
            filterItem$.addClass(CSSConst.FILTERBAR0_PREFIX + 'global-filter-item');
            
        } else {
            filterItem$.attr({
                'id' : filterItem.id()
                });
            filterItem$.addClass(CSSConst.FILTERBAR0_PREFIX + 'filter-item');
            filterItem$.click(function() {
                _this._dispatchRequestFilterEvent(filterItem);
            });
            var deleteIcon$ = $(document.createElement('div')).appendTo(filterItem$);
            deleteIcon$.addClass(CSSConst.FILTERBAR0_PREFIX + 'delete-icon');
            deleteIcon$.addClass(CSSConst.COMMON_PREFIX + 'UVBSharedSprite');
            deleteIcon$.click(function(e) {
                _this._removeFilterItem(filterItem);
                _this._dispatchEvent(new FilterBarEvent(FilterBarEvent.DELETE_FILTER, _this));
                _this._tooltip.hide();
                e.stopPropagation();
            });
        }
        return filterItem$;
    };
    /**
     * change properties value to number
     * @param {String} string
     */
    FilterBar.prototype._stringToNumber = function(value) {
        if(!value) {
            return 0;
        }
        return parseInt(value.replace('px', ''),10);
    };
    /**
     * update size
     */
    FilterBar.prototype.validateSize = function() {
        var filterItem$ = this._filterItemsContainer$.children();
        if(filterItem$.length === 0) {
            return this;
        }
        filterItem$.css({
            'width' : filterItemWidthDefault
        });
        this._updateFilterItemsWidth();
    };
    /**
     * judge there is enough space nor not
     */
    FilterBar.prototype._needAdjust = function() {
        var height = this._filterItemsContainer$.innerHeight();
        var needChanged = height > filterItemHeightDefault;
        if(needChanged) {
            return true;
        } else {
            return false;
        }
    };
    /**
     * update the filterItemContainer
     *
     */
    FilterBar.prototype._updateFilterItemContainer = function() {
        var filterItems = this._vizModel().filterItems();
        var i;
        for( i = 0;i < filterItems.length;i++) {
            this._createFilterUI(filterItems[i]);
        }
        this._updateFilterItemsWidth();
        return this;
    };

    FilterBar.prototype._createFilterUI = function(filter) {
        var filterName = filter.filterName();
        var filterItem$;
        var _this = this;
        filterItem$ = this._createFilterItem(filter);
        filterItem$.mouseover(function(event) {
            _this._tooltip.show(filter, {
                left : event.clientX,
                top : event.clientY
            });
            $('.' + CSSConst.FILTERBAR0_PREFIX + 'filter-values', event.currentTarget).addClass(CSSConst.FILTERBAR0_PREFIX + 'filter-values-active');
        });
        filterItem$.mousemove(function(event) {
            _this._tooltip.position({
                left : event.clientX,
                top : event.clientY
            });
        });
        filterItem$.mouseout(function(event) {
            _this._tooltip.hide();
            $('.' + CSSConst.FILTERBAR0_PREFIX + 'filter-values', event.currentTarget).removeClass(CSSConst.FILTERBAR0_PREFIX + 'filter-values-active');
        });
        this._addFilterValues(filter, filterItem$);
    };
    FilterBar.prototype._updateFiltersTitle = function() {
        var updataFunc = function(index, filter$) {
            var name$ = $('#filterName', filter$);
            if(name$.length === 0) {
                return;
            }
            name$.css({
                'width' : 'auto'
            });
            var title$ = name$.parent();
            var countInfo$ = $('#countInfo', filter$);
            var namePosition = name$.position();
            var nameWidth = name$.width() + namePosition.left + 2;
            var titleWidth = title$.width() - ImageWidth;
            var countWidth = countInfo$.width();
            var width = Math.min(nameWidth, titleWidth - countWidth);
            name$.css({
                'width' : width - namePosition.left
            });
            countInfo$.css({
                'left' : width
            });
        };
        $('.' + CSSConst.FILTERBAR0_PREFIX + 'filter-item',this._div).each(updataFunc);
        $('.' + CSSConst.FILTERBAR0_PREFIX + 'global-filter-item',this._div).each(updataFunc);
    };
    /**
     * change filter items width
     */
    FilterBar.prototype._updateFilterItemsWidth = function() {
        var data;
        if(this._filterItemsContainer$.children().length === 0) {
            this._updateDescription();
            return this;
        }
        if(!this._needAdjust()) {
            data = {
                'height' : filterItemHeightDefault
            };
            this._dispatchEvent(new FilterBarEvent(FilterBarEvent.HEIGHT_CHANGED, this, data));
            this._updateFiltersTitle();
            return this;
        }
        //adjust the filterItems width
        var changeCount = 0;
        while(this._needAdjust() && changeCount < 2) {
            changeCount++;
            var filterItem$ = $('.' + CSSConst.FILTERBAR0_PREFIX + 'filter-item');
            var width = $($('.'+CSSConst.FILTERBAR0_PREFIX + 'filter-item')[0]).outerWidth() * filterItemShrinks;
            filterItem$.css({
                'width' : width
            });
        }
        //adjust vizframe header height
        if(this._needAdjust()) {
            data = {
                'height' : this._avaliableHeightForHeader()
            };
            this._dispatchEvent(new FilterBarEvent(FilterBarEvent.HEIGHT_CHANGED, this, data));
            if(data.height < this._filterItemsContainer$.outerHeight()) {
                $(this._layout$).scrollTop(this._filterItemsContainer$.outerHeight());
            }
        }
        //filterItemsContainer height may change automatic when header height was changed ,so we need judgment again
        if(!this._needAdjust()) {
            data = {
                'height' : filterItemHeightDefault
            };
            this._dispatchEvent(new FilterBarEvent(FilterBarEvent.HEIGHT_CHANGED, this, data));
        }
        this._updateFiltersTitle();
        return this;
    };

    FilterBar.prototype._avaliableHeightForHeader = function() {
        var containerHeight = this._filterItemsContainer$.outerHeight();
        var minHeight = filterItemHeightDefault - 2;
        var maxHeight = filterItemHeightDefault;
        var num = this._visualLines - 1;
        for(var i = 2;i <= this._visualLines;i++) {
            if(minHeight * i <= containerHeight && containerHeight <= maxHeight * i) {
                num = i - 1;
                break;
            }
        }
        var marginBottom = 2;
        return num * minHeight + maxHeight + marginBottom;
    };
    /**
     * add filter values into filteritem dom.
     */
    FilterBar.prototype._addFilterValues = function(filterItem, filterItem$) {
        var valuesString = filterItem.filterContent();
        var filterText$ = filterItem$.find("span[id='values']");
        if(filterText$.length === 0) {
            filterText$ = $(document.createElement('span')).appendTo(filterItem$);
            filterText$.addClass(CSSConst.FILTERBAR0_PREFIX + 'filter-values');
            filterText$.attr({
                id : 'values'
            });
        }

        filterText$.text(valuesString);

        var excludeClass = CSSConst.FILTERBAR0_PREFIX + 'filter-exclude';
        if(filterItem.isExcluded()) {
            filterText$.addClass(excludeClass);
        } else {
            filterText$.removeClass(excludeClass);
        }
    };
    /**
     * remove the filter in vizModel.filters.
     * @param {sap.viz.controls.filterbar0.FilterItem} filter
     */
    FilterBar.prototype._removeFilterItem = function(filter) {
        var filterItems = this._vizModel().filterItems().slice(0);
        var index = filterItems.indexOf(filter);
        filterItems.splice(index, 1);
        this._vizModel().filterItems(filterItems);
        return filterItems;
    };
    /**
     * update filter bar description
     */
    FilterBar.prototype._updateDescription = function() {
        var filterItems = this._vizModel().filterItems();
        if(filterItems.length === 0 && this._headerVisible === true) {
            this._description$.show();
            this._layout$.hide();
        }
    };
    return FilterBar;
});

define('sap/viz/controls/frame/views/FilterMenuEvent',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function($, OOUtil, Event) {
    var FilterMenuEvent = function(type, target, data) {
        FilterMenuEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.frame.views.FilterMenuEvent";
    };
    OOUtil.extend(FilterMenuEvent, Event);

    FilterMenuEvent.FILTER_CLICKED = "filterClicked";
    FilterMenuEvent.EXCLUDE_CLICKED = "excludeClicked";

       return FilterMenuEvent;
});

define('sap/viz/controls/frame/views/FilterMenu',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/frame/views/FilterMenuEvent'],
// @formatter:on
function($, OOUtil, UIControl, CSSConst, LangManager, FilterMenuEvent) {
    /**
     *  Filter Menu View
     */
    var FilterMenu = function(div/*HTMLDivElement*/, uiConfig) {
        FilterMenu.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.frame.views.FilterMenu";

        this._div = div;
        this._uiConfig = uiConfig;
        this._container = null;

        this._createChildren();
    };

    OOUtil.extend(FilterMenu, UIControl);

    /**
     * Create FilterMenu content, add Filter and Exclude button.
     */
    FilterMenu.prototype._createChildren = function() {
        this._container = $(document.createElement('div')).appendTo(this._div);
        $(this._container).addClass(CSSConst.FRAME_PREFIX + "filtermenu");

        var btnFilter$ = $(document.createElement('div')).appendTo(this._container);
        var filterIcon$ = $(document.createElement('div')).appendTo(btnFilter$);
        filterIcon$.addClass(CSSConst.COMMON_PREFIX + 'havanaSharedSprite16');
        filterIcon$.addClass(CSSConst.FRAME_PREFIX + 'filtermenu-filter-icon');
        var filterText$ = $(document.createElement('div')).appendTo(btnFilter$);
        filterText$.text(LangManager.get('VIZ_FRAME_FILTERMENU_FILTER'));
        btnFilter$.click($.proxy(function() {
            this._dispatchEvent(new FilterMenuEvent(FilterMenuEvent.FILTER_CLICKED), this);
        }, this));

        var btnExclude$ = $(document.createElement('div')).appendTo(this._container);
        var excludeIcon$ = $(document.createElement('div')).appendTo(btnExclude$);
        excludeIcon$.addClass(CSSConst.COMMON_PREFIX + 'havanaSharedSprite16');
        excludeIcon$.addClass(CSSConst.FRAME_PREFIX + 'filtermenu-exclude-icon');
        var excludeText$ = $(document.createElement('div')).appendTo(btnExclude$);
        excludeText$.text(LangManager.get('VIZ_FRAME_FILTERMENU_EXCLUDE'));
        $(btnExclude$).click($.proxy(function() {
            this._dispatchEvent(new FilterMenuEvent(FilterMenuEvent.EXCLUDE_CLICKED), this);
        }, this));

    };

    /**
     * Show FilterMenu.
     * @param {Boolean} showFilter
     * @param {Boolean} showExclude
     */
    FilterMenu.prototype.show = function(showFilter, showExclude) {
        if (showFilter || showExclude) {
            $(this._container).css({
                bottom : 2 + 'px',
                'visibility' : 'visible',
                'display' : 'block'
            });
            $(this._container).show();
        } else {
            $(this._container).hide();
        }
    };

    /**
     * Hide FilterMenu.
     */
    FilterMenu.prototype.hide = function() {
        $(this._container).hide();
    };

    /**
     * Update size.
     * @param {Object} size
     */
    FilterMenu.prototype.size = function(size) {
        $(this._container).css({
            left : (size.width - $(this._container).outerWidth()) / 2 + 'px'
        });
    };
    return FilterMenu;
});

define('sap/viz/controls/common/utils/OSUtil',[],function() {
    

    /**
     * Helper functions that use feature detection or object support to determine which browser is in use.
     * This is not great, as we should not care about the browser, but it is at least more reliable than
     * user agent string parsing/browser sniffing.
     */
    function _isWebkit() {
        return undefined !== document.documentElement.style.webkitBoxAlign;
    }

    function _isIE() {
        // Only IE will have this object
        return !!window.XDomainRequest;
    }

    function _isChrome() {
        // Only Chrome will have this object
        return !!window.chrome;
    }

    function _isFirefox() {
        // Only firefox will have Moz* style elements AND the Gecko product tag, even
        // thought other vendors (IE) like to copy the user agent and product tag of
        // Firefox.
        return (undefined !== document.documentElement.style.MozBoxAlign) && ("Gecko" === window.navigator.product);
    }

    function _isJavaFx() {
        // Exception to the rule, as no obvious feature to detect or object support to distinguish JavaFX
        return (/javafx\//i).test(window.navigator.userAgent);
    }

    function _isSafari() {
        // Chrome and Safari are quite similar in the use of Webkit, but only Chrome has the Chrome object
        return _isWebkit() && !_isChrome();
    }

    function _isSafariMobile() {
        // Mobile Safari is similar to Safari and Chrome, but only Mobile Safari has the standalone
        // property indicating that Webkit is being used in standalone mode
        return (undefined !== window.navigator.standalone) && _isWebkit() && !_isChrome();
    }

    return {
        isIE: _isIE,
        isChrome: _isChrome,
        isFirefox: _isFirefox,
        isJavaFx: _isJavaFx,
        isSafari: _isSafari,
        isSafariMobile: _isSafariMobile,
        isWebkit: _isWebkit
    };
});

define('sap/viz/controls/chart/views/TitleContextMenu',[
// @formatter:off
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/OSUtil',
    'sap/viz/controls/common/UIControl',
    'sap/viz/controls/common/constants/CSSConst',
    'jquery'
    ],
// @formatter:on
function(OOUtil, OSUtil, UIControl, CSSConst, $) {
    /**
     *  Context Menu View
     */
    var ContextMenu = function(div/*HTMLDivElement*/, items) {
        ContextMenu.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.views.TitleContextMenu";

        //container
        this._div = div;
        this._menu = null;

        this._visible = true;
        this._shown = false;

        this._cusMenuItems = items;
        this._createContextMenu();

        this._mousedownHandler = $.proxy(this._handleMousedownEvent, this);
    };

    OOUtil.extend(ContextMenu, UIControl);

    /**
     * TODO: Add comments.
     */
    ContextMenu.prototype._createContextMenu = function() {
        var _this = this;

        this._menu = document.createElement('div');
        $(this._menu).addClass(CSSConst.PREFIX + 'contextmenu');
        $(this._div).append(this._menu);

        this.hide();

        this._ul = document.createElement('ul');
        $(this._ul).addClass([CSSConst.CONTEXTMENU_PREFIX + 'list', CSSConst.CONTEXTMENU_PREFIX + 'list-hovered'].join(' '));
        $(this._ul).appendTo(this._menu);
    };
    var EventType = [];

    ContextMenu.prototype._getCusMenuItem = function(name) {
        if (this._cusMenuItems && this._cusMenuItems.length > 0) {
            for (var i = 0; i < this._cusMenuItems.length; i++) {
                var menuItem = this._cusMenuItems[i];
                if (menuItem.name === name) {
                    return menuItem;
                }
            }
        }
        return null;
    };
    /**
     * TODO: Add comments.
     */

    ContextMenu.prototype.updateMenu = function() {
        var visiArray = [];

        $(this._ul).empty();

        for (var i = 0; i < this._cusMenuItems.length; i++) {
            var cusMenuItem = this._cusMenuItems[i];
            this._createMenuItemUI(cusMenuItem);
        }
    };

    ContextMenu.prototype._createMenuItemUI = function(cusMenuItem) {
        var text = cusMenuItem.text;
        var eventData = {};
        eventData.clickHandler = cusMenuItem.clickHandler;
        eventData.scope = cusMenuItem.scope;
        var enabled = cusMenuItem.enableValidator.apply(cusMenuItem.scope);
        var id = cusMenuItem.name;

        var li = document.createElement('li');
        var menuItem = document.createElement('div');

        $(li).addClass(CSSConst.CONTEXTMENU_PREFIX + "MnuItm");
        $(menuItem).addClass(CSSConst.CONTEXTMENU_PREFIX + "MnuItm");
        $(li).appendTo(this._ul);
        $(menuItem).appendTo(li);

        var Text = $("<div>", {
            "class" : CSSConst.CONTEXTMENU_PREFIX + "MnuItmTxt"
        });
        $(Text).appendTo(menuItem);
        $(Text).text(text);
        if (enabled) {
            $(Text).css("color", "black");
        } else {
            $(Text).css("color", "grey");
        }

        menuItem.id = id;
        var _this = this;

        if (enabled) {
            $(menuItem).click(function(event) {
                if (eventData.clickHandler) {
                    eventData.clickHandler.apply(eventData.scope);
                }

                _this.hide();
            });
        } else {
            $(menuItem).click(function(event) {
                _this.hide();
            });
        }
    };

    ContextMenu.prototype.isShown = function() {
        return this._shown;
    };
    /**
     * TODO: Add comments.
     */
    ContextMenu.prototype.show = function(options) {
        //create menu items ui according to current viz type
        this.updateMenu();
        //update position after update ui
        if (options && options.position) {
            var parentWidth = $(this._div).innerWidth();
            var menuWidth = $(this._menu).outerWidth();
            var left = options.position.pageX;
            if (parentWidth < menuWidth + left) {
                left = parentWidth - menuWidth;
            }
            var top = options.position.pageY;
            var parentHeight = $(this._div).parent().innerHeight();
            var menuHeight = $(this._menu).outerHeight();
            if (parentHeight < menuHeight + top) {
                top = parentHeight - menuHeight;
            }

            top += $(this._div).parent().offset().top;
            if(left < 0){
                left = $(this._div).parent().offset().left;
            }else{
                left += $(this._div).parent().offset().left;
            }
            $(this._menu).css({
                position : "fixed",
                left : left + "px",
                top : top + "px"
            });
        }

        $(this._menu).css('visibility', 'visible');
        this._shown = true;
        document.removeEventListener("mousedown", this._mousedownHandler, true);
        $(window).off('blur', this._mousedownHandler);
        document.addEventListener("mousedown", this._mousedownHandler, true);
        $(window).on('blur', this._mousedownHandler);
    };

    /**
     * handle Mousedown Event
     */
    ContextMenu.prototype._handleMousedownEvent = function(event) {
        var id = event.target.id;

        //Click on text of context menu item, re-try parent id since pointer-events is not supported by IE9,IE10
        if (OSUtil.isIE() && id === "") {
            id = event.target.parentNode.id;
        }
        var cusMenuItem = this._getCusMenuItem(id);
        if (cusMenuItem) {
            return;
        }

        this.hide();
    };

    /**
     * TODO: Add comments.
     */
    ContextMenu.prototype.hide = function() {
        $(this._menu).find('*').removeData().off();
        $(this._menu).css('visibility', 'hidden');
        this._shown = false;
    };

    return ContextMenu;
});

define('sap/viz/controls/chart/views/TitleEditor',[
// @formatter:off
'jquery', 'sap/viz/controls/common/constants/CSSConst', 'sap/viz/controls/common/utils/OOUtil', 'sap/viz/controls/common/utils/OSUtil', 'sap/viz/controls/common/events/Event', 'sap/viz/controls/common/VizControlBase', 'sap/viz/controls/common/helpers/Rectangle',
'sap/viz/controls/chart/views/TitleContextMenu','sap/viz/controls/common/managers/LangManager', 'sap/viz/controls/common/utils/ChartTypeUtil', 'sap/viz/controls/chart/Chart'],
// @formatter:on
function($, CSSConst, OOUtil, OSUtil, Event, VizControlBase, Rectangle, TitleContextMenu, LangManager, ChartTypeUtil, Chart) {

    var TitleEditor = function(div, uiconfig) {
        TitleEditor.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.chart.views.TitleEditor";
        this._targetDiv = div;
        this._uiconfig = uiconfig;
        this._editing = false;

        this.createChildren();
    };

    OOUtil.extend(TitleEditor, VizControlBase);

    /**
     * TODO: Add comments.
     */
    TitleEditor.prototype.createChildren = function() {
        //create sub div

        var parent = this._targetDiv;

        this._div = $(document.createElement("DIV"));
        this._textInput = $('<input type="text" spellcheck="false"/>');
        this._textInput.addClass(CSSConst.CHART_PREFIX + 'title-text');
        this._textInput.attr('value', this._vizProxy().getTitleText());

        this._settingBtn = $(document.createElement("div"));
        this._settingBtn.addClass(CSSConst.CHART_PREFIX + 'title-button');
        var settingIcon$ = $(document.createElement("div")).appendTo(this._settingBtn);
        settingIcon$.addClass(CSSConst.COMMON_PREFIX + "UVBSharedSprite");
        settingIcon$.addClass(CSSConst.CHART_PREFIX + "setting-icon");
        this._settingBtn.hide();

        var menuItems = [{
            text : LangManager.get('VIZ_CHART_TITLE_CONTEXT_MENU_EDIT'),
            name : 'edit',
            clickHandler : this.enterEditMode,
            enableValidator : function() {
                return true;
            },
            scope : this
        }, {
            text : LangManager.get('VIZ_CHART_TITLE_CONTEXT_MENU_RESTORE'),
            name : 'restore',
            clickHandler : this.restore,
            enableValidator : function() {
                return this.edited();
            },
            scope : this
        }];
        this._contextMenu = new TitleContextMenu(parent, menuItems);

        this._div.append(this._textInput).append(this._settingBtn).appendTo(parent);

        var _this = this;

        document.addEventListener("mousedown", function(event) {
            _this._documentMouseDownHandler(event);
        }, true);

        this._settingBtn.click(function(event) {
            _this._popupContextMenu();
        });

        this._div.bind("mouseover", function() {
            _this.mouseOver();
        }).bind("mouseout", function() {
            _this.mouseOut();
        }).bind("dblclick", function() {
            _this.dblClick();
        }).bind('keypress', function(event) {
            // Response to 'Enter' key press.
            if (event.keyCode == 13) {
                _this._documentKeyPressHandler(event);
                event.preventDefault();
            }
        });
    };

    TitleEditor.prototype.editable = function() {
        return !this._vizProxy().isFakeChart();
    };

    TitleEditor.prototype.edited = function() {
        return this._vizProxy().isTitleCustomized();
    };

    TitleEditor.prototype.restore = function() {
        this._editing = false;
        this._vizProxy().setTitleMode(Chart.VIZ_TITLE_MODE.auto);
        this._vizProxy().restoreTitleText();
    };

    TitleEditor.prototype.enterEditMode = function() {
        if (this.editable()) {
            this._settingBtn.hide();
            this._editing = true;
            this._layoutTitleDiv();

            this._textInput.css({
                'display' : 'block'
            });
            this._textInput.val(this._vizProxy().getTitleText());
            this._textInput.focus().select();
        }
    };

    TitleEditor.prototype._layoutTitleDiv = function() {
        var area = this._vizProxy().getTitleZone();
        if (area && area.length > 0) {
            var scrollLeft = this._targetDiv.scrollLeft();
            var left = area[0][0], top = area[0][1], width = area[2][0] - area[0][0], height = area[2][1] - area[0][1];
            var style = "position:absolute;box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;";
            if (this._editing) {
                var padding = 8;
                style += "left:" + scrollLeft + "px;top:" + (top - padding) + "px;width:100%;" + "height:" + (height + padding * 2) + "px;";
                this._div.addClass(CSSConst.CHART_PREFIX + 'title-edit');
            } else {
                style += "left:" + left + "px;top:" + top + "px;width:" + (width + 16) + "px;height:" + height + "px;";
                if (OSUtil.isIE()) {
                    style += "background-color:rgba(0,0,0,0)";
                }
                this._div.removeClass(CSSConst.CHART_PREFIX + 'title-edit');
            }
            this._div.attr('style', style);
        }
    };

    TitleEditor.prototype.init = function() {
        var properties = this._vizProxy().getProperties() || null;
        var interaction = properties ? properties.interaction : null;
        var behaviorType = interaction ? interaction.behaviorType : null;
        if(ChartTypeUtil.supportTitle(this._vizModel().type()) && behaviorType !== "DesignTimeBehavior") {
            this.size();
            this._show();
        } else {
            this._hide();
        }
    };

    TitleEditor.prototype._show = function() {
        this.show();
    };

    TitleEditor.prototype._hide = function() {
        this.hide();
    };

    TitleEditor.prototype.dblClick = function() {
        if (this.editable() && !this._editing) {
            this.enterEditMode();
        }
    };

    TitleEditor.prototype._popupContextMenu = function() {

        var area = this._vizProxy().getTitleZone();
        var left = area[0][0], top = area[0][1], width = area[2][0] - area[0][0], height = area[2][1] - area[0][1];
        var offset = 95;

        var pos = {
            pageX : left + width - offset - this._targetDiv.scrollLeft(),
            pageY : top + height - this._targetDiv.scrollTop()
        };

        this._contextMenu.show({
            position : pos
        });
    };

    TitleEditor.prototype.mouseOver = function() {
        var titleObj = this._vizProxy().getProperties().title||{visible:true};
        if (this.editable() && !this._editing && titleObj.visible) {
            this._layoutTitleDiv();
            this._settingBtn.show();
        }
    };

    TitleEditor.prototype.mouseOut = function() {
        if (this.editable() && !this._editing) {
            this._layoutTitleDiv();
            //to support IE9, use rgba(0,0,0,0) instead of transparent
            if (OSUtil.isIE()) {
                this._div.css({
                    'border-width' : '0px',
                    'background-color' : 'rgba(0,0,0,0)'
                });
            } else {
                this._div.css({
                    'border-width' : '0px',
                    'background-color' : 'transparent'
                });
            }
            this._textInput.css({
                'display' : 'none'
            });
            this._textInput.blur();
            if (!this._contextMenu.isShown()) {
                this._settingBtn.hide();
            }
        }
    };

    TitleEditor.prototype._documentMouseDownHandler = function(event) {
        if (this._editing && event.target !== this._textInput[0]) {
            this._commitTitleEdit();
            event.stopPropagation();
        }
        if (this._contextMenu.isShown() && event.target != this._settingBtn[0] && event.target.parentElement != this._settingBtn[0]) {
            this._settingBtn.hide();
        }

        if (!this._editing && event.which === 3 && event.target === this._div[0]) {
            // if not editing and right mouse down
            // hide title editor so right mouse up event could be captured at chart instance
            this._div.hide();
        }
    };

    TitleEditor.prototype._documentKeyPressHandler = function(event) {
        if (this._editing && event.target === this._textInput[0]) {
            this._commitTitleEdit();
            event.stopPropagation();
        }
    };

    TitleEditor.prototype._onVizModelChanged = function(){
        this.init();
    };

    TitleEditor.prototype._commitTitleEdit = function() {
        this._editing = false;
        var titleText = this._textInput[0].value;
        if (titleText != this._vizProxy().getTitleText()) {
            this._vizProxy().setTitleMode(Chart.VIZ_TITLE_MODE.manual);
            this._vizProxy().setTitleText(titleText);
        }
        this.mouseOut();
    };

    TitleEditor.prototype.size = function() {
        this._layoutTitleDiv();
        if (this._contextMenu.isShown()) {
            this._popupContextMenu();
        }
    };
    
    TitleEditor.prototype.load = function(){
        this.init();
    };
    
    return TitleEditor;
});


define('sap/viz/controls/playcontrol/PlayControlEvent',[
// @formatter:off
    'jquery',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/events/Event'],
// @formatter:on
function($, OOUtil, Event) {
    var PlayControlEvent = function(type, target, data) {
        PlayControlEvent.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.playcontrol.PlayControlEvent";
    };
    OOUtil.extend(PlayControlEvent, Event);

    /**
     * type: 'valueChanged',
     * data: 'value',
     */
    PlayControlEvent.SLICE_DIMENSION_CHANGED = "sliceDimensionChanged";
    
    PlayControlEvent.UPDATE_CHART_COMPLETE = "updateChartComplete";
    
    return PlayControlEvent;
});

// @formatter:off
define('sap/viz/controls/playcontrol/PlayControl',["jquery",
    "sap/viz/controls/common/VizControlBase",
    "sap/viz/controls/common/config/GlobalConfig",
    'sap/viz/controls/common/metadata/MetadataFactory',
    "sap/viz/controls/common/constants/CSSConst",
    "sap/viz/controls/common/utils/OOUtil",
    "sap/viz/controls/playcontrol/PlayControlEvent",
    'sap/viz/controls/common/feeds/AnalysisObject',
    "sap/viz/controls/common/utils/Utils",
    "sap/viz/controls/common/feeds/FeedItemType",
    "sap/viz/controls/common/constants/ChartConst",
    "sap/viz/controls/common/utils/ChartTypeUtil",
    "sap/viz/controls/common/constants/DatasetTypeConst"
], function($, VizControlBase, GlobalConfig, MetadataFactory, CSSConst, OOUtil,
    PlayControlEvent, AnalysisObject, Utils, FeedItemType, ChartConst, ChartTypeUtil, DatasetTypeConst) {
// @formatter:on

    var PLAY_STATE_STOP = 0, PLAY_STATE_INPROGRESS = 1, PLAY_STATE_PAUSED = 2, DEFAULT_STEP = 1, PLAY_TIMER_INTERVAL = 1000, PAUSED_ICON = "/controls/playcontrol/assets/paused.svg", PROGRESS_ICON = "/controls/playcontrol/assets/inprogress.svg", LABEL_DEFAULT_HEIGHT = 48;

    var PlayTimer = function(player) {
        this._player = player;
        this._t = null;
        this._lastUpdateTstmp = 0;
    };

    PlayTimer.prototype._playerUpdateHandler = function() {
        if (this._player) {
            var tstmp = (new Date()).getTime();
            if (tstmp - this._lastUpdateTstmp >= PLAY_TIMER_INTERVAL) {
                this._player._progressing();
                this._lastUpdateTstmp = tstmp;
            } else {
                if (!this._t) {
                    this._t = setTimeout($.proxy(function() {
                        clearTimeout(this._t);
                        this._t = null;
                        this._playerUpdateHandler();
                    }, this), tstmp - this._lastUpdateTstmp);
                }
            }
        }
    };

    PlayTimer.prototype.start = function() {
        this._player._start();
        if (!this._player.hasEventListener(PlayControlEvent.UPDATE_CHART_COMPLETE, this._playerUpdateHandler, this)) {
            this._player.addEventListener(PlayControlEvent.UPDATE_CHART_COMPLETE, this._playerUpdateHandler, this);
        }
        this._playerUpdateHandler();
    };

    PlayTimer.prototype.pause = function() {
        if (this._t) {
            clearTimeout(this._t);
            this._t = null;
        }
        if (this._player.hasEventListener(PlayControlEvent.UPDATE_CHART_COMPLETE, this._playerUpdateHandler, this)) {
            this._player.removeEventListener(PlayControlEvent.UPDATE_CHART_COMPLETE, this._playerUpdateHandler, this);
        }
        this._player._pause();
    };

    PlayTimer.prototype.stop = function() {
        if (this._t) {
            clearTimeout(this._t);
            this._t = null;
        }
        if (this._player.hasEventListener(PlayControlEvent.UPDATE_CHART_COMPLETE, this._playerUpdateHandler, this)) {
            this._player.removeEventListener(PlayControlEvent.UPDATE_CHART_COMPLETE, this._playerUpdateHandler, this);
        }
        this._player._stop();
    };

    /**
     *
     * UI5 dependencies: sap.ui.commons
     */
    var PlayControl = function(div/* HTMLDivElement */, uiConfig/* JSON */) {
        PlayControl.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.playcontrol.PlayControl";

        this._div = div;
        this._body = null;
        this._slider = null;
        this._playBtn = null;
        this._slicedData = [];
        this._labelDiv = null;
        this._timer = new PlayTimer(this);
        this._state = PLAY_STATE_STOP;
        this._currentVal = 0;
        this._step = DEFAULT_STEP;
        this._visible = false;

        this._chartFeedings = [];
        this._createChildren();

        this._chartUpdateCompleteHandler = $.proxy(function() {
            this._dispatchEvent(new PlayControlEvent(PlayControlEvent.UPDATE_CHART_COMPLETE, this));
        }, this);
    };

    OOUtil.extend(PlayControl, VizControlBase);

    PlayControl.prototype.sliceDimension = function(analysisObject) {

        if (arguments.length > 0) {
            this._vizModel().playerField(analysisObject);
            return this;
        } else {
            return this._vizModel().playerField();
        }
    };

    PlayControl.prototype.slicedData = function(slicedData) {
        if (arguments.length > 0) {
            this._slicedData = slicedData;
            this._resetControls();
            if (! $.isEmptyObject(slicedData)) {
                this._resetChartFrameDataScale();
            }
        } else {
            return this._slicedData;
        }
    };

    PlayControl.prototype._createChildren = function() {
        var _this = this;
        var config = this._uiConfig;
        if (!this._body) {
            this._body = $(document.createElement("div")).appendTo(this._div);
            this._body.addClass(CSSConst.PLAYCTRL_PREFIX + "body");
        }

        if (!this._playBtnDiv) {
            this._playBtnDiv = $(document.createElement("div")).appendTo(this._body);
            this._playBtnDiv.addClass(CSSConst.PLAYCTRL_PREFIX + "playbtn");
            this._playBtn = new sap.ui.commons.Button({
                icon : GlobalConfig.defaultAssetsRoot() + PAUSED_ICON,
                iconDesityAware : true,
                press : $.proxy(_this._btnPress, this)
            });

            this._playBtn.addStyleClass(CSSConst.PLAYCTRL_PREFIX + "playbtn");
            this._playBtn.placeAt(this._playBtnDiv);
        }

        if (!this._sliderDiv) {
            this._sliderDiv = $(document.createElement("div")).appendTo(this._body);
            this._sliderDiv.addClass(CSSConst.PLAYCTRL_PREFIX + "slider");
            this._slider = new sap.ui.commons.Slider({
                editable : false,
                min : 0,
                max : 1,
                smallStepWidth : 1,
                liveChange : $.proxy(this._sliderValueChange, this)
            });

            this._slider.placeAt(this._sliderDiv);
        }

        if (!this._labelDiv) {
            this._labelDiv = $(document.createElement("div")).appendTo(this._body);
            this._labelDiv.addClass(CSSConst.PLAYCTRL_PREFIX + "label").text("text");
        }

        this._resetControls();

        // //support drop filter
        // $(this._div).droppable({
        // tolerance : "pointer",
        // accept : "." + DragManager.DRAGGABLE_CLASS_ANALYSIS,
        // over : $.proxy(this._dragOver, this),
        // out : $.proxy(this._dragOut, this),
        // drop : $.proxy(this._drop, this)
        // });
    };

    PlayControl.prototype._progressing = function() {
        this._currentVal += this._step;
        if (this._currentVal > this._slider.getMax()) {
            this._timer.stop();
            return;
        }
        this._updateControls();
        this._updateChartData();
    };

    PlayControl.prototype._start = function() {
        this._state = PLAY_STATE_INPROGRESS;
        this._updateControls();
        // disable interaction for geobubble if playing
        this._updateChartScale();
        this._enableChartInteraction(false);
    };

    PlayControl.prototype._stop = function() {
        this._state = PLAY_STATE_STOP;
        this._currentVal = 0;
        this._updateControls();
        this._updateChartData();
        // re-enable interaction for geobubble if playing
        this._enableChartInteraction(true);
    };

    PlayControl.prototype._pause = function() {
        this._state = PLAY_STATE_PAUSED;
        this._updateControls();
        // re-enable interaction for geobubble if playing
        this._enableChartInteraction(true);
    };

    PlayControl.prototype._updateChartData = function() {
        if (!ChartTypeUtil.isInfoChart(this._vizModel().type())) {
            if (this._slicedData && this._slicedData.slices) {
                if (this._slicedData.slices.length === 0) {
                    var data;
                    var datasetType = ChartTypeUtil.getDatasetType(this._vizModel().type());
                    if (datasetType === DatasetTypeConst.CROSS_TABLE) {
                        data = new sap.viz.api.data.CrosstableDataset();
                    } else if (datasetType === DatasetTypeConst.FLAT_TABLE) {
                        data = new sap.viz.api.data.FlatTableDataset({
                            data : [],
                            metadata : {
                                fields : []
                            },
                            info : []
                        });
                    } else {
                        data = null;
                    }
                    this._slicedData.slices.push({
                        data : data
                    });
                }
                if (this._slicedData.slices[this._currentVal] !== undefined) {
                    this._vizProxy().SetDataset(this._slicedData.slices[this._currentVal].data);
                }
            }
        } else if (this._hasData()) {
            this._vizProxy().setScales([{
                feed : 'playField',
                type : 'play',
                currentValue : this._slicedData[this._currentVal]
            }]);
        }
    };

    PlayControl.prototype._updateChartScale = function() {
        // set the scale for geobubble because it could not remember
        // the current scale
        if (this._vizModel().type() === ChartConst.TYPE_GEO_BUBBLE) {
            var props = this._vizProxy().getProperties();
            if (props && props.geoContainer) {
                this._vizProxy().updateProperties({
                    properties : {
                        geoContainer : {
                            isFixedScale : true,
                            scale : props.geoContainer.scale,
                            center : props.geoContainer.center
                        }
                    },
                    disableDispatchInteractionCompleteEvent : true
                });
            }
        }
    };

    PlayControl.prototype._resetChartFixScale = function() {
        // reset geobubble fixscale settings
        if (this._vizModel().type() === ChartConst.TYPE_GEO_BUBBLE) {
            this._vizProxy().updateProperties({
                properties : {
                    geoContainer : {
                        isFixedScale : this.sliceDimension() != null,
                        scale : null,
                        center : []
                    }
                },
                disableDispatchInteractionCompleteEvent : true
            });
        }
    };

    PlayControl.prototype._resetChartFrameDataScale = function() {
        // util function to calculate the value range for specific feed
        // definition
        function calcFeedsValueRange(feedingItems, measuresRange) {
            var i, measureId, min = Number.MAX_VALUE, max = Number.MIN_VALUE, rangeCalced = false;
            if (feedingItems && measuresRange) {
                for ( i = 0; i < feedingItems.length; i++) {
                    measureId = feedingItems[i].name();
                    if (measuresRange[measureId]) {
                        min = Math.min(measuresRange[measureId][0], min);
                        max = Math.max(measuresRange[measureId][1], max);
                        rangeCalced = true;
                    }
                }
            }
            // use [0,0] to reset the value range
            return rangeCalced ? [min, max] : [0, 0];
        }

        // util function to update value to property indicated by the
        // string path (e.g. "a.b.c") of specific object
        function updatePropValue(obj, path, value) {
            var arr = path.split("."), j, level;
            for ( j = 0, level = obj; j < arr.length; j++) {
                if (j == arr.length - 1) {
                    level[arr[j]] = value;
                } else {
                    level[arr[j]] = level[arr[j]] || {};
                    level = level[arr[j]];
                }
            }
        }

        if (!ChartTypeUtil.isInfoChart(this._vizModel().type())) {
            var updateObj = {}, measureFeeds = [], chartType = this._vizModel().type(), metadata = MetadataFactory.get(chartType), measuresInfo = {}, feedId, feedings, feedRange, feedsValueRange = {}, dataScale = metadata ? metadata.dataScale() : null;
            if (!dataScale) {
                // return if there's no datascale settings
                return;
            }

            if (this._slicedData && Utils.isArray(this._slicedData.measuresInfo)) {
                this._slicedData.measuresInfo.forEach(function(item) {
                    measuresInfo[item.name] = item.range;
                });
            }
            if (this._chartFeedings) {
                // filter out the dimension
                measureFeeds = this._chartFeedings.filter(function(item) {
                    return item && item.type() === FeedItemType.MEASURE;
                });
                // calculating min and max value for all the feeds that has
                // feeding
                if (measureFeeds.length > 0) {
                    measureFeeds.forEach(function(item) {
                        feedsValueRange[item.id()] = calcFeedsValueRange(item.values(), measuresInfo);
                    });
                }
            }

            if (this._vizModel().type() === ChartConst.TYPE_GEO_BUBBLE) {
                for (feedId in feedsValueRange) {
                    if (feedsValueRange.hasOwnProperty(feedId)) {
                        feedRange = feedsValueRange[feedId];
                    }
                    if (dataScale[feedId] && Utils.isArray(dataScale[feedId].minValue)) {
                        dataScale[feedId].minValue.forEach(function(propPath) {
                            updatePropValue(updateObj, propPath, feedRange[0]);
                        });
                    }
                    if (dataScale[feedId] && Utils.isArray(dataScale[feedId].maxValue)) {
                        dataScale[feedId].maxValue.forEach(function(propPath) {
                            updatePropValue(updateObj, propPath, feedRange[1]);
                        });
                    }
                }
                // update the properties
                this._vizProxy().updateProperties({
                    properties : updateObj,
                    disableDispatchInteractionCompleteEvent : true
                });
            } else {
                updateObj = this._vizProxy().getScales() || [];
                for (feedId in feedsValueRange) {
                    if (feedsValueRange.hasOwnProperty(feedId)) {
                        feedRange = feedsValueRange[feedId];
                    }
                    for (var i = 0; i < dataScale.length; i++) {
                        var scaleDef = dataScale[i];
                        if (scaleDef.feed === feedId) {
                            for (var j = 0; j < updateObj.length; j++) {
                                if (updateObj[j].feed === feedId) {
                                    if (scaleDef.min) {
                                        updateObj[j].min = feedRange[0];

                                    }
                                    if (scaleDef.max) {
                                        updateObj[j].max = feedRange[1];
                                    }
                                    break;
                                }
                            }
                            break;
                        }
                    }
                }

                this._vizProxy().setScales(updateObj);
            }
        }
    };

    PlayControl.prototype._enableChartInteraction = function(enable) {
        if (this._vizModel().type() === ChartConst.TYPE_GEO_BUBBLE) {
            this._vizProxy().updateProperties({
                properties : {
                    geoController : {
                        disableInteraction : !enable
                    }
                },
                disableDispatchInteractionCompleteEvent : true
            });
        }
    };

    PlayControl.prototype._updateControls = function() {
        switch (this._state) {
            case PLAY_STATE_STOP:
                this._playBtn.setIcon(GlobalConfig.defaultAssetsRoot() + PAUSED_ICON);
                break;
            case PLAY_STATE_INPROGRESS:
                this._playBtn.setIcon(GlobalConfig.defaultAssetsRoot() + PROGRESS_ICON);
                break;
            case PLAY_STATE_PAUSED:
                this._playBtn.setIcon(GlobalConfig.defaultAssetsRoot() + PAUSED_ICON);
                break;
        }
        this._slider.setValue(this._currentVal);
        if (this._slicedData && this._slicedData.slices && this._slicedData.slices[this._currentVal] !== undefined) {
            this._labelDiv.text(this._slicedData.slices[this._currentVal].dimensionMember);
            this._alignLabelWithSliderThumb();
        }
        if (this._slicedData && typeof (this._slicedData[0]) == 'string') {
            this._labelDiv.text(this._slicedData[this._currentVal]);
            this._alignLabelWithSliderThumb();
        }
    };

    PlayControl.prototype._alignLabelWithSliderThumb = function() {
        // remove the explicit width first to let the browser calc the width according to the text
        this._labelDiv.width("auto");
        // layout position of label
        var sliderLeft = this._sliderDiv.offset().left, sliderWidth = this._sliderDiv.width(), labelWidth = Math.min(sliderWidth, this._labelDiv.width()), thumbLeft = $(".sapUiSliGrip", this._sliderDiv).offset() ? $(".sapUiSliGrip", this._sliderDiv).offset().left : 0;

        this._labelDiv.width(labelWidth + 1);
        //add 1 pixel for ie ellipsis
        this._labelDiv.offset({
            left : labelWidth + thumbLeft < sliderLeft + sliderWidth ? thumbLeft : sliderLeft + sliderWidth - labelWidth
        });
    };

    PlayControl.prototype._resetControls = function() {
        var hasData = this._hasData();
        this._playBtn.setEnabled(hasData);
        this._slider.setEditable(hasData);
        this._slider.setEnabled(hasData);
        this._slider.setMin(0);
        this._slider.setMax(hasData && this._slicedData.slices ? this._slicedData.slices.length - 1 : hasData && typeof (this._slicedData[0]) == 'string' ? this._slicedData.length - 1 : 1);
        this._updateControls();
        this._updateLabelVisiblity();
    };

    PlayControl.prototype._btnPress = function() {
        // button press
        switch (this._state) {
            case PLAY_STATE_STOP:
            case PLAY_STATE_PAUSED:
                this._timer.start();
                break;  
            case PLAY_STATE_INPROGRESS:
                this._timer.pause();
                break;
        }
    };

    PlayControl.prototype._onConnect = function(e) {
        PlayControl.superclass._onConnect.apply(this, arguments);
        // get feedingItems and sliceDimension when connect
        this._chartFeedings = this._vizModel().feedingItems();
        this._sliceDimensionChanged();
        this._vizProxy().on("initialized.playcontrol", this._chartUpdateCompleteHandler);
    };

    PlayControl.prototype._onVizModelChanged = function(e) {
        if (e.data.feedingItemsChanged) {
            this._chartFeedings = this._vizModel().feedingItems();
            if (!ChartTypeUtil.isInfoChart(this._vizModel().type())) {
                this.slicedData([]);
            }
        }
        if (e.data.sliceDimensionChanged) {
            this._sliceDimensionChanged();
        }
    };

    PlayControl.prototype._sliderValueChange = function() {
        // button press
        this._currentVal = this._slider.getValue();
        this._updateControls();
        this._updateChartScale();
        this._updateChartData();
    };

    PlayControl.prototype._sliceDimensionChanged = function() {
        // reset sliceData
        this.slicedData([]);
        this._resetChartFixScale();
        // dispatch event
        var args = {
            "sliceDimension" : this.sliceDimension()
        };
        this._dispatchEvent(new PlayControlEvent(PlayControlEvent.SLICE_DIMENSION_CHANGED, this, args));
    };

    PlayControl.prototype.validateSize = function(w, h) {
        var btnWidth = 0, btnHeight = 0, sliderWidth, bodyheight = $(this._body).height();
        var sliderHeight;
        $(this._body).css({
            width : w
        });
        if (this._playBtnDiv) {
            btnWidth = this._playBtnDiv.outerWidth();
            btnHeight = this._playBtnDiv.outerHeight();
            this._playBtnDiv.css({
                top : bodyheight / 2 - btnHeight / 2 + "px",
                left : 0 + "px",
                position : "absolute"
            });
        }
        if (this._sliderDiv) {
            sliderWidth = w - btnWidth;
            this._slider.setWidth(sliderWidth + "px");
            sliderHeight = this._slider.getHeight();
            this._sliderDiv.css({
                top : bodyheight / 2 + "px",
                left : btnWidth + "px",
                position : "absolute"
            });
        }
        if (this._labelDiv) {
            // use timeout ot layout the label after the slider thumb
            // actually updated
            setTimeout($.proxy(function() {
                this._alignLabelWithSliderThumb();
            }, this), 0);
        }
        if (this._slider.oGrip && this._slider.oGrip.title) {
            //currently,as the mouseover events is UI5 internal
            //to make the animation slider work properly,the slider title value is forbidden when mouseover
            //so use the follow workaround to make it
            //details:BITSDC4-1311
            $(".viz-controls-playcontrol-slider #__slider0-grip").mouseover(function(event) {
                $('#__slider0-grip').attr('title', " ");
            });
        }
    };

    PlayControl.prototype.visible = function(visible) {
        PlayControl.superclass.visible.apply(this, arguments);
        this._visible = visible;
        this._updateLabelVisiblity();
    };

    PlayControl.prototype._updateLabelVisiblity = function() {
        var hasData = this._hasData();
        this._labelDiv.css("visibility", hasData && this._visible ? "visible" : "hidden");
    };

    /** @param {JSON} options
     *      optional
     *      supported options: {emptyDataset : false}
     *
     */
    PlayControl.prototype.save = function(options) {
        var slicedData = {}, i = 0;
        if (!ChartTypeUtil.isInfoChart(this._vizModel().type())) {
            if (options && options.emptyDataset === true) {
                slicedData.measuresInfo = [];
                slicedData.slices = [];
            } else if (this._slicedData && this._slicedData.measuresInfo) {
                slicedData.measuresInfo = this._slicedData.measuresInfo;
                if (Utils.isArray(this._slicedData.slices)) {
                    slicedData.slices = [];
                    for (; i < this._slicedData.slices.length; i++) {
                        if (this._slicedData.slices[i].data) {
                            slicedData.slices.push({
                                data : this._slicedData.slices[i].data.toJSON(),
                                dimensionMember : this._slicedData.slices[i].dimensionMember
                            });
                        }
                    }
                }
            }
        } else if (this._hasData()) {
            slicedData = this._slicedData;
        }
        return {
            sliceDimension : AnalysisObject.toJSON(this.sliceDimension()),
            slicedData : slicedData,
            value : this._currentVal
        };
    };

    PlayControl.prototype.load = function(valueJSON) {
        var slicedData = valueJSON.slicedData;
        var hasData;
        this.sliceDimension(AnalysisObject.fromJSON(valueJSON.sliceDimension));
        if (ChartTypeUtil.isInfoChart(this._vizModel().type())) {
            hasData = slicedData && slicedData[0];
            if (hasData) {
                this._slicedData = slicedData;
                this._currentVal = hasData ? valueJSON.value : 0;
                this._resetControls();
                this._resetChartFixScale();
            }
        } else {
            hasData = slicedData && Utils.isArray(slicedData.slices) && slicedData.slices.length > 0;
            if (hasData) {
                slicedData.slices = slicedData.slices.map(function(item) {
                    var result = {
                        dimensionMember : item.dimensionMember
                    };
                    if (item.data.id === 'sap.viz.data.CrosstableDataset') {
                        result.data = sap.viz.api.data.CrosstableDataset.fromJSON(item.data);
                    } else {
                        result.data = sap.viz.api.data.FlatTableDataset.fromJSON(item.data);
                    }
                    return result;
                });
            }
            this._slicedData = slicedData;
            this._currentVal = hasData ? Math.min(valueJSON.value, slicedData.slices.length) : 0;
            this._resetControls();
            this._resetChartFrameDataScale();
            this._resetChartFixScale();
        }
    };

    PlayControl.prototype.destroy = function() {
        // console.log('playcontrol destroyed ' + this._logId);
        this._vizProxy().off("initialized.playcontrol", this._chartUpdateCompleteHandler);
        PlayControl.superclass.destroy.apply(this, arguments);
        if (this._playBtn) {
            this._playBtn.destroy(true);
        }
        if (this._slider) {
            this._slider.destroy(true);
        }
        // unbind the mouseover event
        $(".viz-controls-playcontrol-slider #__slider0-grip").unbind('mouseover');
    };

    PlayControl.prototype._hasData = function() {
        if (this._slicedData && this._slicedData.slices) {
            return !!(this._slicedData && this._slicedData.slices && this._slicedData.slices.length > 0);
        } else {
            return this._slicedData && ( typeof (this._slicedData[0]) == 'string');
        }
    };

    return PlayControl;
});

// @formatter:off
define('sap/viz/controls/dedicatedlegend/DedicatedLegend',[
    'jquery',
    'sap/viz/controls/common/VizControlBase',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/managers/LangManager'
],
function($, VizControlBase, OOUtil, utils, LangManager) {
// @formatter:on
    var DedicatedLegend = function(options) {
        DedicatedLegend.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.DedicatedLegend.DedicatedLegend";
        this._defaultChartOption = undefined;
        this._position = 'right';
        this._openBy = null;
        this._isShown = null; //Save whether show method is called. 

        try {
            $.sap.require("sap.m.ResponsivePopover");
        } catch(e) {
            throw utils.substitute(LangManager.get('VIZ_COMMON_DEPENDENCY_ERROR'), 'sap.m', 'DedicatedLegend');
        }
    };
    OOUtil.extend(DedicatedLegend, VizControlBase);

    DedicatedLegend.prototype._onConnect = function(vizUid, modelChanged) {
        DedicatedLegend.superclass._onConnect.apply(this, arguments);
        
        this._olegendDOMID = this._createId('legends');
        this._oLegendDOM = new sap.ui.core.HTML();

        this._oPopover = new sap.m.ResponsivePopover(this._createId('legendPopover'), {
            dal:false,
            placement:sap.m.PlacementType.Auto,
            contentWidth:"18rem",
            title : 'Legends',
            content : [
                this._oLegendDOM
            ]
        });
        this._oPopover.addStyleClass('viz-controls-dedicatedLegend');
        
        // this._oPopover.attachBeforeClose(function(){
        //     console.log('close');
        // }, this);

        this._oPopover.attachAfterClose($.proxy(function(){
            this._hideLegend();
            this._isShown = false;
        }, this));
        this._oPopover.attachBeforeOpen($.proxy(function(){
            var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");

            var opts = {};
            $.extend(true, opts, {
                legendGroup: {
                    renderTo: function(){
                        return svg;
                    }
                }
            }, (this._defaultChartOption ? this._defaultChartOption : _getVisibleSettings()));

            this._vizProxy().setProperties(opts);
            
             var contentHeight = parseInt($(svg).attr('height'), 10) + 5 + _convertREMToPX(0.5625),
                 maxHeight = this._vizProxy().getSize().height * 0.8 - 48 - _convertREMToPX(0.4375),
                 minHeight = _convertREMToPX(1.625);

            this._oLegendDOM.setContent($(svg).outerHTML());
            if(contentHeight > maxHeight){
                if(maxHeight < minHeight){
                    this._oPopover.setContentHeight(minHeight + 'px');   
                } else {
                    this._oPopover.setContentHeight(maxHeight + 'px');   
                }
            }else{
                this._oPopover.setContentHeight(null);
            }
            //this._oPopover.setContentHeight(Math.min(contentHeight, (maxHeight > 0 ? maxHeight : 0)) +'px');
        }, this));
    };

    DedicatedLegend.prototype._open = function(openBy){
       this._oPopover.openBy(openBy);
    };

    DedicatedLegend.prototype._onDisconnect = function() {
        DedicatedLegend.superclass._onDisconnect.apply(this, arguments);
        // TODO Destroy things which are associate to VizFrame
    };
    
    DedicatedLegend.prototype.destroy = function() {
        DedicatedLegend.superclass.destroy.apply(this, arguments);
        // TODO Destroy everything
        if(this._oLegendDOM){
            this._oLegendDOM.destroy();
        }
        if(this._oPopover){
            this._oPopover.destroy();
        }
        this._olegendDOMID = undefined;
        this._isShown = null;
    };

    DedicatedLegend.prototype._createId = function(sId) {
      return this._uid + "-" + sId;
    };

    DedicatedLegend.prototype.show = function(){
        if(this._isDefaultLegend()){
            if(this._defaultChartOption){
                this._vizProxy().setProperties(this._defaultChartOption);
            }else{
                this._showLegend();
            }
        }else{
            if(this._openBy){
                this._open(this._openBy); 
            } 
        }
        this._isShown = true;  
    };

    DedicatedLegend.prototype.hide = function(){
        if(this._isDefaultLegend()){
            this._hideLegend();
        } else {
            //Dedicated Legend
            if(this._oPopover.isOpen()){
                this._oPopover.close();
            }
        }
        this._isShown = false;
    };

    DedicatedLegend.prototype.setOpenBy = function(openBy){
        if (!arguments.length) {
          return this._openBy;
        }
        this._openBy = openBy;
    };

    DedicatedLegend.prototype.parseDefaultLegendProperties = function(props){
        if(this._oPopover.isOpen()){
            this._oPopover.close();
        }

        var defaultProps = this._vizProxy().getProperties();
        var wholeProps = {};
        if(defaultProps){
            if(defaultProps.legend){
                wholeProps.legend = $.extend(false, defaultProps.legend, props.legend);
            }
            if(defaultProps.sizeLegend){
                wholeProps.sizeLegend = $.extend(false, defaultProps.sizeLegend, props.sizeLegend);
            }
            if(defaultProps.legendGroup){
                wholeProps.legendGroup = $.extend(false, defaultProps.legendGroup, props.legendGroup);
            }
        }else{
            wholeProps = $.extend(true, _getVisibleSettings(), props);
        }
        if(props && ((props.legend && props.legend.visible !== undefined) || (props.sizeLegend && props.sizeLegend.visible))){
            if(wholeProps.legend && wholeProps.sizeLegend && (wholeProps.legend.visible !== wholeProps.sizeLegend.visible)){
                if(this._defaultChartOption){
                    $.extend(true, this._defaultChartOption, _getLegendSettings(props));
                }else{
                    this._defaultChartOption = _getLegendSettings(wholeProps);
                }
            }else{
                this._defaultChartOption = undefined;
            }
        }
        if(wholeProps.legendGroup && wholeProps.legendGroup.layout && wholeProps.legendGroup.layout.position){
            this._position = wholeProps.legendGroup.layout.position;
        }

        if(this._vizProxy().getSize().width > 0 && this._vizProxy().getSize().height > 0){
            if(this._isDefaultLegend()){
                    $.extend(true, props, _getVisibleSettings(wholeProps), 
                        (this._defaultChartOption ? this._defaultChartOption : {}), _getLegendSettings(props),
                        {
                            legendGroup :{
                                renderTo : null
                        }});
            }else{
                //Dedicated Legend
                if(wholeProps.legend){
                    $.extend(true, props, {legend: {visible : false}});
                }
                if(wholeProps.sizeLegend){
                    $.extend(true, props, {sizeLegend:{visible : false}});
                }
            }
        }

        if(this._isDefaultLegend() && this._isShown!= null){
            _setLegendVisibility(props, this._isShown);
        }
        return props;
    };

    DedicatedLegend.prototype.isOpen = function(){
        return this._oPopover.isOpen();
    };

    DedicatedLegend.prototype._isDefaultLegend = function(){
        var position = this._position;
        return (!sap.ui.Device.system.phone) && ((position === 'top' || position === 'bottom') ? 
            (this._vizProxy().getSize().height >= 480) : (this._vizProxy().getSize().width >= 600));
    };

    DedicatedLegend.prototype._showLegend = function(){
        this._vizProxy().setProperties(_getVisibleSettings());
    };

    DedicatedLegend.prototype._hideLegend = function(){
        this._vizProxy().setProperties(_getHiddenSettings());
    };

    var _setLegendVisibility = function(props, value){
        if(props && props.legend && props.legend.visible!== undefined){
            props.legend.visible = value;
        }
        if(props && props.sizeLegend && props.sizeLegend.visible!==undefined){
            props.sizeLegend.visible = value;
        }
    }

    var _getHiddenSettings = function(){
        return {
            legend : {
                visible : false
            },
            sizeLegend : {
                visible : false
            }
        };  
    };

    var _getVisibleSettings = function(props){
        if(props){
            var result = {};
            if(props.legend){
                result.legend = {visible : true};
            }
            if(props.sizeLegend){
                result.sizeLegend = {visible : true};
            }
            return result;
        }else{
            return {
                legend : {
                    visible : true
                },
                sizeLegend : {
                    visible : true
                }
            };
        }
    };

    var _getLegendSettings = function(props){
        var result = {};
        if(props && props.legend && props.legend.visible!== undefined){
            result.legend = {
                visible : props.legend.visible 
            };
        }
        if(props && props.sizeLegend && props.sizeLegend.visible!==undefined){
            result.sizeLegend = {
                visible : props.sizeLegend.visible
            };
        }
        return  result;
    };

    var _getRootElementFontSize = function(){
        return parseFloat(window.getComputedStyle(document.documentElement).fontSize);
    };

    var _convertREMToPX = function(value){
        return _getRootElementFontSize() * value;
    };

    return DedicatedLegend;
});

/**
 * Class VizFrame control
 */
// @formatter:off
define('sap/viz/controls/frame/VizFrame',[
    'jquery',
    'sap/viz/controls/common/VizControlHost',
    'sap/viz/controls/common/constants/CSSConst',
    'sap/viz/controls/common/constants/ChartConst',
    'sap/viz/controls/common/constants/EventTypeConst',
    'sap/viz/controls/common/events/Event',
    'sap/viz/controls/common/events/FeedEvent',
    'sap/viz/controls/common/feeds/FeedItem',
    'sap/viz/controls/common/feeds/FeedUtils',
    'sap/viz/controls/common/utils/ChartTypeUtil',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/filter/AbstractFilter',
    'sap/viz/controls/common/filter/FilterHelper',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/frame/VizFrameConfig',
    'sap/viz/controls/frame/VizFrameEvent',
    'sap/viz/controls/annotation/Annotation',
    'sap/viz/controls/annotation/AnnotationEvent',
    'sap/viz/controls/annotationcontrol/AnnotationControl',
    'sap/viz/controls/annotationcontrol/AnnotationControlConfig',
    'sap/viz/controls/annotationcontrol/AnnotationControlEvent',
    'sap/viz/controls/frame/chartEditor/ChartEditorPlugin',
    'sap/viz/controls/chart/Chart',
    'sap/viz/controls/contextmenu/ContextMenu',
    'sap/viz/controls/custombutton/CustomButton',
    'sap/viz/controls/custombutton/CustomButtonEvent',
    'sap/viz/controls/filterbar0/FilterBar',
    'sap/viz/controls/filterbar0/FilterBarEvent',
    'sap/viz/controls/frame/views/FilterMenu',
    'sap/viz/controls/frame/views/FilterMenuEvent',
    'sap/viz/controls/chart/views/ChartEvent',
    'sap/viz/controls/chart/views/TitleEditor',
    'sap/viz/controls/playcontrol/PlayControl',
    'sap/viz/controls/playcontrol/PlayControlEvent',
    'sap/viz/controls/runtime/RuntimeManager',
    'sap/viz/controls/runtime/VizModel',
    'sap/viz/controls/Version',
    'sap/viz/controls/annotation/AnnotationConfig',
    'sap/viz/controls/chart/ChartConfig',
    'sap/viz/controls/filterbar0/FilterBarConfig',
    'sap/viz/controls/contextmenu/ContextMenuConfig',
    'sap/viz/controls/custombutton/CustomButtonConfig',
    'sap/viz/controls/common/utils/Serialization',
    'sap/viz/controls/dedicatedlegend/DedicatedLegend',
    'sap/viz/controls/common/utils/InfoChartUtil'
    ],
function($, VizControlHost, CSSConst, ChartConst, EventTypeConst, Event, FeedEvent, FeedItem, FeedUtils,
    ChartTypeUtil, OOUtil, Utils,AbstractFilter, FilterHelper, LangManager, VizFrameConfig, VizFrameEvent, Annotation,
    AnnotationEvent, AnnotationControl, AnnotationControlConfig, AnnotationControlEvent, ChartEditorPlugin, Chart, ContextMenu, CustomButton,
    CustomButtonEvent, FilterBar,FilterBarEvent, FilterMenu, FilterMenuEvent, ChartEvent, TitleEditor, PlayControl,
    PlayControlEvent, RuntimeManager, VizModel, Version, AnnotationConfig, ChartConfig, FilterBarConfig, ContextMenuConfig, CustomButtonConfig, Serialization, DedicatedLegend, InfoChartUtil) {
// @formatter:on

    /**
     * The VizFrame class is a composite control of following sub controls of Viz Container.<br/>
     * 1. Chart control: Host a CVOM visualization(i.e. Line Chart, Column Chart, Area Chart, Map) and visualization
     * extension.<br/><br/>
     *
     * 2. FilterBar control: User can add filter to the FilterBar by dragging and dropping a object into the FilterBar
     * area or clicking filter menu on selected visualization shapes.<br/><br/>
     *
     * 3. Context menu control: User can right click on the visualization or click the setting menu to display the
     * context menu.<br/><br/>
     *
     * 4. Morphing effect: It is a special effect in motion shapes and animations that changes (or morphs) one shape into
     * another through a seamless transition. User can enable/disable the morphing via API
     * VizFrame.enableMorphing(true/false), and the morphing is enabled by default.<br/><br/>
     *
     * To achieve interoperability with prior CVOM based application, Viz Container provides a set of CVOM API wrapper.
     * Please refer to the CVOM API for detail.<br/>
     * <pre>
     * -vizData();
     * -vizCss();
     * -vizProperties();
     * -vizOn();
     * -vizOff();
     * -vizSelection();
     * -vizFeedingZone();
     * </pre>
     *
     * UI5 dependencies: sap.ui.commons (when enablePlayControl is true)
     *
     * @class sap.viz.controls.frame.VizFrame
     * @param {HTMLElement} div
     *                      The dom element to host the VizFrame.
     * @param {JSON} [uiConfig]
     *               UIConfig for VizFrame.
     * @extends sap.viz.controls.common.VizControlHost
     */
    var VizFrame = function VizFrame(div/*HTMLDivElement*/, uiConfig/*JSON*/) {
        if (div == null) {
            throw new Error("div param is required in constructor of VizFrame.");
        }
        VizFrame.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.frame.VizFrame";


        /** container of vizFrame */
        this._div = div;
        /** default config */
        this._uiConfig = uiConfig ? uiConfig : VizFrameConfig.instance();

        if (this._uiConfig.enablePlayControl) {
            try {
                $.sap.require('sap.ui.commons.Button');
                $.sap.require('sap.ui.commons.Slider');
            } catch(e) {
                throw Utils.substitute(LangManager.get('VIZ_COMMON_DEPENDENCY_ERROR_WITH_UI_CONFIG'), 'sap.ui.commons', 'VizFrame', '{enablePlayControl: true}');
            }
        }
        /** layout of vizFrame */
        this._layout = null;
        /** filterBar */
        this._filterBar = null;
        /** chart */
        this._chart = null;
        /** Chart Editor */
        this._chartEditorPlugin = new ChartEditorPlugin(this._div, this, this._uiConfig);
        /** context menu */
        this._contextMenu = null;
        /** popupLayout */
        this._popupLayout = null;
        /** annotation */
        this._annotation = null;
        /** setting button */
        this._settingBtn = null;
        /** fullscreen button */
        this._fullScreenBtn = null;

        this._titleEditor = null;
        
        this._behaviorType = "RunTimeBehavior";

        this._playControl = null;

        this._legendControl = null;
        //create Chart,Popup Layer,Context Menu,Annotation
        this._createChildren();
        // @formatter:off
        this._addChild(this._chart, ['enableMorphing',
                                     'feedAnalysisObjects'],
                                    [ChartEvent.CHART_CHANGED,
                                     ChartEvent.CHART_CHANGING,
                                     ChartEvent.VIZTYPE_CHANGED,
                                     FeedEvent.FEEDS_CHANGED,
                                     ChartEvent.USER_INTERACTION_COMPLETE]);
        // @formatter:on
        // call this._addChild to expose child's function and events
        if(this._filterBar){
            this._addChild(this._filterBar, ['analysisObjectsForPicker'], [EventTypeConst.REQUEST_FILTER_VALUES]);
        }
        if(this._annotationControl){
            this._addChild(this._annotationControl, [AnnotationControlEvent.ANNOTATION_SELECTED_EVENT, AnnotationControlEvent.ANNOTATION_LAYOUTED_EVENT]);
        }
        this._addChild(this._annotation, [], []);
        if (this._contextMenu && Utils.isFunction(this._contextMenu.getEventNames)) {
            this._addChild(this._contextMenu, [], this._contextMenu.getEventNames());
        }
        this._addChild(this._fullScreenBtn, [], [VizFrameEvent.ENTER_FULL_SCREEN,
                                                 VizFrameEvent.EXIT_FULL_SCREEN]);
    };
    // API document: events
    /**
     * Dispatches "vizTypeChanged" event when visualization type changes by UI operation.
     * <pre>
     * type: "vizTypeChanged"
     * handler: function({
     *                    type: "vizTypeChanged",
     *                    token: "<uuid>",
     *                    data: {
     *                      type : "<vizType>"
     *                    }
     * })
     * </pre>
     * @event sap.viz.controls.frame.VizFrame#vizTypeChanged
     * @param {String} evt.type "vizTypeChanged".
     * @param {Object} evt.data
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var vizFrame = new VizFrame(...);
     * var vizTypeChangedHandler = function(event) {
     *     console.log("vizTypeChanged event from vizFrame( type: '" + e.data.type + "' ).");
     * };
     * vizFrame.addEventListener('vizTypeChanged', vizTypeChangedHandler);
     * </pre>
     */

    /**
     * Dispatches "feedsChanged" event when the feeding changes due to add/remove/change FeedItems on feeding panel<br/>
     * Application should listen to "feedsChanged" event to get the corresponding data and set it back to VizFrame to
     * to update the visualization with the new data.
     *
     * <pre>
     * type: "feedsChanged"
     * handler: function({
     *                    type: "feedsChanged",
     *                    feeds: [{feedId, binding}]
     * })
     * </pre>
     * @event sap.viz.controls.frame.VizFrame#feedsChanged
     * @param {String} evt.type "feedsChanged".
     * @param {Object} evt.data
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var vizFrame = new VizFrame(...);
     * var feedsChangedHandler = function(event) {
     *     // an array of FeedItem objects
     *     var feedItems = event.data.feeds;
     *
     *     // Application could restore to initial value, if there is no feeding
     *     if (feedItems || feedItems.length === 0) {
     *         var dataSet = new sap.viz.api.data.CrosstableDataset();
     *         dataSet.data(null);
     *         vizFrame.vizUpdate({
     *             data : null
     *         });
     *         return;
     *     }
     *     // Get filters if the application support it
     *     var filterItems = vizFrame.filterItems();
     *
     *     // Application should handle some logic to get new data based on the feedItems and filterItems
     *     var newFeedData; // You can get data from database, data service, local data, etc.
     *
     *     // update vizFrame
     *     var updateVizFrame = function(feedData) {
     *         var dataSet = new sap.viz.api.data.CrosstableDataset();
     *         dataSet.data(feedData);
     *
     *         vizFrame.vizUpdate({
     *             'data' : dataSet
     *         });
     *     };
     *     upateVizFrame(newFeedData);
     * };
     * vizFrame.addEventListener('feedsChanged', feedsChangedHandler);
     * </pre>
     */

    /**
     * Dispatches "filtersChanged" event when user clicks the Filter menu if user enable the built-in FilterBar in VizFrame.
     * Application could listen to this event to handle the data filter logic and set the new data back to VizFrame to
     * update the visualization.
     * <pre>
     * type: "filtersChanged"
     * handler: function({
     *                    type: "filtersChanged",
     *                    data: [filterItems]
     * })
     * </pre>
     * @event sap.viz.controls.frame.VizFrame#filtersChanged
     * @param {String} evt.type    "filtersChanged".
     * @param {Array} evt.data
     *                An array of filter items.
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var vizFrame = new VizFrame(...);
     * // update vizFrame
     * var updateVizFrame = function(feedData) {
     *     var dataSet = new sap.viz.api.data.CrosstableDataset();
     *     dataSet.data(feedData);
     *     appView.vizFrame().vizUpdate({
     *         data : dataSet
     *     });
     * };
     * // Handle filter menu event and update vizframe with new data
     * var filterHandler = function(event) {
     *     var filters = event.data;
     *     var feeds = vizFrame().feeds();
     *     // Some logic to get new data based on the feedItems and filterItems
     *     var newFeedData;
     *
     *     updateVizFrame(newFeedData);
     * };
     *
     * // listen to 'filtersChanged' event
     * vizFrame.addEventListener('filtersChanged', filterHandler);
     * </pre>
     */

    /**
     * Dispatches the "requestFilterValues" event when double click the Filter object in FilterBar. The application
     * may need to pop up a dialog to choose the filter values and call event.data.validate(true) after change.
     *
     * <pre>
     * type: "requestFilterValues"
     * handler: function({
     *                    type: "requestFilterValues",
     *                    data: {
     *                         bounds, // an object contains left, top, width, height
     *                         filterName,
     *                         analysisObjectId,
     *                         filterItem, // an object of ValueFilter, DateRangeFilter or NumericRangeFilter
     *                         validate // function to validate filter item.
     *                     }
     * })
     * </pre>
     * @event sap.viz.controls.frame.VizFrame#requestFilterValues
     * @param {String} evt.type "requestFilterValues".
     * @param {Object} evt.data
     *      It contains filterName, analysisObjectId and filterItem properties. User need to call validate(true) method
     * if changed filterItem or call validate(false) if no change happens.
     *
     * @example <caption>Sample Code:</caption>
     * <pre>
     * // listen to 'requestFilterValues' event
     * vizFrame.addEventListener('requestFilterValues', function(event) {
     *     var data = event.data;
     *     // Get current filter information
     *     var filterName = data.filterName;
     *     var analysisObjectId = data.analysisObjectId;
     *     var filterItem = data.filterItem;
     *
     *     // 1. Application may pop up some filter value choose dialog.
     *     // 2. User input some new filter values.
     *     var values = 'USA,China';
     *     switch(filterItem.getType()) {
     *         case AbstractFilter.VALUE_TYPE:// display as 'USA,China'
     *             values = values.length>0 ? values.split(',') : [];
     *             var filterValues = [];
     *             for(var i = 0, length = values.length; i < length; i++) {
     *                 filterValues.push({'value':values[i]}); // may contain more information. {'value': 'USA',
     * 'key':'001'}
     *             }
     *             filterItem.updateValues(filterValues);
     *             break;
     *         case AbstractFilter.NUMERIC_RANGE_TYPE:// display as '10 - 20'
     *         case AbstractFilter.DATE_RANGE_TYPE:// display as '2000-12-1 - 2013-12-1'
     *             values = values.length>0 ? values.split(' - ') : [];
     *             if(values.length == 2) {
     *                 filterItem.setMin(values[0]);
     *                 filterItem.setMax(values[1]);
     *             }
     *             break;
     *     }
     *
     *     // 3. Validate the filter item
     *     data.validate(true);
     * });
     * </pre>
     */

    /**
     * Dispatches "vizDefinitionChanged" event when viz definition is changed by user interaction or API, for example,
     * <pre>
     * 1. Change chart type.
     * 2. Feed new data.
     * 3. Edit title.
     * 4. Show/hide visualization legend.
     * 5. Change direction(switch between horizontal and vertical) for some chart.
     * 6. Add/remove/update filter.
     * 7. Edit property.
     * 8. etc.
     * </pre>
     *
     * Application may listen to this event to inform user to save the document.
     *
     * <pre>
     * type: "vizDefinitionChanged"
     * handler: function({
     *                    type: "vizDefinitionChanged",
     *                    data: {
     *                         commentChanged,
     *                         vizTypeChanged,
     *                         vizPropertiesChanged,
     *                         vizCssChanged,
     *                         feedingItemsChanged,
     *                         filterChanged
     *                    }
     * })
     * </pre>
     * @event sap.viz.controls.frame.VizFrame#vizDefinitionChanged
     * @param {String} evt.type "vizDefinitionChanged".
     * @param {Object} evt.data
     *                 Identify the changed perperty.
     */

    /**
     * Dispatches "userInteractionComplete" event when there are UI interaction , for example:
     * <pre>
     * 1. Change chart type.
     * 2. Change FeedItems.
     * 3. Edit title in title editor
     * 4. Operate in context menu, such as: show/hide title, show/hide legend, MDN, show/hide Data Labels and so on
     * 5. Operate in the filter menu
     * 6. Edit property
     * 7. etc.
     * </pre>
     *
     * VizFrame will dispatch this event.
     *
     * <pre>
     * type: "userInteractionComplete"
     * handler: function({
     *                    type: "userInteractionComplete"
     * })
     * </pre>
     * @event sap.viz.controls.frame.VizFrame#userInteractionComplete
     * @param {String} evt.type "userInteractionComplete".
     */

    OOUtil.extend(VizFrame, VizControlHost);

    /**
     * Get/Set available AnalysisObjects for object picker popup UI,
     * VizFrame cannot call this function if the flag "enableFilterBar" is false.
     * @deprecated
     * @method sap.viz.controls.frame.VizFrame.prototype.analysisObjectsForPicker
     * @param {Array<{@link sap.viz.controls.common.feeds.AnalysisObject}>} analysisObjects
     * @return {Array<{@link sap.viz.controls.common.feeds.AnalysisObject}>}
     * @example <caption>Sample code:</caption>
     * <pre>
     * var vizFrame = new VizFrame(...);
     * //Set analysisObjects, please refer to FeedItem for details.
     * var newAnalysisObjects = [
     *     new AnalysisObject("M1", "M1", "measure", "number"),
     *     new AnalysisObject("D1", "D1", "dimension", "string"),
     *     new AnalysisObject("D2", "D2", "dimension", "string")
     * ];
     * vizFrame.analysisObjectsForPicker(newAnalysisObjects);
     * //Get analysisObjects
     * var currentAnalysisObjects = vizFrame.analysisObjectsForPicker();
     * </pre>
     */

    VizFrame.HEADER_HEIGHT = 40;

    /**
     * Set/Get vizType.
     * @method sap.viz.controls.frame.VizFrame.prototype.vizType
     * @param {String} vizType
     * @return {String}
     */
    VizFrame.prototype.vizType = function(type) {
        return this._chart.vizType.apply(this._chart, arguments);
    };
    /**
     * Get/Set vizFrame filterItems.
     * @deprecated
     * @method sap.viz.controls.frame.VizFrame.prototype.filterItems
     * @param {Array<{@link sap.viz.controls.common.filter.AbstractFilter}>} [value]
     * @return {Array<{@link sap.viz.controls.common.filter.AbstractFilter}>}
     */
    VizFrame.prototype.filterItems = function(filterItems) {
        if (arguments.length > 0) {
            this._beginUpdateProperty();
            if(this._filterBar){
                this._filterBar.filterItems(filterItems);
            }
            this._endUpdateProperty();
            return this;
        } else {
            if(this._filterBar){
                return this._filterBar.filterItems();
            }
            return [];
        }
    };

    /**
     * Clear the selected property zone when 'useBuiltInPropertyZoneInteraction' is true in ui config.
     * @method sap.viz.controls.frame.VizFrame.prototype.clearSelectedPropertyZone
     * @return {undefined}
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var frame = new VizFrame(...);
     * frame.clearSelectedPropertyZone();
     * </pre>
     */
    VizFrame.prototype.clearSelectedPropertyZone = function() {
        this._chart.clearSelectedPropertyZone();
    };

    VizFrame.prototype._onVizModelChanged = function(e) {
        if (e.data.filterChanged) {
            var filters = this._vizModel().filterItems();
            if (!this._inUpdatingProperty()) {
                this._chart.showLoadingIcon();
            }
            this._dispatchPropertyEvent(new VizFrameEvent(VizFrameEvent.FILTERS_CHANGED, this, filters));
        }
        if(e.data.sliceDimensionChanged) {
            if(!this._playControl)
            {
                var enablePlayControl = this._uiConfig.enablePlayControl === false ? false : true;
                if(enablePlayControl) {
                    this._createPlayControl();
                }
            }
        }
    };
    /**
     * Comment changed event handler.
     */
    VizFrame.prototype._commentChangedHandler = function(e) {
        var data = {
            commentChanged : true
        };
        this._dispatchEvent(new Event(EventTypeConst.VIZ_DEFINITION_CHANGED, this, data));
    };
    VizFrame.prototype._vizDefinitionChanged = function(e) {
        this._dispatchEvent(new Event(EventTypeConst.VIZ_DEFINITION_CHANGED, this, e.data));
    };
    VizFrame.prototype._vizViewChanged = function(e) {
        var enableTitleEditor = this._uiConfig.enableTitleEditor === false ? false : true;
        if(enableTitleEditor){
            if(this._titleEditor)
            {
                this._titleEditor.destroy();
                this._titleEditor = null;
            }
            var type = e.data.type;
            if(ChartTypeUtil.supportTitle(type))
            {
                this._createTitleEditor();
                this._titleEditor.connect(this.vizUid());
            }
        }
    };

    /**
     * Create chart
     */
    VizFrame.prototype._createChart = function() {
        this._layout = document.createElement('div');
        $(this._div).append(this._layout);

        var chartConfig = ChartConfig.instance();
        if (this._uiConfig.controls && this._uiConfig.controls.chart) {
            chartConfig = this._uiConfig.controls.chart;
        }
        chartConfig = $.extend({},chartConfig);
        this._chart = new Chart(this._layout, chartConfig);
        this._chart.addEventListener(EventTypeConst.VIZ_DEFINITION_CHANGED, this._vizDefinitionChanged, this);
        this._chart.addEventListener(ChartEvent.SELECT_PROPERTY_ZONE, $.proxy(function(e) {
            this._dispatchEvent(new ChartEvent(ChartEvent.SELECT_PROPERTY_ZONE, this, e.data));
            //if (console) {
            //    console.log("Info: edit property: " + e.data.propertyZoneName);
            //}
        }, this));
        this._chart.addEventListener(ChartEvent.VIZ_VIEW_CHANGED, this._vizViewChanged, this);
        this._chart.addEventListener(ChartEvent.CHART_CHANGED, this._chartChangedHandler, this);
        this._chart.addEventListener(ChartEvent.BEHAVIOR_TYPE_CHANGED, this._behaviorTypeChangedHandler, this);
        this._validateSize();
        this.__vizModel = this._chart.chartModel();
        this.__vizModel.addEventListener(VizModel.PropertiesChangedEvent, this._onVizModelChanged, this);
    };
    VizFrame.prototype._chartChangedHandler = function()
    {
        if(this._titleEditor) {
            this._titleEditor.init();
        }
    };
    
    VizFrame.prototype._behaviorTypeChangedHandler = function(event)
    {
        if (!event || !this._titleEditor) {
            return;
        }
            
        var interaction = event.data;
        if (interaction.behaviorType === "DesignTimeBehavior") {
            this._behaviorType = "DesignTimeBehavior";
            this._titleEditor._hide();
        } else if (interaction.behaviorType === null) {
            this._behaviorType = "RunTimeBehavior"; 
            this._titleEditor._show();
        }
    };
    /**
     * Get popupLayer for frame
     * @return {DIV}
     */
    VizFrame.prototype.popupLayer = function() {
        return this._popupLayout;
    };
    /**
     * Create popup layer
     */
    VizFrame.prototype._createPopupLayer = function() {
        this._popupLayout = document.createElement('div');
        this._popupLayout.id = "popupLayout";
        $(this._div).append(this._popupLayout);
    };
    //Create header
    VizFrame.prototype._createHeader = function() {
        if (!this._header$) {
            this._header$ = $(document.createElement('div')).appendTo(this._div);
            this._header$.addClass(CSSConst.FRAME_PREFIX + "header");
        }
    };
    /**
     * Create fullscreen button
     */
    VizFrame.prototype._createFullScreenButton = function() {
        var fullScreenConfig = CustomButtonConfig.instance();
        if (this._uiConfig.controls && this._uiConfig.controls.fullScreenButton) {
            fullScreenConfig = this._uiConfig.controls.fullScreenButton;
        }
        this._fullScreenBtn = new CustomButton(this._header$, fullScreenConfig);
        this._fullScreenBtn.setIcon([CSSConst.COMMON_PREFIX + "UVBSharedSprite", CSSConst.FRAME_PREFIX + 'header-fullscreen-enter-icon'].join(' '));
        this._fullScreenBtn.setTitle(LangManager.get('VIZ_CUSTOMBUTTON_MAXIMIZE'));
        this._fullScreenBtn.addEventListener(CustomButtonEvent.CLICK_CUSTOM_BUTTON, $.proxy(function(event) {
            this._isFullScreen = !this._isFullScreen;
            if(this._isFullScreen) {
                this._fullScreenBtn.setIcon([CSSConst.COMMON_PREFIX + "UVBSharedSprite", CSSConst.FRAME_PREFIX + 'header-fullscreen-exit-icon'].join(' '));
                this._fullScreenBtn.setTitle(LangManager.get('VIZ_CUSTOMBUTTON_RESTORE_DOWN'));
                this._dispatchEvent(new VizFrameEvent(VizFrameEvent.ENTER_FULL_SCREEN, this, this._isFullScreen));
            } else {
                this._fullScreenBtn.setIcon([CSSConst.COMMON_PREFIX + "UVBSharedSprite", CSSConst.FRAME_PREFIX + 'header-fullscreen-enter-icon'].join(' '));
                this._fullScreenBtn.setTitle(LangManager.get('VIZ_CUSTOMBUTTON_MAXIMIZE'));
                this._dispatchEvent(new VizFrameEvent(VizFrameEvent.EXIT_FULL_SCREEN, this, this._isFullScreen));
            }
        }, this), this);
    };
    /**
     * Create setting button
     */
    VizFrame.prototype._createSettingButton = function() {
        var settingConfig = CustomButtonConfig.instance();
        if (this._uiConfig.controls && this._uiConfig.controls.settingButton) {
            settingConfig = this._uiConfig.controls.settingButton;
        }
        this._settingBtn = new CustomButton(this._header$, settingConfig);
        this._settingBtn.setIcon([CSSConst.COMMON_PREFIX + "UVBSharedSprite", CSSConst.FRAME_PREFIX + 'header-setting-icon'].join(' '));
        this._settingBtn.setTitle(LangManager.get('VIZ_CUSTOMBUTTON_SETTINGS'));
        this._settingBtn.addEventListener(CustomButtonEvent.CLICK_CUSTOM_BUTTON, $.proxy(function(event) {
            var verticalOffset = 34;
            var relativeToDomPos = {
                // show context menu to the right border of the container
                pageX : $(this._div).width(),
                pageY : verticalOffset
            };
            this._contextMenu.create(null).show(relativeToDomPos);
        }, this), this);
    };
    /**
     * Create filter bar
     */
    VizFrame.prototype._createFilterBar = function() {
        this._filterBarContainer$ = $(document.createElement('div')).appendTo(this._header$);
        this._filterBarContainer$.addClass(CSSConst.FRAME_PREFIX + 'header-filterbar-container');
        var filterBarConfig = FilterBarConfig.instance();
        if (this._uiConfig.controls && this._uiConfig.controls.filterBar) {
            filterBarConfig = this._uiConfig.controls.filterBar;
        }
        this._filterBar = new FilterBar(this._filterBarContainer$, filterBarConfig);
        this._filterBar.addEventListener(FilterBarEvent.HEIGHT_CHANGED, function(event) {
            if (!this._header$) {
                return this;
            }
            this._header$.css({
                'height' : event.data.height
            });
            this._validateSize(true);
        }, this);
    };

    /**
     * Create context menu
     */
    VizFrame.prototype._createContextMenu = function() {
        var cmConfig;
        if (this._uiConfig.controls && this._uiConfig.controls.contextMenu) {
            cmConfig = this._uiConfig.controls.contextMenu;
        } else {
            cmConfig = ContextMenuConfig.instance();
        }
        this._contextMenu = new ContextMenu($(this._popupLayout), cmConfig);

        $(this._layout).bind('contextmenu', $.proxy(function(e) {
            if ( this._uiConfig.useCustomizedContextMenu !== true && !this.chart().isFake() ) {
                var pos = Utils.getEventPosition(e);
                var relativeToDomPos = {
                    pageX: pos.pageX - $(this._div).offset().left,
                    pageY: pos.pageY - $(this._div).offset().top
                };
                this._contextMenu.create(null).show(relativeToDomPos);
            }

            return false;
        }, this));

        this._contextMenu.addEventListener("menuItemSelected", (function (event) {
            if (event.data.menuItem.id === "sap.viz.controls.contextmenu.item.comment") {

            var selection = this.vizSelection({
                'withDataCtx' : true
            });
            this._dispatchEvent(new VizFrameEvent(VizFrameEvent.ADD_COMMENT, this, {context: selection[0]}));
            }
        }).bind(this));

        /**
         * There are two conditions to enable the customized context menu:
         * 1. useCustomizedContextMenu flag must be ture.
         * 2. There is extension framework supported (and the sap.viz.controls.contextmenu bundle exists).
         * Otherwise, the default context menu will be shown.
         */
        if (this._uiConfig.useCustomizedContextMenu === true && (sap && sap.bi && sap.bi.framework && sap.bi.framework.getService)) {
            this._chart.addEventListener(ChartEvent.CONTEXT_MENU_TRIGGERED, function(e) {
                var propertyZoneName = ChartTypeUtil.map2semanticAxis( e.data.type, this.vizType(), "forward" ),
                    location = 'sap.viz.controls.contextmenu.location.' + propertyZoneName,
                    menuModel = [];

                var builtInService = sap.bi.framework.getService('sap.viz.controls.aio', 'sap.viz.controls.contextmenu.builtIn');
                if (builtInService) {
                    if (builtInService.generator) {
                        menuModel = builtInService.generator(propertyZoneName, this);
                    } else if (builtInService.menus) {
                        menuModel = builtInService.menus;
                    }
                    if (!$.isArray(menuModel)) {
                        menuModel = [];
                    }
                }

                // It is used to avoid infinite loop when sub-menu mutual reference happens.
                var footprint = {};
                footprint['sap.viz.controls.contextmenu.custom.' + propertyZoneName] = true;

                var customService = sap.bi.framework.getService('sap.viz.controls.contextmenu', 'sap.viz.controls.contextmenu.custom.' + propertyZoneName);
                if (customService) {
                    var customModel = [];
                    if (customService.generator) {
                        customModel = customService.generator(location, this, e.data.data);
                    } else if (customService.menus) {
                        customModel = customService.menus;
                    }
                    if (!$.isArray(customModel)) {
                        customModel = [];
                    }

                    customModel.forEach(function(element) {

                        function expandSubMenus(element) {

                            function generateSubMenus(subMenuItems) {
                                if (!$.isArray(subMenuItems)) {
                                    return;
                                }
                                var result = [];
                                subMenuItems.forEach(function(subMenuItem) {
                                    if (subMenuItem !== null && typeof subMenuItem === 'string') {
                                        if ( subMenuItem in footprint) {
                                            return;
                                        } else {
                                            footprint[subMenuItem] = true;
                                        }

                                        var subMenuService = sap.bi.framework.getService('sap.viz.controls.contextmenu', subMenuItem);
                                        if (subMenuService) {
                                            var subMenuModel = [];
                                            if (subMenuService.generator) {
                                                subMenuModel = subMenuService.generator(subMenuItem);
                                            } else if (subMenuService.menus) {
                                                subMenuModel = subMenuService.menus;
                                            }
                                            if (!$.isArray(subMenuModel)) {
                                                subMenuModel = [];
                                            }

                                            subMenuModel.forEach(function(element) {

                                                function setSubMenus(menuItem) {
                                                    if (menuItem && menuItem.subMenus) {
                                                        menuItem.subMenus = generateSubMenus(menuItem.subMenus);
                                                    }

                                                    return menuItem;
                                                }

                                                if ($.isArray(element)) {
                                                    element.forEach(function(subElement) {
                                                        subElement = setSubMenus(subElement);
                                                    });
                                                } else {
                                                    element = setSubMenus(element);
                                                }

                                                result.push(element);

                                            });
                                        }
                                    }
                                });

                                return result;
                            }

                            if (element && element.subMenus) {
                                element.subMenus = generateSubMenus(element.subMenus);
                            }

                            return element;

                        }

                        if ($.isArray(element)) {
                            element.forEach(function(subElement) {
                                subElement = expandSubMenus(subElement);
                            });
                        } else {
                            element = expandSubMenus(element);
                        }

                        menuModel.push(element);

                    });
                }

                var pos = e.data.point;
                var relativeToDomPos = {
                    pageX : pos.x - $(this._div).offset().left,
                    pageY : pos.y - $(this._div).offset().top
                };

                if (menuModel.length === 0) {
                    menuModel = null;
                }

                this._contextMenu.create(location, menuModel).show(relativeToDomPos);
            }, this);
        }
    };

    VizFrame.prototype._createFilterMenu = function() {
        this._filterMenu = new FilterMenu($(this._popupLayout), this._uiConfig);

        this._filterMenu.addEventListener(FilterMenuEvent.FILTER_CLICKED, function(e) {
            this._filterMenu.hide();
            this._addFilter(false);
        }, this);

        this._filterMenu.addEventListener(FilterMenuEvent.EXCLUDE_CLICKED, function(e) {
             this._filterMenu.hide();
            this._addFilter(true);
        }, this);

        this._chart.addEventListener(ChartEvent.CHANGED_SELECTED_DATA, function(e) {
            var selection = this.vizSelection();
            var selectionNum = selection ? selection.length : 0;
            var showFilter = selectionNum > 0;
            var showExclude = selectionNum > 0;
            this._filterMenu.show(showFilter, showExclude);
        }, this);
        this.vizOn("initialized.filterMenu", $.proxy(function(e) {
            if (this._filterMenu) {
                var selection = this.vizSelection();
                var selectionNum = selection ? selection.length : 0;
                if(selectionNum >0 ){
                    this._filterMenu.show(true, true);
                } else {
                    this._filterMenu.hide();
                }
            }
        }, this));
    };

    VizFrame.prototype._createPlayControl = function() {
        var playControlContainer = document.createElement('div');
        this._playControlContainer$ = $(playControlContainer);
        $(playControlContainer).css({
            "position" : "relative"
        });
        $(this._div).append(playControlContainer);

        this._playControl = new PlayControl($(playControlContainer));
        this._validateSize();

        this._playControl.addEventListener(PlayControlEvent.SLICE_DIMENSION_CHANGED, $.proxy(function(e){
            this._redrawPlayControl();
            this._dispatchPropertyEvent(new VizFrameEvent(VizFrameEvent.SLICE_DIMENSION_CHANGED, this, this._playControl.sliceDimension()));
        },this));

        this.vizOn("initialized.playControl", $.proxy(function(e) {
            this._validatePlayControlSize();
        }, this));
        this._playControl.connect(this.vizUid());
    };

    VizFrame.prototype._redrawPlayControl = function(){
        if(this._playControl)
        {
            var playerField = this._playControl.sliceDimension();
            this._playControl.visible(!!playerField);
            this._validateSize();
        }
    };

    VizFrame.prototype._validatePlayControlSize = function()
    {
        var zones = this.vizFeedingZone();
        var bound;
        for(var i = 0; i < zones.length; i++) {
            var zone = zones[i];
            if(zone.name === 'plot') {
                bound = zone.bound[0];
                break;
            }
        }
        if(bound && bound.length > 0)
        {
            var width = bound[1][0] - bound[0][0];
            var left = bound[0][0];

            $(this._playControlContainer$).css({
                "width" : width,
                'left' : left
            });
            this._playControl.validateSize(width);
        }
    };

    VizFrame.prototype._addFilter = function(isExclude){

        // when user change the filter menu select filter or exclude filter will send
        // the user Interaction event
        this._dispatchEvent(new Event(ChartEvent.USER_INTERACTION_COMPLETE,this));
        // console.log('vizFrame has dispatch the userInteraction Event');

        if(this._filterBar){
            var selection = this.vizSelection({
                'withDataCtx' : true
            });
            this._vizModel().updateFilterItems(selection, isExclude, this.vizData(), this._chart.feeding());
        } else {
            var data = {
                "isExclude" : isExclude,
                "feeding" : InfoChartUtil.isInfoChart(this.vizType()) ? null: this._chart.feeding()
            };
            this._dispatchEvent(new VizFrameEvent(VizFrameEvent.ADD_FILTER, this, data));
        }
    };

    VizFrame.prototype._createTitleEditor = function() {
        var chartHolder$ =  $(this._layout).find("." + CSSConst.CHART_PREFIX + "holder");
        this._titleEditorContainer$ = $(document.createElement('div'));
        chartHolder$.append(this._titleEditorContainer$);
        this._titleEditorContainer$.css({
            position : 'absolute',
            width : '100%'
        });

        this._titleEditor = new TitleEditor(this._titleEditorContainer$);

        this.vizOn("initialized.titleEditor", $.proxy(function(e) {
            if(this._titleEditor && this._behaviorType === "RunTimeBehavior") {
                this._titleEditor.init();
            }
        }, this));
    };
    /**
     * Create Annotation.
     */
    VizFrame.prototype._createAnnotation = function() {
        var annotationConfig = AnnotationConfig.instance();
        if (this._uiConfig.controls && this._uiConfig.controls.annotation) {
            annotationConfig = this._uiConfig.controls.annotation;
        }
        this._annotation = new Annotation(this._div, annotationConfig);
        this._annotation.popupLayer(this._popupLayout);
        // TODO: sync vizProxy
        if (this._contextMenu) {
            this._contextMenu.addMenuItem( "sap.viz.controls.contextmenu.item.comment",
                {id: "sap.viz.controls.contextmenu.item.comment",
                 label: LangManager.get("VIZ_CONTEXTMENU_INSERT_COMMENT") } );
        }

        this.addEventListener(ChartEvent.CHART_CHANGED, $.proxy(function(e) {
            if (this._annotation) {
                this._annotation.setChartInfo({
                    'vizType' : this._chart.vizType(),
                    'vizData' : this._chart.vizData()
                });
                var chartSize = this._chart.size();
                this._annotation.validateSize(chartSize.width, chartSize.height);
            }
        }, this));
        this.addEventListener(ChartEvent.CHART_CHANGING, $.proxy(function(e) {
            if (this._annotation) {
                this._annotation.clean();
            }
        }, this));
        this.addEventListener(FeedEvent.FEEDS_CHANGED, $.proxy(function(e) {
            if (this._annotation) {
                this._annotation.feedsChanged();
            }
        }, this));
        this.addEventListener(VizFrameEvent.ADD_COMMENT, $.proxy(function(e) {
            if (this._annotation) {
                this._annotation.addComment(this.vizSelection({
                    'withDataCtx' : true
                }));
            }
        }, this));
        this.vizOn("initialized.annotation", $.proxy(function(e) {
            if (this._annotation) {
                this._annotation.redraw();
            }
        }, this));
    };

    VizFrame.prototype._createAnnotationControl = function() {
        var annotationControlConfig = null;
        if (this._uiConfig.controls && this._uiConfig.controls.annotationControl) {
            annotationControlConfig = this._uiConfig.controls.annotationControl;
        } else {
            annotationControlConfig = AnnotationControlConfig.instance();
        }
        var annotationContainer$ = $(document.createElement('div')).insertBefore(this._popupLayout);
        this._annotationControl = new AnnotationControl(annotationContainer$[0], annotationControlConfig);
        if (this._contextMenu) {
            this._contextMenu.addMenuItem( "sap.viz.controls.contextmenu.item.comment",
                {id: "sap.viz.controls.contextmenu.item.comment",
                 label: LangManager.get("VIZ_CONTEXTMENU_INSERT_COMMENT") } );
        }
    };
    /**
     * Create all the children of vizFrame
     */
    VizFrame.prototype._createChildren = function() {
        var enableFilterBar = this._uiConfig.enableFilterBar === false ? false : true;
        var enableFullScreenButton = this._uiConfig.enableFullScreenButton === false ? false : true;
        var enableSettingButton = this._uiConfig.enableSettingButton === false ? false : true;
        //create header
        if (enableFilterBar || enableFullScreenButton || enableSettingButton) {
            this._createHeader();
        }
        //create filterBar
        if (enableFilterBar) {
            this._createFilterBar();
        }
        //create fullscreen button
        if (enableFullScreenButton) {
            this._createFullScreenButton();
        }
        //create setting button
        if (enableSettingButton) {
            this._createSettingButton();
        }
        //create Chart
        this._createChart();

        //legend
        if(this._uiConfig.enableResponsiveLegend === true){
            this._createDedicatedLegendControl();
        }

        this._createPopupLayer();

        //create Context Menu
        var enableContextMenu = this._uiConfig.enableContextMenu === false ? false : true;
        if (enableContextMenu) {
            this._createContextMenu();
        }

        //comments
        var enableAnnotation = this._uiConfig.enableAnnotation === false ? false : true;
        if (enableAnnotation) {
            this._createAnnotation();
        }
        if (this._uiConfig.enableAnnotationControl === true) {
            this._createAnnotationControl();
        }

        // enable Filter Menu by default
        var enableFilterMenu = this._uiConfig.enableFilterMenu === false ? false : true;
        if (enableFilterMenu) {
            //create Filter Menu
            this._createFilterMenu();
        }
        var enableTitleEditor = this._uiConfig.enableTitleEditor === false ? false : true;
        if(enableTitleEditor){
            this._createTitleEditor();
        }

        //connect control to model after chart is created.
        if (this._filterBar) {
            this._filterBar.connect(this.vizUid());
        }
        if (this._contextMenu) {
            this._contextMenu.connect(this.vizUid());
        }
        if (this._titleEditor) {
            this._titleEditor.connect(this.vizUid());
        }
        if (this._annotation) {
            this._annotation.connect(this.vizUid());
        }
        if (this._annotationControl) {
            this._annotationControl.connect(this.vizUid());
        }
        if (this._legendControl){
            this._legendControl.connect(this.vizUid());
        }
    };
    /**
     * measure the size
     */
    VizFrame.prototype._validateSize = function(isFilterBarHeightChanged) {
        var w = $(this._div).width();
        var h = $(this._div).height();
        if (this._header$ && this._header$.css('display') != 'none' && !isNaN(this._header$.outerHeight())) {
            if (this._filterBar && (isFilterBarHeightChanged !== true)) {
                this._filterBar.validateSize();
            }
            h -= this._header$.outerHeight();
        }
        if(this._playControl && this._playControlContainer$.css('visibility')=== 'visible' && !isNaN(this._playControlContainer$.outerHeight()))
        {
            h -= this._playControlContainer$.outerHeight();
        }
        $(this._layout).css({
            width : w + "px",
            height : h + "px",
            visibility : "visible",
            display : ''
        });
        if (this._chart) {
            this._chart.size({
                width : w,
                height : h
            });
            if(this._legendControl && this._vizModel().type()){
                var options = {};
                this._parseLegendProperties(options);
                this._chart.vizProperties(options);
            }
        }
        if (this._annotation) {
            this._annotation.validateSize(w, h);
        }
        if (this._chartEditorPlugin) {
            this._chartEditorPlugin.validateSize(w, h);
        }

        if (this._filterMenu) {
            this._filterMenu.size({
                width : w
            });
        }

        if (this._playControl) {
            this._validatePlayControlSize();
        }

        if (this._titleEditor) {
            this._titleEditor.size();
        }
    };
    /**
     * Get the chart
     * @return {Chart}
     */
    VizFrame.prototype._chartControl = function() {
        return this._chart;
    };
    /**
     * Override this method and throw exception to prevent application from calling it directly.
     * @ignore
     * @method sap.viz.controls.frame.VizFrame.prototype.connect
     * @param {String} vizUid
     *                 The uid of the viz instance.
     */
    VizFrame.prototype.connect = function(vizUid) {
        //if (console) {
        //    console.log("Info: VizFrame instance does not support connect function!");
        //}
    };
    /**
     * Override this method and throw exception to prevent application from calling it directly.
     * @ignore
     * @method sap.viz.controls.frame.VizFrame.prototype.disconnect
     */
    VizFrame.prototype.disconnect = function() {
        //if (console) {
        //    console.log("Info: VizFrame instance does not support disconnect function!");
        //}
    };
    /**
     * Destroy VizFrame.
     * @override
     */
    VizFrame.prototype.destroy = function() {
        // clean children
        if (this._contextMenu) {
            this._contextMenu.removeAllEventListeners();
            this._contextMenu.destroy();
            this._contextMenu = null;
        }
        if (this._filterMenu) {
            this._filterMenu.removeAllEventListeners();
            this._filterMenu.destroy();
            this._filterMenu = null;
        }
        if (this._chartEditorPlugin) {
            // Notes: No events registered on ChartEditorPlugin.
            this._chartEditorPlugin.destroy();
            this._chartEditorPlugin = null;
        }
        if (this._annotation) {
            // Notes: No events registered on Annotation.
            this._annotation.destroy();
            this._annotation = null;
        }

        if (this._playControl) {
           this._playControl.destroy();
           this._playControl = null;
        }

        if (this._legendControl){
            this._legendControl.destroy();
            this._legendControl = null;
        }

        // call super
        VizFrame.superclass.destroy.apply(this, arguments);
        //Children control will be destroyed in super class.
        this._chart = null;
        this._filterBar = null;
    };
    /**
     * Get the uid of vizFrame.
     * @method sap.viz.controls.frame.VizFrame.prototype.vizUid
     * @return {String}
     */
    VizFrame.prototype.vizUid = function() {
        return this._chart.vizUid();
    };
    
    /**
     * Get/set vizFrame scale group.
     * @method sap.viz.controls.frame.VizFrame.prototype.scaleGroup
     * @param {String} group
     * @param {int} index
     * @return {group: String, index: Number} scale group
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var frame = new VizFrame(...);
     * ...
     * frame.scaleGroup("GroupA");
     * </pre>
     */
    VizFrame.prototype.scaleGroup = function(group, index) {
        return this._chart.scaleGroup.apply(this._chart, arguments);
    };
    
    /**
     * Enable or disable morphing.
     * Note: The following viz types are not supporting morphing:
     * - ChartConst.TYPE_GEO_BUBBLE
     * - ChartConst.TYPE_GEO_CHOROPLETH
     * - ChartConst.TYPE_GEO_PIE
     * - ChartConst.TYPE_GEO_MAP
     * - ChartConst.TYPE_TABLE
     * @method sap.viz.controls.frame.VizFrame.prototype.enableMorphing
     * @param {Boolean} value
     *                  Default value is true.
     *                  If value is true, enable morphing.
     *                  If value is false, disable morphing.
     */
    /**
     * Get/Set vizFrame dataset. Viz Container provides a wrapper of CVOM
     * {@link sap.viz.api.core.VizInstance}.data() to get/set data.
     * @method sap.viz.controls.frame.VizFrame.prototype.vizData
     * @param {sap.viz.api.data.CrosstableDataset} [value]
     *                                             The new dataset
     * @return {sap.viz.api.data.CrosstableDataset}
     */
    VizFrame.prototype.vizData = function(data) {
        return this._chart.vizData.apply(this._chart, arguments);
    };
    /**
     * Get/Set vizFrame css. Viz Container provides a wrapper of CVOM
     * {@link sap.viz.api.core.VizInstance}.css() to get/set css.
     * @method sap.viz.controls.frame.VizFrame.prototype.vizCss
     * @param {CSS} [value]
     * @return {CSS}
     */
    VizFrame.prototype.vizCss = function(css) {
        return this._chart.vizCss.apply(this._chart, arguments);
    };
    /**
     * Get/Set vizFrame properties.
     * @method sap.viz.controls.frame.VizFrame.prototype.vizProperties
     * @param {JSON} [value]
     *               The new properties.
     * @return {JSON}
     */
    VizFrame.prototype.vizProperties = function(properties) {
        if(!arguments.length){
            //Get vizProperties
            var opts = this._chart.vizProperties.apply(this._chart, arguments);
            if(this._legendControl && opts){
                opts.legendGroup.computedVisibility = opts.legendGroup.computedVisibility || this._legendControl.isOpen();
            }
            return opts;
        }else{
            if(this._legendControl){
                this._parseLegendProperties(properties);
            }
            return this._chart.vizProperties.apply(this._chart, arguments);
        }
    };
    /**
     * Get/Set vizFrame scales.
     * @method sap.viz.controls.frame.VizFrame.prototype.vizScales
     * @param {JSON} [value]
     *               The new scales.
     * @return {JSON}
     */
    VizFrame.prototype.vizScales = function(scales) {
        return this._chart.vizScales.apply(this._chart, arguments);
    };
    /**
     * Get viz instance description.
     * @return {Object}
     */
    VizFrame.prototype.vizDescription = function() {
        return this._chart.vizDescription.apply(this._chart, arguments);
    };
    /**
     * Update viz instance by passing options in single function.
     * @method sap.viz.controls.frame.VizFrame.prototype.vizUpdate
     * @param {JSON} updates
     *               The update options with below data structure:
     * <pre>
     * {
     *     'data' : dataset,
     *     'css' : cssString,
     *     'properties' : {},
     *     'feeds' : [], // Array of FeedItem object
     *     'filters' : [] // Array of ValueFilter|NumericRangeFilter|DateRangeFilter object
     * }
     * All the options (data, css, properties, feeds and filters) are optional and you can pass partial options.
     * </pre>
     * @return {Object} {@link sap.viz.controls.frame.VizFrame} VizFrame itself.
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var vizFrame = new VizFrame(...);
     * var dataset = new sap.viz.api.data.CrosstableDataset();
     * //dataset.data(your data);
     * var cssString = '';
     * vizFrame.vizUpdate({
     *     'properties' : {},
     *     'feeds' : [], //FeedItem object
     *     'filters' : [] //ValueFilter|NumericRangeFilter|DateRangeFilter object
     * });
     * </pre>
     */
    VizFrame.prototype.vizUpdate = function(updates) {
        var result;
        if (!updates) {
            return;
        }

        this._beginUpdateProperty();

        try {
            //handle filters change
            if (updates.filters && this._filterBar) {
                // for backward compatibility, we expose filter option using {'filters' : {'value' : [filterItems]}}
                var filters = updates.filters.value ? updates.filters.value : updates.filters;
                this._filterBar.filterItems(filters);
            }

            if(updates.properties && this._legendControl){
                this._parseLegendProperties(updates.properties);
            }

            result = this._chart.vizUpdate.apply(this._chart, arguments);
        } catch (error) {
            this._endUpdateProperty();
            throw error;
        }

        this._endUpdateProperty();
        
        var feeds = this.feeds();
        var scales = this.vizScales();
        if(scales) {
            for(var key in scales) {
                if(scales[key].feed == 'playField' && scales[key].domain && scales[key].domain.length) {
                    this.playControl().slicedData(scales[key].domain);
                }
            }
        }
        return result;
    };
    /**
     * Add event listener on viz instance. Viz Container provides a wrapper of CVOM
     * {@link sap.viz.api.core.VizInstance}.on() to add event listener.
     * @method sap.viz.controls.frame.VizFrame.prototype.vizOn
     * @param {String} evtType
     * @param {Function} callback
     * @return {Object} {@link sap.viz.controls.frame.VizFrame} VizFrame itself.
     */
    VizFrame.prototype.vizOn = function(evtType, callback) {
        this._chart.vizOn.apply(this._chart, arguments);
        return this;
    };
    /**
     * Remove event listener on viz instance. Viz Container provides a wrapper of CVOM
     * {@link sap.viz.api.core.VizInstance}.on() to remove event listener.
     * @method sap.viz.controls.frame.VizFrame.prototype.vizOff
     * @param {String} evtType
     * @return {Object} {@link sap.viz.controls.frame.VizFrame} VizFrame itself.
     */
    VizFrame.prototype.vizOff = function(evtType) {
        this._chart.vizOff.apply(this._chart, arguments);
        return this;
    };
    /**
     * Trigger viz instance action.
     * @param {String} name
     * @param {JSON} [args]
     *               optional, the action arguments in JSON format
     * @return {Object} {@link sap.viz.controls.frame.VizFrame} VizFrame itself.
     */
    VizFrame.prototype.vizAction = function(keyName, args) {
        this._chart.vizAction.apply(this._chart, arguments);
        return this;
    };
    /**
     * Get/Set selected data points. Viz Container provides a wrapper of CVOM
     * {@link sap.viz.api.core.VizInstance}.selection() to get/set selected data points.
     * @method sap.viz.controls.frame.VizFrame.prototype.vizSelection
     * @param {Array<JSON>} [items]
     *                          optional, viz instance will hold the passed-in description,
     *                          but if the properties are changed, it must be re-pass to viz instance to take effect.
     *                          point:
     *                          {
     *                              data: {key: "value", ...},
     *                              ctx:  [{mi: 0, ...}, {...}, ...], // !important
     *                              info: [{obj}, null, ... } // optional
     *                          }
     * @param {Boolean} [clearFlag]
     *                          optional, whether to clear previous selection.
     *                          Default value is true.
     *                          If clearFlag is true, the selection will be incremental selection.
     *                          If clearFlag is false, the selection will not be incremental selection.
     */
    VizFrame.prototype.vizSelection = function(points, options) {
        return this._chart.vizSelection.apply(this._chart, arguments);
    };
    /**
     * Get viz instance feeding zone. The feeding zone is used to drag-and-drop an object onto different feeding zone to
     * feed data. Application can get this functionality by free if use VizFrame control.
     * @method sap.viz.controls.frame.VizFrame.prototype.vizFeedingZone
     * @return {Object} All the feeding zones of the CVOM chart.
     */
    VizFrame.prototype.vizFeedingZone = function() {
        return this._chart.vizFeedingZone.apply(this._chart, arguments);
    };
    /**
     * Get/Set title properties.
     * @method sap.viz.controls.frame.VizFrame.prototype.vizTitle
     * @param {String} value
     * @return {String} title
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var frame = new VizFrame(...);
     * var oldTitle = frame.vizTitle();
     * var newTitle = 'new Title';
     * frame.vizTitle(newTitle);
     * </pre>
     */
    VizFrame.prototype.vizTitle = function(title) {

            return ( title = this._chart.vizTitle.apply(this._chart, arguments) );
        };
    /**
     * To achieve interoperability with prior CVOM based application, Viz Container provides a wrapper of CVOM
     * sap.viz.api.core.createViz(options), which creates a viz instance by passing options.
     *
     * @method sap.viz.controls.frame.VizFrame.prototype.createViz
     * @param {JSON} options
     *                          {
     *                              type: String, // refer to propDoc.html for all supported viz chart TypeUtils
     *                              data: sap.viz.api.data.CrosstableDataset,
     *                              feeds: Array of FeedItem,
     *                              properties: JSON, // refer to propDoc.html for all supported options for each viz
     * type
     *                              css: String, // refer to propDoc.html for all supported css items for each viz type
     *                              description: JSON,
     *                              events: Object // events is an object with key and value pair. Key is the event name,
     * and the value is the listener function
     *                          }
     * @return {Object} {@link sap.viz.controls.frame.VizFrame} VizFrame itself.
     */
    VizFrame.prototype.createViz = function(options) {
        if (arguments.length > 0) {
            this._chart.reset();
            if(this._legendControl) {
                options.properties = options.properties || {};
                this._parseLegendProperties(options.properties);
            }
            this._chart.createViz(options);
            return this;
        }
    };

    /**
     * Change template if we detect templateChanged event.
     * @return {Object} {@link sap.viz.controls.frame.VizFrame} VizFrame itself.
     */
    VizFrame.prototype.changeTemplate = function() {
        return this._chart.changeTemplate.apply(this._chart);
    };
    /**
     * To achieve interoperability with prior CVOM based application. Viz Container provides a wrapper of CVOM
     * {@link sap.viz.api.core.VizInstance}.toJSON(), which exports CVOM viz instance into a JSON object which contains
     * all information of the CVOM visualization including type, data, properties, css, feeding and size.<br/>
     *
     * @deprecated
     * @method sap.viz.controls.frame.VizFrame.prototype.exportViz
     * @param {JSON} options
     *      optional
     *      supported options: {emptyDataset : false}
     * @return {JSON}
     */
    VizFrame.prototype.exportViz = function(options) {
        return this._chart.exportViz(options);
    };
    /**
     * Create CVOM viz instance from JSON object which contains all information of the CVOM visualization including
     * type, data, properties, css, feeding and size.
     * 
     * @deprecated
     * @method sap.viz.controls.frame.VizFrame.prototype.loadViz
     * @param {JSON} vizJSON
     */
    VizFrame.prototype.loadViz = function(vizJSON) {
        this._chart.loadViz(vizJSON);
    };
    /**
     * Serialize VizFrame to a JSON object. The serialization includes:<br/>
     * 1. Viz instance(including type, data, properties, css, feeding and size).<br/>
     * 2. Internal data model(including feeds, filters).<br/>
     * @method sap.viz.controls.frame.VizFrame.prototype.save
     * @param {JSON} options
     *      optional
     *      supported options: {emptyDataset : false}
     * @return {JSON}
     */
    VizFrame.prototype.save = function(options) {
        var jsonValue = {};
        //version
        jsonValue['version'] = Version.VERSION;
        //chart
        jsonValue["chart"] = this._chart.save(options);
        //filterbar
        if(this._filterBar) {
            jsonValue["filterBar"] = this._filterBar.save();
        }
        //contextmenu
        if (this._contextMenu) {
            jsonValue["contextMenu"] = this._contextMenu.save();
        }
        //annotation
        if (this._annotation) {
            jsonValue["annotation"] = this._annotation.save();
        }
        //titleEditor
        if (this._titleEditor) {
            jsonValue['titleEditor'] = this._titleEditor.save();
        }
        if (this._playControl) {
            jsonValue['playControl'] = this._playControl.save(options);
        }
        return jsonValue;
    };
    /**
     * Deserialize VizFrame from JSON object.<br/>
     * 1. Create viz instance from JSON object which including type, data, properties,
     * css, feeding and size.<br/>
     * 2. Restore VizFrame, including internal data model<br/>
     * 3. Handle backward compatibility.
     * @method sap.viz.controls.frame.VizFrame.prototype.load
     * @param {JSON} valueJSON
     */
    VizFrame.prototype.load = function(valueJSON) {
        this._chart.reset();
        this._beginUpdateProperty();
        //migrate to latest version of serialization package
        var migratedValueJSON = Serialization.migrateVizFrame(valueJSON);
        //reset playControl when load
        this._vizModel().restorePlayerField(null);
        this._redrawPlayControl();
        //version
        var module = migratedValueJSON['version'];
        //filterBar
        module = migratedValueJSON["filterBar"];
        if(module && this._filterBar) {
            this._filterBar.load(module);
        }
        //contextmenu
        module = migratedValueJSON["contextMenu"];
        if (module && this._contextMenu) {
            this._contextMenu.load(module);
        }
        //chart
        module = migratedValueJSON["chart"];
        if (module) {
            this._chart.load(module);
        }
        //annotation
        module = migratedValueJSON["annotation"];
        if (module && this._annotation) {
            this._annotation.load(module);
        }
        module = migratedValueJSON["titleEditor"];
        if (module && this._titleEditor) {
            this._titleEditor.load(module);
        }
        module = migratedValueJSON["playControl"];
        if (module) {
            if(!this._playControl) {
                var enablePlayControl = this._uiConfig.enablePlayControl === false ? false : true;
                if(enablePlayControl) {
                    this._createPlayControl();
                }
            }
            if(this._playControl)
            {
                this._chart._beginUpdateProperty();
                this._playControl.load(module);
                this._chart._endUpdateProperty();
            }
        }
        this._endUpdateProperty();
    };
    /**
     * Get/Set all feeds data.
     * To get feeds, please use feeds() or feeds({withMND: true/false}). The feeds order is always same with the feeding
     * definition of chart.
     * If the user shows MND in UI,
     * with option {withMND : true}, return current feeds with MND;
     * with option {withMND : false}, return current feeds without MND;
     * with no option, return current feeds.
     * If the user doesn't show MND in UI, get feeds always return current feeds, the option value will be ignored.
     * To set feeds, please use feeds(feedItems).
     * @method sap.viz.controls.frame.VizFrame.prototype.feeds
     * @param {Array<{@link sap.viz.controls.common.feeds.FeedItem}>|JSON} value
     * @return {Array<{@link sap.viz.controls.common.feeds.FeedItem}>} Current feed items.
     *     An array of {@link sap.viz.controls.common.feeds.FeedItem}.
     */
    VizFrame.prototype.feeds = function(value) {
        return this._chart.feeds.apply(this._chart, arguments);
    };
    /**
     * Get properties changed by api or user interaction.<br/>
     * For API, the properties changed in createViz, vizUpdate, load, vizProperties.
     * For user interaction, operate in context menu such as show/hide title, show/hide legend, show/hide data labels change properties.
     * @method sap.viz.controls.frame.VizFrame.prototype.getChangedProperties
     * @return {JSON}
     */
    VizFrame.prototype.getChangedProperties = function() {
        return this._chart.getChangedProperties();
    };


    /**
     * Get default incomplete ghost options for createViz.
     * @method sap.viz.controls.frame.VizFrame.getDefaultIncompleteOptions
     * @param {String} vizType
     * @return {JSON}
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var vizFrame = new VizFrame(...);
     * var options = VizFrame.getDefaultIncompleteOptions(ChartConst.TYPE_LINE);
     * vizFrame.createViz(options);
     * </pre>
     */
    VizFrame.getDefaultIncompleteOptions = function(type) {
        // return this._chart.getDefaultIncompleteOptions.apply(this._chart, arguments);
        return Chart.getDefaultIncompleteOptions.apply(Chart, arguments);
    };

    /**
     * show customized message and destory the viz instance.
     * @method sap.viz.controls.frame.VizFrame.prototype.showMessage
     * @param {String} message
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var vizFrame = new VizFrame(...);
     * ...
     * case 1:
     * if (errorHappened) {
     *     vizFrame.showMessage("your error message");
     * } else {
     *     vizFrame.vizUpdate(); // or vizFrame.vizXXX();
     * }

     * case 2:
     * try {
     *     vizFrame.vizUpdate(); // or vizFrame.vizXXX();
     * } catch (error) {
     *     vizFrame.showMessage(error);
     * }
     * </pre>
     */
    VizFrame.prototype.showMessage = function(message) {
        if (arguments.length == 1) {
            this._chart.showMessage(message);
        }
    };

    /**
     * pause render for the viz instance. Call resumeRender for resume
     * @method sap.viz.controls.frame.VizFrame.prototype.pauseRender
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var vizFrame = new VizFrame(...);
     * ...
     * vizFrame.pauseRender();
     * </pre>
     */
    VizFrame.prototype.pauseRender = function() {
        this._chart.pauseRender();
    };

    /**
     * resume render for the viz instance.
     * @method sap.viz.controls.frame.VizFrame.prototype.resumeRender
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var vizFrame = new VizFrame(...);
     * ...
     * vizFrame.resumeRender();
     * </pre>
     */
    VizFrame.prototype.resumeRender = function() {
        this._chart.resumeRender();
    };

    /**
     * Set callback func for title generator.
     * @method sap.viz.controls.frame.VizFrame.prototype.setTitleGeneratorFunc
     * @param {Object} callback
     *                 Function
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var vizFrame = new VizFrame(...);
     * ...
     * var callback = function(vizUid){
     *    var runtime = RuntimeManager.getRuntime();
     *    var model = runtime.getModel(vizUid);
     *    var titleText = "";
     *    ...
     *    return titleText;
     * };
     * vizFrame.setTitleGeneratorFunc(callback);
     * </pre>
     */
    VizFrame.prototype.setTitleGeneratorFunc = function(value) {
        this._chart.setTitleGeneratorFunc(value);
    };

    /**
     * getter/setter for viz title mode.
     * @method sap.viz.controls.frame.VizFrame.prototype.vizTitleMode
     * @param {string} viz title mode("manual" or "auto")
     * @example <caption>Sample Code:</caption>
     * <pre>
     * var vizFrame = new VizFrame(...);
     * ...
     * vizFrame.vizTitleMode('manual');
     * ...
     * var titleMode = vizFrame.vizTitleMode();
     * </pre>
     */
    VizFrame.prototype.vizTitleMode = function(mode) {
        if(arguments.length > 0){
            this._chart.vizTitleMode(mode);
        }
        else{
            return this._chart.vizTitleMode();
        }
    };

    /**
     * get annotationControl.
     * @method sap.viz.controls.frame.VizFrame.prototype.annotationControl
     * @return {Object} {@link sap.viz.controls.annotationcontrol.AnnotationControl}
     */
    VizFrame.prototype.annotationControl = function() {
        return this._annotationControl;
    };

    VizFrame.prototype.chart = function() {
        return this._chart;
    };

    VizFrame.prototype.filterBar = function() {
        return this._filterBar;
    };

    VizFrame.prototype.contextMenu = function() {
        return this._contextMenu;
    };

    VizFrame.prototype.titleEditor = function() {
        return this._titleEditor;
    };

    VizFrame.prototype.playControl = function() {
        return this._playControl;
    };

    /**
     * Export the current viz as SVG String.
     * The viz is ready to be exported to svg ONLY after the initialization is finished.
     * Any attempt to export to svg before that will result in an empty svg string.
     * @method sap.viz.controls.frame.VizFrame.prototype.exportToSVGString
     * @param {Object} [option]  {
     *                              width: Number - the exported svg will be scaled to the specific width.
     *                              height: Number - the exported svg will be scaled to the specific height.
     *                              hideTitleLegend: Boolean - flag to indicate if the exported svg includes the original title and legend.
     *                              hideAxis: Boolean - flag to indicate if the exported svg includes the original axis.
     *                           }
     * @return {String} the SVG string of the current viz or empty svg if error occurs.
     */
    VizFrame.prototype.exportToSVGString = function(option) {
        return this._chart.exportToSVGString(option);
    };

    /**
     * Check whether the chart type supports API exportToSVGString
     * @method sap.viz.controls.frame.VizFrame.prototype.supportExportToSVG
     * @return {Boolean}
     */
    VizFrame.prototype.supportExportToSVG = function() {
        var ret = false;
        // by now we can make sure to support all built in chart types
        if (this.vizType()) {
            ret = ChartTypeUtil.isBuildInType(this.vizType()) || ret;
        }
        return ret;
    };

    VizFrame.prototype.selectedPropertyZone = function (selection) {
        return this._chart.selectedPropertyZone.apply(this._chart, arguments);
    };

    VizFrame.prototype.responsiveLegend = function(){
        if(this._legendControl){
            return this._legendControl;
        }
    };

    VizFrame.prototype._createDedicatedLegendControl = function(){
        this._legendControl = new DedicatedLegend();
    };

    VizFrame.prototype._parseLegendProperties = function(options){
        if(this._legendControl){
            return this._legendControl.parseDefaultLegendProperties(options);
        }
    };

    return VizFrame;
});

// @formatter:off
define('sap/viz/controls/popover/chartpopover/ShapeMarker',[
    'jquery'
    ],
function(jQuery) {
// @formatter:on
    var _declare = function() {
        /*
         * Copyright (C) 2009-2013 SAP BOBJ or an SAP affiliate company. All rights reserved
         */
        jQuery.sap.declare('sap.viz.chartpopover.ShapeMarker');
        /**
         * @author I071838
         */
        sap.ui.core.Control.extend('sap.viz.chartpopover.ShapeMarker', {
            metadata : {
                properties : {
                    'type' : 'string',
                    'color' : 'string',
                    'markerSize' : 'int'
                }
            },

            renderer : {
                render : function(oRm, oControl) {
                    var markerSize = oControl.getMarkerSize() ? oControl.getMarkerSize() : 10;
                    var props = {
                        rx : markerSize / 2,
                        ry : markerSize / 2,
                        type : oControl.getType(),
                        borderWidth : 0
                    };
                    oRm.write('<div');
                    oRm.writeClasses();
                    oRm.write('>');
                    oRm.write('<svg width=' + markerSize + 'px height=' + markerSize + 'px ');
                    oRm.write('>');
                    oRm.write("<path d = '" + oControl._generateShapePath(props) + "'");
                    oRm.write(" fill = '" + oControl.getColor() + "'");
                    oRm.write(" transform = 'translate(" + markerSize / 2 + "," + markerSize / 2 + ")'");
                    oRm.write('</path>');
                    oRm.write('</svg>');
                    oRm.write('</div>');
                    oRm.writeStyles();
                }
            }
        });

        sap.viz.chartpopover.ShapeMarker.prototype._generateShapePath = function(props) {
            var result;
            var temp = props.borderWidth / 2;
            switch(props.type) {
                case "circle" :
                    result = "M" + (-props.rx - temp) + ",0 A" + (props.rx + temp) + "," + (props.ry + temp) + " 0 1,0 " + (props.rx + temp) + ",0 A";
                    result += (props.rx + temp) + "," + (props.ry + temp) + " 0 1,0 " + (-props.rx - temp) + ",0z";
                    break;
                case "cross" :
                    result = "M" + (-props.rx - temp) + "," + (-props.ry / 3 - temp) + "H" + (-props.rx / 3 - temp) + "V" + (-props.ry - temp) + "H" + (props.rx / 3 + temp);
                    result += "V" + (-props.ry / 3 - temp) + "H" + (props.rx + temp) + "V" + (props.ry / 3 + temp) + "H" + (props.rx / 3 + temp);
                    result += "V" + (props.ry + temp) + "H" + (-props.rx / 3 - temp) + "V" + (props.ry / 3 + temp) + "H" + (-props.rx - temp) + "Z";
                    break;
                case "diamond" :
                    result = "M0," + (-props.ry - temp) + "L" + (props.rx + temp) + ",0" + " 0," + (props.ry + temp) + " " + (-props.rx - temp) + ",0" + "Z";
                    break;
                case "square" :
                    result = "M" + (-props.rx - temp) + "," + (-props.ry - temp) + "L" + (props.rx + temp) + ",";
                    result += (-props.ry - temp) + "L" + (props.rx + temp) + "," + (props.ry + temp) + "L" + (-props.rx - temp) + "," + (props.ry + temp) + "Z";
                    break;
                case "triangle-down" :
                //TODO: remove duplicate
                case "triangleDown" :
                    result = "M0," + (props.ry + temp) + "L" + (props.rx + temp) + "," + -(props.ry + temp) + " " + -(props.rx + temp) + "," + -(props.ry + temp) + "Z";
                    break;
                case "triangle-up" :
                //TODO: remove duplicate
                case "triangleUp" :
                    result = "M0," + -(props.ry + temp) + "L" + (props.rx + temp) + "," + (props.ry + temp) + " " + -(props.rx + temp) + "," + (props.ry + temp) + "Z";
                    break;
                case "triangle-left" :
                //TODO: remove duplicate
                case "triangleLeft" :
                    result = "M" + -(props.rx + temp) + ",0L" + (props.rx + temp) + "," + (props.ry + temp) + " " + (props.rx + temp) + "," + -(props.ry + temp) + "Z";
                    break;
                case "triangle-right" :
                //TODO: remove duplicate
                case "triangleRight" :
                    result = "M" + (props.rx + temp) + ",0L" + -(props.rx + temp) + "," + (props.ry + temp) + " " + -(props.rx + temp) + "," + -(props.ry + temp) + "Z";
                    break;
                case "intersection" :
                    result = "M" + (props.rx + temp) + "," + (props.ry + temp) + "L" + (props.rx / 3 + temp) + ",0L" + (props.rx + temp) + "," + -(props.ry + temp) + "L";
                    result += (props.rx / 2 - temp) + "," + -(props.ry + temp) + "L0," + (-props.ry / 3 - temp) + "L" + (-props.rx / 2 + temp) + "," + -(props.ry + temp) + "L";
                    result += -(props.rx + temp) + "," + -(props.ry + temp) + "L" + -(props.rx / 3 + temp) + ",0L" + -(props.rx + temp) + "," + (props.ry + temp) + "L";
                    result += (-props.rx / 2 + temp) + "," + (props.ry + temp) + "L0," + (props.ry / 3 + temp) + "L" + (props.rx / 2 - temp) + "," + (props.ry + temp) + "Z";
                    break;
                case 'squareWithRadius' :
                    var r = props.rx;
                    var radius = r - 3;
                    result = "M0," + -r + "L" + -radius + "," + -r + "Q" + -r + "," + -r + " " + -r + "," + -radius + "L" + -r + "," + radius + "Q" + -r + "," + r + " " + -radius + "," + r;
                    result += "L" + radius + "," + r + "Q" + r + "," + r + " " + r + "," + radius + "L" + r + "," + -radius + "Q" + r + "," + -r + " " + radius + "," + -r + "Z";
                    break;
            }
            //symbolMap[props] = result;
            return result;
        };

    };

   function create (id, settings) {
        try {
            return new sap.viz.chartpopover.ShapeMarker(id, settings);
        } catch(e) {
            _declare();
            return create.apply(this, arguments);
        }
    }

    return {
        'create' : create
    };
});

// @formatter:off
define('sap/viz/controls/popover/chartpopover/ContentPanel',[
    'jquery',
    'sap/viz/controls/popover/chartpopover/ShapeMarker'
],
function(jQuery, ShapeMarker) {
// @formatter:on
    var _declare = function() {
        /*
         * Copyright (C) 2009-2013 SAP BOBJ or an SAP affiliate company. All rights reserved
         */
        jQuery.sap.declare('sap.viz.chartpopover.ContentPanel');
        /**
         * @author I071838
         */
        sap.ui.core.Control.extend('sap.viz.chartpopover.ContentPanel', {
            metadata : {
                publicMethods : ["setContentData"]
            },

            /*
             onAfterRendering : function(){
             var contentHeight = this._oPanel.$().outerHeight(true);
             this._oPanel.setHeight(contentHeight+'px');
             },*/

            renderer : {
                render : function(oRm, oControl) {
                    oRm.renderControl(oControl._oPanel);
                }
            }
        });

        sap.viz.chartpopover.ContentPanel.prototype.init = function() {
            this._measureItemsLen = 0;
            this._defaultItemsLineHeight = 1.4375;
            this._spacing = 0.4375 * 2;

            var oModel = new sap.ui.model.json.JSONModel();
            this._sModelName = "sapvizModel";
            var oItemTemplate = new sap.m.DisplayListItem({
                label : "{measureName}",
                value : "{measureValue}"
            }).addStyleClass('viz-controls-chartPopover-measures-item');

            this._oList = new sap.m.List({
            }).addStyleClass('viz-controls-chartPopover-measures-list');
            this._oList.setModel(oModel);
            this._oList.bindAggregation("items", "/items", oItemTemplate);

            this._oShapeLabel = ShapeMarker.create(this._createId('vizShapeMarker'), {
            }).addStyleClass('viz-controls-chartPopover-dimension-marker');
            this._oDimLabel = new sap.m.Label(this._createId('vizDimensionLabel'), {
            }).addStyleClass('viz-controls-chartPopover-dimension-label');
            this._oPanel = new sap.m.Panel(this._createId('vizPanel'), {
                content : [this._oShapeLabel, this._oDimLabel, this._oList]
            });
        };

        sap.viz.chartpopover.ContentPanel.prototype.setContentData = function(data) {
            var values = data.val, dims = '', meas = [];
            this._measureItemsLen = 0;
            if (values) {
                for (var i = 0; i < values.length; i++) {
                    if (values[i].type.toLowerCase() === 'dimension') {
                        if (dims.length > 0) {
                            dims = dims + ' - ' + values[i].value;
                        } else {
                            dims = values[i].value;
                        }
                    } else if (values[i].type.toLowerCase()  == 'measure') {
                        meas.push({
                            measureName : values[i].name,
                            measureValue : values[i].value
                        });
                    }
                }

                if(typeof data.color === 'string'){
                    var markerSize = this._oDimLabel.$().css('margin-left');
                    if (markerSize) {
                        markerSize = parseInt(markerSize.substr(0, markerSize.length - 2), 10);
                        this._oShapeLabel.setMarkerSize(markerSize);
                    }
                    this._oShapeLabel.setColor(data.color).setType((data.shape ? data.shape : 'square'));
                }else{
                    this._oPanel.removeContent(this._oShapeLabel);
                }

                this._oDimLabel.setText(dims);
                this._oList.getModel().setData({
                    'items' : meas
                });

                this._measureItemsLen = meas.length;
            }
        };

        sap.viz.chartpopover.ContentPanel.prototype.getContentHeight = function() {
            return this._measureItemsLen > 0 ? ((this._measureItemsLen + 1) * this._defaultItemsLineHeight + this._spacing) : 0;
        };
        /**
         * Creates an id for an Element prefixed with the control id
         *
         * @return {string} id
         * @public
         */
        sap.viz.chartpopover.ContentPanel.prototype._createId = function(sId) {
            return this.getId() + "-" + sId;
        };

        sap.viz.chartpopover.ContentPanel.prototype.exit = function(sId) {
            if (this._oList) {
                this._oList.destroy();
                this._oList = null;
            }

            if (this._oShapeLabel) {
                this._oShapeLabel.destroy();
                this._oShapeLabel = null;
            }

            if (this._oDimLabel) {
                this._oDimLabel.destroy();
                this._oDimLabel = null;

            }
        };

    };

    function create (id, settings) {
        try {
            return new sap.viz.chartpopover.ContentPanel(id, settings);
        } catch(e) {
            _declare();
            return create.apply(this, arguments);
        }
    }

    return {
        'create' : create
    };
});

// @formatter:off
define('sap/viz/controls/popover/chartpopover/HeaderBar',[
    'jquery'
    ],
function(jQuery) {
// @formatter:on
    var _declare = function() {
        /*
         * Copyright (C) 2009-2013 SAP BOBJ or an SAP affiliate company. All rights reserved
         */
        jQuery.sap.declare('sap.viz.chartpopover.HeaderBar');
        /**
         * @author I071838
         */
        sap.m.Bar.extend('sap.viz.chartpopover.HeaderBar', {
            metadata : {
                properties : {
                    'showNavButton' : 'boolean',
                    'title' : 'string'
                },
                publicMethods : [],
                events : {
                    "navButtonPress" : {},
                    "closeButtonPress" : {}
                }
            },
            renderer : {}
        });

        sap.viz.chartpopover.HeaderBar.prototype.getContentLeft = function() {
            if (!this._oNavButton) {
                this._oNavButton = new sap.m.Button(this._createId("popoverNavButton"), {
                    type : sap.m.ButtonType.Back,
                    press : jQuery.proxy(function() {
                        this.fireNavButtonPress();
                    }, this)
                }).addStyleClass('sapUiIcon');
            }
            this._oNavButton.setVisible(this.getShowNavButton());
            return [this._oNavButton];
        };

        sap.viz.chartpopover.HeaderBar.prototype.getContentMiddle = function() {
            if (!this._oTitleLabel) {
                this._oTitleLabel = new sap.m.Label(this._createId('popoverHeaderTitle'));
            }
            this._oTitleLabel.setText(this.getTitle());
            return [this._oTitleLabel];
        };

        sap.viz.chartpopover.HeaderBar.prototype.getContentRight = function() {
            if (!this._oCloseButton) {
                this._oCloseButton = new sap.m.Button(this._createId("popoverCloseButton"), {
                    icon : sap.ui.core.IconPool.getIconURI("decline"),
                    press : jQuery.proxy(function() {
                        this.fireCloseButtonPress();
                    }, this)
                }).addStyleClass('sapUiIcon');
            }
            return [this._oCloseButton];
        };

        sap.viz.chartpopover.HeaderBar.prototype.exit = function() {
            if (this._oCloseButton) {
                this._oCloseButton.destroy();
                this._oCloseButton = null;
            }

            if (this._oTitleLabel) {
                this._oTitleLabel.destroy();
                this._oTitleLabel = null;
            }

            if (this._oNavButton) {
                this._oNavButton.destroy();
                this._oNavButton = null;
            }
        };

        sap.viz.chartpopover.HeaderBar.prototype._createId = function(sId) {
            return this.getId() + "-" + sId;
        };

    };

    function create (id, settings) {
        try {
            return new sap.viz.chartpopover.HeaderBar(id, settings);
        } catch(e) {
            _declare();
            return create.apply(this, arguments);
        }
    }

    return {
        'create' : create
    };
});

// @formatter:off
define('sap/viz/controls/popover/chartpopover/SubActionItemsPage',[
    'jquery'
    ],
function(jQuery) {
// @formatter:on
    var _declare = function() {
        /*
         * Copyright (C) 2009-2013 SAP BOBJ or an SAP affiliate company. All rights reserved
         */
        jQuery.sap.declare('sap.viz.chartpopover.SubActionItemsPage');
        /**
         * @author I071838
         */
        sap.ui.core.Element.extend('sap.viz.chartpopover.SubActionItemsPage', {
            metadata : {
                properties : {
                    items : {
                        type : 'sap.m.ListBase[]'
                    }
                }
            }
        });

        sap.viz.chartpopover.SubActionItemsPage.prototype.init = function() {
            this._oList = new sap.m.List({
            });

            this._oPage = new sap.m.Page(this._createId("listPage"), {
                showNavButton : false,
                showHeader : false,
                content : [this._oList]
            });
        };

        sap.viz.chartpopover.SubActionItemsPage.prototype.exit = function() {
            if (this._oList) {
                this._oList.destroy();
                this._oList = null;
            }

            if (this._oPage) {
                this._oPage.destroy();
                this._oPage = null;
            }
        };

        sap.viz.chartpopover.SubActionItemsPage.prototype.getControl = function() {
            return this._oPage;
        };

        sap.viz.chartpopover.SubActionItemsPage.prototype.getPageId = function() {
            return this._oPage.getId();
        };

        sap.viz.chartpopover.SubActionItemsPage.prototype.setItems = function(items) {
            this._oList.removeAllItems();
            var item;
            for (var i = 0; i < items.length; i++) {
                item = new sap.m.ActionListItem({
                    text : items[i].text,
                    press : items[i].press ? items[i].press : function() {
                    }
                });
                this._oList.addItem(item);
            }
        };

        sap.viz.chartpopover.SubActionItemsPage.prototype._createId = function(sId) {
            return this.getId() + "-" + sId;
        };

    };

    function create (id, settings) {
        try {
            return new sap.viz.chartpopover.SubActionItemsPage(id, settings);
        } catch(e) {
            _declare();
            return create.apply(this, arguments);
        }
    }

    return {
        'create' : create
    };
});

// @formatter:off
define('sap/viz/controls/popover/chartpopover/ChartPopover',[
    'jquery',
    'sap/viz/controls/popover/chartpopover/ContentPanel',
    'sap/viz/controls/popover/chartpopover/HeaderBar',
    'sap/viz/controls/popover/chartpopover/SubActionItemsPage'
],
function(jQuery, ContentPanel, HeaderBar, SubActionItemsPage) {
// @formatter:on
    var _declare = function() {
        /**
         * ChartPopover provides a popover used with charts to display chart selections.
         * Content and Action List Items can be customized.
         *
         * @author I071838
         */
        jQuery.sap.declare('sap.viz.chartpopover.ChartPopover');

        sap.ui.core.Control.extend('sap.viz.chartpopover.ChartPopover', {
            metadata : {
                properties : {
                    'customDataControl' : {
                        type : 'any'
                    }, //Parameter is selectData and returned Value is an UI5 Controls
                    'actionItems' : {
                        type : 'object[]'
                    },
                    'formatString': {
                        type: 'any'
                    }
                }
            }
        });

        sap.viz.chartpopover.ChartPopover.prototype.init = function() {
            this._listItemHeight = 3;
            //3rem
            this._options = null;
            this._oContentPanel = ContentPanel.create(this._createId('vizContentPanel'), {});

            this._oSelectedLabel = new sap.m.Label(this._createId('vizSelectedLabel'), { });

            this._oSelectedBar = new sap.m.Bar(this._createId('vizSelectedBar'), {
                contentMiddle : [this._oSelectedLabel]
            }).addStyleClass('viz-controls-chartPopover-vizSelectedBar').addStyleClass('viz-controls-chartPopover-vizSelectedBarBorder');

            this._oHomePage = new sap.m.Page(this._createId('vizHomePage'), {
                showNavButton : false,
                showHeader : false,
                content : [this._oContentPanel]
            });

            this._oNavContainer = new sap.m.NavContainer(this._createId('vizNavContainer'), {
                // initialPage : 'homePage',
                afterNavigate : jQuery.proxy(function(oEvent) {
                    var pageId = oEvent.getParameter("to").getId();
                    if (pageId.search('HomePage') !== -1) {
                        this._oCustomHeader.setShowNavButton(false).setTitle('Current Selection');
                    } else {
                        this._oCustomHeader.setShowNavButton(true);
                    }
                }, this)
            });
            this._oNavContainer.addPage(this._oHomePage);

            this._oCustomHeader = HeaderBar.create(this._createId('vizHeaderBar'), {
                title : 'Current Selection',
                showNavButton : false,
                closeButtonPress : jQuery.proxy(this.close, this),
                navButtonPress : jQuery.proxy(this._navigateBack, this)
            });

            this._oPopover = new sap.m.ResponsivePopover(this._createId('vizChartPopover'), {
                modal : false,
                bounce : true,
                //verticalScrolling:true,
                horizontalScrolling : false,
               // placement : sap.m.PlacementType.Left.Horizontal,
                contentWidth : "18rem",
                contentHeight : '100%',
                customHeader : this._oCustomHeader,
                content : [this._oNavContainer]
            });
            this._oPopover.addStyleClass('viz-controls-chartPopover');
            this._oPopover.attachBeforeOpen(jQuery.proxy(this._beforeOpen, this));
            this._oPopover.attachAfterClose(jQuery.proxy(this._afterClose, this));
        };

        sap.viz.chartpopover.ChartPopover.prototype._beforeOpen = function() {
            var selectedLabelHeight = 0;
            if (!this._options.data.val || this._options.selectedValues > 1) {
                selectedLabelHeight = this._listItemHeight + 0.1;
            }
            var contentHeight = this._oContentPanel.getContentHeight() + selectedLabelHeight;
            if (this._oContentPanel.getContentHeight() === 0) {
                //No detail data info, remove contentPanel
                if (!this._oCustomPanel) {
                    this._oHomePage.removeContent(this._oContentPanel);
                    this._oSelectedBar.removeStyleClass('viz-controls-chartPopover-vizSelectedBarBorder');
                }
            }
            if (this.getActionItems()) {
                contentHeight += this.getActionItems().length * this._listItemHeight;
            }
            this._oPopover.setContentHeight(contentHeight + 'rem');
        };

        sap.viz.chartpopover.ChartPopover.prototype._afterClose = function() {
            if (this._options && this._options.selectedValues < 1) {
                this._oHomePage.removeContent(this._oSelectedBar);
            }
        };

        /**
         * Returns true if the popover is open, otherwise false.
         *
         * @returns {boolean} true if the popover is open, otherwise false
         *
         */
        sap.viz.chartpopover.ChartPopover.prototype.isOpen = function() {
            return this._oPopover.isOpen();
        };

        /**
         * Open Chart's Popover.
         */
        sap.viz.chartpopover.ChartPopover.prototype.openBy = function(oControl, bSkipInstanceManager) {
            if (oControl) {
                this._updateContent();
                this._updateActionItems();

                var targetSize = oControl.getBoundingClientRect();
                this._oPopover.setOffsetX(parseInt(targetSize.width, 10)).setOffsetY(parseInt(targetSize.height / 2, 10));

                this._navigateBack();

                this._oPopover.openBy(oControl, bSkipInstanceManager);
            }
            return this;
        };

        /**
         * Close Chart's Popover.
         */
        sap.viz.chartpopover.ChartPopover.prototype.close = function() {
            this._oPopover.close();
            return this;
        };

        /**
         * Destroy Chart's Popover
         */
        sap.viz.chartpopover.ChartPopover.prototype.exit = function() {
            if (this._oNavContainer) {
                this._oNavContainer.destroy();
                this._oNavContainer = null;
            }

            if (this._oContentPanel) {
                this._oContentPanel.destroy();
                this._oContentPanel = null;
            }

            if (this._oSelectedLabel) {
                this._oSelectedLabel.destroy();
                this._oSelectedLabel = null;
            }

            if (this._oHomePage) {
                this._oHomePage.destroy();
                this._oHomePage = null;
            }

            if (this._oCustomHeader) {
                this._oCustomHeader.destroy();
                this._oCustomHeader = null;
            }

            if (this._oCustomPanel) {
                this._oCustomPanel.destroy();
                this._oCustomPanel = null;
            }

            if (this._oPopover) {
                this._oPopover.destroy();
                this._oPopover = null;
            }

            this._options = null;
        };

        /**
         * Set popover's options
         */
        sap.viz.chartpopover.ChartPopover.prototype.setOptions = function(options) {
            var data = this._formatData(options.data);
            this._options = options;
            this._oContentPanel.setContentData(data);
            if (!data.val || options.selectedValues > 1) {
                this._oSelectedLabel.setText(options.selectedValues + ' values selected');
                this._oHomePage.insertContent(this._oSelectedBar, 1);
            } else {
                this._oHomePage.removeContent(this._oSelectedBar);
            }
            return this;
        };

        sap.viz.chartpopover.ChartPopover.prototype._updateContent = function() {
            var contents = this.getCustomDataControl();
            if (contents) {
                //Has Custom Data Content.
                //1. remove the repvious custom panel.
                //2. remove content panel
                //3. insert new custom panel
                if (this._oCustomPanel) {
                    this._oHomePage.removeContent(this._oCustomPanel);
                }
                this._oCustomPanel = contents(this._options);
                this._oHomePage.removeContent(this._oContentPanel);
                this._oHomePage.insertContent(this._oCustomPanel, 0);
                this._oSelectedBar.addStyleClass('viz-controls-chartPopover-vizSelectedBarBorder');
            } else {
                //No custom data content.
                this._oCustomPanel = null;
                if (this._oHomePage.indexOfContent(this._oContentPanel) === -1) {
                    this._oHomePage.insertContent(this._oContentPanel, 0);
                    this._oSelectedBar.addStyleClass('viz-controls-chartPopover-vizSelectedBarBorder');
                }
            }
            return this;
        };

        sap.viz.chartpopover.ChartPopover.prototype._updateActionItems = function() {
            if (!this._oActionList) {
                var actionItems = this.getActionItems();
                if (actionItems && actionItems.length > 0) {
                    this._actionItems = jQuery.extend(true, this._actionItems, actionItems);

                    var item, listItems = [];
                    for (var i = 0, len = actionItems.length; i < len; i++) {
                        item = actionItems[i];
                        if (item.type === 'action') {
                            listItems.push(new sap.m.ActionListItem(this._createId('actionItems-' + i), {
                                text : item.text,
                                press : item.press ? item.press : function() {
                                }
                            }));
                        } else if (item.type === 'navigation') {
                            listItems.push(new sap.m.StandardListItem(this._createId('actionItems-' + i), {
                                title : item.text,
                                type : 'Navigation',
                                press : jQuery.proxy(function(event) {
                                    var id = event.getParameter('id');
                                    var index = parseInt(id.substring(id.lastIndexOf('-') + 1), 10);
                                    var subActionItems = this._actionItems[index].children;
                                    if (subActionItems && subActionItems.length > 0) {
                                        if (!this._oSubActionItemsPage) {
                                            this._oSubActionItemsPage = SubActionItemsPage.create();
                                            this._oNavContainer.addPage(this._oSubActionItemsPage.getControl());
                                        }

                                        this._oSubActionItemsPage.setItems(subActionItems);
                                        this._oCustomHeader.setTitle(this._actionItems[index].text);
                                        this._navigateTo(this._oSubActionItemsPage.getPageId());
                                    }
                                }, this)
                            }));
                        }
                    }
                    this._oActionList = new sap.m.List({
                        items : listItems
                    }).addStyleClass('viz-controls-chartPopover-actionList');
                    this._oHomePage.addContent(this._oActionList);
                }
            }
        };

        sap.viz.chartpopover.ChartPopover.prototype._navigateBack = function() {
            this._oNavContainer.back();
        };

        sap.viz.chartpopover.ChartPopover.prototype._navigateTo = function(pageId) {
            this._oNavContainer.to(pageId);
        };

        /**
         * Creates an id for an Element prefixed with the control id
         *
         * @return {string} id
         * @public
         */
        sap.viz.chartpopover.ChartPopover.prototype._createId = function(sId) {
            return this.getId() + "-" + sId;
        };

        /**
         * Create a new copy of data with all values formatted using "formatString" property
         * 
         * @param data original data to format
         * @return a copy of the original data with all values formatted
         */
        sap.viz.chartpopover.ChartPopover.prototype._formatData = function (data) {
            if (!data.val) {
                return data;
            }
            var formatFn = sap.viz.api.env.Format.format,
                formatted = jQuery.extend(true, {}, data),
                timeMeasureIdx = formatted.val.hasOwnProperty("timeMeasure") ? formatted.val.timeMeasure : -1,
                formatString = this.getFormatString(),
                catchAll = null,
                byMeasure = {},
                pattern;
            
            if (typeof formatString === "string") {
                catchAll = formatString;
            } else if (formatString instanceof Object) {
                byMeasure = formatString;
            }

            // convert value of time measure from milliseconds int to javascript Date object
            if(timeMeasureIdx !== -1) {
                var timeValue = formatted.val.filter(function(i) {
                    return i.type.toLowerCase() === "measure";
                })[timeMeasureIdx];
                timeValue.value = new Date(timeValue.value);
            }

            formatted.val.forEach(function(val) {
                if (val.type.toLowerCase() === "measure") {
                    pattern = byMeasure[val.id] || catchAll;
                    if (pattern) {
                        val.value = formatFn(val.value, pattern);
                    } else {
                        val.value = formatFn(val.value);
                    }
                }
            });
            return formatted;
        };
    };

    function create (id, settings) {
        try {
            if (arguments.length === 0) {
                return new sap.viz.chartpopover.ChartPopover();
            } else if (arguments.length === 1) {
                return new sap.viz.chartpopover.ChartPopover(id);
            } else {
                return new sap.viz.chartpopover.ChartPopover(id, settings);
            }
        } catch(e) {
            _declare();
            return create.apply(this, arguments);
        }
    }

    return {
        'create' : create
    };

});

// @formatter:off
define('sap/viz/controls/popover/PopOver',[
    'jquery',
    'sap/viz/controls/common/VizControlBase',
    'sap/viz/controls/common/utils/OOUtil',
    'sap/viz/controls/common/utils/Utils',
    'sap/viz/controls/common/managers/LangManager',
    'sap/viz/controls/popover/chartpopover/ChartPopover'
],
function(jQuery, VizControlBase, OOUtil, utils, LangManager, ChartPopover) {
// @formatter:on

	/**
     * UI5 dependencies: sap.m
	 * 
	 * @param {Object} dom
	 * @param {Object} uiConfig
	 */
    var PopOver = function(options) {
        PopOver.superclass.constructor.apply(this, arguments);
        this.__className = "sap.viz.controls.popover.PopOver";

        try {
            jQuery.sap.require("sap.m.Label");
            jQuery.sap.require("sap.m.List");
            jQuery.sap.require("sap.m.Bar");
            jQuery.sap.require("sap.m.Page");
            jQuery.sap.require("sap.m.ActionListItem");
            jQuery.sap.require("sap.m.ResponsivePopover");
            jQuery.sap.require("sap.m.StandardListItem");
            jQuery.sap.require("sap.m.DisplayListItem");
            jQuery.sap.require("sap.m.Panel");
            jQuery.sap.require("sap.m.Button");
        } catch(e) {
            throw utils.substitute(LangManager.get('VIZ_COMMON_DEPENDENCY_ERROR'), 'sap.m', 'PopOver');
        }
        
        this._chartPopover = ChartPopover.create(options);
          /*
          {
            
            customDataControl : function(selectedData){
              console.log(selectedData);
              return new sap.m.Button({text: 'ff'});
            },
            
            'actionItems' : [
              {type: 'action', text: 'Action Item 1'},
              {type: 'navigation', text: 'Action Item 2', 
                children : [
                  {text: 'subActionItem'}
              ]},
              {type: 'navigation', text: 'Action Item 3', 
                children : [
                  {text: 'subActionItem 3-1'},
                  {text: 'subActionItem 3-2'}
              ]}
            ]
          });*/
          /*{
          'actionItems' : [
            {type: 'action', text: 'Action Item 1'},
            {type: 'navigation', text: 'Action Item 2', 
              children : [
                {text: 'subActionItem'}
            ]},
            {type: 'navigation', text: 'Action Item 3', 
              children : [
                {text: 'subActionItem 3-1'},
                {text: 'subActionItem 3-2'}
            ]}
          ]});*/
        /*
        var content = [
            new sap.m.Button({
                text : "SLIDE to Page 3",
                press : function() {
                    app.to("page3", "slide");
                }
            }), 
            new sap.m.Button({
                text : "FADE to Page 3",
                press : function() {
                    app.to("page3", "fade");
                }
            }), 
            new sap.m.Button({
                text : "SHOW to Page 3",
                press : function() {
                    app.to("page3", "show");
                }
            }), 
            new sap.m.Label({
                text : "The following field shows the data passed from page 1:"
            }), 
            new sap.m.Input("p2input", {
                value : null,
                width: "100%"
            }), 
            new sap.ui.core.HTML({content:"<div>This page does not scroll.</div>"}) 
          ];
          this.setContents(content);
          var actionItem = [
            new sap.m.ActionListItem({
              text : 'Action 1'
            }),
            new sap.m.StandardListItem({
              title : 'Actions',
              type : 'Navigation',
              //press : handleNavigator
            })
          ];
          this.setActionItems(actionItem);
          var subActionItem = [
             new sap.m.ActionListItem({
               text : 'Action 1'
             }),
             new sap.m.ActionListItem({
               text : 'Action 2'
             })
           ];
           this.setSubActionItems(subActionItem);
*/
    };
    OOUtil.extend(PopOver, VizControlBase);

    PopOver.prototype._onConnect = function(vizUid, modelChanged) {
        PopOver.superclass._onConnect.apply(this, arguments);
        this._vizProxy().on('showTooltip.PopOver', jQuery.proxy(function(event){
        // TODO
            this._chartPopover.setOptions(event.data).openBy(event.data.target);
        }, this));
        this._vizProxy().on('hideTooltip.PopOver', jQuery.proxy(function(){
            this._chartPopover.close();
        }, this));
        // TODO Create things which are associate to VizFrame
    };

    PopOver.prototype._onDisconnect = function() {
        PopOver.superclass._onDisconnect.apply(this, arguments);
        this._vizProxy().off('showTootip.PopOver');
        this._vizProxy().off('hideTooltip.PopOver');
        // TODO Destroy things which are associate to VizFrame
    };
    
    PopOver.prototype.destroy = function() {
        PopOver.superclass.destroy.apply(this, arguments);
        this._vizProxy().off('showTooltip.PopOver');
        this._vizProxy().off('hideTooltip.PopOver');
        // TODO Destroy everything
    };

    PopOver.prototype.setContents = function(content){
        this._chartPopover.setCustomDataControl(content);
    };

    PopOver.prototype.setActionItems = function(items){
        this._chartPopover.setActionItems(items);
    };

    PopOver.prototype.setSubActionItems = function(items){
        this._chartPopover.setSubActionItems(items);
    };

    PopOver.prototype.setFormatString = function(v) {
        this._chartPopover.setFormatString(v);
    };

    return PopOver;
});
//Export modules in the list to global scope
(function(global) {
    // @formatter:off
    var exportedList = ("sap/viz/controls/Version,sap/viz/controls/common/config/GlobalConfig,sap/viz/controls/common/constants/ChartConst,sap/viz/controls/common/constants/DatasetTypeConst,sap/viz/controls/common/constants/FilterEventConst,sap/viz/controls/common/feeds/AnalysisObject,sap/viz/controls/common/feeds/AnalyticalType,sap/viz/controls/common/feeds/FeedItem,sap/viz/controls/common/feeds/FeedItemType,sap/viz/controls/common/feeds/HierarchyLevelObject,sap/viz/controls/common/feeds/SubtotalItemType,sap/viz/controls/common/filter/DateRangeFilter,sap/viz/controls/common/filter/NumericRangeFilter,sap/viz/controls/common/filter/ValueFilter,sap/viz/controls/common/managers/DragManager,sap/viz/controls/common/utils/Serialization,sap/viz/controls/common/utils/Feeds,sap/viz/controls/common/views/menu/MenuGroup,sap/viz/controls/common/views/menu/MenuItem,sap/viz/controls/common/views/feed/FeedListEvent,sap/viz/controls/common/events/FeedEvent,sap/viz/controls/services/FakeDataService,sap/viz/controls/chart/Chart,sap/viz/controls/chart/Metadata,sap/viz/controls/chart/views/ChartEvent,sap/viz/controls/frame/VizFrame,sap/viz/controls/frame/VizFrameEvent,sap/viz/controls/playcontrol/PlayControl,sap/viz/controls/popover/PopOver,sap/viz/controls/dedicatedlegend/DedicatedLegend").split(/,\s*/);
    if (exportedList[0] === "// REPLACE_" + "EXPORT_LIST_HERE") exportedList = [
        'sap/viz/controls/builder/VizBuilder',
        'sap/viz/controls/chart/Chart',
        'sap/viz/controls/chart/views/ChartEvent',
        'sap/viz/controls/chart/Metadata',
        'sap/viz/controls/common/config/GlobalConfig',
        'sap/viz/controls/common/constants/ChartConst',
        'sap/viz/controls/common/constants/DatasetTypeConst',
        'sap/viz/controls/common/constants/FilterEventConst',
        'sap/viz/controls/common/feeds/AnalysisObject',
        'sap/viz/controls/common/feeds/AnalyticalType',
        'sap/viz/controls/common/feeds/FeedItem',
        'sap/viz/controls/common/feeds/FeedItemType',
        'sap/viz/controls/common/feeds/AnalyticalType',
        'sap/viz/controls/common/feeds/HierarchyLevelObject',
        'sap/viz/controls/common/filter/DateRangeFilter',
        'sap/viz/controls/common/filter/NumericRangeFilter',
        'sap/viz/controls/common/filter/ValueFilter',
        'sap/viz/controls/common/feeds/SubtotalItemType',
        'sap/viz/controls/common/managers/DragManager',
        'sap/viz/controls/common/utils/Serialization',
        'sap/viz/controls/common/utils/Feeds',
        'sap/viz/controls/common/views/menu/MenuGroup',
        'sap/viz/controls/common/views/menu/MenuItem',
        'sap/viz/controls/common/views/feed/FeedListEvent',
        'sap/viz/controls/common/events/FeedEvent',
        'sap/viz/controls/feeding/FeedingPanel',
        'sap/viz/controls/filterbar/FilterBar',
        'sap/viz/controls/filterbar/FilterBarEvent',
        'sap/viz/controls/filterbar/FilterItem',
        'sap/viz/controls/frame/VizFrame',
        'sap/viz/controls/frame/VizFrameEvent',
        'sap/viz/controls/mapbuilder/MapBuilder',
        'sap/viz/controls/playcontrol/PlayControl',
        'sap/viz/controls/propertyeditor/PropertyEditor',
        'sap/viz/controls/services/FakeDataService',
        'sap/viz/controls/switchbar/SwitchBar',
        'sap/viz/controls/popover/PopOver',
        'sap/viz/controls/dedicatedlegend/DedicatedLegend',
        'sap/viz/controls/Version'
    ];
    // @formatter:on
    var jq = global.jQuery;

    if (jq) {
        if (jQuery.holdReady) {
            jQuery.holdReady(true);
        } else {
            jQuery.readyWait += 1;
        }
    }
    //put modules on global object
    require(exportedList, function() {
        var exports = arguments;

        exportedList.forEach(function(mod, i) {
            var nameParts = mod.split("/");
            nameParts.reduce(function(p, c, index) {
                if (!p[c]) {
                    if (index < nameParts.length - 1) {
                        p[c] = {};
                    } else {
                        p[c] = exports[i];
                    }
                }
                return p[c];
            }, global);
        });
        if (jq) {
            if (jQuery.holdReady) {
                jQuery.holdReady(false);
            } else {
                jQuery.ready(true);
            }
        }
    });

    try {
        // request setup to execute its defination
        void require( ['sap/viz/controls/plugins/infochart/setup'] );
    } catch (e) {
    }

})(this);
if (window.__sap_viz_internal_requirejs_nextTick__ !== undefined) {
    if (requirejs && requirejs.s && requirejs.s.contexts && requirejs.s.contexts._) {
        requirejs.s.contexts._.nextTick = window.__sap_viz_internal_requirejs_nextTick__;
    }
    window.__sap_viz_internal_requirejs_nextTick__ = undefined;
}